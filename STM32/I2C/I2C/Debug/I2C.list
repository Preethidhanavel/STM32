
I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038c8  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003a50  08003a50  00004a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a98  08003a98  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003a98  08003a98  00004a98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003aa0  08003aa0  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003aa0  08003aa0  00004aa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003aa4  08003aa4  00004aa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08003aa8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000001c  08003ac4  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000118  08003ac4  00005118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d3d8  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001bee  00000000  00000000  00012424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bb8  00000000  00000000  00014018  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000091f  00000000  00000000  00014bd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025fce  00000000  00000000  000154ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e780  00000000  00000000  0003b4bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ea3da  00000000  00000000  00049c3d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00134017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000307c  00000000  00000000  0013405c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  001370d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003a38 	.word	0x08003a38

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003a38 	.word	0x08003a38

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fa:	f000 faa5 	bl	8000a48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004fe:	f000 f82b 	bl	8000558 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */
  uint16_t ESP32_ADDR = 0x68;
 8000502:	2368      	movs	r3, #104	@ 0x68
 8000504:	80fb      	strh	r3, [r7, #6]
  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000506:	f000 f8e9 	bl	80006dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800050a:	f000 f8b7 	bl	800067c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800050e:	f000 f875 	bl	80005fc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_Master_Transmit(&hi2c1, ESP32_ADDR << 1, txData, sizeof(txData)-1, HAL_MAX_DELAY) == HAL_OK)
 8000512:	88fb      	ldrh	r3, [r7, #6]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	b299      	uxth	r1, r3
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	230c      	movs	r3, #12
 8000520:	4a0b      	ldr	r2, [pc, #44]	@ (8000550 <main+0x5c>)
 8000522:	480c      	ldr	r0, [pc, #48]	@ (8000554 <main+0x60>)
 8000524:	f000 fe50 	bl	80011c8 <HAL_I2C_Master_Transmit>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d106      	bne.n	800053c <main+0x48>
      {
	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 800052e:	2201      	movs	r2, #1
 8000530:	2120      	movs	r1, #32
 8000532:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000536:	f000 fd93 	bl	8001060 <HAL_GPIO_WritePin>
 800053a:	e006      	b.n	800054a <main+0x56>
	  // Data sent OK
      }
      else
      {
    	  HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 800053c:	2200      	movs	r2, #0
 800053e:	2120      	movs	r1, #32
 8000540:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000544:	f000 fd8c 	bl	8001060 <HAL_GPIO_WritePin>

//  HAL_I2C_Mem_Read(&hi2c1, ADXL345_ADDR, 0x00, 1, &id, 1, HAL_MAX_DELAY);
//  snprintf(msg, sizeof(msg), "Device ID: 0x%X\r\n", id);
 // HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);

      while (1)
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	e7fd      	b.n	800054a <main+0x56>
 800054e:	bf00      	nop
 8000550:	20000000 	.word	0x20000000
 8000554:	20000038 	.word	0x20000038

08000558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b096      	sub	sp, #88	@ 0x58
 800055c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055e:	f107 0314 	add.w	r3, r7, #20
 8000562:	2244      	movs	r2, #68	@ 0x44
 8000564:	2100      	movs	r1, #0
 8000566:	4618      	mov	r0, r3
 8000568:	f003 fa39 	bl	80039de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800056c:	463b      	mov	r3, r7
 800056e:	2200      	movs	r2, #0
 8000570:	601a      	str	r2, [r3, #0]
 8000572:	605a      	str	r2, [r3, #4]
 8000574:	609a      	str	r2, [r3, #8]
 8000576:	60da      	str	r2, [r3, #12]
 8000578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800057e:	f001 f9fb 	bl	8001978 <HAL_PWREx_ControlVoltageScaling>
 8000582:	4603      	mov	r3, r0
 8000584:	2b00      	cmp	r3, #0
 8000586:	d001      	beq.n	800058c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000588:	f000 f90e 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800058c:	2302      	movs	r3, #2
 800058e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000590:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000596:	2310      	movs	r3, #16
 8000598:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059a:	2302      	movs	r3, #2
 800059c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800059e:	2302      	movs	r3, #2
 80005a0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005a6:	230a      	movs	r3, #10
 80005a8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005aa:	2307      	movs	r3, #7
 80005ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ae:	2302      	movs	r3, #2
 80005b0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b6:	f107 0314 	add.w	r3, r7, #20
 80005ba:	4618      	mov	r0, r3
 80005bc:	f001 fa32 	bl	8001a24 <HAL_RCC_OscConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005c6:	f000 f8ef 	bl	80007a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ca:	230f      	movs	r3, #15
 80005cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ce:	2303      	movs	r3, #3
 80005d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005de:	463b      	mov	r3, r7
 80005e0:	2104      	movs	r1, #4
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 fdfa 	bl	80021dc <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005ee:	f000 f8db 	bl	80007a8 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3758      	adds	r7, #88	@ 0x58
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000600:	4b1b      	ldr	r3, [pc, #108]	@ (8000670 <MX_I2C1_Init+0x74>)
 8000602:	4a1c      	ldr	r2, [pc, #112]	@ (8000674 <MX_I2C1_Init+0x78>)
 8000604:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8000606:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <MX_I2C1_Init+0x74>)
 8000608:	4a1b      	ldr	r2, [pc, #108]	@ (8000678 <MX_I2C1_Init+0x7c>)
 800060a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800060c:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <MX_I2C1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000612:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <MX_I2C1_Init+0x74>)
 8000614:	2201      	movs	r2, #1
 8000616:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_I2C1_Init+0x74>)
 800061a:	2200      	movs	r2, #0
 800061c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800061e:	4b14      	ldr	r3, [pc, #80]	@ (8000670 <MX_I2C1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000624:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_I2C1_Init+0x74>)
 8000626:	2200      	movs	r2, #0
 8000628:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800062a:	4b11      	ldr	r3, [pc, #68]	@ (8000670 <MX_I2C1_Init+0x74>)
 800062c:	2200      	movs	r2, #0
 800062e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000630:	4b0f      	ldr	r3, [pc, #60]	@ (8000670 <MX_I2C1_Init+0x74>)
 8000632:	2200      	movs	r2, #0
 8000634:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000636:	480e      	ldr	r0, [pc, #56]	@ (8000670 <MX_I2C1_Init+0x74>)
 8000638:	f000 fd2a 	bl	8001090 <HAL_I2C_Init>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000642:	f000 f8b1 	bl	80007a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000646:	2100      	movs	r1, #0
 8000648:	4809      	ldr	r0, [pc, #36]	@ (8000670 <MX_I2C1_Init+0x74>)
 800064a:	f001 f8ef 	bl	800182c <HAL_I2CEx_ConfigAnalogFilter>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000654:	f000 f8a8 	bl	80007a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000658:	2100      	movs	r1, #0
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_I2C1_Init+0x74>)
 800065c:	f001 f931 	bl	80018c2 <HAL_I2CEx_ConfigDigitalFilter>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000666:	f000 f89f 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000038 	.word	0x20000038
 8000674:	40005400 	.word	0x40005400
 8000678:	10d19ce4 	.word	0x10d19ce4

0800067c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000680:	4b14      	ldr	r3, [pc, #80]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 8000682:	4a15      	ldr	r2, [pc, #84]	@ (80006d8 <MX_USART2_UART_Init+0x5c>)
 8000684:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000686:	4b13      	ldr	r3, [pc, #76]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 8000688:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800068c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006a2:	220c      	movs	r2, #12
 80006a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b8:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	@ (80006d4 <MX_USART2_UART_Init+0x58>)
 80006c0:	f002 fc6c 	bl	8002f9c <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ca:	f000 f86d 	bl	80007a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	2000008c 	.word	0x2000008c
 80006d8:	40004400 	.word	0x40004400

080006dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	@ 0x28
 80006e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e2:	f107 0314 	add.w	r3, r7, #20
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006f2:	4b2b      	ldr	r3, [pc, #172]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a2a      	ldr	r2, [pc, #168]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 80006f8:	f043 0304 	orr.w	r3, r3, #4
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b28      	ldr	r3, [pc, #160]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0304 	and.w	r3, r3, #4
 8000706:	613b      	str	r3, [r7, #16]
 8000708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800070a:	4b25      	ldr	r3, [pc, #148]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a24      	ldr	r2, [pc, #144]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 8000710:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b22      	ldr	r3, [pc, #136]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000722:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a1e      	ldr	r2, [pc, #120]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b1c      	ldr	r3, [pc, #112]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	60bb      	str	r3, [r7, #8]
 8000738:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800073a:	4b19      	ldr	r3, [pc, #100]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a18      	ldr	r2, [pc, #96]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b16      	ldr	r3, [pc, #88]	@ (80007a0 <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	2120      	movs	r1, #32
 8000756:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800075a:	f000 fc81 	bl	8001060 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000764:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000768:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076a:	2300      	movs	r3, #0
 800076c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076e:	f107 0314 	add.w	r3, r7, #20
 8000772:	4619      	mov	r1, r3
 8000774:	480b      	ldr	r0, [pc, #44]	@ (80007a4 <MX_GPIO_Init+0xc8>)
 8000776:	f000 fac9 	bl	8000d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800077a:	2320      	movs	r3, #32
 800077c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	2301      	movs	r3, #1
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000786:	2300      	movs	r3, #0
 8000788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800078a:	f107 0314 	add.w	r3, r7, #20
 800078e:	4619      	mov	r1, r3
 8000790:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000794:	f000 faba 	bl	8000d0c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000798:	bf00      	nop
 800079a:	3728      	adds	r7, #40	@ 0x28
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40021000 	.word	0x40021000
 80007a4:	48000800 	.word	0x48000800

080007a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ac:	b672      	cpsid	i
}
 80007ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <Error_Handler+0x8>

080007b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ba:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <HAL_MspInit+0x44>)
 80007bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007be:	4a0e      	ldr	r2, [pc, #56]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6613      	str	r3, [r2, #96]	@ 0x60
 80007c6:	4b0c      	ldr	r3, [pc, #48]	@ (80007f8 <HAL_MspInit+0x44>)
 80007c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	607b      	str	r3, [r7, #4]
 80007d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d2:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d6:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_MspInit+0x44>)
 80007d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <HAL_MspInit+0x44>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007e6:	603b      	str	r3, [r7, #0]
 80007e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ea:	bf00      	nop
 80007ec:	370c      	adds	r7, #12
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b0ac      	sub	sp, #176	@ 0xb0
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000814:	f107 0314 	add.w	r3, r7, #20
 8000818:	2288      	movs	r2, #136	@ 0x88
 800081a:	2100      	movs	r1, #0
 800081c:	4618      	mov	r0, r3
 800081e:	f003 f8de 	bl	80039de <memset>
  if(hi2c->Instance==I2C1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a21      	ldr	r2, [pc, #132]	@ (80008ac <HAL_I2C_MspInit+0xb0>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d13a      	bne.n	80008a2 <HAL_I2C_MspInit+0xa6>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800082c:	2340      	movs	r3, #64	@ 0x40
 800082e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000830:	2300      	movs	r3, #0
 8000832:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f001 fef3 	bl	8002624 <HAL_RCCEx_PeriphCLKConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000844:	f7ff ffb0 	bl	80007a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b19      	ldr	r3, [pc, #100]	@ (80008b0 <HAL_I2C_MspInit+0xb4>)
 800084a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800084c:	4a18      	ldr	r2, [pc, #96]	@ (80008b0 <HAL_I2C_MspInit+0xb4>)
 800084e:	f043 0302 	orr.w	r3, r3, #2
 8000852:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000854:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <HAL_I2C_MspInit+0xb4>)
 8000856:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	613b      	str	r3, [r7, #16]
 800085e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000860:	23c0      	movs	r3, #192	@ 0xc0
 8000862:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000866:	2312      	movs	r3, #18
 8000868:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000872:	2303      	movs	r3, #3
 8000874:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000878:	2304      	movs	r3, #4
 800087a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000882:	4619      	mov	r1, r3
 8000884:	480b      	ldr	r0, [pc, #44]	@ (80008b4 <HAL_I2C_MspInit+0xb8>)
 8000886:	f000 fa41 	bl	8000d0c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <HAL_I2C_MspInit+0xb4>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800088e:	4a08      	ldr	r2, [pc, #32]	@ (80008b0 <HAL_I2C_MspInit+0xb4>)
 8000890:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000894:	6593      	str	r3, [r2, #88]	@ 0x58
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <HAL_I2C_MspInit+0xb4>)
 8000898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800089a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80008a2:	bf00      	nop
 80008a4:	37b0      	adds	r7, #176	@ 0xb0
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	40005400 	.word	0x40005400
 80008b0:	40021000 	.word	0x40021000
 80008b4:	48000400 	.word	0x48000400

080008b8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b0ac      	sub	sp, #176	@ 0xb0
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2288      	movs	r2, #136	@ 0x88
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f003 f880 	bl	80039de <memset>
  if(huart->Instance==USART2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a21      	ldr	r2, [pc, #132]	@ (8000968 <HAL_UART_MspInit+0xb0>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d13b      	bne.n	8000960 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fe95 	bl	8002624 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000900:	f7ff ff52 	bl	80007a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000904:	4b19      	ldr	r3, [pc, #100]	@ (800096c <HAL_UART_MspInit+0xb4>)
 8000906:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000908:	4a18      	ldr	r2, [pc, #96]	@ (800096c <HAL_UART_MspInit+0xb4>)
 800090a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800090e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000910:	4b16      	ldr	r3, [pc, #88]	@ (800096c <HAL_UART_MspInit+0xb4>)
 8000912:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000914:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b13      	ldr	r3, [pc, #76]	@ (800096c <HAL_UART_MspInit+0xb4>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000920:	4a12      	ldr	r2, [pc, #72]	@ (800096c <HAL_UART_MspInit+0xb4>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000928:	4b10      	ldr	r3, [pc, #64]	@ (800096c <HAL_UART_MspInit+0xb4>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000934:	230c      	movs	r3, #12
 8000936:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800093a:	2302      	movs	r3, #2
 800093c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800094c:	2307      	movs	r3, #7
 800094e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800095c:	f000 f9d6 	bl	8000d0c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000960:	bf00      	nop
 8000962:	37b0      	adds	r7, #176	@ 0xb0
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40004400 	.word	0x40004400
 800096c:	40021000 	.word	0x40021000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000974:	bf00      	nop
 8000976:	e7fd      	b.n	8000974 <NMI_Handler+0x4>

08000978 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <HardFault_Handler+0x4>

08000980 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <MemManage_Handler+0x4>

08000988 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <UsageFault_Handler+0x4>

08000998 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009aa:	bf00      	nop
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b8:	bf00      	nop
 80009ba:	46bd      	mov	sp, r7
 80009bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c0:	4770      	bx	lr

080009c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c6:	f000 f89b 	bl	8000b00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <SystemInit+0x20>)
 80009d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80009da:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <SystemInit+0x20>)
 80009dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80009e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80009e4:	bf00      	nop
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009f8:	f7ff ffea 	bl	80009d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009fc:	480c      	ldr	r0, [pc, #48]	@ (8000a30 <LoopForever+0x6>)
  ldr r1, =_edata
 80009fe:	490d      	ldr	r1, [pc, #52]	@ (8000a34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a00:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <LoopForever+0xe>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a04:	e002      	b.n	8000a0c <LoopCopyDataInit>

08000a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0a:	3304      	adds	r3, #4

08000a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a10:	d3f9      	bcc.n	8000a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a12:	4a0a      	ldr	r2, [pc, #40]	@ (8000a3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a14:	4c0a      	ldr	r4, [pc, #40]	@ (8000a40 <LoopForever+0x16>)
  movs r3, #0
 8000a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a18:	e001      	b.n	8000a1e <LoopFillZerobss>

08000a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a1c:	3204      	adds	r2, #4

08000a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a20:	d3fb      	bcc.n	8000a1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a22:	f002 ffe5 	bl	80039f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a26:	f7ff fd65 	bl	80004f4 <main>

08000a2a <LoopForever>:

LoopForever:
    b LoopForever
 8000a2a:	e7fe      	b.n	8000a2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a2c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a34:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000a38:	08003aa8 	.word	0x08003aa8
  ldr r2, =_sbss
 8000a3c:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000a40:	20000118 	.word	0x20000118

08000a44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a44:	e7fe      	b.n	8000a44 <ADC1_2_IRQHandler>
	...

08000a48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a52:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <HAL_Init+0x3c>)
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	4a0b      	ldr	r2, [pc, #44]	@ (8000a84 <HAL_Init+0x3c>)
 8000a58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000a5c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a5e:	2003      	movs	r0, #3
 8000a60:	f000 f920 	bl	8000ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a64:	2000      	movs	r0, #0
 8000a66:	f000 f80f 	bl	8000a88 <HAL_InitTick>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d002      	beq.n	8000a76 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000a70:	2301      	movs	r3, #1
 8000a72:	71fb      	strb	r3, [r7, #7]
 8000a74:	e001      	b.n	8000a7a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a76:	f7ff fe9d 	bl	80007b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3708      	adds	r7, #8
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40022000 	.word	0x40022000

08000a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a90:	2300      	movs	r3, #0
 8000a92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a94:	4b17      	ldr	r3, [pc, #92]	@ (8000af4 <HAL_InitTick+0x6c>)
 8000a96:	781b      	ldrb	r3, [r3, #0]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d023      	beq.n	8000ae4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a9c:	4b16      	ldr	r3, [pc, #88]	@ (8000af8 <HAL_InitTick+0x70>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b14      	ldr	r3, [pc, #80]	@ (8000af4 <HAL_InitTick+0x6c>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f91d 	bl	8000cf2 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10f      	bne.n	8000ade <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d809      	bhi.n	8000ad8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	6879      	ldr	r1, [r7, #4]
 8000ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8000acc:	f000 f8f5 	bl	8000cba <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ad0:	4a0a      	ldr	r2, [pc, #40]	@ (8000afc <HAL_InitTick+0x74>)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	6013      	str	r3, [r2, #0]
 8000ad6:	e007      	b.n	8000ae8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	73fb      	strb	r3, [r7, #15]
 8000adc:	e004      	b.n	8000ae8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	73fb      	strb	r3, [r7, #15]
 8000ae2:	e001      	b.n	8000ae8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	3710      	adds	r7, #16
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20000018 	.word	0x20000018
 8000af8:	20000010 	.word	0x20000010
 8000afc:	20000014 	.word	0x20000014

08000b00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b04:	4b06      	ldr	r3, [pc, #24]	@ (8000b20 <HAL_IncTick+0x20>)
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <HAL_IncTick+0x24>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4413      	add	r3, r2
 8000b10:	4a04      	ldr	r2, [pc, #16]	@ (8000b24 <HAL_IncTick+0x24>)
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	20000018 	.word	0x20000018
 8000b24:	20000114 	.word	0x20000114

08000b28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b2c:	4b03      	ldr	r3, [pc, #12]	@ (8000b3c <HAL_GetTick+0x14>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	20000114 	.word	0x20000114

08000b40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b50:	4b0c      	ldr	r3, [pc, #48]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b52:	68db      	ldr	r3, [r3, #12]
 8000b54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b5c:	4013      	ands	r3, r2
 8000b5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b72:	4a04      	ldr	r2, [pc, #16]	@ (8000b84 <__NVIC_SetPriorityGrouping+0x44>)
 8000b74:	68bb      	ldr	r3, [r7, #8]
 8000b76:	60d3      	str	r3, [r2, #12]
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	e000ed00 	.word	0xe000ed00

08000b88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b8c:	4b04      	ldr	r3, [pc, #16]	@ (8000ba0 <__NVIC_GetPriorityGrouping+0x18>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	0a1b      	lsrs	r3, r3, #8
 8000b92:	f003 0307 	and.w	r3, r3, #7
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9e:	4770      	bx	lr
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	b083      	sub	sp, #12
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	4603      	mov	r3, r0
 8000bac:	6039      	str	r1, [r7, #0]
 8000bae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db0a      	blt.n	8000bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	490c      	ldr	r1, [pc, #48]	@ (8000bf0 <__NVIC_SetPriority+0x4c>)
 8000bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bc2:	0112      	lsls	r2, r2, #4
 8000bc4:	b2d2      	uxtb	r2, r2
 8000bc6:	440b      	add	r3, r1
 8000bc8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bcc:	e00a      	b.n	8000be4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	b2da      	uxtb	r2, r3
 8000bd2:	4908      	ldr	r1, [pc, #32]	@ (8000bf4 <__NVIC_SetPriority+0x50>)
 8000bd4:	79fb      	ldrb	r3, [r7, #7]
 8000bd6:	f003 030f 	and.w	r3, r3, #15
 8000bda:	3b04      	subs	r3, #4
 8000bdc:	0112      	lsls	r2, r2, #4
 8000bde:	b2d2      	uxtb	r2, r2
 8000be0:	440b      	add	r3, r1
 8000be2:	761a      	strb	r2, [r3, #24]
}
 8000be4:	bf00      	nop
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000e100 	.word	0xe000e100
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b089      	sub	sp, #36	@ 0x24
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	60f8      	str	r0, [r7, #12]
 8000c00:	60b9      	str	r1, [r7, #8]
 8000c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f003 0307 	and.w	r3, r3, #7
 8000c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c0c:	69fb      	ldr	r3, [r7, #28]
 8000c0e:	f1c3 0307 	rsb	r3, r3, #7
 8000c12:	2b04      	cmp	r3, #4
 8000c14:	bf28      	it	cs
 8000c16:	2304      	movcs	r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	3304      	adds	r3, #4
 8000c1e:	2b06      	cmp	r3, #6
 8000c20:	d902      	bls.n	8000c28 <NVIC_EncodePriority+0x30>
 8000c22:	69fb      	ldr	r3, [r7, #28]
 8000c24:	3b03      	subs	r3, #3
 8000c26:	e000      	b.n	8000c2a <NVIC_EncodePriority+0x32>
 8000c28:	2300      	movs	r3, #0
 8000c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c30:	69bb      	ldr	r3, [r7, #24]
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43da      	mvns	r2, r3
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	401a      	ands	r2, r3
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c40:	f04f 31ff 	mov.w	r1, #4294967295
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	fa01 f303 	lsl.w	r3, r1, r3
 8000c4a:	43d9      	mvns	r1, r3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c50:	4313      	orrs	r3, r2
         );
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3724      	adds	r7, #36	@ 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	3b01      	subs	r3, #1
 8000c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000c70:	d301      	bcc.n	8000c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c72:	2301      	movs	r3, #1
 8000c74:	e00f      	b.n	8000c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	3b01      	subs	r3, #1
 8000c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7e:	210f      	movs	r1, #15
 8000c80:	f04f 30ff 	mov.w	r0, #4294967295
 8000c84:	f7ff ff8e 	bl	8000ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8e:	4b04      	ldr	r3, [pc, #16]	@ (8000ca0 <SysTick_Config+0x40>)
 8000c90:	2207      	movs	r2, #7
 8000c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3708      	adds	r7, #8
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	e000e010 	.word	0xe000e010

08000ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cac:	6878      	ldr	r0, [r7, #4]
 8000cae:	f7ff ff47 	bl	8000b40 <__NVIC_SetPriorityGrouping>
}
 8000cb2:	bf00      	nop
 8000cb4:	3708      	adds	r7, #8
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}

08000cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cba:	b580      	push	{r7, lr}
 8000cbc:	b086      	sub	sp, #24
 8000cbe:	af00      	add	r7, sp, #0
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	60b9      	str	r1, [r7, #8]
 8000cc4:	607a      	str	r2, [r7, #4]
 8000cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ccc:	f7ff ff5c 	bl	8000b88 <__NVIC_GetPriorityGrouping>
 8000cd0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd2:	687a      	ldr	r2, [r7, #4]
 8000cd4:	68b9      	ldr	r1, [r7, #8]
 8000cd6:	6978      	ldr	r0, [r7, #20]
 8000cd8:	f7ff ff8e 	bl	8000bf8 <NVIC_EncodePriority>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce2:	4611      	mov	r1, r2
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff ff5d 	bl	8000ba4 <__NVIC_SetPriority>
}
 8000cea:	bf00      	nop
 8000cec:	3718      	adds	r7, #24
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	f7ff ffb0 	bl	8000c60 <SysTick_Config>
 8000d00:	4603      	mov	r3, r0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
	...

08000d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b087      	sub	sp, #28
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d16:	2300      	movs	r3, #0
 8000d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1a:	e17f      	b.n	800101c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	2101      	movs	r1, #1
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	fa01 f303 	lsl.w	r3, r1, r3
 8000d28:	4013      	ands	r3, r2
 8000d2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f000 8171 	beq.w	8001016 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0303 	and.w	r3, r3, #3
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d005      	beq.n	8000d4c <HAL_GPIO_Init+0x40>
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d130      	bne.n	8000dae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	689b      	ldr	r3, [r3, #8]
 8000d50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	005b      	lsls	r3, r3, #1
 8000d56:	2203      	movs	r2, #3
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	68da      	ldr	r2, [r3, #12]
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	4313      	orrs	r3, r2
 8000d74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	693a      	ldr	r2, [r7, #16]
 8000d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d82:	2201      	movs	r2, #1
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	091b      	lsrs	r3, r3, #4
 8000d98:	f003 0201 	and.w	r2, r3, #1
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
 8000db6:	2b03      	cmp	r3, #3
 8000db8:	d118      	bne.n	8000dec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	693a      	ldr	r2, [r7, #16]
 8000dcc:	4013      	ands	r3, r2
 8000dce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	f003 0201 	and.w	r2, r3, #1
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	693a      	ldr	r2, [r7, #16]
 8000dea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f003 0303 	and.w	r3, r3, #3
 8000df4:	2b03      	cmp	r3, #3
 8000df6:	d017      	beq.n	8000e28 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	2203      	movs	r2, #3
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	689a      	ldr	r2, [r3, #8]
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	005b      	lsls	r3, r3, #1
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	f003 0303 	and.w	r3, r3, #3
 8000e30:	2b02      	cmp	r3, #2
 8000e32:	d123      	bne.n	8000e7c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	08da      	lsrs	r2, r3, #3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3208      	adds	r2, #8
 8000e3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e40:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	f003 0307 	and.w	r3, r3, #7
 8000e48:	009b      	lsls	r3, r3, #2
 8000e4a:	220f      	movs	r2, #15
 8000e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e50:	43db      	mvns	r3, r3
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	4013      	ands	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	f003 0307 	and.w	r3, r3, #7
 8000e62:	009b      	lsls	r3, r3, #2
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	08da      	lsrs	r2, r3, #3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	3208      	adds	r2, #8
 8000e76:	6939      	ldr	r1, [r7, #16]
 8000e78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	005b      	lsls	r3, r3, #1
 8000e86:	2203      	movs	r2, #3
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	693a      	ldr	r2, [r7, #16]
 8000e90:	4013      	ands	r3, r2
 8000e92:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0203 	and.w	r2, r3, #3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	005b      	lsls	r3, r3, #1
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	4313      	orrs	r3, r2
 8000ea8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80ac 	beq.w	8001016 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800103c <HAL_GPIO_Init+0x330>)
 8000ec0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800103c <HAL_GPIO_Init+0x330>)
 8000ec4:	f043 0301 	orr.w	r3, r3, #1
 8000ec8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000eca:	4b5c      	ldr	r3, [pc, #368]	@ (800103c <HAL_GPIO_Init+0x330>)
 8000ecc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ece:	f003 0301 	and.w	r3, r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
 8000ed4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed6:	4a5a      	ldr	r2, [pc, #360]	@ (8001040 <HAL_GPIO_Init+0x334>)
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	089b      	lsrs	r3, r3, #2
 8000edc:	3302      	adds	r3, #2
 8000ede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f003 0303 	and.w	r3, r3, #3
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f00:	d025      	beq.n	8000f4e <HAL_GPIO_Init+0x242>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4f      	ldr	r2, [pc, #316]	@ (8001044 <HAL_GPIO_Init+0x338>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d01f      	beq.n	8000f4a <HAL_GPIO_Init+0x23e>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001048 <HAL_GPIO_Init+0x33c>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d019      	beq.n	8000f46 <HAL_GPIO_Init+0x23a>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a4d      	ldr	r2, [pc, #308]	@ (800104c <HAL_GPIO_Init+0x340>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d013      	beq.n	8000f42 <HAL_GPIO_Init+0x236>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001050 <HAL_GPIO_Init+0x344>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d00d      	beq.n	8000f3e <HAL_GPIO_Init+0x232>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a4b      	ldr	r2, [pc, #300]	@ (8001054 <HAL_GPIO_Init+0x348>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d007      	beq.n	8000f3a <HAL_GPIO_Init+0x22e>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001058 <HAL_GPIO_Init+0x34c>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d101      	bne.n	8000f36 <HAL_GPIO_Init+0x22a>
 8000f32:	2306      	movs	r3, #6
 8000f34:	e00c      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f36:	2307      	movs	r3, #7
 8000f38:	e00a      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f3a:	2305      	movs	r3, #5
 8000f3c:	e008      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f3e:	2304      	movs	r3, #4
 8000f40:	e006      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f42:	2303      	movs	r3, #3
 8000f44:	e004      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f46:	2302      	movs	r3, #2
 8000f48:	e002      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e000      	b.n	8000f50 <HAL_GPIO_Init+0x244>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	f002 0203 	and.w	r2, r2, #3
 8000f56:	0092      	lsls	r2, r2, #2
 8000f58:	4093      	lsls	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f60:	4937      	ldr	r1, [pc, #220]	@ (8001040 <HAL_GPIO_Init+0x334>)
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	089b      	lsrs	r3, r3, #2
 8000f66:	3302      	adds	r3, #2
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f6e:	4b3b      	ldr	r3, [pc, #236]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d003      	beq.n	8000f92 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f8a:	693a      	ldr	r2, [r7, #16]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f92:	4a32      	ldr	r2, [pc, #200]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f98:	4b30      	ldr	r3, [pc, #192]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fbc:	4a27      	ldr	r2, [pc, #156]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fc2:	4b26      	ldr	r3, [pc, #152]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000fc4:	685b      	ldr	r3, [r3, #4]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	@ (800105c <HAL_GPIO_Init+0x350>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001010:	4a12      	ldr	r2, [pc, #72]	@ (800105c <HAL_GPIO_Init+0x350>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	3301      	adds	r3, #1
 800101a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	fa22 f303 	lsr.w	r3, r2, r3
 8001026:	2b00      	cmp	r3, #0
 8001028:	f47f ae78 	bne.w	8000d1c <HAL_GPIO_Init+0x10>
  }
}
 800102c:	bf00      	nop
 800102e:	bf00      	nop
 8001030:	371c      	adds	r7, #28
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40021000 	.word	0x40021000
 8001040:	40010000 	.word	0x40010000
 8001044:	48000400 	.word	0x48000400
 8001048:	48000800 	.word	0x48000800
 800104c:	48000c00 	.word	0x48000c00
 8001050:	48001000 	.word	0x48001000
 8001054:	48001400 	.word	0x48001400
 8001058:	48001800 	.word	0x48001800
 800105c:	40010400 	.word	0x40010400

08001060 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	460b      	mov	r3, r1
 800106a:	807b      	strh	r3, [r7, #2]
 800106c:	4613      	mov	r3, r2
 800106e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001070:	787b      	ldrb	r3, [r7, #1]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001076:	887a      	ldrh	r2, [r7, #2]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800107c:	e002      	b.n	8001084 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107e:	887a      	ldrh	r2, [r7, #2]
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001084:	bf00      	nop
 8001086:	370c      	adds	r7, #12
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e08d      	b.n	80011be <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d106      	bne.n	80010bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fba0 	bl	80007fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2224      	movs	r2, #36	@ 0x24
 80010c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	681a      	ldr	r2, [r3, #0]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f022 0201 	bic.w	r2, r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685a      	ldr	r2, [r3, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80010e0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80010f0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68db      	ldr	r3, [r3, #12]
 80010f6:	2b01      	cmp	r3, #1
 80010f8:	d107      	bne.n	800110a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	e006      	b.n	8001118 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	689a      	ldr	r2, [r3, #8]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001116:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	2b02      	cmp	r3, #2
 800111e:	d108      	bne.n	8001132 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	e007      	b.n	8001142 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685a      	ldr	r2, [r3, #4]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001140:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	6812      	ldr	r2, [r2, #0]
 800114c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001150:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001154:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001164:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691a      	ldr	r2, [r3, #16]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	699b      	ldr	r3, [r3, #24]
 8001176:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	430a      	orrs	r2, r1
 800117e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69d9      	ldr	r1, [r3, #28]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6a1a      	ldr	r2, [r3, #32]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	430a      	orrs	r2, r1
 800118e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2200      	movs	r2, #0
 80011a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2220      	movs	r2, #32
 80011aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80011bc:	2300      	movs	r3, #0
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
	...

080011c8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b088      	sub	sp, #32
 80011cc:	af02      	add	r7, sp, #8
 80011ce:	60f8      	str	r0, [r7, #12]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	461a      	mov	r2, r3
 80011d4:	460b      	mov	r3, r1
 80011d6:	817b      	strh	r3, [r7, #10]
 80011d8:	4613      	mov	r3, r2
 80011da:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	2b20      	cmp	r3, #32
 80011e6:	f040 80fd 	bne.w	80013e4 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d101      	bne.n	80011f8 <HAL_I2C_Master_Transmit+0x30>
 80011f4:	2302      	movs	r3, #2
 80011f6:	e0f6      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	2201      	movs	r2, #1
 80011fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001200:	f7ff fc92 	bl	8000b28 <HAL_GetTick>
 8001204:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	9300      	str	r3, [sp, #0]
 800120a:	2319      	movs	r3, #25
 800120c:	2201      	movs	r2, #1
 800120e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001212:	68f8      	ldr	r0, [r7, #12]
 8001214:	f000 f914 	bl	8001440 <I2C_WaitOnFlagUntilTimeout>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e0e1      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2221      	movs	r2, #33	@ 0x21
 8001226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2210      	movs	r2, #16
 800122e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2200      	movs	r2, #0
 8001236:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	893a      	ldrh	r2, [r7, #8]
 8001242:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2200      	movs	r2, #0
 8001248:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800124e:	b29b      	uxth	r3, r3
 8001250:	2bff      	cmp	r3, #255	@ 0xff
 8001252:	d906      	bls.n	8001262 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	22ff      	movs	r2, #255	@ 0xff
 8001258:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800125a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800125e:	617b      	str	r3, [r7, #20]
 8001260:	e007      	b.n	8001272 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001266:	b29a      	uxth	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800126c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001270:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001276:	2b00      	cmp	r3, #0
 8001278:	d024      	beq.n	80012c4 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800127e:	781a      	ldrb	r2, [r3, #0]
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001294:	b29b      	uxth	r3, r3
 8001296:	3b01      	subs	r3, #1
 8001298:	b29a      	uxth	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012a2:	3b01      	subs	r3, #1
 80012a4:	b29a      	uxth	r2, r3
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	3301      	adds	r3, #1
 80012b2:	b2da      	uxtb	r2, r3
 80012b4:	8979      	ldrh	r1, [r7, #10]
 80012b6:	4b4e      	ldr	r3, [pc, #312]	@ (80013f0 <HAL_I2C_Master_Transmit+0x228>)
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	68f8      	ldr	r0, [r7, #12]
 80012be:	f000 fa83 	bl	80017c8 <I2C_TransferConfig>
 80012c2:	e066      	b.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80012c8:	b2da      	uxtb	r2, r3
 80012ca:	8979      	ldrh	r1, [r7, #10]
 80012cc:	4b48      	ldr	r3, [pc, #288]	@ (80013f0 <HAL_I2C_Master_Transmit+0x228>)
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f000 fa78 	bl	80017c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80012d8:	e05b      	b.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	6a39      	ldr	r1, [r7, #32]
 80012de:	68f8      	ldr	r0, [r7, #12]
 80012e0:	f000 f907 	bl	80014f2 <I2C_WaitOnTXISFlagUntilTimeout>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e07b      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012f2:	781a      	ldrb	r2, [r3, #0]
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001308:	b29b      	uxth	r3, r3
 800130a:	3b01      	subs	r3, #1
 800130c:	b29a      	uxth	r2, r3
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001316:	3b01      	subs	r3, #1
 8001318:	b29a      	uxth	r2, r3
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001322:	b29b      	uxth	r3, r3
 8001324:	2b00      	cmp	r3, #0
 8001326:	d034      	beq.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800132c:	2b00      	cmp	r3, #0
 800132e:	d130      	bne.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001330:	693b      	ldr	r3, [r7, #16]
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	6a3b      	ldr	r3, [r7, #32]
 8001336:	2200      	movs	r2, #0
 8001338:	2180      	movs	r1, #128	@ 0x80
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 f880 	bl	8001440 <I2C_WaitOnFlagUntilTimeout>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
 8001348:	e04d      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800134e:	b29b      	uxth	r3, r3
 8001350:	2bff      	cmp	r3, #255	@ 0xff
 8001352:	d90e      	bls.n	8001372 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	22ff      	movs	r2, #255	@ 0xff
 8001358:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800135e:	b2da      	uxtb	r2, r3
 8001360:	8979      	ldrh	r1, [r7, #10]
 8001362:	2300      	movs	r3, #0
 8001364:	9300      	str	r3, [sp, #0]
 8001366:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800136a:	68f8      	ldr	r0, [r7, #12]
 800136c:	f000 fa2c 	bl	80017c8 <I2C_TransferConfig>
 8001370:	e00f      	b.n	8001392 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001376:	b29a      	uxth	r2, r3
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001380:	b2da      	uxtb	r2, r3
 8001382:	8979      	ldrh	r1, [r7, #10]
 8001384:	2300      	movs	r3, #0
 8001386:	9300      	str	r3, [sp, #0]
 8001388:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 fa1b 	bl	80017c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001396:	b29b      	uxth	r3, r3
 8001398:	2b00      	cmp	r3, #0
 800139a:	d19e      	bne.n	80012da <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	6a39      	ldr	r1, [r7, #32]
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f8ed 	bl	8001580 <I2C_WaitOnSTOPFlagUntilTimeout>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e01a      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2220      	movs	r2, #32
 80013b6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	6859      	ldr	r1, [r3, #4]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	4b0c      	ldr	r3, [pc, #48]	@ (80013f4 <HAL_I2C_Master_Transmit+0x22c>)
 80013c4:	400b      	ands	r3, r1
 80013c6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2220      	movs	r2, #32
 80013cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	2200      	movs	r2, #0
 80013d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	2200      	movs	r2, #0
 80013dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	e000      	b.n	80013e6 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80013e4:	2302      	movs	r3, #2
  }
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
 80013ee:	bf00      	nop
 80013f0:	80002000 	.word	0x80002000
 80013f4:	fe00e800 	.word	0xfe00e800

080013f8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b02      	cmp	r3, #2
 800140c:	d103      	bne.n	8001416 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	699b      	ldr	r3, [r3, #24]
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	2b01      	cmp	r3, #1
 8001422:	d007      	beq.n	8001434 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	699a      	ldr	r2, [r3, #24]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f042 0201 	orr.w	r2, r2, #1
 8001432:	619a      	str	r2, [r3, #24]
  }
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af00      	add	r7, sp, #0
 8001446:	60f8      	str	r0, [r7, #12]
 8001448:	60b9      	str	r1, [r7, #8]
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	4613      	mov	r3, r2
 800144e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001450:	e03b      	b.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001452:	69ba      	ldr	r2, [r7, #24]
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 f8d6 	bl	8001608 <I2C_IsErrorOccurred>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e041      	b.n	80014ea <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800146c:	d02d      	beq.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800146e:	f7ff fb5b 	bl	8000b28 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	429a      	cmp	r2, r3
 800147c:	d302      	bcc.n	8001484 <I2C_WaitOnFlagUntilTimeout+0x44>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d122      	bne.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	699a      	ldr	r2, [r3, #24]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	4013      	ands	r3, r2
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	429a      	cmp	r2, r3
 8001492:	bf0c      	ite	eq
 8001494:	2301      	moveq	r3, #1
 8001496:	2300      	movne	r3, #0
 8001498:	b2db      	uxtb	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d113      	bne.n	80014ca <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f043 0220 	orr.w	r2, r3, #32
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2220      	movs	r2, #32
 80014b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	699a      	ldr	r2, [r3, #24]
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	4013      	ands	r3, r2
 80014d4:	68ba      	ldr	r2, [r7, #8]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	bf0c      	ite	eq
 80014da:	2301      	moveq	r3, #1
 80014dc:	2300      	movne	r3, #0
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d0b4      	beq.n	8001452 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3710      	adds	r7, #16
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b084      	sub	sp, #16
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	60f8      	str	r0, [r7, #12]
 80014fa:	60b9      	str	r1, [r7, #8]
 80014fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80014fe:	e033      	b.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001500:	687a      	ldr	r2, [r7, #4]
 8001502:	68b9      	ldr	r1, [r7, #8]
 8001504:	68f8      	ldr	r0, [r7, #12]
 8001506:	f000 f87f 	bl	8001608 <I2C_IsErrorOccurred>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d001      	beq.n	8001514 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e031      	b.n	8001578 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800151a:	d025      	beq.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800151c:	f7ff fb04 	bl	8000b28 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	429a      	cmp	r2, r3
 800152a:	d302      	bcc.n	8001532 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d11a      	bne.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	699b      	ldr	r3, [r3, #24]
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b02      	cmp	r3, #2
 800153e:	d013      	beq.n	8001568 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001544:	f043 0220 	orr.w	r2, r3, #32
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	2220      	movs	r2, #32
 8001550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2200      	movs	r2, #0
 8001558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	2200      	movs	r2, #0
 8001560:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e007      	b.n	8001578 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	699b      	ldr	r3, [r3, #24]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b02      	cmp	r3, #2
 8001574:	d1c4      	bne.n	8001500 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800158c:	e02f      	b.n	80015ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800158e:	687a      	ldr	r2, [r7, #4]
 8001590:	68b9      	ldr	r1, [r7, #8]
 8001592:	68f8      	ldr	r0, [r7, #12]
 8001594:	f000 f838 	bl	8001608 <I2C_IsErrorOccurred>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e02d      	b.n	80015fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80015a2:	f7ff fac1 	bl	8000b28 <HAL_GetTick>
 80015a6:	4602      	mov	r2, r0
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d302      	bcc.n	80015b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d11a      	bne.n	80015ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0320 	and.w	r3, r3, #32
 80015c2:	2b20      	cmp	r3, #32
 80015c4:	d013      	beq.n	80015ee <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ca:	f043 0220 	orr.w	r2, r3, #32
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	2220      	movs	r2, #32
 80015d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2200      	movs	r2, #0
 80015e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e007      	b.n	80015fe <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	f003 0320 	and.w	r3, r3, #32
 80015f8:	2b20      	cmp	r3, #32
 80015fa:	d1c8      	bne.n	800158e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
	...

08001608 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	@ 0x28
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	d068      	beq.n	8001706 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2210      	movs	r2, #16
 800163a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800163c:	e049      	b.n	80016d2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001644:	d045      	beq.n	80016d2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001646:	f7ff fa6f 	bl	8000b28 <HAL_GetTick>
 800164a:	4602      	mov	r2, r0
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	1ad3      	subs	r3, r2, r3
 8001650:	68ba      	ldr	r2, [r7, #8]
 8001652:	429a      	cmp	r2, r3
 8001654:	d302      	bcc.n	800165c <I2C_IsErrorOccurred+0x54>
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d13a      	bne.n	80016d2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001666:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800166e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800167a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800167e:	d121      	bne.n	80016c4 <I2C_IsErrorOccurred+0xbc>
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001686:	d01d      	beq.n	80016c4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8001688:	7cfb      	ldrb	r3, [r7, #19]
 800168a:	2b20      	cmp	r3, #32
 800168c:	d01a      	beq.n	80016c4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	685a      	ldr	r2, [r3, #4]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800169c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800169e:	f7ff fa43 	bl	8000b28 <HAL_GetTick>
 80016a2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016a4:	e00e      	b.n	80016c4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80016a6:	f7ff fa3f 	bl	8000b28 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b19      	cmp	r3, #25
 80016b2:	d907      	bls.n	80016c4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f043 0320 	orr.w	r3, r3, #32
 80016ba:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80016c2:	e006      	b.n	80016d2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	f003 0320 	and.w	r3, r3, #32
 80016ce:	2b20      	cmp	r3, #32
 80016d0:	d1e9      	bne.n	80016a6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	699b      	ldr	r3, [r3, #24]
 80016d8:	f003 0320 	and.w	r3, r3, #32
 80016dc:	2b20      	cmp	r3, #32
 80016de:	d003      	beq.n	80016e8 <I2C_IsErrorOccurred+0xe0>
 80016e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d0aa      	beq.n	800163e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80016e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d103      	bne.n	80016f8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2220      	movs	r2, #32
 80016f6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80016f8:	6a3b      	ldr	r3, [r7, #32]
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001700:	2301      	movs	r3, #1
 8001702:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800170e:	69bb      	ldr	r3, [r7, #24]
 8001710:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001714:	2b00      	cmp	r3, #0
 8001716:	d00b      	beq.n	8001730 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001728:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001736:	2b00      	cmp	r3, #0
 8001738:	d00b      	beq.n	8001752 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800173a:	6a3b      	ldr	r3, [r7, #32]
 800173c:	f043 0308 	orr.w	r3, r3, #8
 8001740:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800174a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001758:	2b00      	cmp	r3, #0
 800175a:	d00b      	beq.n	8001774 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	f043 0302 	orr.w	r3, r3, #2
 8001762:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800176c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8001774:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001778:	2b00      	cmp	r3, #0
 800177a:	d01c      	beq.n	80017b6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800177c:	68f8      	ldr	r0, [r7, #12]
 800177e:	f7ff fe3b 	bl	80013f8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	6859      	ldr	r1, [r3, #4]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <I2C_IsErrorOccurred+0x1bc>)
 800178e:	400b      	ands	r3, r1
 8001790:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	431a      	orrs	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	2220      	movs	r2, #32
 80017a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	2200      	movs	r2, #0
 80017aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80017b6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	3728      	adds	r7, #40	@ 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	fe00e800 	.word	0xfe00e800

080017c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b087      	sub	sp, #28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	460b      	mov	r3, r1
 80017d4:	817b      	strh	r3, [r7, #10]
 80017d6:	4613      	mov	r3, r2
 80017d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017da:	897b      	ldrh	r3, [r7, #10]
 80017dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017e0:	7a7b      	ldrb	r3, [r7, #9]
 80017e2:	041b      	lsls	r3, r3, #16
 80017e4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80017f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	685a      	ldr	r2, [r3, #4]
 80017fe:	6a3b      	ldr	r3, [r7, #32]
 8001800:	0d5b      	lsrs	r3, r3, #21
 8001802:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8001806:	4b08      	ldr	r3, [pc, #32]	@ (8001828 <I2C_TransferConfig+0x60>)
 8001808:	430b      	orrs	r3, r1
 800180a:	43db      	mvns	r3, r3
 800180c:	ea02 0103 	and.w	r1, r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	430a      	orrs	r2, r1
 8001818:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800181a:	bf00      	nop
 800181c:	371c      	adds	r7, #28
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	03ff63ff 	.word	0x03ff63ff

0800182c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b20      	cmp	r3, #32
 8001840:	d138      	bne.n	80018b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800184c:	2302      	movs	r3, #2
 800184e:	e032      	b.n	80018b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2224      	movs	r2, #36	@ 0x24
 800185c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0201 	bic.w	r2, r2, #1
 800186e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800187e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6819      	ldr	r1, [r3, #0]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	683a      	ldr	r2, [r7, #0]
 800188c:	430a      	orrs	r2, r1
 800188e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f042 0201 	orr.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2220      	movs	r2, #32
 80018a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80018b0:	2300      	movs	r3, #0
 80018b2:	e000      	b.n	80018b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80018b4:	2302      	movs	r3, #2
  }
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d139      	bne.n	800194c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e033      	b.n	800194e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2224      	movs	r2, #36	@ 0x24
 80018f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681a      	ldr	r2, [r3, #0]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f022 0201 	bic.w	r2, r2, #1
 8001904:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001914:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	021b      	lsls	r3, r3, #8
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4313      	orrs	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f042 0201 	orr.w	r2, r2, #1
 8001936:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2220      	movs	r2, #32
 800193c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	e000      	b.n	800194e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800194c:	2302      	movs	r3, #2
  }
}
 800194e:	4618      	mov	r0, r3
 8001950:	3714      	adds	r7, #20
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001960:	4b04      	ldr	r3, [pc, #16]	@ (8001974 <HAL_PWREx_GetVoltageRange+0x18>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001968:	4618      	mov	r0, r3
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40007000 	.word	0x40007000

08001978 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001986:	d130      	bne.n	80019ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001988:	4b23      	ldr	r3, [pc, #140]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001990:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001994:	d038      	beq.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001996:	4b20      	ldr	r3, [pc, #128]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800199e:	4a1e      	ldr	r2, [pc, #120]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019a6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a1c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2232      	movs	r2, #50	@ 0x32
 80019ac:	fb02 f303 	mul.w	r3, r2, r3
 80019b0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a20 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0c9b      	lsrs	r3, r3, #18
 80019b8:	3301      	adds	r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019bc:	e002      	b.n	80019c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3b01      	subs	r3, #1
 80019c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019c4:	4b14      	ldr	r3, [pc, #80]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c6:	695b      	ldr	r3, [r3, #20]
 80019c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019cc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019d0:	d102      	bne.n	80019d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d1f2      	bne.n	80019be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019e4:	d110      	bne.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e00f      	b.n	8001a0a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80019f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019f6:	d007      	beq.n	8001a08 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019f8:	4b07      	ldr	r3, [pc, #28]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001a00:	4a05      	ldr	r2, [pc, #20]	@ (8001a18 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a02:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001a06:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001a08:	2300      	movs	r3, #0
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3714      	adds	r7, #20
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40007000 	.word	0x40007000
 8001a1c:	20000010 	.word	0x20000010
 8001a20:	431bde83 	.word	0x431bde83

08001a24 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b088      	sub	sp, #32
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d101      	bne.n	8001a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e3ca      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a36:	4b97      	ldr	r3, [pc, #604]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	f003 030c 	and.w	r3, r3, #12
 8001a3e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a40:	4b94      	ldr	r3, [pc, #592]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	f003 0303 	and.w	r3, r3, #3
 8001a48:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0310 	and.w	r3, r3, #16
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	f000 80e4 	beq.w	8001c20 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d007      	beq.n	8001a6e <HAL_RCC_OscConfig+0x4a>
 8001a5e:	69bb      	ldr	r3, [r7, #24]
 8001a60:	2b0c      	cmp	r3, #12
 8001a62:	f040 808b 	bne.w	8001b7c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	2b01      	cmp	r3, #1
 8001a6a:	f040 8087 	bne.w	8001b7c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a6e:	4b89      	ldr	r3, [pc, #548]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d005      	beq.n	8001a86 <HAL_RCC_OscConfig+0x62>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	699b      	ldr	r3, [r3, #24]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e3a2      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1a      	ldr	r2, [r3, #32]
 8001a8a:	4b82      	ldr	r3, [pc, #520]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d004      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x7c>
 8001a96:	4b7f      	ldr	r3, [pc, #508]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a9e:	e005      	b.n	8001aac <HAL_RCC_OscConfig+0x88>
 8001aa0:	4b7c      	ldr	r3, [pc, #496]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001aa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d223      	bcs.n	8001af8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f000 fd55 	bl	8002564 <RCC_SetFlashLatencyFromMSIRange>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e383      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ac4:	4b73      	ldr	r3, [pc, #460]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a72      	ldr	r2, [pc, #456]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001aca:	f043 0308 	orr.w	r3, r3, #8
 8001ace:	6013      	str	r3, [r2, #0]
 8001ad0:	4b70      	ldr	r3, [pc, #448]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	496d      	ldr	r1, [pc, #436]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001ade:	4313      	orrs	r3, r2
 8001ae0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ae2:	4b6c      	ldr	r3, [pc, #432]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	021b      	lsls	r3, r3, #8
 8001af0:	4968      	ldr	r1, [pc, #416]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001af2:	4313      	orrs	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
 8001af6:	e025      	b.n	8001b44 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001af8:	4b66      	ldr	r3, [pc, #408]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a65      	ldr	r2, [pc, #404]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001afe:	f043 0308 	orr.w	r3, r3, #8
 8001b02:	6013      	str	r3, [r2, #0]
 8001b04:	4b63      	ldr	r3, [pc, #396]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4960      	ldr	r1, [pc, #384]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b16:	4b5f      	ldr	r3, [pc, #380]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	69db      	ldr	r3, [r3, #28]
 8001b22:	021b      	lsls	r3, r3, #8
 8001b24:	495b      	ldr	r1, [pc, #364]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001b26:	4313      	orrs	r3, r2
 8001b28:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b2a:	69bb      	ldr	r3, [r7, #24]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d109      	bne.n	8001b44 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 fd15 	bl	8002564 <RCC_SetFlashLatencyFromMSIRange>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e343      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b44:	f000 fc4a 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	4b52      	ldr	r3, [pc, #328]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	091b      	lsrs	r3, r3, #4
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	4950      	ldr	r1, [pc, #320]	@ (8001c98 <HAL_RCC_OscConfig+0x274>)
 8001b56:	5ccb      	ldrb	r3, [r1, r3]
 8001b58:	f003 031f 	and.w	r3, r3, #31
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b60:	4a4e      	ldr	r2, [pc, #312]	@ (8001c9c <HAL_RCC_OscConfig+0x278>)
 8001b62:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b64:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca0 <HAL_RCC_OscConfig+0x27c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7fe ff8d 	bl	8000a88 <HAL_InitTick>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d052      	beq.n	8001c1e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b78:	7bfb      	ldrb	r3, [r7, #15]
 8001b7a:	e327      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d032      	beq.n	8001bea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b84:	4b43      	ldr	r3, [pc, #268]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a42      	ldr	r2, [pc, #264]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001b8a:	f043 0301 	orr.w	r3, r3, #1
 8001b8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b90:	f7fe ffca 	bl	8000b28 <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b98:	f7fe ffc6 	bl	8000b28 <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e310      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001baa:	4b3a      	ldr	r3, [pc, #232]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0f0      	beq.n	8001b98 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bb6:	4b37      	ldr	r3, [pc, #220]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a36      	ldr	r2, [pc, #216]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bbc:	f043 0308 	orr.w	r3, r3, #8
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b34      	ldr	r3, [pc, #208]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4931      	ldr	r1, [pc, #196]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	69db      	ldr	r3, [r3, #28]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	492c      	ldr	r1, [pc, #176]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001be4:	4313      	orrs	r3, r2
 8001be6:	604b      	str	r3, [r1, #4]
 8001be8:	e01a      	b.n	8001c20 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bea:	4b2a      	ldr	r3, [pc, #168]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a29      	ldr	r2, [pc, #164]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bf6:	f7fe ff97 	bl	8000b28 <HAL_GetTick>
 8001bfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bfc:	e008      	b.n	8001c10 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bfe:	f7fe ff93 	bl	8000b28 <HAL_GetTick>
 8001c02:	4602      	mov	r2, r0
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	2b02      	cmp	r3, #2
 8001c0a:	d901      	bls.n	8001c10 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e2dd      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c10:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f0      	bne.n	8001bfe <HAL_RCC_OscConfig+0x1da>
 8001c1c:	e000      	b.n	8001c20 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c1e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0301 	and.w	r3, r3, #1
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d074      	beq.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d005      	beq.n	8001c3e <HAL_RCC_OscConfig+0x21a>
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b0c      	cmp	r3, #12
 8001c36:	d10e      	bne.n	8001c56 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	2b03      	cmp	r3, #3
 8001c3c:	d10b      	bne.n	8001c56 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3e:	4b15      	ldr	r3, [pc, #84]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d064      	beq.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d160      	bne.n	8001d14 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e2ba      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c5e:	d106      	bne.n	8001c6e <HAL_RCC_OscConfig+0x24a>
 8001c60:	4b0c      	ldr	r3, [pc, #48]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0b      	ldr	r2, [pc, #44]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e026      	b.n	8001cbc <HAL_RCC_OscConfig+0x298>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c76:	d115      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x280>
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a05      	ldr	r2, [pc, #20]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001c7e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c82:	6013      	str	r3, [r2, #0]
 8001c84:	4b03      	ldr	r3, [pc, #12]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a02      	ldr	r2, [pc, #8]	@ (8001c94 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c8e:	6013      	str	r3, [r2, #0]
 8001c90:	e014      	b.n	8001cbc <HAL_RCC_OscConfig+0x298>
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08003a50 	.word	0x08003a50
 8001c9c:	20000010 	.word	0x20000010
 8001ca0:	20000014 	.word	0x20000014
 8001ca4:	4ba0      	ldr	r3, [pc, #640]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a9f      	ldr	r2, [pc, #636]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001caa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	4b9d      	ldr	r3, [pc, #628]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a9c      	ldr	r2, [pc, #624]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001cb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d013      	beq.n	8001cec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7fe ff30 	bl	8000b28 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7fe ff2c 	bl	8000b28 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	@ 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e276      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cde:	4b92      	ldr	r3, [pc, #584]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x2a8>
 8001cea:	e014      	b.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7fe ff1c 	bl	8000b28 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cf4:	f7fe ff18 	bl	8000b28 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b64      	cmp	r3, #100	@ 0x64
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e262      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d06:	4b88      	ldr	r3, [pc, #544]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2d0>
 8001d12:	e000      	b.n	8001d16 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d060      	beq.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d005      	beq.n	8001d34 <HAL_RCC_OscConfig+0x310>
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b0c      	cmp	r3, #12
 8001d2c:	d119      	bne.n	8001d62 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d116      	bne.n	8001d62 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d34:	4b7c      	ldr	r3, [pc, #496]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_RCC_OscConfig+0x328>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e23f      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4c:	4b76      	ldr	r3, [pc, #472]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	691b      	ldr	r3, [r3, #16]
 8001d58:	061b      	lsls	r3, r3, #24
 8001d5a:	4973      	ldr	r1, [pc, #460]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d60:	e040      	b.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d023      	beq.n	8001db2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6a:	4b6f      	ldr	r3, [pc, #444]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a6e      	ldr	r2, [pc, #440]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7fe fed7 	bl	8000b28 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d7e:	f7fe fed3 	bl	8000b28 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e21d      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d90:	4b65      	ldr	r3, [pc, #404]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d9c:	4b62      	ldr	r3, [pc, #392]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	495f      	ldr	r1, [pc, #380]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	e018      	b.n	8001de4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b5d      	ldr	r3, [pc, #372]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001db8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7fe feb3 	bl	8000b28 <HAL_GetTick>
 8001dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7fe feaf 	bl	8000b28 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e1f9      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dd8:	4b53      	ldr	r3, [pc, #332]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0308 	and.w	r3, r3, #8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d03c      	beq.n	8001e6a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	695b      	ldr	r3, [r3, #20]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d01c      	beq.n	8001e32 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001df8:	4b4b      	ldr	r3, [pc, #300]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001dfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001dfe:	4a4a      	ldr	r2, [pc, #296]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001e00:	f043 0301 	orr.w	r3, r3, #1
 8001e04:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e08:	f7fe fe8e 	bl	8000b28 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e10:	f7fe fe8a 	bl	8000b28 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1d4      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e22:	4b41      	ldr	r3, [pc, #260]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001e24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ef      	beq.n	8001e10 <HAL_RCC_OscConfig+0x3ec>
 8001e30:	e01b      	b.n	8001e6a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e32:	4b3d      	ldr	r3, [pc, #244]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e38:	4a3b      	ldr	r2, [pc, #236]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e42:	f7fe fe71 	bl	8000b28 <HAL_GetTick>
 8001e46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e48:	e008      	b.n	8001e5c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e4a:	f7fe fe6d 	bl	8000b28 <HAL_GetTick>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	1ad3      	subs	r3, r2, r3
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e1b7      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e5c:	4b32      	ldr	r3, [pc, #200]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001e5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d1ef      	bne.n	8001e4a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0304 	and.w	r3, r3, #4
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 80a6 	beq.w	8001fc4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e7c:	4b2a      	ldr	r3, [pc, #168]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10d      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e88:	4b27      	ldr	r3, [pc, #156]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e8c:	4a26      	ldr	r2, [pc, #152]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e94:	4b24      	ldr	r3, [pc, #144]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ea4:	4b21      	ldr	r3, [pc, #132]	@ (8001f2c <HAL_RCC_OscConfig+0x508>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d118      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8001f2c <HAL_RCC_OscConfig+0x508>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a1d      	ldr	r2, [pc, #116]	@ (8001f2c <HAL_RCC_OscConfig+0x508>)
 8001eb6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ebc:	f7fe fe34 	bl	8000b28 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ec4:	f7fe fe30 	bl	8000b28 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e17a      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ed6:	4b15      	ldr	r3, [pc, #84]	@ (8001f2c <HAL_RCC_OscConfig+0x508>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d0f0      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d108      	bne.n	8001efc <HAL_RCC_OscConfig+0x4d8>
 8001eea:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001eec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001efa:	e029      	b.n	8001f50 <HAL_RCC_OscConfig+0x52c>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b05      	cmp	r3, #5
 8001f02:	d115      	bne.n	8001f30 <HAL_RCC_OscConfig+0x50c>
 8001f04:	4b08      	ldr	r3, [pc, #32]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f0a:	4a07      	ldr	r2, [pc, #28]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001f0c:	f043 0304 	orr.w	r3, r3, #4
 8001f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f14:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f1a:	4a03      	ldr	r2, [pc, #12]	@ (8001f28 <HAL_RCC_OscConfig+0x504>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f24:	e014      	b.n	8001f50 <HAL_RCC_OscConfig+0x52c>
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40007000 	.word	0x40007000
 8001f30:	4b9c      	ldr	r3, [pc, #624]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8001f32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f36:	4a9b      	ldr	r2, [pc, #620]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001f40:	4b98      	ldr	r3, [pc, #608]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8001f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f46:	4a97      	ldr	r2, [pc, #604]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d016      	beq.n	8001f86 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7fe fde6 	bl	8000b28 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f5e:	e00a      	b.n	8001f76 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7fe fde2 	bl	8000b28 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e12a      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f76:	4b8b      	ldr	r3, [pc, #556]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8001f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0ed      	beq.n	8001f60 <HAL_RCC_OscConfig+0x53c>
 8001f84:	e015      	b.n	8001fb2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7fe fdcf 	bl	8000b28 <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f8c:	e00a      	b.n	8001fa4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f8e:	f7fe fdcb 	bl	8000b28 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e113      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa4:	4b7f      	ldr	r3, [pc, #508]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1ed      	bne.n	8001f8e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fb2:	7ffb      	ldrb	r3, [r7, #31]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d105      	bne.n	8001fc4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fb8:	4b7a      	ldr	r3, [pc, #488]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8001fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fbc:	4a79      	ldr	r2, [pc, #484]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8001fbe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001fc2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 80fe 	beq.w	80021ca <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	f040 80d0 	bne.w	8002178 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fd8:	4b72      	ldr	r3, [pc, #456]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0203 	and.w	r2, r3, #3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d130      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d127      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	697b      	ldr	r3, [r7, #20]
 8002000:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002008:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800200a:	429a      	cmp	r2, r3
 800200c:	d11f      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002018:	2a07      	cmp	r2, #7
 800201a:	bf14      	ite	ne
 800201c:	2201      	movne	r2, #1
 800201e:	2200      	moveq	r2, #0
 8002020:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002022:	4293      	cmp	r3, r2
 8002024:	d113      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002030:	085b      	lsrs	r3, r3, #1
 8002032:	3b01      	subs	r3, #1
 8002034:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002036:	429a      	cmp	r2, r3
 8002038:	d109      	bne.n	800204e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002044:	085b      	lsrs	r3, r3, #1
 8002046:	3b01      	subs	r3, #1
 8002048:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800204a:	429a      	cmp	r2, r3
 800204c:	d06e      	beq.n	800212c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	2b0c      	cmp	r3, #12
 8002052:	d069      	beq.n	8002128 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002054:	4b53      	ldr	r3, [pc, #332]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002060:	4b50      	ldr	r3, [pc, #320]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e0ad      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002070:	4b4c      	ldr	r3, [pc, #304]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a4b      	ldr	r2, [pc, #300]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8002076:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800207a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800207c:	f7fe fd54 	bl	8000b28 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002084:	f7fe fd50 	bl	8000b28 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e09a      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002096:	4b43      	ldr	r3, [pc, #268]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020a2:	4b40      	ldr	r3, [pc, #256]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	4b40      	ldr	r3, [pc, #256]	@ (80021a8 <HAL_RCC_OscConfig+0x784>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80020b2:	3a01      	subs	r2, #1
 80020b4:	0112      	lsls	r2, r2, #4
 80020b6:	4311      	orrs	r1, r2
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80020bc:	0212      	lsls	r2, r2, #8
 80020be:	4311      	orrs	r1, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020c4:	0852      	lsrs	r2, r2, #1
 80020c6:	3a01      	subs	r2, #1
 80020c8:	0552      	lsls	r2, r2, #21
 80020ca:	4311      	orrs	r1, r2
 80020cc:	687a      	ldr	r2, [r7, #4]
 80020ce:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80020d0:	0852      	lsrs	r2, r2, #1
 80020d2:	3a01      	subs	r2, #1
 80020d4:	0652      	lsls	r2, r2, #25
 80020d6:	4311      	orrs	r1, r2
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80020dc:	0912      	lsrs	r2, r2, #4
 80020de:	0452      	lsls	r2, r2, #17
 80020e0:	430a      	orrs	r2, r1
 80020e2:	4930      	ldr	r1, [pc, #192]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020e8:	4b2e      	ldr	r3, [pc, #184]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a2d      	ldr	r2, [pc, #180]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 80020ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020f4:	4b2b      	ldr	r3, [pc, #172]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	4a2a      	ldr	r2, [pc, #168]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 80020fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002100:	f7fe fd12 	bl	8000b28 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002106:	e008      	b.n	800211a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002108:	f7fe fd0e 	bl	8000b28 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e058      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211a:	4b22      	ldr	r3, [pc, #136]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d0f0      	beq.n	8002108 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002126:	e050      	b.n	80021ca <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e04f      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800212c:	4b1d      	ldr	r3, [pc, #116]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d148      	bne.n	80021ca <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002138:	4b1a      	ldr	r3, [pc, #104]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a19      	ldr	r2, [pc, #100]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 800213e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002142:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002144:	4b17      	ldr	r3, [pc, #92]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	4a16      	ldr	r2, [pc, #88]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 800214a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800214e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002150:	f7fe fcea 	bl	8000b28 <HAL_GetTick>
 8002154:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002158:	f7fe fce6 	bl	8000b28 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	693b      	ldr	r3, [r7, #16]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e030      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216a:	4b0e      	ldr	r3, [pc, #56]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d0f0      	beq.n	8002158 <HAL_RCC_OscConfig+0x734>
 8002176:	e028      	b.n	80021ca <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	2b0c      	cmp	r3, #12
 800217c:	d023      	beq.n	80021c6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800217e:	4b09      	ldr	r3, [pc, #36]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a08      	ldr	r2, [pc, #32]	@ (80021a4 <HAL_RCC_OscConfig+0x780>)
 8002184:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218a:	f7fe fccd 	bl	8000b28 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002190:	e00c      	b.n	80021ac <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002192:	f7fe fcc9 	bl	8000b28 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d905      	bls.n	80021ac <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e013      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
 80021a4:	40021000 	.word	0x40021000
 80021a8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021ac:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_RCC_OscConfig+0x7b0>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d1ec      	bne.n	8002192 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021b8:	4b06      	ldr	r3, [pc, #24]	@ (80021d4 <HAL_RCC_OscConfig+0x7b0>)
 80021ba:	68da      	ldr	r2, [r3, #12]
 80021bc:	4905      	ldr	r1, [pc, #20]	@ (80021d4 <HAL_RCC_OscConfig+0x7b0>)
 80021be:	4b06      	ldr	r3, [pc, #24]	@ (80021d8 <HAL_RCC_OscConfig+0x7b4>)
 80021c0:	4013      	ands	r3, r2
 80021c2:	60cb      	str	r3, [r1, #12]
 80021c4:	e001      	b.n	80021ca <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e000      	b.n	80021cc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80021ca:	2300      	movs	r3, #0
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3720      	adds	r7, #32
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	feeefffc 	.word	0xfeeefffc

080021dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b084      	sub	sp, #16
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d101      	bne.n	80021f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e0e7      	b.n	80023c0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021f0:	4b75      	ldr	r3, [pc, #468]	@ (80023c8 <HAL_RCC_ClockConfig+0x1ec>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d910      	bls.n	8002220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021fe:	4b72      	ldr	r3, [pc, #456]	@ (80023c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f023 0207 	bic.w	r2, r3, #7
 8002206:	4970      	ldr	r1, [pc, #448]	@ (80023c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	4313      	orrs	r3, r2
 800220c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800220e:	4b6e      	ldr	r3, [pc, #440]	@ (80023c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	429a      	cmp	r2, r3
 800221a:	d001      	beq.n	8002220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e0cf      	b.n	80023c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d010      	beq.n	800224e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	4b66      	ldr	r3, [pc, #408]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002238:	429a      	cmp	r2, r3
 800223a:	d908      	bls.n	800224e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800223c:	4b63      	ldr	r3, [pc, #396]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4960      	ldr	r1, [pc, #384]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 800224a:	4313      	orrs	r3, r2
 800224c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0301 	and.w	r3, r3, #1
 8002256:	2b00      	cmp	r3, #0
 8002258:	d04c      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	2b03      	cmp	r3, #3
 8002260:	d107      	bne.n	8002272 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002262:	4b5a      	ldr	r3, [pc, #360]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d121      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e0a6      	b.n	80023c0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d107      	bne.n	800228a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800227a:	4b54      	ldr	r3, [pc, #336]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d115      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	e09a      	b.n	80023c0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d107      	bne.n	80022a2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002292:	4b4e      	ldr	r3, [pc, #312]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d109      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e08e      	b.n	80023c0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022a2:	4b4a      	ldr	r3, [pc, #296]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e086      	b.n	80023c0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80022b2:	4b46      	ldr	r3, [pc, #280]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f023 0203 	bic.w	r2, r3, #3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	4943      	ldr	r1, [pc, #268]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c4:	f7fe fc30 	bl	8000b28 <HAL_GetTick>
 80022c8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ca:	e00a      	b.n	80022e2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022cc:	f7fe fc2c 	bl	8000b28 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022da:	4293      	cmp	r3, r2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e06e      	b.n	80023c0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e2:	4b3a      	ldr	r3, [pc, #232]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 020c 	and.w	r2, r3, #12
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d1eb      	bne.n	80022cc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f003 0302 	and.w	r3, r3, #2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d010      	beq.n	8002322 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	4b31      	ldr	r3, [pc, #196]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800230c:	429a      	cmp	r2, r3
 800230e:	d208      	bcs.n	8002322 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002310:	4b2e      	ldr	r3, [pc, #184]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	492b      	ldr	r1, [pc, #172]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002322:	4b29      	ldr	r3, [pc, #164]	@ (80023c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0307 	and.w	r3, r3, #7
 800232a:	683a      	ldr	r2, [r7, #0]
 800232c:	429a      	cmp	r2, r3
 800232e:	d210      	bcs.n	8002352 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002330:	4b25      	ldr	r3, [pc, #148]	@ (80023c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f023 0207 	bic.w	r2, r3, #7
 8002338:	4923      	ldr	r1, [pc, #140]	@ (80023c8 <HAL_RCC_ClockConfig+0x1ec>)
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	4313      	orrs	r3, r2
 800233e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002340:	4b21      	ldr	r3, [pc, #132]	@ (80023c8 <HAL_RCC_ClockConfig+0x1ec>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	683a      	ldr	r2, [r7, #0]
 800234a:	429a      	cmp	r2, r3
 800234c:	d001      	beq.n	8002352 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e036      	b.n	80023c0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0304 	and.w	r3, r3, #4
 800235a:	2b00      	cmp	r3, #0
 800235c:	d008      	beq.n	8002370 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235e:	4b1b      	ldr	r3, [pc, #108]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4918      	ldr	r1, [pc, #96]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 800236c:	4313      	orrs	r3, r2
 800236e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0308 	and.w	r3, r3, #8
 8002378:	2b00      	cmp	r3, #0
 800237a:	d009      	beq.n	8002390 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237c:	4b13      	ldr	r3, [pc, #76]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4910      	ldr	r1, [pc, #64]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 800238c:	4313      	orrs	r3, r2
 800238e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002390:	f000 f824 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002394:	4602      	mov	r2, r0
 8002396:	4b0d      	ldr	r3, [pc, #52]	@ (80023cc <HAL_RCC_ClockConfig+0x1f0>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	091b      	lsrs	r3, r3, #4
 800239c:	f003 030f 	and.w	r3, r3, #15
 80023a0:	490b      	ldr	r1, [pc, #44]	@ (80023d0 <HAL_RCC_ClockConfig+0x1f4>)
 80023a2:	5ccb      	ldrb	r3, [r1, r3]
 80023a4:	f003 031f 	and.w	r3, r3, #31
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	4a09      	ldr	r2, [pc, #36]	@ (80023d4 <HAL_RCC_ClockConfig+0x1f8>)
 80023ae:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80023b0:	4b09      	ldr	r3, [pc, #36]	@ (80023d8 <HAL_RCC_ClockConfig+0x1fc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe fb67 	bl	8000a88 <HAL_InitTick>
 80023ba:	4603      	mov	r3, r0
 80023bc:	72fb      	strb	r3, [r7, #11]

  return status;
 80023be:	7afb      	ldrb	r3, [r7, #11]
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3710      	adds	r7, #16
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40022000 	.word	0x40022000
 80023cc:	40021000 	.word	0x40021000
 80023d0:	08003a50 	.word	0x08003a50
 80023d4:	20000010 	.word	0x20000010
 80023d8:	20000014 	.word	0x20000014

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	b089      	sub	sp, #36	@ 0x24
 80023e0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023e2:	2300      	movs	r3, #0
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	2300      	movs	r3, #0
 80023e8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023ea:	4b3e      	ldr	r3, [pc, #248]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 030c 	and.w	r3, r3, #12
 80023f2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023f4:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <HAL_RCC_GetSysClockFreq+0x34>
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	2b0c      	cmp	r3, #12
 8002408:	d121      	bne.n	800244e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d11e      	bne.n	800244e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002410:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0308 	and.w	r3, r3, #8
 8002418:	2b00      	cmp	r3, #0
 800241a:	d107      	bne.n	800242c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800241c:	4b31      	ldr	r3, [pc, #196]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800241e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002422:	0a1b      	lsrs	r3, r3, #8
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	61fb      	str	r3, [r7, #28]
 800242a:	e005      	b.n	8002438 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800242c:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	091b      	lsrs	r3, r3, #4
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002438:	4a2b      	ldr	r2, [pc, #172]	@ (80024e8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002440:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10d      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002448:	69fb      	ldr	r3, [r7, #28]
 800244a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800244c:	e00a      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	2b04      	cmp	r3, #4
 8002452:	d102      	bne.n	800245a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002454:	4b25      	ldr	r3, [pc, #148]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002456:	61bb      	str	r3, [r7, #24]
 8002458:	e004      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	2b08      	cmp	r3, #8
 800245e:	d101      	bne.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002460:	4b23      	ldr	r3, [pc, #140]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002462:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	2b0c      	cmp	r3, #12
 8002468:	d134      	bne.n	80024d4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800246a:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	f003 0303 	and.w	r3, r3, #3
 8002472:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b02      	cmp	r3, #2
 8002478:	d003      	beq.n	8002482 <HAL_RCC_GetSysClockFreq+0xa6>
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2b03      	cmp	r3, #3
 800247e:	d003      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0xac>
 8002480:	e005      	b.n	800248e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002482:	4b1a      	ldr	r3, [pc, #104]	@ (80024ec <HAL_RCC_GetSysClockFreq+0x110>)
 8002484:	617b      	str	r3, [r7, #20]
      break;
 8002486:	e005      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002488:	4b19      	ldr	r3, [pc, #100]	@ (80024f0 <HAL_RCC_GetSysClockFreq+0x114>)
 800248a:	617b      	str	r3, [r7, #20]
      break;
 800248c:	e002      	b.n	8002494 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	617b      	str	r3, [r7, #20]
      break;
 8002492:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002494:	4b13      	ldr	r3, [pc, #76]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	091b      	lsrs	r3, r3, #4
 800249a:	f003 0307 	and.w	r3, r3, #7
 800249e:	3301      	adds	r3, #1
 80024a0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80024a2:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	fb03 f202 	mul.w	r2, r3, r2
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80024b8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024ba:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <HAL_RCC_GetSysClockFreq+0x108>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	0e5b      	lsrs	r3, r3, #25
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	3301      	adds	r3, #1
 80024c6:	005b      	lsls	r3, r3, #1
 80024c8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80024ca:	697a      	ldr	r2, [r7, #20]
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80024d4:	69bb      	ldr	r3, [r7, #24]
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	3724      	adds	r7, #36	@ 0x24
 80024da:	46bd      	mov	sp, r7
 80024dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e0:	4770      	bx	lr
 80024e2:	bf00      	nop
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08003a68 	.word	0x08003a68
 80024ec:	00f42400 	.word	0x00f42400
 80024f0:	007a1200 	.word	0x007a1200

080024f4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024f8:	4b03      	ldr	r3, [pc, #12]	@ (8002508 <HAL_RCC_GetHCLKFreq+0x14>)
 80024fa:	681b      	ldr	r3, [r3, #0]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000010 	.word	0x20000010

0800250c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002510:	f7ff fff0 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b06      	ldr	r3, [pc, #24]	@ (8002530 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4904      	ldr	r1, [pc, #16]	@ (8002534 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	f003 031f 	and.w	r3, r3, #31
 8002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800252c:	4618      	mov	r0, r3
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40021000 	.word	0x40021000
 8002534:	08003a60 	.word	0x08003a60

08002538 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800253c:	f7ff ffda 	bl	80024f4 <HAL_RCC_GetHCLKFreq>
 8002540:	4602      	mov	r2, r0
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	0adb      	lsrs	r3, r3, #11
 8002548:	f003 0307 	and.w	r3, r3, #7
 800254c:	4904      	ldr	r1, [pc, #16]	@ (8002560 <HAL_RCC_GetPCLK2Freq+0x28>)
 800254e:	5ccb      	ldrb	r3, [r1, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002558:	4618      	mov	r0, r3
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000
 8002560:	08003a60 	.word	0x08003a60

08002564 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002570:	4b2a      	ldr	r3, [pc, #168]	@ (800261c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002572:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002574:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d003      	beq.n	8002584 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800257c:	f7ff f9ee 	bl	800195c <HAL_PWREx_GetVoltageRange>
 8002580:	6178      	str	r0, [r7, #20]
 8002582:	e014      	b.n	80025ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002584:	4b25      	ldr	r3, [pc, #148]	@ (800261c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002586:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002588:	4a24      	ldr	r2, [pc, #144]	@ (800261c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800258a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800258e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002590:	4b22      	ldr	r3, [pc, #136]	@ (800261c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002592:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002594:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002598:	60fb      	str	r3, [r7, #12]
 800259a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800259c:	f7ff f9de 	bl	800195c <HAL_PWREx_GetVoltageRange>
 80025a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80025a2:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a6:	4a1d      	ldr	r2, [pc, #116]	@ (800261c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025b4:	d10b      	bne.n	80025ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b80      	cmp	r3, #128	@ 0x80
 80025ba:	d919      	bls.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2ba0      	cmp	r3, #160	@ 0xa0
 80025c0:	d902      	bls.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025c2:	2302      	movs	r3, #2
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	e013      	b.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025c8:	2301      	movs	r3, #1
 80025ca:	613b      	str	r3, [r7, #16]
 80025cc:	e010      	b.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2b80      	cmp	r3, #128	@ 0x80
 80025d2:	d902      	bls.n	80025da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80025d4:	2303      	movs	r3, #3
 80025d6:	613b      	str	r3, [r7, #16]
 80025d8:	e00a      	b.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2b80      	cmp	r3, #128	@ 0x80
 80025de:	d102      	bne.n	80025e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80025e0:	2302      	movs	r3, #2
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e004      	b.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b70      	cmp	r3, #112	@ 0x70
 80025ea:	d101      	bne.n	80025f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025ec:	2301      	movs	r3, #1
 80025ee:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f023 0207 	bic.w	r2, r3, #7
 80025f8:	4909      	ldr	r1, [pc, #36]	@ (8002620 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002600:	4b07      	ldr	r3, [pc, #28]	@ (8002620 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0307 	and.w	r3, r3, #7
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	40022000 	.word	0x40022000

08002624 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800262c:	2300      	movs	r3, #0
 800262e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002630:	2300      	movs	r3, #0
 8002632:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800263c:	2b00      	cmp	r3, #0
 800263e:	d041      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002644:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002648:	d02a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800264a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800264e:	d824      	bhi.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002650:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002654:	d008      	beq.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002656:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800265a:	d81e      	bhi.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002660:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002664:	d010      	beq.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002666:	e018      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002668:	4b86      	ldr	r3, [pc, #536]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a85      	ldr	r2, [pc, #532]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002672:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002674:	e015      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	3304      	adds	r3, #4
 800267a:	2100      	movs	r1, #0
 800267c:	4618      	mov	r0, r3
 800267e:	f000 fabb 	bl	8002bf8 <RCCEx_PLLSAI1_Config>
 8002682:	4603      	mov	r3, r0
 8002684:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002686:	e00c      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3320      	adds	r3, #32
 800268c:	2100      	movs	r1, #0
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fba6 	bl	8002de0 <RCCEx_PLLSAI2_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002698:	e003      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	74fb      	strb	r3, [r7, #19]
      break;
 800269e:	e000      	b.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80026a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d10b      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026a8:	4b76      	ldr	r3, [pc, #472]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026ae:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80026b6:	4973      	ldr	r1, [pc, #460]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80026be:	e001      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d041      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80026d4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026d8:	d02a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80026da:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80026de:	d824      	bhi.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026e4:	d008      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026e6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80026ea:	d81e      	bhi.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026f4:	d010      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026f6:	e018      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026f8:	4b62      	ldr	r3, [pc, #392]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a61      	ldr	r2, [pc, #388]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002702:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002704:	e015      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3304      	adds	r3, #4
 800270a:	2100      	movs	r1, #0
 800270c:	4618      	mov	r0, r3
 800270e:	f000 fa73 	bl	8002bf8 <RCCEx_PLLSAI1_Config>
 8002712:	4603      	mov	r3, r0
 8002714:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002716:	e00c      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3320      	adds	r3, #32
 800271c:	2100      	movs	r1, #0
 800271e:	4618      	mov	r0, r3
 8002720:	f000 fb5e 	bl	8002de0 <RCCEx_PLLSAI2_Config>
 8002724:	4603      	mov	r3, r0
 8002726:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002728:	e003      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	74fb      	strb	r3, [r7, #19]
      break;
 800272e:	e000      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002730:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d10b      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002738:	4b52      	ldr	r3, [pc, #328]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002746:	494f      	ldr	r1, [pc, #316]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	4313      	orrs	r3, r2
 800274a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800274e:	e001      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80a0 	beq.w	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002762:	2300      	movs	r3, #0
 8002764:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002766:	4b47      	ldr	r3, [pc, #284]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002772:	2301      	movs	r3, #1
 8002774:	e000      	b.n	8002778 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002776:	2300      	movs	r3, #0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277c:	4b41      	ldr	r3, [pc, #260]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	4a40      	ldr	r2, [pc, #256]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002782:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002786:	6593      	str	r3, [r2, #88]	@ 0x58
 8002788:	4b3e      	ldr	r3, [pc, #248]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002794:	2301      	movs	r3, #1
 8002796:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002798:	4b3b      	ldr	r3, [pc, #236]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a3a      	ldr	r2, [pc, #232]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800279e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80027a4:	f7fe f9c0 	bl	8000b28 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027aa:	e009      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ac:	f7fe f9bc 	bl	8000b28 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d902      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	74fb      	strb	r3, [r7, #19]
        break;
 80027be:	e005      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80027c0:	4b31      	ldr	r3, [pc, #196]	@ (8002888 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0ef      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80027cc:	7cfb      	ldrb	r3, [r7, #19]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d15c      	bne.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80027d2:	4b2c      	ldr	r3, [pc, #176]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d01f      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ea:	697a      	ldr	r2, [r7, #20]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d019      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027f0:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027fa:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027fc:	4b21      	ldr	r3, [pc, #132]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002802:	4a20      	ldr	r2, [pc, #128]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002808:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800280c:	4b1d      	ldr	r3, [pc, #116]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002812:	4a1c      	ldr	r2, [pc, #112]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002818:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800281c:	4a19      	ldr	r2, [pc, #100]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282e:	f7fe f97b 	bl	8000b28 <HAL_GetTick>
 8002832:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002834:	e00b      	b.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7fe f977 	bl	8000b28 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002844:	4293      	cmp	r3, r2
 8002846:	d902      	bls.n	800284e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	74fb      	strb	r3, [r7, #19]
            break;
 800284c:	e006      	b.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284e:	4b0d      	ldr	r3, [pc, #52]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002850:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0ec      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800285c:	7cfb      	ldrb	r3, [r7, #19]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10c      	bne.n	800287c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002862:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002864:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002868:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002872:	4904      	ldr	r1, [pc, #16]	@ (8002884 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800287a:	e009      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	74bb      	strb	r3, [r7, #18]
 8002880:	e006      	b.n	8002890 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002882:	bf00      	nop
 8002884:	40021000 	.word	0x40021000
 8002888:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800288c:	7cfb      	ldrb	r3, [r7, #19]
 800288e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002890:	7c7b      	ldrb	r3, [r7, #17]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d105      	bne.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002896:	4b9e      	ldr	r3, [pc, #632]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	4a9d      	ldr	r2, [pc, #628]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800289c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028a0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d00a      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80028ae:	4b98      	ldr	r3, [pc, #608]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028b4:	f023 0203 	bic.w	r2, r3, #3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	4994      	ldr	r1, [pc, #592]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0302 	and.w	r3, r3, #2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80028d0:	4b8f      	ldr	r3, [pc, #572]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028d6:	f023 020c 	bic.w	r2, r3, #12
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028de:	498c      	ldr	r1, [pc, #560]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00a      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028f2:	4b87      	ldr	r3, [pc, #540]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028f8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002900:	4983      	ldr	r1, [pc, #524]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002902:	4313      	orrs	r3, r2
 8002904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d00a      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002914:	4b7e      	ldr	r3, [pc, #504]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800291a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002922:	497b      	ldr	r1, [pc, #492]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0310 	and.w	r3, r3, #16
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00a      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002936:	4b76      	ldr	r3, [pc, #472]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002938:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800293c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002944:	4972      	ldr	r1, [pc, #456]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002946:	4313      	orrs	r3, r2
 8002948:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00a      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002958:	4b6d      	ldr	r3, [pc, #436]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800295e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002966:	496a      	ldr	r1, [pc, #424]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00a      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800297a:	4b65      	ldr	r3, [pc, #404]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002980:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002988:	4961      	ldr	r1, [pc, #388]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00a      	beq.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800299c:	4b5c      	ldr	r3, [pc, #368]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029aa:	4959      	ldr	r1, [pc, #356]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d00a      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80029be:	4b54      	ldr	r3, [pc, #336]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029cc:	4950      	ldr	r1, [pc, #320]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d00a      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029e6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ee:	4948      	ldr	r1, [pc, #288]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00a      	beq.n	8002a18 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a02:	4b43      	ldr	r3, [pc, #268]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a10:	493f      	ldr	r1, [pc, #252]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d028      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a24:	4b3a      	ldr	r3, [pc, #232]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a2a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a32:	4937      	ldr	r1, [pc, #220]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a3e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a42:	d106      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a44:	4b32      	ldr	r3, [pc, #200]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4a31      	ldr	r2, [pc, #196]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a4e:	60d3      	str	r3, [r2, #12]
 8002a50:	e011      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a56:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002a5a:	d10c      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2101      	movs	r1, #1
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f8c8 	bl	8002bf8 <RCCEx_PLLSAI1_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d001      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d028      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a82:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a88:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a90:	491f      	ldr	r1, [pc, #124]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002aa0:	d106      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002aac:	60d3      	str	r3, [r2, #12]
 8002aae:	e011      	b.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ab4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ab8:	d10c      	bne.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3304      	adds	r3, #4
 8002abe:	2101      	movs	r1, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f000 f899 	bl	8002bf8 <RCCEx_PLLSAI1_Config>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d001      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d02b      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ae6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aee:	4908      	ldr	r1, [pc, #32]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002afa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002afe:	d109      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b00:	4b03      	ldr	r3, [pc, #12]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	4a02      	ldr	r2, [pc, #8]	@ (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002b0a:	60d3      	str	r3, [r2, #12]
 8002b0c:	e014      	b.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b18:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002b1c:	d10c      	bne.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	2101      	movs	r1, #1
 8002b24:	4618      	mov	r0, r3
 8002b26:	f000 f867 	bl	8002bf8 <RCCEx_PLLSAI1_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d001      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002b34:	7cfb      	ldrb	r3, [r7, #19]
 8002b36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d02f      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b44:	4b2b      	ldr	r3, [pc, #172]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002b4a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b52:	4928      	ldr	r1, [pc, #160]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b62:	d10d      	bne.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3304      	adds	r3, #4
 8002b68:	2102      	movs	r1, #2
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 f844 	bl	8002bf8 <RCCEx_PLLSAI1_Config>
 8002b70:	4603      	mov	r3, r0
 8002b72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b74:	7cfb      	ldrb	r3, [r7, #19]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d014      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b7a:	7cfb      	ldrb	r3, [r7, #19]
 8002b7c:	74bb      	strb	r3, [r7, #18]
 8002b7e:	e011      	b.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b88:	d10c      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	3320      	adds	r3, #32
 8002b8e:	2102      	movs	r1, #2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f000 f925 	bl	8002de0 <RCCEx_PLLSAI2_Config>
 8002b96:	4603      	mov	r3, r0
 8002b98:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b9a:	7cfb      	ldrb	r3, [r7, #19]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ba0:	7cfb      	ldrb	r3, [r7, #19]
 8002ba2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d00a      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002bb0:	4b10      	ldr	r3, [pc, #64]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bb6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bbe:	490d      	ldr	r1, [pc, #52]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00b      	beq.n	8002bea <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002bd2:	4b08      	ldr	r3, [pc, #32]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002bd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be2:	4904      	ldr	r1, [pc, #16]	@ (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002bea:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	3718      	adds	r7, #24
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000

08002bf8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b084      	sub	sp, #16
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c02:	2300      	movs	r3, #0
 8002c04:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c06:	4b75      	ldr	r3, [pc, #468]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d018      	beq.n	8002c44 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c12:	4b72      	ldr	r3, [pc, #456]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f003 0203 	and.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d10d      	bne.n	8002c3e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
       ||
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d009      	beq.n	8002c3e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002c2a:	4b6c      	ldr	r3, [pc, #432]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	091b      	lsrs	r3, r3, #4
 8002c30:	f003 0307 	and.w	r3, r3, #7
 8002c34:	1c5a      	adds	r2, r3, #1
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	685b      	ldr	r3, [r3, #4]
       ||
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d047      	beq.n	8002cce <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	e044      	b.n	8002cce <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d018      	beq.n	8002c7e <RCCEx_PLLSAI1_Config+0x86>
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d825      	bhi.n	8002c9c <RCCEx_PLLSAI1_Config+0xa4>
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <RCCEx_PLLSAI1_Config+0x62>
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d009      	beq.n	8002c6c <RCCEx_PLLSAI1_Config+0x74>
 8002c58:	e020      	b.n	8002c9c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c5a:	4b60      	ldr	r3, [pc, #384]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11d      	bne.n	8002ca2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6a:	e01a      	b.n	8002ca2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c6c:	4b5b      	ldr	r3, [pc, #364]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d116      	bne.n	8002ca6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7c:	e013      	b.n	8002ca6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c7e:	4b57      	ldr	r3, [pc, #348]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c8a:	4b54      	ldr	r3, [pc, #336]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c9a:	e006      	b.n	8002caa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e004      	b.n	8002cac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e002      	b.n	8002cac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002caa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10d      	bne.n	8002cce <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002cb2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	011b      	lsls	r3, r3, #4
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	4944      	ldr	r1, [pc, #272]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d17d      	bne.n	8002dd0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002cd4:	4b41      	ldr	r3, [pc, #260]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a40      	ldr	r2, [pc, #256]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cda:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002cde:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ce0:	f7fd ff22 	bl	8000b28 <HAL_GetTick>
 8002ce4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ce6:	e009      	b.n	8002cfc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ce8:	f7fd ff1e 	bl	8000b28 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d902      	bls.n	8002cfc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	73fb      	strb	r3, [r7, #15]
        break;
 8002cfa:	e005      	b.n	8002d08 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cfc:	4b37      	ldr	r3, [pc, #220]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1ef      	bne.n	8002ce8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d08:	7bfb      	ldrb	r3, [r7, #15]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d160      	bne.n	8002dd0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d111      	bne.n	8002d38 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d14:	4b31      	ldr	r3, [pc, #196]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002d1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6892      	ldr	r2, [r2, #8]
 8002d24:	0211      	lsls	r1, r2, #8
 8002d26:	687a      	ldr	r2, [r7, #4]
 8002d28:	68d2      	ldr	r2, [r2, #12]
 8002d2a:	0912      	lsrs	r2, r2, #4
 8002d2c:	0452      	lsls	r2, r2, #17
 8002d2e:	430a      	orrs	r2, r1
 8002d30:	492a      	ldr	r1, [pc, #168]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	610b      	str	r3, [r1, #16]
 8002d36:	e027      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d112      	bne.n	8002d64 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d3e:	4b27      	ldr	r3, [pc, #156]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002d46:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d4a:	687a      	ldr	r2, [r7, #4]
 8002d4c:	6892      	ldr	r2, [r2, #8]
 8002d4e:	0211      	lsls	r1, r2, #8
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	6912      	ldr	r2, [r2, #16]
 8002d54:	0852      	lsrs	r2, r2, #1
 8002d56:	3a01      	subs	r2, #1
 8002d58:	0552      	lsls	r2, r2, #21
 8002d5a:	430a      	orrs	r2, r1
 8002d5c:	491f      	ldr	r1, [pc, #124]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	610b      	str	r3, [r1, #16]
 8002d62:	e011      	b.n	8002d88 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d64:	4b1d      	ldr	r3, [pc, #116]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002d6c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002d70:	687a      	ldr	r2, [r7, #4]
 8002d72:	6892      	ldr	r2, [r2, #8]
 8002d74:	0211      	lsls	r1, r2, #8
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6952      	ldr	r2, [r2, #20]
 8002d7a:	0852      	lsrs	r2, r2, #1
 8002d7c:	3a01      	subs	r2, #1
 8002d7e:	0652      	lsls	r2, r2, #25
 8002d80:	430a      	orrs	r2, r1
 8002d82:	4916      	ldr	r1, [pc, #88]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d88:	4b14      	ldr	r3, [pc, #80]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a13      	ldr	r2, [pc, #76]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d94:	f7fd fec8 	bl	8000b28 <HAL_GetTick>
 8002d98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d9a:	e009      	b.n	8002db0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d9c:	f7fd fec4 	bl	8000b28 <HAL_GetTick>
 8002da0:	4602      	mov	r2, r0
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d902      	bls.n	8002db0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002daa:	2303      	movs	r3, #3
 8002dac:	73fb      	strb	r3, [r7, #15]
          break;
 8002dae:	e005      	b.n	8002dbc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0ef      	beq.n	8002d9c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002dc2:	4b06      	ldr	r3, [pc, #24]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dc4:	691a      	ldr	r2, [r3, #16]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	4904      	ldr	r1, [pc, #16]	@ (8002ddc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002dd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3710      	adds	r7, #16
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bd80      	pop	{r7, pc}
 8002dda:	bf00      	nop
 8002ddc:	40021000 	.word	0x40021000

08002de0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dea:	2300      	movs	r3, #0
 8002dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dee:	4b6a      	ldr	r3, [pc, #424]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df0:	68db      	ldr	r3, [r3, #12]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d018      	beq.n	8002e2c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dfa:	4b67      	ldr	r3, [pc, #412]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0203 	and.w	r2, r3, #3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d10d      	bne.n	8002e26 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
       ||
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d009      	beq.n	8002e26 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e12:	4b61      	ldr	r3, [pc, #388]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
       ||
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d047      	beq.n	8002eb6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
 8002e2a:	e044      	b.n	8002eb6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b03      	cmp	r3, #3
 8002e32:	d018      	beq.n	8002e66 <RCCEx_PLLSAI2_Config+0x86>
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d825      	bhi.n	8002e84 <RCCEx_PLLSAI2_Config+0xa4>
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d002      	beq.n	8002e42 <RCCEx_PLLSAI2_Config+0x62>
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d009      	beq.n	8002e54 <RCCEx_PLLSAI2_Config+0x74>
 8002e40:	e020      	b.n	8002e84 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e42:	4b55      	ldr	r3, [pc, #340]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d11d      	bne.n	8002e8a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e52:	e01a      	b.n	8002e8a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e54:	4b50      	ldr	r3, [pc, #320]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d116      	bne.n	8002e8e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e60:	2301      	movs	r3, #1
 8002e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e64:	e013      	b.n	8002e8e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e66:	4b4c      	ldr	r3, [pc, #304]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10f      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e72:	4b49      	ldr	r3, [pc, #292]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d109      	bne.n	8002e92 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e82:	e006      	b.n	8002e92 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	73fb      	strb	r3, [r7, #15]
      break;
 8002e88:	e004      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e8a:	bf00      	nop
 8002e8c:	e002      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e8e:	bf00      	nop
 8002e90:	e000      	b.n	8002e94 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e92:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e94:	7bfb      	ldrb	r3, [r7, #15]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10d      	bne.n	8002eb6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e9a:	4b3f      	ldr	r3, [pc, #252]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6819      	ldr	r1, [r3, #0]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	011b      	lsls	r3, r3, #4
 8002eae:	430b      	orrs	r3, r1
 8002eb0:	4939      	ldr	r1, [pc, #228]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002eb6:	7bfb      	ldrb	r3, [r7, #15]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d167      	bne.n	8002f8c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ebc:	4b36      	ldr	r3, [pc, #216]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a35      	ldr	r2, [pc, #212]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ec2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ec8:	f7fd fe2e 	bl	8000b28 <HAL_GetTick>
 8002ecc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ece:	e009      	b.n	8002ee4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ed0:	f7fd fe2a 	bl	8000b28 <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d902      	bls.n	8002ee4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ee2:	e005      	b.n	8002ef0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ee4:	4b2c      	ldr	r3, [pc, #176]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d1ef      	bne.n	8002ed0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d14a      	bne.n	8002f8c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d111      	bne.n	8002f20 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002efc:	4b26      	ldr	r3, [pc, #152]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	695b      	ldr	r3, [r3, #20]
 8002f00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f08:	687a      	ldr	r2, [r7, #4]
 8002f0a:	6892      	ldr	r2, [r2, #8]
 8002f0c:	0211      	lsls	r1, r2, #8
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68d2      	ldr	r2, [r2, #12]
 8002f12:	0912      	lsrs	r2, r2, #4
 8002f14:	0452      	lsls	r2, r2, #17
 8002f16:	430a      	orrs	r2, r1
 8002f18:	491f      	ldr	r1, [pc, #124]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	614b      	str	r3, [r1, #20]
 8002f1e:	e011      	b.n	8002f44 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f20:	4b1d      	ldr	r3, [pc, #116]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002f28:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6892      	ldr	r2, [r2, #8]
 8002f30:	0211      	lsls	r1, r2, #8
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	6912      	ldr	r2, [r2, #16]
 8002f36:	0852      	lsrs	r2, r2, #1
 8002f38:	3a01      	subs	r2, #1
 8002f3a:	0652      	lsls	r2, r2, #25
 8002f3c:	430a      	orrs	r2, r1
 8002f3e:	4916      	ldr	r1, [pc, #88]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002f44:	4b14      	ldr	r3, [pc, #80]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a13      	ldr	r2, [pc, #76]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f4e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f50:	f7fd fdea 	bl	8000b28 <HAL_GetTick>
 8002f54:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f56:	e009      	b.n	8002f6c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f58:	f7fd fde6 	bl	8000b28 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	73fb      	strb	r3, [r7, #15]
          break;
 8002f6a:	e005      	b.n	8002f78 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0ef      	beq.n	8002f58 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d106      	bne.n	8002f8c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f7e:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f80:	695a      	ldr	r2, [r3, #20]
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	4904      	ldr	r1, [pc, #16]	@ (8002f98 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3710      	adds	r7, #16
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}
 8002f96:	bf00      	nop
 8002f98:	40021000 	.word	0x40021000

08002f9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d101      	bne.n	8002fae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e040      	b.n	8003030 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d106      	bne.n	8002fc4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f7fd fc7a 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2224      	movs	r2, #36	@ 0x24
 8002fc8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f022 0201 	bic.w	r2, r2, #1
 8002fd8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d002      	beq.n	8002fe8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 fae0 	bl	80035a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f000 f825 	bl	8003038 <UART_SetConfig>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e01b      	b.n	8003030 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685a      	ldr	r2, [r3, #4]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003006:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003016:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0201 	orr.w	r2, r2, #1
 8003026:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fb5f 	bl	80036ec <UART_CheckIdleState>
 800302e:	4603      	mov	r3, r0
}
 8003030:	4618      	mov	r0, r3
 8003032:	3708      	adds	r7, #8
 8003034:	46bd      	mov	sp, r7
 8003036:	bd80      	pop	{r7, pc}

08003038 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003038:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800303c:	b08a      	sub	sp, #40	@ 0x28
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003042:	2300      	movs	r3, #0
 8003044:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	691b      	ldr	r3, [r3, #16]
 8003050:	431a      	orrs	r2, r3
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	695b      	ldr	r3, [r3, #20]
 8003056:	431a      	orrs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	69db      	ldr	r3, [r3, #28]
 800305c:	4313      	orrs	r3, r2
 800305e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	4ba4      	ldr	r3, [pc, #656]	@ (80032f8 <UART_SetConfig+0x2c0>)
 8003068:	4013      	ands	r3, r2
 800306a:	68fa      	ldr	r2, [r7, #12]
 800306c:	6812      	ldr	r2, [r2, #0]
 800306e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003070:	430b      	orrs	r3, r1
 8003072:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	68da      	ldr	r2, [r3, #12]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a99      	ldr	r2, [pc, #612]	@ (80032fc <UART_SetConfig+0x2c4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d004      	beq.n	80030a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030a0:	4313      	orrs	r3, r2
 80030a2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80030b4:	430a      	orrs	r2, r1
 80030b6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a90      	ldr	r2, [pc, #576]	@ (8003300 <UART_SetConfig+0x2c8>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d126      	bne.n	8003110 <UART_SetConfig+0xd8>
 80030c2:	4b90      	ldr	r3, [pc, #576]	@ (8003304 <UART_SetConfig+0x2cc>)
 80030c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030c8:	f003 0303 	and.w	r3, r3, #3
 80030cc:	2b03      	cmp	r3, #3
 80030ce:	d81b      	bhi.n	8003108 <UART_SetConfig+0xd0>
 80030d0:	a201      	add	r2, pc, #4	@ (adr r2, 80030d8 <UART_SetConfig+0xa0>)
 80030d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030d6:	bf00      	nop
 80030d8:	080030e9 	.word	0x080030e9
 80030dc:	080030f9 	.word	0x080030f9
 80030e0:	080030f1 	.word	0x080030f1
 80030e4:	08003101 	.word	0x08003101
 80030e8:	2301      	movs	r3, #1
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ee:	e116      	b.n	800331e <UART_SetConfig+0x2e6>
 80030f0:	2302      	movs	r3, #2
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f6:	e112      	b.n	800331e <UART_SetConfig+0x2e6>
 80030f8:	2304      	movs	r3, #4
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030fe:	e10e      	b.n	800331e <UART_SetConfig+0x2e6>
 8003100:	2308      	movs	r3, #8
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003106:	e10a      	b.n	800331e <UART_SetConfig+0x2e6>
 8003108:	2310      	movs	r3, #16
 800310a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800310e:	e106      	b.n	800331e <UART_SetConfig+0x2e6>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a7c      	ldr	r2, [pc, #496]	@ (8003308 <UART_SetConfig+0x2d0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d138      	bne.n	800318c <UART_SetConfig+0x154>
 800311a:	4b7a      	ldr	r3, [pc, #488]	@ (8003304 <UART_SetConfig+0x2cc>)
 800311c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003120:	f003 030c 	and.w	r3, r3, #12
 8003124:	2b0c      	cmp	r3, #12
 8003126:	d82d      	bhi.n	8003184 <UART_SetConfig+0x14c>
 8003128:	a201      	add	r2, pc, #4	@ (adr r2, 8003130 <UART_SetConfig+0xf8>)
 800312a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312e:	bf00      	nop
 8003130:	08003165 	.word	0x08003165
 8003134:	08003185 	.word	0x08003185
 8003138:	08003185 	.word	0x08003185
 800313c:	08003185 	.word	0x08003185
 8003140:	08003175 	.word	0x08003175
 8003144:	08003185 	.word	0x08003185
 8003148:	08003185 	.word	0x08003185
 800314c:	08003185 	.word	0x08003185
 8003150:	0800316d 	.word	0x0800316d
 8003154:	08003185 	.word	0x08003185
 8003158:	08003185 	.word	0x08003185
 800315c:	08003185 	.word	0x08003185
 8003160:	0800317d 	.word	0x0800317d
 8003164:	2300      	movs	r3, #0
 8003166:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800316a:	e0d8      	b.n	800331e <UART_SetConfig+0x2e6>
 800316c:	2302      	movs	r3, #2
 800316e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003172:	e0d4      	b.n	800331e <UART_SetConfig+0x2e6>
 8003174:	2304      	movs	r3, #4
 8003176:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800317a:	e0d0      	b.n	800331e <UART_SetConfig+0x2e6>
 800317c:	2308      	movs	r3, #8
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003182:	e0cc      	b.n	800331e <UART_SetConfig+0x2e6>
 8003184:	2310      	movs	r3, #16
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318a:	e0c8      	b.n	800331e <UART_SetConfig+0x2e6>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a5e      	ldr	r2, [pc, #376]	@ (800330c <UART_SetConfig+0x2d4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d125      	bne.n	80031e2 <UART_SetConfig+0x1aa>
 8003196:	4b5b      	ldr	r3, [pc, #364]	@ (8003304 <UART_SetConfig+0x2cc>)
 8003198:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800319c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80031a0:	2b30      	cmp	r3, #48	@ 0x30
 80031a2:	d016      	beq.n	80031d2 <UART_SetConfig+0x19a>
 80031a4:	2b30      	cmp	r3, #48	@ 0x30
 80031a6:	d818      	bhi.n	80031da <UART_SetConfig+0x1a2>
 80031a8:	2b20      	cmp	r3, #32
 80031aa:	d00a      	beq.n	80031c2 <UART_SetConfig+0x18a>
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d814      	bhi.n	80031da <UART_SetConfig+0x1a2>
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <UART_SetConfig+0x182>
 80031b4:	2b10      	cmp	r3, #16
 80031b6:	d008      	beq.n	80031ca <UART_SetConfig+0x192>
 80031b8:	e00f      	b.n	80031da <UART_SetConfig+0x1a2>
 80031ba:	2300      	movs	r3, #0
 80031bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c0:	e0ad      	b.n	800331e <UART_SetConfig+0x2e6>
 80031c2:	2302      	movs	r3, #2
 80031c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031c8:	e0a9      	b.n	800331e <UART_SetConfig+0x2e6>
 80031ca:	2304      	movs	r3, #4
 80031cc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d0:	e0a5      	b.n	800331e <UART_SetConfig+0x2e6>
 80031d2:	2308      	movs	r3, #8
 80031d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031d8:	e0a1      	b.n	800331e <UART_SetConfig+0x2e6>
 80031da:	2310      	movs	r3, #16
 80031dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e0:	e09d      	b.n	800331e <UART_SetConfig+0x2e6>
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a4a      	ldr	r2, [pc, #296]	@ (8003310 <UART_SetConfig+0x2d8>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d125      	bne.n	8003238 <UART_SetConfig+0x200>
 80031ec:	4b45      	ldr	r3, [pc, #276]	@ (8003304 <UART_SetConfig+0x2cc>)
 80031ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80031f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80031f8:	d016      	beq.n	8003228 <UART_SetConfig+0x1f0>
 80031fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80031fc:	d818      	bhi.n	8003230 <UART_SetConfig+0x1f8>
 80031fe:	2b80      	cmp	r3, #128	@ 0x80
 8003200:	d00a      	beq.n	8003218 <UART_SetConfig+0x1e0>
 8003202:	2b80      	cmp	r3, #128	@ 0x80
 8003204:	d814      	bhi.n	8003230 <UART_SetConfig+0x1f8>
 8003206:	2b00      	cmp	r3, #0
 8003208:	d002      	beq.n	8003210 <UART_SetConfig+0x1d8>
 800320a:	2b40      	cmp	r3, #64	@ 0x40
 800320c:	d008      	beq.n	8003220 <UART_SetConfig+0x1e8>
 800320e:	e00f      	b.n	8003230 <UART_SetConfig+0x1f8>
 8003210:	2300      	movs	r3, #0
 8003212:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003216:	e082      	b.n	800331e <UART_SetConfig+0x2e6>
 8003218:	2302      	movs	r3, #2
 800321a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800321e:	e07e      	b.n	800331e <UART_SetConfig+0x2e6>
 8003220:	2304      	movs	r3, #4
 8003222:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003226:	e07a      	b.n	800331e <UART_SetConfig+0x2e6>
 8003228:	2308      	movs	r3, #8
 800322a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322e:	e076      	b.n	800331e <UART_SetConfig+0x2e6>
 8003230:	2310      	movs	r3, #16
 8003232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003236:	e072      	b.n	800331e <UART_SetConfig+0x2e6>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a35      	ldr	r2, [pc, #212]	@ (8003314 <UART_SetConfig+0x2dc>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d12a      	bne.n	8003298 <UART_SetConfig+0x260>
 8003242:	4b30      	ldr	r3, [pc, #192]	@ (8003304 <UART_SetConfig+0x2cc>)
 8003244:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003248:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800324c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003250:	d01a      	beq.n	8003288 <UART_SetConfig+0x250>
 8003252:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003256:	d81b      	bhi.n	8003290 <UART_SetConfig+0x258>
 8003258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800325c:	d00c      	beq.n	8003278 <UART_SetConfig+0x240>
 800325e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003262:	d815      	bhi.n	8003290 <UART_SetConfig+0x258>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <UART_SetConfig+0x238>
 8003268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800326c:	d008      	beq.n	8003280 <UART_SetConfig+0x248>
 800326e:	e00f      	b.n	8003290 <UART_SetConfig+0x258>
 8003270:	2300      	movs	r3, #0
 8003272:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003276:	e052      	b.n	800331e <UART_SetConfig+0x2e6>
 8003278:	2302      	movs	r3, #2
 800327a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800327e:	e04e      	b.n	800331e <UART_SetConfig+0x2e6>
 8003280:	2304      	movs	r3, #4
 8003282:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003286:	e04a      	b.n	800331e <UART_SetConfig+0x2e6>
 8003288:	2308      	movs	r3, #8
 800328a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800328e:	e046      	b.n	800331e <UART_SetConfig+0x2e6>
 8003290:	2310      	movs	r3, #16
 8003292:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003296:	e042      	b.n	800331e <UART_SetConfig+0x2e6>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a17      	ldr	r2, [pc, #92]	@ (80032fc <UART_SetConfig+0x2c4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d13a      	bne.n	8003318 <UART_SetConfig+0x2e0>
 80032a2:	4b18      	ldr	r3, [pc, #96]	@ (8003304 <UART_SetConfig+0x2cc>)
 80032a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80032ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032b0:	d01a      	beq.n	80032e8 <UART_SetConfig+0x2b0>
 80032b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80032b6:	d81b      	bhi.n	80032f0 <UART_SetConfig+0x2b8>
 80032b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032bc:	d00c      	beq.n	80032d8 <UART_SetConfig+0x2a0>
 80032be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032c2:	d815      	bhi.n	80032f0 <UART_SetConfig+0x2b8>
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d003      	beq.n	80032d0 <UART_SetConfig+0x298>
 80032c8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032cc:	d008      	beq.n	80032e0 <UART_SetConfig+0x2a8>
 80032ce:	e00f      	b.n	80032f0 <UART_SetConfig+0x2b8>
 80032d0:	2300      	movs	r3, #0
 80032d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032d6:	e022      	b.n	800331e <UART_SetConfig+0x2e6>
 80032d8:	2302      	movs	r3, #2
 80032da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032de:	e01e      	b.n	800331e <UART_SetConfig+0x2e6>
 80032e0:	2304      	movs	r3, #4
 80032e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032e6:	e01a      	b.n	800331e <UART_SetConfig+0x2e6>
 80032e8:	2308      	movs	r3, #8
 80032ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ee:	e016      	b.n	800331e <UART_SetConfig+0x2e6>
 80032f0:	2310      	movs	r3, #16
 80032f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032f6:	e012      	b.n	800331e <UART_SetConfig+0x2e6>
 80032f8:	efff69f3 	.word	0xefff69f3
 80032fc:	40008000 	.word	0x40008000
 8003300:	40013800 	.word	0x40013800
 8003304:	40021000 	.word	0x40021000
 8003308:	40004400 	.word	0x40004400
 800330c:	40004800 	.word	0x40004800
 8003310:	40004c00 	.word	0x40004c00
 8003314:	40005000 	.word	0x40005000
 8003318:	2310      	movs	r3, #16
 800331a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a9f      	ldr	r2, [pc, #636]	@ (80035a0 <UART_SetConfig+0x568>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d17a      	bne.n	800341e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003328:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800332c:	2b08      	cmp	r3, #8
 800332e:	d824      	bhi.n	800337a <UART_SetConfig+0x342>
 8003330:	a201      	add	r2, pc, #4	@ (adr r2, 8003338 <UART_SetConfig+0x300>)
 8003332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003336:	bf00      	nop
 8003338:	0800335d 	.word	0x0800335d
 800333c:	0800337b 	.word	0x0800337b
 8003340:	08003365 	.word	0x08003365
 8003344:	0800337b 	.word	0x0800337b
 8003348:	0800336b 	.word	0x0800336b
 800334c:	0800337b 	.word	0x0800337b
 8003350:	0800337b 	.word	0x0800337b
 8003354:	0800337b 	.word	0x0800337b
 8003358:	08003373 	.word	0x08003373
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800335c:	f7ff f8d6 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8003360:	61f8      	str	r0, [r7, #28]
        break;
 8003362:	e010      	b.n	8003386 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003364:	4b8f      	ldr	r3, [pc, #572]	@ (80035a4 <UART_SetConfig+0x56c>)
 8003366:	61fb      	str	r3, [r7, #28]
        break;
 8003368:	e00d      	b.n	8003386 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800336a:	f7ff f837 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 800336e:	61f8      	str	r0, [r7, #28]
        break;
 8003370:	e009      	b.n	8003386 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003372:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003376:	61fb      	str	r3, [r7, #28]
        break;
 8003378:	e005      	b.n	8003386 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003384:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80fb 	beq.w	8003584 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	685a      	ldr	r2, [r3, #4]
 8003392:	4613      	mov	r3, r2
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	4413      	add	r3, r2
 8003398:	69fa      	ldr	r2, [r7, #28]
 800339a:	429a      	cmp	r2, r3
 800339c:	d305      	bcc.n	80033aa <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033a4:	69fa      	ldr	r2, [r7, #28]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d903      	bls.n	80033b2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033b0:	e0e8      	b.n	8003584 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2200      	movs	r2, #0
 80033b6:	461c      	mov	r4, r3
 80033b8:	4615      	mov	r5, r2
 80033ba:	f04f 0200 	mov.w	r2, #0
 80033be:	f04f 0300 	mov.w	r3, #0
 80033c2:	022b      	lsls	r3, r5, #8
 80033c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033c8:	0222      	lsls	r2, r4, #8
 80033ca:	68f9      	ldr	r1, [r7, #12]
 80033cc:	6849      	ldr	r1, [r1, #4]
 80033ce:	0849      	lsrs	r1, r1, #1
 80033d0:	2000      	movs	r0, #0
 80033d2:	4688      	mov	r8, r1
 80033d4:	4681      	mov	r9, r0
 80033d6:	eb12 0a08 	adds.w	sl, r2, r8
 80033da:	eb43 0b09 	adc.w	fp, r3, r9
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	2200      	movs	r2, #0
 80033e4:	603b      	str	r3, [r7, #0]
 80033e6:	607a      	str	r2, [r7, #4]
 80033e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033ec:	4650      	mov	r0, sl
 80033ee:	4659      	mov	r1, fp
 80033f0:	f7fc feea 	bl	80001c8 <__aeabi_uldivmod>
 80033f4:	4602      	mov	r2, r0
 80033f6:	460b      	mov	r3, r1
 80033f8:	4613      	mov	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033fc:	69bb      	ldr	r3, [r7, #24]
 80033fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003402:	d308      	bcc.n	8003416 <UART_SetConfig+0x3de>
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800340a:	d204      	bcs.n	8003416 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	60da      	str	r2, [r3, #12]
 8003414:	e0b6      	b.n	8003584 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800341c:	e0b2      	b.n	8003584 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003426:	d15e      	bne.n	80034e6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003428:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800342c:	2b08      	cmp	r3, #8
 800342e:	d828      	bhi.n	8003482 <UART_SetConfig+0x44a>
 8003430:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <UART_SetConfig+0x400>)
 8003432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003436:	bf00      	nop
 8003438:	0800345d 	.word	0x0800345d
 800343c:	08003465 	.word	0x08003465
 8003440:	0800346d 	.word	0x0800346d
 8003444:	08003483 	.word	0x08003483
 8003448:	08003473 	.word	0x08003473
 800344c:	08003483 	.word	0x08003483
 8003450:	08003483 	.word	0x08003483
 8003454:	08003483 	.word	0x08003483
 8003458:	0800347b 	.word	0x0800347b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800345c:	f7ff f856 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 8003460:	61f8      	str	r0, [r7, #28]
        break;
 8003462:	e014      	b.n	800348e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003464:	f7ff f868 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8003468:	61f8      	str	r0, [r7, #28]
        break;
 800346a:	e010      	b.n	800348e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800346c:	4b4d      	ldr	r3, [pc, #308]	@ (80035a4 <UART_SetConfig+0x56c>)
 800346e:	61fb      	str	r3, [r7, #28]
        break;
 8003470:	e00d      	b.n	800348e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003472:	f7fe ffb3 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8003476:	61f8      	str	r0, [r7, #28]
        break;
 8003478:	e009      	b.n	800348e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800347a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800347e:	61fb      	str	r3, [r7, #28]
        break;
 8003480:	e005      	b.n	800348e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800348c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d077      	beq.n	8003584 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	005a      	lsls	r2, r3, #1
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	085b      	lsrs	r3, r3, #1
 800349e:	441a      	add	r2, r3
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034a8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b0f      	cmp	r3, #15
 80034ae:	d916      	bls.n	80034de <UART_SetConfig+0x4a6>
 80034b0:	69bb      	ldr	r3, [r7, #24]
 80034b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034b6:	d212      	bcs.n	80034de <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034b8:	69bb      	ldr	r3, [r7, #24]
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	f023 030f 	bic.w	r3, r3, #15
 80034c0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034c2:	69bb      	ldr	r3, [r7, #24]
 80034c4:	085b      	lsrs	r3, r3, #1
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	f003 0307 	and.w	r3, r3, #7
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	8afb      	ldrh	r3, [r7, #22]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	8afa      	ldrh	r2, [r7, #22]
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e052      	b.n	8003584 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034e4:	e04e      	b.n	8003584 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034e6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80034ea:	2b08      	cmp	r3, #8
 80034ec:	d827      	bhi.n	800353e <UART_SetConfig+0x506>
 80034ee:	a201      	add	r2, pc, #4	@ (adr r2, 80034f4 <UART_SetConfig+0x4bc>)
 80034f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034f4:	08003519 	.word	0x08003519
 80034f8:	08003521 	.word	0x08003521
 80034fc:	08003529 	.word	0x08003529
 8003500:	0800353f 	.word	0x0800353f
 8003504:	0800352f 	.word	0x0800352f
 8003508:	0800353f 	.word	0x0800353f
 800350c:	0800353f 	.word	0x0800353f
 8003510:	0800353f 	.word	0x0800353f
 8003514:	08003537 	.word	0x08003537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003518:	f7fe fff8 	bl	800250c <HAL_RCC_GetPCLK1Freq>
 800351c:	61f8      	str	r0, [r7, #28]
        break;
 800351e:	e014      	b.n	800354a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003520:	f7ff f80a 	bl	8002538 <HAL_RCC_GetPCLK2Freq>
 8003524:	61f8      	str	r0, [r7, #28]
        break;
 8003526:	e010      	b.n	800354a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003528:	4b1e      	ldr	r3, [pc, #120]	@ (80035a4 <UART_SetConfig+0x56c>)
 800352a:	61fb      	str	r3, [r7, #28]
        break;
 800352c:	e00d      	b.n	800354a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800352e:	f7fe ff55 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8003532:	61f8      	str	r0, [r7, #28]
        break;
 8003534:	e009      	b.n	800354a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003536:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800353a:	61fb      	str	r3, [r7, #28]
        break;
 800353c:	e005      	b.n	800354a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800353e:	2300      	movs	r3, #0
 8003540:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003548:	bf00      	nop
    }

    if (pclk != 0U)
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d019      	beq.n	8003584 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	085a      	lsrs	r2, r3, #1
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	441a      	add	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003562:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	2b0f      	cmp	r3, #15
 8003568:	d909      	bls.n	800357e <UART_SetConfig+0x546>
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003570:	d205      	bcs.n	800357e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	b29a      	uxth	r2, r3
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	60da      	str	r2, [r3, #12]
 800357c:	e002      	b.n	8003584 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2200      	movs	r2, #0
 8003588:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	2200      	movs	r2, #0
 800358e:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003590:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003594:	4618      	mov	r0, r3
 8003596:	3728      	adds	r7, #40	@ 0x28
 8003598:	46bd      	mov	sp, r7
 800359a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800359e:	bf00      	nop
 80035a0:	40008000 	.word	0x40008000
 80035a4:	00f42400 	.word	0x00f42400

080035a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01a      	beq.n	80036be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a6:	d10a      	bne.n	80036be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b098      	sub	sp, #96	@ 0x60
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036fc:	f7fd fa14 	bl	8000b28 <HAL_GetTick>
 8003700:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b08      	cmp	r3, #8
 800370e:	d12e      	bne.n	800376e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003718:	2200      	movs	r2, #0
 800371a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f88c 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d021      	beq.n	800376e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800373e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003748:	647b      	str	r3, [r7, #68]	@ 0x44
 800374a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800374e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e6      	bne.n	800372a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e062      	b.n	8003834 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0304 	and.w	r3, r3, #4
 8003778:	2b04      	cmp	r3, #4
 800377a:	d149      	bne.n	8003810 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800377c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003784:	2200      	movs	r2, #0
 8003786:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f000 f856 	bl	800383c <UART_WaitOnFlagUntilTimeout>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d03c      	beq.n	8003810 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	e853 3f00 	ldrex	r3, [r3]
 80037a2:	623b      	str	r3, [r7, #32]
   return(result);
 80037a4:	6a3b      	ldr	r3, [r7, #32]
 80037a6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	461a      	mov	r2, r3
 80037b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80037b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037bc:	e841 2300 	strex	r3, r2, [r1]
 80037c0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d1e6      	bne.n	8003796 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	e853 3f00 	ldrex	r3, [r3]
 80037d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f023 0301 	bic.w	r3, r3, #1
 80037de:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	3308      	adds	r3, #8
 80037e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037e8:	61fa      	str	r2, [r7, #28]
 80037ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ec:	69b9      	ldr	r1, [r7, #24]
 80037ee:	69fa      	ldr	r2, [r7, #28]
 80037f0:	e841 2300 	strex	r3, r2, [r1]
 80037f4:	617b      	str	r3, [r7, #20]
   return(result);
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1e5      	bne.n	80037c8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2200      	movs	r2, #0
 8003808:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e011      	b.n	8003834 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2220      	movs	r2, #32
 8003814:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3758      	adds	r7, #88	@ 0x58
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b084      	sub	sp, #16
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800384c:	e04f      	b.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003854:	d04b      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003856:	f7fd f967 	bl	8000b28 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	69ba      	ldr	r2, [r7, #24]
 8003862:	429a      	cmp	r2, r3
 8003864:	d302      	bcc.n	800386c <UART_WaitOnFlagUntilTimeout+0x30>
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d101      	bne.n	8003870 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e04e      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f003 0304 	and.w	r3, r3, #4
 800387a:	2b00      	cmp	r3, #0
 800387c:	d037      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b80      	cmp	r3, #128	@ 0x80
 8003882:	d034      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2b40      	cmp	r3, #64	@ 0x40
 8003888:	d031      	beq.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	69db      	ldr	r3, [r3, #28]
 8003890:	f003 0308 	and.w	r3, r3, #8
 8003894:	2b08      	cmp	r3, #8
 8003896:	d110      	bne.n	80038ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2208      	movs	r2, #8
 800389e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a0:	68f8      	ldr	r0, [r7, #12]
 80038a2:	f000 f838 	bl	8003916 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2208      	movs	r2, #8
 80038aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e029      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	69db      	ldr	r3, [r3, #28]
 80038c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038c8:	d111      	bne.n	80038ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d4:	68f8      	ldr	r0, [r7, #12]
 80038d6:	f000 f81e 	bl	8003916 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2220      	movs	r2, #32
 80038de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80038ea:	2303      	movs	r3, #3
 80038ec:	e00f      	b.n	800390e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	69da      	ldr	r2, [r3, #28]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4013      	ands	r3, r2
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	79fb      	ldrb	r3, [r7, #7]
 8003908:	429a      	cmp	r2, r3
 800390a:	d0a0      	beq.n	800384e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	4618      	mov	r0, r3
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003916:	b480      	push	{r7}
 8003918:	b095      	sub	sp, #84	@ 0x54
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003924:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003926:	e853 3f00 	ldrex	r3, [r3]
 800392a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800392c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800392e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003932:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	461a      	mov	r2, r3
 800393a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800393c:	643b      	str	r3, [r7, #64]	@ 0x40
 800393e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003940:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003942:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003944:	e841 2300 	strex	r3, r2, [r1]
 8003948:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800394a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1e6      	bne.n	800391e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003958:	6a3b      	ldr	r3, [r7, #32]
 800395a:	e853 3f00 	ldrex	r3, [r3]
 800395e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	f023 0301 	bic.w	r3, r3, #1
 8003966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	3308      	adds	r3, #8
 800396e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003970:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003974:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003976:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003978:	e841 2300 	strex	r3, r2, [r1]
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800397e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003980:	2b00      	cmp	r3, #0
 8003982:	d1e5      	bne.n	8003950 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003988:	2b01      	cmp	r3, #1
 800398a:	d118      	bne.n	80039be <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	e853 3f00 	ldrex	r3, [r3]
 8003998:	60bb      	str	r3, [r7, #8]
   return(result);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f023 0310 	bic.w	r3, r3, #16
 80039a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	461a      	mov	r2, r3
 80039a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039aa:	61bb      	str	r3, [r7, #24]
 80039ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ae:	6979      	ldr	r1, [r7, #20]
 80039b0:	69ba      	ldr	r2, [r7, #24]
 80039b2:	e841 2300 	strex	r3, r2, [r1]
 80039b6:	613b      	str	r3, [r7, #16]
   return(result);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1e6      	bne.n	800398c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80039d2:	bf00      	nop
 80039d4:	3754      	adds	r7, #84	@ 0x54
 80039d6:	46bd      	mov	sp, r7
 80039d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039dc:	4770      	bx	lr

080039de <memset>:
 80039de:	4402      	add	r2, r0
 80039e0:	4603      	mov	r3, r0
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d100      	bne.n	80039e8 <memset+0xa>
 80039e6:	4770      	bx	lr
 80039e8:	f803 1b01 	strb.w	r1, [r3], #1
 80039ec:	e7f9      	b.n	80039e2 <memset+0x4>
	...

080039f0 <__libc_init_array>:
 80039f0:	b570      	push	{r4, r5, r6, lr}
 80039f2:	4d0d      	ldr	r5, [pc, #52]	@ (8003a28 <__libc_init_array+0x38>)
 80039f4:	4c0d      	ldr	r4, [pc, #52]	@ (8003a2c <__libc_init_array+0x3c>)
 80039f6:	1b64      	subs	r4, r4, r5
 80039f8:	10a4      	asrs	r4, r4, #2
 80039fa:	2600      	movs	r6, #0
 80039fc:	42a6      	cmp	r6, r4
 80039fe:	d109      	bne.n	8003a14 <__libc_init_array+0x24>
 8003a00:	4d0b      	ldr	r5, [pc, #44]	@ (8003a30 <__libc_init_array+0x40>)
 8003a02:	4c0c      	ldr	r4, [pc, #48]	@ (8003a34 <__libc_init_array+0x44>)
 8003a04:	f000 f818 	bl	8003a38 <_init>
 8003a08:	1b64      	subs	r4, r4, r5
 8003a0a:	10a4      	asrs	r4, r4, #2
 8003a0c:	2600      	movs	r6, #0
 8003a0e:	42a6      	cmp	r6, r4
 8003a10:	d105      	bne.n	8003a1e <__libc_init_array+0x2e>
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
 8003a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a18:	4798      	blx	r3
 8003a1a:	3601      	adds	r6, #1
 8003a1c:	e7ee      	b.n	80039fc <__libc_init_array+0xc>
 8003a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a22:	4798      	blx	r3
 8003a24:	3601      	adds	r6, #1
 8003a26:	e7f2      	b.n	8003a0e <__libc_init_array+0x1e>
 8003a28:	08003aa0 	.word	0x08003aa0
 8003a2c:	08003aa0 	.word	0x08003aa0
 8003a30:	08003aa0 	.word	0x08003aa0
 8003a34:	08003aa4 	.word	0x08003aa4

08003a38 <_init>:
 8003a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a3a:	bf00      	nop
 8003a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a3e:	bc08      	pop	{r3}
 8003a40:	469e      	mov	lr, r3
 8003a42:	4770      	bx	lr

08003a44 <_fini>:
 8003a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a46:	bf00      	nop
 8003a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a4a:	bc08      	pop	{r3}
 8003a4c:	469e      	mov	lr, r3
 8003a4e:	4770      	bx	lr
