
ultrasonic.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1e0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009b4  0800c370  0800c370  0000d370  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd24  0800cd24  0000e1e8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800cd24  0800cd24  0000dd24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd2c  0800cd2c  0000e1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd2c  0800cd2c  0000dd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800cd30  0800cd30  0000dd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800cd34  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002608  200001e8  0800cf1c  0000e1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200027f0  0800cf1c  0000e7f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000176f9  00000000  00000000  0000e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000316c  00000000  00000000  00025911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  00028a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010d9  00000000  00000000  0002a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a993  00000000  00000000  0002b101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c87e  00000000  00000000  00055a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe497  00000000  00000000  00072312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001707a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006d64  00000000  00000000  001707ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004c  00000000  00000000  00177550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c358 	.word	0x0800c358

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800c358 	.word	0x0800c358

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <SD_SPI_Transmit>:
#define CMD58 (0x40+58)
#define ACMD41 (0x40+41)

extern SPI_HandleTypeDef SD_SPI_HANDLE;

static uint8_t SD_SPI_Transmit(uint8_t data) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &data, &received, 1, HAL_MAX_DELAY);
 8000f7e:	f107 020f 	add.w	r2, r7, #15
 8000f82:	1df9      	adds	r1, r7, #7
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	9300      	str	r3, [sp, #0]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	4803      	ldr	r0, [pc, #12]	@ (8000f9c <SD_SPI_Transmit+0x28>)
 8000f8e:	f003 f9c8 	bl	8004322 <HAL_SPI_TransmitReceive>
    return received;
 8000f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3710      	adds	r7, #16
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000023c 	.word	0x2000023c

08000fa0 <SD_SPI_SendCommand>:

static void SD_SPI_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	6039      	str	r1, [r7, #0]
 8000faa:	71fb      	strb	r3, [r7, #7]
 8000fac:	4613      	mov	r3, r2
 8000fae:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = cmd;
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)(arg >> 24);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	0e1b      	lsrs	r3, r3, #24
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	727b      	strb	r3, [r7, #9]
    buf[2] = (uint8_t)(arg >> 16);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	0c1b      	lsrs	r3, r3, #16
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	72bb      	strb	r3, [r7, #10]
    buf[3] = (uint8_t)(arg >> 8);
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	0a1b      	lsrs	r3, r3, #8
 8000fc8:	b2db      	uxtb	r3, r3
 8000fca:	72fb      	strb	r3, [r7, #11]
    buf[4] = (uint8_t)(arg);
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 8000fd2:	79bb      	ldrb	r3, [r7, #6]
 8000fd4:	737b      	strb	r3, [r7, #13]

    SD_CS_LOW();
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2110      	movs	r1, #16
 8000fda:	480c      	ldr	r0, [pc, #48]	@ (800100c <SD_SPI_SendCommand+0x6c>)
 8000fdc:	f001 faa0 	bl	8002520 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 6; i++) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e00a      	b.n	8000ffc <SD_SPI_SendCommand+0x5c>
        SD_SPI_Transmit(buf[i]);
 8000fe6:	7bfb      	ldrb	r3, [r7, #15]
 8000fe8:	3310      	adds	r3, #16
 8000fea:	443b      	add	r3, r7
 8000fec:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff ffbf 	bl	8000f74 <SD_SPI_Transmit>
    for (uint8_t i = 0; i < 6; i++) {
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	7bfb      	ldrb	r3, [r7, #15]
 8000ffe:	2b05      	cmp	r3, #5
 8001000:	d9f1      	bls.n	8000fe6 <SD_SPI_SendCommand+0x46>
    }
}
 8001002:	bf00      	nop
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	48000800 	.word	0x48000800

08001010 <SD_initialize>:

DSTATUS SD_initialize(BYTE pdrv) {
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 800101a:	2001      	movs	r0, #1
 800101c:	f000 ffa0 	bl	8001f60 <HAL_Delay>
    SD_CS_HIGH();
 8001020:	2201      	movs	r2, #1
 8001022:	2110      	movs	r1, #16
 8001024:	4818      	ldr	r0, [pc, #96]	@ (8001088 <SD_initialize+0x78>)
 8001026:	f001 fa7b 	bl	8002520 <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 10; i++) SD_SPI_Transmit(0xFF);
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e005      	b.n	800103c <SD_initialize+0x2c>
 8001030:	20ff      	movs	r0, #255	@ 0xff
 8001032:	f7ff ff9f 	bl	8000f74 <SD_SPI_Transmit>
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	3301      	adds	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	2b09      	cmp	r3, #9
 8001040:	d9f6      	bls.n	8001030 <SD_initialize+0x20>

    SD_SPI_SendCommand(CMD0, 0, 0x95);
 8001042:	2295      	movs	r2, #149	@ 0x95
 8001044:	2100      	movs	r1, #0
 8001046:	2040      	movs	r0, #64	@ 0x40
 8001048:	f7ff ffaa 	bl	8000fa0 <SD_SPI_SendCommand>
    for (uint8_t i = 0; i < 10; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	73bb      	strb	r3, [r7, #14]
 8001050:	e008      	b.n	8001064 <SD_initialize+0x54>
        if (SD_SPI_Transmit(0xFF) == 0x01) break;
 8001052:	20ff      	movs	r0, #255	@ 0xff
 8001054:	f7ff ff8e 	bl	8000f74 <SD_SPI_Transmit>
 8001058:	4603      	mov	r3, r0
 800105a:	2b01      	cmp	r3, #1
 800105c:	d006      	beq.n	800106c <SD_initialize+0x5c>
    for (uint8_t i = 0; i < 10; i++) {
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	3301      	adds	r3, #1
 8001062:	73bb      	strb	r3, [r7, #14]
 8001064:	7bbb      	ldrb	r3, [r7, #14]
 8001066:	2b09      	cmp	r3, #9
 8001068:	d9f3      	bls.n	8001052 <SD_initialize+0x42>
 800106a:	e000      	b.n	800106e <SD_initialize+0x5e>
        if (SD_SPI_Transmit(0xFF) == 0x01) break;
 800106c:	bf00      	nop
    }
    SD_CS_HIGH();
 800106e:	2201      	movs	r2, #1
 8001070:	2110      	movs	r1, #16
 8001072:	4805      	ldr	r0, [pc, #20]	@ (8001088 <SD_initialize+0x78>)
 8001074:	f001 fa54 	bl	8002520 <HAL_GPIO_WritePin>
    SD_SPI_Transmit(0xFF);
 8001078:	20ff      	movs	r0, #255	@ 0xff
 800107a:	f7ff ff7b 	bl	8000f74 <SD_SPI_Transmit>
    return 0;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3710      	adds	r7, #16
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	48000800 	.word	0x48000800

0800108c <SD_read>:

DSTATUS SD_status(BYTE pdrv) {
    return 0;
}

DRESULT SD_read(BYTE *buff, BYTE sector, UINT count) {
 800108c:	b480      	push	{r7}
 800108e:	b085      	sub	sp, #20
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	460b      	mov	r3, r1
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	72fb      	strb	r3, [r7, #11]
    return RES_OK; // Stubbed
 800109a:	2300      	movs	r3, #0
}
 800109c:	4618      	mov	r0, r3
 800109e:	3714      	adds	r7, #20
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SD_write>:

DRESULT SD_write(const BYTE *buff, BYTE sector, UINT count) {
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	460b      	mov	r3, r1
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	72fb      	strb	r3, [r7, #11]
    return RES_OK; // Stubbed
 80010b6:	2300      	movs	r3, #0
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3714      	adds	r7, #20
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <send_uart>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void send_uart(char *string)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff f8cf 	bl	8000270 <strlen>
 80010d2:	4603      	mov	r3, r0
 80010d4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2,(uint8_t*)string,len,2000);
 80010d6:	7bfb      	ldrb	r3, [r7, #15]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	4803      	ldr	r0, [pc, #12]	@ (80010f0 <send_uart+0x2c>)
 80010e2:	f004 fbf5 	bl	80058d0 <HAL_UART_Transmit>
}
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200002ec 	.word	0x200002ec

080010f4 <HCSR04_Trigger>:
{
	for(int i=0;i<1024;i++)
		buffer[i]='\0';
}
void HCSR04_Trigger(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // TRIG high
 80010fa:	2201      	movs	r2, #1
 80010fc:	2102      	movs	r1, #2
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001102:	f001 fa0d 	bl	8002520 <HAL_GPIO_WritePin>
 // HAL_Delay(0);  // Wait few cycles
  for (volatile int i = 0; i < 160; i++);  // ~10 µs at 16 MHz
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	e002      	b.n	8001112 <HCSR04_Trigger+0x1e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	3301      	adds	r3, #1
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2b9f      	cmp	r3, #159	@ 0x9f
 8001116:	ddf9      	ble.n	800110c <HCSR04_Trigger+0x18>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // TRIG low
 8001118:	2200      	movs	r2, #0
 800111a:	2102      	movs	r1, #2
 800111c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001120:	f001 f9fe 	bl	8002520 <HAL_GPIO_WritePin>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <Start_HCSR04>:

void Start_HCSR04(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  is_first_capture = 0;
 8001130:	4b05      	ldr	r3, [pc, #20]	@ (8001148 <Start_HCSR04+0x1c>)
 8001132:	2200      	movs	r2, #0
 8001134:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8001136:	2100      	movs	r1, #0
 8001138:	4804      	ldr	r0, [pc, #16]	@ (800114c <Start_HCSR04+0x20>)
 800113a:	f003 fccd 	bl	8004ad8 <HAL_TIM_IC_Start_IT>
  HCSR04_Trigger();
 800113e:	f7ff ffd9 	bl	80010f4 <HCSR04_Trigger>
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000210 	.word	0x20000210
 800114c:	200002a0 	.word	0x200002a0

08001150 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7f1b      	ldrb	r3, [r3, #28]
 800115c:	2b01      	cmp	r3, #1
 800115e:	d175      	bne.n	800124c <HAL_TIM_IC_CaptureCallback+0xfc>
  {
    if (is_first_capture == 0)
 8001160:	4b3f      	ldr	r3, [pc, #252]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d11a      	bne.n	800119e <HAL_TIM_IC_CaptureCallback+0x4e>
    {
      ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Rising edge
 8001168:	2100      	movs	r1, #0
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f004 f860 	bl	8005230 <HAL_TIM_ReadCapturedValue>
 8001170:	4603      	mov	r3, r0
 8001172:	4a3c      	ldr	r2, [pc, #240]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x114>)
 8001174:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6a1a      	ldr	r2, [r3, #32]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f022 020a 	bic.w	r2, r2, #10
 8001184:	621a      	str	r2, [r3, #32]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	6a1a      	ldr	r2, [r3, #32]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0202 	orr.w	r2, r2, #2
 8001194:	621a      	str	r2, [r3, #32]
      is_first_capture = 1;
 8001196:	4b32      	ldr	r3, [pc, #200]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001198:	2201      	movs	r2, #1
 800119a:	701a      	strb	r2, [r3, #0]

      distance_cm = (float)diff * 0.0343 / 2.0;

    }
  }
}
 800119c:	e056      	b.n	800124c <HAL_TIM_IC_CaptureCallback+0xfc>
    else if (is_first_capture == 1)
 800119e:	4b30      	ldr	r3, [pc, #192]	@ (8001260 <HAL_TIM_IC_CaptureCallback+0x110>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d152      	bne.n	800124c <HAL_TIM_IC_CaptureCallback+0xfc>
      ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Falling edge
 80011a6:	2100      	movs	r1, #0
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f004 f841 	bl	8005230 <HAL_TIM_ReadCapturedValue>
 80011ae:	4603      	mov	r3, r0
 80011b0:	4a2d      	ldr	r2, [pc, #180]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011b2:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6a1a      	ldr	r2, [r3, #32]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 020a 	bic.w	r2, r2, #10
 80011c2:	621a      	str	r2, [r3, #32]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	6a12      	ldr	r2, [r2, #32]
 80011ce:	621a      	str	r2, [r3, #32]
      HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 80011d0:	2100      	movs	r1, #0
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f003 fdca 	bl	8004d6c <HAL_TIM_IC_Stop_IT>
      if (ic_val2 > ic_val1)
 80011d8:	4b23      	ldr	r3, [pc, #140]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b21      	ldr	r3, [pc, #132]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x114>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d907      	bls.n	80011f4 <HAL_TIM_IC_CaptureCallback+0xa4>
        diff = ic_val2 - ic_val1;
 80011e4:	4b20      	ldr	r3, [pc, #128]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x114>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	4a1f      	ldr	r2, [pc, #124]	@ (800126c <HAL_TIM_IC_CaptureCallback+0x11c>)
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	e009      	b.n	8001208 <HAL_TIM_IC_CaptureCallback+0xb8>
        diff = (0xFFFF - ic_val1 + ic_val2);
 80011f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001268 <HAL_TIM_IC_CaptureCallback+0x118>)
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001264 <HAL_TIM_IC_CaptureCallback+0x114>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	1ad3      	subs	r3, r2, r3
 80011fe:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001202:	33ff      	adds	r3, #255	@ 0xff
 8001204:	4a19      	ldr	r2, [pc, #100]	@ (800126c <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001206:	6013      	str	r3, [r2, #0]
      distance_cm = (float)diff * 0.0343 / 2.0;
 8001208:	4b18      	ldr	r3, [pc, #96]	@ (800126c <HAL_TIM_IC_CaptureCallback+0x11c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	ee07 3a90 	vmov	s15, r3
 8001210:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001214:	ee17 0a90 	vmov	r0, s15
 8001218:	f7ff f996 	bl	8000548 <__aeabi_f2d>
 800121c:	a30e      	add	r3, pc, #56	@ (adr r3, 8001258 <HAL_TIM_IC_CaptureCallback+0x108>)
 800121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001222:	f7ff f9e9 	bl	80005f8 <__aeabi_dmul>
 8001226:	4602      	mov	r2, r0
 8001228:	460b      	mov	r3, r1
 800122a:	4610      	mov	r0, r2
 800122c:	4619      	mov	r1, r3
 800122e:	f04f 0200 	mov.w	r2, #0
 8001232:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001236:	f7ff fb09 	bl	800084c <__aeabi_ddiv>
 800123a:	4602      	mov	r2, r0
 800123c:	460b      	mov	r3, r1
 800123e:	4610      	mov	r0, r2
 8001240:	4619      	mov	r1, r3
 8001242:	f7ff fcb1 	bl	8000ba8 <__aeabi_d2f>
 8001246:	4603      	mov	r3, r0
 8001248:	4a09      	ldr	r2, [pc, #36]	@ (8001270 <HAL_TIM_IC_CaptureCallback+0x120>)
 800124a:	6013      	str	r3, [r2, #0]
}
 800124c:	bf00      	nop
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	f3af 8000 	nop.w
 8001258:	04816f00 	.word	0x04816f00
 800125c:	3fa18fc5 	.word	0x3fa18fc5
 8001260:	20000210 	.word	0x20000210
 8001264:	20000204 	.word	0x20000204
 8001268:	20000208 	.word	0x20000208
 800126c:	2000020c 	.word	0x2000020c
 8001270:	20000214 	.word	0x20000214

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 800127a:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 fdf4 	bl	8001e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001280:	f000 f988 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001284:	f000 faf8 	bl	8001878 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001288:	f000 fac6 	bl	8001818 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800128c:	f000 fa70 	bl	8001770 <MX_TIM2_Init>
  MX_RTC_Init();
 8001290:	f000 f9d4 	bl	800163c <MX_RTC_Init>
  MX_FATFS_Init();
 8001294:	f005 f87a 	bl	800638c <MX_FATFS_Init>
  MX_SPI1_Init();
 8001298:	f000 fa2c 	bl	80016f4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if ((RTC->ISR & RTC_ISR_INITS) == 0)
 800129c:	4ba0      	ldr	r3, [pc, #640]	@ (8001520 <main+0x2ac>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	f003 0310 	and.w	r3, r3, #16
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d127      	bne.n	80012f8 <main+0x84>
    {
      printf("RTC not yet initialized. Setting time and date...\r\n");
 80012a8:	489e      	ldr	r0, [pc, #632]	@ (8001524 <main+0x2b0>)
 80012aa:	f008 fee3 	bl	800a074 <puts>

      sTime.Hours = 18;
 80012ae:	4b9e      	ldr	r3, [pc, #632]	@ (8001528 <main+0x2b4>)
 80012b0:	2212      	movs	r2, #18
 80012b2:	701a      	strb	r2, [r3, #0]
      sTime.Minutes = 35;
 80012b4:	4b9c      	ldr	r3, [pc, #624]	@ (8001528 <main+0x2b4>)
 80012b6:	2223      	movs	r2, #35	@ 0x23
 80012b8:	705a      	strb	r2, [r3, #1]
      sTime.Seconds = 00;
 80012ba:	4b9b      	ldr	r3, [pc, #620]	@ (8001528 <main+0x2b4>)
 80012bc:	2200      	movs	r2, #0
 80012be:	709a      	strb	r2, [r3, #2]
      sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80012c0:	4b99      	ldr	r3, [pc, #612]	@ (8001528 <main+0x2b4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	60da      	str	r2, [r3, #12]
      sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80012c6:	4b98      	ldr	r3, [pc, #608]	@ (8001528 <main+0x2b4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
      HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80012cc:	2200      	movs	r2, #0
 80012ce:	4996      	ldr	r1, [pc, #600]	@ (8001528 <main+0x2b4>)
 80012d0:	4896      	ldr	r0, [pc, #600]	@ (800152c <main+0x2b8>)
 80012d2:	f002 fce5 	bl	8003ca0 <HAL_RTC_SetTime>

      sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 80012d6:	4b96      	ldr	r3, [pc, #600]	@ (8001530 <main+0x2bc>)
 80012d8:	2205      	movs	r2, #5
 80012da:	701a      	strb	r2, [r3, #0]
      sDate.Month = RTC_MONTH_JULY;
 80012dc:	4b94      	ldr	r3, [pc, #592]	@ (8001530 <main+0x2bc>)
 80012de:	2207      	movs	r2, #7
 80012e0:	705a      	strb	r2, [r3, #1]
      sDate.Date = 29;
 80012e2:	4b93      	ldr	r3, [pc, #588]	@ (8001530 <main+0x2bc>)
 80012e4:	221d      	movs	r2, #29
 80012e6:	709a      	strb	r2, [r3, #2]
      sDate.Year = 25;
 80012e8:	4b91      	ldr	r3, [pc, #580]	@ (8001530 <main+0x2bc>)
 80012ea:	2219      	movs	r2, #25
 80012ec:	70da      	strb	r2, [r3, #3]
      HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80012ee:	2200      	movs	r2, #0
 80012f0:	498f      	ldr	r1, [pc, #572]	@ (8001530 <main+0x2bc>)
 80012f2:	488e      	ldr	r0, [pc, #568]	@ (800152c <main+0x2b8>)
 80012f4:	f002 fdcd 	bl	8003e92 <HAL_RTC_SetDate>
    }
  fresult=f_mount(&fs,"",1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	498e      	ldr	r1, [pc, #568]	@ (8001534 <main+0x2c0>)
 80012fc:	488e      	ldr	r0, [pc, #568]	@ (8001538 <main+0x2c4>)
 80012fe:	f007 fa63 	bl	80087c8 <f_mount>
 8001302:	4603      	mov	r3, r0
 8001304:	461a      	mov	r2, r3
 8001306:	4b8d      	ldr	r3, [pc, #564]	@ (800153c <main+0x2c8>)
 8001308:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 800130a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800130e:	f000 fe27 	bl	8001f60 <HAL_Delay>
  if(fresult!=FR_OK)
 8001312:	4b8a      	ldr	r3, [pc, #552]	@ (800153c <main+0x2c8>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <main+0xae>
	  send_uart("error in mounting SD_CARD\r\n");
 800131a:	4889      	ldr	r0, [pc, #548]	@ (8001540 <main+0x2cc>)
 800131c:	f7ff fed2 	bl	80010c4 <send_uart>
 8001320:	e002      	b.n	8001328 <main+0xb4>
  else
	  send_uart("SD_CARD mount success\r\n");
 8001322:	4888      	ldr	r0, [pc, #544]	@ (8001544 <main+0x2d0>)
 8001324:	f7ff fece 	bl	80010c4 <send_uart>
  free_space=(uint32_t)(fre_clust*pfs->csize*0.5);
  sprintf(buffer,"SD CARD Free space: \t%lu\r\n",free_space);
  send_uart(buffer);*/
char text[256];
char text1[256];
  fresult = f_open(&fil, "log.txt", FA_WRITE | FA_CREATE_ALWAYS);
 8001328:	220a      	movs	r2, #10
 800132a:	4987      	ldr	r1, [pc, #540]	@ (8001548 <main+0x2d4>)
 800132c:	4887      	ldr	r0, [pc, #540]	@ (800154c <main+0x2d8>)
 800132e:	f007 fa91 	bl	8008854 <f_open>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	4b81      	ldr	r3, [pc, #516]	@ (800153c <main+0x2c8>)
 8001338:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 800133a:	4b80      	ldr	r3, [pc, #512]	@ (800153c <main+0x2c8>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d103      	bne.n	800134a <main+0xd6>
      // File opened or created successfully
      send_uart("File opened successfully.\r\n");
 8001342:	4883      	ldr	r0, [pc, #524]	@ (8001550 <main+0x2dc>)
 8001344:	f7ff febe 	bl	80010c4 <send_uart>
 8001348:	e00d      	b.n	8001366 <main+0xf2>
  }
  else {
      // Handle error
      sprintf(text,"Failed to open file. Error code: %d\r\n", fresult);
 800134a:	4b7c      	ldr	r3, [pc, #496]	@ (800153c <main+0x2c8>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001354:	497f      	ldr	r1, [pc, #508]	@ (8001554 <main+0x2e0>)
 8001356:	4618      	mov	r0, r3
 8001358:	f008 feca 	bl	800a0f0 <siprintf>
      send_uart(text);
 800135c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff feaf 	bl	80010c4 <send_uart>
  }
  f_lseek(&fil, f_size(&fil)); // Move to the end of file
 8001366:	4b79      	ldr	r3, [pc, #484]	@ (800154c <main+0x2d8>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	4619      	mov	r1, r3
 800136c:	4877      	ldr	r0, [pc, #476]	@ (800154c <main+0x2d8>)
 800136e:	f007 fdcd 	bl	8008f0c <f_lseek>
  send_uart("log.txt created\r\n");
 8001372:	4879      	ldr	r0, [pc, #484]	@ (8001558 <main+0x2e4>)
 8001374:	f7ff fea6 	bl	80010c4 <send_uart>


  fresult = f_write(&fil, "ULTRASONIC-SENSOR!\r\n", 11, &bw);
 8001378:	4b78      	ldr	r3, [pc, #480]	@ (800155c <main+0x2e8>)
 800137a:	220b      	movs	r2, #11
 800137c:	4978      	ldr	r1, [pc, #480]	@ (8001560 <main+0x2ec>)
 800137e:	4873      	ldr	r0, [pc, #460]	@ (800154c <main+0x2d8>)
 8001380:	f007 fc30 	bl	8008be4 <f_write>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	4b6c      	ldr	r3, [pc, #432]	@ (800153c <main+0x2c8>)
 800138a:	701a      	strb	r2, [r3, #0]
  if (fresult == FR_OK) {
 800138c:	4b6b      	ldr	r3, [pc, #428]	@ (800153c <main+0x2c8>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d103      	bne.n	800139c <main+0x128>
      send_uart("Write successful\r\n");
 8001394:	4873      	ldr	r0, [pc, #460]	@ (8001564 <main+0x2f0>)
 8001396:	f7ff fe95 	bl	80010c4 <send_uart>
 800139a:	e00d      	b.n	80013b8 <main+0x144>
  }
  else {
      sprintf(text1,"Write failed with error: %d\r\n", fresult);
 800139c:	4b67      	ldr	r3, [pc, #412]	@ (800153c <main+0x2c8>)
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	461a      	mov	r2, r3
 80013a2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013a6:	4970      	ldr	r1, [pc, #448]	@ (8001568 <main+0x2f4>)
 80013a8:	4618      	mov	r0, r3
 80013aa:	f008 fea1 	bl	800a0f0 <siprintf>
      send_uart(text1);
 80013ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013b2:	4618      	mov	r0, r3
 80013b4:	f7ff fe86 	bl	80010c4 <send_uart>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80013b8:	2200      	movs	r2, #0
 80013ba:	495b      	ldr	r1, [pc, #364]	@ (8001528 <main+0x2b4>)
 80013bc:	485b      	ldr	r0, [pc, #364]	@ (800152c <main+0x2b8>)
 80013be:	f002 fd0c 	bl	8003dda <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);  // Must be called right after time
 80013c2:	2200      	movs	r2, #0
 80013c4:	495a      	ldr	r1, [pc, #360]	@ (8001530 <main+0x2bc>)
 80013c6:	4859      	ldr	r0, [pc, #356]	@ (800152c <main+0x2b8>)
 80013c8:	f002 fdea 	bl	8003fa0 <HAL_RTC_GetDate>

	  snprintf(timestamp, sizeof(timestamp), "%02d:%02d:%02d",
	           sTime.Hours, sTime.Minutes, sTime.Seconds);
 80013cc:	4b56      	ldr	r3, [pc, #344]	@ (8001528 <main+0x2b4>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
	  snprintf(timestamp, sizeof(timestamp), "%02d:%02d:%02d",
 80013d0:	4619      	mov	r1, r3
	           sTime.Hours, sTime.Minutes, sTime.Seconds);
 80013d2:	4b55      	ldr	r3, [pc, #340]	@ (8001528 <main+0x2b4>)
 80013d4:	785b      	ldrb	r3, [r3, #1]
	  snprintf(timestamp, sizeof(timestamp), "%02d:%02d:%02d",
 80013d6:	461a      	mov	r2, r3
	           sTime.Hours, sTime.Minutes, sTime.Seconds);
 80013d8:	4b53      	ldr	r3, [pc, #332]	@ (8001528 <main+0x2b4>)
 80013da:	789b      	ldrb	r3, [r3, #2]
	  snprintf(timestamp, sizeof(timestamp), "%02d:%02d:%02d",
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	460b      	mov	r3, r1
 80013e2:	4a62      	ldr	r2, [pc, #392]	@ (800156c <main+0x2f8>)
 80013e4:	2120      	movs	r1, #32
 80013e6:	4862      	ldr	r0, [pc, #392]	@ (8001570 <main+0x2fc>)
 80013e8:	f008 fe4c 	bl	800a084 <sniprintf>
	      // Wait for echo
	  Start_HCSR04();
 80013ec:	f7ff fe9e 	bl	800112c <Start_HCSR04>
	    char buffer[50];
	     snprintf(buffer, sizeof(buffer), "Distance: %.2f cm\r\n", distance_cm);
 80013f0:	4b60      	ldr	r3, [pc, #384]	@ (8001574 <main+0x300>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff f8a7 	bl	8000548 <__aeabi_f2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	1d38      	adds	r0, r7, #4
 8001400:	e9cd 2300 	strd	r2, r3, [sp]
 8001404:	4a5c      	ldr	r2, [pc, #368]	@ (8001578 <main+0x304>)
 8001406:	2132      	movs	r1, #50	@ 0x32
 8001408:	f008 fe3c 	bl	800a084 <sniprintf>
	   HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 2000);
 800140c:	1d3b      	adds	r3, r7, #4
 800140e:	4618      	mov	r0, r3
 8001410:	f7fe ff2e 	bl	8000270 <strlen>
 8001414:	4603      	mov	r3, r0
 8001416:	b29a      	uxth	r2, r3
 8001418:	1d39      	adds	r1, r7, #4
 800141a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 800141e:	4857      	ldr	r0, [pc, #348]	@ (800157c <main+0x308>)
 8001420:	f004 fa56 	bl	80058d0 <HAL_UART_Transmit>
	     HAL_Delay(2000);
 8001424:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001428:	f000 fd9a 	bl	8001f60 <HAL_Delay>

	     if (distance_cm < THRESHOLD_CM)
 800142c:	4b51      	ldr	r3, [pc, #324]	@ (8001574 <main+0x300>)
 800142e:	edd3 7a00 	vldr	s15, [r3]
 8001432:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001436:	eef4 7ac7 	vcmpe.f32	s15, s14
 800143a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800143e:	d503      	bpl.n	8001448 <main+0x1d4>
	    	 object_present = 1;
 8001440:	4b4f      	ldr	r3, [pc, #316]	@ (8001580 <main+0x30c>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]
 8001446:	e002      	b.n	800144e <main+0x1da>
	     else
	    	  object_present = 0;
 8001448:	4b4d      	ldr	r3, [pc, #308]	@ (8001580 <main+0x30c>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]

	    	     if (object_present && !object_previous)
 800144e:	4b4c      	ldr	r3, [pc, #304]	@ (8001580 <main+0x30c>)
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d02c      	beq.n	80014b0 <main+0x23c>
 8001456:	4b4b      	ldr	r3, [pc, #300]	@ (8001584 <main+0x310>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d128      	bne.n	80014b0 <main+0x23c>
	    	     {
	    	        // HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);  // Optional LED
	    	         snprintf(msg, sizeof(msg), "IN TIME [%s]: %.2f cm\r\n", timestamp, distance_cm);
 800145e:	4b45      	ldr	r3, [pc, #276]	@ (8001574 <main+0x300>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff f870 	bl	8000548 <__aeabi_f2d>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	e9cd 2300 	strd	r2, r3, [sp]
 8001470:	4b3f      	ldr	r3, [pc, #252]	@ (8001570 <main+0x2fc>)
 8001472:	4a45      	ldr	r2, [pc, #276]	@ (8001588 <main+0x314>)
 8001474:	2140      	movs	r1, #64	@ 0x40
 8001476:	4845      	ldr	r0, [pc, #276]	@ (800158c <main+0x318>)
 8001478:	f008 fe04 	bl	800a084 <sniprintf>
	    	         UINT bw;
	    	         fresult=f_write(&fil, msg, strlen(msg), &bw);
 800147c:	4843      	ldr	r0, [pc, #268]	@ (800158c <main+0x318>)
 800147e:	f7fe fef7 	bl	8000270 <strlen>
 8001482:	4602      	mov	r2, r0
 8001484:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001488:	4940      	ldr	r1, [pc, #256]	@ (800158c <main+0x318>)
 800148a:	4830      	ldr	r0, [pc, #192]	@ (800154c <main+0x2d8>)
 800148c:	f007 fbaa 	bl	8008be4 <f_write>
 8001490:	4603      	mov	r3, r0
 8001492:	461a      	mov	r2, r3
 8001494:	4b29      	ldr	r3, [pc, #164]	@ (800153c <main+0x2c8>)
 8001496:	701a      	strb	r2, [r3, #0]
	    	         HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001498:	483c      	ldr	r0, [pc, #240]	@ (800158c <main+0x318>)
 800149a:	f7fe fee9 	bl	8000270 <strlen>
 800149e:	4603      	mov	r3, r0
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295
 80014a6:	4939      	ldr	r1, [pc, #228]	@ (800158c <main+0x318>)
 80014a8:	4834      	ldr	r0, [pc, #208]	@ (800157c <main+0x308>)
 80014aa:	f004 fa11 	bl	80058d0 <HAL_UART_Transmit>
	    	     {
 80014ae:	e02f      	b.n	8001510 <main+0x29c>

	    	     }
	    	     else if (!object_present && object_previous)
 80014b0:	4b33      	ldr	r3, [pc, #204]	@ (8001580 <main+0x30c>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d12b      	bne.n	8001510 <main+0x29c>
 80014b8:	4b32      	ldr	r3, [pc, #200]	@ (8001584 <main+0x310>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d027      	beq.n	8001510 <main+0x29c>
	    	     {
	    	        // HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);  // Optional LED
	    	         snprintf(msg, sizeof(msg), "OUT TIME [%s]: %.2f cm\r\n", timestamp, distance_cm);
 80014c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001574 <main+0x300>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff f83f 	bl	8000548 <__aeabi_f2d>
 80014ca:	4602      	mov	r2, r0
 80014cc:	460b      	mov	r3, r1
 80014ce:	e9cd 2300 	strd	r2, r3, [sp]
 80014d2:	4b27      	ldr	r3, [pc, #156]	@ (8001570 <main+0x2fc>)
 80014d4:	4a2e      	ldr	r2, [pc, #184]	@ (8001590 <main+0x31c>)
 80014d6:	2140      	movs	r1, #64	@ 0x40
 80014d8:	482c      	ldr	r0, [pc, #176]	@ (800158c <main+0x318>)
 80014da:	f008 fdd3 	bl	800a084 <sniprintf>
	    	         UINT bw;
	    	         fresult=f_write(&fil, msg, strlen(msg), &bw);
 80014de:	482b      	ldr	r0, [pc, #172]	@ (800158c <main+0x318>)
 80014e0:	f7fe fec6 	bl	8000270 <strlen>
 80014e4:	4602      	mov	r2, r0
 80014e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80014ea:	4928      	ldr	r1, [pc, #160]	@ (800158c <main+0x318>)
 80014ec:	4817      	ldr	r0, [pc, #92]	@ (800154c <main+0x2d8>)
 80014ee:	f007 fb79 	bl	8008be4 <f_write>
 80014f2:	4603      	mov	r3, r0
 80014f4:	461a      	mov	r2, r3
 80014f6:	4b11      	ldr	r3, [pc, #68]	@ (800153c <main+0x2c8>)
 80014f8:	701a      	strb	r2, [r3, #0]
	    	         HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014fa:	4824      	ldr	r0, [pc, #144]	@ (800158c <main+0x318>)
 80014fc:	f7fe feb8 	bl	8000270 <strlen>
 8001500:	4603      	mov	r3, r0
 8001502:	b29a      	uxth	r2, r3
 8001504:	f04f 33ff 	mov.w	r3, #4294967295
 8001508:	4920      	ldr	r1, [pc, #128]	@ (800158c <main+0x318>)
 800150a:	481c      	ldr	r0, [pc, #112]	@ (800157c <main+0x308>)
 800150c:	f004 f9e0 	bl	80058d0 <HAL_UART_Transmit>
	    	     }

	    	     object_previous = object_present;
 8001510:	4b1b      	ldr	r3, [pc, #108]	@ (8001580 <main+0x30c>)
 8001512:	781a      	ldrb	r2, [r3, #0]
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <main+0x310>)
 8001516:	701a      	strb	r2, [r3, #0]


	    HAL_Delay(100);  // Sampling interval
 8001518:	2064      	movs	r0, #100	@ 0x64
 800151a:	f000 fd21 	bl	8001f60 <HAL_Delay>
  {
 800151e:	e74b      	b.n	80013b8 <main+0x144>
 8001520:	40002800 	.word	0x40002800
 8001524:	0800c370 	.word	0x0800c370
 8001528:	200003b8 	.word	0x200003b8
 800152c:	20000218 	.word	0x20000218
 8001530:	200003cc 	.word	0x200003cc
 8001534:	0800c3a4 	.word	0x0800c3a4
 8001538:	200003f0 	.word	0x200003f0
 800153c:	20002458 	.word	0x20002458
 8001540:	0800c3a8 	.word	0x0800c3a8
 8001544:	0800c3c4 	.word	0x0800c3c4
 8001548:	0800c3dc 	.word	0x0800c3dc
 800154c:	20001428 	.word	0x20001428
 8001550:	0800c3e4 	.word	0x0800c3e4
 8001554:	0800c400 	.word	0x0800c400
 8001558:	0800c428 	.word	0x0800c428
 800155c:	2000245c 	.word	0x2000245c
 8001560:	0800c43c 	.word	0x0800c43c
 8001564:	0800c454 	.word	0x0800c454
 8001568:	0800c468 	.word	0x0800c468
 800156c:	0800c488 	.word	0x0800c488
 8001570:	200003d0 	.word	0x200003d0
 8001574:	20000214 	.word	0x20000214
 8001578:	0800c498 	.word	0x0800c498
 800157c:	200002ec 	.word	0x200002ec
 8001580:	20000374 	.word	0x20000374
 8001584:	20000375 	.word	0x20000375
 8001588:	0800c4ac 	.word	0x0800c4ac
 800158c:	20000378 	.word	0x20000378
 8001590:	0800c4c4 	.word	0x0800c4c4

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b096      	sub	sp, #88	@ 0x58
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	2244      	movs	r2, #68	@ 0x44
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f008 fe9e 	bl	800a2e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80015ba:	f000 ffd7 	bl	800256c <HAL_PWREx_ControlVoltageScaling>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015c4:	f000 f9d2 	bl	800196c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80015c8:	230a      	movs	r3, #10
 80015ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d2:	2310      	movs	r3, #16
 80015d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015d6:	2301      	movs	r3, #1
 80015d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015de:	2302      	movs	r3, #2
 80015e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015e6:	230a      	movs	r3, #10
 80015e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ea:	2307      	movs	r3, #7
 80015ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4618      	mov	r0, r3
 80015fc:	f001 f80c 	bl	8002618 <HAL_RCC_OscConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001606:	f000 f9b1 	bl	800196c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160a:	230f      	movs	r3, #15
 800160c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160e:	2303      	movs	r3, #3
 8001610:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	2104      	movs	r1, #4
 8001622:	4618      	mov	r0, r3
 8001624:	f001 fbd4 	bl	8002dd0 <HAL_RCC_ClockConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800162e:	f000 f99d 	bl	800196c <Error_Handler>
  }
}
 8001632:	bf00      	nop
 8001634:	3758      	adds	r7, #88	@ 0x58
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001642:	1d3b      	adds	r3, r7, #4
 8001644:	2200      	movs	r2, #0
 8001646:	601a      	str	r2, [r3, #0]
 8001648:	605a      	str	r2, [r3, #4]
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	60da      	str	r2, [r3, #12]
 800164e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001650:	2300      	movs	r3, #0
 8001652:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001654:	4b25      	ldr	r3, [pc, #148]	@ (80016ec <MX_RTC_Init+0xb0>)
 8001656:	4a26      	ldr	r2, [pc, #152]	@ (80016f0 <MX_RTC_Init+0xb4>)
 8001658:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800165a:	4b24      	ldr	r3, [pc, #144]	@ (80016ec <MX_RTC_Init+0xb0>)
 800165c:	2200      	movs	r2, #0
 800165e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001660:	4b22      	ldr	r3, [pc, #136]	@ (80016ec <MX_RTC_Init+0xb0>)
 8001662:	227f      	movs	r2, #127	@ 0x7f
 8001664:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001666:	4b21      	ldr	r3, [pc, #132]	@ (80016ec <MX_RTC_Init+0xb0>)
 8001668:	22ff      	movs	r2, #255	@ 0xff
 800166a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800166c:	4b1f      	ldr	r3, [pc, #124]	@ (80016ec <MX_RTC_Init+0xb0>)
 800166e:	2200      	movs	r2, #0
 8001670:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001672:	4b1e      	ldr	r3, [pc, #120]	@ (80016ec <MX_RTC_Init+0xb0>)
 8001674:	2200      	movs	r2, #0
 8001676:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001678:	4b1c      	ldr	r3, [pc, #112]	@ (80016ec <MX_RTC_Init+0xb0>)
 800167a:	2200      	movs	r2, #0
 800167c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800167e:	4b1b      	ldr	r3, [pc, #108]	@ (80016ec <MX_RTC_Init+0xb0>)
 8001680:	2200      	movs	r2, #0
 8001682:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001684:	4819      	ldr	r0, [pc, #100]	@ (80016ec <MX_RTC_Init+0xb0>)
 8001686:	f002 fa83 	bl	8003b90 <HAL_RTC_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001690:	f000 f96c 	bl	800196c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001694:	2300      	movs	r3, #0
 8001696:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001698:	2300      	movs	r3, #0
 800169a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800169c:	2300      	movs	r3, #0
 800169e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80016a8:	1d3b      	adds	r3, r7, #4
 80016aa:	2201      	movs	r2, #1
 80016ac:	4619      	mov	r1, r3
 80016ae:	480f      	ldr	r0, [pc, #60]	@ (80016ec <MX_RTC_Init+0xb0>)
 80016b0:	f002 faf6 	bl	8003ca0 <HAL_RTC_SetTime>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80016ba:	f000 f957 	bl	800196c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80016be:	2301      	movs	r3, #1
 80016c0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80016c2:	2301      	movs	r3, #1
 80016c4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80016c6:	2301      	movs	r3, #1
 80016c8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016ce:	463b      	mov	r3, r7
 80016d0:	2201      	movs	r2, #1
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_RTC_Init+0xb0>)
 80016d6:	f002 fbdc 	bl	8003e92 <HAL_RTC_SetDate>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80016e0:	f000 f944 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3718      	adds	r7, #24
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000218 	.word	0x20000218
 80016f0:	40002800 	.word	0x40002800

080016f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016f8:	4b1b      	ldr	r3, [pc, #108]	@ (8001768 <MX_SPI1_Init+0x74>)
 80016fa:	4a1c      	ldr	r2, [pc, #112]	@ (800176c <MX_SPI1_Init+0x78>)
 80016fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016fe:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_SPI1_Init+0x74>)
 8001700:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001704:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001706:	4b18      	ldr	r3, [pc, #96]	@ (8001768 <MX_SPI1_Init+0x74>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800170c:	4b16      	ldr	r3, [pc, #88]	@ (8001768 <MX_SPI1_Init+0x74>)
 800170e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001712:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001714:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_SPI1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800171a:	4b13      	ldr	r3, [pc, #76]	@ (8001768 <MX_SPI1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001720:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_SPI1_Init+0x74>)
 8001722:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001726:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <MX_SPI1_Init+0x74>)
 800172a:	2210      	movs	r2, #16
 800172c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800172e:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <MX_SPI1_Init+0x74>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <MX_SPI1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <MX_SPI1_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_SPI1_Init+0x74>)
 8001742:	2207      	movs	r2, #7
 8001744:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001746:	4b08      	ldr	r3, [pc, #32]	@ (8001768 <MX_SPI1_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <MX_SPI1_Init+0x74>)
 800174e:	2208      	movs	r2, #8
 8001750:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001752:	4805      	ldr	r0, [pc, #20]	@ (8001768 <MX_SPI1_Init+0x74>)
 8001754:	f002 fd42 	bl	80041dc <HAL_SPI_Init>
 8001758:	4603      	mov	r3, r0
 800175a:	2b00      	cmp	r3, #0
 800175c:	d001      	beq.n	8001762 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800175e:	f000 f905 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	2000023c 	.word	0x2000023c
 800176c:	40013000 	.word	0x40013000

08001770 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001776:	f107 0314 	add.w	r3, r7, #20
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]
 800177e:	605a      	str	r2, [r3, #4]
 8001780:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001782:	1d3b      	adds	r3, r7, #4
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <MX_TIM2_Init+0xa4>)
 8001790:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001794:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001796:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <MX_TIM2_Init+0xa4>)
 8001798:	224f      	movs	r2, #79	@ 0x4f
 800179a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179c:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <MX_TIM2_Init+0xa4>)
 800179e:	2200      	movs	r2, #0
 80017a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <MX_TIM2_Init+0xa4>)
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <MX_TIM2_Init+0xa4>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017b0:	4b18      	ldr	r3, [pc, #96]	@ (8001814 <MX_TIM2_Init+0xa4>)
 80017b2:	2280      	movs	r2, #128	@ 0x80
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80017b6:	4817      	ldr	r0, [pc, #92]	@ (8001814 <MX_TIM2_Init+0xa4>)
 80017b8:	f003 f936 	bl	8004a28 <HAL_TIM_IC_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017c2:	f000 f8d3 	bl	800196c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	480f      	ldr	r0, [pc, #60]	@ (8001814 <MX_TIM2_Init+0xa4>)
 80017d6:	f003 ff87 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017e0:	f000 f8c4 	bl	800196c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017e4:	2300      	movs	r3, #0
 80017e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017e8:	2301      	movs	r3, #1
 80017ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017ec:	2300      	movs	r3, #0
 80017ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017f4:	1d3b      	adds	r3, r7, #4
 80017f6:	2200      	movs	r2, #0
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	@ (8001814 <MX_TIM2_Init+0xa4>)
 80017fc:	f003 fc7b 	bl	80050f6 <HAL_TIM_IC_ConfigChannel>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001806:	f000 f8b1 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	200002a0 	.word	0x200002a0

08001818 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800181c:	4b14      	ldr	r3, [pc, #80]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800181e:	4a15      	ldr	r2, [pc, #84]	@ (8001874 <MX_USART2_UART_Init+0x5c>)
 8001820:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001822:	4b13      	ldr	r3, [pc, #76]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001824:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001828:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800182a:	4b11      	ldr	r3, [pc, #68]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001830:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001836:	4b0e      	ldr	r3, [pc, #56]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001838:	2200      	movs	r2, #0
 800183a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800183c:	4b0c      	ldr	r3, [pc, #48]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800183e:	220c      	movs	r2, #12
 8001840:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001842:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800184e:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001854:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 8001856:	2200      	movs	r2, #0
 8001858:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <MX_USART2_UART_Init+0x58>)
 800185c:	f003 ffea 	bl	8005834 <HAL_UART_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001866:	f000 f881 	bl	800196c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200002ec 	.word	0x200002ec
 8001874:	40004400 	.word	0x40004400

08001878 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	@ 0x28
 800187c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	2200      	movs	r2, #0
 8001884:	601a      	str	r2, [r3, #0]
 8001886:	605a      	str	r2, [r3, #4]
 8001888:	609a      	str	r2, [r3, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800188e:	4b35      	ldr	r3, [pc, #212]	@ (8001964 <MX_GPIO_Init+0xec>)
 8001890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001892:	4a34      	ldr	r2, [pc, #208]	@ (8001964 <MX_GPIO_Init+0xec>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800189a:	4b32      	ldr	r3, [pc, #200]	@ (8001964 <MX_GPIO_Init+0xec>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	613b      	str	r3, [r7, #16]
 80018a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018a6:	4b2f      	ldr	r3, [pc, #188]	@ (8001964 <MX_GPIO_Init+0xec>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018aa:	4a2e      	ldr	r2, [pc, #184]	@ (8001964 <MX_GPIO_Init+0xec>)
 80018ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018b2:	4b2c      	ldr	r3, [pc, #176]	@ (8001964 <MX_GPIO_Init+0xec>)
 80018b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018be:	4b29      	ldr	r3, [pc, #164]	@ (8001964 <MX_GPIO_Init+0xec>)
 80018c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c2:	4a28      	ldr	r2, [pc, #160]	@ (8001964 <MX_GPIO_Init+0xec>)
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ca:	4b26      	ldr	r3, [pc, #152]	@ (8001964 <MX_GPIO_Init+0xec>)
 80018cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ce:	f003 0301 	and.w	r3, r3, #1
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018d6:	4b23      	ldr	r3, [pc, #140]	@ (8001964 <MX_GPIO_Init+0xec>)
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	4a22      	ldr	r2, [pc, #136]	@ (8001964 <MX_GPIO_Init+0xec>)
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <MX_GPIO_Init+0xec>)
 80018e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80018ee:	2200      	movs	r2, #0
 80018f0:	2102      	movs	r1, #2
 80018f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018f6:	f000 fe13 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2110      	movs	r1, #16
 80018fe:	481a      	ldr	r0, [pc, #104]	@ (8001968 <MX_GPIO_Init+0xf0>)
 8001900:	f000 fe0e 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001904:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800190a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800190e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001914:	f107 0314 	add.w	r3, r7, #20
 8001918:	4619      	mov	r1, r3
 800191a:	4813      	ldr	r0, [pc, #76]	@ (8001968 <MX_GPIO_Init+0xf0>)
 800191c:	f000 fc56 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001920:	2302      	movs	r3, #2
 8001922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001924:	2301      	movs	r3, #1
 8001926:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001928:	2300      	movs	r3, #0
 800192a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193a:	f000 fc47 	bl	80021cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800193e:	2310      	movs	r3, #16
 8001940:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001942:	2301      	movs	r3, #1
 8001944:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4804      	ldr	r0, [pc, #16]	@ (8001968 <MX_GPIO_Init+0xf0>)
 8001956:	f000 fc39 	bl	80021cc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000
 8001968:	48000800 	.word	0x48000800

0800196c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001970:	b672      	cpsid	i
}
 8001972:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <Error_Handler+0x8>

08001978 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800197e:	4b0f      	ldr	r3, [pc, #60]	@ (80019bc <HAL_MspInit+0x44>)
 8001980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001982:	4a0e      	ldr	r2, [pc, #56]	@ (80019bc <HAL_MspInit+0x44>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6613      	str	r3, [r2, #96]	@ 0x60
 800198a:	4b0c      	ldr	r3, [pc, #48]	@ (80019bc <HAL_MspInit+0x44>)
 800198c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	607b      	str	r3, [r7, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001996:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <HAL_MspInit+0x44>)
 8001998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199a:	4a08      	ldr	r2, [pc, #32]	@ (80019bc <HAL_MspInit+0x44>)
 800199c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80019a2:	4b06      	ldr	r3, [pc, #24]	@ (80019bc <HAL_MspInit+0x44>)
 80019a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019aa:	603b      	str	r3, [r7, #0]
 80019ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b0a4      	sub	sp, #144	@ 0x90
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019c8:	f107 0308 	add.w	r3, r7, #8
 80019cc:	2288      	movs	r2, #136	@ 0x88
 80019ce:	2100      	movs	r1, #0
 80019d0:	4618      	mov	r0, r3
 80019d2:	f008 fc87 	bl	800a2e4 <memset>
  if(hrtc->Instance==RTC)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4a10      	ldr	r2, [pc, #64]	@ (8001a1c <HAL_RTC_MspInit+0x5c>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d118      	bne.n	8001a12 <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019e0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019e4:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019e6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f001 fc10 	bl	8003218 <HAL_RCCEx_PeriphCLKConfig>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80019fe:	f7ff ffb5 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001a02:	4b07      	ldr	r3, [pc, #28]	@ (8001a20 <HAL_RTC_MspInit+0x60>)
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001a08:	4a05      	ldr	r2, [pc, #20]	@ (8001a20 <HAL_RTC_MspInit+0x60>)
 8001a0a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 8001a12:	bf00      	nop
 8001a14:	3790      	adds	r7, #144	@ 0x90
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40002800 	.word	0x40002800
 8001a20:	40021000 	.word	0x40021000

08001a24 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08a      	sub	sp, #40	@ 0x28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a2c:	f107 0314 	add.w	r3, r7, #20
 8001a30:	2200      	movs	r2, #0
 8001a32:	601a      	str	r2, [r3, #0]
 8001a34:	605a      	str	r2, [r3, #4]
 8001a36:	609a      	str	r2, [r3, #8]
 8001a38:	60da      	str	r2, [r3, #12]
 8001a3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a17      	ldr	r2, [pc, #92]	@ (8001aa0 <HAL_SPI_MspInit+0x7c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d128      	bne.n	8001a98 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <HAL_SPI_MspInit+0x80>)
 8001a48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a4a:	4a16      	ldr	r2, [pc, #88]	@ (8001aa4 <HAL_SPI_MspInit+0x80>)
 8001a4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a50:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <HAL_SPI_MspInit+0x80>)
 8001a54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <HAL_SPI_MspInit+0x80>)
 8001a60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a62:	4a10      	ldr	r2, [pc, #64]	@ (8001aa4 <HAL_SPI_MspInit+0x80>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <HAL_SPI_MspInit+0x80>)
 8001a6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a76:	23e0      	movs	r3, #224	@ 0xe0
 8001a78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a82:	2303      	movs	r3, #3
 8001a84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a86:	2305      	movs	r3, #5
 8001a88:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a8a:	f107 0314 	add.w	r3, r7, #20
 8001a8e:	4619      	mov	r1, r3
 8001a90:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a94:	f000 fb9a 	bl	80021cc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	@ 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	40013000 	.word	0x40013000
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	@ 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001ac8:	d130      	bne.n	8001b2c <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aca:	4b1a      	ldr	r3, [pc, #104]	@ (8001b34 <HAL_TIM_IC_MspInit+0x8c>)
 8001acc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ace:	4a19      	ldr	r2, [pc, #100]	@ (8001b34 <HAL_TIM_IC_MspInit+0x8c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ad6:	4b17      	ldr	r3, [pc, #92]	@ (8001b34 <HAL_TIM_IC_MspInit+0x8c>)
 8001ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	613b      	str	r3, [r7, #16]
 8001ae0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	4b14      	ldr	r3, [pc, #80]	@ (8001b34 <HAL_TIM_IC_MspInit+0x8c>)
 8001ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ae6:	4a13      	ldr	r2, [pc, #76]	@ (8001b34 <HAL_TIM_IC_MspInit+0x8c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001aee:	4b11      	ldr	r3, [pc, #68]	@ (8001b34 <HAL_TIM_IC_MspInit+0x8c>)
 8001af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001afa:	2301      	movs	r3, #1
 8001afc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afe:	2302      	movs	r3, #2
 8001b00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b0e:	f107 0314 	add.w	r3, r7, #20
 8001b12:	4619      	mov	r1, r3
 8001b14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001b18:	f000 fb58 	bl	80021cc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	2100      	movs	r1, #0
 8001b20:	201c      	movs	r0, #28
 8001b22:	f000 fb1c 	bl	800215e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b26:	201c      	movs	r0, #28
 8001b28:	f000 fb35 	bl	8002196 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	@ 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40021000 	.word	0x40021000

08001b38 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b0ac      	sub	sp, #176	@ 0xb0
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b50:	f107 0314 	add.w	r3, r7, #20
 8001b54:	2288      	movs	r2, #136	@ 0x88
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f008 fbc3 	bl	800a2e4 <memset>
  if(huart->Instance==USART2)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a21      	ldr	r2, [pc, #132]	@ (8001be8 <HAL_UART_MspInit+0xb0>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d13b      	bne.n	8001be0 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b68:	2302      	movs	r3, #2
 8001b6a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4618      	mov	r0, r3
 8001b76:	f001 fb4f 	bl	8003218 <HAL_RCCEx_PeriphCLKConfig>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b80:	f7ff fef4 	bl	800196c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b84:	4b19      	ldr	r3, [pc, #100]	@ (8001bec <HAL_UART_MspInit+0xb4>)
 8001b86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b88:	4a18      	ldr	r2, [pc, #96]	@ (8001bec <HAL_UART_MspInit+0xb4>)
 8001b8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b90:	4b16      	ldr	r3, [pc, #88]	@ (8001bec <HAL_UART_MspInit+0xb4>)
 8001b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9c:	4b13      	ldr	r3, [pc, #76]	@ (8001bec <HAL_UART_MspInit+0xb4>)
 8001b9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ba0:	4a12      	ldr	r2, [pc, #72]	@ (8001bec <HAL_UART_MspInit+0xb4>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ba8:	4b10      	ldr	r3, [pc, #64]	@ (8001bec <HAL_UART_MspInit+0xb4>)
 8001baa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bb4:	230c      	movs	r3, #12
 8001bb6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	2302      	movs	r3, #2
 8001bbc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bcc:	2307      	movs	r3, #7
 8001bce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bd2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bdc:	f000 faf6 	bl	80021cc <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001be0:	bf00      	nop
 8001be2:	37b0      	adds	r7, #176	@ 0xb0
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40004400 	.word	0x40004400
 8001bec:	40021000 	.word	0x40021000

08001bf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bf4:	bf00      	nop
 8001bf6:	e7fd      	b.n	8001bf4 <NMI_Handler+0x4>

08001bf8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bfc:	bf00      	nop
 8001bfe:	e7fd      	b.n	8001bfc <HardFault_Handler+0x4>

08001c00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c04:	bf00      	nop
 8001c06:	e7fd      	b.n	8001c04 <MemManage_Handler+0x4>

08001c08 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <BusFault_Handler+0x4>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c14:	bf00      	nop
 8001c16:	e7fd      	b.n	8001c14 <UsageFault_Handler+0x4>

08001c18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c26:	b480      	push	{r7}
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c46:	f000 f96b 	bl	8001f20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
	...

08001c50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c54:	4802      	ldr	r0, [pc, #8]	@ (8001c60 <TIM2_IRQHandler+0x10>)
 8001c56:	f003 f947 	bl	8004ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200002a0 	.word	0x200002a0

08001c64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  return 1;
 8001c68:	2301      	movs	r3, #1
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <_kill>:

int _kill(int pid, int sig)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c7e:	f008 fb83 	bl	800a388 <__errno>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2216      	movs	r2, #22
 8001c86:	601a      	str	r2, [r3, #0]
  return -1;
 8001c88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <_exit>:

void _exit (int status)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff ffe7 	bl	8001c74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ca6:	bf00      	nop
 8001ca8:	e7fd      	b.n	8001ca6 <_exit+0x12>

08001caa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b086      	sub	sp, #24
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	60f8      	str	r0, [r7, #12]
 8001cb2:	60b9      	str	r1, [r7, #8]
 8001cb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	e00a      	b.n	8001cd2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	4601      	mov	r1, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1c5a      	adds	r2, r3, #1
 8001cc6:	60ba      	str	r2, [r7, #8]
 8001cc8:	b2ca      	uxtb	r2, r1
 8001cca:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	617b      	str	r3, [r7, #20]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	dbf0      	blt.n	8001cbc <_read+0x12>
  }

  return len;
 8001cda:	687b      	ldr	r3, [r7, #4]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3718      	adds	r7, #24
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	e009      	b.n	8001d0a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	1c5a      	adds	r2, r3, #1
 8001cfa:	60ba      	str	r2, [r7, #8]
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
 8001d0a:	697a      	ldr	r2, [r7, #20]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	dbf1      	blt.n	8001cf6 <_write+0x12>
  }
  return len;
 8001d12:	687b      	ldr	r3, [r7, #4]
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3718      	adds	r7, #24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_close>:

int _close(int file)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
 8001d3c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d44:	605a      	str	r2, [r3, #4]
  return 0;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_isatty>:

int _isatty(int file)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d5c:	2301      	movs	r3, #1
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr

08001d6a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b085      	sub	sp, #20
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d8c:	4a14      	ldr	r2, [pc, #80]	@ (8001de0 <_sbrk+0x5c>)
 8001d8e:	4b15      	ldr	r3, [pc, #84]	@ (8001de4 <_sbrk+0x60>)
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <_sbrk+0x64>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d102      	bne.n	8001da6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da0:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <_sbrk+0x64>)
 8001da2:	4a12      	ldr	r2, [pc, #72]	@ (8001dec <_sbrk+0x68>)
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001da6:	4b10      	ldr	r3, [pc, #64]	@ (8001de8 <_sbrk+0x64>)
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	693a      	ldr	r2, [r7, #16]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d207      	bcs.n	8001dc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001db4:	f008 fae8 	bl	800a388 <__errno>
 8001db8:	4603      	mov	r3, r0
 8001dba:	220c      	movs	r2, #12
 8001dbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	e009      	b.n	8001dd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <_sbrk+0x64>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <_sbrk+0x64>)
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4413      	add	r3, r2
 8001dd2:	4a05      	ldr	r2, [pc, #20]	@ (8001de8 <_sbrk+0x64>)
 8001dd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20018000 	.word	0x20018000
 8001de4:	00000400 	.word	0x00000400
 8001de8:	20002460 	.word	0x20002460
 8001dec:	200027f0 	.word	0x200027f0

08001df0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001df4:	4b06      	ldr	r3, [pc, #24]	@ (8001e10 <SystemInit+0x20>)
 8001df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dfa:	4a05      	ldr	r2, [pc, #20]	@ (8001e10 <SystemInit+0x20>)
 8001dfc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001e00:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:
 8001e14:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e4c <LoopForever+0x2>
 8001e18:	f7ff ffea 	bl	8001df0 <SystemInit>
 8001e1c:	480c      	ldr	r0, [pc, #48]	@ (8001e50 <LoopForever+0x6>)
 8001e1e:	490d      	ldr	r1, [pc, #52]	@ (8001e54 <LoopForever+0xa>)
 8001e20:	4a0d      	ldr	r2, [pc, #52]	@ (8001e58 <LoopForever+0xe>)
 8001e22:	2300      	movs	r3, #0
 8001e24:	e002      	b.n	8001e2c <LoopCopyDataInit>

08001e26 <CopyDataInit>:
 8001e26:	58d4      	ldr	r4, [r2, r3]
 8001e28:	50c4      	str	r4, [r0, r3]
 8001e2a:	3304      	adds	r3, #4

08001e2c <LoopCopyDataInit>:
 8001e2c:	18c4      	adds	r4, r0, r3
 8001e2e:	428c      	cmp	r4, r1
 8001e30:	d3f9      	bcc.n	8001e26 <CopyDataInit>
 8001e32:	4a0a      	ldr	r2, [pc, #40]	@ (8001e5c <LoopForever+0x12>)
 8001e34:	4c0a      	ldr	r4, [pc, #40]	@ (8001e60 <LoopForever+0x16>)
 8001e36:	2300      	movs	r3, #0
 8001e38:	e001      	b.n	8001e3e <LoopFillZerobss>

08001e3a <FillZerobss>:
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	3204      	adds	r2, #4

08001e3e <LoopFillZerobss>:
 8001e3e:	42a2      	cmp	r2, r4
 8001e40:	d3fb      	bcc.n	8001e3a <FillZerobss>
 8001e42:	f008 faa7 	bl	800a394 <__libc_init_array>
 8001e46:	f7ff fa15 	bl	8001274 <main>

08001e4a <LoopForever>:
 8001e4a:	e7fe      	b.n	8001e4a <LoopForever>
 8001e4c:	20018000 	.word	0x20018000
 8001e50:	20000000 	.word	0x20000000
 8001e54:	200001e8 	.word	0x200001e8
 8001e58:	0800cd34 	.word	0x0800cd34
 8001e5c:	200001e8 	.word	0x200001e8
 8001e60:	200027f0 	.word	0x200027f0

08001e64 <ADC1_2_IRQHandler>:
 8001e64:	e7fe      	b.n	8001e64 <ADC1_2_IRQHandler>
	...

08001e68 <HAL_Init>:
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	71fb      	strb	r3, [r7, #7]
 8001e72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <HAL_Init+0x3c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ea4 <HAL_Init+0x3c>)
 8001e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	2003      	movs	r0, #3
 8001e80:	f000 f962 	bl	8002148 <HAL_NVIC_SetPriorityGrouping>
 8001e84:	2000      	movs	r0, #0
 8001e86:	f000 f80f 	bl	8001ea8 <HAL_InitTick>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d002      	beq.n	8001e96 <HAL_Init+0x2e>
 8001e90:	2301      	movs	r3, #1
 8001e92:	71fb      	strb	r3, [r7, #7]
 8001e94:	e001      	b.n	8001e9a <HAL_Init+0x32>
 8001e96:	f7ff fd6f 	bl	8001978 <HAL_MspInit>
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3708      	adds	r7, #8
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <HAL_InitTick>:
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	73fb      	strb	r3, [r7, #15]
 8001eb4:	4b17      	ldr	r3, [pc, #92]	@ (8001f14 <HAL_InitTick+0x6c>)
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d023      	beq.n	8001f04 <HAL_InitTick+0x5c>
 8001ebc:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <HAL_InitTick+0x70>)
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <HAL_InitTick+0x6c>)
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ece:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f000 f96d 	bl	80021b2 <HAL_SYSTICK_Config>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10f      	bne.n	8001efe <HAL_InitTick+0x56>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b0f      	cmp	r3, #15
 8001ee2:	d809      	bhi.n	8001ef8 <HAL_InitTick+0x50>
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f000 f937 	bl	800215e <HAL_NVIC_SetPriority>
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	@ (8001f1c <HAL_InitTick+0x74>)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6013      	str	r3, [r2, #0]
 8001ef6:	e007      	b.n	8001f08 <HAL_InitTick+0x60>
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
 8001efc:	e004      	b.n	8001f08 <HAL_InitTick+0x60>
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
 8001f02:	e001      	b.n	8001f08 <HAL_InitTick+0x60>
 8001f04:	2301      	movs	r3, #1
 8001f06:	73fb      	strb	r3, [r7, #15]
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000008 	.word	0x20000008
 8001f18:	20000000 	.word	0x20000000
 8001f1c:	20000004 	.word	0x20000004

08001f20 <HAL_IncTick>:
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <HAL_IncTick+0x20>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4b06      	ldr	r3, [pc, #24]	@ (8001f44 <HAL_IncTick+0x24>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4413      	add	r3, r2
 8001f30:	4a04      	ldr	r2, [pc, #16]	@ (8001f44 <HAL_IncTick+0x24>)
 8001f32:	6013      	str	r3, [r2, #0]
 8001f34:	bf00      	nop
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000008 	.word	0x20000008
 8001f44:	20002464 	.word	0x20002464

08001f48 <HAL_GetTick>:
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	4b03      	ldr	r3, [pc, #12]	@ (8001f5c <HAL_GetTick+0x14>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4618      	mov	r0, r3
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
 8001f5a:	bf00      	nop
 8001f5c:	20002464 	.word	0x20002464

08001f60 <HAL_Delay>:
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b084      	sub	sp, #16
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	f7ff ffee 	bl	8001f48 <HAL_GetTick>
 8001f6c:	60b8      	str	r0, [r7, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f78:	d005      	beq.n	8001f86 <HAL_Delay+0x26>
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fa4 <HAL_Delay+0x44>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	4413      	add	r3, r2
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	bf00      	nop
 8001f88:	f7ff ffde 	bl	8001f48 <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	68fa      	ldr	r2, [r7, #12]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d8f7      	bhi.n	8001f88 <HAL_Delay+0x28>
 8001f98:	bf00      	nop
 8001f9a:	bf00      	nop
 8001f9c:	3710      	adds	r7, #16
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000008 	.word	0x20000008

08001fa8 <__NVIC_SetPriorityGrouping>:
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f003 0307 	and.w	r3, r3, #7
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	60bb      	str	r3, [r7, #8]
 8001fbe:	68ba      	ldr	r2, [r7, #8]
 8001fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	021a      	lsls	r2, r3, #8
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <__NVIC_SetPriorityGrouping+0x44>)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	60d3      	str	r3, [r2, #12]
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	e000ed00 	.word	0xe000ed00

08001ff0 <__NVIC_GetPriorityGrouping>:
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	4b04      	ldr	r3, [pc, #16]	@ (8002008 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0a1b      	lsrs	r3, r3, #8
 8001ffa:	f003 0307 	and.w	r3, r3, #7
 8001ffe:	4618      	mov	r0, r3
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	e000ed00 	.word	0xe000ed00

0800200c <__NVIC_EnableIRQ>:
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	71fb      	strb	r3, [r7, #7]
 8002016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201a:	2b00      	cmp	r3, #0
 800201c:	db0b      	blt.n	8002036 <__NVIC_EnableIRQ+0x2a>
 800201e:	79fb      	ldrb	r3, [r7, #7]
 8002020:	f003 021f 	and.w	r2, r3, #31
 8002024:	4907      	ldr	r1, [pc, #28]	@ (8002044 <__NVIC_EnableIRQ+0x38>)
 8002026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202a:	095b      	lsrs	r3, r3, #5
 800202c:	2001      	movs	r0, #1
 800202e:	fa00 f202 	lsl.w	r2, r0, r2
 8002032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100

08002048 <__NVIC_SetPriority>:
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	6039      	str	r1, [r7, #0]
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002058:	2b00      	cmp	r3, #0
 800205a:	db0a      	blt.n	8002072 <__NVIC_SetPriority+0x2a>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	b2da      	uxtb	r2, r3
 8002060:	490c      	ldr	r1, [pc, #48]	@ (8002094 <__NVIC_SetPriority+0x4c>)
 8002062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002066:	0112      	lsls	r2, r2, #4
 8002068:	b2d2      	uxtb	r2, r2
 800206a:	440b      	add	r3, r1
 800206c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8002070:	e00a      	b.n	8002088 <__NVIC_SetPriority+0x40>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	b2da      	uxtb	r2, r3
 8002076:	4908      	ldr	r1, [pc, #32]	@ (8002098 <__NVIC_SetPriority+0x50>)
 8002078:	79fb      	ldrb	r3, [r7, #7]
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	3b04      	subs	r3, #4
 8002080:	0112      	lsls	r2, r2, #4
 8002082:	b2d2      	uxtb	r2, r2
 8002084:	440b      	add	r3, r1
 8002086:	761a      	strb	r2, [r3, #24]
 8002088:	bf00      	nop
 800208a:	370c      	adds	r7, #12
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr
 8002094:	e000e100 	.word	0xe000e100
 8002098:	e000ed00 	.word	0xe000ed00

0800209c <NVIC_EncodePriority>:
 800209c:	b480      	push	{r7}
 800209e:	b089      	sub	sp, #36	@ 0x24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	61fb      	str	r3, [r7, #28]
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f1c3 0307 	rsb	r3, r3, #7
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	bf28      	it	cs
 80020ba:	2304      	movcs	r3, #4
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	3304      	adds	r3, #4
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	d902      	bls.n	80020cc <NVIC_EncodePriority+0x30>
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	3b03      	subs	r3, #3
 80020ca:	e000      	b.n	80020ce <NVIC_EncodePriority+0x32>
 80020cc:	2300      	movs	r3, #0
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	f04f 32ff 	mov.w	r2, #4294967295
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	401a      	ands	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	409a      	lsls	r2, r3
 80020e4:	f04f 31ff 	mov.w	r1, #4294967295
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	fa01 f303 	lsl.w	r3, r1, r3
 80020ee:	43d9      	mvns	r1, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	400b      	ands	r3, r1
 80020f4:	4313      	orrs	r3, r2
 80020f6:	4618      	mov	r0, r3
 80020f8:	3724      	adds	r7, #36	@ 0x24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
	...

08002104 <SysTick_Config>:
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3b01      	subs	r3, #1
 8002110:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002114:	d301      	bcc.n	800211a <SysTick_Config+0x16>
 8002116:	2301      	movs	r3, #1
 8002118:	e00f      	b.n	800213a <SysTick_Config+0x36>
 800211a:	4a0a      	ldr	r2, [pc, #40]	@ (8002144 <SysTick_Config+0x40>)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	3b01      	subs	r3, #1
 8002120:	6053      	str	r3, [r2, #4]
 8002122:	210f      	movs	r1, #15
 8002124:	f04f 30ff 	mov.w	r0, #4294967295
 8002128:	f7ff ff8e 	bl	8002048 <__NVIC_SetPriority>
 800212c:	4b05      	ldr	r3, [pc, #20]	@ (8002144 <SysTick_Config+0x40>)
 800212e:	2200      	movs	r2, #0
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	4b04      	ldr	r3, [pc, #16]	@ (8002144 <SysTick_Config+0x40>)
 8002134:	2207      	movs	r2, #7
 8002136:	601a      	str	r2, [r3, #0]
 8002138:	2300      	movs	r3, #0
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	e000e010 	.word	0xe000e010

08002148 <HAL_NVIC_SetPriorityGrouping>:
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff ff29 	bl	8001fa8 <__NVIC_SetPriorityGrouping>
 8002156:	bf00      	nop
 8002158:	3708      	adds	r7, #8
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}

0800215e <HAL_NVIC_SetPriority>:
 800215e:	b580      	push	{r7, lr}
 8002160:	b086      	sub	sp, #24
 8002162:	af00      	add	r7, sp, #0
 8002164:	4603      	mov	r3, r0
 8002166:	60b9      	str	r1, [r7, #8]
 8002168:	607a      	str	r2, [r7, #4]
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	f7ff ff3e 	bl	8001ff0 <__NVIC_GetPriorityGrouping>
 8002174:	6178      	str	r0, [r7, #20]
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	68b9      	ldr	r1, [r7, #8]
 800217a:	6978      	ldr	r0, [r7, #20]
 800217c:	f7ff ff8e 	bl	800209c <NVIC_EncodePriority>
 8002180:	4602      	mov	r2, r0
 8002182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002186:	4611      	mov	r1, r2
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff ff5d 	bl	8002048 <__NVIC_SetPriority>
 800218e:	bf00      	nop
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_NVIC_EnableIRQ>:
 8002196:	b580      	push	{r7, lr}
 8002198:	b082      	sub	sp, #8
 800219a:	af00      	add	r7, sp, #0
 800219c:	4603      	mov	r3, r0
 800219e:	71fb      	strb	r3, [r7, #7]
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff ff31 	bl	800200c <__NVIC_EnableIRQ>
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SYSTICK_Config>:
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b082      	sub	sp, #8
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffa2 	bl	8002104 <SysTick_Config>
 80021c0:	4603      	mov	r3, r0
 80021c2:	4618      	mov	r0, r3
 80021c4:	3708      	adds	r7, #8
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
	...

080021cc <HAL_GPIO_Init>:
 80021cc:	b480      	push	{r7}
 80021ce:	b087      	sub	sp, #28
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
 80021da:	e17f      	b.n	80024dc <HAL_GPIO_Init+0x310>
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	2101      	movs	r1, #1
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	fa01 f303 	lsl.w	r3, r1, r3
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f000 8171 	beq.w	80024d6 <HAL_GPIO_Init+0x30a>
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d005      	beq.n	800220c <HAL_GPIO_Init+0x40>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f003 0303 	and.w	r3, r3, #3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d130      	bne.n	800226e <HAL_GPIO_Init+0xa2>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	005b      	lsls	r3, r3, #1
 8002216:	2203      	movs	r2, #3
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43db      	mvns	r3, r3
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	4013      	ands	r3, r2
 8002222:	613b      	str	r3, [r7, #16]
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	68da      	ldr	r2, [r3, #12]
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	609a      	str	r2, [r3, #8]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	2201      	movs	r2, #1
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	43db      	mvns	r3, r3
 800224c:	693a      	ldr	r2, [r7, #16]
 800224e:	4013      	ands	r3, r2
 8002250:	613b      	str	r3, [r7, #16]
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	091b      	lsrs	r3, r3, #4
 8002258:	f003 0201 	and.w	r2, r3, #1
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	693a      	ldr	r2, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	693a      	ldr	r2, [r7, #16]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f003 0303 	and.w	r3, r3, #3
 8002276:	2b03      	cmp	r3, #3
 8002278:	d118      	bne.n	80022ac <HAL_GPIO_Init+0xe0>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227e:	613b      	str	r3, [r7, #16]
 8002280:	2201      	movs	r2, #1
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	4013      	ands	r3, r2
 800228e:	613b      	str	r3, [r7, #16]
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	f003 0201 	and.w	r2, r3, #1
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	62da      	str	r2, [r3, #44]	@ 0x2c
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b03      	cmp	r3, #3
 80022b6:	d017      	beq.n	80022e8 <HAL_GPIO_Init+0x11c>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	697b      	ldr	r3, [r7, #20]
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	2203      	movs	r2, #3
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43db      	mvns	r3, r3
 80022ca:	693a      	ldr	r2, [r7, #16]
 80022cc:	4013      	ands	r3, r2
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	689a      	ldr	r2, [r3, #8]
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	4313      	orrs	r3, r2
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	693a      	ldr	r2, [r7, #16]
 80022e6:	60da      	str	r2, [r3, #12]
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f003 0303 	and.w	r3, r3, #3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d123      	bne.n	800233c <HAL_GPIO_Init+0x170>
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	08da      	lsrs	r2, r3, #3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	3208      	adds	r2, #8
 80022fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	f003 0307 	and.w	r3, r3, #7
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	220f      	movs	r2, #15
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	691a      	ldr	r2, [r3, #16]
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	693a      	ldr	r2, [r7, #16]
 800232a:	4313      	orrs	r3, r2
 800232c:	613b      	str	r3, [r7, #16]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	08da      	lsrs	r2, r3, #3
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3208      	adds	r2, #8
 8002336:	6939      	ldr	r1, [r7, #16]
 8002338:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	005b      	lsls	r3, r3, #1
 8002346:	2203      	movs	r2, #3
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f003 0203 	and.w	r2, r3, #3
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	693a      	ldr	r2, [r7, #16]
 8002366:	4313      	orrs	r3, r2
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80ac 	beq.w	80024d6 <HAL_GPIO_Init+0x30a>
 800237e:	4b5f      	ldr	r3, [pc, #380]	@ (80024fc <HAL_GPIO_Init+0x330>)
 8002380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002382:	4a5e      	ldr	r2, [pc, #376]	@ (80024fc <HAL_GPIO_Init+0x330>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6613      	str	r3, [r2, #96]	@ 0x60
 800238a:	4b5c      	ldr	r3, [pc, #368]	@ (80024fc <HAL_GPIO_Init+0x330>)
 800238c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	60bb      	str	r3, [r7, #8]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	4a5a      	ldr	r2, [pc, #360]	@ (8002500 <HAL_GPIO_Init+0x334>)
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	089b      	lsrs	r3, r3, #2
 800239c:	3302      	adds	r3, #2
 800239e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a2:	613b      	str	r3, [r7, #16]
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	220f      	movs	r2, #15
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	4013      	ands	r3, r2
 80023b8:	613b      	str	r3, [r7, #16]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80023c0:	d025      	beq.n	800240e <HAL_GPIO_Init+0x242>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a4f      	ldr	r2, [pc, #316]	@ (8002504 <HAL_GPIO_Init+0x338>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d01f      	beq.n	800240a <HAL_GPIO_Init+0x23e>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a4e      	ldr	r2, [pc, #312]	@ (8002508 <HAL_GPIO_Init+0x33c>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d019      	beq.n	8002406 <HAL_GPIO_Init+0x23a>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a4d      	ldr	r2, [pc, #308]	@ (800250c <HAL_GPIO_Init+0x340>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d013      	beq.n	8002402 <HAL_GPIO_Init+0x236>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	4a4c      	ldr	r2, [pc, #304]	@ (8002510 <HAL_GPIO_Init+0x344>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d00d      	beq.n	80023fe <HAL_GPIO_Init+0x232>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	4a4b      	ldr	r2, [pc, #300]	@ (8002514 <HAL_GPIO_Init+0x348>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d007      	beq.n	80023fa <HAL_GPIO_Init+0x22e>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a4a      	ldr	r2, [pc, #296]	@ (8002518 <HAL_GPIO_Init+0x34c>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d101      	bne.n	80023f6 <HAL_GPIO_Init+0x22a>
 80023f2:	2306      	movs	r3, #6
 80023f4:	e00c      	b.n	8002410 <HAL_GPIO_Init+0x244>
 80023f6:	2307      	movs	r3, #7
 80023f8:	e00a      	b.n	8002410 <HAL_GPIO_Init+0x244>
 80023fa:	2305      	movs	r3, #5
 80023fc:	e008      	b.n	8002410 <HAL_GPIO_Init+0x244>
 80023fe:	2304      	movs	r3, #4
 8002400:	e006      	b.n	8002410 <HAL_GPIO_Init+0x244>
 8002402:	2303      	movs	r3, #3
 8002404:	e004      	b.n	8002410 <HAL_GPIO_Init+0x244>
 8002406:	2302      	movs	r3, #2
 8002408:	e002      	b.n	8002410 <HAL_GPIO_Init+0x244>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <HAL_GPIO_Init+0x244>
 800240e:	2300      	movs	r3, #0
 8002410:	697a      	ldr	r2, [r7, #20]
 8002412:	f002 0203 	and.w	r2, r2, #3
 8002416:	0092      	lsls	r2, r2, #2
 8002418:	4093      	lsls	r3, r2
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	4937      	ldr	r1, [pc, #220]	@ (8002500 <HAL_GPIO_Init+0x334>)
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	089b      	lsrs	r3, r3, #2
 8002426:	3302      	adds	r3, #2
 8002428:	693a      	ldr	r2, [r7, #16]
 800242a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800242e:	4b3b      	ldr	r3, [pc, #236]	@ (800251c <HAL_GPIO_Init+0x350>)
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	613b      	str	r3, [r7, #16]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	43db      	mvns	r3, r3
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	4013      	ands	r3, r2
 800243c:	613b      	str	r3, [r7, #16]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_Init+0x286>
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	4313      	orrs	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
 8002452:	4a32      	ldr	r2, [pc, #200]	@ (800251c <HAL_GPIO_Init+0x350>)
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	6093      	str	r3, [r2, #8]
 8002458:	4b30      	ldr	r3, [pc, #192]	@ (800251c <HAL_GPIO_Init+0x350>)
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	43db      	mvns	r3, r3
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_GPIO_Init+0x2b0>
 8002474:	693a      	ldr	r2, [r7, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
 800247c:	4a27      	ldr	r2, [pc, #156]	@ (800251c <HAL_GPIO_Init+0x350>)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	60d3      	str	r3, [r2, #12]
 8002482:	4b26      	ldr	r3, [pc, #152]	@ (800251c <HAL_GPIO_Init+0x350>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	43db      	mvns	r3, r3
 800248c:	693a      	ldr	r2, [r7, #16]
 800248e:	4013      	ands	r3, r2
 8002490:	613b      	str	r3, [r7, #16]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d003      	beq.n	80024a6 <HAL_GPIO_Init+0x2da>
 800249e:	693a      	ldr	r2, [r7, #16]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	4313      	orrs	r3, r2
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	4a1d      	ldr	r2, [pc, #116]	@ (800251c <HAL_GPIO_Init+0x350>)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	6053      	str	r3, [r2, #4]
 80024ac:	4b1b      	ldr	r3, [pc, #108]	@ (800251c <HAL_GPIO_Init+0x350>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	613b      	str	r3, [r7, #16]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	43db      	mvns	r3, r3
 80024b6:	693a      	ldr	r2, [r7, #16]
 80024b8:	4013      	ands	r3, r2
 80024ba:	613b      	str	r3, [r7, #16]
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	685b      	ldr	r3, [r3, #4]
 80024c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_GPIO_Init+0x304>
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	4a12      	ldr	r2, [pc, #72]	@ (800251c <HAL_GPIO_Init+0x350>)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	fa22 f303 	lsr.w	r3, r2, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f47f ae78 	bne.w	80021dc <HAL_GPIO_Init+0x10>
 80024ec:	bf00      	nop
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
 80024fa:	bf00      	nop
 80024fc:	40021000 	.word	0x40021000
 8002500:	40010000 	.word	0x40010000
 8002504:	48000400 	.word	0x48000400
 8002508:	48000800 	.word	0x48000800
 800250c:	48000c00 	.word	0x48000c00
 8002510:	48001000 	.word	0x48001000
 8002514:	48001400 	.word	0x48001400
 8002518:	48001800 	.word	0x48001800
 800251c:	40010400 	.word	0x40010400

08002520 <HAL_GPIO_WritePin>:
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
 800252c:	4613      	mov	r3, r2
 800252e:	707b      	strb	r3, [r7, #1]
 8002530:	787b      	ldrb	r3, [r7, #1]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_WritePin+0x1e>
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	619a      	str	r2, [r3, #24]
 800253c:	e002      	b.n	8002544 <HAL_GPIO_WritePin+0x24>
 800253e:	887a      	ldrh	r2, [r7, #2]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	629a      	str	r2, [r3, #40]	@ 0x28
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <HAL_PWREx_GetVoltageRange>:
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
 8002554:	4b04      	ldr	r3, [pc, #16]	@ (8002568 <HAL_PWREx_GetVoltageRange+0x18>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800255c:	4618      	mov	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40007000 	.word	0x40007000

0800256c <HAL_PWREx_ControlVoltageScaling>:
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800257a:	d130      	bne.n	80025de <HAL_PWREx_ControlVoltageScaling+0x72>
 800257c:	4b23      	ldr	r3, [pc, #140]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002588:	d038      	beq.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x90>
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002592:	4a1e      	ldr	r2, [pc, #120]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002594:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002598:	6013      	str	r3, [r2, #0]
 800259a:	4b1d      	ldr	r3, [pc, #116]	@ (8002610 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	2232      	movs	r2, #50	@ 0x32
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002614 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025a6:	fba2 2303 	umull	r2, r3, r2, r3
 80025aa:	0c9b      	lsrs	r3, r3, #18
 80025ac:	3301      	adds	r3, #1
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	e002      	b.n	80025b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	3b01      	subs	r3, #1
 80025b6:	60fb      	str	r3, [r7, #12]
 80025b8:	4b14      	ldr	r3, [pc, #80]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ba:	695b      	ldr	r3, [r3, #20]
 80025bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025c4:	d102      	bne.n	80025cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f2      	bne.n	80025b2 <HAL_PWREx_ControlVoltageScaling+0x46>
 80025cc:	4b0f      	ldr	r3, [pc, #60]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d8:	d110      	bne.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x90>
 80025da:	2303      	movs	r3, #3
 80025dc:	e00f      	b.n	80025fe <HAL_PWREx_ControlVoltageScaling+0x92>
 80025de:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ea:	d007      	beq.n	80025fc <HAL_PWREx_ControlVoltageScaling+0x90>
 80025ec:	4b07      	ldr	r3, [pc, #28]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025f4:	4a05      	ldr	r2, [pc, #20]	@ (800260c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	2300      	movs	r3, #0
 80025fe:	4618      	mov	r0, r3
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	40007000 	.word	0x40007000
 8002610:	20000000 	.word	0x20000000
 8002614:	431bde83 	.word	0x431bde83

08002618 <HAL_RCC_OscConfig>:
 8002618:	b580      	push	{r7, lr}
 800261a:	b088      	sub	sp, #32
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_OscConfig+0x12>
 8002626:	2301      	movs	r3, #1
 8002628:	e3ca      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 800262a:	4b97      	ldr	r3, [pc, #604]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 030c 	and.w	r3, r3, #12
 8002632:	61bb      	str	r3, [r7, #24]
 8002634:	4b94      	ldr	r3, [pc, #592]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	f003 0303 	and.w	r3, r3, #3
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80e4 	beq.w	8002814 <HAL_RCC_OscConfig+0x1fc>
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d007      	beq.n	8002662 <HAL_RCC_OscConfig+0x4a>
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	2b0c      	cmp	r3, #12
 8002656:	f040 808b 	bne.w	8002770 <HAL_RCC_OscConfig+0x158>
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b01      	cmp	r3, #1
 800265e:	f040 8087 	bne.w	8002770 <HAL_RCC_OscConfig+0x158>
 8002662:	4b89      	ldr	r3, [pc, #548]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d005      	beq.n	800267a <HAL_RCC_OscConfig+0x62>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d101      	bne.n	800267a <HAL_RCC_OscConfig+0x62>
 8002676:	2301      	movs	r3, #1
 8002678:	e3a2      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6a1a      	ldr	r2, [r3, #32]
 800267e:	4b82      	ldr	r3, [pc, #520]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0308 	and.w	r3, r3, #8
 8002686:	2b00      	cmp	r3, #0
 8002688:	d004      	beq.n	8002694 <HAL_RCC_OscConfig+0x7c>
 800268a:	4b7f      	ldr	r3, [pc, #508]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002692:	e005      	b.n	80026a0 <HAL_RCC_OscConfig+0x88>
 8002694:	4b7c      	ldr	r3, [pc, #496]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800269a:	091b      	lsrs	r3, r3, #4
 800269c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d223      	bcs.n	80026ec <HAL_RCC_OscConfig+0xd4>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f000 fd55 	bl	8003158 <RCC_SetFlashLatencyFromMSIRange>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d001      	beq.n	80026b8 <HAL_RCC_OscConfig+0xa0>
 80026b4:	2301      	movs	r3, #1
 80026b6:	e383      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 80026b8:	4b73      	ldr	r3, [pc, #460]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a72      	ldr	r2, [pc, #456]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80026be:	f043 0308 	orr.w	r3, r3, #8
 80026c2:	6013      	str	r3, [r2, #0]
 80026c4:	4b70      	ldr	r3, [pc, #448]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6a1b      	ldr	r3, [r3, #32]
 80026d0:	496d      	ldr	r1, [pc, #436]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]
 80026d6:	4b6c      	ldr	r3, [pc, #432]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	021b      	lsls	r3, r3, #8
 80026e4:	4968      	ldr	r1, [pc, #416]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	604b      	str	r3, [r1, #4]
 80026ea:	e025      	b.n	8002738 <HAL_RCC_OscConfig+0x120>
 80026ec:	4b66      	ldr	r3, [pc, #408]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a65      	ldr	r2, [pc, #404]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80026f2:	f043 0308 	orr.w	r3, r3, #8
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	4b63      	ldr	r3, [pc, #396]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a1b      	ldr	r3, [r3, #32]
 8002704:	4960      	ldr	r1, [pc, #384]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002706:	4313      	orrs	r3, r2
 8002708:	600b      	str	r3, [r1, #0]
 800270a:	4b5f      	ldr	r3, [pc, #380]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	69db      	ldr	r3, [r3, #28]
 8002716:	021b      	lsls	r3, r3, #8
 8002718:	495b      	ldr	r1, [pc, #364]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800271a:	4313      	orrs	r3, r2
 800271c:	604b      	str	r3, [r1, #4]
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d109      	bne.n	8002738 <HAL_RCC_OscConfig+0x120>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6a1b      	ldr	r3, [r3, #32]
 8002728:	4618      	mov	r0, r3
 800272a:	f000 fd15 	bl	8003158 <RCC_SetFlashLatencyFromMSIRange>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_RCC_OscConfig+0x120>
 8002734:	2301      	movs	r3, #1
 8002736:	e343      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002738:	f000 fc4a 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 800273c:	4602      	mov	r2, r0
 800273e:	4b52      	ldr	r3, [pc, #328]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	091b      	lsrs	r3, r3, #4
 8002744:	f003 030f 	and.w	r3, r3, #15
 8002748:	4950      	ldr	r1, [pc, #320]	@ (800288c <HAL_RCC_OscConfig+0x274>)
 800274a:	5ccb      	ldrb	r3, [r1, r3]
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	fa22 f303 	lsr.w	r3, r2, r3
 8002754:	4a4e      	ldr	r2, [pc, #312]	@ (8002890 <HAL_RCC_OscConfig+0x278>)
 8002756:	6013      	str	r3, [r2, #0]
 8002758:	4b4e      	ldr	r3, [pc, #312]	@ (8002894 <HAL_RCC_OscConfig+0x27c>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff fba3 	bl	8001ea8 <HAL_InitTick>
 8002762:	4603      	mov	r3, r0
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	7bfb      	ldrb	r3, [r7, #15]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d052      	beq.n	8002812 <HAL_RCC_OscConfig+0x1fa>
 800276c:	7bfb      	ldrb	r3, [r7, #15]
 800276e:	e327      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d032      	beq.n	80027de <HAL_RCC_OscConfig+0x1c6>
 8002778:	4b43      	ldr	r3, [pc, #268]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a42      	ldr	r2, [pc, #264]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800277e:	f043 0301 	orr.w	r3, r3, #1
 8002782:	6013      	str	r3, [r2, #0]
 8002784:	f7ff fbe0 	bl	8001f48 <HAL_GetTick>
 8002788:	6138      	str	r0, [r7, #16]
 800278a:	e008      	b.n	800279e <HAL_RCC_OscConfig+0x186>
 800278c:	f7ff fbdc 	bl	8001f48 <HAL_GetTick>
 8002790:	4602      	mov	r2, r0
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	2b02      	cmp	r3, #2
 8002798:	d901      	bls.n	800279e <HAL_RCC_OscConfig+0x186>
 800279a:	2303      	movs	r3, #3
 800279c:	e310      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 800279e:	4b3a      	ldr	r3, [pc, #232]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d0f0      	beq.n	800278c <HAL_RCC_OscConfig+0x174>
 80027aa:	4b37      	ldr	r3, [pc, #220]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a36      	ldr	r2, [pc, #216]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80027b0:	f043 0308 	orr.w	r3, r3, #8
 80027b4:	6013      	str	r3, [r2, #0]
 80027b6:	4b34      	ldr	r3, [pc, #208]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	4931      	ldr	r1, [pc, #196]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]
 80027c8:	4b2f      	ldr	r3, [pc, #188]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	69db      	ldr	r3, [r3, #28]
 80027d4:	021b      	lsls	r3, r3, #8
 80027d6:	492c      	ldr	r1, [pc, #176]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
 80027dc:	e01a      	b.n	8002814 <HAL_RCC_OscConfig+0x1fc>
 80027de:	4b2a      	ldr	r3, [pc, #168]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a29      	ldr	r2, [pc, #164]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 80027e4:	f023 0301 	bic.w	r3, r3, #1
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	f7ff fbad 	bl	8001f48 <HAL_GetTick>
 80027ee:	6138      	str	r0, [r7, #16]
 80027f0:	e008      	b.n	8002804 <HAL_RCC_OscConfig+0x1ec>
 80027f2:	f7ff fba9 	bl	8001f48 <HAL_GetTick>
 80027f6:	4602      	mov	r2, r0
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	1ad3      	subs	r3, r2, r3
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d901      	bls.n	8002804 <HAL_RCC_OscConfig+0x1ec>
 8002800:	2303      	movs	r3, #3
 8002802:	e2dd      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002804:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d1f0      	bne.n	80027f2 <HAL_RCC_OscConfig+0x1da>
 8002810:	e000      	b.n	8002814 <HAL_RCC_OscConfig+0x1fc>
 8002812:	bf00      	nop
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d074      	beq.n	800290a <HAL_RCC_OscConfig+0x2f2>
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b08      	cmp	r3, #8
 8002824:	d005      	beq.n	8002832 <HAL_RCC_OscConfig+0x21a>
 8002826:	69bb      	ldr	r3, [r7, #24]
 8002828:	2b0c      	cmp	r3, #12
 800282a:	d10e      	bne.n	800284a <HAL_RCC_OscConfig+0x232>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b03      	cmp	r3, #3
 8002830:	d10b      	bne.n	800284a <HAL_RCC_OscConfig+0x232>
 8002832:	4b15      	ldr	r3, [pc, #84]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d064      	beq.n	8002908 <HAL_RCC_OscConfig+0x2f0>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d160      	bne.n	8002908 <HAL_RCC_OscConfig+0x2f0>
 8002846:	2301      	movs	r3, #1
 8002848:	e2ba      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002852:	d106      	bne.n	8002862 <HAL_RCC_OscConfig+0x24a>
 8002854:	4b0c      	ldr	r3, [pc, #48]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a0b      	ldr	r2, [pc, #44]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800285a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	e026      	b.n	80028b0 <HAL_RCC_OscConfig+0x298>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800286a:	d115      	bne.n	8002898 <HAL_RCC_OscConfig+0x280>
 800286c:	4b06      	ldr	r3, [pc, #24]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 8002872:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b03      	ldr	r3, [pc, #12]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a02      	ldr	r2, [pc, #8]	@ (8002888 <HAL_RCC_OscConfig+0x270>)
 800287e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	e014      	b.n	80028b0 <HAL_RCC_OscConfig+0x298>
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
 800288c:	0800c528 	.word	0x0800c528
 8002890:	20000000 	.word	0x20000000
 8002894:	20000004 	.word	0x20000004
 8002898:	4ba0      	ldr	r3, [pc, #640]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a9f      	ldr	r2, [pc, #636]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 800289e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4b9d      	ldr	r3, [pc, #628]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a9c      	ldr	r2, [pc, #624]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80028aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d013      	beq.n	80028e0 <HAL_RCC_OscConfig+0x2c8>
 80028b8:	f7ff fb46 	bl	8001f48 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0x2ba>
 80028c0:	f7ff fb42 	bl	8001f48 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	@ 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0x2ba>
 80028ce:	2303      	movs	r3, #3
 80028d0:	e276      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 80028d2:	4b92      	ldr	r3, [pc, #584]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d0f0      	beq.n	80028c0 <HAL_RCC_OscConfig+0x2a8>
 80028de:	e014      	b.n	800290a <HAL_RCC_OscConfig+0x2f2>
 80028e0:	f7ff fb32 	bl	8001f48 <HAL_GetTick>
 80028e4:	6138      	str	r0, [r7, #16]
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x2e2>
 80028e8:	f7ff fb2e 	bl	8001f48 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b64      	cmp	r3, #100	@ 0x64
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x2e2>
 80028f6:	2303      	movs	r3, #3
 80028f8:	e262      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 80028fa:	4b88      	ldr	r3, [pc, #544]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x2d0>
 8002906:	e000      	b.n	800290a <HAL_RCC_OscConfig+0x2f2>
 8002908:	bf00      	nop
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d060      	beq.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	2b04      	cmp	r3, #4
 800291a:	d005      	beq.n	8002928 <HAL_RCC_OscConfig+0x310>
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	2b0c      	cmp	r3, #12
 8002920:	d119      	bne.n	8002956 <HAL_RCC_OscConfig+0x33e>
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d116      	bne.n	8002956 <HAL_RCC_OscConfig+0x33e>
 8002928:	4b7c      	ldr	r3, [pc, #496]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002930:	2b00      	cmp	r3, #0
 8002932:	d005      	beq.n	8002940 <HAL_RCC_OscConfig+0x328>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_RCC_OscConfig+0x328>
 800293c:	2301      	movs	r3, #1
 800293e:	e23f      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002940:	4b76      	ldr	r3, [pc, #472]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	691b      	ldr	r3, [r3, #16]
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	4973      	ldr	r1, [pc, #460]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002950:	4313      	orrs	r3, r2
 8002952:	604b      	str	r3, [r1, #4]
 8002954:	e040      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d023      	beq.n	80029a6 <HAL_RCC_OscConfig+0x38e>
 800295e:	4b6f      	ldr	r3, [pc, #444]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a6e      	ldr	r2, [pc, #440]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002964:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	f7ff faed 	bl	8001f48 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x36c>
 8002972:	f7ff fae9 	bl	8001f48 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x36c>
 8002980:	2303      	movs	r3, #3
 8002982:	e21d      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002984:	4b65      	ldr	r3, [pc, #404]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x35a>
 8002990:	4b62      	ldr	r3, [pc, #392]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	495f      	ldr	r1, [pc, #380]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
 80029a4:	e018      	b.n	80029d8 <HAL_RCC_OscConfig+0x3c0>
 80029a6:	4b5d      	ldr	r3, [pc, #372]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a5c      	ldr	r2, [pc, #368]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80029ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029b0:	6013      	str	r3, [r2, #0]
 80029b2:	f7ff fac9 	bl	8001f48 <HAL_GetTick>
 80029b6:	6138      	str	r0, [r7, #16]
 80029b8:	e008      	b.n	80029cc <HAL_RCC_OscConfig+0x3b4>
 80029ba:	f7ff fac5 	bl	8001f48 <HAL_GetTick>
 80029be:	4602      	mov	r2, r0
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d901      	bls.n	80029cc <HAL_RCC_OscConfig+0x3b4>
 80029c8:	2303      	movs	r3, #3
 80029ca:	e1f9      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 80029cc:	4b53      	ldr	r3, [pc, #332]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f0      	bne.n	80029ba <HAL_RCC_OscConfig+0x3a2>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03c      	beq.n	8002a5e <HAL_RCC_OscConfig+0x446>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	695b      	ldr	r3, [r3, #20]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01c      	beq.n	8002a26 <HAL_RCC_OscConfig+0x40e>
 80029ec:	4b4b      	ldr	r3, [pc, #300]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80029ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029f2:	4a4a      	ldr	r2, [pc, #296]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 80029f4:	f043 0301 	orr.w	r3, r3, #1
 80029f8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80029fc:	f7ff faa4 	bl	8001f48 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x3fe>
 8002a04:	f7ff faa0 	bl	8001f48 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x3fe>
 8002a12:	2303      	movs	r3, #3
 8002a14:	e1d4      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002a16:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a1c:	f003 0302 	and.w	r3, r3, #2
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d0ef      	beq.n	8002a04 <HAL_RCC_OscConfig+0x3ec>
 8002a24:	e01b      	b.n	8002a5e <HAL_RCC_OscConfig+0x446>
 8002a26:	4b3d      	ldr	r3, [pc, #244]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a2c:	4a3b      	ldr	r2, [pc, #236]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002a2e:	f023 0301 	bic.w	r3, r3, #1
 8002a32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8002a36:	f7ff fa87 	bl	8001f48 <HAL_GetTick>
 8002a3a:	6138      	str	r0, [r7, #16]
 8002a3c:	e008      	b.n	8002a50 <HAL_RCC_OscConfig+0x438>
 8002a3e:	f7ff fa83 	bl	8001f48 <HAL_GetTick>
 8002a42:	4602      	mov	r2, r0
 8002a44:	693b      	ldr	r3, [r7, #16]
 8002a46:	1ad3      	subs	r3, r2, r3
 8002a48:	2b02      	cmp	r3, #2
 8002a4a:	d901      	bls.n	8002a50 <HAL_RCC_OscConfig+0x438>
 8002a4c:	2303      	movs	r3, #3
 8002a4e:	e1b7      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002a50:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1ef      	bne.n	8002a3e <HAL_RCC_OscConfig+0x426>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f000 80a6 	beq.w	8002bb8 <HAL_RCC_OscConfig+0x5a0>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	77fb      	strb	r3, [r7, #31]
 8002a70:	4b2a      	ldr	r3, [pc, #168]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10d      	bne.n	8002a98 <HAL_RCC_OscConfig+0x480>
 8002a7c:	4b27      	ldr	r3, [pc, #156]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002a7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a80:	4a26      	ldr	r2, [pc, #152]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a88:	4b24      	ldr	r3, [pc, #144]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002a8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a90:	60bb      	str	r3, [r7, #8]
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	2301      	movs	r3, #1
 8002a96:	77fb      	strb	r3, [r7, #31]
 8002a98:	4b21      	ldr	r3, [pc, #132]	@ (8002b20 <HAL_RCC_OscConfig+0x508>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d118      	bne.n	8002ad6 <HAL_RCC_OscConfig+0x4be>
 8002aa4:	4b1e      	ldr	r3, [pc, #120]	@ (8002b20 <HAL_RCC_OscConfig+0x508>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8002b20 <HAL_RCC_OscConfig+0x508>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aae:	6013      	str	r3, [r2, #0]
 8002ab0:	f7ff fa4a 	bl	8001f48 <HAL_GetTick>
 8002ab4:	6138      	str	r0, [r7, #16]
 8002ab6:	e008      	b.n	8002aca <HAL_RCC_OscConfig+0x4b2>
 8002ab8:	f7ff fa46 	bl	8001f48 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d901      	bls.n	8002aca <HAL_RCC_OscConfig+0x4b2>
 8002ac6:	2303      	movs	r3, #3
 8002ac8:	e17a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002aca:	4b15      	ldr	r3, [pc, #84]	@ (8002b20 <HAL_RCC_OscConfig+0x508>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d0f0      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x4a0>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d108      	bne.n	8002af0 <HAL_RCC_OscConfig+0x4d8>
 8002ade:	4b0f      	ldr	r3, [pc, #60]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002ae6:	f043 0301 	orr.w	r3, r3, #1
 8002aea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aee:	e029      	b.n	8002b44 <HAL_RCC_OscConfig+0x52c>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d115      	bne.n	8002b24 <HAL_RCC_OscConfig+0x50c>
 8002af8:	4b08      	ldr	r3, [pc, #32]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002afe:	4a07      	ldr	r2, [pc, #28]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002b00:	f043 0304 	orr.w	r3, r3, #4
 8002b04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b08:	4b04      	ldr	r3, [pc, #16]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b0e:	4a03      	ldr	r2, [pc, #12]	@ (8002b1c <HAL_RCC_OscConfig+0x504>)
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b18:	e014      	b.n	8002b44 <HAL_RCC_OscConfig+0x52c>
 8002b1a:	bf00      	nop
 8002b1c:	40021000 	.word	0x40021000
 8002b20:	40007000 	.word	0x40007000
 8002b24:	4b9c      	ldr	r3, [pc, #624]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b2a:	4a9b      	ldr	r2, [pc, #620]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002b2c:	f023 0301 	bic.w	r3, r3, #1
 8002b30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b34:	4b98      	ldr	r3, [pc, #608]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3a:	4a97      	ldr	r2, [pc, #604]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d016      	beq.n	8002b7a <HAL_RCC_OscConfig+0x562>
 8002b4c:	f7ff f9fc 	bl	8001f48 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x552>
 8002b54:	f7ff f9f8 	bl	8001f48 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x552>
 8002b66:	2303      	movs	r3, #3
 8002b68:	e12a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002b6a:	4b8b      	ldr	r3, [pc, #556]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ed      	beq.n	8002b54 <HAL_RCC_OscConfig+0x53c>
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x58e>
 8002b7a:	f7ff f9e5 	bl	8001f48 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]
 8002b80:	e00a      	b.n	8002b98 <HAL_RCC_OscConfig+0x580>
 8002b82:	f7ff f9e1 	bl	8001f48 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x580>
 8002b94:	2303      	movs	r3, #3
 8002b96:	e113      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002b98:	4b7f      	ldr	r3, [pc, #508]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1ed      	bne.n	8002b82 <HAL_RCC_OscConfig+0x56a>
 8002ba6:	7ffb      	ldrb	r3, [r7, #31]
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d105      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x5a0>
 8002bac:	4b7a      	ldr	r3, [pc, #488]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002bae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb0:	4a79      	ldr	r2, [pc, #484]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002bb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f000 80fe 	beq.w	8002dbe <HAL_RCC_OscConfig+0x7a6>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	f040 80d0 	bne.w	8002d6c <HAL_RCC_OscConfig+0x754>
 8002bcc:	4b72      	ldr	r3, [pc, #456]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	617b      	str	r3, [r7, #20]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	f003 0203 	and.w	r2, r3, #3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bdc:	429a      	cmp	r2, r3
 8002bde:	d130      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bea:	3b01      	subs	r3, #1
 8002bec:	011b      	lsls	r3, r3, #4
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d127      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfc:	021b      	lsls	r3, r3, #8
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d11f      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002c0c:	2a07      	cmp	r2, #7
 8002c0e:	bf14      	ite	ne
 8002c10:	2201      	movne	r2, #1
 8002c12:	2200      	moveq	r2, #0
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d113      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	3b01      	subs	r3, #1
 8002c28:	055b      	lsls	r3, r3, #21
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d109      	bne.n	8002c42 <HAL_RCC_OscConfig+0x62a>
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c38:	085b      	lsrs	r3, r3, #1
 8002c3a:	3b01      	subs	r3, #1
 8002c3c:	065b      	lsls	r3, r3, #25
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d06e      	beq.n	8002d20 <HAL_RCC_OscConfig+0x708>
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	2b0c      	cmp	r3, #12
 8002c46:	d069      	beq.n	8002d1c <HAL_RCC_OscConfig+0x704>
 8002c48:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d105      	bne.n	8002c60 <HAL_RCC_OscConfig+0x648>
 8002c54:	4b50      	ldr	r3, [pc, #320]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d001      	beq.n	8002c64 <HAL_RCC_OscConfig+0x64c>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e0ad      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002c64:	4b4c      	ldr	r3, [pc, #304]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a4b      	ldr	r2, [pc, #300]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002c6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]
 8002c70:	f7ff f96a 	bl	8001f48 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x672>
 8002c78:	f7ff f966 	bl	8001f48 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x672>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e09a      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002c8a:	4b43      	ldr	r3, [pc, #268]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d1f0      	bne.n	8002c78 <HAL_RCC_OscConfig+0x660>
 8002c96:	4b40      	ldr	r3, [pc, #256]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002c98:	68da      	ldr	r2, [r3, #12]
 8002c9a:	4b40      	ldr	r3, [pc, #256]	@ (8002d9c <HAL_RCC_OscConfig+0x784>)
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002ca6:	3a01      	subs	r2, #1
 8002ca8:	0112      	lsls	r2, r2, #4
 8002caa:	4311      	orrs	r1, r2
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002cb0:	0212      	lsls	r2, r2, #8
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002cb8:	0852      	lsrs	r2, r2, #1
 8002cba:	3a01      	subs	r2, #1
 8002cbc:	0552      	lsls	r2, r2, #21
 8002cbe:	4311      	orrs	r1, r2
 8002cc0:	687a      	ldr	r2, [r7, #4]
 8002cc2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002cc4:	0852      	lsrs	r2, r2, #1
 8002cc6:	3a01      	subs	r2, #1
 8002cc8:	0652      	lsls	r2, r2, #25
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002cd0:	0912      	lsrs	r2, r2, #4
 8002cd2:	0452      	lsls	r2, r2, #17
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	4930      	ldr	r1, [pc, #192]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60cb      	str	r3, [r1, #12]
 8002cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002ce2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	4a2a      	ldr	r2, [pc, #168]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002cee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002cf2:	60d3      	str	r3, [r2, #12]
 8002cf4:	f7ff f928 	bl	8001f48 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]
 8002cfa:	e008      	b.n	8002d0e <HAL_RCC_OscConfig+0x6f6>
 8002cfc:	f7ff f924 	bl	8001f48 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d901      	bls.n	8002d0e <HAL_RCC_OscConfig+0x6f6>
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e058      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002d0e:	4b22      	ldr	r3, [pc, #136]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d0f0      	beq.n	8002cfc <HAL_RCC_OscConfig+0x6e4>
 8002d1a:	e050      	b.n	8002dbe <HAL_RCC_OscConfig+0x7a6>
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e04f      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002d20:	4b1d      	ldr	r3, [pc, #116]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d148      	bne.n	8002dbe <HAL_RCC_OscConfig+0x7a6>
 8002d2c:	4b1a      	ldr	r3, [pc, #104]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a19      	ldr	r2, [pc, #100]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002d32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d36:	6013      	str	r3, [r2, #0]
 8002d38:	4b17      	ldr	r3, [pc, #92]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4a16      	ldr	r2, [pc, #88]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002d3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d42:	60d3      	str	r3, [r2, #12]
 8002d44:	f7ff f900 	bl	8001f48 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x746>
 8002d4c:	f7ff f8fc 	bl	8001f48 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b02      	cmp	r3, #2
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x746>
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e030      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002d5e:	4b0e      	ldr	r3, [pc, #56]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0x734>
 8002d6a:	e028      	b.n	8002dbe <HAL_RCC_OscConfig+0x7a6>
 8002d6c:	69bb      	ldr	r3, [r7, #24]
 8002d6e:	2b0c      	cmp	r3, #12
 8002d70:	d023      	beq.n	8002dba <HAL_RCC_OscConfig+0x7a2>
 8002d72:	4b09      	ldr	r3, [pc, #36]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a08      	ldr	r2, [pc, #32]	@ (8002d98 <HAL_RCC_OscConfig+0x780>)
 8002d78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	f7ff f8e3 	bl	8001f48 <HAL_GetTick>
 8002d82:	6138      	str	r0, [r7, #16]
 8002d84:	e00c      	b.n	8002da0 <HAL_RCC_OscConfig+0x788>
 8002d86:	f7ff f8df 	bl	8001f48 <HAL_GetTick>
 8002d8a:	4602      	mov	r2, r0
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	1ad3      	subs	r3, r2, r3
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d905      	bls.n	8002da0 <HAL_RCC_OscConfig+0x788>
 8002d94:	2303      	movs	r3, #3
 8002d96:	e013      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	f99d808c 	.word	0xf99d808c
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <HAL_RCC_OscConfig+0x7b0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1ec      	bne.n	8002d86 <HAL_RCC_OscConfig+0x76e>
 8002dac:	4b06      	ldr	r3, [pc, #24]	@ (8002dc8 <HAL_RCC_OscConfig+0x7b0>)
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	4905      	ldr	r1, [pc, #20]	@ (8002dc8 <HAL_RCC_OscConfig+0x7b0>)
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <HAL_RCC_OscConfig+0x7b4>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	60cb      	str	r3, [r1, #12]
 8002db8:	e001      	b.n	8002dbe <HAL_RCC_OscConfig+0x7a6>
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e000      	b.n	8002dc0 <HAL_RCC_OscConfig+0x7a8>
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3720      	adds	r7, #32
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	feeefffc 	.word	0xfeeefffc

08002dd0 <HAL_RCC_ClockConfig>:
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b084      	sub	sp, #16
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
 8002dd8:	6039      	str	r1, [r7, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x14>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0e7      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
 8002de4:	4b75      	ldr	r3, [pc, #468]	@ (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0307 	and.w	r3, r3, #7
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d910      	bls.n	8002e14 <HAL_RCC_ClockConfig+0x44>
 8002df2:	4b72      	ldr	r3, [pc, #456]	@ (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f023 0207 	bic.w	r2, r3, #7
 8002dfa:	4970      	ldr	r1, [pc, #448]	@ (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	600b      	str	r3, [r1, #0]
 8002e02:	4b6e      	ldr	r3, [pc, #440]	@ (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0307 	and.w	r3, r3, #7
 8002e0a:	683a      	ldr	r2, [r7, #0]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCC_ClockConfig+0x44>
 8002e10:	2301      	movs	r3, #1
 8002e12:	e0cf      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d010      	beq.n	8002e42 <HAL_RCC_ClockConfig+0x72>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	4b66      	ldr	r3, [pc, #408]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d908      	bls.n	8002e42 <HAL_RCC_ClockConfig+0x72>
 8002e30:	4b63      	ldr	r3, [pc, #396]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4960      	ldr	r1, [pc, #384]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	608b      	str	r3, [r1, #8]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d04c      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0x118>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	2b03      	cmp	r3, #3
 8002e54:	d107      	bne.n	8002e66 <HAL_RCC_ClockConfig+0x96>
 8002e56:	4b5a      	ldr	r3, [pc, #360]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d121      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd6>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0a6      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	2b02      	cmp	r3, #2
 8002e6c:	d107      	bne.n	8002e7e <HAL_RCC_ClockConfig+0xae>
 8002e6e:	4b54      	ldr	r3, [pc, #336]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d115      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd6>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e09a      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d107      	bne.n	8002e96 <HAL_RCC_ClockConfig+0xc6>
 8002e86:	4b4e      	ldr	r3, [pc, #312]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0302 	and.w	r3, r3, #2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d109      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd6>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e08e      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
 8002e96:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xd6>
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e086      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
 8002ea6:	4b46      	ldr	r3, [pc, #280]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f023 0203 	bic.w	r2, r3, #3
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	4943      	ldr	r1, [pc, #268]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	608b      	str	r3, [r1, #8]
 8002eb8:	f7ff f846 	bl	8001f48 <HAL_GetTick>
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	e00a      	b.n	8002ed6 <HAL_RCC_ClockConfig+0x106>
 8002ec0:	f7ff f842 	bl	8001f48 <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_ClockConfig+0x106>
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e06e      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
 8002ed6:	4b3a      	ldr	r3, [pc, #232]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 020c 	and.w	r2, r3, #12
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d1eb      	bne.n	8002ec0 <HAL_RCC_ClockConfig+0xf0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x146>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	4b31      	ldr	r3, [pc, #196]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d208      	bcs.n	8002f16 <HAL_RCC_ClockConfig+0x146>
 8002f04:	4b2e      	ldr	r3, [pc, #184]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	492b      	ldr	r1, [pc, #172]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	608b      	str	r3, [r1, #8]
 8002f16:	4b29      	ldr	r3, [pc, #164]	@ (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	683a      	ldr	r2, [r7, #0]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d210      	bcs.n	8002f46 <HAL_RCC_ClockConfig+0x176>
 8002f24:	4b25      	ldr	r3, [pc, #148]	@ (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 0207 	bic.w	r2, r3, #7
 8002f2c:	4923      	ldr	r1, [pc, #140]	@ (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
 8002f34:	4b21      	ldr	r3, [pc, #132]	@ (8002fbc <HAL_RCC_ClockConfig+0x1ec>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d001      	beq.n	8002f46 <HAL_RCC_ClockConfig+0x176>
 8002f42:	2301      	movs	r3, #1
 8002f44:	e036      	b.n	8002fb4 <HAL_RCC_ClockConfig+0x1e4>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0304 	and.w	r3, r3, #4
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d008      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x194>
 8002f52:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	4918      	ldr	r1, [pc, #96]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	608b      	str	r3, [r1, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0308 	and.w	r3, r3, #8
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d009      	beq.n	8002f84 <HAL_RCC_ClockConfig+0x1b4>
 8002f70:	4b13      	ldr	r3, [pc, #76]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	00db      	lsls	r3, r3, #3
 8002f7e:	4910      	ldr	r1, [pc, #64]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	608b      	str	r3, [r1, #8]
 8002f84:	f000 f824 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc0 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 030f 	and.w	r3, r3, #15
 8002f94:	490b      	ldr	r1, [pc, #44]	@ (8002fc4 <HAL_RCC_ClockConfig+0x1f4>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa0:	4a09      	ldr	r2, [pc, #36]	@ (8002fc8 <HAL_RCC_ClockConfig+0x1f8>)
 8002fa2:	6013      	str	r3, [r2, #0]
 8002fa4:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <HAL_RCC_ClockConfig+0x1fc>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fe ff7d 	bl	8001ea8 <HAL_InitTick>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	72fb      	strb	r3, [r7, #11]
 8002fb2:	7afb      	ldrb	r3, [r7, #11]
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3710      	adds	r7, #16
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bd80      	pop	{r7, pc}
 8002fbc:	40022000 	.word	0x40022000
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	0800c528 	.word	0x0800c528
 8002fc8:	20000000 	.word	0x20000000
 8002fcc:	20000004 	.word	0x20000004

08002fd0 <HAL_RCC_GetSysClockFreq>:
 8002fd0:	b480      	push	{r7}
 8002fd2:	b089      	sub	sp, #36	@ 0x24
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	4b3e      	ldr	r3, [pc, #248]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fe0:	689b      	ldr	r3, [r3, #8]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	613b      	str	r3, [r7, #16]
 8002fe8:	4b3b      	ldr	r3, [pc, #236]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fea:	68db      	ldr	r3, [r3, #12]
 8002fec:	f003 0303 	and.w	r3, r3, #3
 8002ff0:	60fb      	str	r3, [r7, #12]
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	2b0c      	cmp	r3, #12
 8002ffc:	d121      	bne.n	8003042 <HAL_RCC_GetSysClockFreq+0x72>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d11e      	bne.n	8003042 <HAL_RCC_GetSysClockFreq+0x72>
 8003004:	4b34      	ldr	r3, [pc, #208]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0308 	and.w	r3, r3, #8
 800300c:	2b00      	cmp	r3, #0
 800300e:	d107      	bne.n	8003020 <HAL_RCC_GetSysClockFreq+0x50>
 8003010:	4b31      	ldr	r3, [pc, #196]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003012:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003016:	0a1b      	lsrs	r3, r3, #8
 8003018:	f003 030f 	and.w	r3, r3, #15
 800301c:	61fb      	str	r3, [r7, #28]
 800301e:	e005      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x5c>
 8003020:	4b2d      	ldr	r3, [pc, #180]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	091b      	lsrs	r3, r3, #4
 8003026:	f003 030f 	and.w	r3, r3, #15
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	4a2b      	ldr	r2, [pc, #172]	@ (80030dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d10d      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0x88>
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	61bb      	str	r3, [r7, #24]
 8003040:	e00a      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x88>
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b04      	cmp	r3, #4
 8003046:	d102      	bne.n	800304e <HAL_RCC_GetSysClockFreq+0x7e>
 8003048:	4b25      	ldr	r3, [pc, #148]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800304a:	61bb      	str	r3, [r7, #24]
 800304c:	e004      	b.n	8003058 <HAL_RCC_GetSysClockFreq+0x88>
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	2b08      	cmp	r3, #8
 8003052:	d101      	bne.n	8003058 <HAL_RCC_GetSysClockFreq+0x88>
 8003054:	4b23      	ldr	r3, [pc, #140]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	d134      	bne.n	80030c8 <HAL_RCC_GetSysClockFreq+0xf8>
 800305e:	4b1e      	ldr	r3, [pc, #120]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	60bb      	str	r3, [r7, #8]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b02      	cmp	r3, #2
 800306c:	d003      	beq.n	8003076 <HAL_RCC_GetSysClockFreq+0xa6>
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	2b03      	cmp	r3, #3
 8003072:	d003      	beq.n	800307c <HAL_RCC_GetSysClockFreq+0xac>
 8003074:	e005      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0xb2>
 8003076:	4b1a      	ldr	r3, [pc, #104]	@ (80030e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003078:	617b      	str	r3, [r7, #20]
 800307a:	e005      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0xb8>
 800307c:	4b19      	ldr	r3, [pc, #100]	@ (80030e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800307e:	617b      	str	r3, [r7, #20]
 8003080:	e002      	b.n	8003088 <HAL_RCC_GetSysClockFreq+0xb8>
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	617b      	str	r3, [r7, #20]
 8003086:	bf00      	nop
 8003088:	4b13      	ldr	r3, [pc, #76]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	091b      	lsrs	r3, r3, #4
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	3301      	adds	r3, #1
 8003094:	607b      	str	r3, [r7, #4]
 8003096:	4b10      	ldr	r3, [pc, #64]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80030a0:	697a      	ldr	r2, [r7, #20]
 80030a2:	fb03 f202 	mul.w	r2, r3, r2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	0e5b      	lsrs	r3, r3, #25
 80030b4:	f003 0303 	and.w	r3, r3, #3
 80030b8:	3301      	adds	r3, #1
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	697a      	ldr	r2, [r7, #20]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	4618      	mov	r0, r3
 80030cc:	3724      	adds	r7, #36	@ 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000
 80030dc:	0800c540 	.word	0x0800c540
 80030e0:	00f42400 	.word	0x00f42400
 80030e4:	007a1200 	.word	0x007a1200

080030e8 <HAL_RCC_GetHCLKFreq>:
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	4b03      	ldr	r3, [pc, #12]	@ (80030fc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	46bd      	mov	sp, r7
 80030f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000000 	.word	0x20000000

08003100 <HAL_RCC_GetPCLK1Freq>:
 8003100:	b580      	push	{r7, lr}
 8003102:	af00      	add	r7, sp, #0
 8003104:	f7ff fff0 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003108:	4602      	mov	r2, r0
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_RCC_GetPCLK1Freq+0x24>)
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	0a1b      	lsrs	r3, r3, #8
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	4904      	ldr	r1, [pc, #16]	@ (8003128 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003116:	5ccb      	ldrb	r3, [r1, r3]
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	4618      	mov	r0, r3
 8003122:	bd80      	pop	{r7, pc}
 8003124:	40021000 	.word	0x40021000
 8003128:	0800c538 	.word	0x0800c538

0800312c <HAL_RCC_GetPCLK2Freq>:
 800312c:	b580      	push	{r7, lr}
 800312e:	af00      	add	r7, sp, #0
 8003130:	f7ff ffda 	bl	80030e8 <HAL_RCC_GetHCLKFreq>
 8003134:	4602      	mov	r2, r0
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	0adb      	lsrs	r3, r3, #11
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	4904      	ldr	r1, [pc, #16]	@ (8003154 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003142:	5ccb      	ldrb	r3, [r1, r3]
 8003144:	f003 031f 	and.w	r3, r3, #31
 8003148:	fa22 f303 	lsr.w	r3, r2, r3
 800314c:	4618      	mov	r0, r3
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40021000 	.word	0x40021000
 8003154:	0800c538 	.word	0x0800c538

08003158 <RCC_SetFlashLatencyFromMSIRange>:
 8003158:	b580      	push	{r7, lr}
 800315a:	b086      	sub	sp, #24
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
 8003160:	2300      	movs	r3, #0
 8003162:	613b      	str	r3, [r7, #16]
 8003164:	4b2a      	ldr	r3, [pc, #168]	@ (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003166:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003168:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d003      	beq.n	8003178 <RCC_SetFlashLatencyFromMSIRange+0x20>
 8003170:	f7ff f9ee 	bl	8002550 <HAL_PWREx_GetVoltageRange>
 8003174:	6178      	str	r0, [r7, #20]
 8003176:	e014      	b.n	80031a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
 8003178:	4b25      	ldr	r3, [pc, #148]	@ (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	4a24      	ldr	r2, [pc, #144]	@ (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003182:	6593      	str	r3, [r2, #88]	@ 0x58
 8003184:	4b22      	ldr	r3, [pc, #136]	@ (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003188:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	f7ff f9de 	bl	8002550 <HAL_PWREx_GetVoltageRange>
 8003194:	6178      	str	r0, [r7, #20]
 8003196:	4b1e      	ldr	r3, [pc, #120]	@ (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003198:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319a:	4a1d      	ldr	r2, [pc, #116]	@ (8003210 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	6593      	str	r3, [r2, #88]	@ 0x58
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031a8:	d10b      	bne.n	80031c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b80      	cmp	r3, #128	@ 0x80
 80031ae:	d919      	bls.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80031b4:	d902      	bls.n	80031bc <RCC_SetFlashLatencyFromMSIRange+0x64>
 80031b6:	2302      	movs	r3, #2
 80031b8:	613b      	str	r3, [r7, #16]
 80031ba:	e013      	b.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80031bc:	2301      	movs	r3, #1
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	e010      	b.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b80      	cmp	r3, #128	@ 0x80
 80031c6:	d902      	bls.n	80031ce <RCC_SetFlashLatencyFromMSIRange+0x76>
 80031c8:	2303      	movs	r3, #3
 80031ca:	613b      	str	r3, [r7, #16]
 80031cc:	e00a      	b.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b80      	cmp	r3, #128	@ 0x80
 80031d2:	d102      	bne.n	80031da <RCC_SetFlashLatencyFromMSIRange+0x82>
 80031d4:	2302      	movs	r3, #2
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	e004      	b.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2b70      	cmp	r3, #112	@ 0x70
 80031de:	d101      	bne.n	80031e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
 80031e0:	2301      	movs	r3, #1
 80031e2:	613b      	str	r3, [r7, #16]
 80031e4:	4b0b      	ldr	r3, [pc, #44]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f023 0207 	bic.w	r2, r3, #7
 80031ec:	4909      	ldr	r1, [pc, #36]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	600b      	str	r3, [r1, #0]
 80031f4:	4b07      	ldr	r3, [pc, #28]	@ (8003214 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d001      	beq.n	8003206 <RCC_SetFlashLatencyFromMSIRange+0xae>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <RCC_SetFlashLatencyFromMSIRange+0xb0>
 8003206:	2300      	movs	r3, #0
 8003208:	4618      	mov	r0, r3
 800320a:	3718      	adds	r7, #24
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}
 8003210:	40021000 	.word	0x40021000
 8003214:	40022000 	.word	0x40022000

08003218 <HAL_RCCEx_PeriphCLKConfig>:
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	2300      	movs	r3, #0
 8003222:	74fb      	strb	r3, [r7, #19]
 8003224:	2300      	movs	r3, #0
 8003226:	74bb      	strb	r3, [r7, #18]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003230:	2b00      	cmp	r3, #0
 8003232:	d041      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003238:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800323c:	d02a      	beq.n	8003294 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800323e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003242:	d824      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003244:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003248:	d008      	beq.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800324a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800324e:	d81e      	bhi.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003254:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003258:	d010      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800325a:	e018      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800325c:	4b86      	ldr	r3, [pc, #536]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	4a85      	ldr	r2, [pc, #532]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003266:	60d3      	str	r3, [r2, #12]
 8003268:	e015      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	2100      	movs	r1, #0
 8003270:	4618      	mov	r0, r3
 8003272:	f000 fabb 	bl	80037ec <RCCEx_PLLSAI1_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	74fb      	strb	r3, [r7, #19]
 800327a:	e00c      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	3320      	adds	r3, #32
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f000 fba6 	bl	80039d4 <RCCEx_PLLSAI2_Config>
 8003288:	4603      	mov	r3, r0
 800328a:	74fb      	strb	r3, [r7, #19]
 800328c:	e003      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 800328e:	2301      	movs	r3, #1
 8003290:	74fb      	strb	r3, [r7, #19]
 8003292:	e000      	b.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x7e>
 8003294:	bf00      	nop
 8003296:	7cfb      	ldrb	r3, [r7, #19]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d10b      	bne.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
 800329c:	4b76      	ldr	r3, [pc, #472]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800329e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032aa:	4973      	ldr	r1, [pc, #460]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ac:	4313      	orrs	r3, r2
 80032ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80032b2:	e001      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 80032b4:	7cfb      	ldrb	r3, [r7, #19]
 80032b6:	74bb      	strb	r3, [r7, #18]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d041      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x130>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80032c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032cc:	d02a      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80032ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80032d2:	d824      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032d8:	d008      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032de:	d81e      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80032e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032e8:	d010      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80032ea:	e018      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80032ec:	4b62      	ldr	r3, [pc, #392]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ee:	68db      	ldr	r3, [r3, #12]
 80032f0:	4a61      	ldr	r2, [pc, #388]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032f6:	60d3      	str	r3, [r2, #12]
 80032f8:	e015      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	3304      	adds	r3, #4
 80032fe:	2100      	movs	r1, #0
 8003300:	4618      	mov	r0, r3
 8003302:	f000 fa73 	bl	80037ec <RCCEx_PLLSAI1_Config>
 8003306:	4603      	mov	r3, r0
 8003308:	74fb      	strb	r3, [r7, #19]
 800330a:	e00c      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	3320      	adds	r3, #32
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fb5e 	bl	80039d4 <RCCEx_PLLSAI2_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	74fb      	strb	r3, [r7, #19]
 800331c:	e003      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 800331e:	2301      	movs	r3, #1
 8003320:	74fb      	strb	r3, [r7, #19]
 8003322:	e000      	b.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x10e>
 8003324:	bf00      	nop
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10b      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x12c>
 800332c:	4b52      	ldr	r3, [pc, #328]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800333a:	494f      	ldr	r1, [pc, #316]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	4313      	orrs	r3, r2
 800333e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003342:	e001      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8003344:	7cfb      	ldrb	r3, [r7, #19]
 8003346:	74bb      	strb	r3, [r7, #18]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003350:	2b00      	cmp	r3, #0
 8003352:	f000 80a0 	beq.w	8003496 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8003356:	2300      	movs	r3, #0
 8003358:	747b      	strb	r3, [r7, #17]
 800335a:	4b47      	ldr	r3, [pc, #284]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800336a:	2300      	movs	r3, #0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00d      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x174>
 8003370:	4b41      	ldr	r3, [pc, #260]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	4a40      	ldr	r2, [pc, #256]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003376:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800337a:	6593      	str	r3, [r2, #88]	@ 0x58
 800337c:	4b3e      	ldr	r3, [pc, #248]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800337e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003380:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2301      	movs	r3, #1
 800338a:	747b      	strb	r3, [r7, #17]
 800338c:	4b3b      	ldr	r3, [pc, #236]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a3a      	ldr	r2, [pc, #232]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003392:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	f7fe fdd6 	bl	8001f48 <HAL_GetTick>
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	e009      	b.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80033a0:	f7fe fdd2 	bl	8001f48 <HAL_GetTick>
 80033a4:	4602      	mov	r2, r0
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	1ad3      	subs	r3, r2, r3
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	d902      	bls.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80033ae:	2303      	movs	r3, #3
 80033b0:	74fb      	strb	r3, [r7, #19]
 80033b2:	e005      	b.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80033b4:	4b31      	ldr	r3, [pc, #196]	@ (800347c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0ef      	beq.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80033c0:	7cfb      	ldrb	r3, [r7, #19]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d15c      	bne.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x268>
 80033c6:	4b2c      	ldr	r3, [pc, #176]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033d0:	617b      	str	r3, [r7, #20]
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01f      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80033de:	697a      	ldr	r2, [r7, #20]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d019      	beq.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80033e4:	4b24      	ldr	r3, [pc, #144]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	4b21      	ldr	r3, [pc, #132]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80033f6:	4a20      	ldr	r2, [pc, #128]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003400:	4b1d      	ldr	r3, [pc, #116]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003402:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003406:	4a1c      	ldr	r2, [pc, #112]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800340c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003410:	4a19      	ldr	r2, [pc, #100]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f003 0301 	and.w	r3, r3, #1
 800341e:	2b00      	cmp	r3, #0
 8003420:	d016      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003422:	f7fe fd91 	bl	8001f48 <HAL_GetTick>
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	e00b      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800342a:	f7fe fd8d 	bl	8001f48 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003438:	4293      	cmp	r3, r2
 800343a:	d902      	bls.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800343c:	2303      	movs	r3, #3
 800343e:	74fb      	strb	r3, [r7, #19]
 8003440:	e006      	b.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003442:	4b0d      	ldr	r3, [pc, #52]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003444:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d0ec      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x212>
 8003450:	7cfb      	ldrb	r3, [r7, #19]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10c      	bne.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x258>
 8003456:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003458:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003466:	4904      	ldr	r1, [pc, #16]	@ (8003478 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003468:	4313      	orrs	r3, r2
 800346a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800346e:	e009      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003470:	7cfb      	ldrb	r3, [r7, #19]
 8003472:	74bb      	strb	r3, [r7, #18]
 8003474:	e006      	b.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003476:	bf00      	nop
 8003478:	40021000 	.word	0x40021000
 800347c:	40007000 	.word	0x40007000
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	74bb      	strb	r3, [r7, #18]
 8003484:	7c7b      	ldrb	r3, [r7, #17]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d105      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800348a:	4b9e      	ldr	r3, [pc, #632]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800348e:	4a9d      	ldr	r2, [pc, #628]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003490:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003494:	6593      	str	r3, [r2, #88]	@ 0x58
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d00a      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
 80034a2:	4b98      	ldr	r3, [pc, #608]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034a8:	f023 0203 	bic.w	r2, r3, #3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034b0:	4994      	ldr	r1, [pc, #592]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00a      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
 80034c4:	4b8f      	ldr	r3, [pc, #572]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ca:	f023 020c 	bic.w	r2, r3, #12
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034d2:	498c      	ldr	r1, [pc, #560]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0304 	and.w	r3, r3, #4
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00a      	beq.n	80034fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
 80034e6:	4b87      	ldr	r3, [pc, #540]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034f4:	4983      	ldr	r1, [pc, #524]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	4313      	orrs	r3, r2
 80034f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00a      	beq.n	800351e <HAL_RCCEx_PeriphCLKConfig+0x306>
 8003508:	4b7e      	ldr	r3, [pc, #504]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800350a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800350e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003516:	497b      	ldr	r1, [pc, #492]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003518:	4313      	orrs	r3, r2
 800351a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00a      	beq.n	8003540 <HAL_RCCEx_PeriphCLKConfig+0x328>
 800352a:	4b76      	ldr	r3, [pc, #472]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800352c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003530:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003538:	4972      	ldr	r1, [pc, #456]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800354c:	4b6d      	ldr	r3, [pc, #436]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003552:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800355a:	496a      	ldr	r1, [pc, #424]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00a      	beq.n	8003584 <HAL_RCCEx_PeriphCLKConfig+0x36c>
 800356e:	4b65      	ldr	r3, [pc, #404]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003574:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800357c:	4961      	ldr	r1, [pc, #388]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
 8003590:	4b5c      	ldr	r3, [pc, #368]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003596:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800359e:	4959      	ldr	r1, [pc, #356]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00a      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 80035b2:	4b54      	ldr	r3, [pc, #336]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035c0:	4950      	ldr	r1, [pc, #320]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d00a      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 80035d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e2:	4948      	ldr	r1, [pc, #288]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	4313      	orrs	r3, r2
 80035e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
 80035f6:	4b43      	ldr	r3, [pc, #268]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	493f      	ldr	r1, [pc, #252]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003614:	2b00      	cmp	r3, #0
 8003616:	d028      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003618:	4b3a      	ldr	r3, [pc, #232]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003626:	4937      	ldr	r1, [pc, #220]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003632:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003636:	d106      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8003638:	4b32      	ldr	r3, [pc, #200]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	4a31      	ldr	r2, [pc, #196]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003642:	60d3      	str	r3, [r2, #12]
 8003644:	e011      	b.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800364a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800364e:	d10c      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	2101      	movs	r1, #1
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f8c8 	bl	80037ec <RCCEx_PLLSAI1_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	74fb      	strb	r3, [r7, #19]
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d001      	beq.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x452>
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	74bb      	strb	r3, [r7, #18]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d028      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003676:	4b23      	ldr	r3, [pc, #140]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003678:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800367c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003684:	491f      	ldr	r1, [pc, #124]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	4313      	orrs	r3, r2
 8003688:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003690:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003694:	d106      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003696:	4b1b      	ldr	r3, [pc, #108]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	4a1a      	ldr	r2, [pc, #104]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800369c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036a0:	60d3      	str	r3, [r2, #12]
 80036a2:	e011      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036ac:	d10c      	bne.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	3304      	adds	r3, #4
 80036b2:	2101      	movs	r1, #1
 80036b4:	4618      	mov	r0, r3
 80036b6:	f000 f899 	bl	80037ec <RCCEx_PLLSAI1_Config>
 80036ba:	4603      	mov	r3, r0
 80036bc:	74fb      	strb	r3, [r7, #19]
 80036be:	7cfb      	ldrb	r3, [r7, #19]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d001      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 80036c4:	7cfb      	ldrb	r3, [r7, #19]
 80036c6:	74bb      	strb	r3, [r7, #18]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d02b      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x514>
 80036d4:	4b0b      	ldr	r3, [pc, #44]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036e2:	4908      	ldr	r1, [pc, #32]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80036f2:	d109      	bne.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80036f4:	4b03      	ldr	r3, [pc, #12]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	4a02      	ldr	r2, [pc, #8]	@ (8003704 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80036fe:	60d3      	str	r3, [r2, #12]
 8003700:	e014      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003702:	bf00      	nop
 8003704:	40021000 	.word	0x40021000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800370c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003710:	d10c      	bne.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	3304      	adds	r3, #4
 8003716:	2101      	movs	r1, #1
 8003718:	4618      	mov	r0, r3
 800371a:	f000 f867 	bl	80037ec <RCCEx_PLLSAI1_Config>
 800371e:	4603      	mov	r3, r0
 8003720:	74fb      	strb	r3, [r7, #19]
 8003722:	7cfb      	ldrb	r3, [r7, #19]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d001      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003728:	7cfb      	ldrb	r3, [r7, #19]
 800372a:	74bb      	strb	r3, [r7, #18]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d02f      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003738:	4b2b      	ldr	r3, [pc, #172]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800373a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800373e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003746:	4928      	ldr	r1, [pc, #160]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003748:	4313      	orrs	r3, r2
 800374a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003752:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003756:	d10d      	bne.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x55c>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3304      	adds	r3, #4
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f844 	bl	80037ec <RCCEx_PLLSAI1_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	74fb      	strb	r3, [r7, #19]
 8003768:	7cfb      	ldrb	r3, [r7, #19]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d014      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800376e:	7cfb      	ldrb	r3, [r7, #19]
 8003770:	74bb      	strb	r3, [r7, #18]
 8003772:	e011      	b.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003778:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800377c:	d10c      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	3320      	adds	r3, #32
 8003782:	2102      	movs	r1, #2
 8003784:	4618      	mov	r0, r3
 8003786:	f000 f925 	bl	80039d4 <RCCEx_PLLSAI2_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	74fb      	strb	r3, [r7, #19]
 800378e:	7cfb      	ldrb	r3, [r7, #19]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d001      	beq.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x580>
 8003794:	7cfb      	ldrb	r3, [r7, #19]
 8003796:	74bb      	strb	r3, [r7, #18]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80037a4:	4b10      	ldr	r3, [pc, #64]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037aa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80037b2:	490d      	ldr	r1, [pc, #52]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
 80037c6:	4b08      	ldr	r3, [pc, #32]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80037d6:	4904      	ldr	r1, [pc, #16]	@ (80037e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80037de:	7cbb      	ldrb	r3, [r7, #18]
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	40021000 	.word	0x40021000

080037ec <RCCEx_PLLSAI1_Config>:
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	6039      	str	r1, [r7, #0]
 80037f6:	2300      	movs	r3, #0
 80037f8:	73fb      	strb	r3, [r7, #15]
 80037fa:	4b75      	ldr	r3, [pc, #468]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	f003 0303 	and.w	r3, r3, #3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <RCCEx_PLLSAI1_Config+0x4c>
 8003806:	4b72      	ldr	r3, [pc, #456]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	f003 0203 	and.w	r2, r3, #3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	429a      	cmp	r2, r3
 8003814:	d10d      	bne.n	8003832 <RCCEx_PLLSAI1_Config+0x46>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <RCCEx_PLLSAI1_Config+0x46>
 800381e:	4b6c      	ldr	r3, [pc, #432]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 0307 	and.w	r3, r3, #7
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	429a      	cmp	r2, r3
 8003830:	d047      	beq.n	80038c2 <RCCEx_PLLSAI1_Config+0xd6>
 8003832:	2301      	movs	r3, #1
 8003834:	73fb      	strb	r3, [r7, #15]
 8003836:	e044      	b.n	80038c2 <RCCEx_PLLSAI1_Config+0xd6>
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2b03      	cmp	r3, #3
 800383e:	d018      	beq.n	8003872 <RCCEx_PLLSAI1_Config+0x86>
 8003840:	2b03      	cmp	r3, #3
 8003842:	d825      	bhi.n	8003890 <RCCEx_PLLSAI1_Config+0xa4>
 8003844:	2b01      	cmp	r3, #1
 8003846:	d002      	beq.n	800384e <RCCEx_PLLSAI1_Config+0x62>
 8003848:	2b02      	cmp	r3, #2
 800384a:	d009      	beq.n	8003860 <RCCEx_PLLSAI1_Config+0x74>
 800384c:	e020      	b.n	8003890 <RCCEx_PLLSAI1_Config+0xa4>
 800384e:	4b60      	ldr	r3, [pc, #384]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d11d      	bne.n	8003896 <RCCEx_PLLSAI1_Config+0xaa>
 800385a:	2301      	movs	r3, #1
 800385c:	73fb      	strb	r3, [r7, #15]
 800385e:	e01a      	b.n	8003896 <RCCEx_PLLSAI1_Config+0xaa>
 8003860:	4b5b      	ldr	r3, [pc, #364]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003868:	2b00      	cmp	r3, #0
 800386a:	d116      	bne.n	800389a <RCCEx_PLLSAI1_Config+0xae>
 800386c:	2301      	movs	r3, #1
 800386e:	73fb      	strb	r3, [r7, #15]
 8003870:	e013      	b.n	800389a <RCCEx_PLLSAI1_Config+0xae>
 8003872:	4b57      	ldr	r3, [pc, #348]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800387a:	2b00      	cmp	r3, #0
 800387c:	d10f      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xb2>
 800387e:	4b54      	ldr	r3, [pc, #336]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003886:	2b00      	cmp	r3, #0
 8003888:	d109      	bne.n	800389e <RCCEx_PLLSAI1_Config+0xb2>
 800388a:	2301      	movs	r3, #1
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	e006      	b.n	800389e <RCCEx_PLLSAI1_Config+0xb2>
 8003890:	2301      	movs	r3, #1
 8003892:	73fb      	strb	r3, [r7, #15]
 8003894:	e004      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0xb4>
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0xb4>
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <RCCEx_PLLSAI1_Config+0xb4>
 800389e:	bf00      	nop
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d10d      	bne.n	80038c2 <RCCEx_PLLSAI1_Config+0xd6>
 80038a6:	4b4a      	ldr	r3, [pc, #296]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6819      	ldr	r1, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	430b      	orrs	r3, r1
 80038bc:	4944      	ldr	r1, [pc, #272]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038be:	4313      	orrs	r3, r2
 80038c0:	60cb      	str	r3, [r1, #12]
 80038c2:	7bfb      	ldrb	r3, [r7, #15]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d17d      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0x1d8>
 80038c8:	4b41      	ldr	r3, [pc, #260]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a40      	ldr	r2, [pc, #256]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	f7fe fb38 	bl	8001f48 <HAL_GetTick>
 80038d8:	60b8      	str	r0, [r7, #8]
 80038da:	e009      	b.n	80038f0 <RCCEx_PLLSAI1_Config+0x104>
 80038dc:	f7fe fb34 	bl	8001f48 <HAL_GetTick>
 80038e0:	4602      	mov	r2, r0
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	1ad3      	subs	r3, r2, r3
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d902      	bls.n	80038f0 <RCCEx_PLLSAI1_Config+0x104>
 80038ea:	2303      	movs	r3, #3
 80038ec:	73fb      	strb	r3, [r7, #15]
 80038ee:	e005      	b.n	80038fc <RCCEx_PLLSAI1_Config+0x110>
 80038f0:	4b37      	ldr	r3, [pc, #220]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1ef      	bne.n	80038dc <RCCEx_PLLSAI1_Config+0xf0>
 80038fc:	7bfb      	ldrb	r3, [r7, #15]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d160      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0x1d8>
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d111      	bne.n	800392c <RCCEx_PLLSAI1_Config+0x140>
 8003908:	4b31      	ldr	r3, [pc, #196]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003910:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	6892      	ldr	r2, [r2, #8]
 8003918:	0211      	lsls	r1, r2, #8
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	68d2      	ldr	r2, [r2, #12]
 800391e:	0912      	lsrs	r2, r2, #4
 8003920:	0452      	lsls	r2, r2, #17
 8003922:	430a      	orrs	r2, r1
 8003924:	492a      	ldr	r1, [pc, #168]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003926:	4313      	orrs	r3, r2
 8003928:	610b      	str	r3, [r1, #16]
 800392a:	e027      	b.n	800397c <RCCEx_PLLSAI1_Config+0x190>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b01      	cmp	r3, #1
 8003930:	d112      	bne.n	8003958 <RCCEx_PLLSAI1_Config+0x16c>
 8003932:	4b27      	ldr	r3, [pc, #156]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800393a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6892      	ldr	r2, [r2, #8]
 8003942:	0211      	lsls	r1, r2, #8
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	6912      	ldr	r2, [r2, #16]
 8003948:	0852      	lsrs	r2, r2, #1
 800394a:	3a01      	subs	r2, #1
 800394c:	0552      	lsls	r2, r2, #21
 800394e:	430a      	orrs	r2, r1
 8003950:	491f      	ldr	r1, [pc, #124]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003952:	4313      	orrs	r3, r2
 8003954:	610b      	str	r3, [r1, #16]
 8003956:	e011      	b.n	800397c <RCCEx_PLLSAI1_Config+0x190>
 8003958:	4b1d      	ldr	r3, [pc, #116]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003960:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	6892      	ldr	r2, [r2, #8]
 8003968:	0211      	lsls	r1, r2, #8
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	6952      	ldr	r2, [r2, #20]
 800396e:	0852      	lsrs	r2, r2, #1
 8003970:	3a01      	subs	r2, #1
 8003972:	0652      	lsls	r2, r2, #25
 8003974:	430a      	orrs	r2, r1
 8003976:	4916      	ldr	r1, [pc, #88]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	610b      	str	r3, [r1, #16]
 800397c:	4b14      	ldr	r3, [pc, #80]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a13      	ldr	r2, [pc, #76]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003982:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	f7fe fade 	bl	8001f48 <HAL_GetTick>
 800398c:	60b8      	str	r0, [r7, #8]
 800398e:	e009      	b.n	80039a4 <RCCEx_PLLSAI1_Config+0x1b8>
 8003990:	f7fe fada 	bl	8001f48 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d902      	bls.n	80039a4 <RCCEx_PLLSAI1_Config+0x1b8>
 800399e:	2303      	movs	r3, #3
 80039a0:	73fb      	strb	r3, [r7, #15]
 80039a2:	e005      	b.n	80039b0 <RCCEx_PLLSAI1_Config+0x1c4>
 80039a4:	4b0a      	ldr	r3, [pc, #40]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d0ef      	beq.n	8003990 <RCCEx_PLLSAI1_Config+0x1a4>
 80039b0:	7bfb      	ldrb	r3, [r7, #15]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <RCCEx_PLLSAI1_Config+0x1d8>
 80039b6:	4b06      	ldr	r3, [pc, #24]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039b8:	691a      	ldr	r2, [r3, #16]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	4904      	ldr	r1, [pc, #16]	@ (80039d0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	610b      	str	r3, [r1, #16]
 80039c4:	7bfb      	ldrb	r3, [r7, #15]
 80039c6:	4618      	mov	r0, r3
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	40021000 	.word	0x40021000

080039d4 <RCCEx_PLLSAI2_Config>:
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
 80039de:	2300      	movs	r3, #0
 80039e0:	73fb      	strb	r3, [r7, #15]
 80039e2:	4b6a      	ldr	r3, [pc, #424]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	f003 0303 	and.w	r3, r3, #3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d018      	beq.n	8003a20 <RCCEx_PLLSAI2_Config+0x4c>
 80039ee:	4b67      	ldr	r3, [pc, #412]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0203 	and.w	r2, r3, #3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d10d      	bne.n	8003a1a <RCCEx_PLLSAI2_Config+0x46>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d009      	beq.n	8003a1a <RCCEx_PLLSAI2_Config+0x46>
 8003a06:	4b61      	ldr	r3, [pc, #388]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	091b      	lsrs	r3, r3, #4
 8003a0c:	f003 0307 	and.w	r3, r3, #7
 8003a10:	1c5a      	adds	r2, r3, #1
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d047      	beq.n	8003aaa <RCCEx_PLLSAI2_Config+0xd6>
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
 8003a1e:	e044      	b.n	8003aaa <RCCEx_PLLSAI2_Config+0xd6>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	2b03      	cmp	r3, #3
 8003a26:	d018      	beq.n	8003a5a <RCCEx_PLLSAI2_Config+0x86>
 8003a28:	2b03      	cmp	r3, #3
 8003a2a:	d825      	bhi.n	8003a78 <RCCEx_PLLSAI2_Config+0xa4>
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d002      	beq.n	8003a36 <RCCEx_PLLSAI2_Config+0x62>
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d009      	beq.n	8003a48 <RCCEx_PLLSAI2_Config+0x74>
 8003a34:	e020      	b.n	8003a78 <RCCEx_PLLSAI2_Config+0xa4>
 8003a36:	4b55      	ldr	r3, [pc, #340]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d11d      	bne.n	8003a7e <RCCEx_PLLSAI2_Config+0xaa>
 8003a42:	2301      	movs	r3, #1
 8003a44:	73fb      	strb	r3, [r7, #15]
 8003a46:	e01a      	b.n	8003a7e <RCCEx_PLLSAI2_Config+0xaa>
 8003a48:	4b50      	ldr	r3, [pc, #320]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d116      	bne.n	8003a82 <RCCEx_PLLSAI2_Config+0xae>
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	e013      	b.n	8003a82 <RCCEx_PLLSAI2_Config+0xae>
 8003a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10f      	bne.n	8003a86 <RCCEx_PLLSAI2_Config+0xb2>
 8003a66:	4b49      	ldr	r3, [pc, #292]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <RCCEx_PLLSAI2_Config+0xb2>
 8003a72:	2301      	movs	r3, #1
 8003a74:	73fb      	strb	r3, [r7, #15]
 8003a76:	e006      	b.n	8003a86 <RCCEx_PLLSAI2_Config+0xb2>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	73fb      	strb	r3, [r7, #15]
 8003a7c:	e004      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0xb4>
 8003a7e:	bf00      	nop
 8003a80:	e002      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0xb4>
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <RCCEx_PLLSAI2_Config+0xb4>
 8003a86:	bf00      	nop
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d10d      	bne.n	8003aaa <RCCEx_PLLSAI2_Config+0xd6>
 8003a8e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6819      	ldr	r1, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	011b      	lsls	r3, r3, #4
 8003aa2:	430b      	orrs	r3, r1
 8003aa4:	4939      	ldr	r1, [pc, #228]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003aa6:	4313      	orrs	r3, r2
 8003aa8:	60cb      	str	r3, [r1, #12]
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d167      	bne.n	8003b80 <RCCEx_PLLSAI2_Config+0x1ac>
 8003ab0:	4b36      	ldr	r3, [pc, #216]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a35      	ldr	r2, [pc, #212]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ab6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	6013      	str	r3, [r2, #0]
 8003abc:	f7fe fa44 	bl	8001f48 <HAL_GetTick>
 8003ac0:	60b8      	str	r0, [r7, #8]
 8003ac2:	e009      	b.n	8003ad8 <RCCEx_PLLSAI2_Config+0x104>
 8003ac4:	f7fe fa40 	bl	8001f48 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d902      	bls.n	8003ad8 <RCCEx_PLLSAI2_Config+0x104>
 8003ad2:	2303      	movs	r3, #3
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	e005      	b.n	8003ae4 <RCCEx_PLLSAI2_Config+0x110>
 8003ad8:	4b2c      	ldr	r3, [pc, #176]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1ef      	bne.n	8003ac4 <RCCEx_PLLSAI2_Config+0xf0>
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d14a      	bne.n	8003b80 <RCCEx_PLLSAI2_Config+0x1ac>
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d111      	bne.n	8003b14 <RCCEx_PLLSAI2_Config+0x140>
 8003af0:	4b26      	ldr	r3, [pc, #152]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003af2:	695b      	ldr	r3, [r3, #20]
 8003af4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003af8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6892      	ldr	r2, [r2, #8]
 8003b00:	0211      	lsls	r1, r2, #8
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	68d2      	ldr	r2, [r2, #12]
 8003b06:	0912      	lsrs	r2, r2, #4
 8003b08:	0452      	lsls	r2, r2, #17
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	491f      	ldr	r1, [pc, #124]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	614b      	str	r3, [r1, #20]
 8003b12:	e011      	b.n	8003b38 <RCCEx_PLLSAI2_Config+0x164>
 8003b14:	4b1d      	ldr	r3, [pc, #116]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6892      	ldr	r2, [r2, #8]
 8003b24:	0211      	lsls	r1, r2, #8
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	6912      	ldr	r2, [r2, #16]
 8003b2a:	0852      	lsrs	r2, r2, #1
 8003b2c:	3a01      	subs	r2, #1
 8003b2e:	0652      	lsls	r2, r2, #25
 8003b30:	430a      	orrs	r2, r1
 8003b32:	4916      	ldr	r1, [pc, #88]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b34:	4313      	orrs	r3, r2
 8003b36:	614b      	str	r3, [r1, #20]
 8003b38:	4b14      	ldr	r3, [pc, #80]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a13      	ldr	r2, [pc, #76]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	6013      	str	r3, [r2, #0]
 8003b44:	f7fe fa00 	bl	8001f48 <HAL_GetTick>
 8003b48:	60b8      	str	r0, [r7, #8]
 8003b4a:	e009      	b.n	8003b60 <RCCEx_PLLSAI2_Config+0x18c>
 8003b4c:	f7fe f9fc 	bl	8001f48 <HAL_GetTick>
 8003b50:	4602      	mov	r2, r0
 8003b52:	68bb      	ldr	r3, [r7, #8]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	2b02      	cmp	r3, #2
 8003b58:	d902      	bls.n	8003b60 <RCCEx_PLLSAI2_Config+0x18c>
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	73fb      	strb	r3, [r7, #15]
 8003b5e:	e005      	b.n	8003b6c <RCCEx_PLLSAI2_Config+0x198>
 8003b60:	4b0a      	ldr	r3, [pc, #40]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0ef      	beq.n	8003b4c <RCCEx_PLLSAI2_Config+0x178>
 8003b6c:	7bfb      	ldrb	r3, [r7, #15]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <RCCEx_PLLSAI2_Config+0x1ac>
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	4904      	ldr	r1, [pc, #16]	@ (8003b8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	614b      	str	r3, [r1, #20]
 8003b80:	7bfb      	ldrb	r3, [r7, #15]
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40021000 	.word	0x40021000

08003b90 <HAL_RTC_Init>:
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b084      	sub	sp, #16
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	2301      	movs	r3, #1
 8003b9a:	73fb      	strb	r3, [r7, #15]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d079      	beq.n	8003c96 <HAL_RTC_Init+0x106>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d106      	bne.n	8003bbc <HAL_RTC_Init+0x2c>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2020 	strb.w	r2, [r3, #32]
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7fd ff02 	bl	80019c0 <HAL_RTC_MspInit>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2202      	movs	r2, #2
 8003bc0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	f003 0310 	and.w	r3, r3, #16
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d058      	beq.n	8003c84 <HAL_RTC_Init+0xf4>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	22ca      	movs	r2, #202	@ 0xca
 8003bd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2253      	movs	r2, #83	@ 0x53
 8003be0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 fa4e 	bl	8004084 <RTC_EnterInitMode>
 8003be8:	4603      	mov	r3, r0
 8003bea:	73fb      	strb	r3, [r7, #15]
 8003bec:	7bfb      	ldrb	r3, [r7, #15]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d127      	bne.n	8003c42 <HAL_RTC_Init+0xb2>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003c00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c04:	6093      	str	r3, [r2, #8]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6899      	ldr	r1, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	431a      	orrs	r2, r3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	430a      	orrs	r2, r1
 8003c22:	609a      	str	r2, [r3, #8]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	68d2      	ldr	r2, [r2, #12]
 8003c2c:	611a      	str	r2, [r3, #16]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	6919      	ldr	r1, [r3, #16]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	041a      	lsls	r2, r3, #16
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	611a      	str	r2, [r3, #16]
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 fa52 	bl	80040ec <RTC_ExitInitMode>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	73fb      	strb	r3, [r7, #15]
 8003c4c:	7bfb      	ldrb	r3, [r7, #15]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d113      	bne.n	8003c7a <HAL_RTC_Init+0xea>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0203 	bic.w	r2, r2, #3
 8003c60:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69da      	ldr	r2, [r3, #28]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	430a      	orrs	r2, r1
 8003c78:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	22ff      	movs	r2, #255	@ 0xff
 8003c80:	625a      	str	r2, [r3, #36]	@ 0x24
 8003c82:	e001      	b.n	8003c88 <HAL_RTC_Init+0xf8>
 8003c84:	2300      	movs	r3, #0
 8003c86:	73fb      	strb	r3, [r7, #15]
 8003c88:	7bfb      	ldrb	r3, [r7, #15]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <HAL_RTC_Init+0x106>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003c96:	7bfb      	ldrb	r3, [r7, #15]
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <HAL_RTC_SetTime>:
 8003ca0:	b590      	push	{r4, r7, lr}
 8003ca2:	b087      	sub	sp, #28
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	60f8      	str	r0, [r7, #12]
 8003ca8:	60b9      	str	r1, [r7, #8]
 8003caa:	607a      	str	r2, [r7, #4]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_RTC_SetTime+0x1a>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e08b      	b.n	8003dd2 <HAL_RTC_SetTime+0x132>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2020 	strb.w	r2, [r3, #32]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2202      	movs	r2, #2
 8003cc6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	22ca      	movs	r2, #202	@ 0xca
 8003cd0:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2253      	movs	r2, #83	@ 0x53
 8003cd8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 f9d2 	bl	8004084 <RTC_EnterInitMode>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	74fb      	strb	r3, [r7, #19]
 8003ce4:	7cfb      	ldrb	r3, [r7, #19]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d163      	bne.n	8003db2 <HAL_RTC_SetTime+0x112>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d126      	bne.n	8003d3e <HAL_RTC_SetTime+0x9e>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d102      	bne.n	8003d04 <HAL_RTC_SetTime+0x64>
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	2200      	movs	r2, #0
 8003d02:	70da      	strb	r2, [r3, #3]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f000 fa2d 	bl	8004168 <RTC_ByteToBcd2>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	041c      	lsls	r4, r3, #16
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	785b      	ldrb	r3, [r3, #1]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f000 fa26 	bl	8004168 <RTC_ByteToBcd2>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	021b      	lsls	r3, r3, #8
 8003d20:	431c      	orrs	r4, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	789b      	ldrb	r3, [r3, #2]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fa1e 	bl	8004168 <RTC_ByteToBcd2>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	ea44 0203 	orr.w	r2, r4, r3
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	78db      	ldrb	r3, [r3, #3]
 8003d36:	059b      	lsls	r3, r3, #22
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	e018      	b.n	8003d70 <HAL_RTC_SetTime+0xd0>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d102      	bne.n	8003d52 <HAL_RTC_SetTime+0xb2>
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	70da      	strb	r2, [r3, #3]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	781b      	ldrb	r3, [r3, #0]
 8003d56:	041a      	lsls	r2, r3, #16
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	785b      	ldrb	r3, [r3, #1]
 8003d5c:	021b      	lsls	r3, r3, #8
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	68ba      	ldr	r2, [r7, #8]
 8003d62:	7892      	ldrb	r2, [r2, #2]
 8003d64:	431a      	orrs	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	78db      	ldrb	r3, [r3, #3]
 8003d6a:	059b      	lsls	r3, r3, #22
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	617b      	str	r3, [r7, #20]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003d7a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689a      	ldr	r2, [r3, #8]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	6899      	ldr	r1, [r3, #8]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	431a      	orrs	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	430a      	orrs	r2, r1
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	68f8      	ldr	r0, [r7, #12]
 8003daa:	f000 f99f 	bl	80040ec <RTC_ExitInitMode>
 8003dae:	4603      	mov	r3, r0
 8003db0:	74fb      	strb	r3, [r7, #19]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	22ff      	movs	r2, #255	@ 0xff
 8003db8:	625a      	str	r2, [r3, #36]	@ 0x24
 8003dba:	7cfb      	ldrb	r3, [r7, #19]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d103      	bne.n	8003dc8 <HAL_RTC_SetTime+0x128>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2020 	strb.w	r2, [r3, #32]
 8003dd0:	7cfb      	ldrb	r3, [r7, #19]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd90      	pop	{r4, r7, pc}

08003dda <HAL_RTC_GetTime>:
 8003dda:	b580      	push	{r7, lr}
 8003ddc:	b086      	sub	sp, #24
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	60f8      	str	r0, [r7, #12]
 8003de2:	60b9      	str	r1, [r7, #8]
 8003de4:	607a      	str	r2, [r7, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	605a      	str	r2, [r3, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	609a      	str	r2, [r3, #8]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003e08:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003e0c:	617b      	str	r3, [r7, #20]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	0c1b      	lsrs	r3, r3, #16
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	0a1b      	lsrs	r3, r3, #8
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e28:	b2da      	uxtb	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	705a      	strb	r2, [r3, #1]
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	b2db      	uxtb	r3, r3
 8003e32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e36:	b2da      	uxtb	r2, r3
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	709a      	strb	r2, [r3, #2]
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	0d9b      	lsrs	r3, r3, #22
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	b2da      	uxtb	r2, r3
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	70da      	strb	r2, [r3, #3]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11a      	bne.n	8003e88 <HAL_RTC_GetTime+0xae>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 f9a6 	bl	80041a8 <RTC_Bcd2ToByte>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	461a      	mov	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	701a      	strb	r2, [r3, #0]
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 f99d 	bl	80041a8 <RTC_Bcd2ToByte>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	705a      	strb	r2, [r3, #1]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	789b      	ldrb	r3, [r3, #2]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f994 	bl	80041a8 <RTC_Bcd2ToByte>
 8003e80:	4603      	mov	r3, r0
 8003e82:	461a      	mov	r2, r3
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	709a      	strb	r2, [r3, #2]
 8003e88:	2300      	movs	r3, #0
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	3718      	adds	r7, #24
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <HAL_RTC_SetDate>:
 8003e92:	b590      	push	{r4, r7, lr}
 8003e94:	b087      	sub	sp, #28
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	60f8      	str	r0, [r7, #12]
 8003e9a:	60b9      	str	r1, [r7, #8]
 8003e9c:	607a      	str	r2, [r7, #4]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_RTC_SetDate+0x1a>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e075      	b.n	8003f98 <HAL_RTC_SetDate+0x106>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2020 	strb.w	r2, [r3, #32]
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10e      	bne.n	8003ee0 <HAL_RTC_SetDate+0x4e>
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	785b      	ldrb	r3, [r3, #1]
 8003ec6:	f003 0310 	and.w	r3, r3, #16
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d008      	beq.n	8003ee0 <HAL_RTC_SetDate+0x4e>
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	785b      	ldrb	r3, [r3, #1]
 8003ed2:	f023 0310 	bic.w	r3, r3, #16
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	330a      	adds	r3, #10
 8003eda:	b2da      	uxtb	r2, r3
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	705a      	strb	r2, [r3, #1]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d11c      	bne.n	8003f20 <HAL_RTC_SetDate+0x8e>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	78db      	ldrb	r3, [r3, #3]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f93c 	bl	8004168 <RTC_ByteToBcd2>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	041c      	lsls	r4, r3, #16
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	785b      	ldrb	r3, [r3, #1]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f935 	bl	8004168 <RTC_ByteToBcd2>
 8003efe:	4603      	mov	r3, r0
 8003f00:	021b      	lsls	r3, r3, #8
 8003f02:	431c      	orrs	r4, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	789b      	ldrb	r3, [r3, #2]
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 f92d 	bl	8004168 <RTC_ByteToBcd2>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	ea44 0203 	orr.w	r2, r4, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	035b      	lsls	r3, r3, #13
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	e00e      	b.n	8003f3e <HAL_RTC_SetDate+0xac>
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	78db      	ldrb	r3, [r3, #3]
 8003f24:	041a      	lsls	r2, r3, #16
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	785b      	ldrb	r3, [r3, #1]
 8003f2a:	021b      	lsls	r3, r3, #8
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	68ba      	ldr	r2, [r7, #8]
 8003f30:	7892      	ldrb	r2, [r2, #2]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	035b      	lsls	r3, r3, #13
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	22ca      	movs	r2, #202	@ 0xca
 8003f44:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	2253      	movs	r2, #83	@ 0x53
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f4e:	68f8      	ldr	r0, [r7, #12]
 8003f50:	f000 f898 	bl	8004084 <RTC_EnterInitMode>
 8003f54:	4603      	mov	r3, r0
 8003f56:	74fb      	strb	r3, [r7, #19]
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10c      	bne.n	8003f78 <HAL_RTC_SetDate+0xe6>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003f68:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003f6c:	6053      	str	r3, [r2, #4]
 8003f6e:	68f8      	ldr	r0, [r7, #12]
 8003f70:	f000 f8bc 	bl	80040ec <RTC_ExitInitMode>
 8003f74:	4603      	mov	r3, r0
 8003f76:	74fb      	strb	r3, [r7, #19]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	22ff      	movs	r2, #255	@ 0xff
 8003f7e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f80:	7cfb      	ldrb	r3, [r7, #19]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d103      	bne.n	8003f8e <HAL_RTC_SetDate+0xfc>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2201      	movs	r2, #1
 8003f8a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 2020 	strb.w	r2, [r3, #32]
 8003f96:	7cfb      	ldrb	r3, [r7, #19]
 8003f98:	4618      	mov	r0, r3
 8003f9a:	371c      	adds	r7, #28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd90      	pop	{r4, r7, pc}

08003fa0 <HAL_RTC_GetDate>:
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b086      	sub	sp, #24
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8003fb6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003fba:	617b      	str	r3, [r7, #20]
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	0c1b      	lsrs	r3, r3, #16
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	70da      	strb	r2, [r3, #3]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	0a1b      	lsrs	r3, r3, #8
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	f003 031f 	and.w	r3, r3, #31
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	705a      	strb	r2, [r3, #1]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	b2db      	uxtb	r3, r3
 8003fda:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fde:	b2da      	uxtb	r2, r3
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	709a      	strb	r2, [r3, #2]
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	0b5b      	lsrs	r3, r3, #13
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68bb      	ldr	r3, [r7, #8]
 8003ff2:	701a      	strb	r2, [r3, #0]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d11a      	bne.n	8004030 <HAL_RTC_GetDate+0x90>
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	78db      	ldrb	r3, [r3, #3]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 f8d2 	bl	80041a8 <RTC_Bcd2ToByte>
 8004004:	4603      	mov	r3, r0
 8004006:	461a      	mov	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	70da      	strb	r2, [r3, #3]
 800400c:	68bb      	ldr	r3, [r7, #8]
 800400e:	785b      	ldrb	r3, [r3, #1]
 8004010:	4618      	mov	r0, r3
 8004012:	f000 f8c9 	bl	80041a8 <RTC_Bcd2ToByte>
 8004016:	4603      	mov	r3, r0
 8004018:	461a      	mov	r2, r3
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	705a      	strb	r2, [r3, #1]
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	789b      	ldrb	r3, [r3, #2]
 8004022:	4618      	mov	r0, r3
 8004024:	f000 f8c0 	bl	80041a8 <RTC_Bcd2ToByte>
 8004028:	4603      	mov	r3, r0
 800402a:	461a      	mov	r2, r3
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	709a      	strb	r2, [r3, #2]
 8004030:	2300      	movs	r3, #0
 8004032:	4618      	mov	r0, r3
 8004034:	3718      	adds	r7, #24
 8004036:	46bd      	mov	sp, r7
 8004038:	bd80      	pop	{r7, pc}
	...

0800403c <HAL_RTC_WaitForSynchro>:
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a0d      	ldr	r2, [pc, #52]	@ (8004080 <HAL_RTC_WaitForSynchro+0x44>)
 800404a:	60da      	str	r2, [r3, #12]
 800404c:	f7fd ff7c 	bl	8001f48 <HAL_GetTick>
 8004050:	60f8      	str	r0, [r7, #12]
 8004052:	e009      	b.n	8004068 <HAL_RTC_WaitForSynchro+0x2c>
 8004054:	f7fd ff78 	bl	8001f48 <HAL_GetTick>
 8004058:	4602      	mov	r2, r0
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004062:	d901      	bls.n	8004068 <HAL_RTC_WaitForSynchro+0x2c>
 8004064:	2303      	movs	r3, #3
 8004066:	e007      	b.n	8004078 <HAL_RTC_WaitForSynchro+0x3c>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	68db      	ldr	r3, [r3, #12]
 800406e:	f003 0320 	and.w	r3, r3, #32
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ee      	beq.n	8004054 <HAL_RTC_WaitForSynchro+0x18>
 8004076:	2300      	movs	r3, #0
 8004078:	4618      	mov	r0, r3
 800407a:	3710      	adds	r7, #16
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}
 8004080:	0003ff5f 	.word	0x0003ff5f

08004084 <RTC_EnterInitMode>:
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800409a:	2b00      	cmp	r3, #0
 800409c:	d120      	bne.n	80040e0 <RTC_EnterInitMode+0x5c>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f04f 32ff 	mov.w	r2, #4294967295
 80040a6:	60da      	str	r2, [r3, #12]
 80040a8:	f7fd ff4e 	bl	8001f48 <HAL_GetTick>
 80040ac:	60b8      	str	r0, [r7, #8]
 80040ae:	e00d      	b.n	80040cc <RTC_EnterInitMode+0x48>
 80040b0:	f7fd ff4a 	bl	8001f48 <HAL_GetTick>
 80040b4:	4602      	mov	r2, r0
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	1ad3      	subs	r3, r2, r3
 80040ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80040be:	d905      	bls.n	80040cc <RTC_EnterInitMode+0x48>
 80040c0:	2303      	movs	r3, #3
 80040c2:	73fb      	strb	r3, [r7, #15]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2203      	movs	r2, #3
 80040c8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d102      	bne.n	80040e0 <RTC_EnterInitMode+0x5c>
 80040da:	7bfb      	ldrb	r3, [r7, #15]
 80040dc:	2b03      	cmp	r3, #3
 80040de:	d1e7      	bne.n	80040b0 <RTC_EnterInitMode+0x2c>
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
	...

080040ec <RTC_ExitInitMode>:
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
 80040f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004164 <RTC_ExitInitMode+0x78>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a19      	ldr	r2, [pc, #100]	@ (8004164 <RTC_ExitInitMode+0x78>)
 80040fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004102:	60d3      	str	r3, [r2, #12]
 8004104:	4b17      	ldr	r3, [pc, #92]	@ (8004164 <RTC_ExitInitMode+0x78>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f003 0320 	and.w	r3, r3, #32
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10c      	bne.n	800412a <RTC_ExitInitMode+0x3e>
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f7ff ff93 	bl	800403c <HAL_RTC_WaitForSynchro>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01e      	beq.n	800415a <RTC_ExitInitMode+0x6e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2203      	movs	r2, #3
 8004120:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 8004124:	2303      	movs	r3, #3
 8004126:	73fb      	strb	r3, [r7, #15]
 8004128:	e017      	b.n	800415a <RTC_ExitInitMode+0x6e>
 800412a:	4b0e      	ldr	r3, [pc, #56]	@ (8004164 <RTC_ExitInitMode+0x78>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	4a0d      	ldr	r2, [pc, #52]	@ (8004164 <RTC_ExitInitMode+0x78>)
 8004130:	f023 0320 	bic.w	r3, r3, #32
 8004134:	6093      	str	r3, [r2, #8]
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff ff80 	bl	800403c <HAL_RTC_WaitForSynchro>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d005      	beq.n	800414e <RTC_ExitInitMode+0x62>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2203      	movs	r2, #3
 8004146:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
 800414a:	2303      	movs	r3, #3
 800414c:	73fb      	strb	r3, [r7, #15]
 800414e:	4b05      	ldr	r3, [pc, #20]	@ (8004164 <RTC_ExitInitMode+0x78>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	4a04      	ldr	r2, [pc, #16]	@ (8004164 <RTC_ExitInitMode+0x78>)
 8004154:	f043 0320 	orr.w	r3, r3, #32
 8004158:	6093      	str	r3, [r2, #8]
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	4618      	mov	r0, r3
 800415e:	3710      	adds	r7, #16
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	40002800 	.word	0x40002800

08004168 <RTC_ByteToBcd2>:
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	71fb      	strb	r3, [r7, #7]
 8004172:	2300      	movs	r3, #0
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	72fb      	strb	r3, [r7, #11]
 800417a:	e005      	b.n	8004188 <RTC_ByteToBcd2+0x20>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	3301      	adds	r3, #1
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	7afb      	ldrb	r3, [r7, #11]
 8004184:	3b0a      	subs	r3, #10
 8004186:	72fb      	strb	r3, [r7, #11]
 8004188:	7afb      	ldrb	r3, [r7, #11]
 800418a:	2b09      	cmp	r3, #9
 800418c:	d8f6      	bhi.n	800417c <RTC_ByteToBcd2+0x14>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	b2db      	uxtb	r3, r3
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	b2da      	uxtb	r2, r3
 8004196:	7afb      	ldrb	r3, [r7, #11]
 8004198:	4313      	orrs	r3, r2
 800419a:	b2db      	uxtb	r3, r3
 800419c:	4618      	mov	r0, r3
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <RTC_Bcd2ToByte>:
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	4603      	mov	r3, r0
 80041b0:	71fb      	strb	r3, [r7, #7]
 80041b2:	79fb      	ldrb	r3, [r7, #7]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	461a      	mov	r2, r3
 80041ba:	0092      	lsls	r2, r2, #2
 80041bc:	4413      	add	r3, r2
 80041be:	005b      	lsls	r3, r3, #1
 80041c0:	73fb      	strb	r3, [r7, #15]
 80041c2:	79fb      	ldrb	r3, [r7, #7]
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	7bfb      	ldrb	r3, [r7, #15]
 80041cc:	4413      	add	r3, r2
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	4618      	mov	r0, r3
 80041d2:	3714      	adds	r7, #20
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <HAL_SPI_Init>:
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_SPI_Init+0x12>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e095      	b.n	800431a <HAL_SPI_Init+0x13e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d108      	bne.n	8004208 <HAL_SPI_Init+0x2c>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80041fe:	d009      	beq.n	8004214 <HAL_SPI_Init+0x38>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	61da      	str	r2, [r3, #28]
 8004206:	e005      	b.n	8004214 <HAL_SPI_Init+0x38>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	611a      	str	r2, [r3, #16]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	615a      	str	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2200      	movs	r2, #0
 8004218:	629a      	str	r2, [r3, #40]	@ 0x28
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d106      	bne.n	8004234 <HAL_SPI_Init+0x58>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f7fd fbf8 	bl	8001a24 <HAL_SPI_MspInit>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2202      	movs	r2, #2
 8004238:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681a      	ldr	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800424a:	601a      	str	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68db      	ldr	r3, [r3, #12]
 8004250:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004254:	d902      	bls.n	800425c <HAL_SPI_Init+0x80>
 8004256:	2300      	movs	r3, #0
 8004258:	60fb      	str	r3, [r7, #12]
 800425a:	e002      	b.n	8004262 <HAL_SPI_Init+0x86>
 800425c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	68db      	ldr	r3, [r3, #12]
 8004266:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800426a:	d007      	beq.n	800427c <HAL_SPI_Init+0xa0>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004274:	d002      	beq.n	800427c <HAL_SPI_Init+0xa0>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	629a      	str	r2, [r3, #40]	@ 0x28
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	691b      	ldr	r3, [r3, #16]
 8004292:	f003 0302 	and.w	r3, r3, #2
 8004296:	431a      	orrs	r2, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	431a      	orrs	r2, r3
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80042aa:	431a      	orrs	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80042b4:	431a      	orrs	r2, r3
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042be:	ea42 0103 	orr.w	r1, r2, r3
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	601a      	str	r2, [r3, #0]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	699b      	ldr	r3, [r3, #24]
 80042d6:	0c1b      	lsrs	r3, r3, #16
 80042d8:	f003 0204 	and.w	r2, r3, #4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042e0:	f003 0310 	and.w	r3, r3, #16
 80042e4:	431a      	orrs	r2, r3
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042ea:	f003 0308 	and.w	r3, r3, #8
 80042ee:	431a      	orrs	r2, r3
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	68db      	ldr	r3, [r3, #12]
 80042f4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80042f8:	ea42 0103 	orr.w	r1, r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	661a      	str	r2, [r3, #96]	@ 0x60
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8004318:	2300      	movs	r3, #0
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <HAL_SPI_TransmitReceive>:
 8004322:	b580      	push	{r7, lr}
 8004324:	b08a      	sub	sp, #40	@ 0x28
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	607a      	str	r2, [r7, #4]
 800432e:	807b      	strh	r3, [r7, #2]
 8004330:	2301      	movs	r3, #1
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
 8004334:	f7fd fe08 	bl	8001f48 <HAL_GetTick>
 8004338:	6238      	str	r0, [r7, #32]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	61bb      	str	r3, [r7, #24]
 8004348:	887b      	ldrh	r3, [r7, #2]
 800434a:	82fb      	strh	r3, [r7, #22]
 800434c:	887b      	ldrh	r3, [r7, #2]
 800434e:	82bb      	strh	r3, [r7, #20]
 8004350:	7ffb      	ldrb	r3, [r7, #31]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d00c      	beq.n	8004370 <HAL_SPI_TransmitReceive+0x4e>
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800435c:	d106      	bne.n	800436c <HAL_SPI_TransmitReceive+0x4a>
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d102      	bne.n	800436c <HAL_SPI_TransmitReceive+0x4a>
 8004366:	7ffb      	ldrb	r3, [r7, #31]
 8004368:	2b04      	cmp	r3, #4
 800436a:	d001      	beq.n	8004370 <HAL_SPI_TransmitReceive+0x4e>
 800436c:	2302      	movs	r3, #2
 800436e:	e1f3      	b.n	8004758 <HAL_SPI_TransmitReceive+0x436>
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_SPI_TransmitReceive+0x60>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <HAL_SPI_TransmitReceive+0x60>
 800437c:	887b      	ldrh	r3, [r7, #2]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_SPI_TransmitReceive+0x64>
 8004382:	2301      	movs	r3, #1
 8004384:	e1e8      	b.n	8004758 <HAL_SPI_TransmitReceive+0x436>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x72>
 8004390:	2302      	movs	r3, #2
 8004392:	e1e1      	b.n	8004758 <HAL_SPI_TransmitReceive+0x436>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b04      	cmp	r3, #4
 80043a6:	d003      	beq.n	80043b0 <HAL_SPI_TransmitReceive+0x8e>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2205      	movs	r2, #5
 80043ac:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	661a      	str	r2, [r3, #96]	@ 0x60
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	641a      	str	r2, [r3, #64]	@ 0x40
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68ba      	ldr	r2, [r7, #8]
 80043d0:	639a      	str	r2, [r3, #56]	@ 0x38
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	887a      	ldrh	r2, [r7, #2]
 80043d6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	887a      	ldrh	r2, [r7, #2]
 80043dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	651a      	str	r2, [r3, #80]	@ 0x50
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80043f2:	d802      	bhi.n	80043fa <HAL_SPI_TransmitReceive+0xd8>
 80043f4:	8abb      	ldrh	r3, [r7, #20]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d908      	bls.n	800440c <HAL_SPI_TransmitReceive+0xea>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685a      	ldr	r2, [r3, #4]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004408:	605a      	str	r2, [r3, #4]
 800440a:	e007      	b.n	800441c <HAL_SPI_TransmitReceive+0xfa>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004426:	2b40      	cmp	r3, #64	@ 0x40
 8004428:	d007      	beq.n	800443a <HAL_SPI_TransmitReceive+0x118>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004442:	f240 8083 	bls.w	800454c <HAL_SPI_TransmitReceive+0x22a>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d002      	beq.n	8004454 <HAL_SPI_TransmitReceive+0x132>
 800444e:	8afb      	ldrh	r3, [r7, #22]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d16f      	bne.n	8004534 <HAL_SPI_TransmitReceive+0x212>
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004458:	881a      	ldrh	r2, [r3, #0]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	60da      	str	r2, [r3, #12]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004464:	1c9a      	adds	r2, r3, #2
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	639a      	str	r2, [r3, #56]	@ 0x38
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800446e:	b29b      	uxth	r3, r3
 8004470:	3b01      	subs	r3, #1
 8004472:	b29a      	uxth	r2, r3
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004478:	e05c      	b.n	8004534 <HAL_SPI_TransmitReceive+0x212>
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b02      	cmp	r3, #2
 8004486:	d11b      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x19e>
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800448c:	b29b      	uxth	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d016      	beq.n	80044c0 <HAL_SPI_TransmitReceive+0x19e>
 8004492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004494:	2b01      	cmp	r3, #1
 8004496:	d113      	bne.n	80044c0 <HAL_SPI_TransmitReceive+0x19e>
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800449c:	881a      	ldrh	r2, [r3, #0]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	60da      	str	r2, [r3, #12]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a8:	1c9a      	adds	r2, r3, #2
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	639a      	str	r2, [r3, #56]	@ 0x38
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b29a      	uxth	r2, r3
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80044bc:	2300      	movs	r3, #0
 80044be:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d11c      	bne.n	8004508 <HAL_SPI_TransmitReceive+0x1e6>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d016      	beq.n	8004508 <HAL_SPI_TransmitReceive+0x1e6>
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	68da      	ldr	r2, [r3, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	b292      	uxth	r2, r2
 80044e6:	801a      	strh	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ec:	1c9a      	adds	r2, r3, #2
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	641a      	str	r2, [r3, #64]	@ 0x40
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004504:	2301      	movs	r3, #1
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
 8004508:	f7fd fd1e 	bl	8001f48 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	6a3b      	ldr	r3, [r7, #32]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004514:	429a      	cmp	r2, r3
 8004516:	d80d      	bhi.n	8004534 <HAL_SPI_TransmitReceive+0x212>
 8004518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d009      	beq.n	8004534 <HAL_SPI_TransmitReceive+0x212>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004530:	2303      	movs	r3, #3
 8004532:	e111      	b.n	8004758 <HAL_SPI_TransmitReceive+0x436>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004538:	b29b      	uxth	r3, r3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d19d      	bne.n	800447a <HAL_SPI_TransmitReceive+0x158>
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004544:	b29b      	uxth	r3, r3
 8004546:	2b00      	cmp	r3, #0
 8004548:	d197      	bne.n	800447a <HAL_SPI_TransmitReceive+0x158>
 800454a:	e0e5      	b.n	8004718 <HAL_SPI_TransmitReceive+0x3f6>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d003      	beq.n	800455c <HAL_SPI_TransmitReceive+0x23a>
 8004554:	8afb      	ldrh	r3, [r7, #22]
 8004556:	2b01      	cmp	r3, #1
 8004558:	f040 80d1 	bne.w	80046fe <HAL_SPI_TransmitReceive+0x3dc>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004560:	b29b      	uxth	r3, r3
 8004562:	2b01      	cmp	r3, #1
 8004564:	d912      	bls.n	800458c <HAL_SPI_TransmitReceive+0x26a>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456a:	881a      	ldrh	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60da      	str	r2, [r3, #12]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004576:	1c9a      	adds	r2, r3, #2
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	639a      	str	r2, [r3, #56]	@ 0x38
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004580:	b29b      	uxth	r3, r3
 8004582:	3b02      	subs	r3, #2
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800458a:	e0b8      	b.n	80046fe <HAL_SPI_TransmitReceive+0x3dc>
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	7812      	ldrb	r2, [r2, #0]
 8004598:	701a      	strb	r2, [r3, #0]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80045b2:	e0a4      	b.n	80046fe <HAL_SPI_TransmitReceive+0x3dc>
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b02      	cmp	r3, #2
 80045c0:	d134      	bne.n	800462c <HAL_SPI_TransmitReceive+0x30a>
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c6:	b29b      	uxth	r3, r3
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d02f      	beq.n	800462c <HAL_SPI_TransmitReceive+0x30a>
 80045cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ce:	2b01      	cmp	r3, #1
 80045d0:	d12c      	bne.n	800462c <HAL_SPI_TransmitReceive+0x30a>
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d912      	bls.n	8004602 <HAL_SPI_TransmitReceive+0x2e0>
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045e0:	881a      	ldrh	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	60da      	str	r2, [r3, #12]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	1c9a      	adds	r2, r3, #2
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	639a      	str	r2, [r3, #56]	@ 0x38
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045f6:	b29b      	uxth	r3, r3
 80045f8:	3b02      	subs	r3, #2
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004600:	e012      	b.n	8004628 <HAL_SPI_TransmitReceive+0x306>
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	330c      	adds	r3, #12
 800460c:	7812      	ldrb	r2, [r2, #0]
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004614:	1c5a      	adds	r2, r3, #1
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	639a      	str	r2, [r3, #56]	@ 0x38
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800461e:	b29b      	uxth	r3, r3
 8004620:	3b01      	subs	r3, #1
 8004622:	b29a      	uxth	r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004628:	2300      	movs	r3, #0
 800462a:	627b      	str	r3, [r7, #36]	@ 0x24
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b01      	cmp	r3, #1
 8004638:	d148      	bne.n	80046cc <HAL_SPI_TransmitReceive+0x3aa>
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d042      	beq.n	80046cc <HAL_SPI_TransmitReceive+0x3aa>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b01      	cmp	r3, #1
 8004650:	d923      	bls.n	800469a <HAL_SPI_TransmitReceive+0x378>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800465c:	b292      	uxth	r2, r2
 800465e:	801a      	strh	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004664:	1c9a      	adds	r2, r3, #2
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	641a      	str	r2, [r3, #64]	@ 0x40
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b02      	subs	r3, #2
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004682:	b29b      	uxth	r3, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d81f      	bhi.n	80046c8 <HAL_SPI_TransmitReceive+0x3a6>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004696:	605a      	str	r2, [r3, #4]
 8004698:	e016      	b.n	80046c8 <HAL_SPI_TransmitReceive+0x3a6>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f103 020c 	add.w	r2, r3, #12
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046a6:	7812      	ldrb	r2, [r2, #0]
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	701a      	strb	r2, [r3, #0]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046b0:	1c5a      	adds	r2, r3, #1
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	641a      	str	r2, [r3, #64]	@ 0x40
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80046bc:	b29b      	uxth	r3, r3
 80046be:	3b01      	subs	r3, #1
 80046c0:	b29a      	uxth	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80046c8:	2301      	movs	r3, #1
 80046ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80046cc:	f7fd fc3c 	bl	8001f48 <HAL_GetTick>
 80046d0:	4602      	mov	r2, r0
 80046d2:	6a3b      	ldr	r3, [r7, #32]
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046d8:	429a      	cmp	r2, r3
 80046da:	d803      	bhi.n	80046e4 <HAL_SPI_TransmitReceive+0x3c2>
 80046dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046e2:	d102      	bne.n	80046ea <HAL_SPI_TransmitReceive+0x3c8>
 80046e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d109      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x3dc>
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 80046fa:	2303      	movs	r3, #3
 80046fc:	e02c      	b.n	8004758 <HAL_SPI_TransmitReceive+0x436>
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004702:	b29b      	uxth	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	f47f af55 	bne.w	80045b4 <HAL_SPI_TransmitReceive+0x292>
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004710:	b29b      	uxth	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	f47f af4e 	bne.w	80045b4 <HAL_SPI_TransmitReceive+0x292>
 8004718:	6a3a      	ldr	r2, [r7, #32]
 800471a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f93d 	bl	800499c <SPI_EndRxTxTransaction>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d008      	beq.n	800473a <HAL_SPI_TransmitReceive+0x418>
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2220      	movs	r2, #32
 800472c:	661a      	str	r2, [r3, #96]	@ 0x60
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004736:	2301      	movs	r3, #1
 8004738:	e00e      	b.n	8004758 <HAL_SPI_TransmitReceive+0x436>
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2201      	movs	r2, #1
 800473e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800474e:	2b00      	cmp	r3, #0
 8004750:	d001      	beq.n	8004756 <HAL_SPI_TransmitReceive+0x434>
 8004752:	2301      	movs	r3, #1
 8004754:	e000      	b.n	8004758 <HAL_SPI_TransmitReceive+0x436>
 8004756:	2300      	movs	r3, #0
 8004758:	4618      	mov	r0, r3
 800475a:	3728      	adds	r7, #40	@ 0x28
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <SPI_WaitFlagStateUntilTimeout>:
 8004760:	b580      	push	{r7, lr}
 8004762:	b088      	sub	sp, #32
 8004764:	af00      	add	r7, sp, #0
 8004766:	60f8      	str	r0, [r7, #12]
 8004768:	60b9      	str	r1, [r7, #8]
 800476a:	603b      	str	r3, [r7, #0]
 800476c:	4613      	mov	r3, r2
 800476e:	71fb      	strb	r3, [r7, #7]
 8004770:	f7fd fbea 	bl	8001f48 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004778:	1a9b      	subs	r3, r3, r2
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	4413      	add	r3, r2
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	f7fd fbe2 	bl	8001f48 <HAL_GetTick>
 8004784:	61b8      	str	r0, [r7, #24]
 8004786:	4b39      	ldr	r3, [pc, #228]	@ (800486c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	015b      	lsls	r3, r3, #5
 800478c:	0d1b      	lsrs	r3, r3, #20
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	fb02 f303 	mul.w	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
 8004796:	e054      	b.n	8004842 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800479e:	d050      	beq.n	8004842 <SPI_WaitFlagStateUntilTimeout+0xe2>
 80047a0:	f7fd fbd2 	bl	8001f48 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	69bb      	ldr	r3, [r7, #24]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d902      	bls.n	80047b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80047b0:	69fb      	ldr	r3, [r7, #28]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d13d      	bne.n	8004832 <SPI_WaitFlagStateUntilTimeout+0xd2>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685a      	ldr	r2, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80047c4:	605a      	str	r2, [r3, #4]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047ce:	d111      	bne.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	689b      	ldr	r3, [r3, #8]
 80047d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047d8:	d004      	beq.n	80047e4 <SPI_WaitFlagStateUntilTimeout+0x84>
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047e2:	d107      	bne.n	80047f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047fc:	d10f      	bne.n	800481e <SPI_WaitFlagStateUntilTimeout+0xbe>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800480c:	601a      	str	r2, [r3, #0]
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2201      	movs	r2, #1
 8004822:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	2200      	movs	r2, #0
 800482a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 800482e:	2303      	movs	r3, #3
 8004830:	e017      	b.n	8004862 <SPI_WaitFlagStateUntilTimeout+0x102>
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d101      	bne.n	800483c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8004838:	2300      	movs	r3, #0
 800483a:	61fb      	str	r3, [r7, #28]
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	3b01      	subs	r3, #1
 8004840:	617b      	str	r3, [r7, #20]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	689a      	ldr	r2, [r3, #8]
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	4013      	ands	r3, r2
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	429a      	cmp	r2, r3
 8004850:	bf0c      	ite	eq
 8004852:	2301      	moveq	r3, #1
 8004854:	2300      	movne	r3, #0
 8004856:	b2db      	uxtb	r3, r3
 8004858:	461a      	mov	r2, r3
 800485a:	79fb      	ldrb	r3, [r7, #7]
 800485c:	429a      	cmp	r2, r3
 800485e:	d19b      	bne.n	8004798 <SPI_WaitFlagStateUntilTimeout+0x38>
 8004860:	2300      	movs	r3, #0
 8004862:	4618      	mov	r0, r3
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	20000000 	.word	0x20000000

08004870 <SPI_WaitFifoStateUntilTimeout>:
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
 800487e:	2300      	movs	r3, #0
 8004880:	75fb      	strb	r3, [r7, #23]
 8004882:	f7fd fb61 	bl	8001f48 <HAL_GetTick>
 8004886:	4602      	mov	r2, r0
 8004888:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	683a      	ldr	r2, [r7, #0]
 800488e:	4413      	add	r3, r2
 8004890:	627b      	str	r3, [r7, #36]	@ 0x24
 8004892:	f7fd fb59 	bl	8001f48 <HAL_GetTick>
 8004896:	6238      	str	r0, [r7, #32]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	61fb      	str	r3, [r7, #28]
 80048a0:	4b3d      	ldr	r3, [pc, #244]	@ (8004998 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	4613      	mov	r3, r2
 80048a6:	009b      	lsls	r3, r3, #2
 80048a8:	4413      	add	r3, r2
 80048aa:	00da      	lsls	r2, r3, #3
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	0d1b      	lsrs	r3, r3, #20
 80048b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048b2:	fb02 f303 	mul.w	r3, r2, r3
 80048b6:	61bb      	str	r3, [r7, #24]
 80048b8:	e060      	b.n	800497c <SPI_WaitFifoStateUntilTimeout+0x10c>
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80048c0:	d107      	bne.n	80048d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d104      	bne.n	80048d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	75fb      	strb	r3, [r7, #23]
 80048d0:	7dfb      	ldrb	r3, [r7, #23]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d8:	d050      	beq.n	800497c <SPI_WaitFifoStateUntilTimeout+0x10c>
 80048da:	f7fd fb35 	bl	8001f48 <HAL_GetTick>
 80048de:	4602      	mov	r2, r0
 80048e0:	6a3b      	ldr	r3, [r7, #32]
 80048e2:	1ad3      	subs	r3, r2, r3
 80048e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d902      	bls.n	80048f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80048ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d13d      	bne.n	800496c <SPI_WaitFifoStateUntilTimeout+0xfc>
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685a      	ldr	r2, [r3, #4]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80048fe:	605a      	str	r2, [r3, #4]
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004908:	d111      	bne.n	800492e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004912:	d004      	beq.n	800491e <SPI_WaitFifoStateUntilTimeout+0xae>
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800491c:	d107      	bne.n	800492e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800492c:	601a      	str	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004936:	d10f      	bne.n	8004958 <SPI_WaitFifoStateUntilTimeout+0xe8>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004956:	601a      	str	r2, [r3, #0]
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
 8004968:	2303      	movs	r3, #3
 800496a:	e010      	b.n	800498e <SPI_WaitFifoStateUntilTimeout+0x11e>
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <SPI_WaitFifoStateUntilTimeout+0x106>
 8004972:	2300      	movs	r3, #0
 8004974:	627b      	str	r3, [r7, #36]	@ 0x24
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	3b01      	subs	r3, #1
 800497a:	61bb      	str	r3, [r7, #24]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	689a      	ldr	r2, [r3, #8]
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4013      	ands	r3, r2
 8004986:	687a      	ldr	r2, [r7, #4]
 8004988:	429a      	cmp	r2, r3
 800498a:	d196      	bne.n	80048ba <SPI_WaitFifoStateUntilTimeout+0x4a>
 800498c:	2300      	movs	r3, #0
 800498e:	4618      	mov	r0, r3
 8004990:	3728      	adds	r7, #40	@ 0x28
 8004992:	46bd      	mov	sp, r7
 8004994:	bd80      	pop	{r7, pc}
 8004996:	bf00      	nop
 8004998:	20000000 	.word	0x20000000

0800499c <SPI_EndRxTxTransaction>:
 800499c:	b580      	push	{r7, lr}
 800499e:	b086      	sub	sp, #24
 80049a0:	af02      	add	r7, sp, #8
 80049a2:	60f8      	str	r0, [r7, #12]
 80049a4:	60b9      	str	r1, [r7, #8]
 80049a6:	607a      	str	r2, [r7, #4]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	68bb      	ldr	r3, [r7, #8]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80049b4:	68f8      	ldr	r0, [r7, #12]
 80049b6:	f7ff ff5b 	bl	8004870 <SPI_WaitFifoStateUntilTimeout>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <SPI_EndRxTxTransaction+0x34>
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049c4:	f043 0220 	orr.w	r2, r3, #32
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	661a      	str	r2, [r3, #96]	@ 0x60
 80049cc:	2303      	movs	r3, #3
 80049ce:	e027      	b.n	8004a20 <SPI_EndRxTxTransaction+0x84>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	9300      	str	r3, [sp, #0]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	2200      	movs	r2, #0
 80049d8:	2180      	movs	r1, #128	@ 0x80
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f7ff fec0 	bl	8004760 <SPI_WaitFlagStateUntilTimeout>
 80049e0:	4603      	mov	r3, r0
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d007      	beq.n	80049f6 <SPI_EndRxTxTransaction+0x5a>
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	661a      	str	r2, [r3, #96]	@ 0x60
 80049f2:	2303      	movs	r3, #3
 80049f4:	e014      	b.n	8004a20 <SPI_EndRxTxTransaction+0x84>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f7ff ff34 	bl	8004870 <SPI_WaitFifoStateUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d007      	beq.n	8004a1e <SPI_EndRxTxTransaction+0x82>
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a12:	f043 0220 	orr.w	r2, r3, #32
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	661a      	str	r2, [r3, #96]	@ 0x60
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e000      	b.n	8004a20 <SPI_EndRxTxTransaction+0x84>
 8004a1e:	2300      	movs	r3, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	3710      	adds	r7, #16
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd80      	pop	{r7, pc}

08004a28 <HAL_TIM_IC_Init>:
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_TIM_IC_Init+0x12>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e049      	b.n	8004ace <HAL_TIM_IC_Init+0xa6>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_TIM_IC_Init+0x2c>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fd f82a 	bl	8001aa8 <HAL_TIM_IC_MspInit>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681a      	ldr	r2, [r3, #0]
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	3304      	adds	r3, #4
 8004a64:	4619      	mov	r1, r3
 8004a66:	4610      	mov	r0, r2
 8004a68:	f000 fc4e 	bl	8005308 <TIM_Base_SetConfig>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004acc:	2300      	movs	r3, #0
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3708      	adds	r7, #8
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
	...

08004ad8 <HAL_TIM_IC_Start_IT>:
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	73fb      	strb	r3, [r7, #15]
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d104      	bne.n	8004af6 <HAL_TIM_IC_Start_IT+0x1e>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	e023      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x66>
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d104      	bne.n	8004b06 <HAL_TIM_IC_Start_IT+0x2e>
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	e01b      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x66>
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d104      	bne.n	8004b16 <HAL_TIM_IC_Start_IT+0x3e>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	e013      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x66>
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	2b0c      	cmp	r3, #12
 8004b1a:	d104      	bne.n	8004b26 <HAL_TIM_IC_Start_IT+0x4e>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	e00b      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x66>
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	2b10      	cmp	r3, #16
 8004b2a:	d104      	bne.n	8004b36 <HAL_TIM_IC_Start_IT+0x5e>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	e003      	b.n	8004b3e <HAL_TIM_IC_Start_IT+0x66>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	73bb      	strb	r3, [r7, #14]
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d104      	bne.n	8004b50 <HAL_TIM_IC_Start_IT+0x78>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	e013      	b.n	8004b78 <HAL_TIM_IC_Start_IT+0xa0>
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	2b04      	cmp	r3, #4
 8004b54:	d104      	bne.n	8004b60 <HAL_TIM_IC_Start_IT+0x88>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	e00b      	b.n	8004b78 <HAL_TIM_IC_Start_IT+0xa0>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	2b08      	cmp	r3, #8
 8004b64:	d104      	bne.n	8004b70 <HAL_TIM_IC_Start_IT+0x98>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	e003      	b.n	8004b78 <HAL_TIM_IC_Start_IT+0xa0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	737b      	strb	r3, [r7, #13]
 8004b7a:	7bbb      	ldrb	r3, [r7, #14]
 8004b7c:	2b01      	cmp	r3, #1
 8004b7e:	d102      	bne.n	8004b86 <HAL_TIM_IC_Start_IT+0xae>
 8004b80:	7b7b      	ldrb	r3, [r7, #13]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d001      	beq.n	8004b8a <HAL_TIM_IC_Start_IT+0xb2>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e0dd      	b.n	8004d46 <HAL_TIM_IC_Start_IT+0x26e>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d104      	bne.n	8004b9a <HAL_TIM_IC_Start_IT+0xc2>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2202      	movs	r2, #2
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b98:	e023      	b.n	8004be2 <HAL_TIM_IC_Start_IT+0x10a>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b04      	cmp	r3, #4
 8004b9e:	d104      	bne.n	8004baa <HAL_TIM_IC_Start_IT+0xd2>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2202      	movs	r2, #2
 8004ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004ba8:	e01b      	b.n	8004be2 <HAL_TIM_IC_Start_IT+0x10a>
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b08      	cmp	r3, #8
 8004bae:	d104      	bne.n	8004bba <HAL_TIM_IC_Start_IT+0xe2>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bb8:	e013      	b.n	8004be2 <HAL_TIM_IC_Start_IT+0x10a>
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b0c      	cmp	r3, #12
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_IC_Start_IT+0xf2>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004bc8:	e00b      	b.n	8004be2 <HAL_TIM_IC_Start_IT+0x10a>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_IC_Start_IT+0x102>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004bd8:	e003      	b.n	8004be2 <HAL_TIM_IC_Start_IT+0x10a>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d104      	bne.n	8004bf2 <HAL_TIM_IC_Start_IT+0x11a>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2202      	movs	r2, #2
 8004bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf0:	e013      	b.n	8004c1a <HAL_TIM_IC_Start_IT+0x142>
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	2b04      	cmp	r3, #4
 8004bf6:	d104      	bne.n	8004c02 <HAL_TIM_IC_Start_IT+0x12a>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c00:	e00b      	b.n	8004c1a <HAL_TIM_IC_Start_IT+0x142>
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d104      	bne.n	8004c12 <HAL_TIM_IC_Start_IT+0x13a>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2202      	movs	r2, #2
 8004c0c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004c10:	e003      	b.n	8004c1a <HAL_TIM_IC_Start_IT+0x142>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2202      	movs	r2, #2
 8004c16:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b0c      	cmp	r3, #12
 8004c1e:	d841      	bhi.n	8004ca4 <HAL_TIM_IC_Start_IT+0x1cc>
 8004c20:	a201      	add	r2, pc, #4	@ (adr r2, 8004c28 <HAL_TIM_IC_Start_IT+0x150>)
 8004c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c26:	bf00      	nop
 8004c28:	08004c5d 	.word	0x08004c5d
 8004c2c:	08004ca5 	.word	0x08004ca5
 8004c30:	08004ca5 	.word	0x08004ca5
 8004c34:	08004ca5 	.word	0x08004ca5
 8004c38:	08004c6f 	.word	0x08004c6f
 8004c3c:	08004ca5 	.word	0x08004ca5
 8004c40:	08004ca5 	.word	0x08004ca5
 8004c44:	08004ca5 	.word	0x08004ca5
 8004c48:	08004c81 	.word	0x08004c81
 8004c4c:	08004ca5 	.word	0x08004ca5
 8004c50:	08004ca5 	.word	0x08004ca5
 8004c54:	08004ca5 	.word	0x08004ca5
 8004c58:	08004c93 	.word	0x08004c93
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	68da      	ldr	r2, [r3, #12]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0202 	orr.w	r2, r2, #2
 8004c6a:	60da      	str	r2, [r3, #12]
 8004c6c:	e01d      	b.n	8004caa <HAL_TIM_IC_Start_IT+0x1d2>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68da      	ldr	r2, [r3, #12]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0204 	orr.w	r2, r2, #4
 8004c7c:	60da      	str	r2, [r3, #12]
 8004c7e:	e014      	b.n	8004caa <HAL_TIM_IC_Start_IT+0x1d2>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0208 	orr.w	r2, r2, #8
 8004c8e:	60da      	str	r2, [r3, #12]
 8004c90:	e00b      	b.n	8004caa <HAL_TIM_IC_Start_IT+0x1d2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68da      	ldr	r2, [r3, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f042 0210 	orr.w	r2, r2, #16
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	e002      	b.n	8004caa <HAL_TIM_IC_Start_IT+0x1d2>
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
 8004ca8:	bf00      	nop
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d149      	bne.n	8004d44 <HAL_TIM_IC_Start_IT+0x26c>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	2201      	movs	r2, #1
 8004cb6:	6839      	ldr	r1, [r7, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f000 fcef 	bl	800569c <TIM_CCxChannelCmd>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a23      	ldr	r2, [pc, #140]	@ (8004d50 <HAL_TIM_IC_Start_IT+0x278>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d01d      	beq.n	8004d04 <HAL_TIM_IC_Start_IT+0x22c>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd0:	d018      	beq.n	8004d04 <HAL_TIM_IC_Start_IT+0x22c>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a1f      	ldr	r2, [pc, #124]	@ (8004d54 <HAL_TIM_IC_Start_IT+0x27c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d013      	beq.n	8004d04 <HAL_TIM_IC_Start_IT+0x22c>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <HAL_TIM_IC_Start_IT+0x280>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d00e      	beq.n	8004d04 <HAL_TIM_IC_Start_IT+0x22c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a1c      	ldr	r2, [pc, #112]	@ (8004d5c <HAL_TIM_IC_Start_IT+0x284>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d009      	beq.n	8004d04 <HAL_TIM_IC_Start_IT+0x22c>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d60 <HAL_TIM_IC_Start_IT+0x288>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d004      	beq.n	8004d04 <HAL_TIM_IC_Start_IT+0x22c>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a19      	ldr	r2, [pc, #100]	@ (8004d64 <HAL_TIM_IC_Start_IT+0x28c>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d115      	bne.n	8004d30 <HAL_TIM_IC_Start_IT+0x258>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689a      	ldr	r2, [r3, #8]
 8004d0a:	4b17      	ldr	r3, [pc, #92]	@ (8004d68 <HAL_TIM_IC_Start_IT+0x290>)
 8004d0c:	4013      	ands	r3, r2
 8004d0e:	60bb      	str	r3, [r7, #8]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	2b06      	cmp	r3, #6
 8004d14:	d015      	beq.n	8004d42 <HAL_TIM_IC_Start_IT+0x26a>
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d1c:	d011      	beq.n	8004d42 <HAL_TIM_IC_Start_IT+0x26a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f042 0201 	orr.w	r2, r2, #1
 8004d2c:	601a      	str	r2, [r3, #0]
 8004d2e:	e008      	b.n	8004d42 <HAL_TIM_IC_Start_IT+0x26a>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e000      	b.n	8004d44 <HAL_TIM_IC_Start_IT+0x26c>
 8004d42:	bf00      	nop
 8004d44:	7bfb      	ldrb	r3, [r7, #15]
 8004d46:	4618      	mov	r0, r3
 8004d48:	3710      	adds	r7, #16
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40012c00 	.word	0x40012c00
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40013400 	.word	0x40013400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	00010007 	.word	0x00010007

08004d6c <HAL_TIM_IC_Stop_IT>:
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
 8004d76:	2300      	movs	r3, #0
 8004d78:	73fb      	strb	r3, [r7, #15]
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	2b0c      	cmp	r3, #12
 8004d7e:	d841      	bhi.n	8004e04 <HAL_TIM_IC_Stop_IT+0x98>
 8004d80:	a201      	add	r2, pc, #4	@ (adr r2, 8004d88 <HAL_TIM_IC_Stop_IT+0x1c>)
 8004d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d86:	bf00      	nop
 8004d88:	08004dbd 	.word	0x08004dbd
 8004d8c:	08004e05 	.word	0x08004e05
 8004d90:	08004e05 	.word	0x08004e05
 8004d94:	08004e05 	.word	0x08004e05
 8004d98:	08004dcf 	.word	0x08004dcf
 8004d9c:	08004e05 	.word	0x08004e05
 8004da0:	08004e05 	.word	0x08004e05
 8004da4:	08004e05 	.word	0x08004e05
 8004da8:	08004de1 	.word	0x08004de1
 8004dac:	08004e05 	.word	0x08004e05
 8004db0:	08004e05 	.word	0x08004e05
 8004db4:	08004e05 	.word	0x08004e05
 8004db8:	08004df3 	.word	0x08004df3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f022 0202 	bic.w	r2, r2, #2
 8004dca:	60da      	str	r2, [r3, #12]
 8004dcc:	e01d      	b.n	8004e0a <HAL_TIM_IC_Stop_IT+0x9e>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0204 	bic.w	r2, r2, #4
 8004ddc:	60da      	str	r2, [r3, #12]
 8004dde:	e014      	b.n	8004e0a <HAL_TIM_IC_Stop_IT+0x9e>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68da      	ldr	r2, [r3, #12]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0208 	bic.w	r2, r2, #8
 8004dee:	60da      	str	r2, [r3, #12]
 8004df0:	e00b      	b.n	8004e0a <HAL_TIM_IC_Stop_IT+0x9e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68da      	ldr	r2, [r3, #12]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f022 0210 	bic.w	r2, r2, #16
 8004e00:	60da      	str	r2, [r3, #12]
 8004e02:	e002      	b.n	8004e0a <HAL_TIM_IC_Stop_IT+0x9e>
 8004e04:	2301      	movs	r3, #1
 8004e06:	73fb      	strb	r3, [r7, #15]
 8004e08:	bf00      	nop
 8004e0a:	7bfb      	ldrb	r3, [r7, #15]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d166      	bne.n	8004ede <HAL_TIM_IC_Stop_IT+0x172>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2200      	movs	r2, #0
 8004e16:	6839      	ldr	r1, [r7, #0]
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 fc3f 	bl	800569c <TIM_CCxChannelCmd>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a1a      	ldr	r2, [r3, #32]
 8004e24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004e28:	4013      	ands	r3, r2
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d10f      	bne.n	8004e4e <HAL_TIM_IC_Stop_IT+0xe2>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	6a1a      	ldr	r2, [r3, #32]
 8004e34:	f240 4344 	movw	r3, #1092	@ 0x444
 8004e38:	4013      	ands	r3, r2
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d107      	bne.n	8004e4e <HAL_TIM_IC_Stop_IT+0xe2>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0201 	bic.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d104      	bne.n	8004e5e <HAL_TIM_IC_Stop_IT+0xf2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004e5c:	e023      	b.n	8004ea6 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_IC_Stop_IT+0x102>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e6c:	e01b      	b.n	8004ea6 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b08      	cmp	r3, #8
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_IC_Stop_IT+0x112>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e7c:	e013      	b.n	8004ea6 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b0c      	cmp	r3, #12
 8004e82:	d104      	bne.n	8004e8e <HAL_TIM_IC_Stop_IT+0x122>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e8c:	e00b      	b.n	8004ea6 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	2b10      	cmp	r3, #16
 8004e92:	d104      	bne.n	8004e9e <HAL_TIM_IC_Stop_IT+0x132>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e9c:	e003      	b.n	8004ea6 <HAL_TIM_IC_Stop_IT+0x13a>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_IC_Stop_IT+0x14a>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004eb4:	e013      	b.n	8004ede <HAL_TIM_IC_Stop_IT+0x172>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b04      	cmp	r3, #4
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_IC_Stop_IT+0x15a>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004ec4:	e00b      	b.n	8004ede <HAL_TIM_IC_Stop_IT+0x172>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b08      	cmp	r3, #8
 8004eca:	d104      	bne.n	8004ed6 <HAL_TIM_IC_Stop_IT+0x16a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004ed4:	e003      	b.n	8004ede <HAL_TIM_IC_Stop_IT+0x172>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
 8004ede:	7bfb      	ldrb	r3, [r7, #15]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3710      	adds	r7, #16
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_TIM_IRQHandler>:
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	60bb      	str	r3, [r7, #8]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d020      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x64>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d01b      	beq.n	8004f4c <HAL_TIM_IRQHandler+0x64>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f06f 0202 	mvn.w	r2, #2
 8004f1c:	611a      	str	r2, [r3, #16]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2201      	movs	r2, #1
 8004f22:	771a      	strb	r2, [r3, #28]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	f003 0303 	and.w	r3, r3, #3
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <HAL_TIM_IRQHandler+0x52>
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f7fc f90c 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8004f38:	e005      	b.n	8004f46 <HAL_TIM_IRQHandler+0x5e>
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f9c6 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f000 f9cd 	bl	80052e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2200      	movs	r2, #0
 8004f4a:	771a      	strb	r2, [r3, #28]
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	f003 0304 	and.w	r3, r3, #4
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d020      	beq.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	f003 0304 	and.w	r3, r3, #4
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d01b      	beq.n	8004f98 <HAL_TIM_IRQHandler+0xb0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f06f 0204 	mvn.w	r2, #4
 8004f68:	611a      	str	r2, [r3, #16]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2202      	movs	r2, #2
 8004f6e:	771a      	strb	r2, [r3, #28]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_TIM_IRQHandler+0x9e>
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fc f8e6 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8004f84:	e005      	b.n	8004f92 <HAL_TIM_IRQHandler+0xaa>
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f9a0 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f9a7 	bl	80052e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2200      	movs	r2, #0
 8004f96:	771a      	strb	r2, [r3, #28]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	f003 0308 	and.w	r3, r3, #8
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d020      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0xfc>
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d01b      	beq.n	8004fe4 <HAL_TIM_IRQHandler+0xfc>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f06f 0208 	mvn.w	r2, #8
 8004fb4:	611a      	str	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2204      	movs	r2, #4
 8004fba:	771a      	strb	r2, [r3, #28]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	f003 0303 	and.w	r3, r3, #3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d003      	beq.n	8004fd2 <HAL_TIM_IRQHandler+0xea>
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7fc f8c0 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 8004fd0:	e005      	b.n	8004fde <HAL_TIM_IRQHandler+0xf6>
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f000 f97a 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 f981 	bl	80052e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	771a      	strb	r2, [r3, #28]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	f003 0310 	and.w	r3, r3, #16
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d020      	beq.n	8005030 <HAL_TIM_IRQHandler+0x148>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f003 0310 	and.w	r3, r3, #16
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <HAL_TIM_IRQHandler+0x148>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0210 	mvn.w	r2, #16
 8005000:	611a      	str	r2, [r3, #16]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2208      	movs	r2, #8
 8005006:	771a      	strb	r2, [r3, #28]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	69db      	ldr	r3, [r3, #28]
 800500e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x136>
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fc f89a 	bl	8001150 <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0x142>
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f954 	bl	80052cc <HAL_TIM_OC_DelayElapsedCallback>
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f95b 	bl	80052e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00c      	beq.n	8005054 <HAL_TIM_IRQHandler+0x16c>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f003 0301 	and.w	r3, r3, #1
 8005040:	2b00      	cmp	r3, #0
 8005042:	d007      	beq.n	8005054 <HAL_TIM_IRQHandler+0x16c>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f06f 0201 	mvn.w	r2, #1
 800504c:	611a      	str	r2, [r3, #16]
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f932 	bl	80052b8 <HAL_TIM_PeriodElapsedCallback>
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d104      	bne.n	8005068 <HAL_TIM_IRQHandler+0x180>
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005064:	2b00      	cmp	r3, #0
 8005066:	d00c      	beq.n	8005082 <HAL_TIM_IRQHandler+0x19a>
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <HAL_TIM_IRQHandler+0x19a>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800507a:	611a      	str	r2, [r3, #16]
 800507c:	6878      	ldr	r0, [r7, #4]
 800507e:	f000 fbc5 	bl	800580c <HAL_TIMEx_BreakCallback>
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005088:	2b00      	cmp	r3, #0
 800508a:	d00c      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x1be>
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <HAL_TIM_IRQHandler+0x1be>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800509e:	611a      	str	r2, [r3, #16]
 80050a0:	6878      	ldr	r0, [r7, #4]
 80050a2:	f000 fbbd 	bl	8005820 <HAL_TIMEx_Break2Callback>
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d00c      	beq.n	80050ca <HAL_TIM_IRQHandler+0x1e2>
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d007      	beq.n	80050ca <HAL_TIM_IRQHandler+0x1e2>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80050c2:	611a      	str	r2, [r3, #16]
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f915 	bl	80052f4 <HAL_TIM_TriggerCallback>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f003 0320 	and.w	r3, r3, #32
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00c      	beq.n	80050ee <HAL_TIM_IRQHandler+0x206>
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d007      	beq.n	80050ee <HAL_TIM_IRQHandler+0x206>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f06f 0220 	mvn.w	r2, #32
 80050e6:	611a      	str	r2, [r3, #16]
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 fb85 	bl	80057f8 <HAL_TIMEx_CommutCallback>
 80050ee:	bf00      	nop
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_TIM_IC_ConfigChannel>:
 80050f6:	b580      	push	{r7, lr}
 80050f8:	b086      	sub	sp, #24
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	60f8      	str	r0, [r7, #12]
 80050fe:	60b9      	str	r1, [r7, #8]
 8005100:	607a      	str	r2, [r7, #4]
 8005102:	2300      	movs	r3, #0
 8005104:	75fb      	strb	r3, [r7, #23]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800510c:	2b01      	cmp	r3, #1
 800510e:	d101      	bne.n	8005114 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005110:	2302      	movs	r3, #2
 8005112:	e088      	b.n	8005226 <HAL_TIM_IC_ConfigChannel+0x130>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d11b      	bne.n	800515a <HAL_TIM_IC_ConfigChannel+0x64>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6818      	ldr	r0, [r3, #0]
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	6819      	ldr	r1, [r3, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f000 f98f 	bl	8005454 <TIM_TI1_SetConfig>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f022 020c 	bic.w	r2, r2, #12
 8005144:	619a      	str	r2, [r3, #24]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6999      	ldr	r1, [r3, #24]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	689a      	ldr	r2, [r3, #8]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	430a      	orrs	r2, r1
 8005156:	619a      	str	r2, [r3, #24]
 8005158:	e060      	b.n	800521c <HAL_TIM_IC_ConfigChannel+0x126>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b04      	cmp	r3, #4
 800515e:	d11c      	bne.n	800519a <HAL_TIM_IC_ConfigChannel+0xa4>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6818      	ldr	r0, [r3, #0]
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	6819      	ldr	r1, [r3, #0]
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	685a      	ldr	r2, [r3, #4]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	68db      	ldr	r3, [r3, #12]
 8005170:	f000 f9de 	bl	8005530 <TIM_TI2_SetConfig>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	699a      	ldr	r2, [r3, #24]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005182:	619a      	str	r2, [r3, #24]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	6999      	ldr	r1, [r3, #24]
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	021a      	lsls	r2, r3, #8
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	619a      	str	r2, [r3, #24]
 8005198:	e040      	b.n	800521c <HAL_TIM_IC_ConfigChannel+0x126>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b08      	cmp	r3, #8
 800519e:	d11b      	bne.n	80051d8 <HAL_TIM_IC_ConfigChannel+0xe2>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6818      	ldr	r0, [r3, #0]
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	6819      	ldr	r1, [r3, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	68db      	ldr	r3, [r3, #12]
 80051b0:	f000 f9fb 	bl	80055aa <TIM_TI3_SetConfig>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	69da      	ldr	r2, [r3, #28]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f022 020c 	bic.w	r2, r2, #12
 80051c2:	61da      	str	r2, [r3, #28]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	69d9      	ldr	r1, [r3, #28]
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	430a      	orrs	r2, r1
 80051d4:	61da      	str	r2, [r3, #28]
 80051d6:	e021      	b.n	800521c <HAL_TIM_IC_ConfigChannel+0x126>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2b0c      	cmp	r3, #12
 80051dc:	d11c      	bne.n	8005218 <HAL_TIM_IC_ConfigChannel+0x122>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6818      	ldr	r0, [r3, #0]
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	6819      	ldr	r1, [r3, #0]
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	685a      	ldr	r2, [r3, #4]
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f000 fa18 	bl	8005622 <TIM_TI4_SetConfig>
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	69da      	ldr	r2, [r3, #28]
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005200:	61da      	str	r2, [r3, #28]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	69d9      	ldr	r1, [r3, #28]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	021a      	lsls	r2, r3, #8
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	430a      	orrs	r2, r1
 8005214:	61da      	str	r2, [r3, #28]
 8005216:	e001      	b.n	800521c <HAL_TIM_IC_ConfigChannel+0x126>
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005224:	7dfb      	ldrb	r3, [r7, #23]
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_TIM_ReadCapturedValue>:
 8005230:	b480      	push	{r7}
 8005232:	b085      	sub	sp, #20
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	2b0c      	cmp	r3, #12
 8005242:	d831      	bhi.n	80052a8 <HAL_TIM_ReadCapturedValue+0x78>
 8005244:	a201      	add	r2, pc, #4	@ (adr r2, 800524c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800524a:	bf00      	nop
 800524c:	08005281 	.word	0x08005281
 8005250:	080052a9 	.word	0x080052a9
 8005254:	080052a9 	.word	0x080052a9
 8005258:	080052a9 	.word	0x080052a9
 800525c:	0800528b 	.word	0x0800528b
 8005260:	080052a9 	.word	0x080052a9
 8005264:	080052a9 	.word	0x080052a9
 8005268:	080052a9 	.word	0x080052a9
 800526c:	08005295 	.word	0x08005295
 8005270:	080052a9 	.word	0x080052a9
 8005274:	080052a9 	.word	0x080052a9
 8005278:	080052a9 	.word	0x080052a9
 800527c:	0800529f 	.word	0x0800529f
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	e00f      	b.n	80052aa <HAL_TIM_ReadCapturedValue+0x7a>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	e00a      	b.n	80052aa <HAL_TIM_ReadCapturedValue+0x7a>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800529a:	60fb      	str	r3, [r7, #12]
 800529c:	e005      	b.n	80052aa <HAL_TIM_ReadCapturedValue+0x7a>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	e000      	b.n	80052aa <HAL_TIM_ReadCapturedValue+0x7a>
 80052a8:	bf00      	nop
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	4618      	mov	r0, r3
 80052ae:	3714      	adds	r7, #20
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <HAL_TIM_PeriodElapsedCallback>:
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	bf00      	nop
 80052c2:	370c      	adds	r7, #12
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <HAL_TIM_OC_DelayElapsedCallback>:
 80052cc:	b480      	push	{r7}
 80052ce:	b083      	sub	sp, #12
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	bf00      	nop
 80052d6:	370c      	adds	r7, #12
 80052d8:	46bd      	mov	sp, r7
 80052da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052de:	4770      	bx	lr

080052e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80052e0:	b480      	push	{r7}
 80052e2:	b083      	sub	sp, #12
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	bf00      	nop
 80052ea:	370c      	adds	r7, #12
 80052ec:	46bd      	mov	sp, r7
 80052ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f2:	4770      	bx	lr

080052f4 <HAL_TIM_TriggerCallback>:
 80052f4:	b480      	push	{r7}
 80052f6:	b083      	sub	sp, #12
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	bf00      	nop
 80052fe:	370c      	adds	r7, #12
 8005300:	46bd      	mov	sp, r7
 8005302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005306:	4770      	bx	lr

08005308 <TIM_Base_SetConfig>:
 8005308:	b480      	push	{r7}
 800530a:	b085      	sub	sp, #20
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	6039      	str	r1, [r7, #0]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a46      	ldr	r2, [pc, #280]	@ (8005434 <TIM_Base_SetConfig+0x12c>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d013      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005326:	d00f      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a43      	ldr	r2, [pc, #268]	@ (8005438 <TIM_Base_SetConfig+0x130>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00b      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a42      	ldr	r2, [pc, #264]	@ (800543c <TIM_Base_SetConfig+0x134>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d007      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a41      	ldr	r2, [pc, #260]	@ (8005440 <TIM_Base_SetConfig+0x138>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d003      	beq.n	8005348 <TIM_Base_SetConfig+0x40>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a40      	ldr	r2, [pc, #256]	@ (8005444 <TIM_Base_SetConfig+0x13c>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d108      	bne.n	800535a <TIM_Base_SetConfig+0x52>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800534e:	60fb      	str	r3, [r7, #12]
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	4313      	orrs	r3, r2
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a35      	ldr	r2, [pc, #212]	@ (8005434 <TIM_Base_SetConfig+0x12c>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d01f      	beq.n	80053a2 <TIM_Base_SetConfig+0x9a>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005368:	d01b      	beq.n	80053a2 <TIM_Base_SetConfig+0x9a>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a32      	ldr	r2, [pc, #200]	@ (8005438 <TIM_Base_SetConfig+0x130>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d017      	beq.n	80053a2 <TIM_Base_SetConfig+0x9a>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a31      	ldr	r2, [pc, #196]	@ (800543c <TIM_Base_SetConfig+0x134>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d013      	beq.n	80053a2 <TIM_Base_SetConfig+0x9a>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a30      	ldr	r2, [pc, #192]	@ (8005440 <TIM_Base_SetConfig+0x138>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d00f      	beq.n	80053a2 <TIM_Base_SetConfig+0x9a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a2f      	ldr	r2, [pc, #188]	@ (8005444 <TIM_Base_SetConfig+0x13c>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d00b      	beq.n	80053a2 <TIM_Base_SetConfig+0x9a>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a2e      	ldr	r2, [pc, #184]	@ (8005448 <TIM_Base_SetConfig+0x140>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d007      	beq.n	80053a2 <TIM_Base_SetConfig+0x9a>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4a2d      	ldr	r2, [pc, #180]	@ (800544c <TIM_Base_SetConfig+0x144>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d003      	beq.n	80053a2 <TIM_Base_SetConfig+0x9a>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a2c      	ldr	r2, [pc, #176]	@ (8005450 <TIM_Base_SetConfig+0x148>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d108      	bne.n	80053b4 <TIM_Base_SetConfig+0xac>
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053a8:	60fb      	str	r3, [r7, #12]
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	68fa      	ldr	r2, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	695b      	ldr	r3, [r3, #20]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	68fa      	ldr	r2, [r7, #12]
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	689a      	ldr	r2, [r3, #8]
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	4a16      	ldr	r2, [pc, #88]	@ (8005434 <TIM_Base_SetConfig+0x12c>)
 80053dc:	4293      	cmp	r3, r2
 80053de:	d00f      	beq.n	8005400 <TIM_Base_SetConfig+0xf8>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	4a18      	ldr	r2, [pc, #96]	@ (8005444 <TIM_Base_SetConfig+0x13c>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d00b      	beq.n	8005400 <TIM_Base_SetConfig+0xf8>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	4a17      	ldr	r2, [pc, #92]	@ (8005448 <TIM_Base_SetConfig+0x140>)
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d007      	beq.n	8005400 <TIM_Base_SetConfig+0xf8>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	4a16      	ldr	r2, [pc, #88]	@ (800544c <TIM_Base_SetConfig+0x144>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d003      	beq.n	8005400 <TIM_Base_SetConfig+0xf8>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	4a15      	ldr	r2, [pc, #84]	@ (8005450 <TIM_Base_SetConfig+0x148>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d103      	bne.n	8005408 <TIM_Base_SetConfig+0x100>
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	691a      	ldr	r2, [r3, #16]
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	631a      	str	r2, [r3, #48]	@ 0x30
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	615a      	str	r2, [r3, #20]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	f003 0301 	and.w	r3, r3, #1
 8005416:	2b01      	cmp	r3, #1
 8005418:	d105      	bne.n	8005426 <TIM_Base_SetConfig+0x11e>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	691b      	ldr	r3, [r3, #16]
 800541e:	f023 0201 	bic.w	r2, r3, #1
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	611a      	str	r2, [r3, #16]
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40012c00 	.word	0x40012c00
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40013400 	.word	0x40013400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800

08005454 <TIM_TI1_SetConfig>:
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
 8005460:	603b      	str	r3, [r7, #0]
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	6a1b      	ldr	r3, [r3, #32]
 800546c:	f023 0201 	bic.w	r2, r3, #1
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	621a      	str	r2, [r3, #32]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	699b      	ldr	r3, [r3, #24]
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a26      	ldr	r2, [pc, #152]	@ (8005518 <TIM_TI1_SetConfig+0xc4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d017      	beq.n	80054b2 <TIM_TI1_SetConfig+0x5e>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005488:	d013      	beq.n	80054b2 <TIM_TI1_SetConfig+0x5e>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4a23      	ldr	r2, [pc, #140]	@ (800551c <TIM_TI1_SetConfig+0xc8>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00f      	beq.n	80054b2 <TIM_TI1_SetConfig+0x5e>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4a22      	ldr	r2, [pc, #136]	@ (8005520 <TIM_TI1_SetConfig+0xcc>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d00b      	beq.n	80054b2 <TIM_TI1_SetConfig+0x5e>
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	4a21      	ldr	r2, [pc, #132]	@ (8005524 <TIM_TI1_SetConfig+0xd0>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d007      	beq.n	80054b2 <TIM_TI1_SetConfig+0x5e>
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	4a20      	ldr	r2, [pc, #128]	@ (8005528 <TIM_TI1_SetConfig+0xd4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d003      	beq.n	80054b2 <TIM_TI1_SetConfig+0x5e>
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4a1f      	ldr	r2, [pc, #124]	@ (800552c <TIM_TI1_SetConfig+0xd8>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d101      	bne.n	80054b6 <TIM_TI1_SetConfig+0x62>
 80054b2:	2301      	movs	r3, #1
 80054b4:	e000      	b.n	80054b8 <TIM_TI1_SetConfig+0x64>
 80054b6:	2300      	movs	r3, #0
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d008      	beq.n	80054ce <TIM_TI1_SetConfig+0x7a>
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	f023 0303 	bic.w	r3, r3, #3
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	617b      	str	r3, [r7, #20]
 80054cc:	e003      	b.n	80054d6 <TIM_TI1_SetConfig+0x82>
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	617b      	str	r3, [r7, #20]
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80054dc:	617b      	str	r3, [r7, #20]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	b2db      	uxtb	r3, r3
 80054e4:	697a      	ldr	r2, [r7, #20]
 80054e6:	4313      	orrs	r3, r2
 80054e8:	617b      	str	r3, [r7, #20]
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f023 030a 	bic.w	r3, r3, #10
 80054f0:	613b      	str	r3, [r7, #16]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	f003 030a 	and.w	r3, r3, #10
 80054f8:	693a      	ldr	r2, [r7, #16]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	619a      	str	r2, [r3, #24]
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	621a      	str	r2, [r3, #32]
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40012c00 	.word	0x40012c00
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40013400 	.word	0x40013400
 800552c:	40014000 	.word	0x40014000

08005530 <TIM_TI2_SetConfig>:
 8005530:	b480      	push	{r7}
 8005532:	b087      	sub	sp, #28
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
 800553c:	603b      	str	r3, [r7, #0]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6a1b      	ldr	r3, [r3, #32]
 8005542:	617b      	str	r3, [r7, #20]
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	6a1b      	ldr	r3, [r3, #32]
 8005548:	f023 0210 	bic.w	r2, r3, #16
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	621a      	str	r2, [r3, #32]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800555c:	613b      	str	r3, [r7, #16]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	021b      	lsls	r3, r3, #8
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	4313      	orrs	r3, r2
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800556e:	613b      	str	r3, [r7, #16]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	031b      	lsls	r3, r3, #12
 8005574:	b29b      	uxth	r3, r3
 8005576:	693a      	ldr	r2, [r7, #16]
 8005578:	4313      	orrs	r3, r2
 800557a:	613b      	str	r3, [r7, #16]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005582:	617b      	str	r3, [r7, #20]
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	011b      	lsls	r3, r3, #4
 8005588:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	4313      	orrs	r3, r2
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	619a      	str	r2, [r3, #24]
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	697a      	ldr	r2, [r7, #20]
 800559c:	621a      	str	r2, [r3, #32]
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <TIM_TI3_SetConfig>:
 80055aa:	b480      	push	{r7}
 80055ac:	b087      	sub	sp, #28
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	60f8      	str	r0, [r7, #12]
 80055b2:	60b9      	str	r1, [r7, #8]
 80055b4:	607a      	str	r2, [r7, #4]
 80055b6:	603b      	str	r3, [r7, #0]
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6a1b      	ldr	r3, [r3, #32]
 80055bc:	617b      	str	r3, [r7, #20]
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6a1b      	ldr	r3, [r3, #32]
 80055c2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	621a      	str	r2, [r3, #32]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	613b      	str	r3, [r7, #16]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	613b      	str	r3, [r7, #16]
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4313      	orrs	r3, r2
 80055de:	613b      	str	r3, [r7, #16]
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055e6:	613b      	str	r3, [r7, #16]
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	693a      	ldr	r2, [r7, #16]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	613b      	str	r3, [r7, #16]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	021b      	lsls	r3, r3, #8
 8005600:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005604:	697a      	ldr	r2, [r7, #20]
 8005606:	4313      	orrs	r3, r2
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	61da      	str	r2, [r3, #28]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	621a      	str	r2, [r3, #32]
 8005616:	bf00      	nop
 8005618:	371c      	adds	r7, #28
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr

08005622 <TIM_TI4_SetConfig>:
 8005622:	b480      	push	{r7}
 8005624:	b087      	sub	sp, #28
 8005626:	af00      	add	r7, sp, #0
 8005628:	60f8      	str	r0, [r7, #12]
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	607a      	str	r2, [r7, #4]
 800562e:	603b      	str	r3, [r7, #0]
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6a1b      	ldr	r3, [r3, #32]
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	621a      	str	r2, [r3, #32]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800564e:	613b      	str	r3, [r7, #16]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	021b      	lsls	r3, r3, #8
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	4313      	orrs	r3, r2
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005660:	613b      	str	r3, [r7, #16]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	031b      	lsls	r3, r3, #12
 8005666:	b29b      	uxth	r3, r3
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	4313      	orrs	r3, r2
 800566c:	613b      	str	r3, [r7, #16]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005674:	617b      	str	r3, [r7, #20]
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	031b      	lsls	r3, r3, #12
 800567a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	4313      	orrs	r3, r2
 8005682:	617b      	str	r3, [r7, #20]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	693a      	ldr	r2, [r7, #16]
 8005688:	61da      	str	r2, [r3, #28]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	621a      	str	r2, [r3, #32]
 8005690:	bf00      	nop
 8005692:	371c      	adds	r7, #28
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <TIM_CCxChannelCmd>:
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	f003 031f 	and.w	r3, r3, #31
 80056ae:	2201      	movs	r2, #1
 80056b0:	fa02 f303 	lsl.w	r3, r2, r3
 80056b4:	617b      	str	r3, [r7, #20]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1a      	ldr	r2, [r3, #32]
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	43db      	mvns	r3, r3
 80056be:	401a      	ands	r2, r3
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	621a      	str	r2, [r3, #32]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6a1a      	ldr	r2, [r3, #32]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 031f 	and.w	r3, r3, #31
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	fa01 f303 	lsl.w	r3, r1, r3
 80056d4:	431a      	orrs	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	621a      	str	r2, [r3, #32]
 80056da:	bf00      	nop
 80056dc:	371c      	adds	r7, #28
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
	...

080056e8 <HAL_TIMEx_MasterConfigSynchronization>:
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e068      	b.n	80057d2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60bb      	str	r3, [r7, #8]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a2e      	ldr	r2, [pc, #184]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d004      	beq.n	8005734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a2d      	ldr	r2, [pc, #180]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800573a:	60fb      	str	r3, [r7, #12]
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	68fa      	ldr	r2, [r7, #12]
 800575e:	605a      	str	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a1e      	ldr	r2, [pc, #120]	@ (80057e0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d01d      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005772:	d018      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a1b      	ldr	r2, [pc, #108]	@ (80057e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a1a      	ldr	r2, [pc, #104]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00e      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a18      	ldr	r2, [pc, #96]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d009      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a13      	ldr	r2, [pc, #76]	@ (80057e4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d004      	beq.n	80057a6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a14      	ldr	r2, [pc, #80]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d10c      	bne.n	80057c0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057ac:	60bb      	str	r3, [r7, #8]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	68ba      	ldr	r2, [r7, #8]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60bb      	str	r3, [r7, #8]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	609a      	str	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80057d0:	2300      	movs	r3, #0
 80057d2:	4618      	mov	r0, r3
 80057d4:	3714      	adds	r7, #20
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	40012c00 	.word	0x40012c00
 80057e4:	40013400 	.word	0x40013400
 80057e8:	40000400 	.word	0x40000400
 80057ec:	40000800 	.word	0x40000800
 80057f0:	40000c00 	.word	0x40000c00
 80057f4:	40014000 	.word	0x40014000

080057f8 <HAL_TIMEx_CommutCallback>:
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	bf00      	nop
 8005802:	370c      	adds	r7, #12
 8005804:	46bd      	mov	sp, r7
 8005806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580a:	4770      	bx	lr

0800580c <HAL_TIMEx_BreakCallback>:
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <HAL_TIMEx_Break2Callback>:
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_UART_Init>:
 8005834:	b580      	push	{r7, lr}
 8005836:	b082      	sub	sp, #8
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d101      	bne.n	8005846 <HAL_UART_Init+0x12>
 8005842:	2301      	movs	r3, #1
 8005844:	e040      	b.n	80058c8 <HAL_UART_Init+0x94>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800584a:	2b00      	cmp	r3, #0
 800584c:	d106      	bne.n	800585c <HAL_UART_Init+0x28>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f7fc f96e 	bl	8001b38 <HAL_UART_MspInit>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2224      	movs	r2, #36	@ 0x24
 8005860:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d002      	beq.n	8005880 <HAL_UART_Init+0x4c>
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fb6a 	bl	8005f54 <UART_AdvFeatureConfig>
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 f8af 	bl	80059e4 <UART_SetConfig>
 8005886:	4603      	mov	r3, r0
 8005888:	2b01      	cmp	r3, #1
 800588a:	d101      	bne.n	8005890 <HAL_UART_Init+0x5c>
 800588c:	2301      	movs	r3, #1
 800588e:	e01b      	b.n	80058c8 <HAL_UART_Init+0x94>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	685a      	ldr	r2, [r3, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800589e:	605a      	str	r2, [r3, #4]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	689a      	ldr	r2, [r3, #8]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058ae:	609a      	str	r2, [r3, #8]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681a      	ldr	r2, [r3, #0]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0201 	orr.w	r2, r2, #1
 80058be:	601a      	str	r2, [r3, #0]
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fbe9 	bl	8006098 <UART_CheckIdleState>
 80058c6:	4603      	mov	r3, r0
 80058c8:	4618      	mov	r0, r3
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_Transmit>:
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b08a      	sub	sp, #40	@ 0x28
 80058d4:	af02      	add	r7, sp, #8
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	80fb      	strh	r3, [r7, #6]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80058e4:	2b20      	cmp	r3, #32
 80058e6:	d177      	bne.n	80059d8 <HAL_UART_Transmit+0x108>
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d002      	beq.n	80058f4 <HAL_UART_Transmit+0x24>
 80058ee:	88fb      	ldrh	r3, [r7, #6]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <HAL_UART_Transmit+0x28>
 80058f4:	2301      	movs	r3, #1
 80058f6:	e070      	b.n	80059da <HAL_UART_Transmit+0x10a>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2221      	movs	r2, #33	@ 0x21
 8005904:	67da      	str	r2, [r3, #124]	@ 0x7c
 8005906:	f7fc fb1f 	bl	8001f48 <HAL_GetTick>
 800590a:	6178      	str	r0, [r7, #20]
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	88fa      	ldrh	r2, [r7, #6]
 8005918:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	689b      	ldr	r3, [r3, #8]
 8005920:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005924:	d108      	bne.n	8005938 <HAL_UART_Transmit+0x68>
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	691b      	ldr	r3, [r3, #16]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d104      	bne.n	8005938 <HAL_UART_Transmit+0x68>
 800592e:	2300      	movs	r3, #0
 8005930:	61fb      	str	r3, [r7, #28]
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	e003      	b.n	8005940 <HAL_UART_Transmit+0x70>
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61fb      	str	r3, [r7, #28]
 800593c:	2300      	movs	r3, #0
 800593e:	61bb      	str	r3, [r7, #24]
 8005940:	e02f      	b.n	80059a2 <HAL_UART_Transmit+0xd2>
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	2200      	movs	r2, #0
 800594a:	2180      	movs	r1, #128	@ 0x80
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 fc4b 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 8005952:	4603      	mov	r3, r0
 8005954:	2b00      	cmp	r3, #0
 8005956:	d004      	beq.n	8005962 <HAL_UART_Transmit+0x92>
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	2220      	movs	r2, #32
 800595c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800595e:	2303      	movs	r3, #3
 8005960:	e03b      	b.n	80059da <HAL_UART_Transmit+0x10a>
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d10b      	bne.n	8005980 <HAL_UART_Transmit+0xb0>
 8005968:	69bb      	ldr	r3, [r7, #24]
 800596a:	881a      	ldrh	r2, [r3, #0]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005974:	b292      	uxth	r2, r2
 8005976:	851a      	strh	r2, [r3, #40]	@ 0x28
 8005978:	69bb      	ldr	r3, [r7, #24]
 800597a:	3302      	adds	r3, #2
 800597c:	61bb      	str	r3, [r7, #24]
 800597e:	e007      	b.n	8005990 <HAL_UART_Transmit+0xc0>
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	851a      	strh	r2, [r3, #40]	@ 0x28
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	3301      	adds	r3, #1
 800598e:	61fb      	str	r3, [r7, #28]
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005996:	b29b      	uxth	r3, r3
 8005998:	3b01      	subs	r3, #1
 800599a:	b29a      	uxth	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80059a8:	b29b      	uxth	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1c9      	bne.n	8005942 <HAL_UART_Transmit+0x72>
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2200      	movs	r2, #0
 80059b6:	2140      	movs	r1, #64	@ 0x40
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 fc15 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <HAL_UART_Transmit+0xfe>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80059ca:	2303      	movs	r3, #3
 80059cc:	e005      	b.n	80059da <HAL_UART_Transmit+0x10a>
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2220      	movs	r2, #32
 80059d2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80059d4:	2300      	movs	r3, #0
 80059d6:	e000      	b.n	80059da <HAL_UART_Transmit+0x10a>
 80059d8:	2302      	movs	r3, #2
 80059da:	4618      	mov	r0, r3
 80059dc:	3720      	adds	r7, #32
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <UART_SetConfig>:
 80059e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059e8:	b08a      	sub	sp, #40	@ 0x28
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	60f8      	str	r0, [r7, #12]
 80059ee:	2300      	movs	r3, #0
 80059f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	689a      	ldr	r2, [r3, #8]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	691b      	ldr	r3, [r3, #16]
 80059fc:	431a      	orrs	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	431a      	orrs	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	69db      	ldr	r3, [r3, #28]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	4ba4      	ldr	r3, [pc, #656]	@ (8005ca4 <UART_SetConfig+0x2c0>)
 8005a14:	4013      	ands	r3, r2
 8005a16:	68fa      	ldr	r2, [r7, #12]
 8005a18:	6812      	ldr	r2, [r2, #0]
 8005a1a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a1c:	430b      	orrs	r3, r1
 8005a1e:	6013      	str	r3, [r2, #0]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	68da      	ldr	r2, [r3, #12]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	605a      	str	r2, [r3, #4]
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a99      	ldr	r2, [pc, #612]	@ (8005ca8 <UART_SetConfig+0x2c4>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d004      	beq.n	8005a50 <UART_SetConfig+0x6c>
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6a1b      	ldr	r3, [r3, #32]
 8005a4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a60:	430a      	orrs	r2, r1
 8005a62:	609a      	str	r2, [r3, #8]
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a90      	ldr	r2, [pc, #576]	@ (8005cac <UART_SetConfig+0x2c8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d126      	bne.n	8005abc <UART_SetConfig+0xd8>
 8005a6e:	4b90      	ldr	r3, [pc, #576]	@ (8005cb0 <UART_SetConfig+0x2cc>)
 8005a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a74:	f003 0303 	and.w	r3, r3, #3
 8005a78:	2b03      	cmp	r3, #3
 8005a7a:	d81b      	bhi.n	8005ab4 <UART_SetConfig+0xd0>
 8005a7c:	a201      	add	r2, pc, #4	@ (adr r2, 8005a84 <UART_SetConfig+0xa0>)
 8005a7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a82:	bf00      	nop
 8005a84:	08005a95 	.word	0x08005a95
 8005a88:	08005aa5 	.word	0x08005aa5
 8005a8c:	08005a9d 	.word	0x08005a9d
 8005a90:	08005aad 	.word	0x08005aad
 8005a94:	2301      	movs	r3, #1
 8005a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005a9a:	e116      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005a9c:	2302      	movs	r3, #2
 8005a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aa2:	e112      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005aa4:	2304      	movs	r3, #4
 8005aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aaa:	e10e      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005aac:	2308      	movs	r3, #8
 8005aae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ab2:	e10a      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005ab4:	2310      	movs	r3, #16
 8005ab6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005aba:	e106      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a7c      	ldr	r2, [pc, #496]	@ (8005cb4 <UART_SetConfig+0x2d0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d138      	bne.n	8005b38 <UART_SetConfig+0x154>
 8005ac6:	4b7a      	ldr	r3, [pc, #488]	@ (8005cb0 <UART_SetConfig+0x2cc>)
 8005ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005acc:	f003 030c 	and.w	r3, r3, #12
 8005ad0:	2b0c      	cmp	r3, #12
 8005ad2:	d82d      	bhi.n	8005b30 <UART_SetConfig+0x14c>
 8005ad4:	a201      	add	r2, pc, #4	@ (adr r2, 8005adc <UART_SetConfig+0xf8>)
 8005ad6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ada:	bf00      	nop
 8005adc:	08005b11 	.word	0x08005b11
 8005ae0:	08005b31 	.word	0x08005b31
 8005ae4:	08005b31 	.word	0x08005b31
 8005ae8:	08005b31 	.word	0x08005b31
 8005aec:	08005b21 	.word	0x08005b21
 8005af0:	08005b31 	.word	0x08005b31
 8005af4:	08005b31 	.word	0x08005b31
 8005af8:	08005b31 	.word	0x08005b31
 8005afc:	08005b19 	.word	0x08005b19
 8005b00:	08005b31 	.word	0x08005b31
 8005b04:	08005b31 	.word	0x08005b31
 8005b08:	08005b31 	.word	0x08005b31
 8005b0c:	08005b29 	.word	0x08005b29
 8005b10:	2300      	movs	r3, #0
 8005b12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b16:	e0d8      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b18:	2302      	movs	r3, #2
 8005b1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b1e:	e0d4      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b20:	2304      	movs	r3, #4
 8005b22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b26:	e0d0      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b28:	2308      	movs	r3, #8
 8005b2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b2e:	e0cc      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b30:	2310      	movs	r3, #16
 8005b32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b36:	e0c8      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a5e      	ldr	r2, [pc, #376]	@ (8005cb8 <UART_SetConfig+0x2d4>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d125      	bne.n	8005b8e <UART_SetConfig+0x1aa>
 8005b42:	4b5b      	ldr	r3, [pc, #364]	@ (8005cb0 <UART_SetConfig+0x2cc>)
 8005b44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b48:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005b4c:	2b30      	cmp	r3, #48	@ 0x30
 8005b4e:	d016      	beq.n	8005b7e <UART_SetConfig+0x19a>
 8005b50:	2b30      	cmp	r3, #48	@ 0x30
 8005b52:	d818      	bhi.n	8005b86 <UART_SetConfig+0x1a2>
 8005b54:	2b20      	cmp	r3, #32
 8005b56:	d00a      	beq.n	8005b6e <UART_SetConfig+0x18a>
 8005b58:	2b20      	cmp	r3, #32
 8005b5a:	d814      	bhi.n	8005b86 <UART_SetConfig+0x1a2>
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d002      	beq.n	8005b66 <UART_SetConfig+0x182>
 8005b60:	2b10      	cmp	r3, #16
 8005b62:	d008      	beq.n	8005b76 <UART_SetConfig+0x192>
 8005b64:	e00f      	b.n	8005b86 <UART_SetConfig+0x1a2>
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b6c:	e0ad      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b6e:	2302      	movs	r3, #2
 8005b70:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b74:	e0a9      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b76:	2304      	movs	r3, #4
 8005b78:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b7c:	e0a5      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b7e:	2308      	movs	r3, #8
 8005b80:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b84:	e0a1      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b86:	2310      	movs	r3, #16
 8005b88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005b8c:	e09d      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	4a4a      	ldr	r2, [pc, #296]	@ (8005cbc <UART_SetConfig+0x2d8>)
 8005b94:	4293      	cmp	r3, r2
 8005b96:	d125      	bne.n	8005be4 <UART_SetConfig+0x200>
 8005b98:	4b45      	ldr	r3, [pc, #276]	@ (8005cb0 <UART_SetConfig+0x2cc>)
 8005b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8005ba2:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ba4:	d016      	beq.n	8005bd4 <UART_SetConfig+0x1f0>
 8005ba6:	2bc0      	cmp	r3, #192	@ 0xc0
 8005ba8:	d818      	bhi.n	8005bdc <UART_SetConfig+0x1f8>
 8005baa:	2b80      	cmp	r3, #128	@ 0x80
 8005bac:	d00a      	beq.n	8005bc4 <UART_SetConfig+0x1e0>
 8005bae:	2b80      	cmp	r3, #128	@ 0x80
 8005bb0:	d814      	bhi.n	8005bdc <UART_SetConfig+0x1f8>
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <UART_SetConfig+0x1d8>
 8005bb6:	2b40      	cmp	r3, #64	@ 0x40
 8005bb8:	d008      	beq.n	8005bcc <UART_SetConfig+0x1e8>
 8005bba:	e00f      	b.n	8005bdc <UART_SetConfig+0x1f8>
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bc2:	e082      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005bc4:	2302      	movs	r3, #2
 8005bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bca:	e07e      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005bcc:	2304      	movs	r3, #4
 8005bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bd2:	e07a      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005bd4:	2308      	movs	r3, #8
 8005bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005bda:	e076      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005bdc:	2310      	movs	r3, #16
 8005bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005be2:	e072      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4a35      	ldr	r2, [pc, #212]	@ (8005cc0 <UART_SetConfig+0x2dc>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d12a      	bne.n	8005c44 <UART_SetConfig+0x260>
 8005bee:	4b30      	ldr	r3, [pc, #192]	@ (8005cb0 <UART_SetConfig+0x2cc>)
 8005bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bf4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bf8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bfc:	d01a      	beq.n	8005c34 <UART_SetConfig+0x250>
 8005bfe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c02:	d81b      	bhi.n	8005c3c <UART_SetConfig+0x258>
 8005c04:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c08:	d00c      	beq.n	8005c24 <UART_SetConfig+0x240>
 8005c0a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c0e:	d815      	bhi.n	8005c3c <UART_SetConfig+0x258>
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d003      	beq.n	8005c1c <UART_SetConfig+0x238>
 8005c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c18:	d008      	beq.n	8005c2c <UART_SetConfig+0x248>
 8005c1a:	e00f      	b.n	8005c3c <UART_SetConfig+0x258>
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c22:	e052      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c24:	2302      	movs	r3, #2
 8005c26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c2a:	e04e      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c2c:	2304      	movs	r3, #4
 8005c2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c32:	e04a      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c34:	2308      	movs	r3, #8
 8005c36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c3a:	e046      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c3c:	2310      	movs	r3, #16
 8005c3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c42:	e042      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a17      	ldr	r2, [pc, #92]	@ (8005ca8 <UART_SetConfig+0x2c4>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d13a      	bne.n	8005cc4 <UART_SetConfig+0x2e0>
 8005c4e:	4b18      	ldr	r3, [pc, #96]	@ (8005cb0 <UART_SetConfig+0x2cc>)
 8005c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c54:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005c58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c5c:	d01a      	beq.n	8005c94 <UART_SetConfig+0x2b0>
 8005c5e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005c62:	d81b      	bhi.n	8005c9c <UART_SetConfig+0x2b8>
 8005c64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c68:	d00c      	beq.n	8005c84 <UART_SetConfig+0x2a0>
 8005c6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005c6e:	d815      	bhi.n	8005c9c <UART_SetConfig+0x2b8>
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d003      	beq.n	8005c7c <UART_SetConfig+0x298>
 8005c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c78:	d008      	beq.n	8005c8c <UART_SetConfig+0x2a8>
 8005c7a:	e00f      	b.n	8005c9c <UART_SetConfig+0x2b8>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c82:	e022      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c84:	2302      	movs	r3, #2
 8005c86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c8a:	e01e      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c92:	e01a      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c94:	2308      	movs	r3, #8
 8005c96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005c9a:	e016      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005ca2:	e012      	b.n	8005cca <UART_SetConfig+0x2e6>
 8005ca4:	efff69f3 	.word	0xefff69f3
 8005ca8:	40008000 	.word	0x40008000
 8005cac:	40013800 	.word	0x40013800
 8005cb0:	40021000 	.word	0x40021000
 8005cb4:	40004400 	.word	0x40004400
 8005cb8:	40004800 	.word	0x40004800
 8005cbc:	40004c00 	.word	0x40004c00
 8005cc0:	40005000 	.word	0x40005000
 8005cc4:	2310      	movs	r3, #16
 8005cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	4a9f      	ldr	r2, [pc, #636]	@ (8005f4c <UART_SetConfig+0x568>)
 8005cd0:	4293      	cmp	r3, r2
 8005cd2:	d17a      	bne.n	8005dca <UART_SetConfig+0x3e6>
 8005cd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005cd8:	2b08      	cmp	r3, #8
 8005cda:	d824      	bhi.n	8005d26 <UART_SetConfig+0x342>
 8005cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce4 <UART_SetConfig+0x300>)
 8005cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce2:	bf00      	nop
 8005ce4:	08005d09 	.word	0x08005d09
 8005ce8:	08005d27 	.word	0x08005d27
 8005cec:	08005d11 	.word	0x08005d11
 8005cf0:	08005d27 	.word	0x08005d27
 8005cf4:	08005d17 	.word	0x08005d17
 8005cf8:	08005d27 	.word	0x08005d27
 8005cfc:	08005d27 	.word	0x08005d27
 8005d00:	08005d27 	.word	0x08005d27
 8005d04:	08005d1f 	.word	0x08005d1f
 8005d08:	f7fd f9fa 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8005d0c:	61f8      	str	r0, [r7, #28]
 8005d0e:	e010      	b.n	8005d32 <UART_SetConfig+0x34e>
 8005d10:	4b8f      	ldr	r3, [pc, #572]	@ (8005f50 <UART_SetConfig+0x56c>)
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	e00d      	b.n	8005d32 <UART_SetConfig+0x34e>
 8005d16:	f7fd f95b 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8005d1a:	61f8      	str	r0, [r7, #28]
 8005d1c:	e009      	b.n	8005d32 <UART_SetConfig+0x34e>
 8005d1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d22:	61fb      	str	r3, [r7, #28]
 8005d24:	e005      	b.n	8005d32 <UART_SetConfig+0x34e>
 8005d26:	2300      	movs	r3, #0
 8005d28:	61fb      	str	r3, [r7, #28]
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d30:	bf00      	nop
 8005d32:	69fb      	ldr	r3, [r7, #28]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f000 80fb 	beq.w	8005f30 <UART_SetConfig+0x54c>
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	005b      	lsls	r3, r3, #1
 8005d42:	4413      	add	r3, r2
 8005d44:	69fa      	ldr	r2, [r7, #28]
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d305      	bcc.n	8005d56 <UART_SetConfig+0x372>
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	685b      	ldr	r3, [r3, #4]
 8005d4e:	031b      	lsls	r3, r3, #12
 8005d50:	69fa      	ldr	r2, [r7, #28]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d903      	bls.n	8005d5e <UART_SetConfig+0x37a>
 8005d56:	2301      	movs	r3, #1
 8005d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005d5c:	e0e8      	b.n	8005f30 <UART_SetConfig+0x54c>
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	2200      	movs	r2, #0
 8005d62:	461c      	mov	r4, r3
 8005d64:	4615      	mov	r5, r2
 8005d66:	f04f 0200 	mov.w	r2, #0
 8005d6a:	f04f 0300 	mov.w	r3, #0
 8005d6e:	022b      	lsls	r3, r5, #8
 8005d70:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8005d74:	0222      	lsls	r2, r4, #8
 8005d76:	68f9      	ldr	r1, [r7, #12]
 8005d78:	6849      	ldr	r1, [r1, #4]
 8005d7a:	0849      	lsrs	r1, r1, #1
 8005d7c:	2000      	movs	r0, #0
 8005d7e:	4688      	mov	r8, r1
 8005d80:	4681      	mov	r9, r0
 8005d82:	eb12 0a08 	adds.w	sl, r2, r8
 8005d86:	eb43 0b09 	adc.w	fp, r3, r9
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	603b      	str	r3, [r7, #0]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d98:	4650      	mov	r0, sl
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	f7fa ff54 	bl	8000c48 <__aeabi_uldivmod>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4613      	mov	r3, r2
 8005da6:	61bb      	str	r3, [r7, #24]
 8005da8:	69bb      	ldr	r3, [r7, #24]
 8005daa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005dae:	d308      	bcc.n	8005dc2 <UART_SetConfig+0x3de>
 8005db0:	69bb      	ldr	r3, [r7, #24]
 8005db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005db6:	d204      	bcs.n	8005dc2 <UART_SetConfig+0x3de>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	69ba      	ldr	r2, [r7, #24]
 8005dbe:	60da      	str	r2, [r3, #12]
 8005dc0:	e0b6      	b.n	8005f30 <UART_SetConfig+0x54c>
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005dc8:	e0b2      	b.n	8005f30 <UART_SetConfig+0x54c>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dd2:	d15e      	bne.n	8005e92 <UART_SetConfig+0x4ae>
 8005dd4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005dd8:	2b08      	cmp	r3, #8
 8005dda:	d828      	bhi.n	8005e2e <UART_SetConfig+0x44a>
 8005ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8005de4 <UART_SetConfig+0x400>)
 8005dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de2:	bf00      	nop
 8005de4:	08005e09 	.word	0x08005e09
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e19 	.word	0x08005e19
 8005df0:	08005e2f 	.word	0x08005e2f
 8005df4:	08005e1f 	.word	0x08005e1f
 8005df8:	08005e2f 	.word	0x08005e2f
 8005dfc:	08005e2f 	.word	0x08005e2f
 8005e00:	08005e2f 	.word	0x08005e2f
 8005e04:	08005e27 	.word	0x08005e27
 8005e08:	f7fd f97a 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8005e0c:	61f8      	str	r0, [r7, #28]
 8005e0e:	e014      	b.n	8005e3a <UART_SetConfig+0x456>
 8005e10:	f7fd f98c 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8005e14:	61f8      	str	r0, [r7, #28]
 8005e16:	e010      	b.n	8005e3a <UART_SetConfig+0x456>
 8005e18:	4b4d      	ldr	r3, [pc, #308]	@ (8005f50 <UART_SetConfig+0x56c>)
 8005e1a:	61fb      	str	r3, [r7, #28]
 8005e1c:	e00d      	b.n	8005e3a <UART_SetConfig+0x456>
 8005e1e:	f7fd f8d7 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8005e22:	61f8      	str	r0, [r7, #28]
 8005e24:	e009      	b.n	8005e3a <UART_SetConfig+0x456>
 8005e26:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005e2a:	61fb      	str	r3, [r7, #28]
 8005e2c:	e005      	b.n	8005e3a <UART_SetConfig+0x456>
 8005e2e:	2300      	movs	r3, #0
 8005e30:	61fb      	str	r3, [r7, #28]
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e38:	bf00      	nop
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d077      	beq.n	8005f30 <UART_SetConfig+0x54c>
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	005a      	lsls	r2, r3, #1
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	085b      	lsrs	r3, r3, #1
 8005e4a:	441a      	add	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	685b      	ldr	r3, [r3, #4]
 8005e50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	2b0f      	cmp	r3, #15
 8005e5a:	d916      	bls.n	8005e8a <UART_SetConfig+0x4a6>
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e62:	d212      	bcs.n	8005e8a <UART_SetConfig+0x4a6>
 8005e64:	69bb      	ldr	r3, [r7, #24]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f023 030f 	bic.w	r3, r3, #15
 8005e6c:	82fb      	strh	r3, [r7, #22]
 8005e6e:	69bb      	ldr	r3, [r7, #24]
 8005e70:	085b      	lsrs	r3, r3, #1
 8005e72:	b29b      	uxth	r3, r3
 8005e74:	f003 0307 	and.w	r3, r3, #7
 8005e78:	b29a      	uxth	r2, r3
 8005e7a:	8afb      	ldrh	r3, [r7, #22]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	82fb      	strh	r3, [r7, #22]
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	8afa      	ldrh	r2, [r7, #22]
 8005e86:	60da      	str	r2, [r3, #12]
 8005e88:	e052      	b.n	8005f30 <UART_SetConfig+0x54c>
 8005e8a:	2301      	movs	r3, #1
 8005e8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005e90:	e04e      	b.n	8005f30 <UART_SetConfig+0x54c>
 8005e92:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005e96:	2b08      	cmp	r3, #8
 8005e98:	d827      	bhi.n	8005eea <UART_SetConfig+0x506>
 8005e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea0 <UART_SetConfig+0x4bc>)
 8005e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ea0:	08005ec5 	.word	0x08005ec5
 8005ea4:	08005ecd 	.word	0x08005ecd
 8005ea8:	08005ed5 	.word	0x08005ed5
 8005eac:	08005eeb 	.word	0x08005eeb
 8005eb0:	08005edb 	.word	0x08005edb
 8005eb4:	08005eeb 	.word	0x08005eeb
 8005eb8:	08005eeb 	.word	0x08005eeb
 8005ebc:	08005eeb 	.word	0x08005eeb
 8005ec0:	08005ee3 	.word	0x08005ee3
 8005ec4:	f7fd f91c 	bl	8003100 <HAL_RCC_GetPCLK1Freq>
 8005ec8:	61f8      	str	r0, [r7, #28]
 8005eca:	e014      	b.n	8005ef6 <UART_SetConfig+0x512>
 8005ecc:	f7fd f92e 	bl	800312c <HAL_RCC_GetPCLK2Freq>
 8005ed0:	61f8      	str	r0, [r7, #28]
 8005ed2:	e010      	b.n	8005ef6 <UART_SetConfig+0x512>
 8005ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8005f50 <UART_SetConfig+0x56c>)
 8005ed6:	61fb      	str	r3, [r7, #28]
 8005ed8:	e00d      	b.n	8005ef6 <UART_SetConfig+0x512>
 8005eda:	f7fd f879 	bl	8002fd0 <HAL_RCC_GetSysClockFreq>
 8005ede:	61f8      	str	r0, [r7, #28]
 8005ee0:	e009      	b.n	8005ef6 <UART_SetConfig+0x512>
 8005ee2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005ee6:	61fb      	str	r3, [r7, #28]
 8005ee8:	e005      	b.n	8005ef6 <UART_SetConfig+0x512>
 8005eea:	2300      	movs	r3, #0
 8005eec:	61fb      	str	r3, [r7, #28]
 8005eee:	2301      	movs	r3, #1
 8005ef0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005ef4:	bf00      	nop
 8005ef6:	69fb      	ldr	r3, [r7, #28]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d019      	beq.n	8005f30 <UART_SetConfig+0x54c>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	085a      	lsrs	r2, r3, #1
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	441a      	add	r2, r3
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f0e:	61bb      	str	r3, [r7, #24]
 8005f10:	69bb      	ldr	r3, [r7, #24]
 8005f12:	2b0f      	cmp	r3, #15
 8005f14:	d909      	bls.n	8005f2a <UART_SetConfig+0x546>
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f1c:	d205      	bcs.n	8005f2a <UART_SetConfig+0x546>
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	60da      	str	r2, [r3, #12]
 8005f28:	e002      	b.n	8005f30 <UART_SetConfig+0x54c>
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	669a      	str	r2, [r3, #104]	@ 0x68
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	66da      	str	r2, [r3, #108]	@ 0x6c
 8005f3c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8005f40:	4618      	mov	r0, r3
 8005f42:	3728      	adds	r7, #40	@ 0x28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f4a:	bf00      	nop
 8005f4c:	40008000 	.word	0x40008000
 8005f50:	00f42400 	.word	0x00f42400

08005f54 <UART_AdvFeatureConfig>:
 8005f54:	b480      	push	{r7}
 8005f56:	b083      	sub	sp, #12
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <UART_AdvFeatureConfig+0x2a>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	605a      	str	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <UART_AdvFeatureConfig+0x4c>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	605a      	str	r2, [r3, #4]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <UART_AdvFeatureConfig+0x6e>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	430a      	orrs	r2, r1
 8005fc0:	605a      	str	r2, [r3, #4]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fc6:	f003 0304 	and.w	r3, r3, #4
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <UART_AdvFeatureConfig+0x90>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	605a      	str	r2, [r3, #4]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe8:	f003 0310 	and.w	r3, r3, #16
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00a      	beq.n	8006006 <UART_AdvFeatureConfig+0xb2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	430a      	orrs	r2, r1
 8006004:	609a      	str	r2, [r3, #8]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800600a:	f003 0320 	and.w	r3, r3, #32
 800600e:	2b00      	cmp	r3, #0
 8006010:	d00a      	beq.n	8006028 <UART_AdvFeatureConfig+0xd4>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800602c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01a      	beq.n	800606a <UART_AdvFeatureConfig+0x116>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	685b      	ldr	r3, [r3, #4]
 800603a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	430a      	orrs	r2, r1
 8006048:	605a      	str	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800604e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006052:	d10a      	bne.n	800606a <UART_AdvFeatureConfig+0x116>
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	430a      	orrs	r2, r1
 8006068:	605a      	str	r2, [r3, #4]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800606e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00a      	beq.n	800608c <UART_AdvFeatureConfig+0x138>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	430a      	orrs	r2, r1
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	bf00      	nop
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <UART_CheckIdleState>:
 8006098:	b580      	push	{r7, lr}
 800609a:	b098      	sub	sp, #96	@ 0x60
 800609c:	af02      	add	r7, sp, #8
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80060a8:	f7fb ff4e 	bl	8001f48 <HAL_GetTick>
 80060ac:	6578      	str	r0, [r7, #84]	@ 0x54
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f003 0308 	and.w	r3, r3, #8
 80060b8:	2b08      	cmp	r3, #8
 80060ba:	d12e      	bne.n	800611a <UART_CheckIdleState+0x82>
 80060bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060c0:	9300      	str	r3, [sp, #0]
 80060c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c4:	2200      	movs	r2, #0
 80060c6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060ca:	6878      	ldr	r0, [r7, #4]
 80060cc:	f000 f88c 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d021      	beq.n	800611a <UART_CheckIdleState+0x82>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	e853 3f00 	ldrex	r3, [r3]
 80060e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80060e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060ea:	653b      	str	r3, [r7, #80]	@ 0x50
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	461a      	mov	r2, r3
 80060f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f6:	643a      	str	r2, [r7, #64]	@ 0x40
 80060f8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060fc:	e841 2300 	strex	r3, r2, [r1]
 8006100:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d1e6      	bne.n	80060d6 <UART_CheckIdleState+0x3e>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	67da      	str	r2, [r3, #124]	@ 0x7c
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8006116:	2303      	movs	r3, #3
 8006118:	e062      	b.n	80061e0 <UART_CheckIdleState+0x148>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b04      	cmp	r3, #4
 8006126:	d149      	bne.n	80061bc <UART_CheckIdleState+0x124>
 8006128:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800612c:	9300      	str	r3, [sp, #0]
 800612e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006130:	2200      	movs	r2, #0
 8006132:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f000 f856 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 800613c:	4603      	mov	r3, r0
 800613e:	2b00      	cmp	r3, #0
 8006140:	d03c      	beq.n	80061bc <UART_CheckIdleState+0x124>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	627b      	str	r3, [r7, #36]	@ 0x24
 8006148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614a:	e853 3f00 	ldrex	r3, [r3]
 800614e:	623b      	str	r3, [r7, #32]
 8006150:	6a3b      	ldr	r3, [r7, #32]
 8006152:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	461a      	mov	r2, r3
 800615e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006160:	633b      	str	r3, [r7, #48]	@ 0x30
 8006162:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006164:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006166:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800616e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e6      	bne.n	8006142 <UART_CheckIdleState+0xaa>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3308      	adds	r3, #8
 800617a:	613b      	str	r3, [r7, #16]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	e853 3f00 	ldrex	r3, [r3]
 8006182:	60fb      	str	r3, [r7, #12]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0301 	bic.w	r3, r3, #1
 800618a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	3308      	adds	r3, #8
 8006192:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006194:	61fa      	str	r2, [r7, #28]
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	69b9      	ldr	r1, [r7, #24]
 800619a:	69fa      	ldr	r2, [r7, #28]
 800619c:	e841 2300 	strex	r3, r2, [r1]
 80061a0:	617b      	str	r3, [r7, #20]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d1e5      	bne.n	8006174 <UART_CheckIdleState+0xdc>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2220      	movs	r2, #32
 80061ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80061b8:	2303      	movs	r3, #3
 80061ba:	e011      	b.n	80061e0 <UART_CheckIdleState+0x148>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2220      	movs	r2, #32
 80061c0:	67da      	str	r2, [r3, #124]	@ 0x7c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	661a      	str	r2, [r3, #96]	@ 0x60
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	665a      	str	r2, [r3, #100]	@ 0x64
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 80061de:	2300      	movs	r3, #0
 80061e0:	4618      	mov	r0, r3
 80061e2:	3758      	adds	r7, #88	@ 0x58
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <UART_WaitOnFlagUntilTimeout>:
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	71fb      	strb	r3, [r7, #7]
 80061f8:	e04f      	b.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d04b      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006202:	f7fb fea1 	bl	8001f48 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	429a      	cmp	r2, r3
 8006210:	d302      	bcc.n	8006218 <UART_WaitOnFlagUntilTimeout+0x30>
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <UART_WaitOnFlagUntilTimeout+0x34>
 8006218:	2303      	movs	r3, #3
 800621a:	e04e      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xd2>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d037      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b80      	cmp	r3, #128	@ 0x80
 800622e:	d034      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b40      	cmp	r3, #64	@ 0x40
 8006234:	d031      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b08      	cmp	r3, #8
 8006242:	d110      	bne.n	8006266 <UART_WaitOnFlagUntilTimeout+0x7e>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2208      	movs	r2, #8
 800624a:	621a      	str	r2, [r3, #32]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f838 	bl	80062c2 <UART_EndRxTransfer>
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2208      	movs	r2, #8
 8006256:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8006262:	2301      	movs	r3, #1
 8006264:	e029      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xd2>
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006274:	d111      	bne.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800627e:	621a      	str	r2, [r3, #32]
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f81e 	bl	80062c2 <UART_EndRxTransfer>
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78
 8006296:	2303      	movs	r3, #3
 8006298:	e00f      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xd2>
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	bf0c      	ite	eq
 80062aa:	2301      	moveq	r3, #1
 80062ac:	2300      	movne	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d0a0      	beq.n	80061fa <UART_WaitOnFlagUntilTimeout+0x12>
 80062b8:	2300      	movs	r3, #0
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <UART_EndRxTransfer>:
 80062c2:	b480      	push	{r7}
 80062c4:	b095      	sub	sp, #84	@ 0x54
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	637b      	str	r3, [r7, #52]	@ 0x34
 80062d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d2:	e853 3f00 	ldrex	r3, [r3]
 80062d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80062d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062da:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80062ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062f0:	e841 2300 	strex	r3, r2, [r1]
 80062f4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1e6      	bne.n	80062ca <UART_EndRxTransfer+0x8>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	3308      	adds	r3, #8
 8006302:	623b      	str	r3, [r7, #32]
 8006304:	6a3b      	ldr	r3, [r7, #32]
 8006306:	e853 3f00 	ldrex	r3, [r3]
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	f023 0301 	bic.w	r3, r3, #1
 8006312:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800631c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800631e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006320:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006322:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006324:	e841 2300 	strex	r3, r2, [r1]
 8006328:	627b      	str	r3, [r7, #36]	@ 0x24
 800632a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632c:	2b00      	cmp	r3, #0
 800632e:	d1e5      	bne.n	80062fc <UART_EndRxTransfer+0x3a>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006334:	2b01      	cmp	r3, #1
 8006336:	d118      	bne.n	800636a <UART_EndRxTransfer+0xa8>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	60bb      	str	r3, [r7, #8]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	f023 0310 	bic.w	r3, r3, #16
 800634c:	647b      	str	r3, [r7, #68]	@ 0x44
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006356:	61bb      	str	r3, [r7, #24]
 8006358:	617a      	str	r2, [r7, #20]
 800635a:	6979      	ldr	r1, [r7, #20]
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	613b      	str	r3, [r7, #16]
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e6      	bne.n	8006338 <UART_EndRxTransfer+0x76>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	661a      	str	r2, [r3, #96]	@ 0x60
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	669a      	str	r2, [r3, #104]	@ 0x68
 800637e:	bf00      	nop
 8006380:	3754      	adds	r7, #84	@ 0x54
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006390:	4904      	ldr	r1, [pc, #16]	@ (80063a4 <MX_FATFS_Init+0x18>)
 8006392:	4805      	ldr	r0, [pc, #20]	@ (80063a8 <MX_FATFS_Init+0x1c>)
 8006394:	f003 f82a 	bl	80093ec <FATFS_LinkDriver>
 8006398:	4603      	mov	r3, r0
 800639a:	461a      	mov	r2, r3
 800639c:	4b03      	ldr	r3, [pc, #12]	@ (80063ac <MX_FATFS_Init+0x20>)
 800639e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80063a0:	bf00      	nop
 80063a2:	bd80      	pop	{r7, pc}
 80063a4:	2000246c 	.word	0x2000246c
 80063a8:	2000000c 	.word	0x2000000c
 80063ac:	20002468 	.word	0x20002468

080063b0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80063b4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USER_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize(BYTE pdrv)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b082      	sub	sp, #8
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	4603      	mov	r3, r0
 80063c8:	71fb      	strb	r3, [r7, #7]
    if (pdrv != 0) return STA_NOINIT;
 80063ca:	79fb      	ldrb	r3, [r7, #7]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d001      	beq.n	80063d4 <USER_initialize+0x14>
 80063d0:	2301      	movs	r3, #1
 80063d2:	e011      	b.n	80063f8 <USER_initialize+0x38>

    if (SD_initialize(pdrv) == 0)
 80063d4:	79fb      	ldrb	r3, [r7, #7]
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fa fe1a 	bl	8001010 <SD_initialize>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d104      	bne.n	80063ec <USER_initialize+0x2c>
    {
        Stat = 0;
 80063e2:	4b07      	ldr	r3, [pc, #28]	@ (8006400 <USER_initialize+0x40>)
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
        return RES_OK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	e005      	b.n	80063f8 <USER_initialize+0x38>
    }

    Stat = STA_NOINIT;
 80063ec:	4b04      	ldr	r3, [pc, #16]	@ (8006400 <USER_initialize+0x40>)
 80063ee:	2201      	movs	r2, #1
 80063f0:	701a      	strb	r2, [r3, #0]
    return Stat;
 80063f2:	4b03      	ldr	r3, [pc, #12]	@ (8006400 <USER_initialize+0x40>)
 80063f4:	781b      	ldrb	r3, [r3, #0]
 80063f6:	b2db      	uxtb	r3, r3
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}
 8006400:	20000009 	.word	0x20000009

08006404 <USER_status>:
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status(BYTE pdrv)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	71fb      	strb	r3, [r7, #7]
    if (pdrv != 0) return STA_NOINIT;
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d001      	beq.n	8006418 <USER_status+0x14>
 8006414:	2301      	movs	r3, #1
 8006416:	e002      	b.n	800641e <USER_status+0x1a>

    return Stat;
 8006418:	4b04      	ldr	r3, [pc, #16]	@ (800642c <USER_status+0x28>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	b2db      	uxtb	r3, r3
}
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	20000009 	.word	0x20000009

08006430 <USER_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USER_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8006430:	b580      	push	{r7, lr}
 8006432:	b084      	sub	sp, #16
 8006434:	af00      	add	r7, sp, #0
 8006436:	60b9      	str	r1, [r7, #8]
 8006438:	607a      	str	r2, [r7, #4]
 800643a:	603b      	str	r3, [r7, #0]
 800643c:	4603      	mov	r3, r0
 800643e:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || !count) return RES_PARERR;
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d102      	bne.n	800644c <USER_read+0x1c>
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d101      	bne.n	8006450 <USER_read+0x20>
 800644c:	2304      	movs	r3, #4
 800644e:	e018      	b.n	8006482 <USER_read+0x52>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006450:	4b0e      	ldr	r3, [pc, #56]	@ (800648c <USER_read+0x5c>)
 8006452:	781b      	ldrb	r3, [r3, #0]
 8006454:	b2db      	uxtb	r3, r3
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d001      	beq.n	8006462 <USER_read+0x32>
 800645e:	2303      	movs	r3, #3
 8006460:	e00f      	b.n	8006482 <USER_read+0x52>

    if (count == 1)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b01      	cmp	r3, #1
 8006466:	d10b      	bne.n	8006480 <USER_read+0x50>
    {
        if (SD_read(buff, sector,1) == 0)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	2201      	movs	r2, #1
 800646e:	4619      	mov	r1, r3
 8006470:	68b8      	ldr	r0, [r7, #8]
 8006472:	f7fa fe0b 	bl	800108c <SD_read>
 8006476:	4603      	mov	r3, r0
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <USER_read+0x50>
            return RES_OK;
 800647c:	2300      	movs	r3, #0
 800647e:	e000      	b.n	8006482 <USER_read+0x52>
    {
        if (SD_read(buff, sector, count) == 0)
            return RES_OK;
    }*/

    return RES_ERROR;
 8006480:	2301      	movs	r3, #1
}
 8006482:	4618      	mov	r0, r3
 8006484:	3710      	adds	r7, #16
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	20000009 	.word	0x20000009

08006490 <USER_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USER_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b084      	sub	sp, #16
 8006494:	af00      	add	r7, sp, #0
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
 800649a:	603b      	str	r3, [r7, #0]
 800649c:	4603      	mov	r3, r0
 800649e:	73fb      	strb	r3, [r7, #15]
    if (pdrv != 0 || !count) return RES_PARERR;
 80064a0:	7bfb      	ldrb	r3, [r7, #15]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d102      	bne.n	80064ac <USER_write+0x1c>
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USER_write+0x20>
 80064ac:	2304      	movs	r3, #4
 80064ae:	e018      	b.n	80064e2 <USER_write+0x52>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 80064b0:	4b0e      	ldr	r3, [pc, #56]	@ (80064ec <USER_write+0x5c>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	b2db      	uxtb	r3, r3
 80064b6:	f003 0301 	and.w	r3, r3, #1
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <USER_write+0x32>
 80064be:	2303      	movs	r3, #3
 80064c0:	e00f      	b.n	80064e2 <USER_write+0x52>

    if (count == 1)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d10b      	bne.n	80064e0 <USER_write+0x50>
    {
        if (SD_write(buff, sector,1) == 0)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2201      	movs	r2, #1
 80064ce:	4619      	mov	r1, r3
 80064d0:	68b8      	ldr	r0, [r7, #8]
 80064d2:	f7fa fde9 	bl	80010a8 <SD_write>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d101      	bne.n	80064e0 <USER_write+0x50>
            return RES_OK;
 80064dc:	2300      	movs	r3, #0
 80064de:	e000      	b.n	80064e2 <USER_write+0x52>
    {
        if (SD_writeMultiBlocks(buff, sector, count) == 0)
            return RES_OK;
    }*/

    return RES_ERROR;
 80064e0:	2301      	movs	r3, #1
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3710      	adds	r7, #16
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}
 80064ea:	bf00      	nop
 80064ec:	20000009 	.word	0x20000009

080064f0 <USER_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
 80064f0:	b480      	push	{r7}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	4603      	mov	r3, r0
 80064f8:	603a      	str	r2, [r7, #0]
 80064fa:	71fb      	strb	r3, [r7, #7]
 80064fc:	460b      	mov	r3, r1
 80064fe:	71bb      	strb	r3, [r7, #6]
    if (pdrv != 0) return RES_PARERR;
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d001      	beq.n	800650a <USER_ioctl+0x1a>
 8006506:	2304      	movs	r3, #4
 8006508:	e02a      	b.n	8006560 <USER_ioctl+0x70>
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800650a:	4b18      	ldr	r3, [pc, #96]	@ (800656c <USER_ioctl+0x7c>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	b2db      	uxtb	r3, r3
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d001      	beq.n	800651c <USER_ioctl+0x2c>
 8006518:	2303      	movs	r3, #3
 800651a:	e021      	b.n	8006560 <USER_ioctl+0x70>

    switch (cmd)
 800651c:	79bb      	ldrb	r3, [r7, #6]
 800651e:	2b03      	cmp	r3, #3
 8006520:	d81d      	bhi.n	800655e <USER_ioctl+0x6e>
 8006522:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <USER_ioctl+0x38>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	08006539 	.word	0x08006539
 800652c:	0800653d 	.word	0x0800653d
 8006530:	08006549 	.word	0x08006549
 8006534:	08006555 	.word	0x08006555
    {
    case CTRL_SYNC:
        return RES_OK;
 8006538:	2300      	movs	r3, #0
 800653a:	e011      	b.n	8006560 <USER_ioctl+0x70>
    case GET_SECTOR_COUNT:
        *(DWORD *)buff = 4096;  // Replace with actual SD card sector count
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006542:	601a      	str	r2, [r3, #0]
        return RES_OK;
 8006544:	2300      	movs	r3, #0
 8006546:	e00b      	b.n	8006560 <USER_ioctl+0x70>
    case GET_SECTOR_SIZE:
        *(WORD *)buff = 512;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800654e:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	e005      	b.n	8006560 <USER_ioctl+0x70>
    case GET_BLOCK_SIZE:
        *(DWORD *)buff = 1;
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2201      	movs	r2, #1
 8006558:	601a      	str	r2, [r3, #0]
        return RES_OK;
 800655a:	2300      	movs	r3, #0
 800655c:	e000      	b.n	8006560 <USER_ioctl+0x70>
    }

    return RES_PARERR;
 800655e:	2304      	movs	r3, #4
}
 8006560:	4618      	mov	r0, r3
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	20000009 	.word	0x20000009

08006570 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b084      	sub	sp, #16
 8006574:	af00      	add	r7, sp, #0
 8006576:	4603      	mov	r3, r0
 8006578:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	4a08      	ldr	r2, [pc, #32]	@ (80065a0 <disk_status+0x30>)
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	4413      	add	r3, r2
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	79fa      	ldrb	r2, [r7, #7]
 8006588:	4905      	ldr	r1, [pc, #20]	@ (80065a0 <disk_status+0x30>)
 800658a:	440a      	add	r2, r1
 800658c:	7a12      	ldrb	r2, [r2, #8]
 800658e:	4610      	mov	r0, r2
 8006590:	4798      	blx	r3
 8006592:	4603      	mov	r3, r0
 8006594:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	20002698 	.word	0x20002698

080065a4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80065ae:	2300      	movs	r3, #0
 80065b0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80065b2:	79fb      	ldrb	r3, [r7, #7]
 80065b4:	4a0d      	ldr	r2, [pc, #52]	@ (80065ec <disk_initialize+0x48>)
 80065b6:	5cd3      	ldrb	r3, [r2, r3]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d111      	bne.n	80065e0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80065bc:	79fb      	ldrb	r3, [r7, #7]
 80065be:	4a0b      	ldr	r2, [pc, #44]	@ (80065ec <disk_initialize+0x48>)
 80065c0:	2101      	movs	r1, #1
 80065c2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	4a09      	ldr	r2, [pc, #36]	@ (80065ec <disk_initialize+0x48>)
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4413      	add	r3, r2
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	79fa      	ldrb	r2, [r7, #7]
 80065d2:	4906      	ldr	r1, [pc, #24]	@ (80065ec <disk_initialize+0x48>)
 80065d4:	440a      	add	r2, r1
 80065d6:	7a12      	ldrb	r2, [r2, #8]
 80065d8:	4610      	mov	r0, r2
 80065da:	4798      	blx	r3
 80065dc:	4603      	mov	r3, r0
 80065de:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80065e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}
 80065ea:	bf00      	nop
 80065ec:	20002698 	.word	0x20002698

080065f0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80065f0:	b590      	push	{r4, r7, lr}
 80065f2:	b087      	sub	sp, #28
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	60b9      	str	r1, [r7, #8]
 80065f8:	607a      	str	r2, [r7, #4]
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	4603      	mov	r3, r0
 80065fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006600:	7bfb      	ldrb	r3, [r7, #15]
 8006602:	4a0a      	ldr	r2, [pc, #40]	@ (800662c <disk_read+0x3c>)
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	4413      	add	r3, r2
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	689c      	ldr	r4, [r3, #8]
 800660c:	7bfb      	ldrb	r3, [r7, #15]
 800660e:	4a07      	ldr	r2, [pc, #28]	@ (800662c <disk_read+0x3c>)
 8006610:	4413      	add	r3, r2
 8006612:	7a18      	ldrb	r0, [r3, #8]
 8006614:	683b      	ldr	r3, [r7, #0]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	47a0      	blx	r4
 800661c:	4603      	mov	r3, r0
 800661e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006620:	7dfb      	ldrb	r3, [r7, #23]
}
 8006622:	4618      	mov	r0, r3
 8006624:	371c      	adds	r7, #28
 8006626:	46bd      	mov	sp, r7
 8006628:	bd90      	pop	{r4, r7, pc}
 800662a:	bf00      	nop
 800662c:	20002698 	.word	0x20002698

08006630 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006630:	b590      	push	{r4, r7, lr}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	60b9      	str	r1, [r7, #8]
 8006638:	607a      	str	r2, [r7, #4]
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	4603      	mov	r3, r0
 800663e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006640:	7bfb      	ldrb	r3, [r7, #15]
 8006642:	4a0a      	ldr	r2, [pc, #40]	@ (800666c <disk_write+0x3c>)
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	4413      	add	r3, r2
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	68dc      	ldr	r4, [r3, #12]
 800664c:	7bfb      	ldrb	r3, [r7, #15]
 800664e:	4a07      	ldr	r2, [pc, #28]	@ (800666c <disk_write+0x3c>)
 8006650:	4413      	add	r3, r2
 8006652:	7a18      	ldrb	r0, [r3, #8]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	47a0      	blx	r4
 800665c:	4603      	mov	r3, r0
 800665e:	75fb      	strb	r3, [r7, #23]
  return res;
 8006660:	7dfb      	ldrb	r3, [r7, #23]
}
 8006662:	4618      	mov	r0, r3
 8006664:	371c      	adds	r7, #28
 8006666:	46bd      	mov	sp, r7
 8006668:	bd90      	pop	{r4, r7, pc}
 800666a:	bf00      	nop
 800666c:	20002698 	.word	0x20002698

08006670 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	4603      	mov	r3, r0
 8006678:	603a      	str	r2, [r7, #0]
 800667a:	71fb      	strb	r3, [r7, #7]
 800667c:	460b      	mov	r3, r1
 800667e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8006680:	79fb      	ldrb	r3, [r7, #7]
 8006682:	4a09      	ldr	r2, [pc, #36]	@ (80066a8 <disk_ioctl+0x38>)
 8006684:	009b      	lsls	r3, r3, #2
 8006686:	4413      	add	r3, r2
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	691b      	ldr	r3, [r3, #16]
 800668c:	79fa      	ldrb	r2, [r7, #7]
 800668e:	4906      	ldr	r1, [pc, #24]	@ (80066a8 <disk_ioctl+0x38>)
 8006690:	440a      	add	r2, r1
 8006692:	7a10      	ldrb	r0, [r2, #8]
 8006694:	79b9      	ldrb	r1, [r7, #6]
 8006696:	683a      	ldr	r2, [r7, #0]
 8006698:	4798      	blx	r3
 800669a:	4603      	mov	r3, r0
 800669c:	73fb      	strb	r3, [r7, #15]
  return res;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20002698 	.word	0x20002698

080066ac <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80066ac:	b480      	push	{r7}
 80066ae:	b085      	sub	sp, #20
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3301      	adds	r3, #1
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80066bc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	b21a      	sxth	r2, r3
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	b21b      	sxth	r3, r3
 80066ca:	4313      	orrs	r3, r2
 80066cc:	b21b      	sxth	r3, r3
 80066ce:	81fb      	strh	r3, [r7, #14]
	return rv;
 80066d0:	89fb      	ldrh	r3, [r7, #14]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3714      	adds	r7, #20
 80066d6:	46bd      	mov	sp, r7
 80066d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066dc:	4770      	bx	lr

080066de <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3303      	adds	r3, #3
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	3202      	adds	r2, #2
 80066f6:	7812      	ldrb	r2, [r2, #0]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	021b      	lsls	r3, r3, #8
 8006700:	687a      	ldr	r2, [r7, #4]
 8006702:	3201      	adds	r2, #1
 8006704:	7812      	ldrb	r2, [r2, #0]
 8006706:	4313      	orrs	r3, r2
 8006708:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	021b      	lsls	r3, r3, #8
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	7812      	ldrb	r2, [r2, #0]
 8006712:	4313      	orrs	r3, r2
 8006714:	60fb      	str	r3, [r7, #12]
	return rv;
 8006716:	68fb      	ldr	r3, [r7, #12]
}
 8006718:	4618      	mov	r0, r3
 800671a:	3714      	adds	r7, #20
 800671c:	46bd      	mov	sp, r7
 800671e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006722:	4770      	bx	lr

08006724 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8006724:	b480      	push	{r7}
 8006726:	b083      	sub	sp, #12
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	460b      	mov	r3, r1
 800672e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	1c5a      	adds	r2, r3, #1
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	887a      	ldrh	r2, [r7, #2]
 8006738:	b2d2      	uxtb	r2, r2
 800673a:	701a      	strb	r2, [r3, #0]
 800673c:	887b      	ldrh	r3, [r7, #2]
 800673e:	0a1b      	lsrs	r3, r3, #8
 8006740:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	607a      	str	r2, [r7, #4]
 8006748:	887a      	ldrh	r2, [r7, #2]
 800674a:	b2d2      	uxtb	r2, r2
 800674c:	701a      	strb	r2, [r3, #0]
}
 800674e:	bf00      	nop
 8006750:	370c      	adds	r7, #12
 8006752:	46bd      	mov	sp, r7
 8006754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006758:	4770      	bx	lr

0800675a <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800675a:	b480      	push	{r7}
 800675c:	b083      	sub	sp, #12
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	1c5a      	adds	r2, r3, #1
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	683a      	ldr	r2, [r7, #0]
 800676c:	b2d2      	uxtb	r2, r2
 800676e:	701a      	strb	r2, [r3, #0]
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	0a1b      	lsrs	r3, r3, #8
 8006774:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	1c5a      	adds	r2, r3, #1
 800677a:	607a      	str	r2, [r7, #4]
 800677c:	683a      	ldr	r2, [r7, #0]
 800677e:	b2d2      	uxtb	r2, r2
 8006780:	701a      	strb	r2, [r3, #0]
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	0a1b      	lsrs	r3, r3, #8
 8006786:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	607a      	str	r2, [r7, #4]
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	b2d2      	uxtb	r2, r2
 8006792:	701a      	strb	r2, [r3, #0]
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	0a1b      	lsrs	r3, r3, #8
 8006798:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	683a      	ldr	r2, [r7, #0]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
}
 80067a6:	bf00      	nop
 80067a8:	370c      	adds	r7, #12
 80067aa:	46bd      	mov	sp, r7
 80067ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b0:	4770      	bx	lr

080067b2 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80067b2:	b480      	push	{r7}
 80067b4:	b087      	sub	sp, #28
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	60f8      	str	r0, [r7, #12]
 80067ba:	60b9      	str	r1, [r7, #8]
 80067bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d00d      	beq.n	80067e8 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	1c53      	adds	r3, r2, #1
 80067d0:	613b      	str	r3, [r7, #16]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	1c59      	adds	r1, r3, #1
 80067d6:	6179      	str	r1, [r7, #20]
 80067d8:	7812      	ldrb	r2, [r2, #0]
 80067da:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	3b01      	subs	r3, #1
 80067e0:	607b      	str	r3, [r7, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1f1      	bne.n	80067cc <mem_cpy+0x1a>
	}
}
 80067e8:	bf00      	nop
 80067ea:	371c      	adds	r7, #28
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr

080067f4 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80067f4:	b480      	push	{r7}
 80067f6:	b087      	sub	sp, #28
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	60b9      	str	r1, [r7, #8]
 80067fe:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	617a      	str	r2, [r7, #20]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	b2d2      	uxtb	r2, r2
 800680e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	3b01      	subs	r3, #1
 8006814:	607b      	str	r3, [r7, #4]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d1f3      	bne.n	8006804 <mem_set+0x10>
}
 800681c:	bf00      	nop
 800681e:	bf00      	nop
 8006820:	371c      	adds	r7, #28
 8006822:	46bd      	mov	sp, r7
 8006824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006828:	4770      	bx	lr

0800682a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800682a:	b480      	push	{r7}
 800682c:	b089      	sub	sp, #36	@ 0x24
 800682e:	af00      	add	r7, sp, #0
 8006830:	60f8      	str	r0, [r7, #12]
 8006832:	60b9      	str	r1, [r7, #8]
 8006834:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800683e:	2300      	movs	r3, #0
 8006840:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8006842:	69fb      	ldr	r3, [r7, #28]
 8006844:	1c5a      	adds	r2, r3, #1
 8006846:	61fa      	str	r2, [r7, #28]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	4619      	mov	r1, r3
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	1c5a      	adds	r2, r3, #1
 8006850:	61ba      	str	r2, [r7, #24]
 8006852:	781b      	ldrb	r3, [r3, #0]
 8006854:	1acb      	subs	r3, r1, r3
 8006856:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	3b01      	subs	r3, #1
 800685c:	607b      	str	r3, [r7, #4]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d002      	beq.n	800686a <mem_cmp+0x40>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0eb      	beq.n	8006842 <mem_cmp+0x18>

	return r;
 800686a:	697b      	ldr	r3, [r7, #20]
}
 800686c:	4618      	mov	r0, r3
 800686e:	3724      	adds	r7, #36	@ 0x24
 8006870:	46bd      	mov	sp, r7
 8006872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006876:	4770      	bx	lr

08006878 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
 8006880:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8006882:	e002      	b.n	800688a <chk_chr+0x12>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	3301      	adds	r3, #1
 8006888:	607b      	str	r3, [r7, #4]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d005      	beq.n	800689e <chk_chr+0x26>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	4293      	cmp	r3, r2
 800689c:	d1f2      	bne.n	8006884 <chk_chr+0xc>
	return *str;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	781b      	ldrb	r3, [r3, #0]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	370c      	adds	r7, #12
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
	...

080068b0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80068b0:	b480      	push	{r7}
 80068b2:	b085      	sub	sp, #20
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
 80068b8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80068ba:	2300      	movs	r3, #0
 80068bc:	60bb      	str	r3, [r7, #8]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e029      	b.n	8006918 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80068c4:	4a27      	ldr	r2, [pc, #156]	@ (8006964 <chk_lock+0xb4>)
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	011b      	lsls	r3, r3, #4
 80068ca:	4413      	add	r3, r2
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d01d      	beq.n	800690e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80068d2:	4a24      	ldr	r2, [pc, #144]	@ (8006964 <chk_lock+0xb4>)
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	011b      	lsls	r3, r3, #4
 80068d8:	4413      	add	r3, r2
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	429a      	cmp	r2, r3
 80068e2:	d116      	bne.n	8006912 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80068e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006964 <chk_lock+0xb4>)
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	011b      	lsls	r3, r3, #4
 80068ea:	4413      	add	r3, r2
 80068ec:	3304      	adds	r3, #4
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d10c      	bne.n	8006912 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80068f8:	4a1a      	ldr	r2, [pc, #104]	@ (8006964 <chk_lock+0xb4>)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	011b      	lsls	r3, r3, #4
 80068fe:	4413      	add	r3, r2
 8006900:	3308      	adds	r3, #8
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8006908:	429a      	cmp	r2, r3
 800690a:	d102      	bne.n	8006912 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800690c:	e007      	b.n	800691e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800690e:	2301      	movs	r3, #1
 8006910:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	3301      	adds	r3, #1
 8006916:	60fb      	str	r3, [r7, #12]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d9d2      	bls.n	80068c4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2b02      	cmp	r3, #2
 8006922:	d109      	bne.n	8006938 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d102      	bne.n	8006930 <chk_lock+0x80>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	2b02      	cmp	r3, #2
 800692e:	d101      	bne.n	8006934 <chk_lock+0x84>
 8006930:	2300      	movs	r3, #0
 8006932:	e010      	b.n	8006956 <chk_lock+0xa6>
 8006934:	2312      	movs	r3, #18
 8006936:	e00e      	b.n	8006956 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d108      	bne.n	8006950 <chk_lock+0xa0>
 800693e:	4a09      	ldr	r2, [pc, #36]	@ (8006964 <chk_lock+0xb4>)
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	011b      	lsls	r3, r3, #4
 8006944:	4413      	add	r3, r2
 8006946:	330c      	adds	r3, #12
 8006948:	881b      	ldrh	r3, [r3, #0]
 800694a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800694e:	d101      	bne.n	8006954 <chk_lock+0xa4>
 8006950:	2310      	movs	r3, #16
 8006952:	e000      	b.n	8006956 <chk_lock+0xa6>
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3714      	adds	r7, #20
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	20002478 	.word	0x20002478

08006968 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800696e:	2300      	movs	r3, #0
 8006970:	607b      	str	r3, [r7, #4]
 8006972:	e002      	b.n	800697a <enq_lock+0x12>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3301      	adds	r3, #1
 8006978:	607b      	str	r3, [r7, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b01      	cmp	r3, #1
 800697e:	d806      	bhi.n	800698e <enq_lock+0x26>
 8006980:	4a09      	ldr	r2, [pc, #36]	@ (80069a8 <enq_lock+0x40>)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	011b      	lsls	r3, r3, #4
 8006986:	4413      	add	r3, r2
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f2      	bne.n	8006974 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2b02      	cmp	r3, #2
 8006992:	bf14      	ite	ne
 8006994:	2301      	movne	r3, #1
 8006996:	2300      	moveq	r3, #0
 8006998:	b2db      	uxtb	r3, r3
}
 800699a:	4618      	mov	r0, r3
 800699c:	370c      	adds	r7, #12
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	20002478 	.word	0x20002478

080069ac <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b085      	sub	sp, #20
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
 80069b4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e01f      	b.n	80069fc <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80069bc:	4a41      	ldr	r2, [pc, #260]	@ (8006ac4 <inc_lock+0x118>)
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	011b      	lsls	r3, r3, #4
 80069c2:	4413      	add	r3, r2
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d113      	bne.n	80069f6 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80069ce:	4a3d      	ldr	r2, [pc, #244]	@ (8006ac4 <inc_lock+0x118>)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	011b      	lsls	r3, r3, #4
 80069d4:	4413      	add	r3, r2
 80069d6:	3304      	adds	r3, #4
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80069de:	429a      	cmp	r2, r3
 80069e0:	d109      	bne.n	80069f6 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80069e2:	4a38      	ldr	r2, [pc, #224]	@ (8006ac4 <inc_lock+0x118>)
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	4413      	add	r3, r2
 80069ea:	3308      	adds	r3, #8
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80069f2:	429a      	cmp	r2, r3
 80069f4:	d006      	beq.n	8006a04 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	3301      	adds	r3, #1
 80069fa:	60fb      	str	r3, [r7, #12]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d9dc      	bls.n	80069bc <inc_lock+0x10>
 8006a02:	e000      	b.n	8006a06 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8006a04:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d132      	bne.n	8006a72 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	60fb      	str	r3, [r7, #12]
 8006a10:	e002      	b.n	8006a18 <inc_lock+0x6c>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	3301      	adds	r3, #1
 8006a16:	60fb      	str	r3, [r7, #12]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d806      	bhi.n	8006a2c <inc_lock+0x80>
 8006a1e:	4a29      	ldr	r2, [pc, #164]	@ (8006ac4 <inc_lock+0x118>)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	4413      	add	r3, r2
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1f2      	bne.n	8006a12 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2b02      	cmp	r3, #2
 8006a30:	d101      	bne.n	8006a36 <inc_lock+0x8a>
 8006a32:	2300      	movs	r3, #0
 8006a34:	e040      	b.n	8006ab8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	4922      	ldr	r1, [pc, #136]	@ (8006ac4 <inc_lock+0x118>)
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	011b      	lsls	r3, r3, #4
 8006a40:	440b      	add	r3, r1
 8006a42:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	689a      	ldr	r2, [r3, #8]
 8006a48:	491e      	ldr	r1, [pc, #120]	@ (8006ac4 <inc_lock+0x118>)
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	011b      	lsls	r3, r3, #4
 8006a4e:	440b      	add	r3, r1
 8006a50:	3304      	adds	r3, #4
 8006a52:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	695a      	ldr	r2, [r3, #20]
 8006a58:	491a      	ldr	r1, [pc, #104]	@ (8006ac4 <inc_lock+0x118>)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	011b      	lsls	r3, r3, #4
 8006a5e:	440b      	add	r3, r1
 8006a60:	3308      	adds	r3, #8
 8006a62:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8006a64:	4a17      	ldr	r2, [pc, #92]	@ (8006ac4 <inc_lock+0x118>)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	011b      	lsls	r3, r3, #4
 8006a6a:	4413      	add	r3, r2
 8006a6c:	330c      	adds	r3, #12
 8006a6e:	2200      	movs	r2, #0
 8006a70:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d009      	beq.n	8006a8c <inc_lock+0xe0>
 8006a78:	4a12      	ldr	r2, [pc, #72]	@ (8006ac4 <inc_lock+0x118>)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	011b      	lsls	r3, r3, #4
 8006a7e:	4413      	add	r3, r2
 8006a80:	330c      	adds	r3, #12
 8006a82:	881b      	ldrh	r3, [r3, #0]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <inc_lock+0xe0>
 8006a88:	2300      	movs	r3, #0
 8006a8a:	e015      	b.n	8006ab8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d108      	bne.n	8006aa4 <inc_lock+0xf8>
 8006a92:	4a0c      	ldr	r2, [pc, #48]	@ (8006ac4 <inc_lock+0x118>)
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	011b      	lsls	r3, r3, #4
 8006a98:	4413      	add	r3, r2
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	881b      	ldrh	r3, [r3, #0]
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	e001      	b.n	8006aa8 <inc_lock+0xfc>
 8006aa4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006aa8:	4906      	ldr	r1, [pc, #24]	@ (8006ac4 <inc_lock+0x118>)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	440b      	add	r3, r1
 8006ab0:	330c      	adds	r3, #12
 8006ab2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	3301      	adds	r3, #1
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3714      	adds	r7, #20
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	20002478 	.word	0x20002478

08006ac8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60fb      	str	r3, [r7, #12]
 8006ad4:	e010      	b.n	8006af8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006ad6:	4a0d      	ldr	r2, [pc, #52]	@ (8006b0c <clear_lock+0x44>)
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	011b      	lsls	r3, r3, #4
 8006adc:	4413      	add	r3, r2
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	687a      	ldr	r2, [r7, #4]
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d105      	bne.n	8006af2 <clear_lock+0x2a>
 8006ae6:	4a09      	ldr	r2, [pc, #36]	@ (8006b0c <clear_lock+0x44>)
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	4413      	add	r3, r2
 8006aee:	2200      	movs	r2, #0
 8006af0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	3301      	adds	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d9eb      	bls.n	8006ad6 <clear_lock+0xe>
	}
}
 8006afe:	bf00      	nop
 8006b00:	bf00      	nop
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	20002478 	.word	0x20002478

08006b10 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b086      	sub	sp, #24
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006b18:	2300      	movs	r3, #0
 8006b1a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	78db      	ldrb	r3, [r3, #3]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d034      	beq.n	8006b8e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b28:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	7858      	ldrb	r0, [r3, #1]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006b34:	2301      	movs	r3, #1
 8006b36:	697a      	ldr	r2, [r7, #20]
 8006b38:	f7ff fd7a 	bl	8006630 <disk_write>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d002      	beq.n	8006b48 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006b42:	2301      	movs	r3, #1
 8006b44:	73fb      	strb	r3, [r7, #15]
 8006b46:	e022      	b.n	8006b8e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b52:	697a      	ldr	r2, [r7, #20]
 8006b54:	1ad2      	subs	r2, r2, r3
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a1b      	ldr	r3, [r3, #32]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d217      	bcs.n	8006b8e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	789b      	ldrb	r3, [r3, #2]
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	e010      	b.n	8006b88 <sync_window+0x78>
					wsect += fs->fsize;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	7858      	ldrb	r0, [r3, #1]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	f7ff fd57 	bl	8006630 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	3b01      	subs	r3, #1
 8006b86:	613b      	str	r3, [r7, #16]
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d8eb      	bhi.n	8006b66 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d01b      	beq.n	8006be8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f7ff ffad 	bl	8006b10 <sync_window>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d113      	bne.n	8006be8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	7858      	ldrb	r0, [r3, #1]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006bca:	2301      	movs	r3, #1
 8006bcc:	683a      	ldr	r2, [r7, #0]
 8006bce:	f7ff fd0f 	bl	80065f0 <disk_read>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d004      	beq.n	8006be2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8006bdc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	683a      	ldr	r2, [r7, #0]
 8006be6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3710      	adds	r7, #16
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006bf2:	b480      	push	{r7}
 8006bf4:	b083      	sub	sp, #12
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	3b02      	subs	r3, #2
 8006c00:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	3b02      	subs	r3, #2
 8006c08:	683a      	ldr	r2, [r7, #0]
 8006c0a:	429a      	cmp	r2, r3
 8006c0c:	d301      	bcc.n	8006c12 <clust2sect+0x20>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	e008      	b.n	8006c24 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	895b      	ldrh	r3, [r3, #10]
 8006c16:	461a      	mov	r2, r3
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	fb03 f202 	mul.w	r2, r3, r2
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c22:	4413      	add	r3, r2
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b086      	sub	sp, #24
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
 8006c38:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d904      	bls.n	8006c50 <get_fat+0x20>
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	69db      	ldr	r3, [r3, #28]
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d302      	bcc.n	8006c56 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006c50:	2301      	movs	r3, #1
 8006c52:	617b      	str	r3, [r7, #20]
 8006c54:	e0ba      	b.n	8006dcc <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006c56:	f04f 33ff 	mov.w	r3, #4294967295
 8006c5a:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8006c5c:	693b      	ldr	r3, [r7, #16]
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	2b03      	cmp	r3, #3
 8006c62:	f000 8082 	beq.w	8006d6a <get_fat+0x13a>
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	f300 80a6 	bgt.w	8006db8 <get_fat+0x188>
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d002      	beq.n	8006c76 <get_fat+0x46>
 8006c70:	2b02      	cmp	r3, #2
 8006c72:	d055      	beq.n	8006d20 <get_fat+0xf0>
 8006c74:	e0a0      	b.n	8006db8 <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	60fb      	str	r3, [r7, #12]
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	085b      	lsrs	r3, r3, #1
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	4413      	add	r3, r2
 8006c82:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	899b      	ldrh	r3, [r3, #12]
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	fbb3 f3f1 	udiv	r3, r3, r1
 8006c94:	4413      	add	r3, r2
 8006c96:	4619      	mov	r1, r3
 8006c98:	6938      	ldr	r0, [r7, #16]
 8006c9a:	f7ff ff7d 	bl	8006b98 <move_window>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	f040 808c 	bne.w	8006dbe <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	1c5a      	adds	r2, r3, #1
 8006caa:	60fa      	str	r2, [r7, #12]
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	8992      	ldrh	r2, [r2, #12]
 8006cb0:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cb4:	fb01 f202 	mul.w	r2, r1, r2
 8006cb8:	1a9b      	subs	r3, r3, r2
 8006cba:	693a      	ldr	r2, [r7, #16]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006cc2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006cc4:	693b      	ldr	r3, [r7, #16]
 8006cc6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	899b      	ldrh	r3, [r3, #12]
 8006ccc:	4619      	mov	r1, r3
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006cd4:	4413      	add	r3, r2
 8006cd6:	4619      	mov	r1, r3
 8006cd8:	6938      	ldr	r0, [r7, #16]
 8006cda:	f7ff ff5d 	bl	8006b98 <move_window>
 8006cde:	4603      	mov	r3, r0
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d16e      	bne.n	8006dc2 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	899b      	ldrh	r3, [r3, #12]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	fbb3 f1f2 	udiv	r1, r3, r2
 8006cf0:	fb01 f202 	mul.w	r2, r1, r2
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	693a      	ldr	r2, [r7, #16]
 8006cf8:	4413      	add	r3, r2
 8006cfa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006cfe:	021b      	lsls	r3, r3, #8
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	4313      	orrs	r3, r2
 8006d04:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <get_fat+0xe6>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	091b      	lsrs	r3, r3, #4
 8006d14:	e002      	b.n	8006d1c <get_fat+0xec>
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d1c:	617b      	str	r3, [r7, #20]
			break;
 8006d1e:	e055      	b.n	8006dcc <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	899b      	ldrh	r3, [r3, #12]
 8006d28:	085b      	lsrs	r3, r3, #1
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d34:	4413      	add	r3, r2
 8006d36:	4619      	mov	r1, r3
 8006d38:	6938      	ldr	r0, [r7, #16]
 8006d3a:	f7ff ff2d 	bl	8006b98 <move_window>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d140      	bne.n	8006dc6 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	005b      	lsls	r3, r3, #1
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	8992      	ldrh	r2, [r2, #12]
 8006d52:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d56:	fb00 f202 	mul.w	r2, r0, r2
 8006d5a:	1a9b      	subs	r3, r3, r2
 8006d5c:	440b      	add	r3, r1
 8006d5e:	4618      	mov	r0, r3
 8006d60:	f7ff fca4 	bl	80066ac <ld_word>
 8006d64:	4603      	mov	r3, r0
 8006d66:	617b      	str	r3, [r7, #20]
			break;
 8006d68:	e030      	b.n	8006dcc <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	899b      	ldrh	r3, [r3, #12]
 8006d72:	089b      	lsrs	r3, r3, #2
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	4619      	mov	r1, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006d7e:	4413      	add	r3, r2
 8006d80:	4619      	mov	r1, r3
 8006d82:	6938      	ldr	r0, [r7, #16]
 8006d84:	f7ff ff08 	bl	8006b98 <move_window>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d11d      	bne.n	8006dca <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	8992      	ldrh	r2, [r2, #12]
 8006d9c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006da0:	fb00 f202 	mul.w	r2, r0, r2
 8006da4:	1a9b      	subs	r3, r3, r2
 8006da6:	440b      	add	r3, r1
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff fc98 	bl	80066de <ld_dword>
 8006dae:	4603      	mov	r3, r0
 8006db0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006db4:	617b      	str	r3, [r7, #20]
			break;
 8006db6:	e009      	b.n	8006dcc <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8006db8:	2301      	movs	r3, #1
 8006dba:	617b      	str	r3, [r7, #20]
 8006dbc:	e006      	b.n	8006dcc <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dbe:	bf00      	nop
 8006dc0:	e004      	b.n	8006dcc <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006dc2:	bf00      	nop
 8006dc4:	e002      	b.n	8006dcc <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006dc6:	bf00      	nop
 8006dc8:	e000      	b.n	8006dcc <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8006dca:	bf00      	nop
		}
	}

	return val;
 8006dcc:	697b      	ldr	r3, [r7, #20]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3718      	adds	r7, #24
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}

08006dd6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006dd6:	b590      	push	{r4, r7, lr}
 8006dd8:	b089      	sub	sp, #36	@ 0x24
 8006dda:	af00      	add	r7, sp, #0
 8006ddc:	60f8      	str	r0, [r7, #12]
 8006dde:	60b9      	str	r1, [r7, #8]
 8006de0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006de2:	2302      	movs	r3, #2
 8006de4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	f240 8109 	bls.w	8007000 <put_fat+0x22a>
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	68ba      	ldr	r2, [r7, #8]
 8006df4:	429a      	cmp	r2, r3
 8006df6:	f080 8103 	bcs.w	8007000 <put_fat+0x22a>
		switch (fs->fs_type) {
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	f000 80b6 	beq.w	8006f70 <put_fat+0x19a>
 8006e04:	2b03      	cmp	r3, #3
 8006e06:	f300 80fb 	bgt.w	8007000 <put_fat+0x22a>
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d003      	beq.n	8006e16 <put_fat+0x40>
 8006e0e:	2b02      	cmp	r3, #2
 8006e10:	f000 8083 	beq.w	8006f1a <put_fat+0x144>
 8006e14:	e0f4      	b.n	8007000 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006e16:	68bb      	ldr	r3, [r7, #8]
 8006e18:	61bb      	str	r3, [r7, #24]
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	085b      	lsrs	r3, r3, #1
 8006e1e:	69ba      	ldr	r2, [r7, #24]
 8006e20:	4413      	add	r3, r2
 8006e22:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	899b      	ldrh	r3, [r3, #12]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	fbb3 f3f1 	udiv	r3, r3, r1
 8006e34:	4413      	add	r3, r2
 8006e36:	4619      	mov	r1, r3
 8006e38:	68f8      	ldr	r0, [r7, #12]
 8006e3a:	f7ff fead 	bl	8006b98 <move_window>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006e42:	7ffb      	ldrb	r3, [r7, #31]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	f040 80d4 	bne.w	8006ff2 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	1c5a      	adds	r2, r3, #1
 8006e54:	61ba      	str	r2, [r7, #24]
 8006e56:	68fa      	ldr	r2, [r7, #12]
 8006e58:	8992      	ldrh	r2, [r2, #12]
 8006e5a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006e5e:	fb00 f202 	mul.w	r2, r0, r2
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	440b      	add	r3, r1
 8006e66:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	f003 0301 	and.w	r3, r3, #1
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d00d      	beq.n	8006e8e <put_fat+0xb8>
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	b25b      	sxtb	r3, r3
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	b25a      	sxtb	r2, r3
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	b25b      	sxtb	r3, r3
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	b25b      	sxtb	r3, r3
 8006e86:	4313      	orrs	r3, r2
 8006e88:	b25b      	sxtb	r3, r3
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	e001      	b.n	8006e92 <put_fat+0xbc>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	b2db      	uxtb	r3, r3
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	2201      	movs	r2, #1
 8006e9a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	899b      	ldrh	r3, [r3, #12]
 8006ea4:	4619      	mov	r1, r3
 8006ea6:	69bb      	ldr	r3, [r7, #24]
 8006ea8:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eac:	4413      	add	r3, r2
 8006eae:	4619      	mov	r1, r3
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff fe71 	bl	8006b98 <move_window>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006eba:	7ffb      	ldrb	r3, [r7, #31]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f040 809a 	bne.w	8006ff6 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	899b      	ldrh	r3, [r3, #12]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	fbb3 f0f2 	udiv	r0, r3, r2
 8006ed4:	fb00 f202 	mul.w	r2, r0, r2
 8006ed8:	1a9b      	subs	r3, r3, r2
 8006eda:	440b      	add	r3, r1
 8006edc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d003      	beq.n	8006ef0 <put_fat+0x11a>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	091b      	lsrs	r3, r3, #4
 8006eec:	b2db      	uxtb	r3, r3
 8006eee:	e00e      	b.n	8006f0e <put_fat+0x138>
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	b25b      	sxtb	r3, r3
 8006ef6:	f023 030f 	bic.w	r3, r3, #15
 8006efa:	b25a      	sxtb	r2, r3
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	0a1b      	lsrs	r3, r3, #8
 8006f00:	b25b      	sxtb	r3, r3
 8006f02:	f003 030f 	and.w	r3, r3, #15
 8006f06:	b25b      	sxtb	r3, r3
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	b25b      	sxtb	r3, r3
 8006f0c:	b2db      	uxtb	r3, r3
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	2201      	movs	r2, #1
 8006f16:	70da      	strb	r2, [r3, #3]
			break;
 8006f18:	e072      	b.n	8007000 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	899b      	ldrh	r3, [r3, #12]
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	b29b      	uxth	r3, r3
 8006f26:	4619      	mov	r1, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f2e:	4413      	add	r3, r2
 8006f30:	4619      	mov	r1, r3
 8006f32:	68f8      	ldr	r0, [r7, #12]
 8006f34:	f7ff fe30 	bl	8006b98 <move_window>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f3c:	7ffb      	ldrb	r3, [r7, #31]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d15b      	bne.n	8006ffa <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	68fa      	ldr	r2, [r7, #12]
 8006f4e:	8992      	ldrh	r2, [r2, #12]
 8006f50:	fbb3 f0f2 	udiv	r0, r3, r2
 8006f54:	fb00 f202 	mul.w	r2, r0, r2
 8006f58:	1a9b      	subs	r3, r3, r2
 8006f5a:	440b      	add	r3, r1
 8006f5c:	687a      	ldr	r2, [r7, #4]
 8006f5e:	b292      	uxth	r2, r2
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7ff fbde 	bl	8006724 <st_word>
			fs->wflag = 1;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	70da      	strb	r2, [r3, #3]
			break;
 8006f6e:	e047      	b.n	8007000 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	899b      	ldrh	r3, [r3, #12]
 8006f78:	089b      	lsrs	r3, r3, #2
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f84:	4413      	add	r3, r2
 8006f86:	4619      	mov	r1, r3
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f7ff fe05 	bl	8006b98 <move_window>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006f92:	7ffb      	ldrb	r3, [r7, #31]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d132      	bne.n	8006ffe <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	68fa      	ldr	r2, [r7, #12]
 8006faa:	8992      	ldrh	r2, [r2, #12]
 8006fac:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fb0:	fb00 f202 	mul.w	r2, r0, r2
 8006fb4:	1a9b      	subs	r3, r3, r2
 8006fb6:	440b      	add	r3, r1
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f7ff fb90 	bl	80066de <ld_dword>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006fc4:	4323      	orrs	r3, r4
 8006fc6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	8992      	ldrh	r2, [r2, #12]
 8006fd6:	fbb3 f0f2 	udiv	r0, r3, r2
 8006fda:	fb00 f202 	mul.w	r2, r0, r2
 8006fde:	1a9b      	subs	r3, r3, r2
 8006fe0:	440b      	add	r3, r1
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7ff fbb8 	bl	800675a <st_dword>
			fs->wflag = 1;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2201      	movs	r2, #1
 8006fee:	70da      	strb	r2, [r3, #3]
			break;
 8006ff0:	e006      	b.n	8007000 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006ff2:	bf00      	nop
 8006ff4:	e004      	b.n	8007000 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006ff6:	bf00      	nop
 8006ff8:	e002      	b.n	8007000 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006ffa:	bf00      	nop
 8006ffc:	e000      	b.n	8007000 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006ffe:	bf00      	nop
		}
	}
	return res;
 8007000:	7ffb      	ldrb	r3, [r7, #31]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3724      	adds	r7, #36	@ 0x24
 8007006:	46bd      	mov	sp, r7
 8007008:	bd90      	pop	{r4, r7, pc}

0800700a <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800700a:	b580      	push	{r7, lr}
 800700c:	b088      	sub	sp, #32
 800700e:	af00      	add	r7, sp, #0
 8007010:	60f8      	str	r0, [r7, #12]
 8007012:	60b9      	str	r1, [r7, #8]
 8007014:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007016:	2300      	movs	r3, #0
 8007018:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	2b01      	cmp	r3, #1
 8007024:	d904      	bls.n	8007030 <remove_chain+0x26>
 8007026:	69bb      	ldr	r3, [r7, #24]
 8007028:	69db      	ldr	r3, [r3, #28]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	429a      	cmp	r2, r3
 800702e:	d301      	bcc.n	8007034 <remove_chain+0x2a>
 8007030:	2302      	movs	r3, #2
 8007032:	e04b      	b.n	80070cc <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00c      	beq.n	8007054 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800703a:	f04f 32ff 	mov.w	r2, #4294967295
 800703e:	6879      	ldr	r1, [r7, #4]
 8007040:	69b8      	ldr	r0, [r7, #24]
 8007042:	f7ff fec8 	bl	8006dd6 <put_fat>
 8007046:	4603      	mov	r3, r0
 8007048:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800704a:	7ffb      	ldrb	r3, [r7, #31]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d001      	beq.n	8007054 <remove_chain+0x4a>
 8007050:	7ffb      	ldrb	r3, [r7, #31]
 8007052:	e03b      	b.n	80070cc <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007054:	68b9      	ldr	r1, [r7, #8]
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7ff fdea 	bl	8006c30 <get_fat>
 800705c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d031      	beq.n	80070c8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d101      	bne.n	800706e <remove_chain+0x64>
 800706a:	2302      	movs	r3, #2
 800706c:	e02e      	b.n	80070cc <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007074:	d101      	bne.n	800707a <remove_chain+0x70>
 8007076:	2301      	movs	r3, #1
 8007078:	e028      	b.n	80070cc <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800707a:	2200      	movs	r2, #0
 800707c:	68b9      	ldr	r1, [r7, #8]
 800707e:	69b8      	ldr	r0, [r7, #24]
 8007080:	f7ff fea9 	bl	8006dd6 <put_fat>
 8007084:	4603      	mov	r3, r0
 8007086:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007088:	7ffb      	ldrb	r3, [r7, #31]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <remove_chain+0x88>
 800708e:	7ffb      	ldrb	r3, [r7, #31]
 8007090:	e01c      	b.n	80070cc <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007092:	69bb      	ldr	r3, [r7, #24]
 8007094:	699a      	ldr	r2, [r3, #24]
 8007096:	69bb      	ldr	r3, [r7, #24]
 8007098:	69db      	ldr	r3, [r3, #28]
 800709a:	3b02      	subs	r3, #2
 800709c:	429a      	cmp	r2, r3
 800709e:	d20b      	bcs.n	80070b8 <remove_chain+0xae>
			fs->free_clst++;
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	699b      	ldr	r3, [r3, #24]
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	69bb      	ldr	r3, [r7, #24]
 80070a8:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80070aa:	69bb      	ldr	r3, [r7, #24]
 80070ac:	791b      	ldrb	r3, [r3, #4]
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	b2da      	uxtb	r2, r3
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80070bc:	69bb      	ldr	r3, [r7, #24]
 80070be:	69db      	ldr	r3, [r3, #28]
 80070c0:	68ba      	ldr	r2, [r7, #8]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d3c6      	bcc.n	8007054 <remove_chain+0x4a>
 80070c6:	e000      	b.n	80070ca <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80070c8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3720      	adds	r7, #32
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b088      	sub	sp, #32
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
 80070dc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d10d      	bne.n	8007106 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80070f0:	69bb      	ldr	r3, [r7, #24]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d004      	beq.n	8007100 <create_chain+0x2c>
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	69ba      	ldr	r2, [r7, #24]
 80070fc:	429a      	cmp	r2, r3
 80070fe:	d31b      	bcc.n	8007138 <create_chain+0x64>
 8007100:	2301      	movs	r3, #1
 8007102:	61bb      	str	r3, [r7, #24]
 8007104:	e018      	b.n	8007138 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007106:	6839      	ldr	r1, [r7, #0]
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f7ff fd91 	bl	8006c30 <get_fat>
 800710e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2b01      	cmp	r3, #1
 8007114:	d801      	bhi.n	800711a <create_chain+0x46>
 8007116:	2301      	movs	r3, #1
 8007118:	e070      	b.n	80071fc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007120:	d101      	bne.n	8007126 <create_chain+0x52>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	e06a      	b.n	80071fc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	69db      	ldr	r3, [r3, #28]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	429a      	cmp	r2, r3
 800712e:	d201      	bcs.n	8007134 <create_chain+0x60>
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	e063      	b.n	80071fc <create_chain+0x128>
		scl = clst;
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007138:	69bb      	ldr	r3, [r7, #24]
 800713a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	3301      	adds	r3, #1
 8007140:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	69fa      	ldr	r2, [r7, #28]
 8007148:	429a      	cmp	r2, r3
 800714a:	d307      	bcc.n	800715c <create_chain+0x88>
				ncl = 2;
 800714c:	2302      	movs	r3, #2
 800714e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	429a      	cmp	r2, r3
 8007156:	d901      	bls.n	800715c <create_chain+0x88>
 8007158:	2300      	movs	r3, #0
 800715a:	e04f      	b.n	80071fc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800715c:	69f9      	ldr	r1, [r7, #28]
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f7ff fd66 	bl	8006c30 <get_fat>
 8007164:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00e      	beq.n	800718a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d003      	beq.n	800717a <create_chain+0xa6>
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007178:	d101      	bne.n	800717e <create_chain+0xaa>
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	e03e      	b.n	80071fc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800717e:	69fa      	ldr	r2, [r7, #28]
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	429a      	cmp	r2, r3
 8007184:	d1da      	bne.n	800713c <create_chain+0x68>
 8007186:	2300      	movs	r3, #0
 8007188:	e038      	b.n	80071fc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800718a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800718c:	f04f 32ff 	mov.w	r2, #4294967295
 8007190:	69f9      	ldr	r1, [r7, #28]
 8007192:	6938      	ldr	r0, [r7, #16]
 8007194:	f7ff fe1f 	bl	8006dd6 <put_fat>
 8007198:	4603      	mov	r3, r0
 800719a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800719c:	7dfb      	ldrb	r3, [r7, #23]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d109      	bne.n	80071b6 <create_chain+0xe2>
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d006      	beq.n	80071b6 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	6839      	ldr	r1, [r7, #0]
 80071ac:	6938      	ldr	r0, [r7, #16]
 80071ae:	f7ff fe12 	bl	8006dd6 <put_fat>
 80071b2:	4603      	mov	r3, r0
 80071b4:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80071b6:	7dfb      	ldrb	r3, [r7, #23]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d116      	bne.n	80071ea <create_chain+0x116>
		fs->last_clst = ncl;
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	69fa      	ldr	r2, [r7, #28]
 80071c0:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	69db      	ldr	r3, [r3, #28]
 80071ca:	3b02      	subs	r3, #2
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d804      	bhi.n	80071da <create_chain+0x106>
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	699b      	ldr	r3, [r3, #24]
 80071d4:	1e5a      	subs	r2, r3, #1
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80071da:	693b      	ldr	r3, [r7, #16]
 80071dc:	791b      	ldrb	r3, [r3, #4]
 80071de:	f043 0301 	orr.w	r3, r3, #1
 80071e2:	b2da      	uxtb	r2, r3
 80071e4:	693b      	ldr	r3, [r7, #16]
 80071e6:	711a      	strb	r2, [r3, #4]
 80071e8:	e007      	b.n	80071fa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80071ea:	7dfb      	ldrb	r3, [r7, #23]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d102      	bne.n	80071f6 <create_chain+0x122>
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295
 80071f4:	e000      	b.n	80071f8 <create_chain+0x124>
 80071f6:	2301      	movs	r3, #1
 80071f8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80071fa:	69fb      	ldr	r3, [r7, #28]
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	3720      	adds	r7, #32
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007204:	b480      	push	{r7}
 8007206:	b087      	sub	sp, #28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007218:	3304      	adds	r3, #4
 800721a:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	899b      	ldrh	r3, [r3, #12]
 8007220:	461a      	mov	r2, r3
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	fbb3 f3f2 	udiv	r3, r3, r2
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	8952      	ldrh	r2, [r2, #10]
 800722c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007230:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	1d1a      	adds	r2, r3, #4
 8007236:	613a      	str	r2, [r7, #16]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d101      	bne.n	8007246 <clmt_clust+0x42>
 8007242:	2300      	movs	r3, #0
 8007244:	e010      	b.n	8007268 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	429a      	cmp	r2, r3
 800724c:	d307      	bcc.n	800725e <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800724e:	697a      	ldr	r2, [r7, #20]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	1ad3      	subs	r3, r2, r3
 8007254:	617b      	str	r3, [r7, #20]
 8007256:	693b      	ldr	r3, [r7, #16]
 8007258:	3304      	adds	r3, #4
 800725a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800725c:	e7e9      	b.n	8007232 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800725e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	4413      	add	r3, r2
}
 8007268:	4618      	mov	r0, r3
 800726a:	371c      	adds	r7, #28
 800726c:	46bd      	mov	sp, r7
 800726e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007272:	4770      	bx	lr

08007274 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b086      	sub	sp, #24
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800728a:	d204      	bcs.n	8007296 <dir_sdi+0x22>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f003 031f 	and.w	r3, r3, #31
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <dir_sdi+0x26>
		return FR_INT_ERR;
 8007296:	2302      	movs	r3, #2
 8007298:	e071      	b.n	800737e <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	683a      	ldr	r2, [r7, #0]
 800729e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d106      	bne.n	80072ba <dir_sdi+0x46>
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	2b02      	cmp	r3, #2
 80072b2:	d902      	bls.n	80072ba <dir_sdi+0x46>
		clst = fs->dirbase;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10c      	bne.n	80072da <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	095b      	lsrs	r3, r3, #5
 80072c4:	693a      	ldr	r2, [r7, #16]
 80072c6:	8912      	ldrh	r2, [r2, #8]
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d301      	bcc.n	80072d0 <dir_sdi+0x5c>
 80072cc:	2302      	movs	r3, #2
 80072ce:	e056      	b.n	800737e <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	61da      	str	r2, [r3, #28]
 80072d8:	e02d      	b.n	8007336 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	895b      	ldrh	r3, [r3, #10]
 80072de:	461a      	mov	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	899b      	ldrh	r3, [r3, #12]
 80072e4:	fb02 f303 	mul.w	r3, r2, r3
 80072e8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80072ea:	e019      	b.n	8007320 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6979      	ldr	r1, [r7, #20]
 80072f0:	4618      	mov	r0, r3
 80072f2:	f7ff fc9d 	bl	8006c30 <get_fat>
 80072f6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072fe:	d101      	bne.n	8007304 <dir_sdi+0x90>
 8007300:	2301      	movs	r3, #1
 8007302:	e03c      	b.n	800737e <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d904      	bls.n	8007314 <dir_sdi+0xa0>
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	69db      	ldr	r3, [r3, #28]
 800730e:	697a      	ldr	r2, [r7, #20]
 8007310:	429a      	cmp	r2, r3
 8007312:	d301      	bcc.n	8007318 <dir_sdi+0xa4>
 8007314:	2302      	movs	r3, #2
 8007316:	e032      	b.n	800737e <dir_sdi+0x10a>
			ofs -= csz;
 8007318:	683a      	ldr	r2, [r7, #0]
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	1ad3      	subs	r3, r2, r3
 800731e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	429a      	cmp	r2, r3
 8007326:	d2e1      	bcs.n	80072ec <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8007328:	6979      	ldr	r1, [r7, #20]
 800732a:	6938      	ldr	r0, [r7, #16]
 800732c:	f7ff fc61 	bl	8006bf2 <clust2sect>
 8007330:	4602      	mov	r2, r0
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	697a      	ldr	r2, [r7, #20]
 800733a:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	69db      	ldr	r3, [r3, #28]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <dir_sdi+0xd4>
 8007344:	2302      	movs	r3, #2
 8007346:	e01a      	b.n	800737e <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	899b      	ldrh	r3, [r3, #12]
 8007350:	4619      	mov	r1, r3
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	fbb3 f3f1 	udiv	r3, r3, r1
 8007358:	441a      	add	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	899b      	ldrh	r3, [r3, #12]
 8007368:	461a      	mov	r2, r3
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	fbb3 f0f2 	udiv	r0, r3, r2
 8007370:	fb00 f202 	mul.w	r2, r0, r2
 8007374:	1a9b      	subs	r3, r3, r2
 8007376:	18ca      	adds	r2, r1, r3
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800737c:	2300      	movs	r3, #0
}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007386:	b580      	push	{r7, lr}
 8007388:	b086      	sub	sp, #24
 800738a:	af00      	add	r7, sp, #0
 800738c:	6078      	str	r0, [r7, #4]
 800738e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	3320      	adds	r3, #32
 800739c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	69db      	ldr	r3, [r3, #28]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d003      	beq.n	80073ae <dir_next+0x28>
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80073ac:	d301      	bcc.n	80073b2 <dir_next+0x2c>
 80073ae:	2304      	movs	r3, #4
 80073b0:	e0bb      	b.n	800752a <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	899b      	ldrh	r3, [r3, #12]
 80073b6:	461a      	mov	r2, r3
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80073be:	fb01 f202 	mul.w	r2, r1, r2
 80073c2:	1a9b      	subs	r3, r3, r2
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f040 809d 	bne.w	8007504 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	69db      	ldr	r3, [r3, #28]
 80073ce:	1c5a      	adds	r2, r3, #1
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	699b      	ldr	r3, [r3, #24]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d10b      	bne.n	80073f4 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80073dc:	68bb      	ldr	r3, [r7, #8]
 80073de:	095b      	lsrs	r3, r3, #5
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	8912      	ldrh	r2, [r2, #8]
 80073e4:	4293      	cmp	r3, r2
 80073e6:	f0c0 808d 	bcc.w	8007504 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	61da      	str	r2, [r3, #28]
 80073f0:	2304      	movs	r3, #4
 80073f2:	e09a      	b.n	800752a <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	899b      	ldrh	r3, [r3, #12]
 80073f8:	461a      	mov	r2, r3
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	8952      	ldrh	r2, [r2, #10]
 8007404:	3a01      	subs	r2, #1
 8007406:	4013      	ands	r3, r2
 8007408:	2b00      	cmp	r3, #0
 800740a:	d17b      	bne.n	8007504 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	699b      	ldr	r3, [r3, #24]
 8007412:	4619      	mov	r1, r3
 8007414:	4610      	mov	r0, r2
 8007416:	f7ff fc0b 	bl	8006c30 <get_fat>
 800741a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800741c:	697b      	ldr	r3, [r7, #20]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d801      	bhi.n	8007426 <dir_next+0xa0>
 8007422:	2302      	movs	r3, #2
 8007424:	e081      	b.n	800752a <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800742c:	d101      	bne.n	8007432 <dir_next+0xac>
 800742e:	2301      	movs	r3, #1
 8007430:	e07b      	b.n	800752a <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	69db      	ldr	r3, [r3, #28]
 8007436:	697a      	ldr	r2, [r7, #20]
 8007438:	429a      	cmp	r2, r3
 800743a:	d359      	bcc.n	80074f0 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d104      	bne.n	800744c <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	61da      	str	r2, [r3, #28]
 8007448:	2304      	movs	r3, #4
 800744a:	e06e      	b.n	800752a <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800744c:	687a      	ldr	r2, [r7, #4]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	699b      	ldr	r3, [r3, #24]
 8007452:	4619      	mov	r1, r3
 8007454:	4610      	mov	r0, r2
 8007456:	f7ff fe3d 	bl	80070d4 <create_chain>
 800745a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <dir_next+0xe0>
 8007462:	2307      	movs	r3, #7
 8007464:	e061      	b.n	800752a <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007466:	697b      	ldr	r3, [r7, #20]
 8007468:	2b01      	cmp	r3, #1
 800746a:	d101      	bne.n	8007470 <dir_next+0xea>
 800746c:	2302      	movs	r3, #2
 800746e:	e05c      	b.n	800752a <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007476:	d101      	bne.n	800747c <dir_next+0xf6>
 8007478:	2301      	movs	r3, #1
 800747a:	e056      	b.n	800752a <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff fb47 	bl	8006b10 <sync_window>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d001      	beq.n	800748c <dir_next+0x106>
 8007488:	2301      	movs	r3, #1
 800748a:	e04e      	b.n	800752a <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	899b      	ldrh	r3, [r3, #12]
 8007496:	461a      	mov	r2, r3
 8007498:	2100      	movs	r1, #0
 800749a:	f7ff f9ab 	bl	80067f4 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	6979      	ldr	r1, [r7, #20]
 80074a4:	68f8      	ldr	r0, [r7, #12]
 80074a6:	f7ff fba4 	bl	8006bf2 <clust2sect>
 80074aa:	4602      	mov	r2, r0
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80074b0:	e012      	b.n	80074d8 <dir_next+0x152>
						fs->wflag = 1;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2201      	movs	r2, #1
 80074b6:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80074b8:	68f8      	ldr	r0, [r7, #12]
 80074ba:	f7ff fb29 	bl	8006b10 <sync_window>
 80074be:	4603      	mov	r3, r0
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d001      	beq.n	80074c8 <dir_next+0x142>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e030      	b.n	800752a <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	3301      	adds	r3, #1
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	635a      	str	r2, [r3, #52]	@ 0x34
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	895b      	ldrh	r3, [r3, #10]
 80074dc:	461a      	mov	r2, r3
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	4293      	cmp	r3, r2
 80074e2:	d3e6      	bcc.n	80074b2 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	1ad2      	subs	r2, r2, r3
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 80074f6:	6979      	ldr	r1, [r7, #20]
 80074f8:	68f8      	ldr	r0, [r7, #12]
 80074fa:	f7ff fb7a 	bl	8006bf2 <clust2sect>
 80074fe:	4602      	mov	r2, r0
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	68ba      	ldr	r2, [r7, #8]
 8007508:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	899b      	ldrh	r3, [r3, #12]
 8007514:	461a      	mov	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	fbb3 f0f2 	udiv	r0, r3, r2
 800751c:	fb00 f202 	mul.w	r2, r0, r2
 8007520:	1a9b      	subs	r3, r3, r2
 8007522:	18ca      	adds	r2, r1, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007528:	2300      	movs	r3, #0
}
 800752a:	4618      	mov	r0, r3
 800752c:	3718      	adds	r7, #24
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}

08007532 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007532:	b580      	push	{r7, lr}
 8007534:	b086      	sub	sp, #24
 8007536:	af00      	add	r7, sp, #0
 8007538:	6078      	str	r0, [r7, #4]
 800753a:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007542:	2100      	movs	r1, #0
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f7ff fe95 	bl	8007274 <dir_sdi>
 800754a:	4603      	mov	r3, r0
 800754c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800754e:	7dfb      	ldrb	r3, [r7, #23]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d12b      	bne.n	80075ac <dir_alloc+0x7a>
		n = 0;
 8007554:	2300      	movs	r3, #0
 8007556:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	4619      	mov	r1, r3
 800755e:	68f8      	ldr	r0, [r7, #12]
 8007560:	f7ff fb1a 	bl	8006b98 <move_window>
 8007564:	4603      	mov	r3, r0
 8007566:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d11d      	bne.n	80075aa <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6a1b      	ldr	r3, [r3, #32]
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2be5      	cmp	r3, #229	@ 0xe5
 8007576:	d004      	beq.n	8007582 <dir_alloc+0x50>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d107      	bne.n	8007592 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	3301      	adds	r3, #1
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	429a      	cmp	r2, r3
 800758e:	d102      	bne.n	8007596 <dir_alloc+0x64>
 8007590:	e00c      	b.n	80075ac <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007592:	2300      	movs	r3, #0
 8007594:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007596:	2101      	movs	r1, #1
 8007598:	6878      	ldr	r0, [r7, #4]
 800759a:	f7ff fef4 	bl	8007386 <dir_next>
 800759e:	4603      	mov	r3, r0
 80075a0:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80075a2:	7dfb      	ldrb	r3, [r7, #23]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d0d7      	beq.n	8007558 <dir_alloc+0x26>
 80075a8:	e000      	b.n	80075ac <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80075aa:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	2b04      	cmp	r3, #4
 80075b0:	d101      	bne.n	80075b6 <dir_alloc+0x84>
 80075b2:	2307      	movs	r3, #7
 80075b4:	75fb      	strb	r3, [r7, #23]
	return res;
 80075b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3718      	adds	r7, #24
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b084      	sub	sp, #16
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	331a      	adds	r3, #26
 80075ce:	4618      	mov	r0, r3
 80075d0:	f7ff f86c 	bl	80066ac <ld_word>
 80075d4:	4603      	mov	r3, r0
 80075d6:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	781b      	ldrb	r3, [r3, #0]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d109      	bne.n	80075f4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	3314      	adds	r3, #20
 80075e4:	4618      	mov	r0, r3
 80075e6:	f7ff f861 	bl	80066ac <ld_word>
 80075ea:	4603      	mov	r3, r0
 80075ec:	041b      	lsls	r3, r3, #16
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	4313      	orrs	r3, r2
 80075f2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 80075f4:	68fb      	ldr	r3, [r7, #12]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	60f8      	str	r0, [r7, #12]
 8007606:	60b9      	str	r1, [r7, #8]
 8007608:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	331a      	adds	r3, #26
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	b292      	uxth	r2, r2
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff f885 	bl	8006724 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	781b      	ldrb	r3, [r3, #0]
 800761e:	2b03      	cmp	r3, #3
 8007620:	d109      	bne.n	8007636 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	f103 0214 	add.w	r2, r3, #20
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	0c1b      	lsrs	r3, r3, #16
 800762c:	b29b      	uxth	r3, r3
 800762e:	4619      	mov	r1, r3
 8007630:	4610      	mov	r0, r2
 8007632:	f7ff f877 	bl	8006724 <st_word>
	}
}
 8007636:	bf00      	nop
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8007640:	b590      	push	{r4, r7, lr}
 8007642:	b087      	sub	sp, #28
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	331a      	adds	r3, #26
 800764e:	4618      	mov	r0, r3
 8007650:	f7ff f82c 	bl	80066ac <ld_word>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d001      	beq.n	800765e <cmp_lfn+0x1e>
 800765a:	2300      	movs	r3, #0
 800765c:	e059      	b.n	8007712 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007666:	1e5a      	subs	r2, r3, #1
 8007668:	4613      	mov	r3, r2
 800766a:	005b      	lsls	r3, r3, #1
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4413      	add	r3, r2
 8007672:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8007674:	2301      	movs	r3, #1
 8007676:	81fb      	strh	r3, [r7, #14]
 8007678:	2300      	movs	r3, #0
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	e033      	b.n	80076e6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800767e:	4a27      	ldr	r2, [pc, #156]	@ (800771c <cmp_lfn+0xdc>)
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	4413      	add	r3, r2
 8007684:	781b      	ldrb	r3, [r3, #0]
 8007686:	461a      	mov	r2, r3
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	4413      	add	r3, r2
 800768c:	4618      	mov	r0, r3
 800768e:	f7ff f80d 	bl	80066ac <ld_word>
 8007692:	4603      	mov	r3, r0
 8007694:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8007696:	89fb      	ldrh	r3, [r7, #14]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01a      	beq.n	80076d2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2bfe      	cmp	r3, #254	@ 0xfe
 80076a0:	d812      	bhi.n	80076c8 <cmp_lfn+0x88>
 80076a2:	89bb      	ldrh	r3, [r7, #12]
 80076a4:	4618      	mov	r0, r3
 80076a6:	f001 feed 	bl	8009484 <ff_wtoupper>
 80076aa:	4603      	mov	r3, r0
 80076ac:	461c      	mov	r4, r3
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	1c5a      	adds	r2, r3, #1
 80076b2:	617a      	str	r2, [r7, #20]
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	687a      	ldr	r2, [r7, #4]
 80076b8:	4413      	add	r3, r2
 80076ba:	881b      	ldrh	r3, [r3, #0]
 80076bc:	4618      	mov	r0, r3
 80076be:	f001 fee1 	bl	8009484 <ff_wtoupper>
 80076c2:	4603      	mov	r3, r0
 80076c4:	429c      	cmp	r4, r3
 80076c6:	d001      	beq.n	80076cc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80076c8:	2300      	movs	r3, #0
 80076ca:	e022      	b.n	8007712 <cmp_lfn+0xd2>
			}
			wc = uc;
 80076cc:	89bb      	ldrh	r3, [r7, #12]
 80076ce:	81fb      	strh	r3, [r7, #14]
 80076d0:	e006      	b.n	80076e0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80076d2:	89bb      	ldrh	r3, [r7, #12]
 80076d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80076d8:	4293      	cmp	r3, r2
 80076da:	d001      	beq.n	80076e0 <cmp_lfn+0xa0>
 80076dc:	2300      	movs	r3, #0
 80076de:	e018      	b.n	8007712 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	3301      	adds	r3, #1
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	693b      	ldr	r3, [r7, #16]
 80076e8:	2b0c      	cmp	r3, #12
 80076ea:	d9c8      	bls.n	800767e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00b      	beq.n	8007710 <cmp_lfn+0xd0>
 80076f8:	89fb      	ldrh	r3, [r7, #14]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d008      	beq.n	8007710 <cmp_lfn+0xd0>
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	4413      	add	r3, r2
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d001      	beq.n	8007710 <cmp_lfn+0xd0>
 800770c:	2300      	movs	r3, #0
 800770e:	e000      	b.n	8007712 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8007710:	2301      	movs	r3, #1
}
 8007712:	4618      	mov	r0, r3
 8007714:	371c      	adds	r7, #28
 8007716:	46bd      	mov	sp, r7
 8007718:	bd90      	pop	{r4, r7, pc}
 800771a:	bf00      	nop
 800771c:	0800c5f0 	.word	0x0800c5f0

08007720 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b088      	sub	sp, #32
 8007724:	af00      	add	r7, sp, #0
 8007726:	60f8      	str	r0, [r7, #12]
 8007728:	60b9      	str	r1, [r7, #8]
 800772a:	4611      	mov	r1, r2
 800772c:	461a      	mov	r2, r3
 800772e:	460b      	mov	r3, r1
 8007730:	71fb      	strb	r3, [r7, #7]
 8007732:	4613      	mov	r3, r2
 8007734:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	330d      	adds	r3, #13
 800773a:	79ba      	ldrb	r2, [r7, #6]
 800773c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	330b      	adds	r3, #11
 8007742:	220f      	movs	r2, #15
 8007744:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	330c      	adds	r3, #12
 800774a:	2200      	movs	r2, #0
 800774c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	331a      	adds	r3, #26
 8007752:	2100      	movs	r1, #0
 8007754:	4618      	mov	r0, r3
 8007756:	f7fe ffe5 	bl	8006724 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800775a:	79fb      	ldrb	r3, [r7, #7]
 800775c:	1e5a      	subs	r2, r3, #1
 800775e:	4613      	mov	r3, r2
 8007760:	005b      	lsls	r3, r3, #1
 8007762:	4413      	add	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	82fb      	strh	r3, [r7, #22]
 800776e:	2300      	movs	r3, #0
 8007770:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8007772:	8afb      	ldrh	r3, [r7, #22]
 8007774:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007778:	4293      	cmp	r3, r2
 800777a:	d007      	beq.n	800778c <put_lfn+0x6c>
 800777c:	69fb      	ldr	r3, [r7, #28]
 800777e:	1c5a      	adds	r2, r3, #1
 8007780:	61fa      	str	r2, [r7, #28]
 8007782:	005b      	lsls	r3, r3, #1
 8007784:	68fa      	ldr	r2, [r7, #12]
 8007786:	4413      	add	r3, r2
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800778c:	4a17      	ldr	r2, [pc, #92]	@ (80077ec <put_lfn+0xcc>)
 800778e:	69bb      	ldr	r3, [r7, #24]
 8007790:	4413      	add	r3, r2
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	461a      	mov	r2, r3
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	4413      	add	r3, r2
 800779a:	8afa      	ldrh	r2, [r7, #22]
 800779c:	4611      	mov	r1, r2
 800779e:	4618      	mov	r0, r3
 80077a0:	f7fe ffc0 	bl	8006724 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80077a4:	8afb      	ldrh	r3, [r7, #22]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d102      	bne.n	80077b0 <put_lfn+0x90>
 80077aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80077ae:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80077b0:	69bb      	ldr	r3, [r7, #24]
 80077b2:	3301      	adds	r3, #1
 80077b4:	61bb      	str	r3, [r7, #24]
 80077b6:	69bb      	ldr	r3, [r7, #24]
 80077b8:	2b0c      	cmp	r3, #12
 80077ba:	d9da      	bls.n	8007772 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80077bc:	8afb      	ldrh	r3, [r7, #22]
 80077be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80077c2:	4293      	cmp	r3, r2
 80077c4:	d006      	beq.n	80077d4 <put_lfn+0xb4>
 80077c6:	69fb      	ldr	r3, [r7, #28]
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	4413      	add	r3, r2
 80077ce:	881b      	ldrh	r3, [r3, #0]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d103      	bne.n	80077dc <put_lfn+0xbc>
 80077d4:	79fb      	ldrb	r3, [r7, #7]
 80077d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80077da:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	79fa      	ldrb	r2, [r7, #7]
 80077e0:	701a      	strb	r2, [r3, #0]
}
 80077e2:	bf00      	nop
 80077e4:	3720      	adds	r7, #32
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop
 80077ec:	0800c5f0 	.word	0x0800c5f0

080077f0 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b08c      	sub	sp, #48	@ 0x30
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	60f8      	str	r0, [r7, #12]
 80077f8:	60b9      	str	r1, [r7, #8]
 80077fa:	607a      	str	r2, [r7, #4]
 80077fc:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 80077fe:	220b      	movs	r2, #11
 8007800:	68b9      	ldr	r1, [r7, #8]
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7fe ffd5 	bl	80067b2 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	2b05      	cmp	r3, #5
 800780c:	d92b      	bls.n	8007866 <gen_numname+0x76>
		sr = seq;
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007812:	e022      	b.n	800785a <gen_numname+0x6a>
			wc = *lfn++;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	1c9a      	adds	r2, r3, #2
 8007818:	607a      	str	r2, [r7, #4]
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800781e:	2300      	movs	r3, #0
 8007820:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007822:	e017      	b.n	8007854 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	005a      	lsls	r2, r3, #1
 8007828:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800782a:	f003 0301 	and.w	r3, r3, #1
 800782e:	4413      	add	r3, r2
 8007830:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007832:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007834:	085b      	lsrs	r3, r3, #1
 8007836:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <gen_numname+0x5e>
 8007842:	69fb      	ldr	r3, [r7, #28]
 8007844:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007848:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800784c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800784e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007850:	3301      	adds	r3, #1
 8007852:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007856:	2b0f      	cmp	r3, #15
 8007858:	d9e4      	bls.n	8007824 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d1d8      	bne.n	8007814 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007866:	2307      	movs	r3, #7
 8007868:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	f003 030f 	and.w	r3, r3, #15
 8007872:	b2db      	uxtb	r3, r3
 8007874:	3330      	adds	r3, #48	@ 0x30
 8007876:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800787a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800787e:	2b39      	cmp	r3, #57	@ 0x39
 8007880:	d904      	bls.n	800788c <gen_numname+0x9c>
 8007882:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007886:	3307      	adds	r3, #7
 8007888:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800788c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800788e:	1e5a      	subs	r2, r3, #1
 8007890:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007892:	3330      	adds	r3, #48	@ 0x30
 8007894:	443b      	add	r3, r7
 8007896:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800789a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	091b      	lsrs	r3, r3, #4
 80078a2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1df      	bne.n	800786a <gen_numname+0x7a>
	ns[i] = '~';
 80078aa:	f107 0214 	add.w	r2, r7, #20
 80078ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078b0:	4413      	add	r3, r2
 80078b2:	227e      	movs	r2, #126	@ 0x7e
 80078b4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80078b6:	2300      	movs	r3, #0
 80078b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ba:	e002      	b.n	80078c2 <gen_numname+0xd2>
 80078bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078be:	3301      	adds	r3, #1
 80078c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80078c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c6:	429a      	cmp	r2, r3
 80078c8:	d205      	bcs.n	80078d6 <gen_numname+0xe6>
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ce:	4413      	add	r3, r2
 80078d0:	781b      	ldrb	r3, [r3, #0]
 80078d2:	2b20      	cmp	r3, #32
 80078d4:	d1f2      	bne.n	80078bc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80078d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d8:	2b07      	cmp	r3, #7
 80078da:	d807      	bhi.n	80078ec <gen_numname+0xfc>
 80078dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078de:	1c5a      	adds	r2, r3, #1
 80078e0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80078e2:	3330      	adds	r3, #48	@ 0x30
 80078e4:	443b      	add	r3, r7
 80078e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80078ea:	e000      	b.n	80078ee <gen_numname+0xfe>
 80078ec:	2120      	movs	r1, #32
 80078ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f0:	1c5a      	adds	r2, r3, #1
 80078f2:	627a      	str	r2, [r7, #36]	@ 0x24
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	4413      	add	r3, r2
 80078f8:	460a      	mov	r2, r1
 80078fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80078fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078fe:	2b07      	cmp	r3, #7
 8007900:	d9e9      	bls.n	80078d6 <gen_numname+0xe6>
}
 8007902:	bf00      	nop
 8007904:	bf00      	nop
 8007906:	3730      	adds	r7, #48	@ 0x30
 8007908:	46bd      	mov	sp, r7
 800790a:	bd80      	pop	{r7, pc}

0800790c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007914:	2300      	movs	r3, #0
 8007916:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007918:	230b      	movs	r3, #11
 800791a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800791c:	7bfb      	ldrb	r3, [r7, #15]
 800791e:	b2da      	uxtb	r2, r3
 8007920:	0852      	lsrs	r2, r2, #1
 8007922:	01db      	lsls	r3, r3, #7
 8007924:	4313      	orrs	r3, r2
 8007926:	b2da      	uxtb	r2, r3
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	1c59      	adds	r1, r3, #1
 800792c:	6079      	str	r1, [r7, #4]
 800792e:	781b      	ldrb	r3, [r3, #0]
 8007930:	4413      	add	r3, r2
 8007932:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	3b01      	subs	r3, #1
 8007938:	60bb      	str	r3, [r7, #8]
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d1ed      	bne.n	800791c <sum_sfn+0x10>
	return sum;
 8007940:	7bfb      	ldrb	r3, [r7, #15]
}
 8007942:	4618      	mov	r0, r3
 8007944:	3714      	adds	r7, #20
 8007946:	46bd      	mov	sp, r7
 8007948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794c:	4770      	bx	lr

0800794e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800794e:	b580      	push	{r7, lr}
 8007950:	b086      	sub	sp, #24
 8007952:	af00      	add	r7, sp, #0
 8007954:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800795c:	2100      	movs	r1, #0
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f7ff fc88 	bl	8007274 <dir_sdi>
 8007964:	4603      	mov	r3, r0
 8007966:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007968:	7dfb      	ldrb	r3, [r7, #23]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d001      	beq.n	8007972 <dir_find+0x24>
 800796e:	7dfb      	ldrb	r3, [r7, #23]
 8007970:	e0a9      	b.n	8007ac6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007972:	23ff      	movs	r3, #255	@ 0xff
 8007974:	753b      	strb	r3, [r7, #20]
 8007976:	7d3b      	ldrb	r3, [r7, #20]
 8007978:	757b      	strb	r3, [r7, #21]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f04f 32ff 	mov.w	r2, #4294967295
 8007980:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	4619      	mov	r1, r3
 8007988:	6938      	ldr	r0, [r7, #16]
 800798a:	f7ff f905 	bl	8006b98 <move_window>
 800798e:	4603      	mov	r3, r0
 8007990:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007992:	7dfb      	ldrb	r3, [r7, #23]
 8007994:	2b00      	cmp	r3, #0
 8007996:	f040 8090 	bne.w	8007aba <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6a1b      	ldr	r3, [r3, #32]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80079a2:	7dbb      	ldrb	r3, [r7, #22]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d102      	bne.n	80079ae <dir_find+0x60>
 80079a8:	2304      	movs	r3, #4
 80079aa:	75fb      	strb	r3, [r7, #23]
 80079ac:	e08a      	b.n	8007ac4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a1b      	ldr	r3, [r3, #32]
 80079b2:	330b      	adds	r3, #11
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80079ba:	73fb      	strb	r3, [r7, #15]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	7bfa      	ldrb	r2, [r7, #15]
 80079c0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80079c2:	7dbb      	ldrb	r3, [r7, #22]
 80079c4:	2be5      	cmp	r3, #229	@ 0xe5
 80079c6:	d007      	beq.n	80079d8 <dir_find+0x8a>
 80079c8:	7bfb      	ldrb	r3, [r7, #15]
 80079ca:	f003 0308 	and.w	r3, r3, #8
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d009      	beq.n	80079e6 <dir_find+0x98>
 80079d2:	7bfb      	ldrb	r3, [r7, #15]
 80079d4:	2b0f      	cmp	r3, #15
 80079d6:	d006      	beq.n	80079e6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80079d8:	23ff      	movs	r3, #255	@ 0xff
 80079da:	757b      	strb	r3, [r7, #21]
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f04f 32ff 	mov.w	r2, #4294967295
 80079e2:	631a      	str	r2, [r3, #48]	@ 0x30
 80079e4:	e05e      	b.n	8007aa4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80079e6:	7bfb      	ldrb	r3, [r7, #15]
 80079e8:	2b0f      	cmp	r3, #15
 80079ea:	d136      	bne.n	8007a5a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80079f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d154      	bne.n	8007aa4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80079fa:	7dbb      	ldrb	r3, [r7, #22]
 80079fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00d      	beq.n	8007a20 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6a1b      	ldr	r3, [r3, #32]
 8007a08:	7b5b      	ldrb	r3, [r3, #13]
 8007a0a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8007a0c:	7dbb      	ldrb	r3, [r7, #22]
 8007a0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a12:	75bb      	strb	r3, [r7, #22]
 8007a14:	7dbb      	ldrb	r3, [r7, #22]
 8007a16:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	695a      	ldr	r2, [r3, #20]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007a20:	7dba      	ldrb	r2, [r7, #22]
 8007a22:	7d7b      	ldrb	r3, [r7, #21]
 8007a24:	429a      	cmp	r2, r3
 8007a26:	d115      	bne.n	8007a54 <dir_find+0x106>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a1b      	ldr	r3, [r3, #32]
 8007a2c:	330d      	adds	r3, #13
 8007a2e:	781b      	ldrb	r3, [r3, #0]
 8007a30:	7d3a      	ldrb	r2, [r7, #20]
 8007a32:	429a      	cmp	r2, r3
 8007a34:	d10e      	bne.n	8007a54 <dir_find+0x106>
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	691a      	ldr	r2, [r3, #16]
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6a1b      	ldr	r3, [r3, #32]
 8007a3e:	4619      	mov	r1, r3
 8007a40:	4610      	mov	r0, r2
 8007a42:	f7ff fdfd 	bl	8007640 <cmp_lfn>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d003      	beq.n	8007a54 <dir_find+0x106>
 8007a4c:	7d7b      	ldrb	r3, [r7, #21]
 8007a4e:	3b01      	subs	r3, #1
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	e000      	b.n	8007a56 <dir_find+0x108>
 8007a54:	23ff      	movs	r3, #255	@ 0xff
 8007a56:	757b      	strb	r3, [r7, #21]
 8007a58:	e024      	b.n	8007aa4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007a5a:	7d7b      	ldrb	r3, [r7, #21]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d109      	bne.n	8007a74 <dir_find+0x126>
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f7ff ff51 	bl	800790c <sum_sfn>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	7d3b      	ldrb	r3, [r7, #20]
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d024      	beq.n	8007abe <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007a7a:	f003 0301 	and.w	r3, r3, #1
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d10a      	bne.n	8007a98 <dir_find+0x14a>
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a18      	ldr	r0, [r3, #32]
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	3324      	adds	r3, #36	@ 0x24
 8007a8a:	220b      	movs	r2, #11
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	f7fe fecc 	bl	800682a <mem_cmp>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d014      	beq.n	8007ac2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007a98:	23ff      	movs	r3, #255	@ 0xff
 8007a9a:	757b      	strb	r3, [r7, #21]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f7ff fc6d 	bl	8007386 <dir_next>
 8007aac:	4603      	mov	r3, r0
 8007aae:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8007ab0:	7dfb      	ldrb	r3, [r7, #23]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f43f af65 	beq.w	8007982 <dir_find+0x34>
 8007ab8:	e004      	b.n	8007ac4 <dir_find+0x176>
		if (res != FR_OK) break;
 8007aba:	bf00      	nop
 8007abc:	e002      	b.n	8007ac4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8007abe:	bf00      	nop
 8007ac0:	e000      	b.n	8007ac4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007ac2:	bf00      	nop

	return res;
 8007ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
	...

08007ad0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b08c      	sub	sp, #48	@ 0x30
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007ae4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <dir_register+0x20>
 8007aec:	2306      	movs	r3, #6
 8007aee:	e0e0      	b.n	8007cb2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007af0:	2300      	movs	r3, #0
 8007af2:	627b      	str	r3, [r7, #36]	@ 0x24
 8007af4:	e002      	b.n	8007afc <dir_register+0x2c>
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	3301      	adds	r3, #1
 8007afa:	627b      	str	r3, [r7, #36]	@ 0x24
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	691a      	ldr	r2, [r3, #16]
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	005b      	lsls	r3, r3, #1
 8007b04:	4413      	add	r3, r2
 8007b06:	881b      	ldrh	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1f4      	bne.n	8007af6 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007b12:	f107 030c 	add.w	r3, r7, #12
 8007b16:	220c      	movs	r2, #12
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7fe fe4a 	bl	80067b2 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007b1e:	7dfb      	ldrb	r3, [r7, #23]
 8007b20:	f003 0301 	and.w	r3, r3, #1
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d032      	beq.n	8007b8e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2240      	movs	r2, #64	@ 0x40
 8007b2c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007b30:	2301      	movs	r3, #1
 8007b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b34:	e016      	b.n	8007b64 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8007b3c:	69fb      	ldr	r3, [r7, #28]
 8007b3e:	691a      	ldr	r2, [r3, #16]
 8007b40:	f107 010c 	add.w	r1, r7, #12
 8007b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b46:	f7ff fe53 	bl	80077f0 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f7ff feff 	bl	800794e <dir_find>
 8007b50:	4603      	mov	r3, r0
 8007b52:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007b56:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8007b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b60:	3301      	adds	r3, #1
 8007b62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b66:	2b63      	cmp	r3, #99	@ 0x63
 8007b68:	d9e5      	bls.n	8007b36 <dir_register+0x66>
 8007b6a:	e000      	b.n	8007b6e <dir_register+0x9e>
			if (res != FR_OK) break;
 8007b6c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8007b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b70:	2b64      	cmp	r3, #100	@ 0x64
 8007b72:	d101      	bne.n	8007b78 <dir_register+0xa8>
 8007b74:	2307      	movs	r3, #7
 8007b76:	e09c      	b.n	8007cb2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007b78:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b7c:	2b04      	cmp	r3, #4
 8007b7e:	d002      	beq.n	8007b86 <dir_register+0xb6>
 8007b80:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007b84:	e095      	b.n	8007cb2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007b86:	7dfa      	ldrb	r2, [r7, #23]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	f003 0302 	and.w	r3, r3, #2
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d007      	beq.n	8007ba8 <dir_register+0xd8>
 8007b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b9a:	330c      	adds	r3, #12
 8007b9c:	4a47      	ldr	r2, [pc, #284]	@ (8007cbc <dir_register+0x1ec>)
 8007b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba2:	089b      	lsrs	r3, r3, #2
 8007ba4:	3301      	adds	r3, #1
 8007ba6:	e000      	b.n	8007baa <dir_register+0xda>
 8007ba8:	2301      	movs	r3, #1
 8007baa:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8007bac:	6a39      	ldr	r1, [r7, #32]
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	f7ff fcbf 	bl	8007532 <dir_alloc>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007bba:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d148      	bne.n	8007c54 <dir_register+0x184>
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	3b01      	subs	r3, #1
 8007bc6:	623b      	str	r3, [r7, #32]
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d042      	beq.n	8007c54 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	695a      	ldr	r2, [r3, #20]
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	015b      	lsls	r3, r3, #5
 8007bd6:	1ad3      	subs	r3, r2, r3
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7ff fb4a 	bl	8007274 <dir_sdi>
 8007be0:	4603      	mov	r3, r0
 8007be2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007be6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d132      	bne.n	8007c54 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	3324      	adds	r3, #36	@ 0x24
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	f7ff fe8a 	bl	800790c <sum_sfn>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	4619      	mov	r1, r3
 8007c02:	69f8      	ldr	r0, [r7, #28]
 8007c04:	f7fe ffc8 	bl	8006b98 <move_window>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8007c0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d11d      	bne.n	8007c52 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007c16:	69fb      	ldr	r3, [r7, #28]
 8007c18:	6918      	ldr	r0, [r3, #16]
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a19      	ldr	r1, [r3, #32]
 8007c1e:	6a3b      	ldr	r3, [r7, #32]
 8007c20:	b2da      	uxtb	r2, r3
 8007c22:	7efb      	ldrb	r3, [r7, #27]
 8007c24:	f7ff fd7c 	bl	8007720 <put_lfn>
				fs->wflag = 1;
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8007c2e:	2100      	movs	r1, #0
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7ff fba8 	bl	8007386 <dir_next>
 8007c36:	4603      	mov	r3, r0
 8007c38:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8007c3c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d107      	bne.n	8007c54 <dir_register+0x184>
 8007c44:	6a3b      	ldr	r3, [r7, #32]
 8007c46:	3b01      	subs	r3, #1
 8007c48:	623b      	str	r3, [r7, #32]
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d1d5      	bne.n	8007bfc <dir_register+0x12c>
 8007c50:	e000      	b.n	8007c54 <dir_register+0x184>
				if (res != FR_OK) break;
 8007c52:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007c54:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d128      	bne.n	8007cae <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	69db      	ldr	r3, [r3, #28]
 8007c60:	4619      	mov	r1, r3
 8007c62:	69f8      	ldr	r0, [r7, #28]
 8007c64:	f7fe ff98 	bl	8006b98 <move_window>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8007c6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d11b      	bne.n	8007cae <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	2100      	movs	r1, #0
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7fe fdb8 	bl	80067f4 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a18      	ldr	r0, [r3, #32]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	3324      	adds	r3, #36	@ 0x24
 8007c8c:	220b      	movs	r2, #11
 8007c8e:	4619      	mov	r1, r3
 8007c90:	f7fe fd8f 	bl	80067b2 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6a1b      	ldr	r3, [r3, #32]
 8007c9e:	330c      	adds	r3, #12
 8007ca0:	f002 0218 	and.w	r2, r2, #24
 8007ca4:	b2d2      	uxtb	r2, r2
 8007ca6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8007ca8:	69fb      	ldr	r3, [r7, #28]
 8007caa:	2201      	movs	r2, #1
 8007cac:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007cae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3730      	adds	r7, #48	@ 0x30
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	4ec4ec4f 	.word	0x4ec4ec4f

08007cc0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b08a      	sub	sp, #40	@ 0x28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	613b      	str	r3, [r7, #16]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	691b      	ldr	r3, [r3, #16]
 8007cd6:	60fb      	str	r3, [r7, #12]
 8007cd8:	2300      	movs	r3, #0
 8007cda:	617b      	str	r3, [r7, #20]
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007ce0:	69bb      	ldr	r3, [r7, #24]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	61ba      	str	r2, [r7, #24]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	4413      	add	r3, r2
 8007cea:	781b      	ldrb	r3, [r3, #0]
 8007cec:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007cee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cf0:	2b1f      	cmp	r3, #31
 8007cf2:	d940      	bls.n	8007d76 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007cf4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cf6:	2b2f      	cmp	r3, #47	@ 0x2f
 8007cf8:	d006      	beq.n	8007d08 <create_name+0x48>
 8007cfa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007cfc:	2b5c      	cmp	r3, #92	@ 0x5c
 8007cfe:	d110      	bne.n	8007d22 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007d00:	e002      	b.n	8007d08 <create_name+0x48>
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	3301      	adds	r3, #1
 8007d06:	61bb      	str	r3, [r7, #24]
 8007d08:	693a      	ldr	r2, [r7, #16]
 8007d0a:	69bb      	ldr	r3, [r7, #24]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b2f      	cmp	r3, #47	@ 0x2f
 8007d12:	d0f6      	beq.n	8007d02 <create_name+0x42>
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	4413      	add	r3, r2
 8007d1a:	781b      	ldrb	r3, [r3, #0]
 8007d1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8007d1e:	d0f0      	beq.n	8007d02 <create_name+0x42>
			break;
 8007d20:	e02a      	b.n	8007d78 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	2bfe      	cmp	r3, #254	@ 0xfe
 8007d26:	d901      	bls.n	8007d2c <create_name+0x6c>
 8007d28:	2306      	movs	r3, #6
 8007d2a:	e17d      	b.n	8008028 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007d2c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d2e:	b2db      	uxtb	r3, r3
 8007d30:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007d32:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d34:	2101      	movs	r1, #1
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 fb68 	bl	800940c <ff_convert>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007d40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d101      	bne.n	8007d4a <create_name+0x8a>
 8007d46:	2306      	movs	r3, #6
 8007d48:	e16e      	b.n	8008028 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8007d4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8007d4e:	d809      	bhi.n	8007d64 <create_name+0xa4>
 8007d50:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d52:	4619      	mov	r1, r3
 8007d54:	488d      	ldr	r0, [pc, #564]	@ (8007f8c <create_name+0x2cc>)
 8007d56:	f7fe fd8f 	bl	8006878 <chk_chr>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <create_name+0xa4>
 8007d60:	2306      	movs	r3, #6
 8007d62:	e161      	b.n	8008028 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	1c5a      	adds	r2, r3, #1
 8007d68:	617a      	str	r2, [r7, #20]
 8007d6a:	005b      	lsls	r3, r3, #1
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007d72:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007d74:	e7b4      	b.n	8007ce0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007d76:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007d78:	693a      	ldr	r2, [r7, #16]
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	441a      	add	r2, r3
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007d82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007d84:	2b1f      	cmp	r3, #31
 8007d86:	d801      	bhi.n	8007d8c <create_name+0xcc>
 8007d88:	2304      	movs	r3, #4
 8007d8a:	e000      	b.n	8007d8e <create_name+0xce>
 8007d8c:	2300      	movs	r3, #0
 8007d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007d92:	e011      	b.n	8007db8 <create_name+0xf8>
		w = lfn[di - 1];
 8007d94:	697b      	ldr	r3, [r7, #20]
 8007d96:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007d9a:	3b01      	subs	r3, #1
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	68fa      	ldr	r2, [r7, #12]
 8007da0:	4413      	add	r3, r2
 8007da2:	881b      	ldrh	r3, [r3, #0]
 8007da4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8007da6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007da8:	2b20      	cmp	r3, #32
 8007daa:	d002      	beq.n	8007db2 <create_name+0xf2>
 8007dac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dae:	2b2e      	cmp	r3, #46	@ 0x2e
 8007db0:	d106      	bne.n	8007dc0 <create_name+0x100>
		di--;
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	3b01      	subs	r3, #1
 8007db6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1ea      	bne.n	8007d94 <create_name+0xd4>
 8007dbe:	e000      	b.n	8007dc2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007dc0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	005b      	lsls	r3, r3, #1
 8007dc6:	68fa      	ldr	r2, [r7, #12]
 8007dc8:	4413      	add	r3, r2
 8007dca:	2200      	movs	r2, #0
 8007dcc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007dce:	697b      	ldr	r3, [r7, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d101      	bne.n	8007dd8 <create_name+0x118>
 8007dd4:	2306      	movs	r3, #6
 8007dd6:	e127      	b.n	8008028 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	3324      	adds	r3, #36	@ 0x24
 8007ddc:	220b      	movs	r2, #11
 8007dde:	2120      	movs	r1, #32
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7fe fd07 	bl	80067f4 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007de6:	2300      	movs	r3, #0
 8007de8:	61bb      	str	r3, [r7, #24]
 8007dea:	e002      	b.n	8007df2 <create_name+0x132>
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	3301      	adds	r3, #1
 8007df0:	61bb      	str	r3, [r7, #24]
 8007df2:	69bb      	ldr	r3, [r7, #24]
 8007df4:	005b      	lsls	r3, r3, #1
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4413      	add	r3, r2
 8007dfa:	881b      	ldrh	r3, [r3, #0]
 8007dfc:	2b20      	cmp	r3, #32
 8007dfe:	d0f5      	beq.n	8007dec <create_name+0x12c>
 8007e00:	69bb      	ldr	r3, [r7, #24]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	68fa      	ldr	r2, [r7, #12]
 8007e06:	4413      	add	r3, r2
 8007e08:	881b      	ldrh	r3, [r3, #0]
 8007e0a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e0c:	d0ee      	beq.n	8007dec <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d009      	beq.n	8007e28 <create_name+0x168>
 8007e14:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e18:	f043 0303 	orr.w	r3, r3, #3
 8007e1c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007e20:	e002      	b.n	8007e28 <create_name+0x168>
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	617b      	str	r3, [r7, #20]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d009      	beq.n	8007e42 <create_name+0x182>
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007e34:	3b01      	subs	r3, #1
 8007e36:	005b      	lsls	r3, r3, #1
 8007e38:	68fa      	ldr	r2, [r7, #12]
 8007e3a:	4413      	add	r3, r2
 8007e3c:	881b      	ldrh	r3, [r3, #0]
 8007e3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e40:	d1ef      	bne.n	8007e22 <create_name+0x162>

	i = b = 0; ni = 8;
 8007e42:	2300      	movs	r3, #0
 8007e44:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007e48:	2300      	movs	r3, #0
 8007e4a:	623b      	str	r3, [r7, #32]
 8007e4c:	2308      	movs	r3, #8
 8007e4e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007e50:	69bb      	ldr	r3, [r7, #24]
 8007e52:	1c5a      	adds	r2, r3, #1
 8007e54:	61ba      	str	r2, [r7, #24]
 8007e56:	005b      	lsls	r3, r3, #1
 8007e58:	68fa      	ldr	r2, [r7, #12]
 8007e5a:	4413      	add	r3, r2
 8007e5c:	881b      	ldrh	r3, [r3, #0]
 8007e5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007e60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f000 8090 	beq.w	8007f88 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007e68:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d006      	beq.n	8007e7c <create_name+0x1bc>
 8007e6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007e70:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e72:	d10a      	bne.n	8007e8a <create_name+0x1ca>
 8007e74:	69ba      	ldr	r2, [r7, #24]
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d006      	beq.n	8007e8a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8007e7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e80:	f043 0303 	orr.w	r3, r3, #3
 8007e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e88:	e07d      	b.n	8007f86 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8007e8a:	6a3a      	ldr	r2, [r7, #32]
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d203      	bcs.n	8007e9a <create_name+0x1da>
 8007e92:	69ba      	ldr	r2, [r7, #24]
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	429a      	cmp	r2, r3
 8007e98:	d123      	bne.n	8007ee2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	2b0b      	cmp	r3, #11
 8007e9e:	d106      	bne.n	8007eae <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8007ea0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ea4:	f043 0303 	orr.w	r3, r3, #3
 8007ea8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007eac:	e075      	b.n	8007f9a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007eae:	69ba      	ldr	r2, [r7, #24]
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	d005      	beq.n	8007ec2 <create_name+0x202>
 8007eb6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007eba:	f043 0303 	orr.w	r3, r3, #3
 8007ebe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007ec2:	69ba      	ldr	r2, [r7, #24]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d866      	bhi.n	8007f98 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8007eca:	697b      	ldr	r3, [r7, #20]
 8007ecc:	61bb      	str	r3, [r7, #24]
 8007ece:	2308      	movs	r3, #8
 8007ed0:	623b      	str	r3, [r7, #32]
 8007ed2:	230b      	movs	r3, #11
 8007ed4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8007ed6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007ee0:	e051      	b.n	8007f86 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007ee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ee4:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ee6:	d914      	bls.n	8007f12 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007ee8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007eea:	2100      	movs	r1, #0
 8007eec:	4618      	mov	r0, r3
 8007eee:	f001 fa8d 	bl	800940c <ff_convert>
 8007ef2:	4603      	mov	r3, r0
 8007ef4:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007ef6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d004      	beq.n	8007f06 <create_name+0x246>
 8007efc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007efe:	3b80      	subs	r3, #128	@ 0x80
 8007f00:	4a23      	ldr	r2, [pc, #140]	@ (8007f90 <create_name+0x2d0>)
 8007f02:	5cd3      	ldrb	r3, [r2, r3]
 8007f04:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007f06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f0a:	f043 0302 	orr.w	r3, r3, #2
 8007f0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007f12:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d007      	beq.n	8007f28 <create_name+0x268>
 8007f18:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	481d      	ldr	r0, [pc, #116]	@ (8007f94 <create_name+0x2d4>)
 8007f1e:	f7fe fcab 	bl	8006878 <chk_chr>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d008      	beq.n	8007f3a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007f28:	235f      	movs	r3, #95	@ 0x5f
 8007f2a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f30:	f043 0303 	orr.w	r3, r3, #3
 8007f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007f38:	e01b      	b.n	8007f72 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 8007f3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f3c:	2b40      	cmp	r3, #64	@ 0x40
 8007f3e:	d909      	bls.n	8007f54 <create_name+0x294>
 8007f40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f42:	2b5a      	cmp	r3, #90	@ 0x5a
 8007f44:	d806      	bhi.n	8007f54 <create_name+0x294>
					b |= 2;
 8007f46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f4a:	f043 0302 	orr.w	r3, r3, #2
 8007f4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007f52:	e00e      	b.n	8007f72 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007f54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f56:	2b60      	cmp	r3, #96	@ 0x60
 8007f58:	d90b      	bls.n	8007f72 <create_name+0x2b2>
 8007f5a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f5c:	2b7a      	cmp	r3, #122	@ 0x7a
 8007f5e:	d808      	bhi.n	8007f72 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007f60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f64:	f043 0301 	orr.w	r3, r3, #1
 8007f68:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007f6c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007f6e:	3b20      	subs	r3, #32
 8007f70:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007f72:	6a3b      	ldr	r3, [r7, #32]
 8007f74:	1c5a      	adds	r2, r3, #1
 8007f76:	623a      	str	r2, [r7, #32]
 8007f78:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007f7a:	b2d1      	uxtb	r1, r2
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	4413      	add	r3, r2
 8007f80:	460a      	mov	r2, r1
 8007f82:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007f86:	e763      	b.n	8007e50 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007f88:	bf00      	nop
 8007f8a:	e006      	b.n	8007f9a <create_name+0x2da>
 8007f8c:	0800c4e0 	.word	0x0800c4e0
 8007f90:	0800c570 	.word	0x0800c570
 8007f94:	0800c4ec 	.word	0x0800c4ec
			if (si > di) break;			/* No extension */
 8007f98:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007fa0:	2be5      	cmp	r3, #229	@ 0xe5
 8007fa2:	d103      	bne.n	8007fac <create_name+0x2ec>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2205      	movs	r2, #5
 8007fa8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8007fac:	69fb      	ldr	r3, [r7, #28]
 8007fae:	2b08      	cmp	r3, #8
 8007fb0:	d104      	bne.n	8007fbc <create_name+0x2fc>
 8007fb2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007fbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fc0:	f003 030c 	and.w	r3, r3, #12
 8007fc4:	2b0c      	cmp	r3, #12
 8007fc6:	d005      	beq.n	8007fd4 <create_name+0x314>
 8007fc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007fcc:	f003 0303 	and.w	r3, r3, #3
 8007fd0:	2b03      	cmp	r3, #3
 8007fd2:	d105      	bne.n	8007fe0 <create_name+0x320>
 8007fd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fd8:	f043 0302 	orr.w	r3, r3, #2
 8007fdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fe4:	f003 0302 	and.w	r3, r3, #2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d117      	bne.n	800801c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007fec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007ff0:	f003 0303 	and.w	r3, r3, #3
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d105      	bne.n	8008004 <create_name+0x344>
 8007ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007ffc:	f043 0310 	orr.w	r3, r3, #16
 8008000:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8008004:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008008:	f003 030c 	and.w	r3, r3, #12
 800800c:	2b04      	cmp	r3, #4
 800800e:	d105      	bne.n	800801c <create_name+0x35c>
 8008010:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008014:	f043 0308 	orr.w	r3, r3, #8
 8008018:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008022:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8008026:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8008028:	4618      	mov	r0, r3
 800802a:	3728      	adds	r7, #40	@ 0x28
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	b086      	sub	sp, #24
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800803e:	693b      	ldr	r3, [r7, #16]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8008044:	e002      	b.n	800804c <follow_path+0x1c>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	3301      	adds	r3, #1
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	781b      	ldrb	r3, [r3, #0]
 8008050:	2b2f      	cmp	r3, #47	@ 0x2f
 8008052:	d0f8      	beq.n	8008046 <follow_path+0x16>
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	2b5c      	cmp	r3, #92	@ 0x5c
 800805a:	d0f4      	beq.n	8008046 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	2200      	movs	r2, #0
 8008060:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	2b1f      	cmp	r3, #31
 8008068:	d80a      	bhi.n	8008080 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2280      	movs	r2, #128	@ 0x80
 800806e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8008072:	2100      	movs	r1, #0
 8008074:	6878      	ldr	r0, [r7, #4]
 8008076:	f7ff f8fd 	bl	8007274 <dir_sdi>
 800807a:	4603      	mov	r3, r0
 800807c:	75fb      	strb	r3, [r7, #23]
 800807e:	e048      	b.n	8008112 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008080:	463b      	mov	r3, r7
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7ff fe1b 	bl	8007cc0 <create_name>
 800808a:	4603      	mov	r3, r0
 800808c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800808e:	7dfb      	ldrb	r3, [r7, #23]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d139      	bne.n	8008108 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7ff fc5a 	bl	800794e <dir_find>
 800809a:	4603      	mov	r3, r0
 800809c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80080a4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00a      	beq.n	80080c2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80080ac:	7dfb      	ldrb	r3, [r7, #23]
 80080ae:	2b04      	cmp	r3, #4
 80080b0:	d12c      	bne.n	800810c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80080b2:	7afb      	ldrb	r3, [r7, #11]
 80080b4:	f003 0304 	and.w	r3, r3, #4
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d127      	bne.n	800810c <follow_path+0xdc>
 80080bc:	2305      	movs	r3, #5
 80080be:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80080c0:	e024      	b.n	800810c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80080c2:	7afb      	ldrb	r3, [r7, #11]
 80080c4:	f003 0304 	and.w	r3, r3, #4
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d121      	bne.n	8008110 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	799b      	ldrb	r3, [r3, #6]
 80080d0:	f003 0310 	and.w	r3, r3, #16
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d102      	bne.n	80080de <follow_path+0xae>
				res = FR_NO_PATH; break;
 80080d8:	2305      	movs	r3, #5
 80080da:	75fb      	strb	r3, [r7, #23]
 80080dc:	e019      	b.n	8008112 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	695b      	ldr	r3, [r3, #20]
 80080e8:	68fa      	ldr	r2, [r7, #12]
 80080ea:	8992      	ldrh	r2, [r2, #12]
 80080ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80080f0:	fb00 f202 	mul.w	r2, r0, r2
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	440b      	add	r3, r1
 80080f8:	4619      	mov	r1, r3
 80080fa:	68f8      	ldr	r0, [r7, #12]
 80080fc:	f7ff fa60 	bl	80075c0 <ld_clust>
 8008100:	4602      	mov	r2, r0
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008106:	e7bb      	b.n	8008080 <follow_path+0x50>
			if (res != FR_OK) break;
 8008108:	bf00      	nop
 800810a:	e002      	b.n	8008112 <follow_path+0xe2>
				break;
 800810c:	bf00      	nop
 800810e:	e000      	b.n	8008112 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8008110:	bf00      	nop
			}
		}
	}

	return res;
 8008112:	7dfb      	ldrb	r3, [r7, #23]
}
 8008114:	4618      	mov	r0, r3
 8008116:	3718      	adds	r7, #24
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800811c:	b480      	push	{r7}
 800811e:	b087      	sub	sp, #28
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008124:	f04f 33ff 	mov.w	r3, #4294967295
 8008128:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d031      	beq.n	8008196 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	617b      	str	r3, [r7, #20]
 8008138:	e002      	b.n	8008140 <get_ldnumber+0x24>
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	3301      	adds	r3, #1
 800813e:	617b      	str	r3, [r7, #20]
 8008140:	697b      	ldr	r3, [r7, #20]
 8008142:	781b      	ldrb	r3, [r3, #0]
 8008144:	2b1f      	cmp	r3, #31
 8008146:	d903      	bls.n	8008150 <get_ldnumber+0x34>
 8008148:	697b      	ldr	r3, [r7, #20]
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	2b3a      	cmp	r3, #58	@ 0x3a
 800814e:	d1f4      	bne.n	800813a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	781b      	ldrb	r3, [r3, #0]
 8008154:	2b3a      	cmp	r3, #58	@ 0x3a
 8008156:	d11c      	bne.n	8008192 <get_ldnumber+0x76>
			tp = *path;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	1c5a      	adds	r2, r3, #1
 8008162:	60fa      	str	r2, [r7, #12]
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	3b30      	subs	r3, #48	@ 0x30
 8008168:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	2b09      	cmp	r3, #9
 800816e:	d80e      	bhi.n	800818e <get_ldnumber+0x72>
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	697b      	ldr	r3, [r7, #20]
 8008174:	429a      	cmp	r2, r3
 8008176:	d10a      	bne.n	800818e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d107      	bne.n	800818e <get_ldnumber+0x72>
					vol = (int)i;
 800817e:	68bb      	ldr	r3, [r7, #8]
 8008180:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	3301      	adds	r3, #1
 8008186:	617b      	str	r3, [r7, #20]
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	697a      	ldr	r2, [r7, #20]
 800818c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800818e:	693b      	ldr	r3, [r7, #16]
 8008190:	e002      	b.n	8008198 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8008192:	2300      	movs	r3, #0
 8008194:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8008196:	693b      	ldr	r3, [r7, #16]
}
 8008198:	4618      	mov	r0, r3
 800819a:	371c      	adds	r7, #28
 800819c:	46bd      	mov	sp, r7
 800819e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a2:	4770      	bx	lr

080081a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	70da      	strb	r2, [r3, #3]
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f04f 32ff 	mov.w	r2, #4294967295
 80081ba:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80081bc:	6839      	ldr	r1, [r7, #0]
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7fe fcea 	bl	8006b98 <move_window>
 80081c4:	4603      	mov	r3, r0
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d001      	beq.n	80081ce <check_fs+0x2a>
 80081ca:	2304      	movs	r3, #4
 80081cc:	e038      	b.n	8008240 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	3338      	adds	r3, #56	@ 0x38
 80081d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80081d6:	4618      	mov	r0, r3
 80081d8:	f7fe fa68 	bl	80066ac <ld_word>
 80081dc:	4603      	mov	r3, r0
 80081de:	461a      	mov	r2, r3
 80081e0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80081e4:	429a      	cmp	r2, r3
 80081e6:	d001      	beq.n	80081ec <check_fs+0x48>
 80081e8:	2303      	movs	r3, #3
 80081ea:	e029      	b.n	8008240 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80081f2:	2be9      	cmp	r3, #233	@ 0xe9
 80081f4:	d009      	beq.n	800820a <check_fs+0x66>
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80081fc:	2beb      	cmp	r3, #235	@ 0xeb
 80081fe:	d11e      	bne.n	800823e <check_fs+0x9a>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8008206:	2b90      	cmp	r3, #144	@ 0x90
 8008208:	d119      	bne.n	800823e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	3338      	adds	r3, #56	@ 0x38
 800820e:	3336      	adds	r3, #54	@ 0x36
 8008210:	4618      	mov	r0, r3
 8008212:	f7fe fa64 	bl	80066de <ld_dword>
 8008216:	4603      	mov	r3, r0
 8008218:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800821c:	4a0a      	ldr	r2, [pc, #40]	@ (8008248 <check_fs+0xa4>)
 800821e:	4293      	cmp	r3, r2
 8008220:	d101      	bne.n	8008226 <check_fs+0x82>
 8008222:	2300      	movs	r3, #0
 8008224:	e00c      	b.n	8008240 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	3338      	adds	r3, #56	@ 0x38
 800822a:	3352      	adds	r3, #82	@ 0x52
 800822c:	4618      	mov	r0, r3
 800822e:	f7fe fa56 	bl	80066de <ld_dword>
 8008232:	4603      	mov	r3, r0
 8008234:	4a05      	ldr	r2, [pc, #20]	@ (800824c <check_fs+0xa8>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d101      	bne.n	800823e <check_fs+0x9a>
 800823a:	2300      	movs	r3, #0
 800823c:	e000      	b.n	8008240 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800823e:	2302      	movs	r3, #2
}
 8008240:	4618      	mov	r0, r3
 8008242:	3708      	adds	r7, #8
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	00544146 	.word	0x00544146
 800824c:	33544146 	.word	0x33544146

08008250 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008250:	b580      	push	{r7, lr}
 8008252:	b096      	sub	sp, #88	@ 0x58
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	4613      	mov	r3, r2
 800825c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2200      	movs	r2, #0
 8008262:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8008264:	68f8      	ldr	r0, [r7, #12]
 8008266:	f7ff ff59 	bl	800811c <get_ldnumber>
 800826a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800826c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800826e:	2b00      	cmp	r3, #0
 8008270:	da01      	bge.n	8008276 <find_volume+0x26>
 8008272:	230b      	movs	r3, #11
 8008274:	e265      	b.n	8008742 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8008276:	4a9f      	ldr	r2, [pc, #636]	@ (80084f4 <find_volume+0x2a4>)
 8008278:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800827e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8008280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008282:	2b00      	cmp	r3, #0
 8008284:	d101      	bne.n	800828a <find_volume+0x3a>
 8008286:	230c      	movs	r3, #12
 8008288:	e25b      	b.n	8008742 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800828e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8008290:	79fb      	ldrb	r3, [r7, #7]
 8008292:	f023 0301 	bic.w	r3, r3, #1
 8008296:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8008298:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800829a:	781b      	ldrb	r3, [r3, #0]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d01a      	beq.n	80082d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80082a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a2:	785b      	ldrb	r3, [r3, #1]
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe f963 	bl	8006570 <disk_status>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80082b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80082b4:	f003 0301 	and.w	r3, r3, #1
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10c      	bne.n	80082d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80082bc:	79fb      	ldrb	r3, [r7, #7]
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d007      	beq.n	80082d2 <find_volume+0x82>
 80082c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80082c6:	f003 0304 	and.w	r3, r3, #4
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d001      	beq.n	80082d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80082ce:	230a      	movs	r3, #10
 80082d0:	e237      	b.n	8008742 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 80082d2:	2300      	movs	r3, #0
 80082d4:	e235      	b.n	8008742 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80082d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082d8:	2200      	movs	r2, #0
 80082da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80082dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80082de:	b2da      	uxtb	r2, r3
 80082e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80082e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082e6:	785b      	ldrb	r3, [r3, #1]
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7fe f95b 	bl	80065a4 <disk_initialize>
 80082ee:	4603      	mov	r3, r0
 80082f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80082f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80082f8:	f003 0301 	and.w	r3, r3, #1
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008300:	2303      	movs	r3, #3
 8008302:	e21e      	b.n	8008742 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008304:	79fb      	ldrb	r3, [r7, #7]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d007      	beq.n	800831a <find_volume+0xca>
 800830a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800830e:	f003 0304 	and.w	r3, r3, #4
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008316:	230a      	movs	r3, #10
 8008318:	e213      	b.n	8008742 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800831a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800831c:	7858      	ldrb	r0, [r3, #1]
 800831e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008320:	330c      	adds	r3, #12
 8008322:	461a      	mov	r2, r3
 8008324:	2102      	movs	r1, #2
 8008326:	f7fe f9a3 	bl	8006670 <disk_ioctl>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d001      	beq.n	8008334 <find_volume+0xe4>
 8008330:	2301      	movs	r3, #1
 8008332:	e206      	b.n	8008742 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8008334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008336:	899b      	ldrh	r3, [r3, #12]
 8008338:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800833c:	d80d      	bhi.n	800835a <find_volume+0x10a>
 800833e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008340:	899b      	ldrh	r3, [r3, #12]
 8008342:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008346:	d308      	bcc.n	800835a <find_volume+0x10a>
 8008348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834a:	899b      	ldrh	r3, [r3, #12]
 800834c:	461a      	mov	r2, r3
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	899b      	ldrh	r3, [r3, #12]
 8008352:	3b01      	subs	r3, #1
 8008354:	4013      	ands	r3, r2
 8008356:	2b00      	cmp	r3, #0
 8008358:	d001      	beq.n	800835e <find_volume+0x10e>
 800835a:	2301      	movs	r3, #1
 800835c:	e1f1      	b.n	8008742 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8008362:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008364:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008366:	f7ff ff1d 	bl	80081a4 <check_fs>
 800836a:	4603      	mov	r3, r0
 800836c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8008370:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008374:	2b02      	cmp	r3, #2
 8008376:	d149      	bne.n	800840c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008378:	2300      	movs	r3, #0
 800837a:	643b      	str	r3, [r7, #64]	@ 0x40
 800837c:	e01e      	b.n	80083bc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800837e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008380:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8008384:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008386:	011b      	lsls	r3, r3, #4
 8008388:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800838c:	4413      	add	r3, r2
 800838e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8008390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008392:	3304      	adds	r3, #4
 8008394:	781b      	ldrb	r3, [r3, #0]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d006      	beq.n	80083a8 <find_volume+0x158>
 800839a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800839c:	3308      	adds	r3, #8
 800839e:	4618      	mov	r0, r3
 80083a0:	f7fe f99d 	bl	80066de <ld_dword>
 80083a4:	4602      	mov	r2, r0
 80083a6:	e000      	b.n	80083aa <find_volume+0x15a>
 80083a8:	2200      	movs	r2, #0
 80083aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083ac:	009b      	lsls	r3, r3, #2
 80083ae:	3358      	adds	r3, #88	@ 0x58
 80083b0:	443b      	add	r3, r7
 80083b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80083b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083b8:	3301      	adds	r3, #1
 80083ba:	643b      	str	r3, [r7, #64]	@ 0x40
 80083bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083be:	2b03      	cmp	r3, #3
 80083c0:	d9dd      	bls.n	800837e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80083c2:	2300      	movs	r3, #0
 80083c4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 80083c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <find_volume+0x182>
 80083cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083ce:	3b01      	subs	r3, #1
 80083d0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80083d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	3358      	adds	r3, #88	@ 0x58
 80083d8:	443b      	add	r3, r7
 80083da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80083de:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80083e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <find_volume+0x1a2>
 80083e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80083e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80083ea:	f7ff fedb 	bl	80081a4 <check_fs>
 80083ee:	4603      	mov	r3, r0
 80083f0:	e000      	b.n	80083f4 <find_volume+0x1a4>
 80083f2:	2303      	movs	r3, #3
 80083f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80083f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80083fc:	2b01      	cmp	r3, #1
 80083fe:	d905      	bls.n	800840c <find_volume+0x1bc>
 8008400:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008402:	3301      	adds	r3, #1
 8008404:	643b      	str	r3, [r7, #64]	@ 0x40
 8008406:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008408:	2b03      	cmp	r3, #3
 800840a:	d9e2      	bls.n	80083d2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800840c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008410:	2b04      	cmp	r3, #4
 8008412:	d101      	bne.n	8008418 <find_volume+0x1c8>
 8008414:	2301      	movs	r3, #1
 8008416:	e194      	b.n	8008742 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008418:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800841c:	2b01      	cmp	r3, #1
 800841e:	d901      	bls.n	8008424 <find_volume+0x1d4>
 8008420:	230d      	movs	r3, #13
 8008422:	e18e      	b.n	8008742 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008426:	3338      	adds	r3, #56	@ 0x38
 8008428:	330b      	adds	r3, #11
 800842a:	4618      	mov	r0, r3
 800842c:	f7fe f93e 	bl	80066ac <ld_word>
 8008430:	4603      	mov	r3, r0
 8008432:	461a      	mov	r2, r3
 8008434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008436:	899b      	ldrh	r3, [r3, #12]
 8008438:	429a      	cmp	r2, r3
 800843a:	d001      	beq.n	8008440 <find_volume+0x1f0>
 800843c:	230d      	movs	r3, #13
 800843e:	e180      	b.n	8008742 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008442:	3338      	adds	r3, #56	@ 0x38
 8008444:	3316      	adds	r3, #22
 8008446:	4618      	mov	r0, r3
 8008448:	f7fe f930 	bl	80066ac <ld_word>
 800844c:	4603      	mov	r3, r0
 800844e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008450:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008452:	2b00      	cmp	r3, #0
 8008454:	d106      	bne.n	8008464 <find_volume+0x214>
 8008456:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008458:	3338      	adds	r3, #56	@ 0x38
 800845a:	3324      	adds	r3, #36	@ 0x24
 800845c:	4618      	mov	r0, r3
 800845e:	f7fe f93e 	bl	80066de <ld_dword>
 8008462:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8008464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008466:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008468:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800846a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800846c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8008470:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008472:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008474:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008476:	789b      	ldrb	r3, [r3, #2]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d005      	beq.n	8008488 <find_volume+0x238>
 800847c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800847e:	789b      	ldrb	r3, [r3, #2]
 8008480:	2b02      	cmp	r3, #2
 8008482:	d001      	beq.n	8008488 <find_volume+0x238>
 8008484:	230d      	movs	r3, #13
 8008486:	e15c      	b.n	8008742 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800848a:	789b      	ldrb	r3, [r3, #2]
 800848c:	461a      	mov	r2, r3
 800848e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008490:	fb02 f303 	mul.w	r3, r2, r3
 8008494:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008496:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008498:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800849c:	461a      	mov	r2, r3
 800849e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80084a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084a4:	895b      	ldrh	r3, [r3, #10]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d008      	beq.n	80084bc <find_volume+0x26c>
 80084aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084ac:	895b      	ldrh	r3, [r3, #10]
 80084ae:	461a      	mov	r2, r3
 80084b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084b2:	895b      	ldrh	r3, [r3, #10]
 80084b4:	3b01      	subs	r3, #1
 80084b6:	4013      	ands	r3, r2
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d001      	beq.n	80084c0 <find_volume+0x270>
 80084bc:	230d      	movs	r3, #13
 80084be:	e140      	b.n	8008742 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80084c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084c2:	3338      	adds	r3, #56	@ 0x38
 80084c4:	3311      	adds	r3, #17
 80084c6:	4618      	mov	r0, r3
 80084c8:	f7fe f8f0 	bl	80066ac <ld_word>
 80084cc:	4603      	mov	r3, r0
 80084ce:	461a      	mov	r2, r3
 80084d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80084d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d6:	891b      	ldrh	r3, [r3, #8]
 80084d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80084da:	8992      	ldrh	r2, [r2, #12]
 80084dc:	0952      	lsrs	r2, r2, #5
 80084de:	b292      	uxth	r2, r2
 80084e0:	fbb3 f1f2 	udiv	r1, r3, r2
 80084e4:	fb01 f202 	mul.w	r2, r1, r2
 80084e8:	1a9b      	subs	r3, r3, r2
 80084ea:	b29b      	uxth	r3, r3
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d003      	beq.n	80084f8 <find_volume+0x2a8>
 80084f0:	230d      	movs	r3, #13
 80084f2:	e126      	b.n	8008742 <find_volume+0x4f2>
 80084f4:	20002470 	.word	0x20002470

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80084f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084fa:	3338      	adds	r3, #56	@ 0x38
 80084fc:	3313      	adds	r3, #19
 80084fe:	4618      	mov	r0, r3
 8008500:	f7fe f8d4 	bl	80066ac <ld_word>
 8008504:	4603      	mov	r3, r0
 8008506:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8008508:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800850a:	2b00      	cmp	r3, #0
 800850c:	d106      	bne.n	800851c <find_volume+0x2cc>
 800850e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008510:	3338      	adds	r3, #56	@ 0x38
 8008512:	3320      	adds	r3, #32
 8008514:	4618      	mov	r0, r3
 8008516:	f7fe f8e2 	bl	80066de <ld_dword>
 800851a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800851c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800851e:	3338      	adds	r3, #56	@ 0x38
 8008520:	330e      	adds	r3, #14
 8008522:	4618      	mov	r0, r3
 8008524:	f7fe f8c2 	bl	80066ac <ld_word>
 8008528:	4603      	mov	r3, r0
 800852a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800852c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800852e:	2b00      	cmp	r3, #0
 8008530:	d101      	bne.n	8008536 <find_volume+0x2e6>
 8008532:	230d      	movs	r3, #13
 8008534:	e105      	b.n	8008742 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008536:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8008538:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800853a:	4413      	add	r3, r2
 800853c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800853e:	8911      	ldrh	r1, [r2, #8]
 8008540:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008542:	8992      	ldrh	r2, [r2, #12]
 8008544:	0952      	lsrs	r2, r2, #5
 8008546:	b292      	uxth	r2, r2
 8008548:	fbb1 f2f2 	udiv	r2, r1, r2
 800854c:	b292      	uxth	r2, r2
 800854e:	4413      	add	r3, r2
 8008550:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008552:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008556:	429a      	cmp	r2, r3
 8008558:	d201      	bcs.n	800855e <find_volume+0x30e>
 800855a:	230d      	movs	r3, #13
 800855c:	e0f1      	b.n	8008742 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800855e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	1ad3      	subs	r3, r2, r3
 8008564:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008566:	8952      	ldrh	r2, [r2, #10]
 8008568:	fbb3 f3f2 	udiv	r3, r3, r2
 800856c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800856e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008570:	2b00      	cmp	r3, #0
 8008572:	d101      	bne.n	8008578 <find_volume+0x328>
 8008574:	230d      	movs	r3, #13
 8008576:	e0e4      	b.n	8008742 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8008578:	2303      	movs	r3, #3
 800857a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800857e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008580:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008584:	4293      	cmp	r3, r2
 8008586:	d802      	bhi.n	800858e <find_volume+0x33e>
 8008588:	2302      	movs	r3, #2
 800858a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800858e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008590:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008594:	4293      	cmp	r3, r2
 8008596:	d802      	bhi.n	800859e <find_volume+0x34e>
 8008598:	2301      	movs	r3, #1
 800859a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800859e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80085a0:	1c9a      	adds	r2, r3, #2
 80085a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80085aa:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80085ac:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80085ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085b0:	441a      	add	r2, r3
 80085b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085b4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 80085b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80085b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085ba:	441a      	add	r2, r3
 80085bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085be:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 80085c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80085c4:	2b03      	cmp	r3, #3
 80085c6:	d11e      	bne.n	8008606 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80085c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ca:	3338      	adds	r3, #56	@ 0x38
 80085cc:	332a      	adds	r3, #42	@ 0x2a
 80085ce:	4618      	mov	r0, r3
 80085d0:	f7fe f86c 	bl	80066ac <ld_word>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <find_volume+0x38e>
 80085da:	230d      	movs	r3, #13
 80085dc:	e0b1      	b.n	8008742 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80085de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085e0:	891b      	ldrh	r3, [r3, #8]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d001      	beq.n	80085ea <find_volume+0x39a>
 80085e6:	230d      	movs	r3, #13
 80085e8:	e0ab      	b.n	8008742 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80085ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085ec:	3338      	adds	r3, #56	@ 0x38
 80085ee:	332c      	adds	r3, #44	@ 0x2c
 80085f0:	4618      	mov	r0, r3
 80085f2:	f7fe f874 	bl	80066de <ld_dword>
 80085f6:	4602      	mov	r2, r0
 80085f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fa:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80085fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085fe:	69db      	ldr	r3, [r3, #28]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	647b      	str	r3, [r7, #68]	@ 0x44
 8008604:	e01f      	b.n	8008646 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008608:	891b      	ldrh	r3, [r3, #8]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <find_volume+0x3c2>
 800860e:	230d      	movs	r3, #13
 8008610:	e097      	b.n	8008742 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008614:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008616:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008618:	441a      	add	r2, r3
 800861a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800861e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008622:	2b02      	cmp	r3, #2
 8008624:	d103      	bne.n	800862e <find_volume+0x3de>
 8008626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008628:	69db      	ldr	r3, [r3, #28]
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	e00a      	b.n	8008644 <find_volume+0x3f4>
 800862e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008630:	69da      	ldr	r2, [r3, #28]
 8008632:	4613      	mov	r3, r2
 8008634:	005b      	lsls	r3, r3, #1
 8008636:	4413      	add	r3, r2
 8008638:	085a      	lsrs	r2, r3, #1
 800863a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863c:	69db      	ldr	r3, [r3, #28]
 800863e:	f003 0301 	and.w	r3, r3, #1
 8008642:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008644:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008648:	6a1a      	ldr	r2, [r3, #32]
 800864a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800864c:	899b      	ldrh	r3, [r3, #12]
 800864e:	4619      	mov	r1, r3
 8008650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008652:	440b      	add	r3, r1
 8008654:	3b01      	subs	r3, #1
 8008656:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008658:	8989      	ldrh	r1, [r1, #12]
 800865a:	fbb3 f3f1 	udiv	r3, r3, r1
 800865e:	429a      	cmp	r2, r3
 8008660:	d201      	bcs.n	8008666 <find_volume+0x416>
 8008662:	230d      	movs	r3, #13
 8008664:	e06d      	b.n	8008742 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008668:	f04f 32ff 	mov.w	r2, #4294967295
 800866c:	619a      	str	r2, [r3, #24]
 800866e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008670:	699a      	ldr	r2, [r3, #24]
 8008672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008674:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8008676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008678:	2280      	movs	r2, #128	@ 0x80
 800867a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800867c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8008680:	2b03      	cmp	r3, #3
 8008682:	d149      	bne.n	8008718 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008686:	3338      	adds	r3, #56	@ 0x38
 8008688:	3330      	adds	r3, #48	@ 0x30
 800868a:	4618      	mov	r0, r3
 800868c:	f7fe f80e 	bl	80066ac <ld_word>
 8008690:	4603      	mov	r3, r0
 8008692:	2b01      	cmp	r3, #1
 8008694:	d140      	bne.n	8008718 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008698:	3301      	adds	r3, #1
 800869a:	4619      	mov	r1, r3
 800869c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800869e:	f7fe fa7b 	bl	8006b98 <move_window>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d137      	bne.n	8008718 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80086a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086aa:	2200      	movs	r2, #0
 80086ac:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80086ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b0:	3338      	adds	r3, #56	@ 0x38
 80086b2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fd fff8 	bl	80066ac <ld_word>
 80086bc:	4603      	mov	r3, r0
 80086be:	461a      	mov	r2, r3
 80086c0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d127      	bne.n	8008718 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80086c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086ca:	3338      	adds	r3, #56	@ 0x38
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fe f806 	bl	80066de <ld_dword>
 80086d2:	4603      	mov	r3, r0
 80086d4:	4a1d      	ldr	r2, [pc, #116]	@ (800874c <find_volume+0x4fc>)
 80086d6:	4293      	cmp	r3, r2
 80086d8:	d11e      	bne.n	8008718 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80086da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086dc:	3338      	adds	r3, #56	@ 0x38
 80086de:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80086e2:	4618      	mov	r0, r3
 80086e4:	f7fd fffb 	bl	80066de <ld_dword>
 80086e8:	4603      	mov	r3, r0
 80086ea:	4a19      	ldr	r2, [pc, #100]	@ (8008750 <find_volume+0x500>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d113      	bne.n	8008718 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80086f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086f2:	3338      	adds	r3, #56	@ 0x38
 80086f4:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80086f8:	4618      	mov	r0, r3
 80086fa:	f7fd fff0 	bl	80066de <ld_dword>
 80086fe:	4602      	mov	r2, r0
 8008700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008702:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008706:	3338      	adds	r3, #56	@ 0x38
 8008708:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800870c:	4618      	mov	r0, r3
 800870e:	f7fd ffe6 	bl	80066de <ld_dword>
 8008712:	4602      	mov	r2, r0
 8008714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008716:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008718:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800871a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800871e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8008720:	4b0c      	ldr	r3, [pc, #48]	@ (8008754 <find_volume+0x504>)
 8008722:	881b      	ldrh	r3, [r3, #0]
 8008724:	3301      	adds	r3, #1
 8008726:	b29a      	uxth	r2, r3
 8008728:	4b0a      	ldr	r3, [pc, #40]	@ (8008754 <find_volume+0x504>)
 800872a:	801a      	strh	r2, [r3, #0]
 800872c:	4b09      	ldr	r3, [pc, #36]	@ (8008754 <find_volume+0x504>)
 800872e:	881a      	ldrh	r2, [r3, #0]
 8008730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008732:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008736:	4a08      	ldr	r2, [pc, #32]	@ (8008758 <find_volume+0x508>)
 8008738:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800873a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800873c:	f7fe f9c4 	bl	8006ac8 <clear_lock>
#endif
	return FR_OK;
 8008740:	2300      	movs	r3, #0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3758      	adds	r7, #88	@ 0x58
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	41615252 	.word	0x41615252
 8008750:	61417272 	.word	0x61417272
 8008754:	20002474 	.word	0x20002474
 8008758:	20002498 	.word	0x20002498

0800875c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800875c:	b580      	push	{r7, lr}
 800875e:	b084      	sub	sp, #16
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008766:	2309      	movs	r3, #9
 8008768:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d01c      	beq.n	80087aa <validate+0x4e>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d018      	beq.n	80087aa <validate+0x4e>
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	781b      	ldrb	r3, [r3, #0]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d013      	beq.n	80087aa <validate+0x4e>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	889a      	ldrh	r2, [r3, #4]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	88db      	ldrh	r3, [r3, #6]
 800878c:	429a      	cmp	r2, r3
 800878e:	d10c      	bne.n	80087aa <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	785b      	ldrb	r3, [r3, #1]
 8008796:	4618      	mov	r0, r3
 8008798:	f7fd feea 	bl	8006570 <disk_status>
 800879c:	4603      	mov	r3, r0
 800879e:	f003 0301 	and.w	r3, r3, #1
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d101      	bne.n	80087aa <validate+0x4e>
			res = FR_OK;
 80087a6:	2300      	movs	r3, #0
 80087a8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d102      	bne.n	80087b6 <validate+0x5a>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	e000      	b.n	80087b8 <validate+0x5c>
 80087b6:	2300      	movs	r3, #0
 80087b8:	683a      	ldr	r2, [r7, #0]
 80087ba:	6013      	str	r3, [r2, #0]
	return res;
 80087bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3710      	adds	r7, #16
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
	...

080087c8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80087da:	f107 0310 	add.w	r3, r7, #16
 80087de:	4618      	mov	r0, r3
 80087e0:	f7ff fc9c 	bl	800811c <get_ldnumber>
 80087e4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80087e6:	69fb      	ldr	r3, [r7, #28]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	da01      	bge.n	80087f0 <f_mount+0x28>
 80087ec:	230b      	movs	r3, #11
 80087ee:	e02b      	b.n	8008848 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80087f0:	4a17      	ldr	r2, [pc, #92]	@ (8008850 <f_mount+0x88>)
 80087f2:	69fb      	ldr	r3, [r7, #28]
 80087f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087f8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d005      	beq.n	800880c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008800:	69b8      	ldr	r0, [r7, #24]
 8008802:	f7fe f961 	bl	8006ac8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008806:	69bb      	ldr	r3, [r7, #24]
 8008808:	2200      	movs	r2, #0
 800880a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2b00      	cmp	r3, #0
 8008810:	d002      	beq.n	8008818 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008818:	68fa      	ldr	r2, [r7, #12]
 800881a:	490d      	ldr	r1, [pc, #52]	@ (8008850 <f_mount+0x88>)
 800881c:	69fb      	ldr	r3, [r7, #28]
 800881e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d002      	beq.n	800882e <f_mount+0x66>
 8008828:	79fb      	ldrb	r3, [r7, #7]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d001      	beq.n	8008832 <f_mount+0x6a>
 800882e:	2300      	movs	r3, #0
 8008830:	e00a      	b.n	8008848 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008832:	f107 010c 	add.w	r1, r7, #12
 8008836:	f107 0308 	add.w	r3, r7, #8
 800883a:	2200      	movs	r2, #0
 800883c:	4618      	mov	r0, r3
 800883e:	f7ff fd07 	bl	8008250 <find_volume>
 8008842:	4603      	mov	r3, r0
 8008844:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008846:	7dfb      	ldrb	r3, [r7, #23]
}
 8008848:	4618      	mov	r0, r3
 800884a:	3720      	adds	r7, #32
 800884c:	46bd      	mov	sp, r7
 800884e:	bd80      	pop	{r7, pc}
 8008850:	20002470 	.word	0x20002470

08008854 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008854:	b580      	push	{r7, lr}
 8008856:	b09a      	sub	sp, #104	@ 0x68
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	4613      	mov	r3, r2
 8008860:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d101      	bne.n	800886c <f_open+0x18>
 8008868:	2309      	movs	r3, #9
 800886a:	e1b7      	b.n	8008bdc <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800886c:	79fb      	ldrb	r3, [r7, #7]
 800886e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008872:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008874:	79fa      	ldrb	r2, [r7, #7]
 8008876:	f107 0114 	add.w	r1, r7, #20
 800887a:	f107 0308 	add.w	r3, r7, #8
 800887e:	4618      	mov	r0, r3
 8008880:	f7ff fce6 	bl	8008250 <find_volume>
 8008884:	4603      	mov	r3, r0
 8008886:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800888a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800888e:	2b00      	cmp	r3, #0
 8008890:	f040 819b 	bne.w	8008bca <f_open+0x376>
		dj.obj.fs = fs;
 8008894:	697b      	ldr	r3, [r7, #20]
 8008896:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008898:	68ba      	ldr	r2, [r7, #8]
 800889a:	f107 0318 	add.w	r3, r7, #24
 800889e:	4611      	mov	r1, r2
 80088a0:	4618      	mov	r0, r3
 80088a2:	f7ff fbc5 	bl	8008030 <follow_path>
 80088a6:	4603      	mov	r3, r0
 80088a8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80088ac:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d118      	bne.n	80088e6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80088b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80088b8:	b25b      	sxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	da03      	bge.n	80088c6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80088be:	2306      	movs	r3, #6
 80088c0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80088c4:	e00f      	b.n	80088e6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	bf8c      	ite	hi
 80088cc:	2301      	movhi	r3, #1
 80088ce:	2300      	movls	r3, #0
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	461a      	mov	r2, r3
 80088d4:	f107 0318 	add.w	r3, r7, #24
 80088d8:	4611      	mov	r1, r2
 80088da:	4618      	mov	r0, r3
 80088dc:	f7fd ffe8 	bl	80068b0 <chk_lock>
 80088e0:	4603      	mov	r3, r0
 80088e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80088e6:	79fb      	ldrb	r3, [r7, #7]
 80088e8:	f003 031c 	and.w	r3, r3, #28
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d07f      	beq.n	80089f0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 80088f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d017      	beq.n	8008928 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80088f8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80088fc:	2b04      	cmp	r3, #4
 80088fe:	d10e      	bne.n	800891e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008900:	f7fe f832 	bl	8006968 <enq_lock>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d006      	beq.n	8008918 <f_open+0xc4>
 800890a:	f107 0318 	add.w	r3, r7, #24
 800890e:	4618      	mov	r0, r3
 8008910:	f7ff f8de 	bl	8007ad0 <dir_register>
 8008914:	4603      	mov	r3, r0
 8008916:	e000      	b.n	800891a <f_open+0xc6>
 8008918:	2312      	movs	r3, #18
 800891a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800891e:	79fb      	ldrb	r3, [r7, #7]
 8008920:	f043 0308 	orr.w	r3, r3, #8
 8008924:	71fb      	strb	r3, [r7, #7]
 8008926:	e010      	b.n	800894a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008928:	7fbb      	ldrb	r3, [r7, #30]
 800892a:	f003 0311 	and.w	r3, r3, #17
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <f_open+0xe6>
					res = FR_DENIED;
 8008932:	2307      	movs	r3, #7
 8008934:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008938:	e007      	b.n	800894a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800893a:	79fb      	ldrb	r3, [r7, #7]
 800893c:	f003 0304 	and.w	r3, r3, #4
 8008940:	2b00      	cmp	r3, #0
 8008942:	d002      	beq.n	800894a <f_open+0xf6>
 8008944:	2308      	movs	r3, #8
 8008946:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800894a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800894e:	2b00      	cmp	r3, #0
 8008950:	d168      	bne.n	8008a24 <f_open+0x1d0>
 8008952:	79fb      	ldrb	r3, [r7, #7]
 8008954:	f003 0308 	and.w	r3, r3, #8
 8008958:	2b00      	cmp	r3, #0
 800895a:	d063      	beq.n	8008a24 <f_open+0x1d0>
				dw = GET_FATTIME();
 800895c:	f7fd fd28 	bl	80063b0 <get_fattime>
 8008960:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008964:	330e      	adds	r3, #14
 8008966:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008968:	4618      	mov	r0, r3
 800896a:	f7fd fef6 	bl	800675a <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800896e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008970:	3316      	adds	r3, #22
 8008972:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008974:	4618      	mov	r0, r3
 8008976:	f7fd fef0 	bl	800675a <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800897a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800897c:	330b      	adds	r3, #11
 800897e:	2220      	movs	r2, #32
 8008980:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008986:	4611      	mov	r1, r2
 8008988:	4618      	mov	r0, r3
 800898a:	f7fe fe19 	bl	80075c0 <ld_clust>
 800898e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8008994:	2200      	movs	r2, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f7fe fe31 	bl	80075fe <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800899c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800899e:	331c      	adds	r3, #28
 80089a0:	2100      	movs	r1, #0
 80089a2:	4618      	mov	r0, r3
 80089a4:	f7fd fed9 	bl	800675a <st_dword>
					fs->wflag = 1;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	2201      	movs	r2, #1
 80089ac:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80089ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d037      	beq.n	8008a24 <f_open+0x1d0>
						dw = fs->winsect;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089b8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80089ba:	f107 0318 	add.w	r3, r7, #24
 80089be:	2200      	movs	r2, #0
 80089c0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80089c2:	4618      	mov	r0, r3
 80089c4:	f7fe fb21 	bl	800700a <remove_chain>
 80089c8:	4603      	mov	r3, r0
 80089ca:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80089ce:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d126      	bne.n	8008a24 <f_open+0x1d0>
							res = move_window(fs, dw);
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80089da:	4618      	mov	r0, r3
 80089dc:	f7fe f8dc 	bl	8006b98 <move_window>
 80089e0:	4603      	mov	r3, r0
 80089e2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80089ea:	3a01      	subs	r2, #1
 80089ec:	615a      	str	r2, [r3, #20]
 80089ee:	e019      	b.n	8008a24 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80089f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d115      	bne.n	8008a24 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80089f8:	7fbb      	ldrb	r3, [r7, #30]
 80089fa:	f003 0310 	and.w	r3, r3, #16
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <f_open+0x1b6>
					res = FR_NO_FILE;
 8008a02:	2304      	movs	r3, #4
 8008a04:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008a08:	e00c      	b.n	8008a24 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008a0a:	79fb      	ldrb	r3, [r7, #7]
 8008a0c:	f003 0302 	and.w	r3, r3, #2
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <f_open+0x1d0>
 8008a14:	7fbb      	ldrb	r3, [r7, #30]
 8008a16:	f003 0301 	and.w	r3, r3, #1
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <f_open+0x1d0>
						res = FR_DENIED;
 8008a1e:	2307      	movs	r3, #7
 8008a20:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008a24:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d126      	bne.n	8008a7a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008a2c:	79fb      	ldrb	r3, [r7, #7]
 8008a2e:	f003 0308 	and.w	r3, r3, #8
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d003      	beq.n	8008a3e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a3c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008a46:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a4c:	79fb      	ldrb	r3, [r7, #7]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	bf8c      	ite	hi
 8008a52:	2301      	movhi	r3, #1
 8008a54:	2300      	movls	r3, #0
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	461a      	mov	r2, r3
 8008a5a:	f107 0318 	add.w	r3, r7, #24
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fd ffa3 	bl	80069ac <inc_lock>
 8008a66:	4602      	mov	r2, r0
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	691b      	ldr	r3, [r3, #16]
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d102      	bne.n	8008a7a <f_open+0x226>
 8008a74:	2302      	movs	r3, #2
 8008a76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008a7a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	f040 80a3 	bne.w	8008bca <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a88:	4611      	mov	r1, r2
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	f7fe fd98 	bl	80075c0 <ld_clust>
 8008a90:	4602      	mov	r2, r0
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	331c      	adds	r3, #28
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fd fe1f 	bl	80066de <ld_dword>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2200      	movs	r2, #0
 8008aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008aac:	697a      	ldr	r2, [r7, #20]
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	88da      	ldrh	r2, [r3, #6]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	79fa      	ldrb	r2, [r7, #7]
 8008abe:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	3330      	adds	r3, #48	@ 0x30
 8008ad6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008ada:	2100      	movs	r1, #0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fd fe89 	bl	80067f4 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	f003 0320 	and.w	r3, r3, #32
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	d06e      	beq.n	8008bca <f_open+0x376>
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	68db      	ldr	r3, [r3, #12]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d06a      	beq.n	8008bca <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	68da      	ldr	r2, [r3, #12]
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	895b      	ldrh	r3, [r3, #10]
 8008b00:	461a      	mov	r2, r3
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	899b      	ldrh	r3, [r3, #12]
 8008b06:	fb02 f303 	mul.w	r3, r2, r3
 8008b0a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	68db      	ldr	r3, [r3, #12]
 8008b16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b18:	e016      	b.n	8008b48 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f7fe f886 	bl	8006c30 <get_fat>
 8008b24:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008b26:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b28:	2b01      	cmp	r3, #1
 8008b2a:	d802      	bhi.n	8008b32 <f_open+0x2de>
 8008b2c:	2302      	movs	r3, #2
 8008b2e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008b32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b38:	d102      	bne.n	8008b40 <f_open+0x2ec>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008b40:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008b42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008b48:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d103      	bne.n	8008b58 <f_open+0x304>
 8008b50:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d8e0      	bhi.n	8008b1a <f_open+0x2c6>
				}
				fp->clust = clst;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008b5c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008b5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d131      	bne.n	8008bca <f_open+0x376>
 8008b66:	697b      	ldr	r3, [r7, #20]
 8008b68:	899b      	ldrh	r3, [r3, #12]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b6e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008b72:	fb01 f202 	mul.w	r2, r1, r2
 8008b76:	1a9b      	subs	r3, r3, r2
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d026      	beq.n	8008bca <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fe f836 	bl	8006bf2 <clust2sect>
 8008b86:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008b88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d103      	bne.n	8008b96 <f_open+0x342>
						res = FR_INT_ERR;
 8008b8e:	2302      	movs	r3, #2
 8008b90:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008b94:	e019      	b.n	8008bca <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	899b      	ldrh	r3, [r3, #12]
 8008b9a:	461a      	mov	r2, r3
 8008b9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008b9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8008ba2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ba4:	441a      	add	r2, r3
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	7858      	ldrb	r0, [r3, #1]
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	6a1a      	ldr	r2, [r3, #32]
 8008bb8:	2301      	movs	r3, #1
 8008bba:	f7fd fd19 	bl	80065f0 <disk_read>
 8008bbe:	4603      	mov	r3, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <f_open+0x376>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008bca:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <f_open+0x384>
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008bd8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3768      	adds	r7, #104	@ 0x68
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}

08008be4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b08c      	sub	sp, #48	@ 0x30
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	60f8      	str	r0, [r7, #12]
 8008bec:	60b9      	str	r1, [r7, #8]
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f107 0210 	add.w	r2, r7, #16
 8008c02:	4611      	mov	r1, r2
 8008c04:	4618      	mov	r0, r3
 8008c06:	f7ff fda9 	bl	800875c <validate>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008c10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d107      	bne.n	8008c28 <f_write+0x44>
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	7d5b      	ldrb	r3, [r3, #21]
 8008c1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008c20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d002      	beq.n	8008c2e <f_write+0x4a>
 8008c28:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c2c:	e16a      	b.n	8008f04 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	7d1b      	ldrb	r3, [r3, #20]
 8008c32:	f003 0302 	and.w	r3, r3, #2
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d101      	bne.n	8008c3e <f_write+0x5a>
 8008c3a:	2307      	movs	r3, #7
 8008c3c:	e162      	b.n	8008f04 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	699a      	ldr	r2, [r3, #24]
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	441a      	add	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	699b      	ldr	r3, [r3, #24]
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	f080 814c 	bcs.w	8008ee8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	43db      	mvns	r3, r3
 8008c56:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008c58:	e146      	b.n	8008ee8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	699b      	ldr	r3, [r3, #24]
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	8992      	ldrh	r2, [r2, #12]
 8008c62:	fbb3 f1f2 	udiv	r1, r3, r2
 8008c66:	fb01 f202 	mul.w	r2, r1, r2
 8008c6a:	1a9b      	subs	r3, r3, r2
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 80f1 	bne.w	8008e54 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	693a      	ldr	r2, [r7, #16]
 8008c78:	8992      	ldrh	r2, [r2, #12]
 8008c7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	8952      	ldrh	r2, [r2, #10]
 8008c82:	3a01      	subs	r2, #1
 8008c84:	4013      	ands	r3, r2
 8008c86:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d143      	bne.n	8008d16 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d10c      	bne.n	8008cb0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	689b      	ldr	r3, [r3, #8]
 8008c9a:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008c9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d11a      	bne.n	8008cd8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f7fe fa14 	bl	80070d4 <create_chain>
 8008cac:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008cae:	e013      	b.n	8008cd8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d007      	beq.n	8008cc8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	68f8      	ldr	r0, [r7, #12]
 8008cc0:	f7fe faa0 	bl	8007204 <clmt_clust>
 8008cc4:	62b8      	str	r0, [r7, #40]	@ 0x28
 8008cc6:	e007      	b.n	8008cd8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008cc8:	68fa      	ldr	r2, [r7, #12]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	69db      	ldr	r3, [r3, #28]
 8008cce:	4619      	mov	r1, r3
 8008cd0:	4610      	mov	r0, r2
 8008cd2:	f7fe f9ff 	bl	80070d4 <create_chain>
 8008cd6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 8109 	beq.w	8008ef2 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d104      	bne.n	8008cf0 <f_write+0x10c>
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2202      	movs	r2, #2
 8008cea:	755a      	strb	r2, [r3, #21]
 8008cec:	2302      	movs	r3, #2
 8008cee:	e109      	b.n	8008f04 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008cf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cf6:	d104      	bne.n	8008d02 <f_write+0x11e>
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	755a      	strb	r2, [r3, #21]
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e100      	b.n	8008f04 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d06:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d102      	bne.n	8008d16 <f_write+0x132>
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d14:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	7d1b      	ldrb	r3, [r3, #20]
 8008d1a:	b25b      	sxtb	r3, r3
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	da18      	bge.n	8008d52 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	7858      	ldrb	r0, [r3, #1]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	6a1a      	ldr	r2, [r3, #32]
 8008d2e:	2301      	movs	r3, #1
 8008d30:	f7fd fc7e 	bl	8006630 <disk_write>
 8008d34:	4603      	mov	r3, r0
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d004      	beq.n	8008d44 <f_write+0x160>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	755a      	strb	r2, [r3, #21]
 8008d40:	2301      	movs	r3, #1
 8008d42:	e0df      	b.n	8008f04 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	7d1b      	ldrb	r3, [r3, #20]
 8008d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	69db      	ldr	r3, [r3, #28]
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f7fd ff49 	bl	8006bf2 <clust2sect>
 8008d60:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d104      	bne.n	8008d72 <f_write+0x18e>
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	755a      	strb	r2, [r3, #21]
 8008d6e:	2302      	movs	r3, #2
 8008d70:	e0c8      	b.n	8008f04 <f_write+0x320>
			sect += csect;
 8008d72:	697a      	ldr	r2, [r7, #20]
 8008d74:	69bb      	ldr	r3, [r7, #24]
 8008d76:	4413      	add	r3, r2
 8008d78:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	899b      	ldrh	r3, [r3, #12]
 8008d7e:	461a      	mov	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8008d86:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008d88:	6a3b      	ldr	r3, [r7, #32]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d043      	beq.n	8008e16 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	6a3b      	ldr	r3, [r7, #32]
 8008d92:	4413      	add	r3, r2
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	8952      	ldrh	r2, [r2, #10]
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d905      	bls.n	8008da8 <f_write+0x1c4>
					cc = fs->csize - csect;
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	895b      	ldrh	r3, [r3, #10]
 8008da0:	461a      	mov	r2, r3
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	7858      	ldrb	r0, [r3, #1]
 8008dac:	6a3b      	ldr	r3, [r7, #32]
 8008dae:	697a      	ldr	r2, [r7, #20]
 8008db0:	69f9      	ldr	r1, [r7, #28]
 8008db2:	f7fd fc3d 	bl	8006630 <disk_write>
 8008db6:	4603      	mov	r3, r0
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d004      	beq.n	8008dc6 <f_write+0x1e2>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	755a      	strb	r2, [r3, #21]
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	e09e      	b.n	8008f04 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6a1a      	ldr	r2, [r3, #32]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	6a3a      	ldr	r2, [r7, #32]
 8008dd0:	429a      	cmp	r2, r3
 8008dd2:	d918      	bls.n	8008e06 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	6a1a      	ldr	r2, [r3, #32]
 8008dde:	697b      	ldr	r3, [r7, #20]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	693a      	ldr	r2, [r7, #16]
 8008de4:	8992      	ldrh	r2, [r2, #12]
 8008de6:	fb02 f303 	mul.w	r3, r2, r3
 8008dea:	69fa      	ldr	r2, [r7, #28]
 8008dec:	18d1      	adds	r1, r2, r3
 8008dee:	693b      	ldr	r3, [r7, #16]
 8008df0:	899b      	ldrh	r3, [r3, #12]
 8008df2:	461a      	mov	r2, r3
 8008df4:	f7fd fcdd 	bl	80067b2 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	7d1b      	ldrb	r3, [r3, #20]
 8008dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	899b      	ldrh	r3, [r3, #12]
 8008e0a:	461a      	mov	r2, r3
 8008e0c:	6a3b      	ldr	r3, [r7, #32]
 8008e0e:	fb02 f303 	mul.w	r3, r2, r3
 8008e12:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008e14:	e04b      	b.n	8008eae <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	697a      	ldr	r2, [r7, #20]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d016      	beq.n	8008e4e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	699a      	ldr	r2, [r3, #24]
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d210      	bcs.n	8008e4e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008e2c:	693b      	ldr	r3, [r7, #16]
 8008e2e:	7858      	ldrb	r0, [r3, #1]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e36:	2301      	movs	r3, #1
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	f7fd fbd9 	bl	80065f0 <disk_read>
 8008e3e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d004      	beq.n	8008e4e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2201      	movs	r2, #1
 8008e48:	755a      	strb	r2, [r3, #21]
 8008e4a:	2301      	movs	r3, #1
 8008e4c:	e05a      	b.n	8008f04 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008e54:	693b      	ldr	r3, [r7, #16]
 8008e56:	899b      	ldrh	r3, [r3, #12]
 8008e58:	4618      	mov	r0, r3
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	699b      	ldr	r3, [r3, #24]
 8008e5e:	693a      	ldr	r2, [r7, #16]
 8008e60:	8992      	ldrh	r2, [r2, #12]
 8008e62:	fbb3 f1f2 	udiv	r1, r3, r2
 8008e66:	fb01 f202 	mul.w	r2, r1, r2
 8008e6a:	1a9b      	subs	r3, r3, r2
 8008e6c:	1ac3      	subs	r3, r0, r3
 8008e6e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	d901      	bls.n	8008e7c <f_write+0x298>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	699b      	ldr	r3, [r3, #24]
 8008e86:	693a      	ldr	r2, [r7, #16]
 8008e88:	8992      	ldrh	r2, [r2, #12]
 8008e8a:	fbb3 f0f2 	udiv	r0, r3, r2
 8008e8e:	fb00 f202 	mul.w	r2, r0, r2
 8008e92:	1a9b      	subs	r3, r3, r2
 8008e94:	440b      	add	r3, r1
 8008e96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e98:	69f9      	ldr	r1, [r7, #28]
 8008e9a:	4618      	mov	r0, r3
 8008e9c:	f7fd fc89 	bl	80067b2 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	7d1b      	ldrb	r3, [r3, #20]
 8008ea4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008ea8:	b2da      	uxtb	r2, r3
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8008eae:	69fa      	ldr	r2, [r7, #28]
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	4413      	add	r3, r2
 8008eb4:	61fb      	str	r3, [r7, #28]
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	699a      	ldr	r2, [r3, #24]
 8008eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ebc:	441a      	add	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	619a      	str	r2, [r3, #24]
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	429a      	cmp	r2, r3
 8008ecc:	bf38      	it	cc
 8008ece:	461a      	movcc	r2, r3
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	60da      	str	r2, [r3, #12]
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eda:	441a      	add	r2, r3
 8008edc:	683b      	ldr	r3, [r7, #0]
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ee4:	1ad3      	subs	r3, r2, r3
 8008ee6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	f47f aeb5 	bne.w	8008c5a <f_write+0x76>
 8008ef0:	e000      	b.n	8008ef4 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008ef2:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	7d1b      	ldrb	r3, [r3, #20]
 8008ef8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008efc:	b2da      	uxtb	r2, r3
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	3730      	adds	r7, #48	@ 0x30
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}

08008f0c <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b090      	sub	sp, #64	@ 0x40
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f107 0208 	add.w	r2, r7, #8
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7ff fc1c 	bl	800875c <validate>
 8008f24:	4603      	mov	r3, r0
 8008f26:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 8008f2a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d103      	bne.n	8008f3a <f_lseek+0x2e>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	7d5b      	ldrb	r3, [r3, #21]
 8008f36:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 8008f3a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d002      	beq.n	8008f48 <f_lseek+0x3c>
 8008f42:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008f46:	e201      	b.n	800934c <f_lseek+0x440>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 80d9 	beq.w	8009104 <f_lseek+0x1f8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f58:	d15a      	bne.n	8009010 <f_lseek+0x104>
			tbl = fp->cltbl;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5e:	627b      	str	r3, [r7, #36]	@ 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8008f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f62:	1d1a      	adds	r2, r3, #4
 8008f64:	627a      	str	r2, [r7, #36]	@ 0x24
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	617b      	str	r3, [r7, #20]
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	689b      	ldr	r3, [r3, #8]
 8008f72:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cl) {
 8008f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d03a      	beq.n	8008ff0 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8008f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f7c:	613b      	str	r3, [r7, #16]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f84:	3302      	adds	r3, #2
 8008f86:	62bb      	str	r3, [r7, #40]	@ 0x28
					do {
						pcl = cl; ncl++;
 8008f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f8a:	60fb      	str	r3, [r7, #12]
 8008f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f8e:	3301      	adds	r3, #1
 8008f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
						cl = get_fat(&fp->obj, cl);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f96:	4618      	mov	r0, r3
 8008f98:	f7fd fe4a 	bl	8006c30 <get_fat>
 8008f9c:	6338      	str	r0, [r7, #48]	@ 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 8008f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d804      	bhi.n	8008fae <f_lseek+0xa2>
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2202      	movs	r2, #2
 8008fa8:	755a      	strb	r2, [r3, #21]
 8008faa:	2302      	movs	r3, #2
 8008fac:	e1ce      	b.n	800934c <f_lseek+0x440>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008fae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb4:	d104      	bne.n	8008fc0 <f_lseek+0xb4>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	755a      	strb	r2, [r3, #21]
 8008fbc:	2301      	movs	r3, #1
 8008fbe:	e1c5      	b.n	800934c <f_lseek+0x440>
					} while (cl == pcl + 1);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	3301      	adds	r3, #1
 8008fc4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d0de      	beq.n	8008f88 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8008fca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	429a      	cmp	r2, r3
 8008fd0:	d809      	bhi.n	8008fe6 <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 8008fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd4:	1d1a      	adds	r2, r3, #4
 8008fd6:	627a      	str	r2, [r7, #36]	@ 0x24
 8008fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fda:	601a      	str	r2, [r3, #0]
 8008fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fde:	1d1a      	adds	r2, r3, #4
 8008fe0:	627a      	str	r2, [r7, #36]	@ 0x24
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	69db      	ldr	r3, [r3, #28]
 8008fea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008fec:	429a      	cmp	r2, r3
 8008fee:	d3c4      	bcc.n	8008f7a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ff6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 8008ff8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008ffa:	697b      	ldr	r3, [r7, #20]
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d803      	bhi.n	8009008 <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 8009000:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009002:	2200      	movs	r2, #0
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	e19f      	b.n	8009348 <f_lseek+0x43c>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8009008:	2311      	movs	r3, #17
 800900a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 800900e:	e19b      	b.n	8009348 <f_lseek+0x43c>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	68db      	ldr	r3, [r3, #12]
 8009014:	683a      	ldr	r2, [r7, #0]
 8009016:	429a      	cmp	r2, r3
 8009018:	d902      	bls.n	8009020 <f_lseek+0x114>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	683a      	ldr	r2, [r7, #0]
 8009024:	619a      	str	r2, [r3, #24]
			if (ofs) {
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	2b00      	cmp	r3, #0
 800902a:	f000 818d 	beq.w	8009348 <f_lseek+0x43c>
				fp->clust = clmt_clust(fp, ofs - 1);
 800902e:	683b      	ldr	r3, [r7, #0]
 8009030:	3b01      	subs	r3, #1
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f7fe f8e5 	bl	8007204 <clmt_clust>
 800903a:	4602      	mov	r2, r0
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	69db      	ldr	r3, [r3, #28]
 8009046:	4619      	mov	r1, r3
 8009048:	4610      	mov	r0, r2
 800904a:	f7fd fdd2 	bl	8006bf2 <clust2sect>
 800904e:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 8009050:	69bb      	ldr	r3, [r7, #24]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d104      	bne.n	8009060 <f_lseek+0x154>
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	2202      	movs	r2, #2
 800905a:	755a      	strb	r2, [r3, #21]
 800905c:	2302      	movs	r3, #2
 800905e:	e175      	b.n	800934c <f_lseek+0x440>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	3b01      	subs	r3, #1
 8009064:	68ba      	ldr	r2, [r7, #8]
 8009066:	8992      	ldrh	r2, [r2, #12]
 8009068:	fbb3 f3f2 	udiv	r3, r3, r2
 800906c:	68ba      	ldr	r2, [r7, #8]
 800906e:	8952      	ldrh	r2, [r2, #10]
 8009070:	3a01      	subs	r2, #1
 8009072:	4013      	ands	r3, r2
 8009074:	69ba      	ldr	r2, [r7, #24]
 8009076:	4413      	add	r3, r2
 8009078:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	68ba      	ldr	r2, [r7, #8]
 8009080:	8992      	ldrh	r2, [r2, #12]
 8009082:	fbb3 f1f2 	udiv	r1, r3, r2
 8009086:	fb01 f202 	mul.w	r2, r1, r2
 800908a:	1a9b      	subs	r3, r3, r2
 800908c:	2b00      	cmp	r3, #0
 800908e:	f000 815b 	beq.w	8009348 <f_lseek+0x43c>
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6a1b      	ldr	r3, [r3, #32]
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	429a      	cmp	r2, r3
 800909a:	f000 8155 	beq.w	8009348 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	7d1b      	ldrb	r3, [r3, #20]
 80090a2:	b25b      	sxtb	r3, r3
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	da18      	bge.n	80090da <f_lseek+0x1ce>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	7858      	ldrb	r0, [r3, #1]
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6a1a      	ldr	r2, [r3, #32]
 80090b6:	2301      	movs	r3, #1
 80090b8:	f7fd faba 	bl	8006630 <disk_write>
 80090bc:	4603      	mov	r3, r0
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d004      	beq.n	80090cc <f_lseek+0x1c0>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	755a      	strb	r2, [r3, #21]
 80090c8:	2301      	movs	r3, #1
 80090ca:	e13f      	b.n	800934c <f_lseek+0x440>
						fp->flag &= (BYTE)~FA_DIRTY;
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	7d1b      	ldrb	r3, [r3, #20]
 80090d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 80090da:	68bb      	ldr	r3, [r7, #8]
 80090dc:	7858      	ldrb	r0, [r3, #1]
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80090e4:	2301      	movs	r3, #1
 80090e6:	69ba      	ldr	r2, [r7, #24]
 80090e8:	f7fd fa82 	bl	80065f0 <disk_read>
 80090ec:	4603      	mov	r3, r0
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d004      	beq.n	80090fc <f_lseek+0x1f0>
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2201      	movs	r2, #1
 80090f6:	755a      	strb	r2, [r3, #21]
 80090f8:	2301      	movs	r3, #1
 80090fa:	e127      	b.n	800934c <f_lseek+0x440>
#endif
					fp->sect = dsc;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	69ba      	ldr	r2, [r7, #24]
 8009100:	621a      	str	r2, [r3, #32]
 8009102:	e121      	b.n	8009348 <f_lseek+0x43c>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	683a      	ldr	r2, [r7, #0]
 800910a:	429a      	cmp	r2, r3
 800910c:	d908      	bls.n	8009120 <f_lseek+0x214>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	7d1b      	ldrb	r3, [r3, #20]
 8009112:	f003 0302 	and.w	r3, r3, #2
 8009116:	2b00      	cmp	r3, #0
 8009118:	d102      	bne.n	8009120 <f_lseek+0x214>
			ofs = fp->obj.objsize;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	699b      	ldr	r3, [r3, #24]
 8009124:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8009126:	2300      	movs	r3, #0
 8009128:	637b      	str	r3, [r7, #52]	@ 0x34
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800912e:	619a      	str	r2, [r3, #24]
		if (ofs) {
 8009130:	683b      	ldr	r3, [r7, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	f000 80b5 	beq.w	80092a2 <f_lseek+0x396>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	895b      	ldrh	r3, [r3, #10]
 800913c:	461a      	mov	r2, r3
 800913e:	68bb      	ldr	r3, [r7, #8]
 8009140:	899b      	ldrh	r3, [r3, #12]
 8009142:	fb02 f303 	mul.w	r3, r2, r3
 8009146:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8009148:	6a3b      	ldr	r3, [r7, #32]
 800914a:	2b00      	cmp	r3, #0
 800914c:	d01b      	beq.n	8009186 <f_lseek+0x27a>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	1e5a      	subs	r2, r3, #1
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	fbb2 f2f3 	udiv	r2, r2, r3
 8009158:	6a3b      	ldr	r3, [r7, #32]
 800915a:	1e59      	subs	r1, r3, #1
 800915c:	69fb      	ldr	r3, [r7, #28]
 800915e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8009162:	429a      	cmp	r2, r3
 8009164:	d30f      	bcc.n	8009186 <f_lseek+0x27a>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 8009166:	6a3b      	ldr	r3, [r7, #32]
 8009168:	1e5a      	subs	r2, r3, #1
 800916a:	69fb      	ldr	r3, [r7, #28]
 800916c:	425b      	negs	r3, r3
 800916e:	401a      	ands	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	699b      	ldr	r3, [r3, #24]
 8009178:	683a      	ldr	r2, [r7, #0]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	69db      	ldr	r3, [r3, #28]
 8009182:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009184:	e022      	b.n	80091cc <f_lseek+0x2c0>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	63bb      	str	r3, [r7, #56]	@ 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800918c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800918e:	2b00      	cmp	r3, #0
 8009190:	d119      	bne.n	80091c6 <f_lseek+0x2ba>
					clst = create_chain(&fp->obj, 0);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	2100      	movs	r1, #0
 8009196:	4618      	mov	r0, r3
 8009198:	f7fd ff9c 	bl	80070d4 <create_chain>
 800919c:	63b8      	str	r0, [r7, #56]	@ 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800919e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091a0:	2b01      	cmp	r3, #1
 80091a2:	d104      	bne.n	80091ae <f_lseek+0x2a2>
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2202      	movs	r2, #2
 80091a8:	755a      	strb	r2, [r3, #21]
 80091aa:	2302      	movs	r3, #2
 80091ac:	e0ce      	b.n	800934c <f_lseek+0x440>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80091ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091b4:	d104      	bne.n	80091c0 <f_lseek+0x2b4>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2201      	movs	r2, #1
 80091ba:	755a      	strb	r2, [r3, #21]
 80091bc:	2301      	movs	r3, #1
 80091be:	e0c5      	b.n	800934c <f_lseek+0x440>
					fp->obj.sclust = clst;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091c4:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80091ca:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 80091cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d067      	beq.n	80092a2 <f_lseek+0x396>
				while (ofs > bcs) {						/* Cluster following loop */
 80091d2:	e03a      	b.n	800924a <f_lseek+0x33e>
					ofs -= bcs; fp->fptr += bcs;
 80091d4:	683a      	ldr	r2, [r7, #0]
 80091d6:	69fb      	ldr	r3, [r7, #28]
 80091d8:	1ad3      	subs	r3, r2, r3
 80091da:	603b      	str	r3, [r7, #0]
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	699a      	ldr	r2, [r3, #24]
 80091e0:	69fb      	ldr	r3, [r7, #28]
 80091e2:	441a      	add	r2, r3
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	7d1b      	ldrb	r3, [r3, #20]
 80091ec:	f003 0302 	and.w	r3, r3, #2
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d00b      	beq.n	800920c <f_lseek+0x300>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80091f8:	4618      	mov	r0, r3
 80091fa:	f7fd ff6b 	bl	80070d4 <create_chain>
 80091fe:	63b8      	str	r0, [r7, #56]	@ 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 8009200:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009202:	2b00      	cmp	r3, #0
 8009204:	d108      	bne.n	8009218 <f_lseek+0x30c>
							ofs = 0; break;
 8009206:	2300      	movs	r3, #0
 8009208:	603b      	str	r3, [r7, #0]
 800920a:	e022      	b.n	8009252 <f_lseek+0x346>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009210:	4618      	mov	r0, r3
 8009212:	f7fd fd0d 	bl	8006c30 <get_fat>
 8009216:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8009218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800921e:	d104      	bne.n	800922a <f_lseek+0x31e>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2201      	movs	r2, #1
 8009224:	755a      	strb	r2, [r3, #21]
 8009226:	2301      	movs	r3, #1
 8009228:	e090      	b.n	800934c <f_lseek+0x440>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800922a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800922c:	2b01      	cmp	r3, #1
 800922e:	d904      	bls.n	800923a <f_lseek+0x32e>
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	69db      	ldr	r3, [r3, #28]
 8009234:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009236:	429a      	cmp	r2, r3
 8009238:	d304      	bcc.n	8009244 <f_lseek+0x338>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	2202      	movs	r2, #2
 800923e:	755a      	strb	r2, [r3, #21]
 8009240:	2302      	movs	r3, #2
 8009242:	e083      	b.n	800934c <f_lseek+0x440>
					fp->clust = clst;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009248:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800924a:	683a      	ldr	r2, [r7, #0]
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	429a      	cmp	r2, r3
 8009250:	d8c0      	bhi.n	80091d4 <f_lseek+0x2c8>
				}
				fp->fptr += ofs;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699a      	ldr	r2, [r3, #24]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	441a      	add	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	899b      	ldrh	r3, [r3, #12]
 8009262:	461a      	mov	r2, r3
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	fbb3 f1f2 	udiv	r1, r3, r2
 800926a:	fb01 f202 	mul.w	r2, r1, r2
 800926e:	1a9b      	subs	r3, r3, r2
 8009270:	2b00      	cmp	r3, #0
 8009272:	d016      	beq.n	80092a2 <f_lseek+0x396>
					nsect = clust2sect(fs, clst);	/* Current sector */
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8009278:	4618      	mov	r0, r3
 800927a:	f7fd fcba 	bl	8006bf2 <clust2sect>
 800927e:	6378      	str	r0, [r7, #52]	@ 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 8009280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009282:	2b00      	cmp	r3, #0
 8009284:	d104      	bne.n	8009290 <f_lseek+0x384>
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2202      	movs	r2, #2
 800928a:	755a      	strb	r2, [r3, #21]
 800928c:	2302      	movs	r3, #2
 800928e:	e05d      	b.n	800934c <f_lseek+0x440>
					nsect += (DWORD)(ofs / SS(fs));
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	899b      	ldrh	r3, [r3, #12]
 8009294:	461a      	mov	r2, r3
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	fbb3 f3f2 	udiv	r3, r3, r2
 800929c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800929e:	4413      	add	r3, r2
 80092a0:	637b      	str	r3, [r7, #52]	@ 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	699a      	ldr	r2, [r3, #24]
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	68db      	ldr	r3, [r3, #12]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d90a      	bls.n	80092c4 <f_lseek+0x3b8>
			fp->obj.objsize = fp->fptr;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	699a      	ldr	r2, [r3, #24]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	7d1b      	ldrb	r3, [r3, #20]
 80092ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80092be:	b2da      	uxtb	r2, r3
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	68ba      	ldr	r2, [r7, #8]
 80092ca:	8992      	ldrh	r2, [r2, #12]
 80092cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80092d0:	fb01 f202 	mul.w	r2, r1, r2
 80092d4:	1a9b      	subs	r3, r3, r2
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d036      	beq.n	8009348 <f_lseek+0x43c>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6a1b      	ldr	r3, [r3, #32]
 80092de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d031      	beq.n	8009348 <f_lseek+0x43c>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	7d1b      	ldrb	r3, [r3, #20]
 80092e8:	b25b      	sxtb	r3, r3
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	da18      	bge.n	8009320 <f_lseek+0x414>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80092ee:	68bb      	ldr	r3, [r7, #8]
 80092f0:	7858      	ldrb	r0, [r3, #1]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	6a1a      	ldr	r2, [r3, #32]
 80092fc:	2301      	movs	r3, #1
 80092fe:	f7fd f997 	bl	8006630 <disk_write>
 8009302:	4603      	mov	r3, r0
 8009304:	2b00      	cmp	r3, #0
 8009306:	d004      	beq.n	8009312 <f_lseek+0x406>
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2201      	movs	r2, #1
 800930c:	755a      	strb	r2, [r3, #21]
 800930e:	2301      	movs	r3, #1
 8009310:	e01c      	b.n	800934c <f_lseek+0x440>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	7d1b      	ldrb	r3, [r3, #20]
 8009316:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800931a:	b2da      	uxtb	r2, r3
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8009320:	68bb      	ldr	r3, [r7, #8]
 8009322:	7858      	ldrb	r0, [r3, #1]
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800932a:	2301      	movs	r3, #1
 800932c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800932e:	f7fd f95f 	bl	80065f0 <disk_read>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d004      	beq.n	8009342 <f_lseek+0x436>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2201      	movs	r2, #1
 800933c:	755a      	strb	r2, [r3, #21]
 800933e:	2301      	movs	r3, #1
 8009340:	e004      	b.n	800934c <f_lseek+0x440>
#endif
			fp->sect = nsect;
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009346:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 8009348:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800934c:	4618      	mov	r0, r3
 800934e:	3740      	adds	r7, #64	@ 0x40
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009354:	b480      	push	{r7}
 8009356:	b087      	sub	sp, #28
 8009358:	af00      	add	r7, sp, #0
 800935a:	60f8      	str	r0, [r7, #12]
 800935c:	60b9      	str	r1, [r7, #8]
 800935e:	4613      	mov	r3, r2
 8009360:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009362:	2301      	movs	r3, #1
 8009364:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009366:	2300      	movs	r3, #0
 8009368:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800936a:	4b1f      	ldr	r3, [pc, #124]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 800936c:	7a5b      	ldrb	r3, [r3, #9]
 800936e:	b2db      	uxtb	r3, r3
 8009370:	2b00      	cmp	r3, #0
 8009372:	d131      	bne.n	80093d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009374:	4b1c      	ldr	r3, [pc, #112]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 8009376:	7a5b      	ldrb	r3, [r3, #9]
 8009378:	b2db      	uxtb	r3, r3
 800937a:	461a      	mov	r2, r3
 800937c:	4b1a      	ldr	r3, [pc, #104]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 800937e:	2100      	movs	r1, #0
 8009380:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009382:	4b19      	ldr	r3, [pc, #100]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 8009384:	7a5b      	ldrb	r3, [r3, #9]
 8009386:	b2db      	uxtb	r3, r3
 8009388:	4a17      	ldr	r2, [pc, #92]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 800938a:	009b      	lsls	r3, r3, #2
 800938c:	4413      	add	r3, r2
 800938e:	68fa      	ldr	r2, [r7, #12]
 8009390:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009392:	4b15      	ldr	r3, [pc, #84]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 8009394:	7a5b      	ldrb	r3, [r3, #9]
 8009396:	b2db      	uxtb	r3, r3
 8009398:	461a      	mov	r2, r3
 800939a:	4b13      	ldr	r3, [pc, #76]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 800939c:	4413      	add	r3, r2
 800939e:	79fa      	ldrb	r2, [r7, #7]
 80093a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80093a2:	4b11      	ldr	r3, [pc, #68]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 80093a4:	7a5b      	ldrb	r3, [r3, #9]
 80093a6:	b2db      	uxtb	r3, r3
 80093a8:	1c5a      	adds	r2, r3, #1
 80093aa:	b2d1      	uxtb	r1, r2
 80093ac:	4a0e      	ldr	r2, [pc, #56]	@ (80093e8 <FATFS_LinkDriverEx+0x94>)
 80093ae:	7251      	strb	r1, [r2, #9]
 80093b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80093b2:	7dbb      	ldrb	r3, [r7, #22]
 80093b4:	3330      	adds	r3, #48	@ 0x30
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	68bb      	ldr	r3, [r7, #8]
 80093ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	3301      	adds	r3, #1
 80093c0:	223a      	movs	r2, #58	@ 0x3a
 80093c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	3302      	adds	r3, #2
 80093c8:	222f      	movs	r2, #47	@ 0x2f
 80093ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	3303      	adds	r3, #3
 80093d0:	2200      	movs	r2, #0
 80093d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80093d4:	2300      	movs	r3, #0
 80093d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80093d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	371c      	adds	r7, #28
 80093de:	46bd      	mov	sp, r7
 80093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	20002698 	.word	0x20002698

080093ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b082      	sub	sp, #8
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
 80093f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80093f6:	2200      	movs	r2, #0
 80093f8:	6839      	ldr	r1, [r7, #0]
 80093fa:	6878      	ldr	r0, [r7, #4]
 80093fc:	f7ff ffaa 	bl	8009354 <FATFS_LinkDriverEx>
 8009400:	4603      	mov	r3, r0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3708      	adds	r7, #8
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
	...

0800940c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 800940c:	b480      	push	{r7}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
 8009412:	4603      	mov	r3, r0
 8009414:	6039      	str	r1, [r7, #0]
 8009416:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8009418:	88fb      	ldrh	r3, [r7, #6]
 800941a:	2b7f      	cmp	r3, #127	@ 0x7f
 800941c:	d802      	bhi.n	8009424 <ff_convert+0x18>
		c = chr;
 800941e:	88fb      	ldrh	r3, [r7, #6]
 8009420:	81fb      	strh	r3, [r7, #14]
 8009422:	e025      	b.n	8009470 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d00b      	beq.n	8009442 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 800942a:	88fb      	ldrh	r3, [r7, #6]
 800942c:	2bff      	cmp	r3, #255	@ 0xff
 800942e:	d805      	bhi.n	800943c <ff_convert+0x30>
 8009430:	88fb      	ldrh	r3, [r7, #6]
 8009432:	3b80      	subs	r3, #128	@ 0x80
 8009434:	4a12      	ldr	r2, [pc, #72]	@ (8009480 <ff_convert+0x74>)
 8009436:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800943a:	e000      	b.n	800943e <ff_convert+0x32>
 800943c:	2300      	movs	r3, #0
 800943e:	81fb      	strh	r3, [r7, #14]
 8009440:	e016      	b.n	8009470 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8009442:	2300      	movs	r3, #0
 8009444:	81fb      	strh	r3, [r7, #14]
 8009446:	e009      	b.n	800945c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8009448:	89fb      	ldrh	r3, [r7, #14]
 800944a:	4a0d      	ldr	r2, [pc, #52]	@ (8009480 <ff_convert+0x74>)
 800944c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009450:	88fa      	ldrh	r2, [r7, #6]
 8009452:	429a      	cmp	r2, r3
 8009454:	d006      	beq.n	8009464 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8009456:	89fb      	ldrh	r3, [r7, #14]
 8009458:	3301      	adds	r3, #1
 800945a:	81fb      	strh	r3, [r7, #14]
 800945c:	89fb      	ldrh	r3, [r7, #14]
 800945e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009460:	d9f2      	bls.n	8009448 <ff_convert+0x3c>
 8009462:	e000      	b.n	8009466 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009464:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009466:	89fb      	ldrh	r3, [r7, #14]
 8009468:	3380      	adds	r3, #128	@ 0x80
 800946a:	b29b      	uxth	r3, r3
 800946c:	b2db      	uxtb	r3, r3
 800946e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009470:	89fb      	ldrh	r3, [r7, #14]
}
 8009472:	4618      	mov	r0, r3
 8009474:	3714      	adds	r7, #20
 8009476:	46bd      	mov	sp, r7
 8009478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800947c:	4770      	bx	lr
 800947e:	bf00      	nop
 8009480:	0800c600 	.word	0x0800c600

08009484 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009484:	b480      	push	{r7}
 8009486:	b087      	sub	sp, #28
 8009488:	af00      	add	r7, sp, #0
 800948a:	4603      	mov	r3, r0
 800948c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800948e:	88fb      	ldrh	r3, [r7, #6]
 8009490:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009494:	d201      	bcs.n	800949a <ff_wtoupper+0x16>
 8009496:	4b3e      	ldr	r3, [pc, #248]	@ (8009590 <ff_wtoupper+0x10c>)
 8009498:	e000      	b.n	800949c <ff_wtoupper+0x18>
 800949a:	4b3e      	ldr	r3, [pc, #248]	@ (8009594 <ff_wtoupper+0x110>)
 800949c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	1c9a      	adds	r2, r3, #2
 80094a2:	617a      	str	r2, [r7, #20]
 80094a4:	881b      	ldrh	r3, [r3, #0]
 80094a6:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80094a8:	8a7b      	ldrh	r3, [r7, #18]
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d068      	beq.n	8009580 <ff_wtoupper+0xfc>
 80094ae:	88fa      	ldrh	r2, [r7, #6]
 80094b0:	8a7b      	ldrh	r3, [r7, #18]
 80094b2:	429a      	cmp	r2, r3
 80094b4:	d364      	bcc.n	8009580 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	1c9a      	adds	r2, r3, #2
 80094ba:	617a      	str	r2, [r7, #20]
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	823b      	strh	r3, [r7, #16]
 80094c0:	8a3b      	ldrh	r3, [r7, #16]
 80094c2:	0a1b      	lsrs	r3, r3, #8
 80094c4:	81fb      	strh	r3, [r7, #14]
 80094c6:	8a3b      	ldrh	r3, [r7, #16]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80094cc:	88fa      	ldrh	r2, [r7, #6]
 80094ce:	8a79      	ldrh	r1, [r7, #18]
 80094d0:	8a3b      	ldrh	r3, [r7, #16]
 80094d2:	440b      	add	r3, r1
 80094d4:	429a      	cmp	r2, r3
 80094d6:	da49      	bge.n	800956c <ff_wtoupper+0xe8>
			switch (cmd) {
 80094d8:	89fb      	ldrh	r3, [r7, #14]
 80094da:	2b08      	cmp	r3, #8
 80094dc:	d84f      	bhi.n	800957e <ff_wtoupper+0xfa>
 80094de:	a201      	add	r2, pc, #4	@ (adr r2, 80094e4 <ff_wtoupper+0x60>)
 80094e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e4:	08009509 	.word	0x08009509
 80094e8:	0800951b 	.word	0x0800951b
 80094ec:	08009531 	.word	0x08009531
 80094f0:	08009539 	.word	0x08009539
 80094f4:	08009541 	.word	0x08009541
 80094f8:	08009549 	.word	0x08009549
 80094fc:	08009551 	.word	0x08009551
 8009500:	08009559 	.word	0x08009559
 8009504:	08009561 	.word	0x08009561
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8009508:	88fa      	ldrh	r2, [r7, #6]
 800950a:	8a7b      	ldrh	r3, [r7, #18]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	005b      	lsls	r3, r3, #1
 8009510:	697a      	ldr	r2, [r7, #20]
 8009512:	4413      	add	r3, r2
 8009514:	881b      	ldrh	r3, [r3, #0]
 8009516:	80fb      	strh	r3, [r7, #6]
 8009518:	e027      	b.n	800956a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 800951a:	88fa      	ldrh	r2, [r7, #6]
 800951c:	8a7b      	ldrh	r3, [r7, #18]
 800951e:	1ad3      	subs	r3, r2, r3
 8009520:	b29b      	uxth	r3, r3
 8009522:	f003 0301 	and.w	r3, r3, #1
 8009526:	b29b      	uxth	r3, r3
 8009528:	88fa      	ldrh	r2, [r7, #6]
 800952a:	1ad3      	subs	r3, r2, r3
 800952c:	80fb      	strh	r3, [r7, #6]
 800952e:	e01c      	b.n	800956a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8009530:	88fb      	ldrh	r3, [r7, #6]
 8009532:	3b10      	subs	r3, #16
 8009534:	80fb      	strh	r3, [r7, #6]
 8009536:	e018      	b.n	800956a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8009538:	88fb      	ldrh	r3, [r7, #6]
 800953a:	3b20      	subs	r3, #32
 800953c:	80fb      	strh	r3, [r7, #6]
 800953e:	e014      	b.n	800956a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8009540:	88fb      	ldrh	r3, [r7, #6]
 8009542:	3b30      	subs	r3, #48	@ 0x30
 8009544:	80fb      	strh	r3, [r7, #6]
 8009546:	e010      	b.n	800956a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8009548:	88fb      	ldrh	r3, [r7, #6]
 800954a:	3b1a      	subs	r3, #26
 800954c:	80fb      	strh	r3, [r7, #6]
 800954e:	e00c      	b.n	800956a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8009550:	88fb      	ldrh	r3, [r7, #6]
 8009552:	3308      	adds	r3, #8
 8009554:	80fb      	strh	r3, [r7, #6]
 8009556:	e008      	b.n	800956a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8009558:	88fb      	ldrh	r3, [r7, #6]
 800955a:	3b50      	subs	r3, #80	@ 0x50
 800955c:	80fb      	strh	r3, [r7, #6]
 800955e:	e004      	b.n	800956a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009560:	88fb      	ldrh	r3, [r7, #6]
 8009562:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009566:	80fb      	strh	r3, [r7, #6]
 8009568:	bf00      	nop
			}
			break;
 800956a:	e008      	b.n	800957e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800956c:	89fb      	ldrh	r3, [r7, #14]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d195      	bne.n	800949e <ff_wtoupper+0x1a>
 8009572:	8a3b      	ldrh	r3, [r7, #16]
 8009574:	005b      	lsls	r3, r3, #1
 8009576:	697a      	ldr	r2, [r7, #20]
 8009578:	4413      	add	r3, r2
 800957a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800957c:	e78f      	b.n	800949e <ff_wtoupper+0x1a>
			break;
 800957e:	bf00      	nop
	}

	return chr;
 8009580:	88fb      	ldrh	r3, [r7, #6]
}
 8009582:	4618      	mov	r0, r3
 8009584:	371c      	adds	r7, #28
 8009586:	46bd      	mov	sp, r7
 8009588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958c:	4770      	bx	lr
 800958e:	bf00      	nop
 8009590:	0800c700 	.word	0x0800c700
 8009594:	0800c8f4 	.word	0x0800c8f4

08009598 <__cvt>:
 8009598:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800959c:	ec57 6b10 	vmov	r6, r7, d0
 80095a0:	2f00      	cmp	r7, #0
 80095a2:	460c      	mov	r4, r1
 80095a4:	4619      	mov	r1, r3
 80095a6:	463b      	mov	r3, r7
 80095a8:	bfbb      	ittet	lt
 80095aa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80095ae:	461f      	movlt	r7, r3
 80095b0:	2300      	movge	r3, #0
 80095b2:	232d      	movlt	r3, #45	@ 0x2d
 80095b4:	700b      	strb	r3, [r1, #0]
 80095b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80095b8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80095bc:	4691      	mov	r9, r2
 80095be:	f023 0820 	bic.w	r8, r3, #32
 80095c2:	bfbc      	itt	lt
 80095c4:	4632      	movlt	r2, r6
 80095c6:	4616      	movlt	r6, r2
 80095c8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80095cc:	d005      	beq.n	80095da <__cvt+0x42>
 80095ce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80095d2:	d100      	bne.n	80095d6 <__cvt+0x3e>
 80095d4:	3401      	adds	r4, #1
 80095d6:	2102      	movs	r1, #2
 80095d8:	e000      	b.n	80095dc <__cvt+0x44>
 80095da:	2103      	movs	r1, #3
 80095dc:	ab03      	add	r3, sp, #12
 80095de:	9301      	str	r3, [sp, #4]
 80095e0:	ab02      	add	r3, sp, #8
 80095e2:	9300      	str	r3, [sp, #0]
 80095e4:	ec47 6b10 	vmov	d0, r6, r7
 80095e8:	4653      	mov	r3, sl
 80095ea:	4622      	mov	r2, r4
 80095ec:	f000 ff84 	bl	800a4f8 <_dtoa_r>
 80095f0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80095f4:	4605      	mov	r5, r0
 80095f6:	d119      	bne.n	800962c <__cvt+0x94>
 80095f8:	f019 0f01 	tst.w	r9, #1
 80095fc:	d00e      	beq.n	800961c <__cvt+0x84>
 80095fe:	eb00 0904 	add.w	r9, r0, r4
 8009602:	2200      	movs	r2, #0
 8009604:	2300      	movs	r3, #0
 8009606:	4630      	mov	r0, r6
 8009608:	4639      	mov	r1, r7
 800960a:	f7f7 fa5d 	bl	8000ac8 <__aeabi_dcmpeq>
 800960e:	b108      	cbz	r0, 8009614 <__cvt+0x7c>
 8009610:	f8cd 900c 	str.w	r9, [sp, #12]
 8009614:	2230      	movs	r2, #48	@ 0x30
 8009616:	9b03      	ldr	r3, [sp, #12]
 8009618:	454b      	cmp	r3, r9
 800961a:	d31e      	bcc.n	800965a <__cvt+0xc2>
 800961c:	9b03      	ldr	r3, [sp, #12]
 800961e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009620:	1b5b      	subs	r3, r3, r5
 8009622:	4628      	mov	r0, r5
 8009624:	6013      	str	r3, [r2, #0]
 8009626:	b004      	add	sp, #16
 8009628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800962c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009630:	eb00 0904 	add.w	r9, r0, r4
 8009634:	d1e5      	bne.n	8009602 <__cvt+0x6a>
 8009636:	7803      	ldrb	r3, [r0, #0]
 8009638:	2b30      	cmp	r3, #48	@ 0x30
 800963a:	d10a      	bne.n	8009652 <__cvt+0xba>
 800963c:	2200      	movs	r2, #0
 800963e:	2300      	movs	r3, #0
 8009640:	4630      	mov	r0, r6
 8009642:	4639      	mov	r1, r7
 8009644:	f7f7 fa40 	bl	8000ac8 <__aeabi_dcmpeq>
 8009648:	b918      	cbnz	r0, 8009652 <__cvt+0xba>
 800964a:	f1c4 0401 	rsb	r4, r4, #1
 800964e:	f8ca 4000 	str.w	r4, [sl]
 8009652:	f8da 3000 	ldr.w	r3, [sl]
 8009656:	4499      	add	r9, r3
 8009658:	e7d3      	b.n	8009602 <__cvt+0x6a>
 800965a:	1c59      	adds	r1, r3, #1
 800965c:	9103      	str	r1, [sp, #12]
 800965e:	701a      	strb	r2, [r3, #0]
 8009660:	e7d9      	b.n	8009616 <__cvt+0x7e>

08009662 <__exponent>:
 8009662:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009664:	2900      	cmp	r1, #0
 8009666:	bfba      	itte	lt
 8009668:	4249      	neglt	r1, r1
 800966a:	232d      	movlt	r3, #45	@ 0x2d
 800966c:	232b      	movge	r3, #43	@ 0x2b
 800966e:	2909      	cmp	r1, #9
 8009670:	7002      	strb	r2, [r0, #0]
 8009672:	7043      	strb	r3, [r0, #1]
 8009674:	dd29      	ble.n	80096ca <__exponent+0x68>
 8009676:	f10d 0307 	add.w	r3, sp, #7
 800967a:	461d      	mov	r5, r3
 800967c:	270a      	movs	r7, #10
 800967e:	461a      	mov	r2, r3
 8009680:	fbb1 f6f7 	udiv	r6, r1, r7
 8009684:	fb07 1416 	mls	r4, r7, r6, r1
 8009688:	3430      	adds	r4, #48	@ 0x30
 800968a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800968e:	460c      	mov	r4, r1
 8009690:	2c63      	cmp	r4, #99	@ 0x63
 8009692:	f103 33ff 	add.w	r3, r3, #4294967295
 8009696:	4631      	mov	r1, r6
 8009698:	dcf1      	bgt.n	800967e <__exponent+0x1c>
 800969a:	3130      	adds	r1, #48	@ 0x30
 800969c:	1e94      	subs	r4, r2, #2
 800969e:	f803 1c01 	strb.w	r1, [r3, #-1]
 80096a2:	1c41      	adds	r1, r0, #1
 80096a4:	4623      	mov	r3, r4
 80096a6:	42ab      	cmp	r3, r5
 80096a8:	d30a      	bcc.n	80096c0 <__exponent+0x5e>
 80096aa:	f10d 0309 	add.w	r3, sp, #9
 80096ae:	1a9b      	subs	r3, r3, r2
 80096b0:	42ac      	cmp	r4, r5
 80096b2:	bf88      	it	hi
 80096b4:	2300      	movhi	r3, #0
 80096b6:	3302      	adds	r3, #2
 80096b8:	4403      	add	r3, r0
 80096ba:	1a18      	subs	r0, r3, r0
 80096bc:	b003      	add	sp, #12
 80096be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80096c0:	f813 6b01 	ldrb.w	r6, [r3], #1
 80096c4:	f801 6f01 	strb.w	r6, [r1, #1]!
 80096c8:	e7ed      	b.n	80096a6 <__exponent+0x44>
 80096ca:	2330      	movs	r3, #48	@ 0x30
 80096cc:	3130      	adds	r1, #48	@ 0x30
 80096ce:	7083      	strb	r3, [r0, #2]
 80096d0:	70c1      	strb	r1, [r0, #3]
 80096d2:	1d03      	adds	r3, r0, #4
 80096d4:	e7f1      	b.n	80096ba <__exponent+0x58>
	...

080096d8 <_printf_float>:
 80096d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096dc:	b08d      	sub	sp, #52	@ 0x34
 80096de:	460c      	mov	r4, r1
 80096e0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80096e4:	4616      	mov	r6, r2
 80096e6:	461f      	mov	r7, r3
 80096e8:	4605      	mov	r5, r0
 80096ea:	f000 fe03 	bl	800a2f4 <_localeconv_r>
 80096ee:	6803      	ldr	r3, [r0, #0]
 80096f0:	9304      	str	r3, [sp, #16]
 80096f2:	4618      	mov	r0, r3
 80096f4:	f7f6 fdbc 	bl	8000270 <strlen>
 80096f8:	2300      	movs	r3, #0
 80096fa:	930a      	str	r3, [sp, #40]	@ 0x28
 80096fc:	f8d8 3000 	ldr.w	r3, [r8]
 8009700:	9005      	str	r0, [sp, #20]
 8009702:	3307      	adds	r3, #7
 8009704:	f023 0307 	bic.w	r3, r3, #7
 8009708:	f103 0208 	add.w	r2, r3, #8
 800970c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009710:	f8d4 b000 	ldr.w	fp, [r4]
 8009714:	f8c8 2000 	str.w	r2, [r8]
 8009718:	e9d3 8900 	ldrd	r8, r9, [r3]
 800971c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009720:	9307      	str	r3, [sp, #28]
 8009722:	f8cd 8018 	str.w	r8, [sp, #24]
 8009726:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800972a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800972e:	4b9c      	ldr	r3, [pc, #624]	@ (80099a0 <_printf_float+0x2c8>)
 8009730:	f04f 32ff 	mov.w	r2, #4294967295
 8009734:	f7f7 f9fa 	bl	8000b2c <__aeabi_dcmpun>
 8009738:	bb70      	cbnz	r0, 8009798 <_printf_float+0xc0>
 800973a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800973e:	4b98      	ldr	r3, [pc, #608]	@ (80099a0 <_printf_float+0x2c8>)
 8009740:	f04f 32ff 	mov.w	r2, #4294967295
 8009744:	f7f7 f9d4 	bl	8000af0 <__aeabi_dcmple>
 8009748:	bb30      	cbnz	r0, 8009798 <_printf_float+0xc0>
 800974a:	2200      	movs	r2, #0
 800974c:	2300      	movs	r3, #0
 800974e:	4640      	mov	r0, r8
 8009750:	4649      	mov	r1, r9
 8009752:	f7f7 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8009756:	b110      	cbz	r0, 800975e <_printf_float+0x86>
 8009758:	232d      	movs	r3, #45	@ 0x2d
 800975a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800975e:	4a91      	ldr	r2, [pc, #580]	@ (80099a4 <_printf_float+0x2cc>)
 8009760:	4b91      	ldr	r3, [pc, #580]	@ (80099a8 <_printf_float+0x2d0>)
 8009762:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009766:	bf8c      	ite	hi
 8009768:	4690      	movhi	r8, r2
 800976a:	4698      	movls	r8, r3
 800976c:	2303      	movs	r3, #3
 800976e:	6123      	str	r3, [r4, #16]
 8009770:	f02b 0304 	bic.w	r3, fp, #4
 8009774:	6023      	str	r3, [r4, #0]
 8009776:	f04f 0900 	mov.w	r9, #0
 800977a:	9700      	str	r7, [sp, #0]
 800977c:	4633      	mov	r3, r6
 800977e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009780:	4621      	mov	r1, r4
 8009782:	4628      	mov	r0, r5
 8009784:	f000 f9d2 	bl	8009b2c <_printf_common>
 8009788:	3001      	adds	r0, #1
 800978a:	f040 808d 	bne.w	80098a8 <_printf_float+0x1d0>
 800978e:	f04f 30ff 	mov.w	r0, #4294967295
 8009792:	b00d      	add	sp, #52	@ 0x34
 8009794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009798:	4642      	mov	r2, r8
 800979a:	464b      	mov	r3, r9
 800979c:	4640      	mov	r0, r8
 800979e:	4649      	mov	r1, r9
 80097a0:	f7f7 f9c4 	bl	8000b2c <__aeabi_dcmpun>
 80097a4:	b140      	cbz	r0, 80097b8 <_printf_float+0xe0>
 80097a6:	464b      	mov	r3, r9
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	bfbc      	itt	lt
 80097ac:	232d      	movlt	r3, #45	@ 0x2d
 80097ae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80097b2:	4a7e      	ldr	r2, [pc, #504]	@ (80099ac <_printf_float+0x2d4>)
 80097b4:	4b7e      	ldr	r3, [pc, #504]	@ (80099b0 <_printf_float+0x2d8>)
 80097b6:	e7d4      	b.n	8009762 <_printf_float+0x8a>
 80097b8:	6863      	ldr	r3, [r4, #4]
 80097ba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80097be:	9206      	str	r2, [sp, #24]
 80097c0:	1c5a      	adds	r2, r3, #1
 80097c2:	d13b      	bne.n	800983c <_printf_float+0x164>
 80097c4:	2306      	movs	r3, #6
 80097c6:	6063      	str	r3, [r4, #4]
 80097c8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80097cc:	2300      	movs	r3, #0
 80097ce:	6022      	str	r2, [r4, #0]
 80097d0:	9303      	str	r3, [sp, #12]
 80097d2:	ab0a      	add	r3, sp, #40	@ 0x28
 80097d4:	e9cd a301 	strd	sl, r3, [sp, #4]
 80097d8:	ab09      	add	r3, sp, #36	@ 0x24
 80097da:	9300      	str	r3, [sp, #0]
 80097dc:	6861      	ldr	r1, [r4, #4]
 80097de:	ec49 8b10 	vmov	d0, r8, r9
 80097e2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80097e6:	4628      	mov	r0, r5
 80097e8:	f7ff fed6 	bl	8009598 <__cvt>
 80097ec:	9b06      	ldr	r3, [sp, #24]
 80097ee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80097f0:	2b47      	cmp	r3, #71	@ 0x47
 80097f2:	4680      	mov	r8, r0
 80097f4:	d129      	bne.n	800984a <_printf_float+0x172>
 80097f6:	1cc8      	adds	r0, r1, #3
 80097f8:	db02      	blt.n	8009800 <_printf_float+0x128>
 80097fa:	6863      	ldr	r3, [r4, #4]
 80097fc:	4299      	cmp	r1, r3
 80097fe:	dd41      	ble.n	8009884 <_printf_float+0x1ac>
 8009800:	f1aa 0a02 	sub.w	sl, sl, #2
 8009804:	fa5f fa8a 	uxtb.w	sl, sl
 8009808:	3901      	subs	r1, #1
 800980a:	4652      	mov	r2, sl
 800980c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009810:	9109      	str	r1, [sp, #36]	@ 0x24
 8009812:	f7ff ff26 	bl	8009662 <__exponent>
 8009816:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009818:	1813      	adds	r3, r2, r0
 800981a:	2a01      	cmp	r2, #1
 800981c:	4681      	mov	r9, r0
 800981e:	6123      	str	r3, [r4, #16]
 8009820:	dc02      	bgt.n	8009828 <_printf_float+0x150>
 8009822:	6822      	ldr	r2, [r4, #0]
 8009824:	07d2      	lsls	r2, r2, #31
 8009826:	d501      	bpl.n	800982c <_printf_float+0x154>
 8009828:	3301      	adds	r3, #1
 800982a:	6123      	str	r3, [r4, #16]
 800982c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009830:	2b00      	cmp	r3, #0
 8009832:	d0a2      	beq.n	800977a <_printf_float+0xa2>
 8009834:	232d      	movs	r3, #45	@ 0x2d
 8009836:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800983a:	e79e      	b.n	800977a <_printf_float+0xa2>
 800983c:	9a06      	ldr	r2, [sp, #24]
 800983e:	2a47      	cmp	r2, #71	@ 0x47
 8009840:	d1c2      	bne.n	80097c8 <_printf_float+0xf0>
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1c0      	bne.n	80097c8 <_printf_float+0xf0>
 8009846:	2301      	movs	r3, #1
 8009848:	e7bd      	b.n	80097c6 <_printf_float+0xee>
 800984a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800984e:	d9db      	bls.n	8009808 <_printf_float+0x130>
 8009850:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009854:	d118      	bne.n	8009888 <_printf_float+0x1b0>
 8009856:	2900      	cmp	r1, #0
 8009858:	6863      	ldr	r3, [r4, #4]
 800985a:	dd0b      	ble.n	8009874 <_printf_float+0x19c>
 800985c:	6121      	str	r1, [r4, #16]
 800985e:	b913      	cbnz	r3, 8009866 <_printf_float+0x18e>
 8009860:	6822      	ldr	r2, [r4, #0]
 8009862:	07d0      	lsls	r0, r2, #31
 8009864:	d502      	bpl.n	800986c <_printf_float+0x194>
 8009866:	3301      	adds	r3, #1
 8009868:	440b      	add	r3, r1
 800986a:	6123      	str	r3, [r4, #16]
 800986c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800986e:	f04f 0900 	mov.w	r9, #0
 8009872:	e7db      	b.n	800982c <_printf_float+0x154>
 8009874:	b913      	cbnz	r3, 800987c <_printf_float+0x1a4>
 8009876:	6822      	ldr	r2, [r4, #0]
 8009878:	07d2      	lsls	r2, r2, #31
 800987a:	d501      	bpl.n	8009880 <_printf_float+0x1a8>
 800987c:	3302      	adds	r3, #2
 800987e:	e7f4      	b.n	800986a <_printf_float+0x192>
 8009880:	2301      	movs	r3, #1
 8009882:	e7f2      	b.n	800986a <_printf_float+0x192>
 8009884:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009888:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800988a:	4299      	cmp	r1, r3
 800988c:	db05      	blt.n	800989a <_printf_float+0x1c2>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	6121      	str	r1, [r4, #16]
 8009892:	07d8      	lsls	r0, r3, #31
 8009894:	d5ea      	bpl.n	800986c <_printf_float+0x194>
 8009896:	1c4b      	adds	r3, r1, #1
 8009898:	e7e7      	b.n	800986a <_printf_float+0x192>
 800989a:	2900      	cmp	r1, #0
 800989c:	bfd4      	ite	le
 800989e:	f1c1 0202 	rsble	r2, r1, #2
 80098a2:	2201      	movgt	r2, #1
 80098a4:	4413      	add	r3, r2
 80098a6:	e7e0      	b.n	800986a <_printf_float+0x192>
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	055a      	lsls	r2, r3, #21
 80098ac:	d407      	bmi.n	80098be <_printf_float+0x1e6>
 80098ae:	6923      	ldr	r3, [r4, #16]
 80098b0:	4642      	mov	r2, r8
 80098b2:	4631      	mov	r1, r6
 80098b4:	4628      	mov	r0, r5
 80098b6:	47b8      	blx	r7
 80098b8:	3001      	adds	r0, #1
 80098ba:	d12b      	bne.n	8009914 <_printf_float+0x23c>
 80098bc:	e767      	b.n	800978e <_printf_float+0xb6>
 80098be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80098c2:	f240 80dd 	bls.w	8009a80 <_printf_float+0x3a8>
 80098c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80098ca:	2200      	movs	r2, #0
 80098cc:	2300      	movs	r3, #0
 80098ce:	f7f7 f8fb 	bl	8000ac8 <__aeabi_dcmpeq>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d033      	beq.n	800993e <_printf_float+0x266>
 80098d6:	4a37      	ldr	r2, [pc, #220]	@ (80099b4 <_printf_float+0x2dc>)
 80098d8:	2301      	movs	r3, #1
 80098da:	4631      	mov	r1, r6
 80098dc:	4628      	mov	r0, r5
 80098de:	47b8      	blx	r7
 80098e0:	3001      	adds	r0, #1
 80098e2:	f43f af54 	beq.w	800978e <_printf_float+0xb6>
 80098e6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80098ea:	4543      	cmp	r3, r8
 80098ec:	db02      	blt.n	80098f4 <_printf_float+0x21c>
 80098ee:	6823      	ldr	r3, [r4, #0]
 80098f0:	07d8      	lsls	r0, r3, #31
 80098f2:	d50f      	bpl.n	8009914 <_printf_float+0x23c>
 80098f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80098f8:	4631      	mov	r1, r6
 80098fa:	4628      	mov	r0, r5
 80098fc:	47b8      	blx	r7
 80098fe:	3001      	adds	r0, #1
 8009900:	f43f af45 	beq.w	800978e <_printf_float+0xb6>
 8009904:	f04f 0900 	mov.w	r9, #0
 8009908:	f108 38ff 	add.w	r8, r8, #4294967295
 800990c:	f104 0a1a 	add.w	sl, r4, #26
 8009910:	45c8      	cmp	r8, r9
 8009912:	dc09      	bgt.n	8009928 <_printf_float+0x250>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	079b      	lsls	r3, r3, #30
 8009918:	f100 8103 	bmi.w	8009b22 <_printf_float+0x44a>
 800991c:	68e0      	ldr	r0, [r4, #12]
 800991e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009920:	4298      	cmp	r0, r3
 8009922:	bfb8      	it	lt
 8009924:	4618      	movlt	r0, r3
 8009926:	e734      	b.n	8009792 <_printf_float+0xba>
 8009928:	2301      	movs	r3, #1
 800992a:	4652      	mov	r2, sl
 800992c:	4631      	mov	r1, r6
 800992e:	4628      	mov	r0, r5
 8009930:	47b8      	blx	r7
 8009932:	3001      	adds	r0, #1
 8009934:	f43f af2b 	beq.w	800978e <_printf_float+0xb6>
 8009938:	f109 0901 	add.w	r9, r9, #1
 800993c:	e7e8      	b.n	8009910 <_printf_float+0x238>
 800993e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009940:	2b00      	cmp	r3, #0
 8009942:	dc39      	bgt.n	80099b8 <_printf_float+0x2e0>
 8009944:	4a1b      	ldr	r2, [pc, #108]	@ (80099b4 <_printf_float+0x2dc>)
 8009946:	2301      	movs	r3, #1
 8009948:	4631      	mov	r1, r6
 800994a:	4628      	mov	r0, r5
 800994c:	47b8      	blx	r7
 800994e:	3001      	adds	r0, #1
 8009950:	f43f af1d 	beq.w	800978e <_printf_float+0xb6>
 8009954:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009958:	ea59 0303 	orrs.w	r3, r9, r3
 800995c:	d102      	bne.n	8009964 <_printf_float+0x28c>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	07d9      	lsls	r1, r3, #31
 8009962:	d5d7      	bpl.n	8009914 <_printf_float+0x23c>
 8009964:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009968:	4631      	mov	r1, r6
 800996a:	4628      	mov	r0, r5
 800996c:	47b8      	blx	r7
 800996e:	3001      	adds	r0, #1
 8009970:	f43f af0d 	beq.w	800978e <_printf_float+0xb6>
 8009974:	f04f 0a00 	mov.w	sl, #0
 8009978:	f104 0b1a 	add.w	fp, r4, #26
 800997c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800997e:	425b      	negs	r3, r3
 8009980:	4553      	cmp	r3, sl
 8009982:	dc01      	bgt.n	8009988 <_printf_float+0x2b0>
 8009984:	464b      	mov	r3, r9
 8009986:	e793      	b.n	80098b0 <_printf_float+0x1d8>
 8009988:	2301      	movs	r3, #1
 800998a:	465a      	mov	r2, fp
 800998c:	4631      	mov	r1, r6
 800998e:	4628      	mov	r0, r5
 8009990:	47b8      	blx	r7
 8009992:	3001      	adds	r0, #1
 8009994:	f43f aefb 	beq.w	800978e <_printf_float+0xb6>
 8009998:	f10a 0a01 	add.w	sl, sl, #1
 800999c:	e7ee      	b.n	800997c <_printf_float+0x2a4>
 800999e:	bf00      	nop
 80099a0:	7fefffff 	.word	0x7fefffff
 80099a4:	0800c9b4 	.word	0x0800c9b4
 80099a8:	0800c9b0 	.word	0x0800c9b0
 80099ac:	0800c9bc 	.word	0x0800c9bc
 80099b0:	0800c9b8 	.word	0x0800c9b8
 80099b4:	0800c9c0 	.word	0x0800c9c0
 80099b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80099be:	4553      	cmp	r3, sl
 80099c0:	bfa8      	it	ge
 80099c2:	4653      	movge	r3, sl
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	4699      	mov	r9, r3
 80099c8:	dc36      	bgt.n	8009a38 <_printf_float+0x360>
 80099ca:	f04f 0b00 	mov.w	fp, #0
 80099ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80099d2:	f104 021a 	add.w	r2, r4, #26
 80099d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80099d8:	9306      	str	r3, [sp, #24]
 80099da:	eba3 0309 	sub.w	r3, r3, r9
 80099de:	455b      	cmp	r3, fp
 80099e0:	dc31      	bgt.n	8009a46 <_printf_float+0x36e>
 80099e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099e4:	459a      	cmp	sl, r3
 80099e6:	dc3a      	bgt.n	8009a5e <_printf_float+0x386>
 80099e8:	6823      	ldr	r3, [r4, #0]
 80099ea:	07da      	lsls	r2, r3, #31
 80099ec:	d437      	bmi.n	8009a5e <_printf_float+0x386>
 80099ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099f0:	ebaa 0903 	sub.w	r9, sl, r3
 80099f4:	9b06      	ldr	r3, [sp, #24]
 80099f6:	ebaa 0303 	sub.w	r3, sl, r3
 80099fa:	4599      	cmp	r9, r3
 80099fc:	bfa8      	it	ge
 80099fe:	4699      	movge	r9, r3
 8009a00:	f1b9 0f00 	cmp.w	r9, #0
 8009a04:	dc33      	bgt.n	8009a6e <_printf_float+0x396>
 8009a06:	f04f 0800 	mov.w	r8, #0
 8009a0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009a0e:	f104 0b1a 	add.w	fp, r4, #26
 8009a12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a14:	ebaa 0303 	sub.w	r3, sl, r3
 8009a18:	eba3 0309 	sub.w	r3, r3, r9
 8009a1c:	4543      	cmp	r3, r8
 8009a1e:	f77f af79 	ble.w	8009914 <_printf_float+0x23c>
 8009a22:	2301      	movs	r3, #1
 8009a24:	465a      	mov	r2, fp
 8009a26:	4631      	mov	r1, r6
 8009a28:	4628      	mov	r0, r5
 8009a2a:	47b8      	blx	r7
 8009a2c:	3001      	adds	r0, #1
 8009a2e:	f43f aeae 	beq.w	800978e <_printf_float+0xb6>
 8009a32:	f108 0801 	add.w	r8, r8, #1
 8009a36:	e7ec      	b.n	8009a12 <_printf_float+0x33a>
 8009a38:	4642      	mov	r2, r8
 8009a3a:	4631      	mov	r1, r6
 8009a3c:	4628      	mov	r0, r5
 8009a3e:	47b8      	blx	r7
 8009a40:	3001      	adds	r0, #1
 8009a42:	d1c2      	bne.n	80099ca <_printf_float+0x2f2>
 8009a44:	e6a3      	b.n	800978e <_printf_float+0xb6>
 8009a46:	2301      	movs	r3, #1
 8009a48:	4631      	mov	r1, r6
 8009a4a:	4628      	mov	r0, r5
 8009a4c:	9206      	str	r2, [sp, #24]
 8009a4e:	47b8      	blx	r7
 8009a50:	3001      	adds	r0, #1
 8009a52:	f43f ae9c 	beq.w	800978e <_printf_float+0xb6>
 8009a56:	9a06      	ldr	r2, [sp, #24]
 8009a58:	f10b 0b01 	add.w	fp, fp, #1
 8009a5c:	e7bb      	b.n	80099d6 <_printf_float+0x2fe>
 8009a5e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009a62:	4631      	mov	r1, r6
 8009a64:	4628      	mov	r0, r5
 8009a66:	47b8      	blx	r7
 8009a68:	3001      	adds	r0, #1
 8009a6a:	d1c0      	bne.n	80099ee <_printf_float+0x316>
 8009a6c:	e68f      	b.n	800978e <_printf_float+0xb6>
 8009a6e:	9a06      	ldr	r2, [sp, #24]
 8009a70:	464b      	mov	r3, r9
 8009a72:	4442      	add	r2, r8
 8009a74:	4631      	mov	r1, r6
 8009a76:	4628      	mov	r0, r5
 8009a78:	47b8      	blx	r7
 8009a7a:	3001      	adds	r0, #1
 8009a7c:	d1c3      	bne.n	8009a06 <_printf_float+0x32e>
 8009a7e:	e686      	b.n	800978e <_printf_float+0xb6>
 8009a80:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009a84:	f1ba 0f01 	cmp.w	sl, #1
 8009a88:	dc01      	bgt.n	8009a8e <_printf_float+0x3b6>
 8009a8a:	07db      	lsls	r3, r3, #31
 8009a8c:	d536      	bpl.n	8009afc <_printf_float+0x424>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	4642      	mov	r2, r8
 8009a92:	4631      	mov	r1, r6
 8009a94:	4628      	mov	r0, r5
 8009a96:	47b8      	blx	r7
 8009a98:	3001      	adds	r0, #1
 8009a9a:	f43f ae78 	beq.w	800978e <_printf_float+0xb6>
 8009a9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009aa2:	4631      	mov	r1, r6
 8009aa4:	4628      	mov	r0, r5
 8009aa6:	47b8      	blx	r7
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	f43f ae70 	beq.w	800978e <_printf_float+0xb6>
 8009aae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009aba:	f7f7 f805 	bl	8000ac8 <__aeabi_dcmpeq>
 8009abe:	b9c0      	cbnz	r0, 8009af2 <_printf_float+0x41a>
 8009ac0:	4653      	mov	r3, sl
 8009ac2:	f108 0201 	add.w	r2, r8, #1
 8009ac6:	4631      	mov	r1, r6
 8009ac8:	4628      	mov	r0, r5
 8009aca:	47b8      	blx	r7
 8009acc:	3001      	adds	r0, #1
 8009ace:	d10c      	bne.n	8009aea <_printf_float+0x412>
 8009ad0:	e65d      	b.n	800978e <_printf_float+0xb6>
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	465a      	mov	r2, fp
 8009ad6:	4631      	mov	r1, r6
 8009ad8:	4628      	mov	r0, r5
 8009ada:	47b8      	blx	r7
 8009adc:	3001      	adds	r0, #1
 8009ade:	f43f ae56 	beq.w	800978e <_printf_float+0xb6>
 8009ae2:	f108 0801 	add.w	r8, r8, #1
 8009ae6:	45d0      	cmp	r8, sl
 8009ae8:	dbf3      	blt.n	8009ad2 <_printf_float+0x3fa>
 8009aea:	464b      	mov	r3, r9
 8009aec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009af0:	e6df      	b.n	80098b2 <_printf_float+0x1da>
 8009af2:	f04f 0800 	mov.w	r8, #0
 8009af6:	f104 0b1a 	add.w	fp, r4, #26
 8009afa:	e7f4      	b.n	8009ae6 <_printf_float+0x40e>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4642      	mov	r2, r8
 8009b00:	e7e1      	b.n	8009ac6 <_printf_float+0x3ee>
 8009b02:	2301      	movs	r3, #1
 8009b04:	464a      	mov	r2, r9
 8009b06:	4631      	mov	r1, r6
 8009b08:	4628      	mov	r0, r5
 8009b0a:	47b8      	blx	r7
 8009b0c:	3001      	adds	r0, #1
 8009b0e:	f43f ae3e 	beq.w	800978e <_printf_float+0xb6>
 8009b12:	f108 0801 	add.w	r8, r8, #1
 8009b16:	68e3      	ldr	r3, [r4, #12]
 8009b18:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b1a:	1a5b      	subs	r3, r3, r1
 8009b1c:	4543      	cmp	r3, r8
 8009b1e:	dcf0      	bgt.n	8009b02 <_printf_float+0x42a>
 8009b20:	e6fc      	b.n	800991c <_printf_float+0x244>
 8009b22:	f04f 0800 	mov.w	r8, #0
 8009b26:	f104 0919 	add.w	r9, r4, #25
 8009b2a:	e7f4      	b.n	8009b16 <_printf_float+0x43e>

08009b2c <_printf_common>:
 8009b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b30:	4616      	mov	r6, r2
 8009b32:	4698      	mov	r8, r3
 8009b34:	688a      	ldr	r2, [r1, #8]
 8009b36:	690b      	ldr	r3, [r1, #16]
 8009b38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	bfb8      	it	lt
 8009b40:	4613      	movlt	r3, r2
 8009b42:	6033      	str	r3, [r6, #0]
 8009b44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009b48:	4607      	mov	r7, r0
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	b10a      	cbz	r2, 8009b52 <_printf_common+0x26>
 8009b4e:	3301      	adds	r3, #1
 8009b50:	6033      	str	r3, [r6, #0]
 8009b52:	6823      	ldr	r3, [r4, #0]
 8009b54:	0699      	lsls	r1, r3, #26
 8009b56:	bf42      	ittt	mi
 8009b58:	6833      	ldrmi	r3, [r6, #0]
 8009b5a:	3302      	addmi	r3, #2
 8009b5c:	6033      	strmi	r3, [r6, #0]
 8009b5e:	6825      	ldr	r5, [r4, #0]
 8009b60:	f015 0506 	ands.w	r5, r5, #6
 8009b64:	d106      	bne.n	8009b74 <_printf_common+0x48>
 8009b66:	f104 0a19 	add.w	sl, r4, #25
 8009b6a:	68e3      	ldr	r3, [r4, #12]
 8009b6c:	6832      	ldr	r2, [r6, #0]
 8009b6e:	1a9b      	subs	r3, r3, r2
 8009b70:	42ab      	cmp	r3, r5
 8009b72:	dc26      	bgt.n	8009bc2 <_printf_common+0x96>
 8009b74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009b78:	6822      	ldr	r2, [r4, #0]
 8009b7a:	3b00      	subs	r3, #0
 8009b7c:	bf18      	it	ne
 8009b7e:	2301      	movne	r3, #1
 8009b80:	0692      	lsls	r2, r2, #26
 8009b82:	d42b      	bmi.n	8009bdc <_printf_common+0xb0>
 8009b84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009b88:	4641      	mov	r1, r8
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	47c8      	blx	r9
 8009b8e:	3001      	adds	r0, #1
 8009b90:	d01e      	beq.n	8009bd0 <_printf_common+0xa4>
 8009b92:	6823      	ldr	r3, [r4, #0]
 8009b94:	6922      	ldr	r2, [r4, #16]
 8009b96:	f003 0306 	and.w	r3, r3, #6
 8009b9a:	2b04      	cmp	r3, #4
 8009b9c:	bf02      	ittt	eq
 8009b9e:	68e5      	ldreq	r5, [r4, #12]
 8009ba0:	6833      	ldreq	r3, [r6, #0]
 8009ba2:	1aed      	subeq	r5, r5, r3
 8009ba4:	68a3      	ldr	r3, [r4, #8]
 8009ba6:	bf0c      	ite	eq
 8009ba8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009bac:	2500      	movne	r5, #0
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	bfc4      	itt	gt
 8009bb2:	1a9b      	subgt	r3, r3, r2
 8009bb4:	18ed      	addgt	r5, r5, r3
 8009bb6:	2600      	movs	r6, #0
 8009bb8:	341a      	adds	r4, #26
 8009bba:	42b5      	cmp	r5, r6
 8009bbc:	d11a      	bne.n	8009bf4 <_printf_common+0xc8>
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	e008      	b.n	8009bd4 <_printf_common+0xa8>
 8009bc2:	2301      	movs	r3, #1
 8009bc4:	4652      	mov	r2, sl
 8009bc6:	4641      	mov	r1, r8
 8009bc8:	4638      	mov	r0, r7
 8009bca:	47c8      	blx	r9
 8009bcc:	3001      	adds	r0, #1
 8009bce:	d103      	bne.n	8009bd8 <_printf_common+0xac>
 8009bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009bd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bd8:	3501      	adds	r5, #1
 8009bda:	e7c6      	b.n	8009b6a <_printf_common+0x3e>
 8009bdc:	18e1      	adds	r1, r4, r3
 8009bde:	1c5a      	adds	r2, r3, #1
 8009be0:	2030      	movs	r0, #48	@ 0x30
 8009be2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009be6:	4422      	add	r2, r4
 8009be8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009bec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009bf0:	3302      	adds	r3, #2
 8009bf2:	e7c7      	b.n	8009b84 <_printf_common+0x58>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	4622      	mov	r2, r4
 8009bf8:	4641      	mov	r1, r8
 8009bfa:	4638      	mov	r0, r7
 8009bfc:	47c8      	blx	r9
 8009bfe:	3001      	adds	r0, #1
 8009c00:	d0e6      	beq.n	8009bd0 <_printf_common+0xa4>
 8009c02:	3601      	adds	r6, #1
 8009c04:	e7d9      	b.n	8009bba <_printf_common+0x8e>
	...

08009c08 <_printf_i>:
 8009c08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009c0c:	7e0f      	ldrb	r7, [r1, #24]
 8009c0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009c10:	2f78      	cmp	r7, #120	@ 0x78
 8009c12:	4691      	mov	r9, r2
 8009c14:	4680      	mov	r8, r0
 8009c16:	460c      	mov	r4, r1
 8009c18:	469a      	mov	sl, r3
 8009c1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009c1e:	d807      	bhi.n	8009c30 <_printf_i+0x28>
 8009c20:	2f62      	cmp	r7, #98	@ 0x62
 8009c22:	d80a      	bhi.n	8009c3a <_printf_i+0x32>
 8009c24:	2f00      	cmp	r7, #0
 8009c26:	f000 80d1 	beq.w	8009dcc <_printf_i+0x1c4>
 8009c2a:	2f58      	cmp	r7, #88	@ 0x58
 8009c2c:	f000 80b8 	beq.w	8009da0 <_printf_i+0x198>
 8009c30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009c34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009c38:	e03a      	b.n	8009cb0 <_printf_i+0xa8>
 8009c3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009c3e:	2b15      	cmp	r3, #21
 8009c40:	d8f6      	bhi.n	8009c30 <_printf_i+0x28>
 8009c42:	a101      	add	r1, pc, #4	@ (adr r1, 8009c48 <_printf_i+0x40>)
 8009c44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009c48:	08009ca1 	.word	0x08009ca1
 8009c4c:	08009cb5 	.word	0x08009cb5
 8009c50:	08009c31 	.word	0x08009c31
 8009c54:	08009c31 	.word	0x08009c31
 8009c58:	08009c31 	.word	0x08009c31
 8009c5c:	08009c31 	.word	0x08009c31
 8009c60:	08009cb5 	.word	0x08009cb5
 8009c64:	08009c31 	.word	0x08009c31
 8009c68:	08009c31 	.word	0x08009c31
 8009c6c:	08009c31 	.word	0x08009c31
 8009c70:	08009c31 	.word	0x08009c31
 8009c74:	08009db3 	.word	0x08009db3
 8009c78:	08009cdf 	.word	0x08009cdf
 8009c7c:	08009d6d 	.word	0x08009d6d
 8009c80:	08009c31 	.word	0x08009c31
 8009c84:	08009c31 	.word	0x08009c31
 8009c88:	08009dd5 	.word	0x08009dd5
 8009c8c:	08009c31 	.word	0x08009c31
 8009c90:	08009cdf 	.word	0x08009cdf
 8009c94:	08009c31 	.word	0x08009c31
 8009c98:	08009c31 	.word	0x08009c31
 8009c9c:	08009d75 	.word	0x08009d75
 8009ca0:	6833      	ldr	r3, [r6, #0]
 8009ca2:	1d1a      	adds	r2, r3, #4
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	6032      	str	r2, [r6, #0]
 8009ca8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009cac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009cb0:	2301      	movs	r3, #1
 8009cb2:	e09c      	b.n	8009dee <_printf_i+0x1e6>
 8009cb4:	6833      	ldr	r3, [r6, #0]
 8009cb6:	6820      	ldr	r0, [r4, #0]
 8009cb8:	1d19      	adds	r1, r3, #4
 8009cba:	6031      	str	r1, [r6, #0]
 8009cbc:	0606      	lsls	r6, r0, #24
 8009cbe:	d501      	bpl.n	8009cc4 <_printf_i+0xbc>
 8009cc0:	681d      	ldr	r5, [r3, #0]
 8009cc2:	e003      	b.n	8009ccc <_printf_i+0xc4>
 8009cc4:	0645      	lsls	r5, r0, #25
 8009cc6:	d5fb      	bpl.n	8009cc0 <_printf_i+0xb8>
 8009cc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ccc:	2d00      	cmp	r5, #0
 8009cce:	da03      	bge.n	8009cd8 <_printf_i+0xd0>
 8009cd0:	232d      	movs	r3, #45	@ 0x2d
 8009cd2:	426d      	negs	r5, r5
 8009cd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009cd8:	4858      	ldr	r0, [pc, #352]	@ (8009e3c <_printf_i+0x234>)
 8009cda:	230a      	movs	r3, #10
 8009cdc:	e011      	b.n	8009d02 <_printf_i+0xfa>
 8009cde:	6821      	ldr	r1, [r4, #0]
 8009ce0:	6833      	ldr	r3, [r6, #0]
 8009ce2:	0608      	lsls	r0, r1, #24
 8009ce4:	f853 5b04 	ldr.w	r5, [r3], #4
 8009ce8:	d402      	bmi.n	8009cf0 <_printf_i+0xe8>
 8009cea:	0649      	lsls	r1, r1, #25
 8009cec:	bf48      	it	mi
 8009cee:	b2ad      	uxthmi	r5, r5
 8009cf0:	2f6f      	cmp	r7, #111	@ 0x6f
 8009cf2:	4852      	ldr	r0, [pc, #328]	@ (8009e3c <_printf_i+0x234>)
 8009cf4:	6033      	str	r3, [r6, #0]
 8009cf6:	bf14      	ite	ne
 8009cf8:	230a      	movne	r3, #10
 8009cfa:	2308      	moveq	r3, #8
 8009cfc:	2100      	movs	r1, #0
 8009cfe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009d02:	6866      	ldr	r6, [r4, #4]
 8009d04:	60a6      	str	r6, [r4, #8]
 8009d06:	2e00      	cmp	r6, #0
 8009d08:	db05      	blt.n	8009d16 <_printf_i+0x10e>
 8009d0a:	6821      	ldr	r1, [r4, #0]
 8009d0c:	432e      	orrs	r6, r5
 8009d0e:	f021 0104 	bic.w	r1, r1, #4
 8009d12:	6021      	str	r1, [r4, #0]
 8009d14:	d04b      	beq.n	8009dae <_printf_i+0x1a6>
 8009d16:	4616      	mov	r6, r2
 8009d18:	fbb5 f1f3 	udiv	r1, r5, r3
 8009d1c:	fb03 5711 	mls	r7, r3, r1, r5
 8009d20:	5dc7      	ldrb	r7, [r0, r7]
 8009d22:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009d26:	462f      	mov	r7, r5
 8009d28:	42bb      	cmp	r3, r7
 8009d2a:	460d      	mov	r5, r1
 8009d2c:	d9f4      	bls.n	8009d18 <_printf_i+0x110>
 8009d2e:	2b08      	cmp	r3, #8
 8009d30:	d10b      	bne.n	8009d4a <_printf_i+0x142>
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	07df      	lsls	r7, r3, #31
 8009d36:	d508      	bpl.n	8009d4a <_printf_i+0x142>
 8009d38:	6923      	ldr	r3, [r4, #16]
 8009d3a:	6861      	ldr	r1, [r4, #4]
 8009d3c:	4299      	cmp	r1, r3
 8009d3e:	bfde      	ittt	le
 8009d40:	2330      	movle	r3, #48	@ 0x30
 8009d42:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009d46:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009d4a:	1b92      	subs	r2, r2, r6
 8009d4c:	6122      	str	r2, [r4, #16]
 8009d4e:	f8cd a000 	str.w	sl, [sp]
 8009d52:	464b      	mov	r3, r9
 8009d54:	aa03      	add	r2, sp, #12
 8009d56:	4621      	mov	r1, r4
 8009d58:	4640      	mov	r0, r8
 8009d5a:	f7ff fee7 	bl	8009b2c <_printf_common>
 8009d5e:	3001      	adds	r0, #1
 8009d60:	d14a      	bne.n	8009df8 <_printf_i+0x1f0>
 8009d62:	f04f 30ff 	mov.w	r0, #4294967295
 8009d66:	b004      	add	sp, #16
 8009d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d6c:	6823      	ldr	r3, [r4, #0]
 8009d6e:	f043 0320 	orr.w	r3, r3, #32
 8009d72:	6023      	str	r3, [r4, #0]
 8009d74:	4832      	ldr	r0, [pc, #200]	@ (8009e40 <_printf_i+0x238>)
 8009d76:	2778      	movs	r7, #120	@ 0x78
 8009d78:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009d7c:	6823      	ldr	r3, [r4, #0]
 8009d7e:	6831      	ldr	r1, [r6, #0]
 8009d80:	061f      	lsls	r7, r3, #24
 8009d82:	f851 5b04 	ldr.w	r5, [r1], #4
 8009d86:	d402      	bmi.n	8009d8e <_printf_i+0x186>
 8009d88:	065f      	lsls	r7, r3, #25
 8009d8a:	bf48      	it	mi
 8009d8c:	b2ad      	uxthmi	r5, r5
 8009d8e:	6031      	str	r1, [r6, #0]
 8009d90:	07d9      	lsls	r1, r3, #31
 8009d92:	bf44      	itt	mi
 8009d94:	f043 0320 	orrmi.w	r3, r3, #32
 8009d98:	6023      	strmi	r3, [r4, #0]
 8009d9a:	b11d      	cbz	r5, 8009da4 <_printf_i+0x19c>
 8009d9c:	2310      	movs	r3, #16
 8009d9e:	e7ad      	b.n	8009cfc <_printf_i+0xf4>
 8009da0:	4826      	ldr	r0, [pc, #152]	@ (8009e3c <_printf_i+0x234>)
 8009da2:	e7e9      	b.n	8009d78 <_printf_i+0x170>
 8009da4:	6823      	ldr	r3, [r4, #0]
 8009da6:	f023 0320 	bic.w	r3, r3, #32
 8009daa:	6023      	str	r3, [r4, #0]
 8009dac:	e7f6      	b.n	8009d9c <_printf_i+0x194>
 8009dae:	4616      	mov	r6, r2
 8009db0:	e7bd      	b.n	8009d2e <_printf_i+0x126>
 8009db2:	6833      	ldr	r3, [r6, #0]
 8009db4:	6825      	ldr	r5, [r4, #0]
 8009db6:	6961      	ldr	r1, [r4, #20]
 8009db8:	1d18      	adds	r0, r3, #4
 8009dba:	6030      	str	r0, [r6, #0]
 8009dbc:	062e      	lsls	r6, r5, #24
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	d501      	bpl.n	8009dc6 <_printf_i+0x1be>
 8009dc2:	6019      	str	r1, [r3, #0]
 8009dc4:	e002      	b.n	8009dcc <_printf_i+0x1c4>
 8009dc6:	0668      	lsls	r0, r5, #25
 8009dc8:	d5fb      	bpl.n	8009dc2 <_printf_i+0x1ba>
 8009dca:	8019      	strh	r1, [r3, #0]
 8009dcc:	2300      	movs	r3, #0
 8009dce:	6123      	str	r3, [r4, #16]
 8009dd0:	4616      	mov	r6, r2
 8009dd2:	e7bc      	b.n	8009d4e <_printf_i+0x146>
 8009dd4:	6833      	ldr	r3, [r6, #0]
 8009dd6:	1d1a      	adds	r2, r3, #4
 8009dd8:	6032      	str	r2, [r6, #0]
 8009dda:	681e      	ldr	r6, [r3, #0]
 8009ddc:	6862      	ldr	r2, [r4, #4]
 8009dde:	2100      	movs	r1, #0
 8009de0:	4630      	mov	r0, r6
 8009de2:	f7f6 f9f5 	bl	80001d0 <memchr>
 8009de6:	b108      	cbz	r0, 8009dec <_printf_i+0x1e4>
 8009de8:	1b80      	subs	r0, r0, r6
 8009dea:	6060      	str	r0, [r4, #4]
 8009dec:	6863      	ldr	r3, [r4, #4]
 8009dee:	6123      	str	r3, [r4, #16]
 8009df0:	2300      	movs	r3, #0
 8009df2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009df6:	e7aa      	b.n	8009d4e <_printf_i+0x146>
 8009df8:	6923      	ldr	r3, [r4, #16]
 8009dfa:	4632      	mov	r2, r6
 8009dfc:	4649      	mov	r1, r9
 8009dfe:	4640      	mov	r0, r8
 8009e00:	47d0      	blx	sl
 8009e02:	3001      	adds	r0, #1
 8009e04:	d0ad      	beq.n	8009d62 <_printf_i+0x15a>
 8009e06:	6823      	ldr	r3, [r4, #0]
 8009e08:	079b      	lsls	r3, r3, #30
 8009e0a:	d413      	bmi.n	8009e34 <_printf_i+0x22c>
 8009e0c:	68e0      	ldr	r0, [r4, #12]
 8009e0e:	9b03      	ldr	r3, [sp, #12]
 8009e10:	4298      	cmp	r0, r3
 8009e12:	bfb8      	it	lt
 8009e14:	4618      	movlt	r0, r3
 8009e16:	e7a6      	b.n	8009d66 <_printf_i+0x15e>
 8009e18:	2301      	movs	r3, #1
 8009e1a:	4632      	mov	r2, r6
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	4640      	mov	r0, r8
 8009e20:	47d0      	blx	sl
 8009e22:	3001      	adds	r0, #1
 8009e24:	d09d      	beq.n	8009d62 <_printf_i+0x15a>
 8009e26:	3501      	adds	r5, #1
 8009e28:	68e3      	ldr	r3, [r4, #12]
 8009e2a:	9903      	ldr	r1, [sp, #12]
 8009e2c:	1a5b      	subs	r3, r3, r1
 8009e2e:	42ab      	cmp	r3, r5
 8009e30:	dcf2      	bgt.n	8009e18 <_printf_i+0x210>
 8009e32:	e7eb      	b.n	8009e0c <_printf_i+0x204>
 8009e34:	2500      	movs	r5, #0
 8009e36:	f104 0619 	add.w	r6, r4, #25
 8009e3a:	e7f5      	b.n	8009e28 <_printf_i+0x220>
 8009e3c:	0800c9c2 	.word	0x0800c9c2
 8009e40:	0800c9d3 	.word	0x0800c9d3

08009e44 <std>:
 8009e44:	2300      	movs	r3, #0
 8009e46:	b510      	push	{r4, lr}
 8009e48:	4604      	mov	r4, r0
 8009e4a:	e9c0 3300 	strd	r3, r3, [r0]
 8009e4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009e52:	6083      	str	r3, [r0, #8]
 8009e54:	8181      	strh	r1, [r0, #12]
 8009e56:	6643      	str	r3, [r0, #100]	@ 0x64
 8009e58:	81c2      	strh	r2, [r0, #14]
 8009e5a:	6183      	str	r3, [r0, #24]
 8009e5c:	4619      	mov	r1, r3
 8009e5e:	2208      	movs	r2, #8
 8009e60:	305c      	adds	r0, #92	@ 0x5c
 8009e62:	f000 fa3f 	bl	800a2e4 <memset>
 8009e66:	4b0d      	ldr	r3, [pc, #52]	@ (8009e9c <std+0x58>)
 8009e68:	6263      	str	r3, [r4, #36]	@ 0x24
 8009e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea0 <std+0x5c>)
 8009e6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8009e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea4 <std+0x60>)
 8009e70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009e72:	4b0d      	ldr	r3, [pc, #52]	@ (8009ea8 <std+0x64>)
 8009e74:	6323      	str	r3, [r4, #48]	@ 0x30
 8009e76:	4b0d      	ldr	r3, [pc, #52]	@ (8009eac <std+0x68>)
 8009e78:	6224      	str	r4, [r4, #32]
 8009e7a:	429c      	cmp	r4, r3
 8009e7c:	d006      	beq.n	8009e8c <std+0x48>
 8009e7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009e82:	4294      	cmp	r4, r2
 8009e84:	d002      	beq.n	8009e8c <std+0x48>
 8009e86:	33d0      	adds	r3, #208	@ 0xd0
 8009e88:	429c      	cmp	r4, r3
 8009e8a:	d105      	bne.n	8009e98 <std+0x54>
 8009e8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009e94:	f000 baa2 	b.w	800a3dc <__retarget_lock_init_recursive>
 8009e98:	bd10      	pop	{r4, pc}
 8009e9a:	bf00      	nop
 8009e9c:	0800a135 	.word	0x0800a135
 8009ea0:	0800a157 	.word	0x0800a157
 8009ea4:	0800a18f 	.word	0x0800a18f
 8009ea8:	0800a1b3 	.word	0x0800a1b3
 8009eac:	200026a4 	.word	0x200026a4

08009eb0 <stdio_exit_handler>:
 8009eb0:	4a02      	ldr	r2, [pc, #8]	@ (8009ebc <stdio_exit_handler+0xc>)
 8009eb2:	4903      	ldr	r1, [pc, #12]	@ (8009ec0 <stdio_exit_handler+0x10>)
 8009eb4:	4803      	ldr	r0, [pc, #12]	@ (8009ec4 <stdio_exit_handler+0x14>)
 8009eb6:	f000 b869 	b.w	8009f8c <_fwalk_sglue>
 8009eba:	bf00      	nop
 8009ebc:	20000020 	.word	0x20000020
 8009ec0:	0800bd45 	.word	0x0800bd45
 8009ec4:	20000030 	.word	0x20000030

08009ec8 <cleanup_stdio>:
 8009ec8:	6841      	ldr	r1, [r0, #4]
 8009eca:	4b0c      	ldr	r3, [pc, #48]	@ (8009efc <cleanup_stdio+0x34>)
 8009ecc:	4299      	cmp	r1, r3
 8009ece:	b510      	push	{r4, lr}
 8009ed0:	4604      	mov	r4, r0
 8009ed2:	d001      	beq.n	8009ed8 <cleanup_stdio+0x10>
 8009ed4:	f001 ff36 	bl	800bd44 <_fflush_r>
 8009ed8:	68a1      	ldr	r1, [r4, #8]
 8009eda:	4b09      	ldr	r3, [pc, #36]	@ (8009f00 <cleanup_stdio+0x38>)
 8009edc:	4299      	cmp	r1, r3
 8009ede:	d002      	beq.n	8009ee6 <cleanup_stdio+0x1e>
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f001 ff2f 	bl	800bd44 <_fflush_r>
 8009ee6:	68e1      	ldr	r1, [r4, #12]
 8009ee8:	4b06      	ldr	r3, [pc, #24]	@ (8009f04 <cleanup_stdio+0x3c>)
 8009eea:	4299      	cmp	r1, r3
 8009eec:	d004      	beq.n	8009ef8 <cleanup_stdio+0x30>
 8009eee:	4620      	mov	r0, r4
 8009ef0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009ef4:	f001 bf26 	b.w	800bd44 <_fflush_r>
 8009ef8:	bd10      	pop	{r4, pc}
 8009efa:	bf00      	nop
 8009efc:	200026a4 	.word	0x200026a4
 8009f00:	2000270c 	.word	0x2000270c
 8009f04:	20002774 	.word	0x20002774

08009f08 <global_stdio_init.part.0>:
 8009f08:	b510      	push	{r4, lr}
 8009f0a:	4b0b      	ldr	r3, [pc, #44]	@ (8009f38 <global_stdio_init.part.0+0x30>)
 8009f0c:	4c0b      	ldr	r4, [pc, #44]	@ (8009f3c <global_stdio_init.part.0+0x34>)
 8009f0e:	4a0c      	ldr	r2, [pc, #48]	@ (8009f40 <global_stdio_init.part.0+0x38>)
 8009f10:	601a      	str	r2, [r3, #0]
 8009f12:	4620      	mov	r0, r4
 8009f14:	2200      	movs	r2, #0
 8009f16:	2104      	movs	r1, #4
 8009f18:	f7ff ff94 	bl	8009e44 <std>
 8009f1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009f20:	2201      	movs	r2, #1
 8009f22:	2109      	movs	r1, #9
 8009f24:	f7ff ff8e 	bl	8009e44 <std>
 8009f28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009f2c:	2202      	movs	r2, #2
 8009f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f32:	2112      	movs	r1, #18
 8009f34:	f7ff bf86 	b.w	8009e44 <std>
 8009f38:	200027dc 	.word	0x200027dc
 8009f3c:	200026a4 	.word	0x200026a4
 8009f40:	08009eb1 	.word	0x08009eb1

08009f44 <__sfp_lock_acquire>:
 8009f44:	4801      	ldr	r0, [pc, #4]	@ (8009f4c <__sfp_lock_acquire+0x8>)
 8009f46:	f000 ba4a 	b.w	800a3de <__retarget_lock_acquire_recursive>
 8009f4a:	bf00      	nop
 8009f4c:	200027e5 	.word	0x200027e5

08009f50 <__sfp_lock_release>:
 8009f50:	4801      	ldr	r0, [pc, #4]	@ (8009f58 <__sfp_lock_release+0x8>)
 8009f52:	f000 ba45 	b.w	800a3e0 <__retarget_lock_release_recursive>
 8009f56:	bf00      	nop
 8009f58:	200027e5 	.word	0x200027e5

08009f5c <__sinit>:
 8009f5c:	b510      	push	{r4, lr}
 8009f5e:	4604      	mov	r4, r0
 8009f60:	f7ff fff0 	bl	8009f44 <__sfp_lock_acquire>
 8009f64:	6a23      	ldr	r3, [r4, #32]
 8009f66:	b11b      	cbz	r3, 8009f70 <__sinit+0x14>
 8009f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009f6c:	f7ff bff0 	b.w	8009f50 <__sfp_lock_release>
 8009f70:	4b04      	ldr	r3, [pc, #16]	@ (8009f84 <__sinit+0x28>)
 8009f72:	6223      	str	r3, [r4, #32]
 8009f74:	4b04      	ldr	r3, [pc, #16]	@ (8009f88 <__sinit+0x2c>)
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d1f5      	bne.n	8009f68 <__sinit+0xc>
 8009f7c:	f7ff ffc4 	bl	8009f08 <global_stdio_init.part.0>
 8009f80:	e7f2      	b.n	8009f68 <__sinit+0xc>
 8009f82:	bf00      	nop
 8009f84:	08009ec9 	.word	0x08009ec9
 8009f88:	200027dc 	.word	0x200027dc

08009f8c <_fwalk_sglue>:
 8009f8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f90:	4607      	mov	r7, r0
 8009f92:	4688      	mov	r8, r1
 8009f94:	4614      	mov	r4, r2
 8009f96:	2600      	movs	r6, #0
 8009f98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009f9c:	f1b9 0901 	subs.w	r9, r9, #1
 8009fa0:	d505      	bpl.n	8009fae <_fwalk_sglue+0x22>
 8009fa2:	6824      	ldr	r4, [r4, #0]
 8009fa4:	2c00      	cmp	r4, #0
 8009fa6:	d1f7      	bne.n	8009f98 <_fwalk_sglue+0xc>
 8009fa8:	4630      	mov	r0, r6
 8009faa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fae:	89ab      	ldrh	r3, [r5, #12]
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d907      	bls.n	8009fc4 <_fwalk_sglue+0x38>
 8009fb4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	d003      	beq.n	8009fc4 <_fwalk_sglue+0x38>
 8009fbc:	4629      	mov	r1, r5
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	47c0      	blx	r8
 8009fc2:	4306      	orrs	r6, r0
 8009fc4:	3568      	adds	r5, #104	@ 0x68
 8009fc6:	e7e9      	b.n	8009f9c <_fwalk_sglue+0x10>

08009fc8 <_puts_r>:
 8009fc8:	6a03      	ldr	r3, [r0, #32]
 8009fca:	b570      	push	{r4, r5, r6, lr}
 8009fcc:	6884      	ldr	r4, [r0, #8]
 8009fce:	4605      	mov	r5, r0
 8009fd0:	460e      	mov	r6, r1
 8009fd2:	b90b      	cbnz	r3, 8009fd8 <_puts_r+0x10>
 8009fd4:	f7ff ffc2 	bl	8009f5c <__sinit>
 8009fd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009fda:	07db      	lsls	r3, r3, #31
 8009fdc:	d405      	bmi.n	8009fea <_puts_r+0x22>
 8009fde:	89a3      	ldrh	r3, [r4, #12]
 8009fe0:	0598      	lsls	r0, r3, #22
 8009fe2:	d402      	bmi.n	8009fea <_puts_r+0x22>
 8009fe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009fe6:	f000 f9fa 	bl	800a3de <__retarget_lock_acquire_recursive>
 8009fea:	89a3      	ldrh	r3, [r4, #12]
 8009fec:	0719      	lsls	r1, r3, #28
 8009fee:	d502      	bpl.n	8009ff6 <_puts_r+0x2e>
 8009ff0:	6923      	ldr	r3, [r4, #16]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d135      	bne.n	800a062 <_puts_r+0x9a>
 8009ff6:	4621      	mov	r1, r4
 8009ff8:	4628      	mov	r0, r5
 8009ffa:	f000 f91d 	bl	800a238 <__swsetup_r>
 8009ffe:	b380      	cbz	r0, 800a062 <_puts_r+0x9a>
 800a000:	f04f 35ff 	mov.w	r5, #4294967295
 800a004:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a006:	07da      	lsls	r2, r3, #31
 800a008:	d405      	bmi.n	800a016 <_puts_r+0x4e>
 800a00a:	89a3      	ldrh	r3, [r4, #12]
 800a00c:	059b      	lsls	r3, r3, #22
 800a00e:	d402      	bmi.n	800a016 <_puts_r+0x4e>
 800a010:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a012:	f000 f9e5 	bl	800a3e0 <__retarget_lock_release_recursive>
 800a016:	4628      	mov	r0, r5
 800a018:	bd70      	pop	{r4, r5, r6, pc}
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	da04      	bge.n	800a028 <_puts_r+0x60>
 800a01e:	69a2      	ldr	r2, [r4, #24]
 800a020:	429a      	cmp	r2, r3
 800a022:	dc17      	bgt.n	800a054 <_puts_r+0x8c>
 800a024:	290a      	cmp	r1, #10
 800a026:	d015      	beq.n	800a054 <_puts_r+0x8c>
 800a028:	6823      	ldr	r3, [r4, #0]
 800a02a:	1c5a      	adds	r2, r3, #1
 800a02c:	6022      	str	r2, [r4, #0]
 800a02e:	7019      	strb	r1, [r3, #0]
 800a030:	68a3      	ldr	r3, [r4, #8]
 800a032:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a036:	3b01      	subs	r3, #1
 800a038:	60a3      	str	r3, [r4, #8]
 800a03a:	2900      	cmp	r1, #0
 800a03c:	d1ed      	bne.n	800a01a <_puts_r+0x52>
 800a03e:	2b00      	cmp	r3, #0
 800a040:	da11      	bge.n	800a066 <_puts_r+0x9e>
 800a042:	4622      	mov	r2, r4
 800a044:	210a      	movs	r1, #10
 800a046:	4628      	mov	r0, r5
 800a048:	f000 f8b7 	bl	800a1ba <__swbuf_r>
 800a04c:	3001      	adds	r0, #1
 800a04e:	d0d7      	beq.n	800a000 <_puts_r+0x38>
 800a050:	250a      	movs	r5, #10
 800a052:	e7d7      	b.n	800a004 <_puts_r+0x3c>
 800a054:	4622      	mov	r2, r4
 800a056:	4628      	mov	r0, r5
 800a058:	f000 f8af 	bl	800a1ba <__swbuf_r>
 800a05c:	3001      	adds	r0, #1
 800a05e:	d1e7      	bne.n	800a030 <_puts_r+0x68>
 800a060:	e7ce      	b.n	800a000 <_puts_r+0x38>
 800a062:	3e01      	subs	r6, #1
 800a064:	e7e4      	b.n	800a030 <_puts_r+0x68>
 800a066:	6823      	ldr	r3, [r4, #0]
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	6022      	str	r2, [r4, #0]
 800a06c:	220a      	movs	r2, #10
 800a06e:	701a      	strb	r2, [r3, #0]
 800a070:	e7ee      	b.n	800a050 <_puts_r+0x88>
	...

0800a074 <puts>:
 800a074:	4b02      	ldr	r3, [pc, #8]	@ (800a080 <puts+0xc>)
 800a076:	4601      	mov	r1, r0
 800a078:	6818      	ldr	r0, [r3, #0]
 800a07a:	f7ff bfa5 	b.w	8009fc8 <_puts_r>
 800a07e:	bf00      	nop
 800a080:	2000002c 	.word	0x2000002c

0800a084 <sniprintf>:
 800a084:	b40c      	push	{r2, r3}
 800a086:	b530      	push	{r4, r5, lr}
 800a088:	4b18      	ldr	r3, [pc, #96]	@ (800a0ec <sniprintf+0x68>)
 800a08a:	1e0c      	subs	r4, r1, #0
 800a08c:	681d      	ldr	r5, [r3, #0]
 800a08e:	b09d      	sub	sp, #116	@ 0x74
 800a090:	da08      	bge.n	800a0a4 <sniprintf+0x20>
 800a092:	238b      	movs	r3, #139	@ 0x8b
 800a094:	602b      	str	r3, [r5, #0]
 800a096:	f04f 30ff 	mov.w	r0, #4294967295
 800a09a:	b01d      	add	sp, #116	@ 0x74
 800a09c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a0a0:	b002      	add	sp, #8
 800a0a2:	4770      	bx	lr
 800a0a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a0a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a0ac:	f04f 0300 	mov.w	r3, #0
 800a0b0:	931b      	str	r3, [sp, #108]	@ 0x6c
 800a0b2:	bf14      	ite	ne
 800a0b4:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a0b8:	4623      	moveq	r3, r4
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	9307      	str	r3, [sp, #28]
 800a0be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a0c2:	9002      	str	r0, [sp, #8]
 800a0c4:	9006      	str	r0, [sp, #24]
 800a0c6:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a0ca:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a0cc:	ab21      	add	r3, sp, #132	@ 0x84
 800a0ce:	a902      	add	r1, sp, #8
 800a0d0:	4628      	mov	r0, r5
 800a0d2:	9301      	str	r3, [sp, #4]
 800a0d4:	f001 fcb6 	bl	800ba44 <_svfiprintf_r>
 800a0d8:	1c43      	adds	r3, r0, #1
 800a0da:	bfbc      	itt	lt
 800a0dc:	238b      	movlt	r3, #139	@ 0x8b
 800a0de:	602b      	strlt	r3, [r5, #0]
 800a0e0:	2c00      	cmp	r4, #0
 800a0e2:	d0da      	beq.n	800a09a <sniprintf+0x16>
 800a0e4:	9b02      	ldr	r3, [sp, #8]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	701a      	strb	r2, [r3, #0]
 800a0ea:	e7d6      	b.n	800a09a <sniprintf+0x16>
 800a0ec:	2000002c 	.word	0x2000002c

0800a0f0 <siprintf>:
 800a0f0:	b40e      	push	{r1, r2, r3}
 800a0f2:	b510      	push	{r4, lr}
 800a0f4:	b09d      	sub	sp, #116	@ 0x74
 800a0f6:	ab1f      	add	r3, sp, #124	@ 0x7c
 800a0f8:	9002      	str	r0, [sp, #8]
 800a0fa:	9006      	str	r0, [sp, #24]
 800a0fc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800a100:	480a      	ldr	r0, [pc, #40]	@ (800a12c <siprintf+0x3c>)
 800a102:	9107      	str	r1, [sp, #28]
 800a104:	9104      	str	r1, [sp, #16]
 800a106:	490a      	ldr	r1, [pc, #40]	@ (800a130 <siprintf+0x40>)
 800a108:	f853 2b04 	ldr.w	r2, [r3], #4
 800a10c:	9105      	str	r1, [sp, #20]
 800a10e:	2400      	movs	r4, #0
 800a110:	a902      	add	r1, sp, #8
 800a112:	6800      	ldr	r0, [r0, #0]
 800a114:	9301      	str	r3, [sp, #4]
 800a116:	941b      	str	r4, [sp, #108]	@ 0x6c
 800a118:	f001 fc94 	bl	800ba44 <_svfiprintf_r>
 800a11c:	9b02      	ldr	r3, [sp, #8]
 800a11e:	701c      	strb	r4, [r3, #0]
 800a120:	b01d      	add	sp, #116	@ 0x74
 800a122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a126:	b003      	add	sp, #12
 800a128:	4770      	bx	lr
 800a12a:	bf00      	nop
 800a12c:	2000002c 	.word	0x2000002c
 800a130:	ffff0208 	.word	0xffff0208

0800a134 <__sread>:
 800a134:	b510      	push	{r4, lr}
 800a136:	460c      	mov	r4, r1
 800a138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a13c:	f000 f900 	bl	800a340 <_read_r>
 800a140:	2800      	cmp	r0, #0
 800a142:	bfab      	itete	ge
 800a144:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a146:	89a3      	ldrhlt	r3, [r4, #12]
 800a148:	181b      	addge	r3, r3, r0
 800a14a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a14e:	bfac      	ite	ge
 800a150:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a152:	81a3      	strhlt	r3, [r4, #12]
 800a154:	bd10      	pop	{r4, pc}

0800a156 <__swrite>:
 800a156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a15a:	461f      	mov	r7, r3
 800a15c:	898b      	ldrh	r3, [r1, #12]
 800a15e:	05db      	lsls	r3, r3, #23
 800a160:	4605      	mov	r5, r0
 800a162:	460c      	mov	r4, r1
 800a164:	4616      	mov	r6, r2
 800a166:	d505      	bpl.n	800a174 <__swrite+0x1e>
 800a168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a16c:	2302      	movs	r3, #2
 800a16e:	2200      	movs	r2, #0
 800a170:	f000 f8d4 	bl	800a31c <_lseek_r>
 800a174:	89a3      	ldrh	r3, [r4, #12]
 800a176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a17a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a17e:	81a3      	strh	r3, [r4, #12]
 800a180:	4632      	mov	r2, r6
 800a182:	463b      	mov	r3, r7
 800a184:	4628      	mov	r0, r5
 800a186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a18a:	f000 b8eb 	b.w	800a364 <_write_r>

0800a18e <__sseek>:
 800a18e:	b510      	push	{r4, lr}
 800a190:	460c      	mov	r4, r1
 800a192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a196:	f000 f8c1 	bl	800a31c <_lseek_r>
 800a19a:	1c43      	adds	r3, r0, #1
 800a19c:	89a3      	ldrh	r3, [r4, #12]
 800a19e:	bf15      	itete	ne
 800a1a0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a1a2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a1a6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a1aa:	81a3      	strheq	r3, [r4, #12]
 800a1ac:	bf18      	it	ne
 800a1ae:	81a3      	strhne	r3, [r4, #12]
 800a1b0:	bd10      	pop	{r4, pc}

0800a1b2 <__sclose>:
 800a1b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a1b6:	f000 b8a1 	b.w	800a2fc <_close_r>

0800a1ba <__swbuf_r>:
 800a1ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1bc:	460e      	mov	r6, r1
 800a1be:	4614      	mov	r4, r2
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	b118      	cbz	r0, 800a1cc <__swbuf_r+0x12>
 800a1c4:	6a03      	ldr	r3, [r0, #32]
 800a1c6:	b90b      	cbnz	r3, 800a1cc <__swbuf_r+0x12>
 800a1c8:	f7ff fec8 	bl	8009f5c <__sinit>
 800a1cc:	69a3      	ldr	r3, [r4, #24]
 800a1ce:	60a3      	str	r3, [r4, #8]
 800a1d0:	89a3      	ldrh	r3, [r4, #12]
 800a1d2:	071a      	lsls	r2, r3, #28
 800a1d4:	d501      	bpl.n	800a1da <__swbuf_r+0x20>
 800a1d6:	6923      	ldr	r3, [r4, #16]
 800a1d8:	b943      	cbnz	r3, 800a1ec <__swbuf_r+0x32>
 800a1da:	4621      	mov	r1, r4
 800a1dc:	4628      	mov	r0, r5
 800a1de:	f000 f82b 	bl	800a238 <__swsetup_r>
 800a1e2:	b118      	cbz	r0, 800a1ec <__swbuf_r+0x32>
 800a1e4:	f04f 37ff 	mov.w	r7, #4294967295
 800a1e8:	4638      	mov	r0, r7
 800a1ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1ec:	6823      	ldr	r3, [r4, #0]
 800a1ee:	6922      	ldr	r2, [r4, #16]
 800a1f0:	1a98      	subs	r0, r3, r2
 800a1f2:	6963      	ldr	r3, [r4, #20]
 800a1f4:	b2f6      	uxtb	r6, r6
 800a1f6:	4283      	cmp	r3, r0
 800a1f8:	4637      	mov	r7, r6
 800a1fa:	dc05      	bgt.n	800a208 <__swbuf_r+0x4e>
 800a1fc:	4621      	mov	r1, r4
 800a1fe:	4628      	mov	r0, r5
 800a200:	f001 fda0 	bl	800bd44 <_fflush_r>
 800a204:	2800      	cmp	r0, #0
 800a206:	d1ed      	bne.n	800a1e4 <__swbuf_r+0x2a>
 800a208:	68a3      	ldr	r3, [r4, #8]
 800a20a:	3b01      	subs	r3, #1
 800a20c:	60a3      	str	r3, [r4, #8]
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	1c5a      	adds	r2, r3, #1
 800a212:	6022      	str	r2, [r4, #0]
 800a214:	701e      	strb	r6, [r3, #0]
 800a216:	6962      	ldr	r2, [r4, #20]
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d004      	beq.n	800a228 <__swbuf_r+0x6e>
 800a21e:	89a3      	ldrh	r3, [r4, #12]
 800a220:	07db      	lsls	r3, r3, #31
 800a222:	d5e1      	bpl.n	800a1e8 <__swbuf_r+0x2e>
 800a224:	2e0a      	cmp	r6, #10
 800a226:	d1df      	bne.n	800a1e8 <__swbuf_r+0x2e>
 800a228:	4621      	mov	r1, r4
 800a22a:	4628      	mov	r0, r5
 800a22c:	f001 fd8a 	bl	800bd44 <_fflush_r>
 800a230:	2800      	cmp	r0, #0
 800a232:	d0d9      	beq.n	800a1e8 <__swbuf_r+0x2e>
 800a234:	e7d6      	b.n	800a1e4 <__swbuf_r+0x2a>
	...

0800a238 <__swsetup_r>:
 800a238:	b538      	push	{r3, r4, r5, lr}
 800a23a:	4b29      	ldr	r3, [pc, #164]	@ (800a2e0 <__swsetup_r+0xa8>)
 800a23c:	4605      	mov	r5, r0
 800a23e:	6818      	ldr	r0, [r3, #0]
 800a240:	460c      	mov	r4, r1
 800a242:	b118      	cbz	r0, 800a24c <__swsetup_r+0x14>
 800a244:	6a03      	ldr	r3, [r0, #32]
 800a246:	b90b      	cbnz	r3, 800a24c <__swsetup_r+0x14>
 800a248:	f7ff fe88 	bl	8009f5c <__sinit>
 800a24c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a250:	0719      	lsls	r1, r3, #28
 800a252:	d422      	bmi.n	800a29a <__swsetup_r+0x62>
 800a254:	06da      	lsls	r2, r3, #27
 800a256:	d407      	bmi.n	800a268 <__swsetup_r+0x30>
 800a258:	2209      	movs	r2, #9
 800a25a:	602a      	str	r2, [r5, #0]
 800a25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	f04f 30ff 	mov.w	r0, #4294967295
 800a266:	e033      	b.n	800a2d0 <__swsetup_r+0x98>
 800a268:	0758      	lsls	r0, r3, #29
 800a26a:	d512      	bpl.n	800a292 <__swsetup_r+0x5a>
 800a26c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a26e:	b141      	cbz	r1, 800a282 <__swsetup_r+0x4a>
 800a270:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a274:	4299      	cmp	r1, r3
 800a276:	d002      	beq.n	800a27e <__swsetup_r+0x46>
 800a278:	4628      	mov	r0, r5
 800a27a:	f000 ff0d 	bl	800b098 <_free_r>
 800a27e:	2300      	movs	r3, #0
 800a280:	6363      	str	r3, [r4, #52]	@ 0x34
 800a282:	89a3      	ldrh	r3, [r4, #12]
 800a284:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a288:	81a3      	strh	r3, [r4, #12]
 800a28a:	2300      	movs	r3, #0
 800a28c:	6063      	str	r3, [r4, #4]
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	6023      	str	r3, [r4, #0]
 800a292:	89a3      	ldrh	r3, [r4, #12]
 800a294:	f043 0308 	orr.w	r3, r3, #8
 800a298:	81a3      	strh	r3, [r4, #12]
 800a29a:	6923      	ldr	r3, [r4, #16]
 800a29c:	b94b      	cbnz	r3, 800a2b2 <__swsetup_r+0x7a>
 800a29e:	89a3      	ldrh	r3, [r4, #12]
 800a2a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a2a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a2a8:	d003      	beq.n	800a2b2 <__swsetup_r+0x7a>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f001 fd97 	bl	800bde0 <__smakebuf_r>
 800a2b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b6:	f013 0201 	ands.w	r2, r3, #1
 800a2ba:	d00a      	beq.n	800a2d2 <__swsetup_r+0x9a>
 800a2bc:	2200      	movs	r2, #0
 800a2be:	60a2      	str	r2, [r4, #8]
 800a2c0:	6962      	ldr	r2, [r4, #20]
 800a2c2:	4252      	negs	r2, r2
 800a2c4:	61a2      	str	r2, [r4, #24]
 800a2c6:	6922      	ldr	r2, [r4, #16]
 800a2c8:	b942      	cbnz	r2, 800a2dc <__swsetup_r+0xa4>
 800a2ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a2ce:	d1c5      	bne.n	800a25c <__swsetup_r+0x24>
 800a2d0:	bd38      	pop	{r3, r4, r5, pc}
 800a2d2:	0799      	lsls	r1, r3, #30
 800a2d4:	bf58      	it	pl
 800a2d6:	6962      	ldrpl	r2, [r4, #20]
 800a2d8:	60a2      	str	r2, [r4, #8]
 800a2da:	e7f4      	b.n	800a2c6 <__swsetup_r+0x8e>
 800a2dc:	2000      	movs	r0, #0
 800a2de:	e7f7      	b.n	800a2d0 <__swsetup_r+0x98>
 800a2e0:	2000002c 	.word	0x2000002c

0800a2e4 <memset>:
 800a2e4:	4402      	add	r2, r0
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	4293      	cmp	r3, r2
 800a2ea:	d100      	bne.n	800a2ee <memset+0xa>
 800a2ec:	4770      	bx	lr
 800a2ee:	f803 1b01 	strb.w	r1, [r3], #1
 800a2f2:	e7f9      	b.n	800a2e8 <memset+0x4>

0800a2f4 <_localeconv_r>:
 800a2f4:	4800      	ldr	r0, [pc, #0]	@ (800a2f8 <_localeconv_r+0x4>)
 800a2f6:	4770      	bx	lr
 800a2f8:	2000016c 	.word	0x2000016c

0800a2fc <_close_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d06      	ldr	r5, [pc, #24]	@ (800a318 <_close_r+0x1c>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	602b      	str	r3, [r5, #0]
 800a308:	f7f7 fd08 	bl	8001d1c <_close>
 800a30c:	1c43      	adds	r3, r0, #1
 800a30e:	d102      	bne.n	800a316 <_close_r+0x1a>
 800a310:	682b      	ldr	r3, [r5, #0]
 800a312:	b103      	cbz	r3, 800a316 <_close_r+0x1a>
 800a314:	6023      	str	r3, [r4, #0]
 800a316:	bd38      	pop	{r3, r4, r5, pc}
 800a318:	200027e0 	.word	0x200027e0

0800a31c <_lseek_r>:
 800a31c:	b538      	push	{r3, r4, r5, lr}
 800a31e:	4d07      	ldr	r5, [pc, #28]	@ (800a33c <_lseek_r+0x20>)
 800a320:	4604      	mov	r4, r0
 800a322:	4608      	mov	r0, r1
 800a324:	4611      	mov	r1, r2
 800a326:	2200      	movs	r2, #0
 800a328:	602a      	str	r2, [r5, #0]
 800a32a:	461a      	mov	r2, r3
 800a32c:	f7f7 fd1d 	bl	8001d6a <_lseek>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d102      	bne.n	800a33a <_lseek_r+0x1e>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	b103      	cbz	r3, 800a33a <_lseek_r+0x1e>
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	200027e0 	.word	0x200027e0

0800a340 <_read_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d07      	ldr	r5, [pc, #28]	@ (800a360 <_read_r+0x20>)
 800a344:	4604      	mov	r4, r0
 800a346:	4608      	mov	r0, r1
 800a348:	4611      	mov	r1, r2
 800a34a:	2200      	movs	r2, #0
 800a34c:	602a      	str	r2, [r5, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	f7f7 fcab 	bl	8001caa <_read>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_read_r+0x1e>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_read_r+0x1e>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	200027e0 	.word	0x200027e0

0800a364 <_write_r>:
 800a364:	b538      	push	{r3, r4, r5, lr}
 800a366:	4d07      	ldr	r5, [pc, #28]	@ (800a384 <_write_r+0x20>)
 800a368:	4604      	mov	r4, r0
 800a36a:	4608      	mov	r0, r1
 800a36c:	4611      	mov	r1, r2
 800a36e:	2200      	movs	r2, #0
 800a370:	602a      	str	r2, [r5, #0]
 800a372:	461a      	mov	r2, r3
 800a374:	f7f7 fcb6 	bl	8001ce4 <_write>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_write_r+0x1e>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_write_r+0x1e>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	200027e0 	.word	0x200027e0

0800a388 <__errno>:
 800a388:	4b01      	ldr	r3, [pc, #4]	@ (800a390 <__errno+0x8>)
 800a38a:	6818      	ldr	r0, [r3, #0]
 800a38c:	4770      	bx	lr
 800a38e:	bf00      	nop
 800a390:	2000002c 	.word	0x2000002c

0800a394 <__libc_init_array>:
 800a394:	b570      	push	{r4, r5, r6, lr}
 800a396:	4d0d      	ldr	r5, [pc, #52]	@ (800a3cc <__libc_init_array+0x38>)
 800a398:	4c0d      	ldr	r4, [pc, #52]	@ (800a3d0 <__libc_init_array+0x3c>)
 800a39a:	1b64      	subs	r4, r4, r5
 800a39c:	10a4      	asrs	r4, r4, #2
 800a39e:	2600      	movs	r6, #0
 800a3a0:	42a6      	cmp	r6, r4
 800a3a2:	d109      	bne.n	800a3b8 <__libc_init_array+0x24>
 800a3a4:	4d0b      	ldr	r5, [pc, #44]	@ (800a3d4 <__libc_init_array+0x40>)
 800a3a6:	4c0c      	ldr	r4, [pc, #48]	@ (800a3d8 <__libc_init_array+0x44>)
 800a3a8:	f001 ffd6 	bl	800c358 <_init>
 800a3ac:	1b64      	subs	r4, r4, r5
 800a3ae:	10a4      	asrs	r4, r4, #2
 800a3b0:	2600      	movs	r6, #0
 800a3b2:	42a6      	cmp	r6, r4
 800a3b4:	d105      	bne.n	800a3c2 <__libc_init_array+0x2e>
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}
 800a3b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3bc:	4798      	blx	r3
 800a3be:	3601      	adds	r6, #1
 800a3c0:	e7ee      	b.n	800a3a0 <__libc_init_array+0xc>
 800a3c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3c6:	4798      	blx	r3
 800a3c8:	3601      	adds	r6, #1
 800a3ca:	e7f2      	b.n	800a3b2 <__libc_init_array+0x1e>
 800a3cc:	0800cd2c 	.word	0x0800cd2c
 800a3d0:	0800cd2c 	.word	0x0800cd2c
 800a3d4:	0800cd2c 	.word	0x0800cd2c
 800a3d8:	0800cd30 	.word	0x0800cd30

0800a3dc <__retarget_lock_init_recursive>:
 800a3dc:	4770      	bx	lr

0800a3de <__retarget_lock_acquire_recursive>:
 800a3de:	4770      	bx	lr

0800a3e0 <__retarget_lock_release_recursive>:
 800a3e0:	4770      	bx	lr

0800a3e2 <quorem>:
 800a3e2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3e6:	6903      	ldr	r3, [r0, #16]
 800a3e8:	690c      	ldr	r4, [r1, #16]
 800a3ea:	42a3      	cmp	r3, r4
 800a3ec:	4607      	mov	r7, r0
 800a3ee:	db7e      	blt.n	800a4ee <quorem+0x10c>
 800a3f0:	3c01      	subs	r4, #1
 800a3f2:	f101 0814 	add.w	r8, r1, #20
 800a3f6:	00a3      	lsls	r3, r4, #2
 800a3f8:	f100 0514 	add.w	r5, r0, #20
 800a3fc:	9300      	str	r3, [sp, #0]
 800a3fe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a402:	9301      	str	r3, [sp, #4]
 800a404:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a408:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a40c:	3301      	adds	r3, #1
 800a40e:	429a      	cmp	r2, r3
 800a410:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a414:	fbb2 f6f3 	udiv	r6, r2, r3
 800a418:	d32e      	bcc.n	800a478 <quorem+0x96>
 800a41a:	f04f 0a00 	mov.w	sl, #0
 800a41e:	46c4      	mov	ip, r8
 800a420:	46ae      	mov	lr, r5
 800a422:	46d3      	mov	fp, sl
 800a424:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a428:	b298      	uxth	r0, r3
 800a42a:	fb06 a000 	mla	r0, r6, r0, sl
 800a42e:	0c02      	lsrs	r2, r0, #16
 800a430:	0c1b      	lsrs	r3, r3, #16
 800a432:	fb06 2303 	mla	r3, r6, r3, r2
 800a436:	f8de 2000 	ldr.w	r2, [lr]
 800a43a:	b280      	uxth	r0, r0
 800a43c:	b292      	uxth	r2, r2
 800a43e:	1a12      	subs	r2, r2, r0
 800a440:	445a      	add	r2, fp
 800a442:	f8de 0000 	ldr.w	r0, [lr]
 800a446:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a450:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a454:	b292      	uxth	r2, r2
 800a456:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a45a:	45e1      	cmp	r9, ip
 800a45c:	f84e 2b04 	str.w	r2, [lr], #4
 800a460:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a464:	d2de      	bcs.n	800a424 <quorem+0x42>
 800a466:	9b00      	ldr	r3, [sp, #0]
 800a468:	58eb      	ldr	r3, [r5, r3]
 800a46a:	b92b      	cbnz	r3, 800a478 <quorem+0x96>
 800a46c:	9b01      	ldr	r3, [sp, #4]
 800a46e:	3b04      	subs	r3, #4
 800a470:	429d      	cmp	r5, r3
 800a472:	461a      	mov	r2, r3
 800a474:	d32f      	bcc.n	800a4d6 <quorem+0xf4>
 800a476:	613c      	str	r4, [r7, #16]
 800a478:	4638      	mov	r0, r7
 800a47a:	f001 f97f 	bl	800b77c <__mcmp>
 800a47e:	2800      	cmp	r0, #0
 800a480:	db25      	blt.n	800a4ce <quorem+0xec>
 800a482:	4629      	mov	r1, r5
 800a484:	2000      	movs	r0, #0
 800a486:	f858 2b04 	ldr.w	r2, [r8], #4
 800a48a:	f8d1 c000 	ldr.w	ip, [r1]
 800a48e:	fa1f fe82 	uxth.w	lr, r2
 800a492:	fa1f f38c 	uxth.w	r3, ip
 800a496:	eba3 030e 	sub.w	r3, r3, lr
 800a49a:	4403      	add	r3, r0
 800a49c:	0c12      	lsrs	r2, r2, #16
 800a49e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a4a2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a4ac:	45c1      	cmp	r9, r8
 800a4ae:	f841 3b04 	str.w	r3, [r1], #4
 800a4b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a4b6:	d2e6      	bcs.n	800a486 <quorem+0xa4>
 800a4b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4c0:	b922      	cbnz	r2, 800a4cc <quorem+0xea>
 800a4c2:	3b04      	subs	r3, #4
 800a4c4:	429d      	cmp	r5, r3
 800a4c6:	461a      	mov	r2, r3
 800a4c8:	d30b      	bcc.n	800a4e2 <quorem+0x100>
 800a4ca:	613c      	str	r4, [r7, #16]
 800a4cc:	3601      	adds	r6, #1
 800a4ce:	4630      	mov	r0, r6
 800a4d0:	b003      	add	sp, #12
 800a4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4d6:	6812      	ldr	r2, [r2, #0]
 800a4d8:	3b04      	subs	r3, #4
 800a4da:	2a00      	cmp	r2, #0
 800a4dc:	d1cb      	bne.n	800a476 <quorem+0x94>
 800a4de:	3c01      	subs	r4, #1
 800a4e0:	e7c6      	b.n	800a470 <quorem+0x8e>
 800a4e2:	6812      	ldr	r2, [r2, #0]
 800a4e4:	3b04      	subs	r3, #4
 800a4e6:	2a00      	cmp	r2, #0
 800a4e8:	d1ef      	bne.n	800a4ca <quorem+0xe8>
 800a4ea:	3c01      	subs	r4, #1
 800a4ec:	e7ea      	b.n	800a4c4 <quorem+0xe2>
 800a4ee:	2000      	movs	r0, #0
 800a4f0:	e7ee      	b.n	800a4d0 <quorem+0xee>
 800a4f2:	0000      	movs	r0, r0
 800a4f4:	0000      	movs	r0, r0
	...

0800a4f8 <_dtoa_r>:
 800a4f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fc:	69c7      	ldr	r7, [r0, #28]
 800a4fe:	b097      	sub	sp, #92	@ 0x5c
 800a500:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a504:	ec55 4b10 	vmov	r4, r5, d0
 800a508:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800a50a:	9107      	str	r1, [sp, #28]
 800a50c:	4681      	mov	r9, r0
 800a50e:	920c      	str	r2, [sp, #48]	@ 0x30
 800a510:	9311      	str	r3, [sp, #68]	@ 0x44
 800a512:	b97f      	cbnz	r7, 800a534 <_dtoa_r+0x3c>
 800a514:	2010      	movs	r0, #16
 800a516:	f000 fe09 	bl	800b12c <malloc>
 800a51a:	4602      	mov	r2, r0
 800a51c:	f8c9 001c 	str.w	r0, [r9, #28]
 800a520:	b920      	cbnz	r0, 800a52c <_dtoa_r+0x34>
 800a522:	4ba9      	ldr	r3, [pc, #676]	@ (800a7c8 <_dtoa_r+0x2d0>)
 800a524:	21ef      	movs	r1, #239	@ 0xef
 800a526:	48a9      	ldr	r0, [pc, #676]	@ (800a7cc <_dtoa_r+0x2d4>)
 800a528:	f001 fcf0 	bl	800bf0c <__assert_func>
 800a52c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a530:	6007      	str	r7, [r0, #0]
 800a532:	60c7      	str	r7, [r0, #12]
 800a534:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a538:	6819      	ldr	r1, [r3, #0]
 800a53a:	b159      	cbz	r1, 800a554 <_dtoa_r+0x5c>
 800a53c:	685a      	ldr	r2, [r3, #4]
 800a53e:	604a      	str	r2, [r1, #4]
 800a540:	2301      	movs	r3, #1
 800a542:	4093      	lsls	r3, r2
 800a544:	608b      	str	r3, [r1, #8]
 800a546:	4648      	mov	r0, r9
 800a548:	f000 fee6 	bl	800b318 <_Bfree>
 800a54c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a550:	2200      	movs	r2, #0
 800a552:	601a      	str	r2, [r3, #0]
 800a554:	1e2b      	subs	r3, r5, #0
 800a556:	bfb9      	ittee	lt
 800a558:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a55c:	9305      	strlt	r3, [sp, #20]
 800a55e:	2300      	movge	r3, #0
 800a560:	6033      	strge	r3, [r6, #0]
 800a562:	9f05      	ldr	r7, [sp, #20]
 800a564:	4b9a      	ldr	r3, [pc, #616]	@ (800a7d0 <_dtoa_r+0x2d8>)
 800a566:	bfbc      	itt	lt
 800a568:	2201      	movlt	r2, #1
 800a56a:	6032      	strlt	r2, [r6, #0]
 800a56c:	43bb      	bics	r3, r7
 800a56e:	d112      	bne.n	800a596 <_dtoa_r+0x9e>
 800a570:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a572:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a576:	6013      	str	r3, [r2, #0]
 800a578:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a57c:	4323      	orrs	r3, r4
 800a57e:	f000 855a 	beq.w	800b036 <_dtoa_r+0xb3e>
 800a582:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a584:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800a7e4 <_dtoa_r+0x2ec>
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 855c 	beq.w	800b046 <_dtoa_r+0xb4e>
 800a58e:	f10a 0303 	add.w	r3, sl, #3
 800a592:	f000 bd56 	b.w	800b042 <_dtoa_r+0xb4a>
 800a596:	ed9d 7b04 	vldr	d7, [sp, #16]
 800a59a:	2200      	movs	r2, #0
 800a59c:	ec51 0b17 	vmov	r0, r1, d7
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800a5a6:	f7f6 fa8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5aa:	4680      	mov	r8, r0
 800a5ac:	b158      	cbz	r0, 800a5c6 <_dtoa_r+0xce>
 800a5ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800a5b0:	2301      	movs	r3, #1
 800a5b2:	6013      	str	r3, [r2, #0]
 800a5b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a5b6:	b113      	cbz	r3, 800a5be <_dtoa_r+0xc6>
 800a5b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a5ba:	4b86      	ldr	r3, [pc, #536]	@ (800a7d4 <_dtoa_r+0x2dc>)
 800a5bc:	6013      	str	r3, [r2, #0]
 800a5be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800a7e8 <_dtoa_r+0x2f0>
 800a5c2:	f000 bd40 	b.w	800b046 <_dtoa_r+0xb4e>
 800a5c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800a5ca:	aa14      	add	r2, sp, #80	@ 0x50
 800a5cc:	a915      	add	r1, sp, #84	@ 0x54
 800a5ce:	4648      	mov	r0, r9
 800a5d0:	f001 f984 	bl	800b8dc <__d2b>
 800a5d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800a5d8:	9002      	str	r0, [sp, #8]
 800a5da:	2e00      	cmp	r6, #0
 800a5dc:	d078      	beq.n	800a6d0 <_dtoa_r+0x1d8>
 800a5de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a5e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800a5e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a5e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a5ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a5f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a5f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	4b76      	ldr	r3, [pc, #472]	@ (800a7d8 <_dtoa_r+0x2e0>)
 800a5fe:	f7f5 fe43 	bl	8000288 <__aeabi_dsub>
 800a602:	a36b      	add	r3, pc, #428	@ (adr r3, 800a7b0 <_dtoa_r+0x2b8>)
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	f7f5 fff6 	bl	80005f8 <__aeabi_dmul>
 800a60c:	a36a      	add	r3, pc, #424	@ (adr r3, 800a7b8 <_dtoa_r+0x2c0>)
 800a60e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a612:	f7f5 fe3b 	bl	800028c <__adddf3>
 800a616:	4604      	mov	r4, r0
 800a618:	4630      	mov	r0, r6
 800a61a:	460d      	mov	r5, r1
 800a61c:	f7f5 ff82 	bl	8000524 <__aeabi_i2d>
 800a620:	a367      	add	r3, pc, #412	@ (adr r3, 800a7c0 <_dtoa_r+0x2c8>)
 800a622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a626:	f7f5 ffe7 	bl	80005f8 <__aeabi_dmul>
 800a62a:	4602      	mov	r2, r0
 800a62c:	460b      	mov	r3, r1
 800a62e:	4620      	mov	r0, r4
 800a630:	4629      	mov	r1, r5
 800a632:	f7f5 fe2b 	bl	800028c <__adddf3>
 800a636:	4604      	mov	r4, r0
 800a638:	460d      	mov	r5, r1
 800a63a:	f7f6 fa8d 	bl	8000b58 <__aeabi_d2iz>
 800a63e:	2200      	movs	r2, #0
 800a640:	4607      	mov	r7, r0
 800a642:	2300      	movs	r3, #0
 800a644:	4620      	mov	r0, r4
 800a646:	4629      	mov	r1, r5
 800a648:	f7f6 fa48 	bl	8000adc <__aeabi_dcmplt>
 800a64c:	b140      	cbz	r0, 800a660 <_dtoa_r+0x168>
 800a64e:	4638      	mov	r0, r7
 800a650:	f7f5 ff68 	bl	8000524 <__aeabi_i2d>
 800a654:	4622      	mov	r2, r4
 800a656:	462b      	mov	r3, r5
 800a658:	f7f6 fa36 	bl	8000ac8 <__aeabi_dcmpeq>
 800a65c:	b900      	cbnz	r0, 800a660 <_dtoa_r+0x168>
 800a65e:	3f01      	subs	r7, #1
 800a660:	2f16      	cmp	r7, #22
 800a662:	d852      	bhi.n	800a70a <_dtoa_r+0x212>
 800a664:	4b5d      	ldr	r3, [pc, #372]	@ (800a7dc <_dtoa_r+0x2e4>)
 800a666:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a66a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a66e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a672:	f7f6 fa33 	bl	8000adc <__aeabi_dcmplt>
 800a676:	2800      	cmp	r0, #0
 800a678:	d049      	beq.n	800a70e <_dtoa_r+0x216>
 800a67a:	3f01      	subs	r7, #1
 800a67c:	2300      	movs	r3, #0
 800a67e:	9310      	str	r3, [sp, #64]	@ 0x40
 800a680:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a682:	1b9b      	subs	r3, r3, r6
 800a684:	1e5a      	subs	r2, r3, #1
 800a686:	bf45      	ittet	mi
 800a688:	f1c3 0301 	rsbmi	r3, r3, #1
 800a68c:	9300      	strmi	r3, [sp, #0]
 800a68e:	2300      	movpl	r3, #0
 800a690:	2300      	movmi	r3, #0
 800a692:	9206      	str	r2, [sp, #24]
 800a694:	bf54      	ite	pl
 800a696:	9300      	strpl	r3, [sp, #0]
 800a698:	9306      	strmi	r3, [sp, #24]
 800a69a:	2f00      	cmp	r7, #0
 800a69c:	db39      	blt.n	800a712 <_dtoa_r+0x21a>
 800a69e:	9b06      	ldr	r3, [sp, #24]
 800a6a0:	970d      	str	r7, [sp, #52]	@ 0x34
 800a6a2:	443b      	add	r3, r7
 800a6a4:	9306      	str	r3, [sp, #24]
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	9308      	str	r3, [sp, #32]
 800a6aa:	9b07      	ldr	r3, [sp, #28]
 800a6ac:	2b09      	cmp	r3, #9
 800a6ae:	d863      	bhi.n	800a778 <_dtoa_r+0x280>
 800a6b0:	2b05      	cmp	r3, #5
 800a6b2:	bfc4      	itt	gt
 800a6b4:	3b04      	subgt	r3, #4
 800a6b6:	9307      	strgt	r3, [sp, #28]
 800a6b8:	9b07      	ldr	r3, [sp, #28]
 800a6ba:	f1a3 0302 	sub.w	r3, r3, #2
 800a6be:	bfcc      	ite	gt
 800a6c0:	2400      	movgt	r4, #0
 800a6c2:	2401      	movle	r4, #1
 800a6c4:	2b03      	cmp	r3, #3
 800a6c6:	d863      	bhi.n	800a790 <_dtoa_r+0x298>
 800a6c8:	e8df f003 	tbb	[pc, r3]
 800a6cc:	2b375452 	.word	0x2b375452
 800a6d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a6d4:	441e      	add	r6, r3
 800a6d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a6da:	2b20      	cmp	r3, #32
 800a6dc:	bfc1      	itttt	gt
 800a6de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a6e2:	409f      	lslgt	r7, r3
 800a6e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a6e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a6ec:	bfd6      	itet	le
 800a6ee:	f1c3 0320 	rsble	r3, r3, #32
 800a6f2:	ea47 0003 	orrgt.w	r0, r7, r3
 800a6f6:	fa04 f003 	lslle.w	r0, r4, r3
 800a6fa:	f7f5 ff03 	bl	8000504 <__aeabi_ui2d>
 800a6fe:	2201      	movs	r2, #1
 800a700:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a704:	3e01      	subs	r6, #1
 800a706:	9212      	str	r2, [sp, #72]	@ 0x48
 800a708:	e776      	b.n	800a5f8 <_dtoa_r+0x100>
 800a70a:	2301      	movs	r3, #1
 800a70c:	e7b7      	b.n	800a67e <_dtoa_r+0x186>
 800a70e:	9010      	str	r0, [sp, #64]	@ 0x40
 800a710:	e7b6      	b.n	800a680 <_dtoa_r+0x188>
 800a712:	9b00      	ldr	r3, [sp, #0]
 800a714:	1bdb      	subs	r3, r3, r7
 800a716:	9300      	str	r3, [sp, #0]
 800a718:	427b      	negs	r3, r7
 800a71a:	9308      	str	r3, [sp, #32]
 800a71c:	2300      	movs	r3, #0
 800a71e:	930d      	str	r3, [sp, #52]	@ 0x34
 800a720:	e7c3      	b.n	800a6aa <_dtoa_r+0x1b2>
 800a722:	2301      	movs	r3, #1
 800a724:	9309      	str	r3, [sp, #36]	@ 0x24
 800a726:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a728:	eb07 0b03 	add.w	fp, r7, r3
 800a72c:	f10b 0301 	add.w	r3, fp, #1
 800a730:	2b01      	cmp	r3, #1
 800a732:	9303      	str	r3, [sp, #12]
 800a734:	bfb8      	it	lt
 800a736:	2301      	movlt	r3, #1
 800a738:	e006      	b.n	800a748 <_dtoa_r+0x250>
 800a73a:	2301      	movs	r3, #1
 800a73c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a73e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a740:	2b00      	cmp	r3, #0
 800a742:	dd28      	ble.n	800a796 <_dtoa_r+0x29e>
 800a744:	469b      	mov	fp, r3
 800a746:	9303      	str	r3, [sp, #12]
 800a748:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800a74c:	2100      	movs	r1, #0
 800a74e:	2204      	movs	r2, #4
 800a750:	f102 0514 	add.w	r5, r2, #20
 800a754:	429d      	cmp	r5, r3
 800a756:	d926      	bls.n	800a7a6 <_dtoa_r+0x2ae>
 800a758:	6041      	str	r1, [r0, #4]
 800a75a:	4648      	mov	r0, r9
 800a75c:	f000 fd9c 	bl	800b298 <_Balloc>
 800a760:	4682      	mov	sl, r0
 800a762:	2800      	cmp	r0, #0
 800a764:	d142      	bne.n	800a7ec <_dtoa_r+0x2f4>
 800a766:	4b1e      	ldr	r3, [pc, #120]	@ (800a7e0 <_dtoa_r+0x2e8>)
 800a768:	4602      	mov	r2, r0
 800a76a:	f240 11af 	movw	r1, #431	@ 0x1af
 800a76e:	e6da      	b.n	800a526 <_dtoa_r+0x2e>
 800a770:	2300      	movs	r3, #0
 800a772:	e7e3      	b.n	800a73c <_dtoa_r+0x244>
 800a774:	2300      	movs	r3, #0
 800a776:	e7d5      	b.n	800a724 <_dtoa_r+0x22c>
 800a778:	2401      	movs	r4, #1
 800a77a:	2300      	movs	r3, #0
 800a77c:	9307      	str	r3, [sp, #28]
 800a77e:	9409      	str	r4, [sp, #36]	@ 0x24
 800a780:	f04f 3bff 	mov.w	fp, #4294967295
 800a784:	2200      	movs	r2, #0
 800a786:	f8cd b00c 	str.w	fp, [sp, #12]
 800a78a:	2312      	movs	r3, #18
 800a78c:	920c      	str	r2, [sp, #48]	@ 0x30
 800a78e:	e7db      	b.n	800a748 <_dtoa_r+0x250>
 800a790:	2301      	movs	r3, #1
 800a792:	9309      	str	r3, [sp, #36]	@ 0x24
 800a794:	e7f4      	b.n	800a780 <_dtoa_r+0x288>
 800a796:	f04f 0b01 	mov.w	fp, #1
 800a79a:	f8cd b00c 	str.w	fp, [sp, #12]
 800a79e:	465b      	mov	r3, fp
 800a7a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800a7a4:	e7d0      	b.n	800a748 <_dtoa_r+0x250>
 800a7a6:	3101      	adds	r1, #1
 800a7a8:	0052      	lsls	r2, r2, #1
 800a7aa:	e7d1      	b.n	800a750 <_dtoa_r+0x258>
 800a7ac:	f3af 8000 	nop.w
 800a7b0:	636f4361 	.word	0x636f4361
 800a7b4:	3fd287a7 	.word	0x3fd287a7
 800a7b8:	8b60c8b3 	.word	0x8b60c8b3
 800a7bc:	3fc68a28 	.word	0x3fc68a28
 800a7c0:	509f79fb 	.word	0x509f79fb
 800a7c4:	3fd34413 	.word	0x3fd34413
 800a7c8:	0800c9f1 	.word	0x0800c9f1
 800a7cc:	0800ca08 	.word	0x0800ca08
 800a7d0:	7ff00000 	.word	0x7ff00000
 800a7d4:	0800c9c1 	.word	0x0800c9c1
 800a7d8:	3ff80000 	.word	0x3ff80000
 800a7dc:	0800cb58 	.word	0x0800cb58
 800a7e0:	0800ca60 	.word	0x0800ca60
 800a7e4:	0800c9ed 	.word	0x0800c9ed
 800a7e8:	0800c9c0 	.word	0x0800c9c0
 800a7ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a7f0:	6018      	str	r0, [r3, #0]
 800a7f2:	9b03      	ldr	r3, [sp, #12]
 800a7f4:	2b0e      	cmp	r3, #14
 800a7f6:	f200 80a1 	bhi.w	800a93c <_dtoa_r+0x444>
 800a7fa:	2c00      	cmp	r4, #0
 800a7fc:	f000 809e 	beq.w	800a93c <_dtoa_r+0x444>
 800a800:	2f00      	cmp	r7, #0
 800a802:	dd33      	ble.n	800a86c <_dtoa_r+0x374>
 800a804:	4b9c      	ldr	r3, [pc, #624]	@ (800aa78 <_dtoa_r+0x580>)
 800a806:	f007 020f 	and.w	r2, r7, #15
 800a80a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a80e:	ed93 7b00 	vldr	d7, [r3]
 800a812:	05f8      	lsls	r0, r7, #23
 800a814:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800a818:	ea4f 1427 	mov.w	r4, r7, asr #4
 800a81c:	d516      	bpl.n	800a84c <_dtoa_r+0x354>
 800a81e:	4b97      	ldr	r3, [pc, #604]	@ (800aa7c <_dtoa_r+0x584>)
 800a820:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a824:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a828:	f7f6 f810 	bl	800084c <__aeabi_ddiv>
 800a82c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a830:	f004 040f 	and.w	r4, r4, #15
 800a834:	2603      	movs	r6, #3
 800a836:	4d91      	ldr	r5, [pc, #580]	@ (800aa7c <_dtoa_r+0x584>)
 800a838:	b954      	cbnz	r4, 800a850 <_dtoa_r+0x358>
 800a83a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800a83e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a842:	f7f6 f803 	bl	800084c <__aeabi_ddiv>
 800a846:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a84a:	e028      	b.n	800a89e <_dtoa_r+0x3a6>
 800a84c:	2602      	movs	r6, #2
 800a84e:	e7f2      	b.n	800a836 <_dtoa_r+0x33e>
 800a850:	07e1      	lsls	r1, r4, #31
 800a852:	d508      	bpl.n	800a866 <_dtoa_r+0x36e>
 800a854:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800a858:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a85c:	f7f5 fecc 	bl	80005f8 <__aeabi_dmul>
 800a860:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a864:	3601      	adds	r6, #1
 800a866:	1064      	asrs	r4, r4, #1
 800a868:	3508      	adds	r5, #8
 800a86a:	e7e5      	b.n	800a838 <_dtoa_r+0x340>
 800a86c:	f000 80af 	beq.w	800a9ce <_dtoa_r+0x4d6>
 800a870:	427c      	negs	r4, r7
 800a872:	4b81      	ldr	r3, [pc, #516]	@ (800aa78 <_dtoa_r+0x580>)
 800a874:	4d81      	ldr	r5, [pc, #516]	@ (800aa7c <_dtoa_r+0x584>)
 800a876:	f004 020f 	and.w	r2, r4, #15
 800a87a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a87e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a882:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800a886:	f7f5 feb7 	bl	80005f8 <__aeabi_dmul>
 800a88a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a88e:	1124      	asrs	r4, r4, #4
 800a890:	2300      	movs	r3, #0
 800a892:	2602      	movs	r6, #2
 800a894:	2c00      	cmp	r4, #0
 800a896:	f040 808f 	bne.w	800a9b8 <_dtoa_r+0x4c0>
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d1d3      	bne.n	800a846 <_dtoa_r+0x34e>
 800a89e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a8a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	f000 8094 	beq.w	800a9d2 <_dtoa_r+0x4da>
 800a8aa:	4b75      	ldr	r3, [pc, #468]	@ (800aa80 <_dtoa_r+0x588>)
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4620      	mov	r0, r4
 800a8b0:	4629      	mov	r1, r5
 800a8b2:	f7f6 f913 	bl	8000adc <__aeabi_dcmplt>
 800a8b6:	2800      	cmp	r0, #0
 800a8b8:	f000 808b 	beq.w	800a9d2 <_dtoa_r+0x4da>
 800a8bc:	9b03      	ldr	r3, [sp, #12]
 800a8be:	2b00      	cmp	r3, #0
 800a8c0:	f000 8087 	beq.w	800a9d2 <_dtoa_r+0x4da>
 800a8c4:	f1bb 0f00 	cmp.w	fp, #0
 800a8c8:	dd34      	ble.n	800a934 <_dtoa_r+0x43c>
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	4b6d      	ldr	r3, [pc, #436]	@ (800aa84 <_dtoa_r+0x58c>)
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	4629      	mov	r1, r5
 800a8d2:	f7f5 fe91 	bl	80005f8 <__aeabi_dmul>
 800a8d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800a8da:	f107 38ff 	add.w	r8, r7, #4294967295
 800a8de:	3601      	adds	r6, #1
 800a8e0:	465c      	mov	r4, fp
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	f7f5 fe1e 	bl	8000524 <__aeabi_i2d>
 800a8e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a8ec:	f7f5 fe84 	bl	80005f8 <__aeabi_dmul>
 800a8f0:	4b65      	ldr	r3, [pc, #404]	@ (800aa88 <_dtoa_r+0x590>)
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f7f5 fcca 	bl	800028c <__adddf3>
 800a8f8:	4605      	mov	r5, r0
 800a8fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800a8fe:	2c00      	cmp	r4, #0
 800a900:	d16a      	bne.n	800a9d8 <_dtoa_r+0x4e0>
 800a902:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a906:	4b61      	ldr	r3, [pc, #388]	@ (800aa8c <_dtoa_r+0x594>)
 800a908:	2200      	movs	r2, #0
 800a90a:	f7f5 fcbd 	bl	8000288 <__aeabi_dsub>
 800a90e:	4602      	mov	r2, r0
 800a910:	460b      	mov	r3, r1
 800a912:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800a916:	462a      	mov	r2, r5
 800a918:	4633      	mov	r3, r6
 800a91a:	f7f6 f8fd 	bl	8000b18 <__aeabi_dcmpgt>
 800a91e:	2800      	cmp	r0, #0
 800a920:	f040 8298 	bne.w	800ae54 <_dtoa_r+0x95c>
 800a924:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800a928:	462a      	mov	r2, r5
 800a92a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800a92e:	f7f6 f8d5 	bl	8000adc <__aeabi_dcmplt>
 800a932:	bb38      	cbnz	r0, 800a984 <_dtoa_r+0x48c>
 800a934:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800a938:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800a93c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800a93e:	2b00      	cmp	r3, #0
 800a940:	f2c0 8157 	blt.w	800abf2 <_dtoa_r+0x6fa>
 800a944:	2f0e      	cmp	r7, #14
 800a946:	f300 8154 	bgt.w	800abf2 <_dtoa_r+0x6fa>
 800a94a:	4b4b      	ldr	r3, [pc, #300]	@ (800aa78 <_dtoa_r+0x580>)
 800a94c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a950:	ed93 7b00 	vldr	d7, [r3]
 800a954:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a956:	2b00      	cmp	r3, #0
 800a958:	ed8d 7b00 	vstr	d7, [sp]
 800a95c:	f280 80e5 	bge.w	800ab2a <_dtoa_r+0x632>
 800a960:	9b03      	ldr	r3, [sp, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	f300 80e1 	bgt.w	800ab2a <_dtoa_r+0x632>
 800a968:	d10c      	bne.n	800a984 <_dtoa_r+0x48c>
 800a96a:	4b48      	ldr	r3, [pc, #288]	@ (800aa8c <_dtoa_r+0x594>)
 800a96c:	2200      	movs	r2, #0
 800a96e:	ec51 0b17 	vmov	r0, r1, d7
 800a972:	f7f5 fe41 	bl	80005f8 <__aeabi_dmul>
 800a976:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800a97a:	f7f6 f8c3 	bl	8000b04 <__aeabi_dcmpge>
 800a97e:	2800      	cmp	r0, #0
 800a980:	f000 8266 	beq.w	800ae50 <_dtoa_r+0x958>
 800a984:	2400      	movs	r4, #0
 800a986:	4625      	mov	r5, r4
 800a988:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a98a:	4656      	mov	r6, sl
 800a98c:	ea6f 0803 	mvn.w	r8, r3
 800a990:	2700      	movs	r7, #0
 800a992:	4621      	mov	r1, r4
 800a994:	4648      	mov	r0, r9
 800a996:	f000 fcbf 	bl	800b318 <_Bfree>
 800a99a:	2d00      	cmp	r5, #0
 800a99c:	f000 80bd 	beq.w	800ab1a <_dtoa_r+0x622>
 800a9a0:	b12f      	cbz	r7, 800a9ae <_dtoa_r+0x4b6>
 800a9a2:	42af      	cmp	r7, r5
 800a9a4:	d003      	beq.n	800a9ae <_dtoa_r+0x4b6>
 800a9a6:	4639      	mov	r1, r7
 800a9a8:	4648      	mov	r0, r9
 800a9aa:	f000 fcb5 	bl	800b318 <_Bfree>
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4648      	mov	r0, r9
 800a9b2:	f000 fcb1 	bl	800b318 <_Bfree>
 800a9b6:	e0b0      	b.n	800ab1a <_dtoa_r+0x622>
 800a9b8:	07e2      	lsls	r2, r4, #31
 800a9ba:	d505      	bpl.n	800a9c8 <_dtoa_r+0x4d0>
 800a9bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a9c0:	f7f5 fe1a 	bl	80005f8 <__aeabi_dmul>
 800a9c4:	3601      	adds	r6, #1
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	1064      	asrs	r4, r4, #1
 800a9ca:	3508      	adds	r5, #8
 800a9cc:	e762      	b.n	800a894 <_dtoa_r+0x39c>
 800a9ce:	2602      	movs	r6, #2
 800a9d0:	e765      	b.n	800a89e <_dtoa_r+0x3a6>
 800a9d2:	9c03      	ldr	r4, [sp, #12]
 800a9d4:	46b8      	mov	r8, r7
 800a9d6:	e784      	b.n	800a8e2 <_dtoa_r+0x3ea>
 800a9d8:	4b27      	ldr	r3, [pc, #156]	@ (800aa78 <_dtoa_r+0x580>)
 800a9da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a9dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800a9e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a9e4:	4454      	add	r4, sl
 800a9e6:	2900      	cmp	r1, #0
 800a9e8:	d054      	beq.n	800aa94 <_dtoa_r+0x59c>
 800a9ea:	4929      	ldr	r1, [pc, #164]	@ (800aa90 <_dtoa_r+0x598>)
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	f7f5 ff2d 	bl	800084c <__aeabi_ddiv>
 800a9f2:	4633      	mov	r3, r6
 800a9f4:	462a      	mov	r2, r5
 800a9f6:	f7f5 fc47 	bl	8000288 <__aeabi_dsub>
 800a9fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800a9fe:	4656      	mov	r6, sl
 800aa00:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa04:	f7f6 f8a8 	bl	8000b58 <__aeabi_d2iz>
 800aa08:	4605      	mov	r5, r0
 800aa0a:	f7f5 fd8b 	bl	8000524 <__aeabi_i2d>
 800aa0e:	4602      	mov	r2, r0
 800aa10:	460b      	mov	r3, r1
 800aa12:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa16:	f7f5 fc37 	bl	8000288 <__aeabi_dsub>
 800aa1a:	3530      	adds	r5, #48	@ 0x30
 800aa1c:	4602      	mov	r2, r0
 800aa1e:	460b      	mov	r3, r1
 800aa20:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aa24:	f806 5b01 	strb.w	r5, [r6], #1
 800aa28:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa2c:	f7f6 f856 	bl	8000adc <__aeabi_dcmplt>
 800aa30:	2800      	cmp	r0, #0
 800aa32:	d172      	bne.n	800ab1a <_dtoa_r+0x622>
 800aa34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aa38:	4911      	ldr	r1, [pc, #68]	@ (800aa80 <_dtoa_r+0x588>)
 800aa3a:	2000      	movs	r0, #0
 800aa3c:	f7f5 fc24 	bl	8000288 <__aeabi_dsub>
 800aa40:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aa44:	f7f6 f84a 	bl	8000adc <__aeabi_dcmplt>
 800aa48:	2800      	cmp	r0, #0
 800aa4a:	f040 80b4 	bne.w	800abb6 <_dtoa_r+0x6be>
 800aa4e:	42a6      	cmp	r6, r4
 800aa50:	f43f af70 	beq.w	800a934 <_dtoa_r+0x43c>
 800aa54:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aa58:	4b0a      	ldr	r3, [pc, #40]	@ (800aa84 <_dtoa_r+0x58c>)
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	f7f5 fdcc 	bl	80005f8 <__aeabi_dmul>
 800aa60:	4b08      	ldr	r3, [pc, #32]	@ (800aa84 <_dtoa_r+0x58c>)
 800aa62:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aa66:	2200      	movs	r2, #0
 800aa68:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aa6c:	f7f5 fdc4 	bl	80005f8 <__aeabi_dmul>
 800aa70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800aa74:	e7c4      	b.n	800aa00 <_dtoa_r+0x508>
 800aa76:	bf00      	nop
 800aa78:	0800cb58 	.word	0x0800cb58
 800aa7c:	0800cb30 	.word	0x0800cb30
 800aa80:	3ff00000 	.word	0x3ff00000
 800aa84:	40240000 	.word	0x40240000
 800aa88:	401c0000 	.word	0x401c0000
 800aa8c:	40140000 	.word	0x40140000
 800aa90:	3fe00000 	.word	0x3fe00000
 800aa94:	4631      	mov	r1, r6
 800aa96:	4628      	mov	r0, r5
 800aa98:	f7f5 fdae 	bl	80005f8 <__aeabi_dmul>
 800aa9c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800aaa0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800aaa2:	4656      	mov	r6, sl
 800aaa4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaa8:	f7f6 f856 	bl	8000b58 <__aeabi_d2iz>
 800aaac:	4605      	mov	r5, r0
 800aaae:	f7f5 fd39 	bl	8000524 <__aeabi_i2d>
 800aab2:	4602      	mov	r2, r0
 800aab4:	460b      	mov	r3, r1
 800aab6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aaba:	f7f5 fbe5 	bl	8000288 <__aeabi_dsub>
 800aabe:	3530      	adds	r5, #48	@ 0x30
 800aac0:	f806 5b01 	strb.w	r5, [r6], #1
 800aac4:	4602      	mov	r2, r0
 800aac6:	460b      	mov	r3, r1
 800aac8:	42a6      	cmp	r6, r4
 800aaca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800aace:	f04f 0200 	mov.w	r2, #0
 800aad2:	d124      	bne.n	800ab1e <_dtoa_r+0x626>
 800aad4:	4baf      	ldr	r3, [pc, #700]	@ (800ad94 <_dtoa_r+0x89c>)
 800aad6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800aada:	f7f5 fbd7 	bl	800028c <__adddf3>
 800aade:	4602      	mov	r2, r0
 800aae0:	460b      	mov	r3, r1
 800aae2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800aae6:	f7f6 f817 	bl	8000b18 <__aeabi_dcmpgt>
 800aaea:	2800      	cmp	r0, #0
 800aaec:	d163      	bne.n	800abb6 <_dtoa_r+0x6be>
 800aaee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800aaf2:	49a8      	ldr	r1, [pc, #672]	@ (800ad94 <_dtoa_r+0x89c>)
 800aaf4:	2000      	movs	r0, #0
 800aaf6:	f7f5 fbc7 	bl	8000288 <__aeabi_dsub>
 800aafa:	4602      	mov	r2, r0
 800aafc:	460b      	mov	r3, r1
 800aafe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab02:	f7f5 ffeb 	bl	8000adc <__aeabi_dcmplt>
 800ab06:	2800      	cmp	r0, #0
 800ab08:	f43f af14 	beq.w	800a934 <_dtoa_r+0x43c>
 800ab0c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ab0e:	1e73      	subs	r3, r6, #1
 800ab10:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ab12:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ab16:	2b30      	cmp	r3, #48	@ 0x30
 800ab18:	d0f8      	beq.n	800ab0c <_dtoa_r+0x614>
 800ab1a:	4647      	mov	r7, r8
 800ab1c:	e03b      	b.n	800ab96 <_dtoa_r+0x69e>
 800ab1e:	4b9e      	ldr	r3, [pc, #632]	@ (800ad98 <_dtoa_r+0x8a0>)
 800ab20:	f7f5 fd6a 	bl	80005f8 <__aeabi_dmul>
 800ab24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab28:	e7bc      	b.n	800aaa4 <_dtoa_r+0x5ac>
 800ab2a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ab2e:	4656      	mov	r6, sl
 800ab30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab34:	4620      	mov	r0, r4
 800ab36:	4629      	mov	r1, r5
 800ab38:	f7f5 fe88 	bl	800084c <__aeabi_ddiv>
 800ab3c:	f7f6 f80c 	bl	8000b58 <__aeabi_d2iz>
 800ab40:	4680      	mov	r8, r0
 800ab42:	f7f5 fcef 	bl	8000524 <__aeabi_i2d>
 800ab46:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab4a:	f7f5 fd55 	bl	80005f8 <__aeabi_dmul>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	460b      	mov	r3, r1
 800ab52:	4620      	mov	r0, r4
 800ab54:	4629      	mov	r1, r5
 800ab56:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ab5a:	f7f5 fb95 	bl	8000288 <__aeabi_dsub>
 800ab5e:	f806 4b01 	strb.w	r4, [r6], #1
 800ab62:	9d03      	ldr	r5, [sp, #12]
 800ab64:	eba6 040a 	sub.w	r4, r6, sl
 800ab68:	42a5      	cmp	r5, r4
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	d133      	bne.n	800abd8 <_dtoa_r+0x6e0>
 800ab70:	f7f5 fb8c 	bl	800028c <__adddf3>
 800ab74:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab78:	4604      	mov	r4, r0
 800ab7a:	460d      	mov	r5, r1
 800ab7c:	f7f5 ffcc 	bl	8000b18 <__aeabi_dcmpgt>
 800ab80:	b9c0      	cbnz	r0, 800abb4 <_dtoa_r+0x6bc>
 800ab82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ab86:	4620      	mov	r0, r4
 800ab88:	4629      	mov	r1, r5
 800ab8a:	f7f5 ff9d 	bl	8000ac8 <__aeabi_dcmpeq>
 800ab8e:	b110      	cbz	r0, 800ab96 <_dtoa_r+0x69e>
 800ab90:	f018 0f01 	tst.w	r8, #1
 800ab94:	d10e      	bne.n	800abb4 <_dtoa_r+0x6bc>
 800ab96:	9902      	ldr	r1, [sp, #8]
 800ab98:	4648      	mov	r0, r9
 800ab9a:	f000 fbbd 	bl	800b318 <_Bfree>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	7033      	strb	r3, [r6, #0]
 800aba2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800aba4:	3701      	adds	r7, #1
 800aba6:	601f      	str	r7, [r3, #0]
 800aba8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800abaa:	2b00      	cmp	r3, #0
 800abac:	f000 824b 	beq.w	800b046 <_dtoa_r+0xb4e>
 800abb0:	601e      	str	r6, [r3, #0]
 800abb2:	e248      	b.n	800b046 <_dtoa_r+0xb4e>
 800abb4:	46b8      	mov	r8, r7
 800abb6:	4633      	mov	r3, r6
 800abb8:	461e      	mov	r6, r3
 800abba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abbe:	2a39      	cmp	r2, #57	@ 0x39
 800abc0:	d106      	bne.n	800abd0 <_dtoa_r+0x6d8>
 800abc2:	459a      	cmp	sl, r3
 800abc4:	d1f8      	bne.n	800abb8 <_dtoa_r+0x6c0>
 800abc6:	2230      	movs	r2, #48	@ 0x30
 800abc8:	f108 0801 	add.w	r8, r8, #1
 800abcc:	f88a 2000 	strb.w	r2, [sl]
 800abd0:	781a      	ldrb	r2, [r3, #0]
 800abd2:	3201      	adds	r2, #1
 800abd4:	701a      	strb	r2, [r3, #0]
 800abd6:	e7a0      	b.n	800ab1a <_dtoa_r+0x622>
 800abd8:	4b6f      	ldr	r3, [pc, #444]	@ (800ad98 <_dtoa_r+0x8a0>)
 800abda:	2200      	movs	r2, #0
 800abdc:	f7f5 fd0c 	bl	80005f8 <__aeabi_dmul>
 800abe0:	2200      	movs	r2, #0
 800abe2:	2300      	movs	r3, #0
 800abe4:	4604      	mov	r4, r0
 800abe6:	460d      	mov	r5, r1
 800abe8:	f7f5 ff6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800abec:	2800      	cmp	r0, #0
 800abee:	d09f      	beq.n	800ab30 <_dtoa_r+0x638>
 800abf0:	e7d1      	b.n	800ab96 <_dtoa_r+0x69e>
 800abf2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abf4:	2a00      	cmp	r2, #0
 800abf6:	f000 80ea 	beq.w	800adce <_dtoa_r+0x8d6>
 800abfa:	9a07      	ldr	r2, [sp, #28]
 800abfc:	2a01      	cmp	r2, #1
 800abfe:	f300 80cd 	bgt.w	800ad9c <_dtoa_r+0x8a4>
 800ac02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ac04:	2a00      	cmp	r2, #0
 800ac06:	f000 80c1 	beq.w	800ad8c <_dtoa_r+0x894>
 800ac0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ac0e:	9c08      	ldr	r4, [sp, #32]
 800ac10:	9e00      	ldr	r6, [sp, #0]
 800ac12:	9a00      	ldr	r2, [sp, #0]
 800ac14:	441a      	add	r2, r3
 800ac16:	9200      	str	r2, [sp, #0]
 800ac18:	9a06      	ldr	r2, [sp, #24]
 800ac1a:	2101      	movs	r1, #1
 800ac1c:	441a      	add	r2, r3
 800ac1e:	4648      	mov	r0, r9
 800ac20:	9206      	str	r2, [sp, #24]
 800ac22:	f000 fc2d 	bl	800b480 <__i2b>
 800ac26:	4605      	mov	r5, r0
 800ac28:	b166      	cbz	r6, 800ac44 <_dtoa_r+0x74c>
 800ac2a:	9b06      	ldr	r3, [sp, #24]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	dd09      	ble.n	800ac44 <_dtoa_r+0x74c>
 800ac30:	42b3      	cmp	r3, r6
 800ac32:	9a00      	ldr	r2, [sp, #0]
 800ac34:	bfa8      	it	ge
 800ac36:	4633      	movge	r3, r6
 800ac38:	1ad2      	subs	r2, r2, r3
 800ac3a:	9200      	str	r2, [sp, #0]
 800ac3c:	9a06      	ldr	r2, [sp, #24]
 800ac3e:	1af6      	subs	r6, r6, r3
 800ac40:	1ad3      	subs	r3, r2, r3
 800ac42:	9306      	str	r3, [sp, #24]
 800ac44:	9b08      	ldr	r3, [sp, #32]
 800ac46:	b30b      	cbz	r3, 800ac8c <_dtoa_r+0x794>
 800ac48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	f000 80c6 	beq.w	800addc <_dtoa_r+0x8e4>
 800ac50:	2c00      	cmp	r4, #0
 800ac52:	f000 80c0 	beq.w	800add6 <_dtoa_r+0x8de>
 800ac56:	4629      	mov	r1, r5
 800ac58:	4622      	mov	r2, r4
 800ac5a:	4648      	mov	r0, r9
 800ac5c:	f000 fcc8 	bl	800b5f0 <__pow5mult>
 800ac60:	9a02      	ldr	r2, [sp, #8]
 800ac62:	4601      	mov	r1, r0
 800ac64:	4605      	mov	r5, r0
 800ac66:	4648      	mov	r0, r9
 800ac68:	f000 fc20 	bl	800b4ac <__multiply>
 800ac6c:	9902      	ldr	r1, [sp, #8]
 800ac6e:	4680      	mov	r8, r0
 800ac70:	4648      	mov	r0, r9
 800ac72:	f000 fb51 	bl	800b318 <_Bfree>
 800ac76:	9b08      	ldr	r3, [sp, #32]
 800ac78:	1b1b      	subs	r3, r3, r4
 800ac7a:	9308      	str	r3, [sp, #32]
 800ac7c:	f000 80b1 	beq.w	800ade2 <_dtoa_r+0x8ea>
 800ac80:	9a08      	ldr	r2, [sp, #32]
 800ac82:	4641      	mov	r1, r8
 800ac84:	4648      	mov	r0, r9
 800ac86:	f000 fcb3 	bl	800b5f0 <__pow5mult>
 800ac8a:	9002      	str	r0, [sp, #8]
 800ac8c:	2101      	movs	r1, #1
 800ac8e:	4648      	mov	r0, r9
 800ac90:	f000 fbf6 	bl	800b480 <__i2b>
 800ac94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ac96:	4604      	mov	r4, r0
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	f000 81d8 	beq.w	800b04e <_dtoa_r+0xb56>
 800ac9e:	461a      	mov	r2, r3
 800aca0:	4601      	mov	r1, r0
 800aca2:	4648      	mov	r0, r9
 800aca4:	f000 fca4 	bl	800b5f0 <__pow5mult>
 800aca8:	9b07      	ldr	r3, [sp, #28]
 800acaa:	2b01      	cmp	r3, #1
 800acac:	4604      	mov	r4, r0
 800acae:	f300 809f 	bgt.w	800adf0 <_dtoa_r+0x8f8>
 800acb2:	9b04      	ldr	r3, [sp, #16]
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	f040 8097 	bne.w	800ade8 <_dtoa_r+0x8f0>
 800acba:	9b05      	ldr	r3, [sp, #20]
 800acbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	f040 8093 	bne.w	800adec <_dtoa_r+0x8f4>
 800acc6:	9b05      	ldr	r3, [sp, #20]
 800acc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800accc:	0d1b      	lsrs	r3, r3, #20
 800acce:	051b      	lsls	r3, r3, #20
 800acd0:	b133      	cbz	r3, 800ace0 <_dtoa_r+0x7e8>
 800acd2:	9b00      	ldr	r3, [sp, #0]
 800acd4:	3301      	adds	r3, #1
 800acd6:	9300      	str	r3, [sp, #0]
 800acd8:	9b06      	ldr	r3, [sp, #24]
 800acda:	3301      	adds	r3, #1
 800acdc:	9306      	str	r3, [sp, #24]
 800acde:	2301      	movs	r3, #1
 800ace0:	9308      	str	r3, [sp, #32]
 800ace2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	f000 81b8 	beq.w	800b05a <_dtoa_r+0xb62>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800acf0:	6918      	ldr	r0, [r3, #16]
 800acf2:	f000 fb79 	bl	800b3e8 <__hi0bits>
 800acf6:	f1c0 0020 	rsb	r0, r0, #32
 800acfa:	9b06      	ldr	r3, [sp, #24]
 800acfc:	4418      	add	r0, r3
 800acfe:	f010 001f 	ands.w	r0, r0, #31
 800ad02:	f000 8082 	beq.w	800ae0a <_dtoa_r+0x912>
 800ad06:	f1c0 0320 	rsb	r3, r0, #32
 800ad0a:	2b04      	cmp	r3, #4
 800ad0c:	dd73      	ble.n	800adf6 <_dtoa_r+0x8fe>
 800ad0e:	9b00      	ldr	r3, [sp, #0]
 800ad10:	f1c0 001c 	rsb	r0, r0, #28
 800ad14:	4403      	add	r3, r0
 800ad16:	9300      	str	r3, [sp, #0]
 800ad18:	9b06      	ldr	r3, [sp, #24]
 800ad1a:	4403      	add	r3, r0
 800ad1c:	4406      	add	r6, r0
 800ad1e:	9306      	str	r3, [sp, #24]
 800ad20:	9b00      	ldr	r3, [sp, #0]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	dd05      	ble.n	800ad32 <_dtoa_r+0x83a>
 800ad26:	9902      	ldr	r1, [sp, #8]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	4648      	mov	r0, r9
 800ad2c:	f000 fcba 	bl	800b6a4 <__lshift>
 800ad30:	9002      	str	r0, [sp, #8]
 800ad32:	9b06      	ldr	r3, [sp, #24]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	dd05      	ble.n	800ad44 <_dtoa_r+0x84c>
 800ad38:	4621      	mov	r1, r4
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	4648      	mov	r0, r9
 800ad3e:	f000 fcb1 	bl	800b6a4 <__lshift>
 800ad42:	4604      	mov	r4, r0
 800ad44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d061      	beq.n	800ae0e <_dtoa_r+0x916>
 800ad4a:	9802      	ldr	r0, [sp, #8]
 800ad4c:	4621      	mov	r1, r4
 800ad4e:	f000 fd15 	bl	800b77c <__mcmp>
 800ad52:	2800      	cmp	r0, #0
 800ad54:	da5b      	bge.n	800ae0e <_dtoa_r+0x916>
 800ad56:	2300      	movs	r3, #0
 800ad58:	9902      	ldr	r1, [sp, #8]
 800ad5a:	220a      	movs	r2, #10
 800ad5c:	4648      	mov	r0, r9
 800ad5e:	f000 fafd 	bl	800b35c <__multadd>
 800ad62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad64:	9002      	str	r0, [sp, #8]
 800ad66:	f107 38ff 	add.w	r8, r7, #4294967295
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	f000 8177 	beq.w	800b05e <_dtoa_r+0xb66>
 800ad70:	4629      	mov	r1, r5
 800ad72:	2300      	movs	r3, #0
 800ad74:	220a      	movs	r2, #10
 800ad76:	4648      	mov	r0, r9
 800ad78:	f000 faf0 	bl	800b35c <__multadd>
 800ad7c:	f1bb 0f00 	cmp.w	fp, #0
 800ad80:	4605      	mov	r5, r0
 800ad82:	dc6f      	bgt.n	800ae64 <_dtoa_r+0x96c>
 800ad84:	9b07      	ldr	r3, [sp, #28]
 800ad86:	2b02      	cmp	r3, #2
 800ad88:	dc49      	bgt.n	800ae1e <_dtoa_r+0x926>
 800ad8a:	e06b      	b.n	800ae64 <_dtoa_r+0x96c>
 800ad8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ad8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ad92:	e73c      	b.n	800ac0e <_dtoa_r+0x716>
 800ad94:	3fe00000 	.word	0x3fe00000
 800ad98:	40240000 	.word	0x40240000
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	1e5c      	subs	r4, r3, #1
 800ada0:	9b08      	ldr	r3, [sp, #32]
 800ada2:	42a3      	cmp	r3, r4
 800ada4:	db09      	blt.n	800adba <_dtoa_r+0x8c2>
 800ada6:	1b1c      	subs	r4, r3, r4
 800ada8:	9b03      	ldr	r3, [sp, #12]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f6bf af30 	bge.w	800ac10 <_dtoa_r+0x718>
 800adb0:	9b00      	ldr	r3, [sp, #0]
 800adb2:	9a03      	ldr	r2, [sp, #12]
 800adb4:	1a9e      	subs	r6, r3, r2
 800adb6:	2300      	movs	r3, #0
 800adb8:	e72b      	b.n	800ac12 <_dtoa_r+0x71a>
 800adba:	9b08      	ldr	r3, [sp, #32]
 800adbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800adbe:	9408      	str	r4, [sp, #32]
 800adc0:	1ae3      	subs	r3, r4, r3
 800adc2:	441a      	add	r2, r3
 800adc4:	9e00      	ldr	r6, [sp, #0]
 800adc6:	9b03      	ldr	r3, [sp, #12]
 800adc8:	920d      	str	r2, [sp, #52]	@ 0x34
 800adca:	2400      	movs	r4, #0
 800adcc:	e721      	b.n	800ac12 <_dtoa_r+0x71a>
 800adce:	9c08      	ldr	r4, [sp, #32]
 800add0:	9e00      	ldr	r6, [sp, #0]
 800add2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800add4:	e728      	b.n	800ac28 <_dtoa_r+0x730>
 800add6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800adda:	e751      	b.n	800ac80 <_dtoa_r+0x788>
 800addc:	9a08      	ldr	r2, [sp, #32]
 800adde:	9902      	ldr	r1, [sp, #8]
 800ade0:	e750      	b.n	800ac84 <_dtoa_r+0x78c>
 800ade2:	f8cd 8008 	str.w	r8, [sp, #8]
 800ade6:	e751      	b.n	800ac8c <_dtoa_r+0x794>
 800ade8:	2300      	movs	r3, #0
 800adea:	e779      	b.n	800ace0 <_dtoa_r+0x7e8>
 800adec:	9b04      	ldr	r3, [sp, #16]
 800adee:	e777      	b.n	800ace0 <_dtoa_r+0x7e8>
 800adf0:	2300      	movs	r3, #0
 800adf2:	9308      	str	r3, [sp, #32]
 800adf4:	e779      	b.n	800acea <_dtoa_r+0x7f2>
 800adf6:	d093      	beq.n	800ad20 <_dtoa_r+0x828>
 800adf8:	9a00      	ldr	r2, [sp, #0]
 800adfa:	331c      	adds	r3, #28
 800adfc:	441a      	add	r2, r3
 800adfe:	9200      	str	r2, [sp, #0]
 800ae00:	9a06      	ldr	r2, [sp, #24]
 800ae02:	441a      	add	r2, r3
 800ae04:	441e      	add	r6, r3
 800ae06:	9206      	str	r2, [sp, #24]
 800ae08:	e78a      	b.n	800ad20 <_dtoa_r+0x828>
 800ae0a:	4603      	mov	r3, r0
 800ae0c:	e7f4      	b.n	800adf8 <_dtoa_r+0x900>
 800ae0e:	9b03      	ldr	r3, [sp, #12]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	46b8      	mov	r8, r7
 800ae14:	dc20      	bgt.n	800ae58 <_dtoa_r+0x960>
 800ae16:	469b      	mov	fp, r3
 800ae18:	9b07      	ldr	r3, [sp, #28]
 800ae1a:	2b02      	cmp	r3, #2
 800ae1c:	dd1e      	ble.n	800ae5c <_dtoa_r+0x964>
 800ae1e:	f1bb 0f00 	cmp.w	fp, #0
 800ae22:	f47f adb1 	bne.w	800a988 <_dtoa_r+0x490>
 800ae26:	4621      	mov	r1, r4
 800ae28:	465b      	mov	r3, fp
 800ae2a:	2205      	movs	r2, #5
 800ae2c:	4648      	mov	r0, r9
 800ae2e:	f000 fa95 	bl	800b35c <__multadd>
 800ae32:	4601      	mov	r1, r0
 800ae34:	4604      	mov	r4, r0
 800ae36:	9802      	ldr	r0, [sp, #8]
 800ae38:	f000 fca0 	bl	800b77c <__mcmp>
 800ae3c:	2800      	cmp	r0, #0
 800ae3e:	f77f ada3 	ble.w	800a988 <_dtoa_r+0x490>
 800ae42:	4656      	mov	r6, sl
 800ae44:	2331      	movs	r3, #49	@ 0x31
 800ae46:	f806 3b01 	strb.w	r3, [r6], #1
 800ae4a:	f108 0801 	add.w	r8, r8, #1
 800ae4e:	e59f      	b.n	800a990 <_dtoa_r+0x498>
 800ae50:	9c03      	ldr	r4, [sp, #12]
 800ae52:	46b8      	mov	r8, r7
 800ae54:	4625      	mov	r5, r4
 800ae56:	e7f4      	b.n	800ae42 <_dtoa_r+0x94a>
 800ae58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ae5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	f000 8101 	beq.w	800b066 <_dtoa_r+0xb6e>
 800ae64:	2e00      	cmp	r6, #0
 800ae66:	dd05      	ble.n	800ae74 <_dtoa_r+0x97c>
 800ae68:	4629      	mov	r1, r5
 800ae6a:	4632      	mov	r2, r6
 800ae6c:	4648      	mov	r0, r9
 800ae6e:	f000 fc19 	bl	800b6a4 <__lshift>
 800ae72:	4605      	mov	r5, r0
 800ae74:	9b08      	ldr	r3, [sp, #32]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d05c      	beq.n	800af34 <_dtoa_r+0xa3c>
 800ae7a:	6869      	ldr	r1, [r5, #4]
 800ae7c:	4648      	mov	r0, r9
 800ae7e:	f000 fa0b 	bl	800b298 <_Balloc>
 800ae82:	4606      	mov	r6, r0
 800ae84:	b928      	cbnz	r0, 800ae92 <_dtoa_r+0x99a>
 800ae86:	4b82      	ldr	r3, [pc, #520]	@ (800b090 <_dtoa_r+0xb98>)
 800ae88:	4602      	mov	r2, r0
 800ae8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ae8e:	f7ff bb4a 	b.w	800a526 <_dtoa_r+0x2e>
 800ae92:	692a      	ldr	r2, [r5, #16]
 800ae94:	3202      	adds	r2, #2
 800ae96:	0092      	lsls	r2, r2, #2
 800ae98:	f105 010c 	add.w	r1, r5, #12
 800ae9c:	300c      	adds	r0, #12
 800ae9e:	f001 f827 	bl	800bef0 <memcpy>
 800aea2:	2201      	movs	r2, #1
 800aea4:	4631      	mov	r1, r6
 800aea6:	4648      	mov	r0, r9
 800aea8:	f000 fbfc 	bl	800b6a4 <__lshift>
 800aeac:	f10a 0301 	add.w	r3, sl, #1
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	eb0a 030b 	add.w	r3, sl, fp
 800aeb6:	9308      	str	r3, [sp, #32]
 800aeb8:	9b04      	ldr	r3, [sp, #16]
 800aeba:	f003 0301 	and.w	r3, r3, #1
 800aebe:	462f      	mov	r7, r5
 800aec0:	9306      	str	r3, [sp, #24]
 800aec2:	4605      	mov	r5, r0
 800aec4:	9b00      	ldr	r3, [sp, #0]
 800aec6:	9802      	ldr	r0, [sp, #8]
 800aec8:	4621      	mov	r1, r4
 800aeca:	f103 3bff 	add.w	fp, r3, #4294967295
 800aece:	f7ff fa88 	bl	800a3e2 <quorem>
 800aed2:	4603      	mov	r3, r0
 800aed4:	3330      	adds	r3, #48	@ 0x30
 800aed6:	9003      	str	r0, [sp, #12]
 800aed8:	4639      	mov	r1, r7
 800aeda:	9802      	ldr	r0, [sp, #8]
 800aedc:	9309      	str	r3, [sp, #36]	@ 0x24
 800aede:	f000 fc4d 	bl	800b77c <__mcmp>
 800aee2:	462a      	mov	r2, r5
 800aee4:	9004      	str	r0, [sp, #16]
 800aee6:	4621      	mov	r1, r4
 800aee8:	4648      	mov	r0, r9
 800aeea:	f000 fc63 	bl	800b7b4 <__mdiff>
 800aeee:	68c2      	ldr	r2, [r0, #12]
 800aef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aef2:	4606      	mov	r6, r0
 800aef4:	bb02      	cbnz	r2, 800af38 <_dtoa_r+0xa40>
 800aef6:	4601      	mov	r1, r0
 800aef8:	9802      	ldr	r0, [sp, #8]
 800aefa:	f000 fc3f 	bl	800b77c <__mcmp>
 800aefe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af00:	4602      	mov	r2, r0
 800af02:	4631      	mov	r1, r6
 800af04:	4648      	mov	r0, r9
 800af06:	920c      	str	r2, [sp, #48]	@ 0x30
 800af08:	9309      	str	r3, [sp, #36]	@ 0x24
 800af0a:	f000 fa05 	bl	800b318 <_Bfree>
 800af0e:	9b07      	ldr	r3, [sp, #28]
 800af10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800af12:	9e00      	ldr	r6, [sp, #0]
 800af14:	ea42 0103 	orr.w	r1, r2, r3
 800af18:	9b06      	ldr	r3, [sp, #24]
 800af1a:	4319      	orrs	r1, r3
 800af1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af1e:	d10d      	bne.n	800af3c <_dtoa_r+0xa44>
 800af20:	2b39      	cmp	r3, #57	@ 0x39
 800af22:	d027      	beq.n	800af74 <_dtoa_r+0xa7c>
 800af24:	9a04      	ldr	r2, [sp, #16]
 800af26:	2a00      	cmp	r2, #0
 800af28:	dd01      	ble.n	800af2e <_dtoa_r+0xa36>
 800af2a:	9b03      	ldr	r3, [sp, #12]
 800af2c:	3331      	adds	r3, #49	@ 0x31
 800af2e:	f88b 3000 	strb.w	r3, [fp]
 800af32:	e52e      	b.n	800a992 <_dtoa_r+0x49a>
 800af34:	4628      	mov	r0, r5
 800af36:	e7b9      	b.n	800aeac <_dtoa_r+0x9b4>
 800af38:	2201      	movs	r2, #1
 800af3a:	e7e2      	b.n	800af02 <_dtoa_r+0xa0a>
 800af3c:	9904      	ldr	r1, [sp, #16]
 800af3e:	2900      	cmp	r1, #0
 800af40:	db04      	blt.n	800af4c <_dtoa_r+0xa54>
 800af42:	9807      	ldr	r0, [sp, #28]
 800af44:	4301      	orrs	r1, r0
 800af46:	9806      	ldr	r0, [sp, #24]
 800af48:	4301      	orrs	r1, r0
 800af4a:	d120      	bne.n	800af8e <_dtoa_r+0xa96>
 800af4c:	2a00      	cmp	r2, #0
 800af4e:	ddee      	ble.n	800af2e <_dtoa_r+0xa36>
 800af50:	9902      	ldr	r1, [sp, #8]
 800af52:	9300      	str	r3, [sp, #0]
 800af54:	2201      	movs	r2, #1
 800af56:	4648      	mov	r0, r9
 800af58:	f000 fba4 	bl	800b6a4 <__lshift>
 800af5c:	4621      	mov	r1, r4
 800af5e:	9002      	str	r0, [sp, #8]
 800af60:	f000 fc0c 	bl	800b77c <__mcmp>
 800af64:	2800      	cmp	r0, #0
 800af66:	9b00      	ldr	r3, [sp, #0]
 800af68:	dc02      	bgt.n	800af70 <_dtoa_r+0xa78>
 800af6a:	d1e0      	bne.n	800af2e <_dtoa_r+0xa36>
 800af6c:	07da      	lsls	r2, r3, #31
 800af6e:	d5de      	bpl.n	800af2e <_dtoa_r+0xa36>
 800af70:	2b39      	cmp	r3, #57	@ 0x39
 800af72:	d1da      	bne.n	800af2a <_dtoa_r+0xa32>
 800af74:	2339      	movs	r3, #57	@ 0x39
 800af76:	f88b 3000 	strb.w	r3, [fp]
 800af7a:	4633      	mov	r3, r6
 800af7c:	461e      	mov	r6, r3
 800af7e:	3b01      	subs	r3, #1
 800af80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800af84:	2a39      	cmp	r2, #57	@ 0x39
 800af86:	d04e      	beq.n	800b026 <_dtoa_r+0xb2e>
 800af88:	3201      	adds	r2, #1
 800af8a:	701a      	strb	r2, [r3, #0]
 800af8c:	e501      	b.n	800a992 <_dtoa_r+0x49a>
 800af8e:	2a00      	cmp	r2, #0
 800af90:	dd03      	ble.n	800af9a <_dtoa_r+0xaa2>
 800af92:	2b39      	cmp	r3, #57	@ 0x39
 800af94:	d0ee      	beq.n	800af74 <_dtoa_r+0xa7c>
 800af96:	3301      	adds	r3, #1
 800af98:	e7c9      	b.n	800af2e <_dtoa_r+0xa36>
 800af9a:	9a00      	ldr	r2, [sp, #0]
 800af9c:	9908      	ldr	r1, [sp, #32]
 800af9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800afa2:	428a      	cmp	r2, r1
 800afa4:	d028      	beq.n	800aff8 <_dtoa_r+0xb00>
 800afa6:	9902      	ldr	r1, [sp, #8]
 800afa8:	2300      	movs	r3, #0
 800afaa:	220a      	movs	r2, #10
 800afac:	4648      	mov	r0, r9
 800afae:	f000 f9d5 	bl	800b35c <__multadd>
 800afb2:	42af      	cmp	r7, r5
 800afb4:	9002      	str	r0, [sp, #8]
 800afb6:	f04f 0300 	mov.w	r3, #0
 800afba:	f04f 020a 	mov.w	r2, #10
 800afbe:	4639      	mov	r1, r7
 800afc0:	4648      	mov	r0, r9
 800afc2:	d107      	bne.n	800afd4 <_dtoa_r+0xadc>
 800afc4:	f000 f9ca 	bl	800b35c <__multadd>
 800afc8:	4607      	mov	r7, r0
 800afca:	4605      	mov	r5, r0
 800afcc:	9b00      	ldr	r3, [sp, #0]
 800afce:	3301      	adds	r3, #1
 800afd0:	9300      	str	r3, [sp, #0]
 800afd2:	e777      	b.n	800aec4 <_dtoa_r+0x9cc>
 800afd4:	f000 f9c2 	bl	800b35c <__multadd>
 800afd8:	4629      	mov	r1, r5
 800afda:	4607      	mov	r7, r0
 800afdc:	2300      	movs	r3, #0
 800afde:	220a      	movs	r2, #10
 800afe0:	4648      	mov	r0, r9
 800afe2:	f000 f9bb 	bl	800b35c <__multadd>
 800afe6:	4605      	mov	r5, r0
 800afe8:	e7f0      	b.n	800afcc <_dtoa_r+0xad4>
 800afea:	f1bb 0f00 	cmp.w	fp, #0
 800afee:	bfcc      	ite	gt
 800aff0:	465e      	movgt	r6, fp
 800aff2:	2601      	movle	r6, #1
 800aff4:	4456      	add	r6, sl
 800aff6:	2700      	movs	r7, #0
 800aff8:	9902      	ldr	r1, [sp, #8]
 800affa:	9300      	str	r3, [sp, #0]
 800affc:	2201      	movs	r2, #1
 800affe:	4648      	mov	r0, r9
 800b000:	f000 fb50 	bl	800b6a4 <__lshift>
 800b004:	4621      	mov	r1, r4
 800b006:	9002      	str	r0, [sp, #8]
 800b008:	f000 fbb8 	bl	800b77c <__mcmp>
 800b00c:	2800      	cmp	r0, #0
 800b00e:	dcb4      	bgt.n	800af7a <_dtoa_r+0xa82>
 800b010:	d102      	bne.n	800b018 <_dtoa_r+0xb20>
 800b012:	9b00      	ldr	r3, [sp, #0]
 800b014:	07db      	lsls	r3, r3, #31
 800b016:	d4b0      	bmi.n	800af7a <_dtoa_r+0xa82>
 800b018:	4633      	mov	r3, r6
 800b01a:	461e      	mov	r6, r3
 800b01c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b020:	2a30      	cmp	r2, #48	@ 0x30
 800b022:	d0fa      	beq.n	800b01a <_dtoa_r+0xb22>
 800b024:	e4b5      	b.n	800a992 <_dtoa_r+0x49a>
 800b026:	459a      	cmp	sl, r3
 800b028:	d1a8      	bne.n	800af7c <_dtoa_r+0xa84>
 800b02a:	2331      	movs	r3, #49	@ 0x31
 800b02c:	f108 0801 	add.w	r8, r8, #1
 800b030:	f88a 3000 	strb.w	r3, [sl]
 800b034:	e4ad      	b.n	800a992 <_dtoa_r+0x49a>
 800b036:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800b038:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800b094 <_dtoa_r+0xb9c>
 800b03c:	b11b      	cbz	r3, 800b046 <_dtoa_r+0xb4e>
 800b03e:	f10a 0308 	add.w	r3, sl, #8
 800b042:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800b044:	6013      	str	r3, [r2, #0]
 800b046:	4650      	mov	r0, sl
 800b048:	b017      	add	sp, #92	@ 0x5c
 800b04a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b04e:	9b07      	ldr	r3, [sp, #28]
 800b050:	2b01      	cmp	r3, #1
 800b052:	f77f ae2e 	ble.w	800acb2 <_dtoa_r+0x7ba>
 800b056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b058:	9308      	str	r3, [sp, #32]
 800b05a:	2001      	movs	r0, #1
 800b05c:	e64d      	b.n	800acfa <_dtoa_r+0x802>
 800b05e:	f1bb 0f00 	cmp.w	fp, #0
 800b062:	f77f aed9 	ble.w	800ae18 <_dtoa_r+0x920>
 800b066:	4656      	mov	r6, sl
 800b068:	9802      	ldr	r0, [sp, #8]
 800b06a:	4621      	mov	r1, r4
 800b06c:	f7ff f9b9 	bl	800a3e2 <quorem>
 800b070:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800b074:	f806 3b01 	strb.w	r3, [r6], #1
 800b078:	eba6 020a 	sub.w	r2, r6, sl
 800b07c:	4593      	cmp	fp, r2
 800b07e:	ddb4      	ble.n	800afea <_dtoa_r+0xaf2>
 800b080:	9902      	ldr	r1, [sp, #8]
 800b082:	2300      	movs	r3, #0
 800b084:	220a      	movs	r2, #10
 800b086:	4648      	mov	r0, r9
 800b088:	f000 f968 	bl	800b35c <__multadd>
 800b08c:	9002      	str	r0, [sp, #8]
 800b08e:	e7eb      	b.n	800b068 <_dtoa_r+0xb70>
 800b090:	0800ca60 	.word	0x0800ca60
 800b094:	0800c9e4 	.word	0x0800c9e4

0800b098 <_free_r>:
 800b098:	b538      	push	{r3, r4, r5, lr}
 800b09a:	4605      	mov	r5, r0
 800b09c:	2900      	cmp	r1, #0
 800b09e:	d041      	beq.n	800b124 <_free_r+0x8c>
 800b0a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0a4:	1f0c      	subs	r4, r1, #4
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bfb8      	it	lt
 800b0aa:	18e4      	addlt	r4, r4, r3
 800b0ac:	f000 f8e8 	bl	800b280 <__malloc_lock>
 800b0b0:	4a1d      	ldr	r2, [pc, #116]	@ (800b128 <_free_r+0x90>)
 800b0b2:	6813      	ldr	r3, [r2, #0]
 800b0b4:	b933      	cbnz	r3, 800b0c4 <_free_r+0x2c>
 800b0b6:	6063      	str	r3, [r4, #4]
 800b0b8:	6014      	str	r4, [r2, #0]
 800b0ba:	4628      	mov	r0, r5
 800b0bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b0c0:	f000 b8e4 	b.w	800b28c <__malloc_unlock>
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	d908      	bls.n	800b0da <_free_r+0x42>
 800b0c8:	6820      	ldr	r0, [r4, #0]
 800b0ca:	1821      	adds	r1, r4, r0
 800b0cc:	428b      	cmp	r3, r1
 800b0ce:	bf01      	itttt	eq
 800b0d0:	6819      	ldreq	r1, [r3, #0]
 800b0d2:	685b      	ldreq	r3, [r3, #4]
 800b0d4:	1809      	addeq	r1, r1, r0
 800b0d6:	6021      	streq	r1, [r4, #0]
 800b0d8:	e7ed      	b.n	800b0b6 <_free_r+0x1e>
 800b0da:	461a      	mov	r2, r3
 800b0dc:	685b      	ldr	r3, [r3, #4]
 800b0de:	b10b      	cbz	r3, 800b0e4 <_free_r+0x4c>
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	d9fa      	bls.n	800b0da <_free_r+0x42>
 800b0e4:	6811      	ldr	r1, [r2, #0]
 800b0e6:	1850      	adds	r0, r2, r1
 800b0e8:	42a0      	cmp	r0, r4
 800b0ea:	d10b      	bne.n	800b104 <_free_r+0x6c>
 800b0ec:	6820      	ldr	r0, [r4, #0]
 800b0ee:	4401      	add	r1, r0
 800b0f0:	1850      	adds	r0, r2, r1
 800b0f2:	4283      	cmp	r3, r0
 800b0f4:	6011      	str	r1, [r2, #0]
 800b0f6:	d1e0      	bne.n	800b0ba <_free_r+0x22>
 800b0f8:	6818      	ldr	r0, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	6053      	str	r3, [r2, #4]
 800b0fe:	4408      	add	r0, r1
 800b100:	6010      	str	r0, [r2, #0]
 800b102:	e7da      	b.n	800b0ba <_free_r+0x22>
 800b104:	d902      	bls.n	800b10c <_free_r+0x74>
 800b106:	230c      	movs	r3, #12
 800b108:	602b      	str	r3, [r5, #0]
 800b10a:	e7d6      	b.n	800b0ba <_free_r+0x22>
 800b10c:	6820      	ldr	r0, [r4, #0]
 800b10e:	1821      	adds	r1, r4, r0
 800b110:	428b      	cmp	r3, r1
 800b112:	bf04      	itt	eq
 800b114:	6819      	ldreq	r1, [r3, #0]
 800b116:	685b      	ldreq	r3, [r3, #4]
 800b118:	6063      	str	r3, [r4, #4]
 800b11a:	bf04      	itt	eq
 800b11c:	1809      	addeq	r1, r1, r0
 800b11e:	6021      	streq	r1, [r4, #0]
 800b120:	6054      	str	r4, [r2, #4]
 800b122:	e7ca      	b.n	800b0ba <_free_r+0x22>
 800b124:	bd38      	pop	{r3, r4, r5, pc}
 800b126:	bf00      	nop
 800b128:	200027ec 	.word	0x200027ec

0800b12c <malloc>:
 800b12c:	4b02      	ldr	r3, [pc, #8]	@ (800b138 <malloc+0xc>)
 800b12e:	4601      	mov	r1, r0
 800b130:	6818      	ldr	r0, [r3, #0]
 800b132:	f000 b825 	b.w	800b180 <_malloc_r>
 800b136:	bf00      	nop
 800b138:	2000002c 	.word	0x2000002c

0800b13c <sbrk_aligned>:
 800b13c:	b570      	push	{r4, r5, r6, lr}
 800b13e:	4e0f      	ldr	r6, [pc, #60]	@ (800b17c <sbrk_aligned+0x40>)
 800b140:	460c      	mov	r4, r1
 800b142:	6831      	ldr	r1, [r6, #0]
 800b144:	4605      	mov	r5, r0
 800b146:	b911      	cbnz	r1, 800b14e <sbrk_aligned+0x12>
 800b148:	f000 fec2 	bl	800bed0 <_sbrk_r>
 800b14c:	6030      	str	r0, [r6, #0]
 800b14e:	4621      	mov	r1, r4
 800b150:	4628      	mov	r0, r5
 800b152:	f000 febd 	bl	800bed0 <_sbrk_r>
 800b156:	1c43      	adds	r3, r0, #1
 800b158:	d103      	bne.n	800b162 <sbrk_aligned+0x26>
 800b15a:	f04f 34ff 	mov.w	r4, #4294967295
 800b15e:	4620      	mov	r0, r4
 800b160:	bd70      	pop	{r4, r5, r6, pc}
 800b162:	1cc4      	adds	r4, r0, #3
 800b164:	f024 0403 	bic.w	r4, r4, #3
 800b168:	42a0      	cmp	r0, r4
 800b16a:	d0f8      	beq.n	800b15e <sbrk_aligned+0x22>
 800b16c:	1a21      	subs	r1, r4, r0
 800b16e:	4628      	mov	r0, r5
 800b170:	f000 feae 	bl	800bed0 <_sbrk_r>
 800b174:	3001      	adds	r0, #1
 800b176:	d1f2      	bne.n	800b15e <sbrk_aligned+0x22>
 800b178:	e7ef      	b.n	800b15a <sbrk_aligned+0x1e>
 800b17a:	bf00      	nop
 800b17c:	200027e8 	.word	0x200027e8

0800b180 <_malloc_r>:
 800b180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b184:	1ccd      	adds	r5, r1, #3
 800b186:	f025 0503 	bic.w	r5, r5, #3
 800b18a:	3508      	adds	r5, #8
 800b18c:	2d0c      	cmp	r5, #12
 800b18e:	bf38      	it	cc
 800b190:	250c      	movcc	r5, #12
 800b192:	2d00      	cmp	r5, #0
 800b194:	4606      	mov	r6, r0
 800b196:	db01      	blt.n	800b19c <_malloc_r+0x1c>
 800b198:	42a9      	cmp	r1, r5
 800b19a:	d904      	bls.n	800b1a6 <_malloc_r+0x26>
 800b19c:	230c      	movs	r3, #12
 800b19e:	6033      	str	r3, [r6, #0]
 800b1a0:	2000      	movs	r0, #0
 800b1a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1a6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b27c <_malloc_r+0xfc>
 800b1aa:	f000 f869 	bl	800b280 <__malloc_lock>
 800b1ae:	f8d8 3000 	ldr.w	r3, [r8]
 800b1b2:	461c      	mov	r4, r3
 800b1b4:	bb44      	cbnz	r4, 800b208 <_malloc_r+0x88>
 800b1b6:	4629      	mov	r1, r5
 800b1b8:	4630      	mov	r0, r6
 800b1ba:	f7ff ffbf 	bl	800b13c <sbrk_aligned>
 800b1be:	1c43      	adds	r3, r0, #1
 800b1c0:	4604      	mov	r4, r0
 800b1c2:	d158      	bne.n	800b276 <_malloc_r+0xf6>
 800b1c4:	f8d8 4000 	ldr.w	r4, [r8]
 800b1c8:	4627      	mov	r7, r4
 800b1ca:	2f00      	cmp	r7, #0
 800b1cc:	d143      	bne.n	800b256 <_malloc_r+0xd6>
 800b1ce:	2c00      	cmp	r4, #0
 800b1d0:	d04b      	beq.n	800b26a <_malloc_r+0xea>
 800b1d2:	6823      	ldr	r3, [r4, #0]
 800b1d4:	4639      	mov	r1, r7
 800b1d6:	4630      	mov	r0, r6
 800b1d8:	eb04 0903 	add.w	r9, r4, r3
 800b1dc:	f000 fe78 	bl	800bed0 <_sbrk_r>
 800b1e0:	4581      	cmp	r9, r0
 800b1e2:	d142      	bne.n	800b26a <_malloc_r+0xea>
 800b1e4:	6821      	ldr	r1, [r4, #0]
 800b1e6:	1a6d      	subs	r5, r5, r1
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	4630      	mov	r0, r6
 800b1ec:	f7ff ffa6 	bl	800b13c <sbrk_aligned>
 800b1f0:	3001      	adds	r0, #1
 800b1f2:	d03a      	beq.n	800b26a <_malloc_r+0xea>
 800b1f4:	6823      	ldr	r3, [r4, #0]
 800b1f6:	442b      	add	r3, r5
 800b1f8:	6023      	str	r3, [r4, #0]
 800b1fa:	f8d8 3000 	ldr.w	r3, [r8]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	bb62      	cbnz	r2, 800b25c <_malloc_r+0xdc>
 800b202:	f8c8 7000 	str.w	r7, [r8]
 800b206:	e00f      	b.n	800b228 <_malloc_r+0xa8>
 800b208:	6822      	ldr	r2, [r4, #0]
 800b20a:	1b52      	subs	r2, r2, r5
 800b20c:	d420      	bmi.n	800b250 <_malloc_r+0xd0>
 800b20e:	2a0b      	cmp	r2, #11
 800b210:	d917      	bls.n	800b242 <_malloc_r+0xc2>
 800b212:	1961      	adds	r1, r4, r5
 800b214:	42a3      	cmp	r3, r4
 800b216:	6025      	str	r5, [r4, #0]
 800b218:	bf18      	it	ne
 800b21a:	6059      	strne	r1, [r3, #4]
 800b21c:	6863      	ldr	r3, [r4, #4]
 800b21e:	bf08      	it	eq
 800b220:	f8c8 1000 	streq.w	r1, [r8]
 800b224:	5162      	str	r2, [r4, r5]
 800b226:	604b      	str	r3, [r1, #4]
 800b228:	4630      	mov	r0, r6
 800b22a:	f000 f82f 	bl	800b28c <__malloc_unlock>
 800b22e:	f104 000b 	add.w	r0, r4, #11
 800b232:	1d23      	adds	r3, r4, #4
 800b234:	f020 0007 	bic.w	r0, r0, #7
 800b238:	1ac2      	subs	r2, r0, r3
 800b23a:	bf1c      	itt	ne
 800b23c:	1a1b      	subne	r3, r3, r0
 800b23e:	50a3      	strne	r3, [r4, r2]
 800b240:	e7af      	b.n	800b1a2 <_malloc_r+0x22>
 800b242:	6862      	ldr	r2, [r4, #4]
 800b244:	42a3      	cmp	r3, r4
 800b246:	bf0c      	ite	eq
 800b248:	f8c8 2000 	streq.w	r2, [r8]
 800b24c:	605a      	strne	r2, [r3, #4]
 800b24e:	e7eb      	b.n	800b228 <_malloc_r+0xa8>
 800b250:	4623      	mov	r3, r4
 800b252:	6864      	ldr	r4, [r4, #4]
 800b254:	e7ae      	b.n	800b1b4 <_malloc_r+0x34>
 800b256:	463c      	mov	r4, r7
 800b258:	687f      	ldr	r7, [r7, #4]
 800b25a:	e7b6      	b.n	800b1ca <_malloc_r+0x4a>
 800b25c:	461a      	mov	r2, r3
 800b25e:	685b      	ldr	r3, [r3, #4]
 800b260:	42a3      	cmp	r3, r4
 800b262:	d1fb      	bne.n	800b25c <_malloc_r+0xdc>
 800b264:	2300      	movs	r3, #0
 800b266:	6053      	str	r3, [r2, #4]
 800b268:	e7de      	b.n	800b228 <_malloc_r+0xa8>
 800b26a:	230c      	movs	r3, #12
 800b26c:	6033      	str	r3, [r6, #0]
 800b26e:	4630      	mov	r0, r6
 800b270:	f000 f80c 	bl	800b28c <__malloc_unlock>
 800b274:	e794      	b.n	800b1a0 <_malloc_r+0x20>
 800b276:	6005      	str	r5, [r0, #0]
 800b278:	e7d6      	b.n	800b228 <_malloc_r+0xa8>
 800b27a:	bf00      	nop
 800b27c:	200027ec 	.word	0x200027ec

0800b280 <__malloc_lock>:
 800b280:	4801      	ldr	r0, [pc, #4]	@ (800b288 <__malloc_lock+0x8>)
 800b282:	f7ff b8ac 	b.w	800a3de <__retarget_lock_acquire_recursive>
 800b286:	bf00      	nop
 800b288:	200027e4 	.word	0x200027e4

0800b28c <__malloc_unlock>:
 800b28c:	4801      	ldr	r0, [pc, #4]	@ (800b294 <__malloc_unlock+0x8>)
 800b28e:	f7ff b8a7 	b.w	800a3e0 <__retarget_lock_release_recursive>
 800b292:	bf00      	nop
 800b294:	200027e4 	.word	0x200027e4

0800b298 <_Balloc>:
 800b298:	b570      	push	{r4, r5, r6, lr}
 800b29a:	69c6      	ldr	r6, [r0, #28]
 800b29c:	4604      	mov	r4, r0
 800b29e:	460d      	mov	r5, r1
 800b2a0:	b976      	cbnz	r6, 800b2c0 <_Balloc+0x28>
 800b2a2:	2010      	movs	r0, #16
 800b2a4:	f7ff ff42 	bl	800b12c <malloc>
 800b2a8:	4602      	mov	r2, r0
 800b2aa:	61e0      	str	r0, [r4, #28]
 800b2ac:	b920      	cbnz	r0, 800b2b8 <_Balloc+0x20>
 800b2ae:	4b18      	ldr	r3, [pc, #96]	@ (800b310 <_Balloc+0x78>)
 800b2b0:	4818      	ldr	r0, [pc, #96]	@ (800b314 <_Balloc+0x7c>)
 800b2b2:	216b      	movs	r1, #107	@ 0x6b
 800b2b4:	f000 fe2a 	bl	800bf0c <__assert_func>
 800b2b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b2bc:	6006      	str	r6, [r0, #0]
 800b2be:	60c6      	str	r6, [r0, #12]
 800b2c0:	69e6      	ldr	r6, [r4, #28]
 800b2c2:	68f3      	ldr	r3, [r6, #12]
 800b2c4:	b183      	cbz	r3, 800b2e8 <_Balloc+0x50>
 800b2c6:	69e3      	ldr	r3, [r4, #28]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b2ce:	b9b8      	cbnz	r0, 800b300 <_Balloc+0x68>
 800b2d0:	2101      	movs	r1, #1
 800b2d2:	fa01 f605 	lsl.w	r6, r1, r5
 800b2d6:	1d72      	adds	r2, r6, #5
 800b2d8:	0092      	lsls	r2, r2, #2
 800b2da:	4620      	mov	r0, r4
 800b2dc:	f000 fe34 	bl	800bf48 <_calloc_r>
 800b2e0:	b160      	cbz	r0, 800b2fc <_Balloc+0x64>
 800b2e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b2e6:	e00e      	b.n	800b306 <_Balloc+0x6e>
 800b2e8:	2221      	movs	r2, #33	@ 0x21
 800b2ea:	2104      	movs	r1, #4
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 fe2b 	bl	800bf48 <_calloc_r>
 800b2f2:	69e3      	ldr	r3, [r4, #28]
 800b2f4:	60f0      	str	r0, [r6, #12]
 800b2f6:	68db      	ldr	r3, [r3, #12]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d1e4      	bne.n	800b2c6 <_Balloc+0x2e>
 800b2fc:	2000      	movs	r0, #0
 800b2fe:	bd70      	pop	{r4, r5, r6, pc}
 800b300:	6802      	ldr	r2, [r0, #0]
 800b302:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b306:	2300      	movs	r3, #0
 800b308:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b30c:	e7f7      	b.n	800b2fe <_Balloc+0x66>
 800b30e:	bf00      	nop
 800b310:	0800c9f1 	.word	0x0800c9f1
 800b314:	0800ca71 	.word	0x0800ca71

0800b318 <_Bfree>:
 800b318:	b570      	push	{r4, r5, r6, lr}
 800b31a:	69c6      	ldr	r6, [r0, #28]
 800b31c:	4605      	mov	r5, r0
 800b31e:	460c      	mov	r4, r1
 800b320:	b976      	cbnz	r6, 800b340 <_Bfree+0x28>
 800b322:	2010      	movs	r0, #16
 800b324:	f7ff ff02 	bl	800b12c <malloc>
 800b328:	4602      	mov	r2, r0
 800b32a:	61e8      	str	r0, [r5, #28]
 800b32c:	b920      	cbnz	r0, 800b338 <_Bfree+0x20>
 800b32e:	4b09      	ldr	r3, [pc, #36]	@ (800b354 <_Bfree+0x3c>)
 800b330:	4809      	ldr	r0, [pc, #36]	@ (800b358 <_Bfree+0x40>)
 800b332:	218f      	movs	r1, #143	@ 0x8f
 800b334:	f000 fdea 	bl	800bf0c <__assert_func>
 800b338:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b33c:	6006      	str	r6, [r0, #0]
 800b33e:	60c6      	str	r6, [r0, #12]
 800b340:	b13c      	cbz	r4, 800b352 <_Bfree+0x3a>
 800b342:	69eb      	ldr	r3, [r5, #28]
 800b344:	6862      	ldr	r2, [r4, #4]
 800b346:	68db      	ldr	r3, [r3, #12]
 800b348:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b34c:	6021      	str	r1, [r4, #0]
 800b34e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b352:	bd70      	pop	{r4, r5, r6, pc}
 800b354:	0800c9f1 	.word	0x0800c9f1
 800b358:	0800ca71 	.word	0x0800ca71

0800b35c <__multadd>:
 800b35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b360:	690d      	ldr	r5, [r1, #16]
 800b362:	4607      	mov	r7, r0
 800b364:	460c      	mov	r4, r1
 800b366:	461e      	mov	r6, r3
 800b368:	f101 0c14 	add.w	ip, r1, #20
 800b36c:	2000      	movs	r0, #0
 800b36e:	f8dc 3000 	ldr.w	r3, [ip]
 800b372:	b299      	uxth	r1, r3
 800b374:	fb02 6101 	mla	r1, r2, r1, r6
 800b378:	0c1e      	lsrs	r6, r3, #16
 800b37a:	0c0b      	lsrs	r3, r1, #16
 800b37c:	fb02 3306 	mla	r3, r2, r6, r3
 800b380:	b289      	uxth	r1, r1
 800b382:	3001      	adds	r0, #1
 800b384:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b388:	4285      	cmp	r5, r0
 800b38a:	f84c 1b04 	str.w	r1, [ip], #4
 800b38e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b392:	dcec      	bgt.n	800b36e <__multadd+0x12>
 800b394:	b30e      	cbz	r6, 800b3da <__multadd+0x7e>
 800b396:	68a3      	ldr	r3, [r4, #8]
 800b398:	42ab      	cmp	r3, r5
 800b39a:	dc19      	bgt.n	800b3d0 <__multadd+0x74>
 800b39c:	6861      	ldr	r1, [r4, #4]
 800b39e:	4638      	mov	r0, r7
 800b3a0:	3101      	adds	r1, #1
 800b3a2:	f7ff ff79 	bl	800b298 <_Balloc>
 800b3a6:	4680      	mov	r8, r0
 800b3a8:	b928      	cbnz	r0, 800b3b6 <__multadd+0x5a>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	4b0c      	ldr	r3, [pc, #48]	@ (800b3e0 <__multadd+0x84>)
 800b3ae:	480d      	ldr	r0, [pc, #52]	@ (800b3e4 <__multadd+0x88>)
 800b3b0:	21ba      	movs	r1, #186	@ 0xba
 800b3b2:	f000 fdab 	bl	800bf0c <__assert_func>
 800b3b6:	6922      	ldr	r2, [r4, #16]
 800b3b8:	3202      	adds	r2, #2
 800b3ba:	f104 010c 	add.w	r1, r4, #12
 800b3be:	0092      	lsls	r2, r2, #2
 800b3c0:	300c      	adds	r0, #12
 800b3c2:	f000 fd95 	bl	800bef0 <memcpy>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	f7ff ffa5 	bl	800b318 <_Bfree>
 800b3ce:	4644      	mov	r4, r8
 800b3d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	615e      	str	r6, [r3, #20]
 800b3d8:	6125      	str	r5, [r4, #16]
 800b3da:	4620      	mov	r0, r4
 800b3dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3e0:	0800ca60 	.word	0x0800ca60
 800b3e4:	0800ca71 	.word	0x0800ca71

0800b3e8 <__hi0bits>:
 800b3e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b3ec:	4603      	mov	r3, r0
 800b3ee:	bf36      	itet	cc
 800b3f0:	0403      	lslcc	r3, r0, #16
 800b3f2:	2000      	movcs	r0, #0
 800b3f4:	2010      	movcc	r0, #16
 800b3f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b3fa:	bf3c      	itt	cc
 800b3fc:	021b      	lslcc	r3, r3, #8
 800b3fe:	3008      	addcc	r0, #8
 800b400:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b404:	bf3c      	itt	cc
 800b406:	011b      	lslcc	r3, r3, #4
 800b408:	3004      	addcc	r0, #4
 800b40a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b40e:	bf3c      	itt	cc
 800b410:	009b      	lslcc	r3, r3, #2
 800b412:	3002      	addcc	r0, #2
 800b414:	2b00      	cmp	r3, #0
 800b416:	db05      	blt.n	800b424 <__hi0bits+0x3c>
 800b418:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b41c:	f100 0001 	add.w	r0, r0, #1
 800b420:	bf08      	it	eq
 800b422:	2020      	moveq	r0, #32
 800b424:	4770      	bx	lr

0800b426 <__lo0bits>:
 800b426:	6803      	ldr	r3, [r0, #0]
 800b428:	4602      	mov	r2, r0
 800b42a:	f013 0007 	ands.w	r0, r3, #7
 800b42e:	d00b      	beq.n	800b448 <__lo0bits+0x22>
 800b430:	07d9      	lsls	r1, r3, #31
 800b432:	d421      	bmi.n	800b478 <__lo0bits+0x52>
 800b434:	0798      	lsls	r0, r3, #30
 800b436:	bf49      	itett	mi
 800b438:	085b      	lsrmi	r3, r3, #1
 800b43a:	089b      	lsrpl	r3, r3, #2
 800b43c:	2001      	movmi	r0, #1
 800b43e:	6013      	strmi	r3, [r2, #0]
 800b440:	bf5c      	itt	pl
 800b442:	6013      	strpl	r3, [r2, #0]
 800b444:	2002      	movpl	r0, #2
 800b446:	4770      	bx	lr
 800b448:	b299      	uxth	r1, r3
 800b44a:	b909      	cbnz	r1, 800b450 <__lo0bits+0x2a>
 800b44c:	0c1b      	lsrs	r3, r3, #16
 800b44e:	2010      	movs	r0, #16
 800b450:	b2d9      	uxtb	r1, r3
 800b452:	b909      	cbnz	r1, 800b458 <__lo0bits+0x32>
 800b454:	3008      	adds	r0, #8
 800b456:	0a1b      	lsrs	r3, r3, #8
 800b458:	0719      	lsls	r1, r3, #28
 800b45a:	bf04      	itt	eq
 800b45c:	091b      	lsreq	r3, r3, #4
 800b45e:	3004      	addeq	r0, #4
 800b460:	0799      	lsls	r1, r3, #30
 800b462:	bf04      	itt	eq
 800b464:	089b      	lsreq	r3, r3, #2
 800b466:	3002      	addeq	r0, #2
 800b468:	07d9      	lsls	r1, r3, #31
 800b46a:	d403      	bmi.n	800b474 <__lo0bits+0x4e>
 800b46c:	085b      	lsrs	r3, r3, #1
 800b46e:	f100 0001 	add.w	r0, r0, #1
 800b472:	d003      	beq.n	800b47c <__lo0bits+0x56>
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	4770      	bx	lr
 800b478:	2000      	movs	r0, #0
 800b47a:	4770      	bx	lr
 800b47c:	2020      	movs	r0, #32
 800b47e:	4770      	bx	lr

0800b480 <__i2b>:
 800b480:	b510      	push	{r4, lr}
 800b482:	460c      	mov	r4, r1
 800b484:	2101      	movs	r1, #1
 800b486:	f7ff ff07 	bl	800b298 <_Balloc>
 800b48a:	4602      	mov	r2, r0
 800b48c:	b928      	cbnz	r0, 800b49a <__i2b+0x1a>
 800b48e:	4b05      	ldr	r3, [pc, #20]	@ (800b4a4 <__i2b+0x24>)
 800b490:	4805      	ldr	r0, [pc, #20]	@ (800b4a8 <__i2b+0x28>)
 800b492:	f240 1145 	movw	r1, #325	@ 0x145
 800b496:	f000 fd39 	bl	800bf0c <__assert_func>
 800b49a:	2301      	movs	r3, #1
 800b49c:	6144      	str	r4, [r0, #20]
 800b49e:	6103      	str	r3, [r0, #16]
 800b4a0:	bd10      	pop	{r4, pc}
 800b4a2:	bf00      	nop
 800b4a4:	0800ca60 	.word	0x0800ca60
 800b4a8:	0800ca71 	.word	0x0800ca71

0800b4ac <__multiply>:
 800b4ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4b0:	4617      	mov	r7, r2
 800b4b2:	690a      	ldr	r2, [r1, #16]
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	bfa8      	it	ge
 800b4ba:	463b      	movge	r3, r7
 800b4bc:	4689      	mov	r9, r1
 800b4be:	bfa4      	itt	ge
 800b4c0:	460f      	movge	r7, r1
 800b4c2:	4699      	movge	r9, r3
 800b4c4:	693d      	ldr	r5, [r7, #16]
 800b4c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	6879      	ldr	r1, [r7, #4]
 800b4ce:	eb05 060a 	add.w	r6, r5, sl
 800b4d2:	42b3      	cmp	r3, r6
 800b4d4:	b085      	sub	sp, #20
 800b4d6:	bfb8      	it	lt
 800b4d8:	3101      	addlt	r1, #1
 800b4da:	f7ff fedd 	bl	800b298 <_Balloc>
 800b4de:	b930      	cbnz	r0, 800b4ee <__multiply+0x42>
 800b4e0:	4602      	mov	r2, r0
 800b4e2:	4b41      	ldr	r3, [pc, #260]	@ (800b5e8 <__multiply+0x13c>)
 800b4e4:	4841      	ldr	r0, [pc, #260]	@ (800b5ec <__multiply+0x140>)
 800b4e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b4ea:	f000 fd0f 	bl	800bf0c <__assert_func>
 800b4ee:	f100 0414 	add.w	r4, r0, #20
 800b4f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b4f6:	4623      	mov	r3, r4
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	4573      	cmp	r3, lr
 800b4fc:	d320      	bcc.n	800b540 <__multiply+0x94>
 800b4fe:	f107 0814 	add.w	r8, r7, #20
 800b502:	f109 0114 	add.w	r1, r9, #20
 800b506:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b50a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b50e:	9302      	str	r3, [sp, #8]
 800b510:	1beb      	subs	r3, r5, r7
 800b512:	3b15      	subs	r3, #21
 800b514:	f023 0303 	bic.w	r3, r3, #3
 800b518:	3304      	adds	r3, #4
 800b51a:	3715      	adds	r7, #21
 800b51c:	42bd      	cmp	r5, r7
 800b51e:	bf38      	it	cc
 800b520:	2304      	movcc	r3, #4
 800b522:	9301      	str	r3, [sp, #4]
 800b524:	9b02      	ldr	r3, [sp, #8]
 800b526:	9103      	str	r1, [sp, #12]
 800b528:	428b      	cmp	r3, r1
 800b52a:	d80c      	bhi.n	800b546 <__multiply+0x9a>
 800b52c:	2e00      	cmp	r6, #0
 800b52e:	dd03      	ble.n	800b538 <__multiply+0x8c>
 800b530:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b534:	2b00      	cmp	r3, #0
 800b536:	d055      	beq.n	800b5e4 <__multiply+0x138>
 800b538:	6106      	str	r6, [r0, #16]
 800b53a:	b005      	add	sp, #20
 800b53c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b540:	f843 2b04 	str.w	r2, [r3], #4
 800b544:	e7d9      	b.n	800b4fa <__multiply+0x4e>
 800b546:	f8b1 a000 	ldrh.w	sl, [r1]
 800b54a:	f1ba 0f00 	cmp.w	sl, #0
 800b54e:	d01f      	beq.n	800b590 <__multiply+0xe4>
 800b550:	46c4      	mov	ip, r8
 800b552:	46a1      	mov	r9, r4
 800b554:	2700      	movs	r7, #0
 800b556:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b55a:	f8d9 3000 	ldr.w	r3, [r9]
 800b55e:	fa1f fb82 	uxth.w	fp, r2
 800b562:	b29b      	uxth	r3, r3
 800b564:	fb0a 330b 	mla	r3, sl, fp, r3
 800b568:	443b      	add	r3, r7
 800b56a:	f8d9 7000 	ldr.w	r7, [r9]
 800b56e:	0c12      	lsrs	r2, r2, #16
 800b570:	0c3f      	lsrs	r7, r7, #16
 800b572:	fb0a 7202 	mla	r2, sl, r2, r7
 800b576:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b57a:	b29b      	uxth	r3, r3
 800b57c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b580:	4565      	cmp	r5, ip
 800b582:	f849 3b04 	str.w	r3, [r9], #4
 800b586:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b58a:	d8e4      	bhi.n	800b556 <__multiply+0xaa>
 800b58c:	9b01      	ldr	r3, [sp, #4]
 800b58e:	50e7      	str	r7, [r4, r3]
 800b590:	9b03      	ldr	r3, [sp, #12]
 800b592:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b596:	3104      	adds	r1, #4
 800b598:	f1b9 0f00 	cmp.w	r9, #0
 800b59c:	d020      	beq.n	800b5e0 <__multiply+0x134>
 800b59e:	6823      	ldr	r3, [r4, #0]
 800b5a0:	4647      	mov	r7, r8
 800b5a2:	46a4      	mov	ip, r4
 800b5a4:	f04f 0a00 	mov.w	sl, #0
 800b5a8:	f8b7 b000 	ldrh.w	fp, [r7]
 800b5ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b5b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b5b4:	4452      	add	r2, sl
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b5bc:	f84c 3b04 	str.w	r3, [ip], #4
 800b5c0:	f857 3b04 	ldr.w	r3, [r7], #4
 800b5c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5c8:	f8bc 3000 	ldrh.w	r3, [ip]
 800b5cc:	fb09 330a 	mla	r3, r9, sl, r3
 800b5d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b5d4:	42bd      	cmp	r5, r7
 800b5d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b5da:	d8e5      	bhi.n	800b5a8 <__multiply+0xfc>
 800b5dc:	9a01      	ldr	r2, [sp, #4]
 800b5de:	50a3      	str	r3, [r4, r2]
 800b5e0:	3404      	adds	r4, #4
 800b5e2:	e79f      	b.n	800b524 <__multiply+0x78>
 800b5e4:	3e01      	subs	r6, #1
 800b5e6:	e7a1      	b.n	800b52c <__multiply+0x80>
 800b5e8:	0800ca60 	.word	0x0800ca60
 800b5ec:	0800ca71 	.word	0x0800ca71

0800b5f0 <__pow5mult>:
 800b5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b5f4:	4615      	mov	r5, r2
 800b5f6:	f012 0203 	ands.w	r2, r2, #3
 800b5fa:	4607      	mov	r7, r0
 800b5fc:	460e      	mov	r6, r1
 800b5fe:	d007      	beq.n	800b610 <__pow5mult+0x20>
 800b600:	4c25      	ldr	r4, [pc, #148]	@ (800b698 <__pow5mult+0xa8>)
 800b602:	3a01      	subs	r2, #1
 800b604:	2300      	movs	r3, #0
 800b606:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b60a:	f7ff fea7 	bl	800b35c <__multadd>
 800b60e:	4606      	mov	r6, r0
 800b610:	10ad      	asrs	r5, r5, #2
 800b612:	d03d      	beq.n	800b690 <__pow5mult+0xa0>
 800b614:	69fc      	ldr	r4, [r7, #28]
 800b616:	b97c      	cbnz	r4, 800b638 <__pow5mult+0x48>
 800b618:	2010      	movs	r0, #16
 800b61a:	f7ff fd87 	bl	800b12c <malloc>
 800b61e:	4602      	mov	r2, r0
 800b620:	61f8      	str	r0, [r7, #28]
 800b622:	b928      	cbnz	r0, 800b630 <__pow5mult+0x40>
 800b624:	4b1d      	ldr	r3, [pc, #116]	@ (800b69c <__pow5mult+0xac>)
 800b626:	481e      	ldr	r0, [pc, #120]	@ (800b6a0 <__pow5mult+0xb0>)
 800b628:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b62c:	f000 fc6e 	bl	800bf0c <__assert_func>
 800b630:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b634:	6004      	str	r4, [r0, #0]
 800b636:	60c4      	str	r4, [r0, #12]
 800b638:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b63c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b640:	b94c      	cbnz	r4, 800b656 <__pow5mult+0x66>
 800b642:	f240 2171 	movw	r1, #625	@ 0x271
 800b646:	4638      	mov	r0, r7
 800b648:	f7ff ff1a 	bl	800b480 <__i2b>
 800b64c:	2300      	movs	r3, #0
 800b64e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b652:	4604      	mov	r4, r0
 800b654:	6003      	str	r3, [r0, #0]
 800b656:	f04f 0900 	mov.w	r9, #0
 800b65a:	07eb      	lsls	r3, r5, #31
 800b65c:	d50a      	bpl.n	800b674 <__pow5mult+0x84>
 800b65e:	4631      	mov	r1, r6
 800b660:	4622      	mov	r2, r4
 800b662:	4638      	mov	r0, r7
 800b664:	f7ff ff22 	bl	800b4ac <__multiply>
 800b668:	4631      	mov	r1, r6
 800b66a:	4680      	mov	r8, r0
 800b66c:	4638      	mov	r0, r7
 800b66e:	f7ff fe53 	bl	800b318 <_Bfree>
 800b672:	4646      	mov	r6, r8
 800b674:	106d      	asrs	r5, r5, #1
 800b676:	d00b      	beq.n	800b690 <__pow5mult+0xa0>
 800b678:	6820      	ldr	r0, [r4, #0]
 800b67a:	b938      	cbnz	r0, 800b68c <__pow5mult+0x9c>
 800b67c:	4622      	mov	r2, r4
 800b67e:	4621      	mov	r1, r4
 800b680:	4638      	mov	r0, r7
 800b682:	f7ff ff13 	bl	800b4ac <__multiply>
 800b686:	6020      	str	r0, [r4, #0]
 800b688:	f8c0 9000 	str.w	r9, [r0]
 800b68c:	4604      	mov	r4, r0
 800b68e:	e7e4      	b.n	800b65a <__pow5mult+0x6a>
 800b690:	4630      	mov	r0, r6
 800b692:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b696:	bf00      	nop
 800b698:	0800cb24 	.word	0x0800cb24
 800b69c:	0800c9f1 	.word	0x0800c9f1
 800b6a0:	0800ca71 	.word	0x0800ca71

0800b6a4 <__lshift>:
 800b6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b6a8:	460c      	mov	r4, r1
 800b6aa:	6849      	ldr	r1, [r1, #4]
 800b6ac:	6923      	ldr	r3, [r4, #16]
 800b6ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b6b2:	68a3      	ldr	r3, [r4, #8]
 800b6b4:	4607      	mov	r7, r0
 800b6b6:	4691      	mov	r9, r2
 800b6b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b6bc:	f108 0601 	add.w	r6, r8, #1
 800b6c0:	42b3      	cmp	r3, r6
 800b6c2:	db0b      	blt.n	800b6dc <__lshift+0x38>
 800b6c4:	4638      	mov	r0, r7
 800b6c6:	f7ff fde7 	bl	800b298 <_Balloc>
 800b6ca:	4605      	mov	r5, r0
 800b6cc:	b948      	cbnz	r0, 800b6e2 <__lshift+0x3e>
 800b6ce:	4602      	mov	r2, r0
 800b6d0:	4b28      	ldr	r3, [pc, #160]	@ (800b774 <__lshift+0xd0>)
 800b6d2:	4829      	ldr	r0, [pc, #164]	@ (800b778 <__lshift+0xd4>)
 800b6d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b6d8:	f000 fc18 	bl	800bf0c <__assert_func>
 800b6dc:	3101      	adds	r1, #1
 800b6de:	005b      	lsls	r3, r3, #1
 800b6e0:	e7ee      	b.n	800b6c0 <__lshift+0x1c>
 800b6e2:	2300      	movs	r3, #0
 800b6e4:	f100 0114 	add.w	r1, r0, #20
 800b6e8:	f100 0210 	add.w	r2, r0, #16
 800b6ec:	4618      	mov	r0, r3
 800b6ee:	4553      	cmp	r3, sl
 800b6f0:	db33      	blt.n	800b75a <__lshift+0xb6>
 800b6f2:	6920      	ldr	r0, [r4, #16]
 800b6f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b6f8:	f104 0314 	add.w	r3, r4, #20
 800b6fc:	f019 091f 	ands.w	r9, r9, #31
 800b700:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b704:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b708:	d02b      	beq.n	800b762 <__lshift+0xbe>
 800b70a:	f1c9 0e20 	rsb	lr, r9, #32
 800b70e:	468a      	mov	sl, r1
 800b710:	2200      	movs	r2, #0
 800b712:	6818      	ldr	r0, [r3, #0]
 800b714:	fa00 f009 	lsl.w	r0, r0, r9
 800b718:	4310      	orrs	r0, r2
 800b71a:	f84a 0b04 	str.w	r0, [sl], #4
 800b71e:	f853 2b04 	ldr.w	r2, [r3], #4
 800b722:	459c      	cmp	ip, r3
 800b724:	fa22 f20e 	lsr.w	r2, r2, lr
 800b728:	d8f3      	bhi.n	800b712 <__lshift+0x6e>
 800b72a:	ebac 0304 	sub.w	r3, ip, r4
 800b72e:	3b15      	subs	r3, #21
 800b730:	f023 0303 	bic.w	r3, r3, #3
 800b734:	3304      	adds	r3, #4
 800b736:	f104 0015 	add.w	r0, r4, #21
 800b73a:	4560      	cmp	r0, ip
 800b73c:	bf88      	it	hi
 800b73e:	2304      	movhi	r3, #4
 800b740:	50ca      	str	r2, [r1, r3]
 800b742:	b10a      	cbz	r2, 800b748 <__lshift+0xa4>
 800b744:	f108 0602 	add.w	r6, r8, #2
 800b748:	3e01      	subs	r6, #1
 800b74a:	4638      	mov	r0, r7
 800b74c:	612e      	str	r6, [r5, #16]
 800b74e:	4621      	mov	r1, r4
 800b750:	f7ff fde2 	bl	800b318 <_Bfree>
 800b754:	4628      	mov	r0, r5
 800b756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b75a:	f842 0f04 	str.w	r0, [r2, #4]!
 800b75e:	3301      	adds	r3, #1
 800b760:	e7c5      	b.n	800b6ee <__lshift+0x4a>
 800b762:	3904      	subs	r1, #4
 800b764:	f853 2b04 	ldr.w	r2, [r3], #4
 800b768:	f841 2f04 	str.w	r2, [r1, #4]!
 800b76c:	459c      	cmp	ip, r3
 800b76e:	d8f9      	bhi.n	800b764 <__lshift+0xc0>
 800b770:	e7ea      	b.n	800b748 <__lshift+0xa4>
 800b772:	bf00      	nop
 800b774:	0800ca60 	.word	0x0800ca60
 800b778:	0800ca71 	.word	0x0800ca71

0800b77c <__mcmp>:
 800b77c:	690a      	ldr	r2, [r1, #16]
 800b77e:	4603      	mov	r3, r0
 800b780:	6900      	ldr	r0, [r0, #16]
 800b782:	1a80      	subs	r0, r0, r2
 800b784:	b530      	push	{r4, r5, lr}
 800b786:	d10e      	bne.n	800b7a6 <__mcmp+0x2a>
 800b788:	3314      	adds	r3, #20
 800b78a:	3114      	adds	r1, #20
 800b78c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b790:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b794:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b798:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b79c:	4295      	cmp	r5, r2
 800b79e:	d003      	beq.n	800b7a8 <__mcmp+0x2c>
 800b7a0:	d205      	bcs.n	800b7ae <__mcmp+0x32>
 800b7a2:	f04f 30ff 	mov.w	r0, #4294967295
 800b7a6:	bd30      	pop	{r4, r5, pc}
 800b7a8:	42a3      	cmp	r3, r4
 800b7aa:	d3f3      	bcc.n	800b794 <__mcmp+0x18>
 800b7ac:	e7fb      	b.n	800b7a6 <__mcmp+0x2a>
 800b7ae:	2001      	movs	r0, #1
 800b7b0:	e7f9      	b.n	800b7a6 <__mcmp+0x2a>
	...

0800b7b4 <__mdiff>:
 800b7b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7b8:	4689      	mov	r9, r1
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	4611      	mov	r1, r2
 800b7be:	4648      	mov	r0, r9
 800b7c0:	4614      	mov	r4, r2
 800b7c2:	f7ff ffdb 	bl	800b77c <__mcmp>
 800b7c6:	1e05      	subs	r5, r0, #0
 800b7c8:	d112      	bne.n	800b7f0 <__mdiff+0x3c>
 800b7ca:	4629      	mov	r1, r5
 800b7cc:	4630      	mov	r0, r6
 800b7ce:	f7ff fd63 	bl	800b298 <_Balloc>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	b928      	cbnz	r0, 800b7e2 <__mdiff+0x2e>
 800b7d6:	4b3f      	ldr	r3, [pc, #252]	@ (800b8d4 <__mdiff+0x120>)
 800b7d8:	f240 2137 	movw	r1, #567	@ 0x237
 800b7dc:	483e      	ldr	r0, [pc, #248]	@ (800b8d8 <__mdiff+0x124>)
 800b7de:	f000 fb95 	bl	800bf0c <__assert_func>
 800b7e2:	2301      	movs	r3, #1
 800b7e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	b003      	add	sp, #12
 800b7ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7f0:	bfbc      	itt	lt
 800b7f2:	464b      	movlt	r3, r9
 800b7f4:	46a1      	movlt	r9, r4
 800b7f6:	4630      	mov	r0, r6
 800b7f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b7fc:	bfba      	itte	lt
 800b7fe:	461c      	movlt	r4, r3
 800b800:	2501      	movlt	r5, #1
 800b802:	2500      	movge	r5, #0
 800b804:	f7ff fd48 	bl	800b298 <_Balloc>
 800b808:	4602      	mov	r2, r0
 800b80a:	b918      	cbnz	r0, 800b814 <__mdiff+0x60>
 800b80c:	4b31      	ldr	r3, [pc, #196]	@ (800b8d4 <__mdiff+0x120>)
 800b80e:	f240 2145 	movw	r1, #581	@ 0x245
 800b812:	e7e3      	b.n	800b7dc <__mdiff+0x28>
 800b814:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b818:	6926      	ldr	r6, [r4, #16]
 800b81a:	60c5      	str	r5, [r0, #12]
 800b81c:	f109 0310 	add.w	r3, r9, #16
 800b820:	f109 0514 	add.w	r5, r9, #20
 800b824:	f104 0e14 	add.w	lr, r4, #20
 800b828:	f100 0b14 	add.w	fp, r0, #20
 800b82c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b830:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	46d9      	mov	r9, fp
 800b838:	f04f 0c00 	mov.w	ip, #0
 800b83c:	9b01      	ldr	r3, [sp, #4]
 800b83e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b842:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b846:	9301      	str	r3, [sp, #4]
 800b848:	fa1f f38a 	uxth.w	r3, sl
 800b84c:	4619      	mov	r1, r3
 800b84e:	b283      	uxth	r3, r0
 800b850:	1acb      	subs	r3, r1, r3
 800b852:	0c00      	lsrs	r0, r0, #16
 800b854:	4463      	add	r3, ip
 800b856:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b85a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b85e:	b29b      	uxth	r3, r3
 800b860:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b864:	4576      	cmp	r6, lr
 800b866:	f849 3b04 	str.w	r3, [r9], #4
 800b86a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b86e:	d8e5      	bhi.n	800b83c <__mdiff+0x88>
 800b870:	1b33      	subs	r3, r6, r4
 800b872:	3b15      	subs	r3, #21
 800b874:	f023 0303 	bic.w	r3, r3, #3
 800b878:	3415      	adds	r4, #21
 800b87a:	3304      	adds	r3, #4
 800b87c:	42a6      	cmp	r6, r4
 800b87e:	bf38      	it	cc
 800b880:	2304      	movcc	r3, #4
 800b882:	441d      	add	r5, r3
 800b884:	445b      	add	r3, fp
 800b886:	461e      	mov	r6, r3
 800b888:	462c      	mov	r4, r5
 800b88a:	4544      	cmp	r4, r8
 800b88c:	d30e      	bcc.n	800b8ac <__mdiff+0xf8>
 800b88e:	f108 0103 	add.w	r1, r8, #3
 800b892:	1b49      	subs	r1, r1, r5
 800b894:	f021 0103 	bic.w	r1, r1, #3
 800b898:	3d03      	subs	r5, #3
 800b89a:	45a8      	cmp	r8, r5
 800b89c:	bf38      	it	cc
 800b89e:	2100      	movcc	r1, #0
 800b8a0:	440b      	add	r3, r1
 800b8a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b8a6:	b191      	cbz	r1, 800b8ce <__mdiff+0x11a>
 800b8a8:	6117      	str	r7, [r2, #16]
 800b8aa:	e79d      	b.n	800b7e8 <__mdiff+0x34>
 800b8ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800b8b0:	46e6      	mov	lr, ip
 800b8b2:	0c08      	lsrs	r0, r1, #16
 800b8b4:	fa1c fc81 	uxtah	ip, ip, r1
 800b8b8:	4471      	add	r1, lr
 800b8ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b8be:	b289      	uxth	r1, r1
 800b8c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b8c4:	f846 1b04 	str.w	r1, [r6], #4
 800b8c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b8cc:	e7dd      	b.n	800b88a <__mdiff+0xd6>
 800b8ce:	3f01      	subs	r7, #1
 800b8d0:	e7e7      	b.n	800b8a2 <__mdiff+0xee>
 800b8d2:	bf00      	nop
 800b8d4:	0800ca60 	.word	0x0800ca60
 800b8d8:	0800ca71 	.word	0x0800ca71

0800b8dc <__d2b>:
 800b8dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b8e0:	460f      	mov	r7, r1
 800b8e2:	2101      	movs	r1, #1
 800b8e4:	ec59 8b10 	vmov	r8, r9, d0
 800b8e8:	4616      	mov	r6, r2
 800b8ea:	f7ff fcd5 	bl	800b298 <_Balloc>
 800b8ee:	4604      	mov	r4, r0
 800b8f0:	b930      	cbnz	r0, 800b900 <__d2b+0x24>
 800b8f2:	4602      	mov	r2, r0
 800b8f4:	4b23      	ldr	r3, [pc, #140]	@ (800b984 <__d2b+0xa8>)
 800b8f6:	4824      	ldr	r0, [pc, #144]	@ (800b988 <__d2b+0xac>)
 800b8f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800b8fc:	f000 fb06 	bl	800bf0c <__assert_func>
 800b900:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b904:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b908:	b10d      	cbz	r5, 800b90e <__d2b+0x32>
 800b90a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b90e:	9301      	str	r3, [sp, #4]
 800b910:	f1b8 0300 	subs.w	r3, r8, #0
 800b914:	d023      	beq.n	800b95e <__d2b+0x82>
 800b916:	4668      	mov	r0, sp
 800b918:	9300      	str	r3, [sp, #0]
 800b91a:	f7ff fd84 	bl	800b426 <__lo0bits>
 800b91e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b922:	b1d0      	cbz	r0, 800b95a <__d2b+0x7e>
 800b924:	f1c0 0320 	rsb	r3, r0, #32
 800b928:	fa02 f303 	lsl.w	r3, r2, r3
 800b92c:	430b      	orrs	r3, r1
 800b92e:	40c2      	lsrs	r2, r0
 800b930:	6163      	str	r3, [r4, #20]
 800b932:	9201      	str	r2, [sp, #4]
 800b934:	9b01      	ldr	r3, [sp, #4]
 800b936:	61a3      	str	r3, [r4, #24]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	bf0c      	ite	eq
 800b93c:	2201      	moveq	r2, #1
 800b93e:	2202      	movne	r2, #2
 800b940:	6122      	str	r2, [r4, #16]
 800b942:	b1a5      	cbz	r5, 800b96e <__d2b+0x92>
 800b944:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800b948:	4405      	add	r5, r0
 800b94a:	603d      	str	r5, [r7, #0]
 800b94c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800b950:	6030      	str	r0, [r6, #0]
 800b952:	4620      	mov	r0, r4
 800b954:	b003      	add	sp, #12
 800b956:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b95a:	6161      	str	r1, [r4, #20]
 800b95c:	e7ea      	b.n	800b934 <__d2b+0x58>
 800b95e:	a801      	add	r0, sp, #4
 800b960:	f7ff fd61 	bl	800b426 <__lo0bits>
 800b964:	9b01      	ldr	r3, [sp, #4]
 800b966:	6163      	str	r3, [r4, #20]
 800b968:	3020      	adds	r0, #32
 800b96a:	2201      	movs	r2, #1
 800b96c:	e7e8      	b.n	800b940 <__d2b+0x64>
 800b96e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b972:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800b976:	6038      	str	r0, [r7, #0]
 800b978:	6918      	ldr	r0, [r3, #16]
 800b97a:	f7ff fd35 	bl	800b3e8 <__hi0bits>
 800b97e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b982:	e7e5      	b.n	800b950 <__d2b+0x74>
 800b984:	0800ca60 	.word	0x0800ca60
 800b988:	0800ca71 	.word	0x0800ca71

0800b98c <__ssputs_r>:
 800b98c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b990:	688e      	ldr	r6, [r1, #8]
 800b992:	461f      	mov	r7, r3
 800b994:	42be      	cmp	r6, r7
 800b996:	680b      	ldr	r3, [r1, #0]
 800b998:	4682      	mov	sl, r0
 800b99a:	460c      	mov	r4, r1
 800b99c:	4690      	mov	r8, r2
 800b99e:	d82d      	bhi.n	800b9fc <__ssputs_r+0x70>
 800b9a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b9a4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b9a8:	d026      	beq.n	800b9f8 <__ssputs_r+0x6c>
 800b9aa:	6965      	ldr	r5, [r4, #20]
 800b9ac:	6909      	ldr	r1, [r1, #16]
 800b9ae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b9b2:	eba3 0901 	sub.w	r9, r3, r1
 800b9b6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b9ba:	1c7b      	adds	r3, r7, #1
 800b9bc:	444b      	add	r3, r9
 800b9be:	106d      	asrs	r5, r5, #1
 800b9c0:	429d      	cmp	r5, r3
 800b9c2:	bf38      	it	cc
 800b9c4:	461d      	movcc	r5, r3
 800b9c6:	0553      	lsls	r3, r2, #21
 800b9c8:	d527      	bpl.n	800ba1a <__ssputs_r+0x8e>
 800b9ca:	4629      	mov	r1, r5
 800b9cc:	f7ff fbd8 	bl	800b180 <_malloc_r>
 800b9d0:	4606      	mov	r6, r0
 800b9d2:	b360      	cbz	r0, 800ba2e <__ssputs_r+0xa2>
 800b9d4:	6921      	ldr	r1, [r4, #16]
 800b9d6:	464a      	mov	r2, r9
 800b9d8:	f000 fa8a 	bl	800bef0 <memcpy>
 800b9dc:	89a3      	ldrh	r3, [r4, #12]
 800b9de:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b9e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b9e6:	81a3      	strh	r3, [r4, #12]
 800b9e8:	6126      	str	r6, [r4, #16]
 800b9ea:	6165      	str	r5, [r4, #20]
 800b9ec:	444e      	add	r6, r9
 800b9ee:	eba5 0509 	sub.w	r5, r5, r9
 800b9f2:	6026      	str	r6, [r4, #0]
 800b9f4:	60a5      	str	r5, [r4, #8]
 800b9f6:	463e      	mov	r6, r7
 800b9f8:	42be      	cmp	r6, r7
 800b9fa:	d900      	bls.n	800b9fe <__ssputs_r+0x72>
 800b9fc:	463e      	mov	r6, r7
 800b9fe:	6820      	ldr	r0, [r4, #0]
 800ba00:	4632      	mov	r2, r6
 800ba02:	4641      	mov	r1, r8
 800ba04:	f000 fa28 	bl	800be58 <memmove>
 800ba08:	68a3      	ldr	r3, [r4, #8]
 800ba0a:	1b9b      	subs	r3, r3, r6
 800ba0c:	60a3      	str	r3, [r4, #8]
 800ba0e:	6823      	ldr	r3, [r4, #0]
 800ba10:	4433      	add	r3, r6
 800ba12:	6023      	str	r3, [r4, #0]
 800ba14:	2000      	movs	r0, #0
 800ba16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba1a:	462a      	mov	r2, r5
 800ba1c:	f000 faba 	bl	800bf94 <_realloc_r>
 800ba20:	4606      	mov	r6, r0
 800ba22:	2800      	cmp	r0, #0
 800ba24:	d1e0      	bne.n	800b9e8 <__ssputs_r+0x5c>
 800ba26:	6921      	ldr	r1, [r4, #16]
 800ba28:	4650      	mov	r0, sl
 800ba2a:	f7ff fb35 	bl	800b098 <_free_r>
 800ba2e:	230c      	movs	r3, #12
 800ba30:	f8ca 3000 	str.w	r3, [sl]
 800ba34:	89a3      	ldrh	r3, [r4, #12]
 800ba36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ba3a:	81a3      	strh	r3, [r4, #12]
 800ba3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba40:	e7e9      	b.n	800ba16 <__ssputs_r+0x8a>
	...

0800ba44 <_svfiprintf_r>:
 800ba44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba48:	4698      	mov	r8, r3
 800ba4a:	898b      	ldrh	r3, [r1, #12]
 800ba4c:	061b      	lsls	r3, r3, #24
 800ba4e:	b09d      	sub	sp, #116	@ 0x74
 800ba50:	4607      	mov	r7, r0
 800ba52:	460d      	mov	r5, r1
 800ba54:	4614      	mov	r4, r2
 800ba56:	d510      	bpl.n	800ba7a <_svfiprintf_r+0x36>
 800ba58:	690b      	ldr	r3, [r1, #16]
 800ba5a:	b973      	cbnz	r3, 800ba7a <_svfiprintf_r+0x36>
 800ba5c:	2140      	movs	r1, #64	@ 0x40
 800ba5e:	f7ff fb8f 	bl	800b180 <_malloc_r>
 800ba62:	6028      	str	r0, [r5, #0]
 800ba64:	6128      	str	r0, [r5, #16]
 800ba66:	b930      	cbnz	r0, 800ba76 <_svfiprintf_r+0x32>
 800ba68:	230c      	movs	r3, #12
 800ba6a:	603b      	str	r3, [r7, #0]
 800ba6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba70:	b01d      	add	sp, #116	@ 0x74
 800ba72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba76:	2340      	movs	r3, #64	@ 0x40
 800ba78:	616b      	str	r3, [r5, #20]
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800ba7e:	2320      	movs	r3, #32
 800ba80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ba84:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba88:	2330      	movs	r3, #48	@ 0x30
 800ba8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bc28 <_svfiprintf_r+0x1e4>
 800ba8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ba92:	f04f 0901 	mov.w	r9, #1
 800ba96:	4623      	mov	r3, r4
 800ba98:	469a      	mov	sl, r3
 800ba9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba9e:	b10a      	cbz	r2, 800baa4 <_svfiprintf_r+0x60>
 800baa0:	2a25      	cmp	r2, #37	@ 0x25
 800baa2:	d1f9      	bne.n	800ba98 <_svfiprintf_r+0x54>
 800baa4:	ebba 0b04 	subs.w	fp, sl, r4
 800baa8:	d00b      	beq.n	800bac2 <_svfiprintf_r+0x7e>
 800baaa:	465b      	mov	r3, fp
 800baac:	4622      	mov	r2, r4
 800baae:	4629      	mov	r1, r5
 800bab0:	4638      	mov	r0, r7
 800bab2:	f7ff ff6b 	bl	800b98c <__ssputs_r>
 800bab6:	3001      	adds	r0, #1
 800bab8:	f000 80a7 	beq.w	800bc0a <_svfiprintf_r+0x1c6>
 800babc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800babe:	445a      	add	r2, fp
 800bac0:	9209      	str	r2, [sp, #36]	@ 0x24
 800bac2:	f89a 3000 	ldrb.w	r3, [sl]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	f000 809f 	beq.w	800bc0a <_svfiprintf_r+0x1c6>
 800bacc:	2300      	movs	r3, #0
 800bace:	f04f 32ff 	mov.w	r2, #4294967295
 800bad2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bad6:	f10a 0a01 	add.w	sl, sl, #1
 800bada:	9304      	str	r3, [sp, #16]
 800badc:	9307      	str	r3, [sp, #28]
 800bade:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bae2:	931a      	str	r3, [sp, #104]	@ 0x68
 800bae4:	4654      	mov	r4, sl
 800bae6:	2205      	movs	r2, #5
 800bae8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800baec:	484e      	ldr	r0, [pc, #312]	@ (800bc28 <_svfiprintf_r+0x1e4>)
 800baee:	f7f4 fb6f 	bl	80001d0 <memchr>
 800baf2:	9a04      	ldr	r2, [sp, #16]
 800baf4:	b9d8      	cbnz	r0, 800bb2e <_svfiprintf_r+0xea>
 800baf6:	06d0      	lsls	r0, r2, #27
 800baf8:	bf44      	itt	mi
 800bafa:	2320      	movmi	r3, #32
 800bafc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb00:	0711      	lsls	r1, r2, #28
 800bb02:	bf44      	itt	mi
 800bb04:	232b      	movmi	r3, #43	@ 0x2b
 800bb06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb0a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb10:	d015      	beq.n	800bb3e <_svfiprintf_r+0xfa>
 800bb12:	9a07      	ldr	r2, [sp, #28]
 800bb14:	4654      	mov	r4, sl
 800bb16:	2000      	movs	r0, #0
 800bb18:	f04f 0c0a 	mov.w	ip, #10
 800bb1c:	4621      	mov	r1, r4
 800bb1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bb22:	3b30      	subs	r3, #48	@ 0x30
 800bb24:	2b09      	cmp	r3, #9
 800bb26:	d94b      	bls.n	800bbc0 <_svfiprintf_r+0x17c>
 800bb28:	b1b0      	cbz	r0, 800bb58 <_svfiprintf_r+0x114>
 800bb2a:	9207      	str	r2, [sp, #28]
 800bb2c:	e014      	b.n	800bb58 <_svfiprintf_r+0x114>
 800bb2e:	eba0 0308 	sub.w	r3, r0, r8
 800bb32:	fa09 f303 	lsl.w	r3, r9, r3
 800bb36:	4313      	orrs	r3, r2
 800bb38:	9304      	str	r3, [sp, #16]
 800bb3a:	46a2      	mov	sl, r4
 800bb3c:	e7d2      	b.n	800bae4 <_svfiprintf_r+0xa0>
 800bb3e:	9b03      	ldr	r3, [sp, #12]
 800bb40:	1d19      	adds	r1, r3, #4
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	9103      	str	r1, [sp, #12]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	bfbb      	ittet	lt
 800bb4a:	425b      	neglt	r3, r3
 800bb4c:	f042 0202 	orrlt.w	r2, r2, #2
 800bb50:	9307      	strge	r3, [sp, #28]
 800bb52:	9307      	strlt	r3, [sp, #28]
 800bb54:	bfb8      	it	lt
 800bb56:	9204      	strlt	r2, [sp, #16]
 800bb58:	7823      	ldrb	r3, [r4, #0]
 800bb5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800bb5c:	d10a      	bne.n	800bb74 <_svfiprintf_r+0x130>
 800bb5e:	7863      	ldrb	r3, [r4, #1]
 800bb60:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb62:	d132      	bne.n	800bbca <_svfiprintf_r+0x186>
 800bb64:	9b03      	ldr	r3, [sp, #12]
 800bb66:	1d1a      	adds	r2, r3, #4
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	9203      	str	r2, [sp, #12]
 800bb6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bb70:	3402      	adds	r4, #2
 800bb72:	9305      	str	r3, [sp, #20]
 800bb74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bc38 <_svfiprintf_r+0x1f4>
 800bb78:	7821      	ldrb	r1, [r4, #0]
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	4650      	mov	r0, sl
 800bb7e:	f7f4 fb27 	bl	80001d0 <memchr>
 800bb82:	b138      	cbz	r0, 800bb94 <_svfiprintf_r+0x150>
 800bb84:	9b04      	ldr	r3, [sp, #16]
 800bb86:	eba0 000a 	sub.w	r0, r0, sl
 800bb8a:	2240      	movs	r2, #64	@ 0x40
 800bb8c:	4082      	lsls	r2, r0
 800bb8e:	4313      	orrs	r3, r2
 800bb90:	3401      	adds	r4, #1
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb98:	4824      	ldr	r0, [pc, #144]	@ (800bc2c <_svfiprintf_r+0x1e8>)
 800bb9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bb9e:	2206      	movs	r2, #6
 800bba0:	f7f4 fb16 	bl	80001d0 <memchr>
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d036      	beq.n	800bc16 <_svfiprintf_r+0x1d2>
 800bba8:	4b21      	ldr	r3, [pc, #132]	@ (800bc30 <_svfiprintf_r+0x1ec>)
 800bbaa:	bb1b      	cbnz	r3, 800bbf4 <_svfiprintf_r+0x1b0>
 800bbac:	9b03      	ldr	r3, [sp, #12]
 800bbae:	3307      	adds	r3, #7
 800bbb0:	f023 0307 	bic.w	r3, r3, #7
 800bbb4:	3308      	adds	r3, #8
 800bbb6:	9303      	str	r3, [sp, #12]
 800bbb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbba:	4433      	add	r3, r6
 800bbbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbbe:	e76a      	b.n	800ba96 <_svfiprintf_r+0x52>
 800bbc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	2001      	movs	r0, #1
 800bbc8:	e7a8      	b.n	800bb1c <_svfiprintf_r+0xd8>
 800bbca:	2300      	movs	r3, #0
 800bbcc:	3401      	adds	r4, #1
 800bbce:	9305      	str	r3, [sp, #20]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f04f 0c0a 	mov.w	ip, #10
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbdc:	3a30      	subs	r2, #48	@ 0x30
 800bbde:	2a09      	cmp	r2, #9
 800bbe0:	d903      	bls.n	800bbea <_svfiprintf_r+0x1a6>
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d0c6      	beq.n	800bb74 <_svfiprintf_r+0x130>
 800bbe6:	9105      	str	r1, [sp, #20]
 800bbe8:	e7c4      	b.n	800bb74 <_svfiprintf_r+0x130>
 800bbea:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbee:	4604      	mov	r4, r0
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e7f0      	b.n	800bbd6 <_svfiprintf_r+0x192>
 800bbf4:	ab03      	add	r3, sp, #12
 800bbf6:	9300      	str	r3, [sp, #0]
 800bbf8:	462a      	mov	r2, r5
 800bbfa:	4b0e      	ldr	r3, [pc, #56]	@ (800bc34 <_svfiprintf_r+0x1f0>)
 800bbfc:	a904      	add	r1, sp, #16
 800bbfe:	4638      	mov	r0, r7
 800bc00:	f7fd fd6a 	bl	80096d8 <_printf_float>
 800bc04:	1c42      	adds	r2, r0, #1
 800bc06:	4606      	mov	r6, r0
 800bc08:	d1d6      	bne.n	800bbb8 <_svfiprintf_r+0x174>
 800bc0a:	89ab      	ldrh	r3, [r5, #12]
 800bc0c:	065b      	lsls	r3, r3, #25
 800bc0e:	f53f af2d 	bmi.w	800ba6c <_svfiprintf_r+0x28>
 800bc12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bc14:	e72c      	b.n	800ba70 <_svfiprintf_r+0x2c>
 800bc16:	ab03      	add	r3, sp, #12
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	462a      	mov	r2, r5
 800bc1c:	4b05      	ldr	r3, [pc, #20]	@ (800bc34 <_svfiprintf_r+0x1f0>)
 800bc1e:	a904      	add	r1, sp, #16
 800bc20:	4638      	mov	r0, r7
 800bc22:	f7fd fff1 	bl	8009c08 <_printf_i>
 800bc26:	e7ed      	b.n	800bc04 <_svfiprintf_r+0x1c0>
 800bc28:	0800caca 	.word	0x0800caca
 800bc2c:	0800cad4 	.word	0x0800cad4
 800bc30:	080096d9 	.word	0x080096d9
 800bc34:	0800b98d 	.word	0x0800b98d
 800bc38:	0800cad0 	.word	0x0800cad0

0800bc3c <__sflush_r>:
 800bc3c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc44:	0716      	lsls	r6, r2, #28
 800bc46:	4605      	mov	r5, r0
 800bc48:	460c      	mov	r4, r1
 800bc4a:	d454      	bmi.n	800bcf6 <__sflush_r+0xba>
 800bc4c:	684b      	ldr	r3, [r1, #4]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	dc02      	bgt.n	800bc58 <__sflush_r+0x1c>
 800bc52:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	dd48      	ble.n	800bcea <__sflush_r+0xae>
 800bc58:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc5a:	2e00      	cmp	r6, #0
 800bc5c:	d045      	beq.n	800bcea <__sflush_r+0xae>
 800bc5e:	2300      	movs	r3, #0
 800bc60:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bc64:	682f      	ldr	r7, [r5, #0]
 800bc66:	6a21      	ldr	r1, [r4, #32]
 800bc68:	602b      	str	r3, [r5, #0]
 800bc6a:	d030      	beq.n	800bcce <__sflush_r+0x92>
 800bc6c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bc6e:	89a3      	ldrh	r3, [r4, #12]
 800bc70:	0759      	lsls	r1, r3, #29
 800bc72:	d505      	bpl.n	800bc80 <__sflush_r+0x44>
 800bc74:	6863      	ldr	r3, [r4, #4]
 800bc76:	1ad2      	subs	r2, r2, r3
 800bc78:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bc7a:	b10b      	cbz	r3, 800bc80 <__sflush_r+0x44>
 800bc7c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bc7e:	1ad2      	subs	r2, r2, r3
 800bc80:	2300      	movs	r3, #0
 800bc82:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bc84:	6a21      	ldr	r1, [r4, #32]
 800bc86:	4628      	mov	r0, r5
 800bc88:	47b0      	blx	r6
 800bc8a:	1c43      	adds	r3, r0, #1
 800bc8c:	89a3      	ldrh	r3, [r4, #12]
 800bc8e:	d106      	bne.n	800bc9e <__sflush_r+0x62>
 800bc90:	6829      	ldr	r1, [r5, #0]
 800bc92:	291d      	cmp	r1, #29
 800bc94:	d82b      	bhi.n	800bcee <__sflush_r+0xb2>
 800bc96:	4a2a      	ldr	r2, [pc, #168]	@ (800bd40 <__sflush_r+0x104>)
 800bc98:	40ca      	lsrs	r2, r1
 800bc9a:	07d6      	lsls	r6, r2, #31
 800bc9c:	d527      	bpl.n	800bcee <__sflush_r+0xb2>
 800bc9e:	2200      	movs	r2, #0
 800bca0:	6062      	str	r2, [r4, #4]
 800bca2:	04d9      	lsls	r1, r3, #19
 800bca4:	6922      	ldr	r2, [r4, #16]
 800bca6:	6022      	str	r2, [r4, #0]
 800bca8:	d504      	bpl.n	800bcb4 <__sflush_r+0x78>
 800bcaa:	1c42      	adds	r2, r0, #1
 800bcac:	d101      	bne.n	800bcb2 <__sflush_r+0x76>
 800bcae:	682b      	ldr	r3, [r5, #0]
 800bcb0:	b903      	cbnz	r3, 800bcb4 <__sflush_r+0x78>
 800bcb2:	6560      	str	r0, [r4, #84]	@ 0x54
 800bcb4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bcb6:	602f      	str	r7, [r5, #0]
 800bcb8:	b1b9      	cbz	r1, 800bcea <__sflush_r+0xae>
 800bcba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bcbe:	4299      	cmp	r1, r3
 800bcc0:	d002      	beq.n	800bcc8 <__sflush_r+0x8c>
 800bcc2:	4628      	mov	r0, r5
 800bcc4:	f7ff f9e8 	bl	800b098 <_free_r>
 800bcc8:	2300      	movs	r3, #0
 800bcca:	6363      	str	r3, [r4, #52]	@ 0x34
 800bccc:	e00d      	b.n	800bcea <__sflush_r+0xae>
 800bcce:	2301      	movs	r3, #1
 800bcd0:	4628      	mov	r0, r5
 800bcd2:	47b0      	blx	r6
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	1c50      	adds	r0, r2, #1
 800bcd8:	d1c9      	bne.n	800bc6e <__sflush_r+0x32>
 800bcda:	682b      	ldr	r3, [r5, #0]
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d0c6      	beq.n	800bc6e <__sflush_r+0x32>
 800bce0:	2b1d      	cmp	r3, #29
 800bce2:	d001      	beq.n	800bce8 <__sflush_r+0xac>
 800bce4:	2b16      	cmp	r3, #22
 800bce6:	d11e      	bne.n	800bd26 <__sflush_r+0xea>
 800bce8:	602f      	str	r7, [r5, #0]
 800bcea:	2000      	movs	r0, #0
 800bcec:	e022      	b.n	800bd34 <__sflush_r+0xf8>
 800bcee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bcf2:	b21b      	sxth	r3, r3
 800bcf4:	e01b      	b.n	800bd2e <__sflush_r+0xf2>
 800bcf6:	690f      	ldr	r7, [r1, #16]
 800bcf8:	2f00      	cmp	r7, #0
 800bcfa:	d0f6      	beq.n	800bcea <__sflush_r+0xae>
 800bcfc:	0793      	lsls	r3, r2, #30
 800bcfe:	680e      	ldr	r6, [r1, #0]
 800bd00:	bf08      	it	eq
 800bd02:	694b      	ldreq	r3, [r1, #20]
 800bd04:	600f      	str	r7, [r1, #0]
 800bd06:	bf18      	it	ne
 800bd08:	2300      	movne	r3, #0
 800bd0a:	eba6 0807 	sub.w	r8, r6, r7
 800bd0e:	608b      	str	r3, [r1, #8]
 800bd10:	f1b8 0f00 	cmp.w	r8, #0
 800bd14:	dde9      	ble.n	800bcea <__sflush_r+0xae>
 800bd16:	6a21      	ldr	r1, [r4, #32]
 800bd18:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bd1a:	4643      	mov	r3, r8
 800bd1c:	463a      	mov	r2, r7
 800bd1e:	4628      	mov	r0, r5
 800bd20:	47b0      	blx	r6
 800bd22:	2800      	cmp	r0, #0
 800bd24:	dc08      	bgt.n	800bd38 <__sflush_r+0xfc>
 800bd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd2e:	81a3      	strh	r3, [r4, #12]
 800bd30:	f04f 30ff 	mov.w	r0, #4294967295
 800bd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd38:	4407      	add	r7, r0
 800bd3a:	eba8 0800 	sub.w	r8, r8, r0
 800bd3e:	e7e7      	b.n	800bd10 <__sflush_r+0xd4>
 800bd40:	20400001 	.word	0x20400001

0800bd44 <_fflush_r>:
 800bd44:	b538      	push	{r3, r4, r5, lr}
 800bd46:	690b      	ldr	r3, [r1, #16]
 800bd48:	4605      	mov	r5, r0
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	b913      	cbnz	r3, 800bd54 <_fflush_r+0x10>
 800bd4e:	2500      	movs	r5, #0
 800bd50:	4628      	mov	r0, r5
 800bd52:	bd38      	pop	{r3, r4, r5, pc}
 800bd54:	b118      	cbz	r0, 800bd5e <_fflush_r+0x1a>
 800bd56:	6a03      	ldr	r3, [r0, #32]
 800bd58:	b90b      	cbnz	r3, 800bd5e <_fflush_r+0x1a>
 800bd5a:	f7fe f8ff 	bl	8009f5c <__sinit>
 800bd5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d0f3      	beq.n	800bd4e <_fflush_r+0xa>
 800bd66:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bd68:	07d0      	lsls	r0, r2, #31
 800bd6a:	d404      	bmi.n	800bd76 <_fflush_r+0x32>
 800bd6c:	0599      	lsls	r1, r3, #22
 800bd6e:	d402      	bmi.n	800bd76 <_fflush_r+0x32>
 800bd70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd72:	f7fe fb34 	bl	800a3de <__retarget_lock_acquire_recursive>
 800bd76:	4628      	mov	r0, r5
 800bd78:	4621      	mov	r1, r4
 800bd7a:	f7ff ff5f 	bl	800bc3c <__sflush_r>
 800bd7e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bd80:	07da      	lsls	r2, r3, #31
 800bd82:	4605      	mov	r5, r0
 800bd84:	d4e4      	bmi.n	800bd50 <_fflush_r+0xc>
 800bd86:	89a3      	ldrh	r3, [r4, #12]
 800bd88:	059b      	lsls	r3, r3, #22
 800bd8a:	d4e1      	bmi.n	800bd50 <_fflush_r+0xc>
 800bd8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bd8e:	f7fe fb27 	bl	800a3e0 <__retarget_lock_release_recursive>
 800bd92:	e7dd      	b.n	800bd50 <_fflush_r+0xc>

0800bd94 <__swhatbuf_r>:
 800bd94:	b570      	push	{r4, r5, r6, lr}
 800bd96:	460c      	mov	r4, r1
 800bd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bd9c:	2900      	cmp	r1, #0
 800bd9e:	b096      	sub	sp, #88	@ 0x58
 800bda0:	4615      	mov	r5, r2
 800bda2:	461e      	mov	r6, r3
 800bda4:	da0d      	bge.n	800bdc2 <__swhatbuf_r+0x2e>
 800bda6:	89a3      	ldrh	r3, [r4, #12]
 800bda8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bdac:	f04f 0100 	mov.w	r1, #0
 800bdb0:	bf14      	ite	ne
 800bdb2:	2340      	movne	r3, #64	@ 0x40
 800bdb4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bdb8:	2000      	movs	r0, #0
 800bdba:	6031      	str	r1, [r6, #0]
 800bdbc:	602b      	str	r3, [r5, #0]
 800bdbe:	b016      	add	sp, #88	@ 0x58
 800bdc0:	bd70      	pop	{r4, r5, r6, pc}
 800bdc2:	466a      	mov	r2, sp
 800bdc4:	f000 f862 	bl	800be8c <_fstat_r>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	dbec      	blt.n	800bda6 <__swhatbuf_r+0x12>
 800bdcc:	9901      	ldr	r1, [sp, #4]
 800bdce:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bdd2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bdd6:	4259      	negs	r1, r3
 800bdd8:	4159      	adcs	r1, r3
 800bdda:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bdde:	e7eb      	b.n	800bdb8 <__swhatbuf_r+0x24>

0800bde0 <__smakebuf_r>:
 800bde0:	898b      	ldrh	r3, [r1, #12]
 800bde2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bde4:	079d      	lsls	r5, r3, #30
 800bde6:	4606      	mov	r6, r0
 800bde8:	460c      	mov	r4, r1
 800bdea:	d507      	bpl.n	800bdfc <__smakebuf_r+0x1c>
 800bdec:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bdf0:	6023      	str	r3, [r4, #0]
 800bdf2:	6123      	str	r3, [r4, #16]
 800bdf4:	2301      	movs	r3, #1
 800bdf6:	6163      	str	r3, [r4, #20]
 800bdf8:	b003      	add	sp, #12
 800bdfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bdfc:	ab01      	add	r3, sp, #4
 800bdfe:	466a      	mov	r2, sp
 800be00:	f7ff ffc8 	bl	800bd94 <__swhatbuf_r>
 800be04:	9f00      	ldr	r7, [sp, #0]
 800be06:	4605      	mov	r5, r0
 800be08:	4639      	mov	r1, r7
 800be0a:	4630      	mov	r0, r6
 800be0c:	f7ff f9b8 	bl	800b180 <_malloc_r>
 800be10:	b948      	cbnz	r0, 800be26 <__smakebuf_r+0x46>
 800be12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be16:	059a      	lsls	r2, r3, #22
 800be18:	d4ee      	bmi.n	800bdf8 <__smakebuf_r+0x18>
 800be1a:	f023 0303 	bic.w	r3, r3, #3
 800be1e:	f043 0302 	orr.w	r3, r3, #2
 800be22:	81a3      	strh	r3, [r4, #12]
 800be24:	e7e2      	b.n	800bdec <__smakebuf_r+0xc>
 800be26:	89a3      	ldrh	r3, [r4, #12]
 800be28:	6020      	str	r0, [r4, #0]
 800be2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800be2e:	81a3      	strh	r3, [r4, #12]
 800be30:	9b01      	ldr	r3, [sp, #4]
 800be32:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800be36:	b15b      	cbz	r3, 800be50 <__smakebuf_r+0x70>
 800be38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800be3c:	4630      	mov	r0, r6
 800be3e:	f000 f837 	bl	800beb0 <_isatty_r>
 800be42:	b128      	cbz	r0, 800be50 <__smakebuf_r+0x70>
 800be44:	89a3      	ldrh	r3, [r4, #12]
 800be46:	f023 0303 	bic.w	r3, r3, #3
 800be4a:	f043 0301 	orr.w	r3, r3, #1
 800be4e:	81a3      	strh	r3, [r4, #12]
 800be50:	89a3      	ldrh	r3, [r4, #12]
 800be52:	431d      	orrs	r5, r3
 800be54:	81a5      	strh	r5, [r4, #12]
 800be56:	e7cf      	b.n	800bdf8 <__smakebuf_r+0x18>

0800be58 <memmove>:
 800be58:	4288      	cmp	r0, r1
 800be5a:	b510      	push	{r4, lr}
 800be5c:	eb01 0402 	add.w	r4, r1, r2
 800be60:	d902      	bls.n	800be68 <memmove+0x10>
 800be62:	4284      	cmp	r4, r0
 800be64:	4623      	mov	r3, r4
 800be66:	d807      	bhi.n	800be78 <memmove+0x20>
 800be68:	1e43      	subs	r3, r0, #1
 800be6a:	42a1      	cmp	r1, r4
 800be6c:	d008      	beq.n	800be80 <memmove+0x28>
 800be6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800be72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800be76:	e7f8      	b.n	800be6a <memmove+0x12>
 800be78:	4402      	add	r2, r0
 800be7a:	4601      	mov	r1, r0
 800be7c:	428a      	cmp	r2, r1
 800be7e:	d100      	bne.n	800be82 <memmove+0x2a>
 800be80:	bd10      	pop	{r4, pc}
 800be82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800be86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800be8a:	e7f7      	b.n	800be7c <memmove+0x24>

0800be8c <_fstat_r>:
 800be8c:	b538      	push	{r3, r4, r5, lr}
 800be8e:	4d07      	ldr	r5, [pc, #28]	@ (800beac <_fstat_r+0x20>)
 800be90:	2300      	movs	r3, #0
 800be92:	4604      	mov	r4, r0
 800be94:	4608      	mov	r0, r1
 800be96:	4611      	mov	r1, r2
 800be98:	602b      	str	r3, [r5, #0]
 800be9a:	f7f5 ff4b 	bl	8001d34 <_fstat>
 800be9e:	1c43      	adds	r3, r0, #1
 800bea0:	d102      	bne.n	800bea8 <_fstat_r+0x1c>
 800bea2:	682b      	ldr	r3, [r5, #0]
 800bea4:	b103      	cbz	r3, 800bea8 <_fstat_r+0x1c>
 800bea6:	6023      	str	r3, [r4, #0]
 800bea8:	bd38      	pop	{r3, r4, r5, pc}
 800beaa:	bf00      	nop
 800beac:	200027e0 	.word	0x200027e0

0800beb0 <_isatty_r>:
 800beb0:	b538      	push	{r3, r4, r5, lr}
 800beb2:	4d06      	ldr	r5, [pc, #24]	@ (800becc <_isatty_r+0x1c>)
 800beb4:	2300      	movs	r3, #0
 800beb6:	4604      	mov	r4, r0
 800beb8:	4608      	mov	r0, r1
 800beba:	602b      	str	r3, [r5, #0]
 800bebc:	f7f5 ff4a 	bl	8001d54 <_isatty>
 800bec0:	1c43      	adds	r3, r0, #1
 800bec2:	d102      	bne.n	800beca <_isatty_r+0x1a>
 800bec4:	682b      	ldr	r3, [r5, #0]
 800bec6:	b103      	cbz	r3, 800beca <_isatty_r+0x1a>
 800bec8:	6023      	str	r3, [r4, #0]
 800beca:	bd38      	pop	{r3, r4, r5, pc}
 800becc:	200027e0 	.word	0x200027e0

0800bed0 <_sbrk_r>:
 800bed0:	b538      	push	{r3, r4, r5, lr}
 800bed2:	4d06      	ldr	r5, [pc, #24]	@ (800beec <_sbrk_r+0x1c>)
 800bed4:	2300      	movs	r3, #0
 800bed6:	4604      	mov	r4, r0
 800bed8:	4608      	mov	r0, r1
 800beda:	602b      	str	r3, [r5, #0]
 800bedc:	f7f5 ff52 	bl	8001d84 <_sbrk>
 800bee0:	1c43      	adds	r3, r0, #1
 800bee2:	d102      	bne.n	800beea <_sbrk_r+0x1a>
 800bee4:	682b      	ldr	r3, [r5, #0]
 800bee6:	b103      	cbz	r3, 800beea <_sbrk_r+0x1a>
 800bee8:	6023      	str	r3, [r4, #0]
 800beea:	bd38      	pop	{r3, r4, r5, pc}
 800beec:	200027e0 	.word	0x200027e0

0800bef0 <memcpy>:
 800bef0:	440a      	add	r2, r1
 800bef2:	4291      	cmp	r1, r2
 800bef4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bef8:	d100      	bne.n	800befc <memcpy+0xc>
 800befa:	4770      	bx	lr
 800befc:	b510      	push	{r4, lr}
 800befe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf06:	4291      	cmp	r1, r2
 800bf08:	d1f9      	bne.n	800befe <memcpy+0xe>
 800bf0a:	bd10      	pop	{r4, pc}

0800bf0c <__assert_func>:
 800bf0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf0e:	4614      	mov	r4, r2
 800bf10:	461a      	mov	r2, r3
 800bf12:	4b09      	ldr	r3, [pc, #36]	@ (800bf38 <__assert_func+0x2c>)
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	4605      	mov	r5, r0
 800bf18:	68d8      	ldr	r0, [r3, #12]
 800bf1a:	b14c      	cbz	r4, 800bf30 <__assert_func+0x24>
 800bf1c:	4b07      	ldr	r3, [pc, #28]	@ (800bf3c <__assert_func+0x30>)
 800bf1e:	9100      	str	r1, [sp, #0]
 800bf20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf24:	4906      	ldr	r1, [pc, #24]	@ (800bf40 <__assert_func+0x34>)
 800bf26:	462b      	mov	r3, r5
 800bf28:	f000 f870 	bl	800c00c <fiprintf>
 800bf2c:	f000 f880 	bl	800c030 <abort>
 800bf30:	4b04      	ldr	r3, [pc, #16]	@ (800bf44 <__assert_func+0x38>)
 800bf32:	461c      	mov	r4, r3
 800bf34:	e7f3      	b.n	800bf1e <__assert_func+0x12>
 800bf36:	bf00      	nop
 800bf38:	2000002c 	.word	0x2000002c
 800bf3c:	0800cae5 	.word	0x0800cae5
 800bf40:	0800caf2 	.word	0x0800caf2
 800bf44:	0800cb20 	.word	0x0800cb20

0800bf48 <_calloc_r>:
 800bf48:	b570      	push	{r4, r5, r6, lr}
 800bf4a:	fba1 5402 	umull	r5, r4, r1, r2
 800bf4e:	b934      	cbnz	r4, 800bf5e <_calloc_r+0x16>
 800bf50:	4629      	mov	r1, r5
 800bf52:	f7ff f915 	bl	800b180 <_malloc_r>
 800bf56:	4606      	mov	r6, r0
 800bf58:	b928      	cbnz	r0, 800bf66 <_calloc_r+0x1e>
 800bf5a:	4630      	mov	r0, r6
 800bf5c:	bd70      	pop	{r4, r5, r6, pc}
 800bf5e:	220c      	movs	r2, #12
 800bf60:	6002      	str	r2, [r0, #0]
 800bf62:	2600      	movs	r6, #0
 800bf64:	e7f9      	b.n	800bf5a <_calloc_r+0x12>
 800bf66:	462a      	mov	r2, r5
 800bf68:	4621      	mov	r1, r4
 800bf6a:	f7fe f9bb 	bl	800a2e4 <memset>
 800bf6e:	e7f4      	b.n	800bf5a <_calloc_r+0x12>

0800bf70 <__ascii_mbtowc>:
 800bf70:	b082      	sub	sp, #8
 800bf72:	b901      	cbnz	r1, 800bf76 <__ascii_mbtowc+0x6>
 800bf74:	a901      	add	r1, sp, #4
 800bf76:	b142      	cbz	r2, 800bf8a <__ascii_mbtowc+0x1a>
 800bf78:	b14b      	cbz	r3, 800bf8e <__ascii_mbtowc+0x1e>
 800bf7a:	7813      	ldrb	r3, [r2, #0]
 800bf7c:	600b      	str	r3, [r1, #0]
 800bf7e:	7812      	ldrb	r2, [r2, #0]
 800bf80:	1e10      	subs	r0, r2, #0
 800bf82:	bf18      	it	ne
 800bf84:	2001      	movne	r0, #1
 800bf86:	b002      	add	sp, #8
 800bf88:	4770      	bx	lr
 800bf8a:	4610      	mov	r0, r2
 800bf8c:	e7fb      	b.n	800bf86 <__ascii_mbtowc+0x16>
 800bf8e:	f06f 0001 	mvn.w	r0, #1
 800bf92:	e7f8      	b.n	800bf86 <__ascii_mbtowc+0x16>

0800bf94 <_realloc_r>:
 800bf94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf98:	4607      	mov	r7, r0
 800bf9a:	4614      	mov	r4, r2
 800bf9c:	460d      	mov	r5, r1
 800bf9e:	b921      	cbnz	r1, 800bfaa <_realloc_r+0x16>
 800bfa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa4:	4611      	mov	r1, r2
 800bfa6:	f7ff b8eb 	b.w	800b180 <_malloc_r>
 800bfaa:	b92a      	cbnz	r2, 800bfb8 <_realloc_r+0x24>
 800bfac:	f7ff f874 	bl	800b098 <_free_r>
 800bfb0:	4625      	mov	r5, r4
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfb8:	f000 f841 	bl	800c03e <_malloc_usable_size_r>
 800bfbc:	4284      	cmp	r4, r0
 800bfbe:	4606      	mov	r6, r0
 800bfc0:	d802      	bhi.n	800bfc8 <_realloc_r+0x34>
 800bfc2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfc6:	d8f4      	bhi.n	800bfb2 <_realloc_r+0x1e>
 800bfc8:	4621      	mov	r1, r4
 800bfca:	4638      	mov	r0, r7
 800bfcc:	f7ff f8d8 	bl	800b180 <_malloc_r>
 800bfd0:	4680      	mov	r8, r0
 800bfd2:	b908      	cbnz	r0, 800bfd8 <_realloc_r+0x44>
 800bfd4:	4645      	mov	r5, r8
 800bfd6:	e7ec      	b.n	800bfb2 <_realloc_r+0x1e>
 800bfd8:	42b4      	cmp	r4, r6
 800bfda:	4622      	mov	r2, r4
 800bfdc:	4629      	mov	r1, r5
 800bfde:	bf28      	it	cs
 800bfe0:	4632      	movcs	r2, r6
 800bfe2:	f7ff ff85 	bl	800bef0 <memcpy>
 800bfe6:	4629      	mov	r1, r5
 800bfe8:	4638      	mov	r0, r7
 800bfea:	f7ff f855 	bl	800b098 <_free_r>
 800bfee:	e7f1      	b.n	800bfd4 <_realloc_r+0x40>

0800bff0 <__ascii_wctomb>:
 800bff0:	4603      	mov	r3, r0
 800bff2:	4608      	mov	r0, r1
 800bff4:	b141      	cbz	r1, 800c008 <__ascii_wctomb+0x18>
 800bff6:	2aff      	cmp	r2, #255	@ 0xff
 800bff8:	d904      	bls.n	800c004 <__ascii_wctomb+0x14>
 800bffa:	228a      	movs	r2, #138	@ 0x8a
 800bffc:	601a      	str	r2, [r3, #0]
 800bffe:	f04f 30ff 	mov.w	r0, #4294967295
 800c002:	4770      	bx	lr
 800c004:	700a      	strb	r2, [r1, #0]
 800c006:	2001      	movs	r0, #1
 800c008:	4770      	bx	lr
	...

0800c00c <fiprintf>:
 800c00c:	b40e      	push	{r1, r2, r3}
 800c00e:	b503      	push	{r0, r1, lr}
 800c010:	4601      	mov	r1, r0
 800c012:	ab03      	add	r3, sp, #12
 800c014:	4805      	ldr	r0, [pc, #20]	@ (800c02c <fiprintf+0x20>)
 800c016:	f853 2b04 	ldr.w	r2, [r3], #4
 800c01a:	6800      	ldr	r0, [r0, #0]
 800c01c:	9301      	str	r3, [sp, #4]
 800c01e:	f000 f83f 	bl	800c0a0 <_vfiprintf_r>
 800c022:	b002      	add	sp, #8
 800c024:	f85d eb04 	ldr.w	lr, [sp], #4
 800c028:	b003      	add	sp, #12
 800c02a:	4770      	bx	lr
 800c02c:	2000002c 	.word	0x2000002c

0800c030 <abort>:
 800c030:	b508      	push	{r3, lr}
 800c032:	2006      	movs	r0, #6
 800c034:	f000 f974 	bl	800c320 <raise>
 800c038:	2001      	movs	r0, #1
 800c03a:	f7f5 fe2b 	bl	8001c94 <_exit>

0800c03e <_malloc_usable_size_r>:
 800c03e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c042:	1f18      	subs	r0, r3, #4
 800c044:	2b00      	cmp	r3, #0
 800c046:	bfbc      	itt	lt
 800c048:	580b      	ldrlt	r3, [r1, r0]
 800c04a:	18c0      	addlt	r0, r0, r3
 800c04c:	4770      	bx	lr

0800c04e <__sfputc_r>:
 800c04e:	6893      	ldr	r3, [r2, #8]
 800c050:	3b01      	subs	r3, #1
 800c052:	2b00      	cmp	r3, #0
 800c054:	b410      	push	{r4}
 800c056:	6093      	str	r3, [r2, #8]
 800c058:	da08      	bge.n	800c06c <__sfputc_r+0x1e>
 800c05a:	6994      	ldr	r4, [r2, #24]
 800c05c:	42a3      	cmp	r3, r4
 800c05e:	db01      	blt.n	800c064 <__sfputc_r+0x16>
 800c060:	290a      	cmp	r1, #10
 800c062:	d103      	bne.n	800c06c <__sfputc_r+0x1e>
 800c064:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c068:	f7fe b8a7 	b.w	800a1ba <__swbuf_r>
 800c06c:	6813      	ldr	r3, [r2, #0]
 800c06e:	1c58      	adds	r0, r3, #1
 800c070:	6010      	str	r0, [r2, #0]
 800c072:	7019      	strb	r1, [r3, #0]
 800c074:	4608      	mov	r0, r1
 800c076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c07a:	4770      	bx	lr

0800c07c <__sfputs_r>:
 800c07c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c07e:	4606      	mov	r6, r0
 800c080:	460f      	mov	r7, r1
 800c082:	4614      	mov	r4, r2
 800c084:	18d5      	adds	r5, r2, r3
 800c086:	42ac      	cmp	r4, r5
 800c088:	d101      	bne.n	800c08e <__sfputs_r+0x12>
 800c08a:	2000      	movs	r0, #0
 800c08c:	e007      	b.n	800c09e <__sfputs_r+0x22>
 800c08e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c092:	463a      	mov	r2, r7
 800c094:	4630      	mov	r0, r6
 800c096:	f7ff ffda 	bl	800c04e <__sfputc_r>
 800c09a:	1c43      	adds	r3, r0, #1
 800c09c:	d1f3      	bne.n	800c086 <__sfputs_r+0xa>
 800c09e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c0a0 <_vfiprintf_r>:
 800c0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0a4:	460d      	mov	r5, r1
 800c0a6:	b09d      	sub	sp, #116	@ 0x74
 800c0a8:	4614      	mov	r4, r2
 800c0aa:	4698      	mov	r8, r3
 800c0ac:	4606      	mov	r6, r0
 800c0ae:	b118      	cbz	r0, 800c0b8 <_vfiprintf_r+0x18>
 800c0b0:	6a03      	ldr	r3, [r0, #32]
 800c0b2:	b90b      	cbnz	r3, 800c0b8 <_vfiprintf_r+0x18>
 800c0b4:	f7fd ff52 	bl	8009f5c <__sinit>
 800c0b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0ba:	07d9      	lsls	r1, r3, #31
 800c0bc:	d405      	bmi.n	800c0ca <_vfiprintf_r+0x2a>
 800c0be:	89ab      	ldrh	r3, [r5, #12]
 800c0c0:	059a      	lsls	r2, r3, #22
 800c0c2:	d402      	bmi.n	800c0ca <_vfiprintf_r+0x2a>
 800c0c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0c6:	f7fe f98a 	bl	800a3de <__retarget_lock_acquire_recursive>
 800c0ca:	89ab      	ldrh	r3, [r5, #12]
 800c0cc:	071b      	lsls	r3, r3, #28
 800c0ce:	d501      	bpl.n	800c0d4 <_vfiprintf_r+0x34>
 800c0d0:	692b      	ldr	r3, [r5, #16]
 800c0d2:	b99b      	cbnz	r3, 800c0fc <_vfiprintf_r+0x5c>
 800c0d4:	4629      	mov	r1, r5
 800c0d6:	4630      	mov	r0, r6
 800c0d8:	f7fe f8ae 	bl	800a238 <__swsetup_r>
 800c0dc:	b170      	cbz	r0, 800c0fc <_vfiprintf_r+0x5c>
 800c0de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c0e0:	07dc      	lsls	r4, r3, #31
 800c0e2:	d504      	bpl.n	800c0ee <_vfiprintf_r+0x4e>
 800c0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c0e8:	b01d      	add	sp, #116	@ 0x74
 800c0ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c0ee:	89ab      	ldrh	r3, [r5, #12]
 800c0f0:	0598      	lsls	r0, r3, #22
 800c0f2:	d4f7      	bmi.n	800c0e4 <_vfiprintf_r+0x44>
 800c0f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c0f6:	f7fe f973 	bl	800a3e0 <__retarget_lock_release_recursive>
 800c0fa:	e7f3      	b.n	800c0e4 <_vfiprintf_r+0x44>
 800c0fc:	2300      	movs	r3, #0
 800c0fe:	9309      	str	r3, [sp, #36]	@ 0x24
 800c100:	2320      	movs	r3, #32
 800c102:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c106:	f8cd 800c 	str.w	r8, [sp, #12]
 800c10a:	2330      	movs	r3, #48	@ 0x30
 800c10c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c2bc <_vfiprintf_r+0x21c>
 800c110:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c114:	f04f 0901 	mov.w	r9, #1
 800c118:	4623      	mov	r3, r4
 800c11a:	469a      	mov	sl, r3
 800c11c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c120:	b10a      	cbz	r2, 800c126 <_vfiprintf_r+0x86>
 800c122:	2a25      	cmp	r2, #37	@ 0x25
 800c124:	d1f9      	bne.n	800c11a <_vfiprintf_r+0x7a>
 800c126:	ebba 0b04 	subs.w	fp, sl, r4
 800c12a:	d00b      	beq.n	800c144 <_vfiprintf_r+0xa4>
 800c12c:	465b      	mov	r3, fp
 800c12e:	4622      	mov	r2, r4
 800c130:	4629      	mov	r1, r5
 800c132:	4630      	mov	r0, r6
 800c134:	f7ff ffa2 	bl	800c07c <__sfputs_r>
 800c138:	3001      	adds	r0, #1
 800c13a:	f000 80a7 	beq.w	800c28c <_vfiprintf_r+0x1ec>
 800c13e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c140:	445a      	add	r2, fp
 800c142:	9209      	str	r2, [sp, #36]	@ 0x24
 800c144:	f89a 3000 	ldrb.w	r3, [sl]
 800c148:	2b00      	cmp	r3, #0
 800c14a:	f000 809f 	beq.w	800c28c <_vfiprintf_r+0x1ec>
 800c14e:	2300      	movs	r3, #0
 800c150:	f04f 32ff 	mov.w	r2, #4294967295
 800c154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c158:	f10a 0a01 	add.w	sl, sl, #1
 800c15c:	9304      	str	r3, [sp, #16]
 800c15e:	9307      	str	r3, [sp, #28]
 800c160:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c164:	931a      	str	r3, [sp, #104]	@ 0x68
 800c166:	4654      	mov	r4, sl
 800c168:	2205      	movs	r2, #5
 800c16a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c16e:	4853      	ldr	r0, [pc, #332]	@ (800c2bc <_vfiprintf_r+0x21c>)
 800c170:	f7f4 f82e 	bl	80001d0 <memchr>
 800c174:	9a04      	ldr	r2, [sp, #16]
 800c176:	b9d8      	cbnz	r0, 800c1b0 <_vfiprintf_r+0x110>
 800c178:	06d1      	lsls	r1, r2, #27
 800c17a:	bf44      	itt	mi
 800c17c:	2320      	movmi	r3, #32
 800c17e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c182:	0713      	lsls	r3, r2, #28
 800c184:	bf44      	itt	mi
 800c186:	232b      	movmi	r3, #43	@ 0x2b
 800c188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c18c:	f89a 3000 	ldrb.w	r3, [sl]
 800c190:	2b2a      	cmp	r3, #42	@ 0x2a
 800c192:	d015      	beq.n	800c1c0 <_vfiprintf_r+0x120>
 800c194:	9a07      	ldr	r2, [sp, #28]
 800c196:	4654      	mov	r4, sl
 800c198:	2000      	movs	r0, #0
 800c19a:	f04f 0c0a 	mov.w	ip, #10
 800c19e:	4621      	mov	r1, r4
 800c1a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c1a4:	3b30      	subs	r3, #48	@ 0x30
 800c1a6:	2b09      	cmp	r3, #9
 800c1a8:	d94b      	bls.n	800c242 <_vfiprintf_r+0x1a2>
 800c1aa:	b1b0      	cbz	r0, 800c1da <_vfiprintf_r+0x13a>
 800c1ac:	9207      	str	r2, [sp, #28]
 800c1ae:	e014      	b.n	800c1da <_vfiprintf_r+0x13a>
 800c1b0:	eba0 0308 	sub.w	r3, r0, r8
 800c1b4:	fa09 f303 	lsl.w	r3, r9, r3
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	9304      	str	r3, [sp, #16]
 800c1bc:	46a2      	mov	sl, r4
 800c1be:	e7d2      	b.n	800c166 <_vfiprintf_r+0xc6>
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	1d19      	adds	r1, r3, #4
 800c1c4:	681b      	ldr	r3, [r3, #0]
 800c1c6:	9103      	str	r1, [sp, #12]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	bfbb      	ittet	lt
 800c1cc:	425b      	neglt	r3, r3
 800c1ce:	f042 0202 	orrlt.w	r2, r2, #2
 800c1d2:	9307      	strge	r3, [sp, #28]
 800c1d4:	9307      	strlt	r3, [sp, #28]
 800c1d6:	bfb8      	it	lt
 800c1d8:	9204      	strlt	r2, [sp, #16]
 800c1da:	7823      	ldrb	r3, [r4, #0]
 800c1dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800c1de:	d10a      	bne.n	800c1f6 <_vfiprintf_r+0x156>
 800c1e0:	7863      	ldrb	r3, [r4, #1]
 800c1e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800c1e4:	d132      	bne.n	800c24c <_vfiprintf_r+0x1ac>
 800c1e6:	9b03      	ldr	r3, [sp, #12]
 800c1e8:	1d1a      	adds	r2, r3, #4
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	9203      	str	r2, [sp, #12]
 800c1ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c1f2:	3402      	adds	r4, #2
 800c1f4:	9305      	str	r3, [sp, #20]
 800c1f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c2cc <_vfiprintf_r+0x22c>
 800c1fa:	7821      	ldrb	r1, [r4, #0]
 800c1fc:	2203      	movs	r2, #3
 800c1fe:	4650      	mov	r0, sl
 800c200:	f7f3 ffe6 	bl	80001d0 <memchr>
 800c204:	b138      	cbz	r0, 800c216 <_vfiprintf_r+0x176>
 800c206:	9b04      	ldr	r3, [sp, #16]
 800c208:	eba0 000a 	sub.w	r0, r0, sl
 800c20c:	2240      	movs	r2, #64	@ 0x40
 800c20e:	4082      	lsls	r2, r0
 800c210:	4313      	orrs	r3, r2
 800c212:	3401      	adds	r4, #1
 800c214:	9304      	str	r3, [sp, #16]
 800c216:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c21a:	4829      	ldr	r0, [pc, #164]	@ (800c2c0 <_vfiprintf_r+0x220>)
 800c21c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c220:	2206      	movs	r2, #6
 800c222:	f7f3 ffd5 	bl	80001d0 <memchr>
 800c226:	2800      	cmp	r0, #0
 800c228:	d03f      	beq.n	800c2aa <_vfiprintf_r+0x20a>
 800c22a:	4b26      	ldr	r3, [pc, #152]	@ (800c2c4 <_vfiprintf_r+0x224>)
 800c22c:	bb1b      	cbnz	r3, 800c276 <_vfiprintf_r+0x1d6>
 800c22e:	9b03      	ldr	r3, [sp, #12]
 800c230:	3307      	adds	r3, #7
 800c232:	f023 0307 	bic.w	r3, r3, #7
 800c236:	3308      	adds	r3, #8
 800c238:	9303      	str	r3, [sp, #12]
 800c23a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c23c:	443b      	add	r3, r7
 800c23e:	9309      	str	r3, [sp, #36]	@ 0x24
 800c240:	e76a      	b.n	800c118 <_vfiprintf_r+0x78>
 800c242:	fb0c 3202 	mla	r2, ip, r2, r3
 800c246:	460c      	mov	r4, r1
 800c248:	2001      	movs	r0, #1
 800c24a:	e7a8      	b.n	800c19e <_vfiprintf_r+0xfe>
 800c24c:	2300      	movs	r3, #0
 800c24e:	3401      	adds	r4, #1
 800c250:	9305      	str	r3, [sp, #20]
 800c252:	4619      	mov	r1, r3
 800c254:	f04f 0c0a 	mov.w	ip, #10
 800c258:	4620      	mov	r0, r4
 800c25a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c25e:	3a30      	subs	r2, #48	@ 0x30
 800c260:	2a09      	cmp	r2, #9
 800c262:	d903      	bls.n	800c26c <_vfiprintf_r+0x1cc>
 800c264:	2b00      	cmp	r3, #0
 800c266:	d0c6      	beq.n	800c1f6 <_vfiprintf_r+0x156>
 800c268:	9105      	str	r1, [sp, #20]
 800c26a:	e7c4      	b.n	800c1f6 <_vfiprintf_r+0x156>
 800c26c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c270:	4604      	mov	r4, r0
 800c272:	2301      	movs	r3, #1
 800c274:	e7f0      	b.n	800c258 <_vfiprintf_r+0x1b8>
 800c276:	ab03      	add	r3, sp, #12
 800c278:	9300      	str	r3, [sp, #0]
 800c27a:	462a      	mov	r2, r5
 800c27c:	4b12      	ldr	r3, [pc, #72]	@ (800c2c8 <_vfiprintf_r+0x228>)
 800c27e:	a904      	add	r1, sp, #16
 800c280:	4630      	mov	r0, r6
 800c282:	f7fd fa29 	bl	80096d8 <_printf_float>
 800c286:	4607      	mov	r7, r0
 800c288:	1c78      	adds	r0, r7, #1
 800c28a:	d1d6      	bne.n	800c23a <_vfiprintf_r+0x19a>
 800c28c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c28e:	07d9      	lsls	r1, r3, #31
 800c290:	d405      	bmi.n	800c29e <_vfiprintf_r+0x1fe>
 800c292:	89ab      	ldrh	r3, [r5, #12]
 800c294:	059a      	lsls	r2, r3, #22
 800c296:	d402      	bmi.n	800c29e <_vfiprintf_r+0x1fe>
 800c298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c29a:	f7fe f8a1 	bl	800a3e0 <__retarget_lock_release_recursive>
 800c29e:	89ab      	ldrh	r3, [r5, #12]
 800c2a0:	065b      	lsls	r3, r3, #25
 800c2a2:	f53f af1f 	bmi.w	800c0e4 <_vfiprintf_r+0x44>
 800c2a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c2a8:	e71e      	b.n	800c0e8 <_vfiprintf_r+0x48>
 800c2aa:	ab03      	add	r3, sp, #12
 800c2ac:	9300      	str	r3, [sp, #0]
 800c2ae:	462a      	mov	r2, r5
 800c2b0:	4b05      	ldr	r3, [pc, #20]	@ (800c2c8 <_vfiprintf_r+0x228>)
 800c2b2:	a904      	add	r1, sp, #16
 800c2b4:	4630      	mov	r0, r6
 800c2b6:	f7fd fca7 	bl	8009c08 <_printf_i>
 800c2ba:	e7e4      	b.n	800c286 <_vfiprintf_r+0x1e6>
 800c2bc:	0800caca 	.word	0x0800caca
 800c2c0:	0800cad4 	.word	0x0800cad4
 800c2c4:	080096d9 	.word	0x080096d9
 800c2c8:	0800c07d 	.word	0x0800c07d
 800c2cc:	0800cad0 	.word	0x0800cad0

0800c2d0 <_raise_r>:
 800c2d0:	291f      	cmp	r1, #31
 800c2d2:	b538      	push	{r3, r4, r5, lr}
 800c2d4:	4605      	mov	r5, r0
 800c2d6:	460c      	mov	r4, r1
 800c2d8:	d904      	bls.n	800c2e4 <_raise_r+0x14>
 800c2da:	2316      	movs	r3, #22
 800c2dc:	6003      	str	r3, [r0, #0]
 800c2de:	f04f 30ff 	mov.w	r0, #4294967295
 800c2e2:	bd38      	pop	{r3, r4, r5, pc}
 800c2e4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c2e6:	b112      	cbz	r2, 800c2ee <_raise_r+0x1e>
 800c2e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c2ec:	b94b      	cbnz	r3, 800c302 <_raise_r+0x32>
 800c2ee:	4628      	mov	r0, r5
 800c2f0:	f000 f830 	bl	800c354 <_getpid_r>
 800c2f4:	4622      	mov	r2, r4
 800c2f6:	4601      	mov	r1, r0
 800c2f8:	4628      	mov	r0, r5
 800c2fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c2fe:	f000 b817 	b.w	800c330 <_kill_r>
 800c302:	2b01      	cmp	r3, #1
 800c304:	d00a      	beq.n	800c31c <_raise_r+0x4c>
 800c306:	1c59      	adds	r1, r3, #1
 800c308:	d103      	bne.n	800c312 <_raise_r+0x42>
 800c30a:	2316      	movs	r3, #22
 800c30c:	6003      	str	r3, [r0, #0]
 800c30e:	2001      	movs	r0, #1
 800c310:	e7e7      	b.n	800c2e2 <_raise_r+0x12>
 800c312:	2100      	movs	r1, #0
 800c314:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c318:	4620      	mov	r0, r4
 800c31a:	4798      	blx	r3
 800c31c:	2000      	movs	r0, #0
 800c31e:	e7e0      	b.n	800c2e2 <_raise_r+0x12>

0800c320 <raise>:
 800c320:	4b02      	ldr	r3, [pc, #8]	@ (800c32c <raise+0xc>)
 800c322:	4601      	mov	r1, r0
 800c324:	6818      	ldr	r0, [r3, #0]
 800c326:	f7ff bfd3 	b.w	800c2d0 <_raise_r>
 800c32a:	bf00      	nop
 800c32c:	2000002c 	.word	0x2000002c

0800c330 <_kill_r>:
 800c330:	b538      	push	{r3, r4, r5, lr}
 800c332:	4d07      	ldr	r5, [pc, #28]	@ (800c350 <_kill_r+0x20>)
 800c334:	2300      	movs	r3, #0
 800c336:	4604      	mov	r4, r0
 800c338:	4608      	mov	r0, r1
 800c33a:	4611      	mov	r1, r2
 800c33c:	602b      	str	r3, [r5, #0]
 800c33e:	f7f5 fc99 	bl	8001c74 <_kill>
 800c342:	1c43      	adds	r3, r0, #1
 800c344:	d102      	bne.n	800c34c <_kill_r+0x1c>
 800c346:	682b      	ldr	r3, [r5, #0]
 800c348:	b103      	cbz	r3, 800c34c <_kill_r+0x1c>
 800c34a:	6023      	str	r3, [r4, #0]
 800c34c:	bd38      	pop	{r3, r4, r5, pc}
 800c34e:	bf00      	nop
 800c350:	200027e0 	.word	0x200027e0

0800c354 <_getpid_r>:
 800c354:	f7f5 bc86 	b.w	8001c64 <_getpid>

0800c358 <_init>:
 800c358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35a:	bf00      	nop
 800c35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c35e:	bc08      	pop	{r3}
 800c360:	469e      	mov	lr, r3
 800c362:	4770      	bx	lr

0800c364 <_fini>:
 800c364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c366:	bf00      	nop
 800c368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c36a:	bc08      	pop	{r3}
 800c36c:	469e      	mov	lr, r3
 800c36e:	4770      	bx	lr
