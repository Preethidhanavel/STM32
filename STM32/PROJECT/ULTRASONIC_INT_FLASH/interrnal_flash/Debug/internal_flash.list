
internal_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008900  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008a90  08008a90  00009a90  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008eec  08008eec  0000a1f8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008eec  08008eec  00009eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ef4  08008ef4  0000a1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ef4  08008ef4  00009ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008ef8  08008ef8  00009ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  08008efc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  200001f8  080090f4  0000a1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b0  080090f4  0000a4b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001262c  00000000  00000000  0000a228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002847  00000000  00000000  0001c854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  0001f0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d67  00000000  00000000  000201d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000287e0  00000000  00000000  00020f37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013eb7  00000000  00000000  00049717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fab0f  00000000  00000000  0005d5ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001580dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000059c4  00000000  00000000  00158120  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0015dae4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a78 	.word	0x08008a78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08008a78 	.word	0x08008a78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <HCSR04_Trigger>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void HCSR04_Trigger(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // TRIG high
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f82:	f001 fc0b 	bl	800279c <HAL_GPIO_WritePin>
 // HAL_Delay(0);  // Wait few cycles
  for (volatile int i = 0; i < 160; i++);  // ~10 µs at 16 MHz
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	e002      	b.n	8000f92 <HCSR04_Trigger+0x1e>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b9f      	cmp	r3, #159	@ 0x9f
 8000f96:	ddf9      	ble.n	8000f8c <HCSR04_Trigger+0x18>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // TRIG low
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa0:	f001 fbfc 	bl	800279c <HAL_GPIO_WritePin>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <Start_HCSR04>:

void Start_HCSR04(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  is_first_capture = 0;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <Start_HCSR04+0x1c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <Start_HCSR04+0x20>)
 8000fba:	f003 faa5 	bl	8004508 <HAL_TIM_IC_Start_IT>
  HCSR04_Trigger();
 8000fbe:	f7ff ffd9 	bl	8000f74 <HCSR04_Trigger>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000318 	.word	0x20000318
 8000fcc:	20000238 	.word	0x20000238

08000fd0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7f1b      	ldrb	r3, [r3, #28]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d175      	bne.n	80010cc <HAL_TIM_IC_CaptureCallback+0xfc>
  {
    if (is_first_capture == 0)
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d11a      	bne.n	800101e <HAL_TIM_IC_CaptureCallback+0x4e>
    {
      ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Rising edge
 8000fe8:	2100      	movs	r1, #0
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f003 fe38 	bl	8004c60 <HAL_TIM_ReadCapturedValue>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ff4:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a1a      	ldr	r2, [r3, #32]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020a 	bic.w	r2, r2, #10
 8001004:	621a      	str	r2, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0202 	orr.w	r2, r2, #2
 8001014:	621a      	str	r2, [r3, #32]
      is_first_capture = 1;
 8001016:	4b32      	ldr	r3, [pc, #200]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]

      distance_cm = (float)diff * 0.0343 / 2.0;

    }
  }
}
 800101c:	e056      	b.n	80010cc <HAL_TIM_IC_CaptureCallback+0xfc>
    else if (is_first_capture == 1)
 800101e:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d152      	bne.n	80010cc <HAL_TIM_IC_CaptureCallback+0xfc>
      ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Falling edge
 8001026:	2100      	movs	r1, #0
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f003 fe19 	bl	8004c60 <HAL_TIM_ReadCapturedValue>
 800102e:	4603      	mov	r3, r0
 8001030:	4a2d      	ldr	r2, [pc, #180]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001032:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a1a      	ldr	r2, [r3, #32]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 020a 	bic.w	r2, r2, #10
 8001042:	621a      	str	r2, [r3, #32]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6a12      	ldr	r2, [r2, #32]
 800104e:	621a      	str	r2, [r3, #32]
      HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001050:	2100      	movs	r1, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f003 fba2 	bl	800479c <HAL_TIM_IC_Stop_IT>
      if (ic_val2 > ic_val1)
 8001058:	4b23      	ldr	r3, [pc, #140]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x118>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d907      	bls.n	8001074 <HAL_TIM_IC_CaptureCallback+0xa4>
        diff = ic_val2 - ic_val1;
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e009      	b.n	8001088 <HAL_TIM_IC_CaptureCallback+0xb8>
        diff = (0xFFFF - ic_val1 + ic_val2);
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001082:	33ff      	adds	r3, #255	@ 0xff
 8001084:	4a19      	ldr	r2, [pc, #100]	@ (80010ec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001086:	6013      	str	r3, [r2, #0]
      distance_cm = (float)diff * 0.0343 / 2.0;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <HAL_TIM_IC_CaptureCallback+0x11c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001094:	ee17 0a90 	vmov	r0, s15
 8001098:	f7ff fa56 	bl	8000548 <__aeabi_f2d>
 800109c:	a30e      	add	r3, pc, #56	@ (adr r3, 80010d8 <HAL_TIM_IC_CaptureCallback+0x108>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff faa9 	bl	80005f8 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b6:	f7ff fbc9 	bl	800084c <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fd71 	bl	8000ba8 <__aeabi_d2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	04816f00 	.word	0x04816f00
 80010dc:	3fa18fc5 	.word	0x3fa18fc5
 80010e0:	20000318 	.word	0x20000318
 80010e4:	2000030c 	.word	0x2000030c
 80010e8:	20000310 	.word	0x20000310
 80010ec:	20000314 	.word	0x20000314
 80010f0:	2000031c 	.word	0x2000031c

080010f4 <Write_Timestamp_To_Flash>:

void Write_Timestamp_To_Flash(char *log)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
    HAL_FLASH_Unlock();
 80010fc:	f000 ff7c 	bl	8001ff8 <HAL_FLASH_Unlock>

    // Convert log string to 64-bit chunks (double words)
    uint64_t *data_ptr = (uint64_t *)log;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	613b      	str	r3, [r7, #16]
    size_t len = strlen(log);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f7ff f8b3 	bl	8000270 <strlen>
 800110a:	60f8      	str	r0, [r7, #12]
    size_t double_word_count = (len + 7) / 8;  // Round up to nearest 8 bytes
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	3307      	adds	r3, #7
 8001110:	08db      	lsrs	r3, r3, #3
 8001112:	60bb      	str	r3, [r7, #8]

    for (size_t i = 0; i < double_word_count; i++)
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	e035      	b.n	8001186 <Write_Timestamp_To_Flash+0x92>
    {
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_address, data_ptr[i]) != HAL_OK)
 800111a:	4b1f      	ldr	r3, [pc, #124]	@ (8001198 <Write_Timestamp_To_Flash+0xa4>)
 800111c:	6819      	ldr	r1, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4413      	add	r3, r2
 8001126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112a:	2000      	movs	r0, #0
 800112c:	f000 fef8 	bl	8001f20 <HAL_FLASH_Program>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d007      	beq.n	8001146 <Write_Timestamp_To_Flash+0x52>
        {
            HAL_UART_Transmit(&huart2, (uint8_t *)"Flash write failed\r\n", 20, HAL_MAX_DELAY);
 8001136:	f04f 33ff 	mov.w	r3, #4294967295
 800113a:	2214      	movs	r2, #20
 800113c:	4917      	ldr	r1, [pc, #92]	@ (800119c <Write_Timestamp_To_Flash+0xa8>)
 800113e:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <Write_Timestamp_To_Flash+0xac>)
 8001140:	f004 f8de 	bl	8005300 <HAL_UART_Transmit>
            break;
 8001144:	e023      	b.n	800118e <Write_Timestamp_To_Flash+0x9a>
        }
        HAL_UART_Transmit(&huart2, (uint8_t *)"Flash write success\r\n", 20, HAL_MAX_DELAY);
 8001146:	f04f 33ff 	mov.w	r3, #4294967295
 800114a:	2214      	movs	r2, #20
 800114c:	4915      	ldr	r1, [pc, #84]	@ (80011a4 <Write_Timestamp_To_Flash+0xb0>)
 800114e:	4814      	ldr	r0, [pc, #80]	@ (80011a0 <Write_Timestamp_To_Flash+0xac>)
 8001150:	f004 f8d6 	bl	8005300 <HAL_UART_Transmit>
        current_address += 8;
 8001154:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <Write_Timestamp_To_Flash+0xa4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3308      	adds	r3, #8
 800115a:	4a0f      	ldr	r2, [pc, #60]	@ (8001198 <Write_Timestamp_To_Flash+0xa4>)
 800115c:	6013      	str	r3, [r2, #0]
        if (current_address + len >= 0x08100000)
 800115e:	4b0e      	ldr	r3, [pc, #56]	@ (8001198 <Write_Timestamp_To_Flash+0xa4>)
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4413      	add	r3, r2
 8001166:	f1b3 6f01 	cmp.w	r3, #135266304	@ 0x8100000
 800116a:	d309      	bcc.n	8001180 <Write_Timestamp_To_Flash+0x8c>
        {
            HAL_UART_Transmit(&huart2, (uint8_t *)"Flash full\r\n", 12, HAL_MAX_DELAY);
 800116c:	f04f 33ff 	mov.w	r3, #4294967295
 8001170:	220c      	movs	r2, #12
 8001172:	490d      	ldr	r1, [pc, #52]	@ (80011a8 <Write_Timestamp_To_Flash+0xb4>)
 8001174:	480a      	ldr	r0, [pc, #40]	@ (80011a0 <Write_Timestamp_To_Flash+0xac>)
 8001176:	f004 f8c3 	bl	8005300 <HAL_UART_Transmit>
            HAL_FLASH_Lock();
 800117a:	f000 ff5f 	bl	800203c <HAL_FLASH_Lock>
            return;
 800117e:	e008      	b.n	8001192 <Write_Timestamp_To_Flash+0x9e>
    for (size_t i = 0; i < double_word_count; i++)
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	3301      	adds	r3, #1
 8001184:	617b      	str	r3, [r7, #20]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	429a      	cmp	r2, r3
 800118c:	d3c5      	bcc.n	800111a <Write_Timestamp_To_Flash+0x26>
        }
    }

    HAL_FLASH_Lock();
 800118e:	f000 ff55 	bl	800203c <HAL_FLASH_Lock>
}
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000000 	.word	0x20000000
 800119c:	08008a90 	.word	0x08008a90
 80011a0:	20000284 	.word	0x20000284
 80011a4:	08008aa8 	.word	0x08008aa8
 80011a8:	08008ac0 	.word	0x08008ac0

080011ac <Read_Logs_From_Flash>:

void Read_Logs_From_Flash(void)
{
 80011ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011ae:	b093      	sub	sp, #76	@ 0x4c
 80011b0:	af00      	add	r7, sp, #0
    char log_buffer[64];
    uint32_t read_addr = FLASH_USER_START_ADDR;
 80011b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001224 <Read_Logs_From_Flash+0x78>)
 80011b4:	647b      	str	r3, [r7, #68]	@ 0x44

    while (read_addr < current_address)
 80011b6:	e02b      	b.n	8001210 <Read_Logs_From_Flash+0x64>
    {
    	memset(log_buffer, 0, sizeof(log_buffer));
 80011b8:	1d3b      	adds	r3, r7, #4
 80011ba:	2240      	movs	r2, #64	@ 0x40
 80011bc:	2100      	movs	r1, #0
 80011be:	4618      	mov	r0, r3
 80011c0:	f005 fb8b 	bl	80068da <memset>
        memcpy(log_buffer, (char *)read_addr, 64);
 80011c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80011c6:	461c      	mov	r4, r3
 80011c8:	1d3e      	adds	r6, r7, #4
 80011ca:	f104 0c40 	add.w	ip, r4, #64	@ 0x40
 80011ce:	4635      	mov	r5, r6
 80011d0:	4623      	mov	r3, r4
 80011d2:	6818      	ldr	r0, [r3, #0]
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	68db      	ldr	r3, [r3, #12]
 80011da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011dc:	3410      	adds	r4, #16
 80011de:	3610      	adds	r6, #16
 80011e0:	4564      	cmp	r4, ip
 80011e2:	d1f4      	bne.n	80011ce <Read_Logs_From_Flash+0x22>
        HAL_UART_Transmit(&huart2, (uint8_t *)"Read: ", 6, 2000);
 80011e4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80011e8:	2206      	movs	r2, #6
 80011ea:	490f      	ldr	r1, [pc, #60]	@ (8001228 <Read_Logs_From_Flash+0x7c>)
 80011ec:	480f      	ldr	r0, [pc, #60]	@ (800122c <Read_Logs_From_Flash+0x80>)
 80011ee:	f004 f887 	bl	8005300 <HAL_UART_Transmit>
        HAL_UART_Transmit(&huart2, (uint8_t *)log_buffer, strlen(log_buffer), HAL_MAX_DELAY);
 80011f2:	1d3b      	adds	r3, r7, #4
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f83b 	bl	8000270 <strlen>
 80011fa:	4603      	mov	r3, r0
 80011fc:	b29a      	uxth	r2, r3
 80011fe:	1d39      	adds	r1, r7, #4
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
 8001204:	4809      	ldr	r0, [pc, #36]	@ (800122c <Read_Logs_From_Flash+0x80>)
 8001206:	f004 f87b 	bl	8005300 <HAL_UART_Transmit>
        read_addr += 64;
 800120a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800120c:	3340      	adds	r3, #64	@ 0x40
 800120e:	647b      	str	r3, [r7, #68]	@ 0x44
    while (read_addr < current_address)
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <Read_Logs_From_Flash+0x84>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8001216:	429a      	cmp	r2, r3
 8001218:	d3ce      	bcc.n	80011b8 <Read_Logs_From_Flash+0xc>
    }
}
 800121a:	bf00      	nop
 800121c:	bf00      	nop
 800121e:	374c      	adds	r7, #76	@ 0x4c
 8001220:	46bd      	mov	sp, r7
 8001222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001224:	080ff800 	.word	0x080ff800
 8001228:	08008ad0 	.word	0x08008ad0
 800122c:	20000284 	.word	0x20000284
 8001230:	20000000 	.word	0x20000000

08001234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b0a6      	sub	sp, #152	@ 0x98
 8001238:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800123a:	f000 fcbf 	bl	8001bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123e:	f000 f8e7 	bl	8001410 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001242:	f000 fa19 	bl	8001678 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001246:	f000 f9e7 	bl	8001618 <MX_USART2_UART_Init>
  MX_RTC_Init();
 800124a:	f000 f935 	bl	80014b8 <MX_RTC_Init>
  MX_TIM2_Init();
 800124e:	f000 f98f 	bl	8001570 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_FLASH_Unlock();
 8001252:	f000 fed1 	bl	8001ff8 <HAL_FLASH_Unlock>
  FLASH_EraseInitTypeDef EraseInitStruct;
  uint32_t PageError = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	67fb      	str	r3, [r7, #124]	@ 0x7c

  EraseInitStruct.TypeErase   = FLASH_TYPEERASE_PAGES;
 800125a:	2300      	movs	r3, #0
 800125c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  EraseInitStruct.Page        = ((FLASH_USER_START_ADDR - FLASH_BASE) / FLASH_PAGE_SIZE);
 8001260:	f240 13ff 	movw	r3, #511	@ 0x1ff
 8001264:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  EraseInitStruct.NbPages     = 1;
 8001268:	2301      	movs	r3, #1
 800126a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

  if (HAL_FLASHEx_Erase(&EraseInitStruct, &PageError) != HAL_OK)
 800126e:	f107 027c 	add.w	r2, r7, #124	@ 0x7c
 8001272:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f000 ffa1 	bl	80021c0 <HAL_FLASHEx_Erase>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d006      	beq.n	8001292 <main+0x5e>
  {
	  HAL_UART_Transmit(&huart2,(uint8_t *)"failed\r\n",8 , 2000);
 8001284:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001288:	2208      	movs	r2, #8
 800128a:	4954      	ldr	r1, [pc, #336]	@ (80013dc <main+0x1a8>)
 800128c:	4854      	ldr	r0, [pc, #336]	@ (80013e0 <main+0x1ac>)
 800128e:	f004 f837 	bl	8005300 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	      HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001292:	2200      	movs	r2, #0
 8001294:	4953      	ldr	r1, [pc, #332]	@ (80013e4 <main+0x1b0>)
 8001296:	4854      	ldr	r0, [pc, #336]	@ (80013e8 <main+0x1b4>)
 8001298:	f002 fedd 	bl	8004056 <HAL_RTC_GetTime>
	  	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);  // Must be called right after time
 800129c:	2200      	movs	r2, #0
 800129e:	4953      	ldr	r1, [pc, #332]	@ (80013ec <main+0x1b8>)
 80012a0:	4851      	ldr	r0, [pc, #324]	@ (80013e8 <main+0x1b4>)
 80012a2:	f002 ffbb 	bl	800421c <HAL_RTC_GetDate>
	  	  snprintf(timestamp, sizeof(timestamp), "%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds);
 80012a6:	4b4f      	ldr	r3, [pc, #316]	@ (80013e4 <main+0x1b0>)
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	4b4d      	ldr	r3, [pc, #308]	@ (80013e4 <main+0x1b0>)
 80012ae:	785b      	ldrb	r3, [r3, #1]
 80012b0:	461a      	mov	r2, r3
 80012b2:	4b4c      	ldr	r3, [pc, #304]	@ (80013e4 <main+0x1b0>)
 80012b4:	789b      	ldrb	r3, [r3, #2]
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	9200      	str	r2, [sp, #0]
 80012ba:	460b      	mov	r3, r1
 80012bc:	4a4c      	ldr	r2, [pc, #304]	@ (80013f0 <main+0x1bc>)
 80012be:	2120      	movs	r1, #32
 80012c0:	484c      	ldr	r0, [pc, #304]	@ (80013f4 <main+0x1c0>)
 80012c2:	f005 fa91 	bl	80067e8 <sniprintf>
	  	  Start_HCSR04();
 80012c6:	f7ff fe71 	bl	8000fac <Start_HCSR04>

	  	   char buffer[50];
	  	   char tx_data1[70];
	  	   snprintf(buffer, sizeof(buffer), "Distance: %.2f cm\r\n", distance_cm);
 80012ca:	4b4b      	ldr	r3, [pc, #300]	@ (80013f8 <main+0x1c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff f93a 	bl	8000548 <__aeabi_f2d>
 80012d4:	4602      	mov	r2, r0
 80012d6:	460b      	mov	r3, r1
 80012d8:	4638      	mov	r0, r7
 80012da:	e9cd 2300 	strd	r2, r3, [sp]
 80012de:	4a47      	ldr	r2, [pc, #284]	@ (80013fc <main+0x1c8>)
 80012e0:	2132      	movs	r1, #50	@ 0x32
 80012e2:	f005 fa81 	bl	80067e8 <sniprintf>
	  	   HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 2000);
 80012e6:	463b      	mov	r3, r7
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7fe ffc1 	bl	8000270 <strlen>
 80012ee:	4603      	mov	r3, r0
 80012f0:	b29a      	uxth	r2, r3
 80012f2:	4639      	mov	r1, r7
 80012f4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80012f8:	4839      	ldr	r0, [pc, #228]	@ (80013e0 <main+0x1ac>)
 80012fa:	f004 f801 	bl	8005300 <HAL_UART_Transmit>
	  	   HAL_Delay(2000);
 80012fe:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001302:	f000 fcd7 	bl	8001cb4 <HAL_Delay>

	  	   if (distance_cm < THRESHOLD_CM)
 8001306:	4b3c      	ldr	r3, [pc, #240]	@ (80013f8 <main+0x1c4>)
 8001308:	edd3 7a00 	vldr	s15, [r3]
 800130c:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001310:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001314:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001318:	d503      	bpl.n	8001322 <main+0xee>
	     	 	     object_present = 1;
 800131a:	4b39      	ldr	r3, [pc, #228]	@ (8001400 <main+0x1cc>)
 800131c:	2201      	movs	r2, #1
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e002      	b.n	8001328 <main+0xf4>
	  	   else
	  	      	 object_present = 0;
 8001322:	4b37      	ldr	r3, [pc, #220]	@ (8001400 <main+0x1cc>)
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]

	  	   if (object_present && !object_previous)
 8001328:	4b35      	ldr	r3, [pc, #212]	@ (8001400 <main+0x1cc>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d024      	beq.n	800137a <main+0x146>
 8001330:	4b34      	ldr	r3, [pc, #208]	@ (8001404 <main+0x1d0>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d120      	bne.n	800137a <main+0x146>
	  	   {
	  	      	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_SET);
 8001338:	2201      	movs	r2, #1
 800133a:	2120      	movs	r1, #32
 800133c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001340:	f001 fa2c 	bl	800279c <HAL_GPIO_WritePin>
	  	      	snprintf(tx_data1, sizeof(tx_data1), "IN [%s]: %.2f cm\r\n", timestamp, distance_cm);
 8001344:	4b2c      	ldr	r3, [pc, #176]	@ (80013f8 <main+0x1c4>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4618      	mov	r0, r3
 800134a:	f7ff f8fd 	bl	8000548 <__aeabi_f2d>
 800134e:	4602      	mov	r2, r0
 8001350:	460b      	mov	r3, r1
 8001352:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8001356:	e9cd 2300 	strd	r2, r3, [sp]
 800135a:	4b26      	ldr	r3, [pc, #152]	@ (80013f4 <main+0x1c0>)
 800135c:	4a2a      	ldr	r2, [pc, #168]	@ (8001408 <main+0x1d4>)
 800135e:	2146      	movs	r1, #70	@ 0x46
 8001360:	f005 fa42 	bl	80067e8 <sniprintf>
	  	      	Write_Timestamp_To_Flash(tx_data1);
 8001364:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff fec3 	bl	80010f4 <Write_Timestamp_To_Flash>
	  	        HAL_Delay(100);
 800136e:	2064      	movs	r0, #100	@ 0x64
 8001370:	f000 fca0 	bl	8001cb4 <HAL_Delay>
	  	        Read_Logs_From_Flash();
 8001374:	f7ff ff1a 	bl	80011ac <Read_Logs_From_Flash>
 8001378:	e027      	b.n	80013ca <main+0x196>
	  	      }
	  	     else if (!object_present && object_previous)
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <main+0x1cc>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d123      	bne.n	80013ca <main+0x196>
 8001382:	4b20      	ldr	r3, [pc, #128]	@ (8001404 <main+0x1d0>)
 8001384:	781b      	ldrb	r3, [r3, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d01f      	beq.n	80013ca <main+0x196>
	  	     {
	  	      	HAL_GPIO_WritePin(GPIOA, LD2_Pin, GPIO_PIN_RESET);
 800138a:	2200      	movs	r2, #0
 800138c:	2120      	movs	r1, #32
 800138e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001392:	f001 fa03 	bl	800279c <HAL_GPIO_WritePin>
	  	      	snprintf(tx_data1, sizeof(tx_data1), "OUT [%s]: %.2f cm\r\n", timestamp, distance_cm);
 8001396:	4b18      	ldr	r3, [pc, #96]	@ (80013f8 <main+0x1c4>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff f8d4 	bl	8000548 <__aeabi_f2d>
 80013a0:	4602      	mov	r2, r0
 80013a2:	460b      	mov	r3, r1
 80013a4:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80013a8:	e9cd 2300 	strd	r2, r3, [sp]
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <main+0x1c0>)
 80013ae:	4a17      	ldr	r2, [pc, #92]	@ (800140c <main+0x1d8>)
 80013b0:	2146      	movs	r1, #70	@ 0x46
 80013b2:	f005 fa19 	bl	80067e8 <sniprintf>
	  	      	Write_Timestamp_To_Flash(tx_data1);
 80013b6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fe9a 	bl	80010f4 <Write_Timestamp_To_Flash>
	  	        HAL_Delay(100);
 80013c0:	2064      	movs	r0, #100	@ 0x64
 80013c2:	f000 fc77 	bl	8001cb4 <HAL_Delay>
	  	        Read_Logs_From_Flash();
 80013c6:	f7ff fef1 	bl	80011ac <Read_Logs_From_Flash>
	  	      }

	  	     object_previous = object_present;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001400 <main+0x1cc>)
 80013cc:	781a      	ldrb	r2, [r3, #0]
 80013ce:	4b0d      	ldr	r3, [pc, #52]	@ (8001404 <main+0x1d0>)
 80013d0:	701a      	strb	r2, [r3, #0]
	  	     HAL_Delay(100);  // Sampling interval
 80013d2:	2064      	movs	r0, #100	@ 0x64
 80013d4:	f000 fc6e 	bl	8001cb4 <HAL_Delay>
  {
 80013d8:	e75b      	b.n	8001292 <main+0x5e>
 80013da:	bf00      	nop
 80013dc:	08008ad8 	.word	0x08008ad8
 80013e0:	20000284 	.word	0x20000284
 80013e4:	20000324 	.word	0x20000324
 80013e8:	20000214 	.word	0x20000214
 80013ec:	20000338 	.word	0x20000338
 80013f0:	08008ae4 	.word	0x08008ae4
 80013f4:	2000033c 	.word	0x2000033c
 80013f8:	2000031c 	.word	0x2000031c
 80013fc:	08008af4 	.word	0x08008af4
 8001400:	20000320 	.word	0x20000320
 8001404:	20000321 	.word	0x20000321
 8001408:	08008b08 	.word	0x08008b08
 800140c:	08008b1c 	.word	0x08008b1c

08001410 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b096      	sub	sp, #88	@ 0x58
 8001414:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001416:	f107 0314 	add.w	r3, r7, #20
 800141a:	2244      	movs	r2, #68	@ 0x44
 800141c:	2100      	movs	r1, #0
 800141e:	4618      	mov	r0, r3
 8001420:	f005 fa5b 	bl	80068da <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	605a      	str	r2, [r3, #4]
 800142c:	609a      	str	r2, [r3, #8]
 800142e:	60da      	str	r2, [r3, #12]
 8001430:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001432:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001436:	f001 f9d7 	bl	80027e8 <HAL_PWREx_ControlVoltageScaling>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001440:	f000 f980 	bl	8001744 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001444:	230a      	movs	r3, #10
 8001446:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001448:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800144c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800144e:	2310      	movs	r3, #16
 8001450:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001452:	2301      	movs	r3, #1
 8001454:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800145a:	2302      	movs	r3, #2
 800145c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800145e:	2301      	movs	r3, #1
 8001460:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001462:	230a      	movs	r3, #10
 8001464:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001466:	2307      	movs	r3, #7
 8001468:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800146a:	2302      	movs	r3, #2
 800146c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800146e:	2302      	movs	r3, #2
 8001470:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4618      	mov	r0, r3
 8001478:	f001 fa0c 	bl	8002894 <HAL_RCC_OscConfig>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001482:	f000 f95f 	bl	8001744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001486:	230f      	movs	r3, #15
 8001488:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148a:	2303      	movs	r3, #3
 800148c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800149a:	463b      	mov	r3, r7
 800149c:	2104      	movs	r1, #4
 800149e:	4618      	mov	r0, r3
 80014a0:	f001 fdd4 	bl	800304c <HAL_RCC_ClockConfig>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d001      	beq.n	80014ae <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80014aa:	f000 f94b 	bl	8001744 <Error_Handler>
  }
}
 80014ae:	bf00      	nop
 80014b0:	3758      	adds	r7, #88	@ 0x58
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80014be:	1d3b      	adds	r3, r7, #4
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80014cc:	2300      	movs	r3, #0
 80014ce:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80014d0:	4b25      	ldr	r3, [pc, #148]	@ (8001568 <MX_RTC_Init+0xb0>)
 80014d2:	4a26      	ldr	r2, [pc, #152]	@ (800156c <MX_RTC_Init+0xb4>)
 80014d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80014d6:	4b24      	ldr	r3, [pc, #144]	@ (8001568 <MX_RTC_Init+0xb0>)
 80014d8:	2200      	movs	r2, #0
 80014da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80014dc:	4b22      	ldr	r3, [pc, #136]	@ (8001568 <MX_RTC_Init+0xb0>)
 80014de:	227f      	movs	r2, #127	@ 0x7f
 80014e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80014e2:	4b21      	ldr	r3, [pc, #132]	@ (8001568 <MX_RTC_Init+0xb0>)
 80014e4:	22ff      	movs	r2, #255	@ 0xff
 80014e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80014e8:	4b1f      	ldr	r3, [pc, #124]	@ (8001568 <MX_RTC_Init+0xb0>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	@ (8001568 <MX_RTC_Init+0xb0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80014f4:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <MX_RTC_Init+0xb0>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80014fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001568 <MX_RTC_Init+0xb0>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001500:	4819      	ldr	r0, [pc, #100]	@ (8001568 <MX_RTC_Init+0xb0>)
 8001502:	f002 fc83 	bl	8003e0c <HAL_RTC_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 800150c:	f000 f91a 	bl	8001744 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001510:	2300      	movs	r3, #0
 8001512:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001514:	2300      	movs	r3, #0
 8001516:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001518:	2300      	movs	r3, #0
 800151a:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001524:	1d3b      	adds	r3, r7, #4
 8001526:	2201      	movs	r2, #1
 8001528:	4619      	mov	r1, r3
 800152a:	480f      	ldr	r0, [pc, #60]	@ (8001568 <MX_RTC_Init+0xb0>)
 800152c:	f002 fcf6 	bl	8003f1c <HAL_RTC_SetTime>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_RTC_Init+0x82>
  {
    Error_Handler();
 8001536:	f000 f905 	bl	8001744 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800153a:	2301      	movs	r3, #1
 800153c:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 800153e:	2301      	movs	r3, #1
 8001540:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001542:	2301      	movs	r3, #1
 8001544:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001546:	2300      	movs	r3, #0
 8001548:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	2201      	movs	r2, #1
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_RTC_Init+0xb0>)
 8001552:	f002 fddc 	bl	800410e <HAL_RTC_SetDate>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 800155c:	f000 f8f2 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000214 	.word	0x20000214
 800156c:	40002800 	.word	0x40002800

08001570 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]
 8001580:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800158e:	4b21      	ldr	r3, [pc, #132]	@ (8001614 <MX_TIM2_Init+0xa4>)
 8001590:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001594:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001596:	4b1f      	ldr	r3, [pc, #124]	@ (8001614 <MX_TIM2_Init+0xa4>)
 8001598:	224f      	movs	r2, #79	@ 0x4f
 800159a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800159c:	4b1d      	ldr	r3, [pc, #116]	@ (8001614 <MX_TIM2_Init+0xa4>)
 800159e:	2200      	movs	r2, #0
 80015a0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80015a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015a4:	f04f 32ff 	mov.w	r2, #4294967295
 80015a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015aa:	4b1a      	ldr	r3, [pc, #104]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b0:	4b18      	ldr	r3, [pc, #96]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80015b6:	4817      	ldr	r0, [pc, #92]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015b8:	f002 ff4e 	bl	8004458 <HAL_TIM_IC_Init>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80015c2:	f000 f8bf 	bl	8001744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4619      	mov	r1, r3
 80015d4:	480f      	ldr	r0, [pc, #60]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015d6:	f003 fd9f 	bl	8005118 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80015e0:	f000 f8b0 	bl	8001744 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015e4:	2300      	movs	r3, #0
 80015e6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015e8:	2301      	movs	r3, #1
 80015ea:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	2200      	movs	r2, #0
 80015f8:	4619      	mov	r1, r3
 80015fa:	4806      	ldr	r0, [pc, #24]	@ (8001614 <MX_TIM2_Init+0xa4>)
 80015fc:	f003 fa93 	bl	8004b26 <HAL_TIM_IC_ConfigChannel>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001606:	f000 f89d 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800160a:	bf00      	nop
 800160c:	3720      	adds	r7, #32
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	20000238 	.word	0x20000238

08001618 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b14      	ldr	r3, [pc, #80]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800161e:	4a15      	ldr	r2, [pc, #84]	@ (8001674 <MX_USART2_UART_Init+0x5c>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b13      	ldr	r3, [pc, #76]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b11      	ldr	r3, [pc, #68]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0e      	ldr	r3, [pc, #56]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b0c      	ldr	r3, [pc, #48]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b09      	ldr	r3, [pc, #36]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800164e:	4b08      	ldr	r3, [pc, #32]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001654:	4b06      	ldr	r3, [pc, #24]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800165a:	4805      	ldr	r0, [pc, #20]	@ (8001670 <MX_USART2_UART_Init+0x58>)
 800165c:	f003 fe02 	bl	8005264 <HAL_UART_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001666:	f000 f86d 	bl	8001744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800166a:	bf00      	nop
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	20000284 	.word	0x20000284
 8001674:	40004400 	.word	0x40004400

08001678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08a      	sub	sp, #40	@ 0x28
 800167c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167e:	f107 0314 	add.w	r3, r7, #20
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800168e:	4b2b      	ldr	r3, [pc, #172]	@ (800173c <MX_GPIO_Init+0xc4>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001692:	4a2a      	ldr	r2, [pc, #168]	@ (800173c <MX_GPIO_Init+0xc4>)
 8001694:	f043 0304 	orr.w	r3, r3, #4
 8001698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800169a:	4b28      	ldr	r3, [pc, #160]	@ (800173c <MX_GPIO_Init+0xc4>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800169e:	f003 0304 	and.w	r3, r3, #4
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a6:	4b25      	ldr	r3, [pc, #148]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016aa:	4a24      	ldr	r2, [pc, #144]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016b2:	4b22      	ldr	r3, [pc, #136]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b1f      	ldr	r3, [pc, #124]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c2:	4a1e      	ldr	r2, [pc, #120]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016ca:	4b1c      	ldr	r3, [pc, #112]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016d6:	4b19      	ldr	r3, [pc, #100]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016da:	4a18      	ldr	r2, [pc, #96]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016dc:	f043 0302 	orr.w	r3, r3, #2
 80016e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016e2:	4b16      	ldr	r3, [pc, #88]	@ (800173c <MX_GPIO_Init+0xc4>)
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	607b      	str	r3, [r7, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|LD2_Pin, GPIO_PIN_RESET);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2122      	movs	r1, #34	@ 0x22
 80016f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80016f6:	f001 f851 	bl	800279c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80016fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001700:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	480b      	ldr	r0, [pc, #44]	@ (8001740 <MX_GPIO_Init+0xc8>)
 8001712:	f000 fe99 	bl	8002448 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|LD2_Pin;
 8001716:	2322      	movs	r3, #34	@ 0x22
 8001718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800171a:	2301      	movs	r3, #1
 800171c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001722:	2300      	movs	r3, #0
 8001724:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001730:	f000 fe8a 	bl	8002448 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	@ 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40021000 	.word	0x40021000
 8001740:	48000800 	.word	0x48000800

08001744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001748:	b672      	cpsid	i
}
 800174a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800174c:	bf00      	nop
 800174e:	e7fd      	b.n	800174c <Error_Handler+0x8>

08001750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001756:	4b0f      	ldr	r3, [pc, #60]	@ (8001794 <HAL_MspInit+0x44>)
 8001758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800175a:	4a0e      	ldr	r2, [pc, #56]	@ (8001794 <HAL_MspInit+0x44>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6613      	str	r3, [r2, #96]	@ 0x60
 8001762:	4b0c      	ldr	r3, [pc, #48]	@ (8001794 <HAL_MspInit+0x44>)
 8001764:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800176e:	4b09      	ldr	r3, [pc, #36]	@ (8001794 <HAL_MspInit+0x44>)
 8001770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001772:	4a08      	ldr	r2, [pc, #32]	@ (8001794 <HAL_MspInit+0x44>)
 8001774:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001778:	6593      	str	r3, [r2, #88]	@ 0x58
 800177a:	4b06      	ldr	r3, [pc, #24]	@ (8001794 <HAL_MspInit+0x44>)
 800177c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001786:	bf00      	nop
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000

08001798 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b0a4      	sub	sp, #144	@ 0x90
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a0:	f107 0308 	add.w	r3, r7, #8
 80017a4:	2288      	movs	r2, #136	@ 0x88
 80017a6:	2100      	movs	r1, #0
 80017a8:	4618      	mov	r0, r3
 80017aa:	f005 f896 	bl	80068da <memset>
  if(hrtc->Instance==RTC)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a10      	ldr	r2, [pc, #64]	@ (80017f4 <HAL_RTC_MspInit+0x5c>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d118      	bne.n	80017ea <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80017b8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017bc:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80017be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80017c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c6:	f107 0308 	add.w	r3, r7, #8
 80017ca:	4618      	mov	r0, r3
 80017cc:	f001 fe62 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80017d6:	f7ff ffb5 	bl	8001744 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017da:	4b07      	ldr	r3, [pc, #28]	@ (80017f8 <HAL_RTC_MspInit+0x60>)
 80017dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80017e0:	4a05      	ldr	r2, [pc, #20]	@ (80017f8 <HAL_RTC_MspInit+0x60>)
 80017e2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80017ea:	bf00      	nop
 80017ec:	3790      	adds	r7, #144	@ 0x90
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40002800 	.word	0x40002800
 80017f8:	40021000 	.word	0x40021000

080017fc <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	@ 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800181c:	d130      	bne.n	8001880 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800181e:	4b1a      	ldr	r3, [pc, #104]	@ (8001888 <HAL_TIM_IC_MspInit+0x8c>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001822:	4a19      	ldr	r2, [pc, #100]	@ (8001888 <HAL_TIM_IC_MspInit+0x8c>)
 8001824:	f043 0301 	orr.w	r3, r3, #1
 8001828:	6593      	str	r3, [r2, #88]	@ 0x58
 800182a:	4b17      	ldr	r3, [pc, #92]	@ (8001888 <HAL_TIM_IC_MspInit+0x8c>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001836:	4b14      	ldr	r3, [pc, #80]	@ (8001888 <HAL_TIM_IC_MspInit+0x8c>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800183a:	4a13      	ldr	r2, [pc, #76]	@ (8001888 <HAL_TIM_IC_MspInit+0x8c>)
 800183c:	f043 0301 	orr.w	r3, r3, #1
 8001840:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_TIM_IC_MspInit+0x8c>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001846:	f003 0301 	and.w	r3, r3, #1
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800184e:	2301      	movs	r3, #1
 8001850:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800185e:	2301      	movs	r3, #1
 8001860:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001862:	f107 0314 	add.w	r3, r7, #20
 8001866:	4619      	mov	r1, r3
 8001868:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800186c:	f000 fdec 	bl	8002448 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001870:	2200      	movs	r2, #0
 8001872:	2100      	movs	r1, #0
 8001874:	201c      	movs	r0, #28
 8001876:	f000 fb1c 	bl	8001eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800187a:	201c      	movs	r0, #28
 800187c:	f000 fb35 	bl	8001eea <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001880:	bf00      	nop
 8001882:	3728      	adds	r7, #40	@ 0x28
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40021000 	.word	0x40021000

0800188c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b0ac      	sub	sp, #176	@ 0xb0
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001894:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]
 80018a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018a4:	f107 0314 	add.w	r3, r7, #20
 80018a8:	2288      	movs	r2, #136	@ 0x88
 80018aa:	2100      	movs	r1, #0
 80018ac:	4618      	mov	r0, r3
 80018ae:	f005 f814 	bl	80068da <memset>
  if(huart->Instance==USART2)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a21      	ldr	r2, [pc, #132]	@ (800193c <HAL_UART_MspInit+0xb0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d13b      	bne.n	8001934 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80018bc:	2302      	movs	r3, #2
 80018be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018c4:	f107 0314 	add.w	r3, r7, #20
 80018c8:	4618      	mov	r0, r3
 80018ca:	f001 fde3 	bl	8003494 <HAL_RCCEx_PeriphCLKConfig>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018d4:	f7ff ff36 	bl	8001744 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018d8:	4b19      	ldr	r3, [pc, #100]	@ (8001940 <HAL_UART_MspInit+0xb4>)
 80018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018dc:	4a18      	ldr	r2, [pc, #96]	@ (8001940 <HAL_UART_MspInit+0xb4>)
 80018de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018e2:	6593      	str	r3, [r2, #88]	@ 0x58
 80018e4:	4b16      	ldr	r3, [pc, #88]	@ (8001940 <HAL_UART_MspInit+0xb4>)
 80018e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018f0:	4b13      	ldr	r3, [pc, #76]	@ (8001940 <HAL_UART_MspInit+0xb4>)
 80018f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f4:	4a12      	ldr	r2, [pc, #72]	@ (8001940 <HAL_UART_MspInit+0xb4>)
 80018f6:	f043 0301 	orr.w	r3, r3, #1
 80018fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018fc:	4b10      	ldr	r3, [pc, #64]	@ (8001940 <HAL_UART_MspInit+0xb4>)
 80018fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	60fb      	str	r3, [r7, #12]
 8001906:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001908:	230c      	movs	r3, #12
 800190a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190e:	2302      	movs	r3, #2
 8001910:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800191a:	2303      	movs	r3, #3
 800191c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001920:	2307      	movs	r3, #7
 8001922:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001926:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800192a:	4619      	mov	r1, r3
 800192c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001930:	f000 fd8a 	bl	8002448 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001934:	bf00      	nop
 8001936:	37b0      	adds	r7, #176	@ 0xb0
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40004400 	.word	0x40004400
 8001940:	40021000 	.word	0x40021000

08001944 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <NMI_Handler+0x4>

0800194c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001950:	bf00      	nop
 8001952:	e7fd      	b.n	8001950 <HardFault_Handler+0x4>

08001954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <MemManage_Handler+0x4>

0800195c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001960:	bf00      	nop
 8001962:	e7fd      	b.n	8001960 <BusFault_Handler+0x4>

08001964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001968:	bf00      	nop
 800196a:	e7fd      	b.n	8001968 <UsageFault_Handler+0x4>

0800196c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr

0800197a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800197e:	bf00      	nop
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr

08001988 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198c:	bf00      	nop
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr

08001996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199a:	f000 f96b 	bl	8001c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a8:	4802      	ldr	r0, [pc, #8]	@ (80019b4 <TIM2_IRQHandler+0x10>)
 80019aa:	f002 ffb5 	bl	8004918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000238 	.word	0x20000238

080019b8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return 1;
 80019bc:	2301      	movs	r3, #1
}
 80019be:	4618      	mov	r0, r3
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_kill>:

int _kill(int pid, int sig)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80019d2:	f004 ffd5 	bl	8006980 <__errno>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2216      	movs	r2, #22
 80019da:	601a      	str	r2, [r3, #0]
  return -1;
 80019dc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3708      	adds	r7, #8
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}

080019e8 <_exit>:

void _exit (int status)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019f0:	f04f 31ff 	mov.w	r1, #4294967295
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f7ff ffe7 	bl	80019c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019fa:	bf00      	nop
 80019fc:	e7fd      	b.n	80019fa <_exit+0x12>

080019fe <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b086      	sub	sp, #24
 8001a02:	af00      	add	r7, sp, #0
 8001a04:	60f8      	str	r0, [r7, #12]
 8001a06:	60b9      	str	r1, [r7, #8]
 8001a08:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	e00a      	b.n	8001a26 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a10:	f3af 8000 	nop.w
 8001a14:	4601      	mov	r1, r0
 8001a16:	68bb      	ldr	r3, [r7, #8]
 8001a18:	1c5a      	adds	r2, r3, #1
 8001a1a:	60ba      	str	r2, [r7, #8]
 8001a1c:	b2ca      	uxtb	r2, r1
 8001a1e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3301      	adds	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	697a      	ldr	r2, [r7, #20]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	dbf0      	blt.n	8001a10 <_read+0x12>
  }

  return len;
 8001a2e:	687b      	ldr	r3, [r7, #4]
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	e009      	b.n	8001a5e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1c5a      	adds	r2, r3, #1
 8001a4e:	60ba      	str	r2, [r7, #8]
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	dbf1      	blt.n	8001a4a <_write+0x12>
  }
  return len;
 8001a66:	687b      	ldr	r3, [r7, #4]
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	3718      	adds	r7, #24
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	bd80      	pop	{r7, pc}

08001a70 <_close>:

int _close(int file)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a98:	605a      	str	r2, [r3, #4]
  return 0;
 8001a9a:	2300      	movs	r3, #0
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <_isatty>:

int _isatty(int file)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ab0:	2301      	movs	r3, #1
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr

08001abe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b085      	sub	sp, #20
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	60f8      	str	r0, [r7, #12]
 8001ac6:	60b9      	str	r1, [r7, #8]
 8001ac8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3714      	adds	r7, #20
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae0:	4a14      	ldr	r2, [pc, #80]	@ (8001b34 <_sbrk+0x5c>)
 8001ae2:	4b15      	ldr	r3, [pc, #84]	@ (8001b38 <_sbrk+0x60>)
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aec:	4b13      	ldr	r3, [pc, #76]	@ (8001b3c <_sbrk+0x64>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d102      	bne.n	8001afa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af4:	4b11      	ldr	r3, [pc, #68]	@ (8001b3c <_sbrk+0x64>)
 8001af6:	4a12      	ldr	r2, [pc, #72]	@ (8001b40 <_sbrk+0x68>)
 8001af8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afa:	4b10      	ldr	r3, [pc, #64]	@ (8001b3c <_sbrk+0x64>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4413      	add	r3, r2
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d207      	bcs.n	8001b18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b08:	f004 ff3a 	bl	8006980 <__errno>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	220c      	movs	r2, #12
 8001b10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b12:	f04f 33ff 	mov.w	r3, #4294967295
 8001b16:	e009      	b.n	8001b2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b18:	4b08      	ldr	r3, [pc, #32]	@ (8001b3c <_sbrk+0x64>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b1e:	4b07      	ldr	r3, [pc, #28]	@ (8001b3c <_sbrk+0x64>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4413      	add	r3, r2
 8001b26:	4a05      	ldr	r2, [pc, #20]	@ (8001b3c <_sbrk+0x64>)
 8001b28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3718      	adds	r7, #24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20018000 	.word	0x20018000
 8001b38:	00000400 	.word	0x00000400
 8001b3c:	2000035c 	.word	0x2000035c
 8001b40:	200004b0 	.word	0x200004b0

08001b44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b48:	4b06      	ldr	r3, [pc, #24]	@ (8001b64 <SystemInit+0x20>)
 8001b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b4e:	4a05      	ldr	r2, [pc, #20]	@ (8001b64 <SystemInit+0x20>)
 8001b50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b6c:	f7ff ffea 	bl	8001b44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b70:	480c      	ldr	r0, [pc, #48]	@ (8001ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001b72:	490d      	ldr	r1, [pc, #52]	@ (8001ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <LoopForever+0xe>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0a      	ldr	r2, [pc, #40]	@ (8001bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001b88:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb4 <LoopForever+0x16>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b96:	f004 fef9 	bl	800698c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001b9a:	f7ff fb4b 	bl	8001234 <main>

08001b9e <LoopForever>:

LoopForever:
    b LoopForever
 8001b9e:	e7fe      	b.n	8001b9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ba0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ba8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001bac:	08008efc 	.word	0x08008efc
  ldr r2, =_sbss
 8001bb0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8001bb4:	200004b0 	.word	0x200004b0

08001bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001bb8:	e7fe      	b.n	8001bb8 <ADC1_2_IRQHandler>
	...

08001bbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8001bf8 <HAL_Init+0x3c>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a0b      	ldr	r2, [pc, #44]	@ (8001bf8 <HAL_Init+0x3c>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd2:	2003      	movs	r0, #3
 8001bd4:	f000 f962 	bl	8001e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001bd8:	2000      	movs	r0, #0
 8001bda:	f000 f80f 	bl	8001bfc <HAL_InitTick>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	71fb      	strb	r3, [r7, #7]
 8001be8:	e001      	b.n	8001bee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001bea:	f7ff fdb1 	bl	8001750 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001bee:	79fb      	ldrb	r3, [r7, #7]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3708      	adds	r7, #8
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	40022000 	.word	0x40022000

08001bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001c04:	2300      	movs	r3, #0
 8001c06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001c08:	4b17      	ldr	r3, [pc, #92]	@ (8001c68 <HAL_InitTick+0x6c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d023      	beq.n	8001c58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001c10:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <HAL_InitTick+0x70>)
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	4b14      	ldr	r3, [pc, #80]	@ (8001c68 <HAL_InitTick+0x6c>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c26:	4618      	mov	r0, r3
 8001c28:	f000 f96d 	bl	8001f06 <HAL_SYSTICK_Config>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d10f      	bne.n	8001c52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d809      	bhi.n	8001c4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 f937 	bl	8001eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001c44:	4a0a      	ldr	r2, [pc, #40]	@ (8001c70 <HAL_InitTick+0x74>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
 8001c4a:	e007      	b.n	8001c5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	e004      	b.n	8001c5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	73fb      	strb	r3, [r7, #15]
 8001c56:	e001      	b.n	8001c5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000000c 	.word	0x2000000c
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	20000008 	.word	0x20000008

08001c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001c78:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_IncTick+0x20>)
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b06      	ldr	r3, [pc, #24]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4413      	add	r3, r2
 8001c84:	4a04      	ldr	r2, [pc, #16]	@ (8001c98 <HAL_IncTick+0x24>)
 8001c86:	6013      	str	r3, [r2, #0]
}
 8001c88:	bf00      	nop
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	2000000c 	.word	0x2000000c
 8001c98:	20000360 	.word	0x20000360

08001c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b03      	ldr	r3, [pc, #12]	@ (8001cb0 <HAL_GetTick+0x14>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	20000360 	.word	0x20000360

08001cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cbc:	f7ff ffee 	bl	8001c9c <HAL_GetTick>
 8001cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ccc:	d005      	beq.n	8001cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001cce:	4b0a      	ldr	r3, [pc, #40]	@ (8001cf8 <HAL_Delay+0x44>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	4413      	add	r3, r2
 8001cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cda:	bf00      	nop
 8001cdc:	f7ff ffde 	bl	8001c9c <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	68fa      	ldr	r2, [r7, #12]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d8f7      	bhi.n	8001cdc <HAL_Delay+0x28>
  {
  }
}
 8001cec:	bf00      	nop
 8001cee:	bf00      	nop
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	2000000c 	.word	0x2000000c

08001cfc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d12:	68ba      	ldr	r2, [r7, #8]
 8001d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d18:	4013      	ands	r3, r2
 8001d1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d2e:	4a04      	ldr	r2, [pc, #16]	@ (8001d40 <__NVIC_SetPriorityGrouping+0x44>)
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	60d3      	str	r3, [r2, #12]
}
 8001d34:	bf00      	nop
 8001d36:	3714      	adds	r7, #20
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3e:	4770      	bx	lr
 8001d40:	e000ed00 	.word	0xe000ed00

08001d44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d48:	4b04      	ldr	r3, [pc, #16]	@ (8001d5c <__NVIC_GetPriorityGrouping+0x18>)
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	0a1b      	lsrs	r3, r3, #8
 8001d4e:	f003 0307 	and.w	r3, r3, #7
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	4603      	mov	r3, r0
 8001d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	db0b      	blt.n	8001d8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	f003 021f 	and.w	r2, r3, #31
 8001d78:	4907      	ldr	r1, [pc, #28]	@ (8001d98 <__NVIC_EnableIRQ+0x38>)
 8001d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7e:	095b      	lsrs	r3, r3, #5
 8001d80:	2001      	movs	r0, #1
 8001d82:	fa00 f202 	lsl.w	r2, r0, r2
 8001d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100

08001d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	4603      	mov	r3, r0
 8001da4:	6039      	str	r1, [r7, #0]
 8001da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	db0a      	blt.n	8001dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	b2da      	uxtb	r2, r3
 8001db4:	490c      	ldr	r1, [pc, #48]	@ (8001de8 <__NVIC_SetPriority+0x4c>)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	0112      	lsls	r2, r2, #4
 8001dbc:	b2d2      	uxtb	r2, r2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001dc4:	e00a      	b.n	8001ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	b2da      	uxtb	r2, r3
 8001dca:	4908      	ldr	r1, [pc, #32]	@ (8001dec <__NVIC_SetPriority+0x50>)
 8001dcc:	79fb      	ldrb	r3, [r7, #7]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	3b04      	subs	r3, #4
 8001dd4:	0112      	lsls	r2, r2, #4
 8001dd6:	b2d2      	uxtb	r2, r2
 8001dd8:	440b      	add	r3, r1
 8001dda:	761a      	strb	r2, [r3, #24]
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr
 8001de8:	e000e100 	.word	0xe000e100
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b089      	sub	sp, #36	@ 0x24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f1c3 0307 	rsb	r3, r3, #7
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	bf28      	it	cs
 8001e0e:	2304      	movcs	r3, #4
 8001e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2b06      	cmp	r3, #6
 8001e18:	d902      	bls.n	8001e20 <NVIC_EncodePriority+0x30>
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	3b03      	subs	r3, #3
 8001e1e:	e000      	b.n	8001e22 <NVIC_EncodePriority+0x32>
 8001e20:	2300      	movs	r3, #0
 8001e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e24:	f04f 32ff 	mov.w	r2, #4294967295
 8001e28:	69bb      	ldr	r3, [r7, #24]
 8001e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2e:	43da      	mvns	r2, r3
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	401a      	ands	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e38:	f04f 31ff 	mov.w	r1, #4294967295
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e42:	43d9      	mvns	r1, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e48:	4313      	orrs	r3, r2
         );
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3724      	adds	r7, #36	@ 0x24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e68:	d301      	bcc.n	8001e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e00f      	b.n	8001e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8001e98 <SysTick_Config+0x40>)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e76:	210f      	movs	r1, #15
 8001e78:	f04f 30ff 	mov.w	r0, #4294967295
 8001e7c:	f7ff ff8e 	bl	8001d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e80:	4b05      	ldr	r3, [pc, #20]	@ (8001e98 <SysTick_Config+0x40>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e86:	4b04      	ldr	r3, [pc, #16]	@ (8001e98 <SysTick_Config+0x40>)
 8001e88:	2207      	movs	r2, #7
 8001e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	e000e010 	.word	0xe000e010

08001e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b082      	sub	sp, #8
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff ff29 	bl	8001cfc <__NVIC_SetPriorityGrouping>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b086      	sub	sp, #24
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	4603      	mov	r3, r0
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
 8001ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ec4:	f7ff ff3e 	bl	8001d44 <__NVIC_GetPriorityGrouping>
 8001ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eca:	687a      	ldr	r2, [r7, #4]
 8001ecc:	68b9      	ldr	r1, [r7, #8]
 8001ece:	6978      	ldr	r0, [r7, #20]
 8001ed0:	f7ff ff8e 	bl	8001df0 <NVIC_EncodePriority>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eda:	4611      	mov	r1, r2
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7ff ff5d 	bl	8001d9c <__NVIC_SetPriority>
}
 8001ee2:	bf00      	nop
 8001ee4:	3718      	adds	r7, #24
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eea:	b580      	push	{r7, lr}
 8001eec:	b082      	sub	sp, #8
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff31 	bl	8001d60 <__NVIC_EnableIRQ>
}
 8001efe:	bf00      	nop
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f06:	b580      	push	{r7, lr}
 8001f08:	b082      	sub	sp, #8
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7ff ffa2 	bl	8001e58 <SysTick_Config>
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
	...

08001f20 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	613b      	str	r3, [r7, #16]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f32:	4b2f      	ldr	r3, [pc, #188]	@ (8001ff0 <HAL_FLASH_Program+0xd0>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d101      	bne.n	8001f3e <HAL_FLASH_Program+0x1e>
 8001f3a:	2302      	movs	r3, #2
 8001f3c:	e053      	b.n	8001fe6 <HAL_FLASH_Program+0xc6>
 8001f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff0 <HAL_FLASH_Program+0xd0>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f44:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001f48:	f000 f888 	bl	800205c <FLASH_WaitForLastOperation>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8001f50:	7dfb      	ldrb	r3, [r7, #23]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d143      	bne.n	8001fde <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001f56:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <HAL_FLASH_Program+0xd0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8001f5c:	4b25      	ldr	r3, [pc, #148]	@ (8001ff4 <HAL_FLASH_Program+0xd4>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d009      	beq.n	8001f7c <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001f68:	4b22      	ldr	r3, [pc, #136]	@ (8001ff4 <HAL_FLASH_Program+0xd4>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a21      	ldr	r2, [pc, #132]	@ (8001ff4 <HAL_FLASH_Program+0xd4>)
 8001f6e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001f72:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001f74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <HAL_FLASH_Program+0xd0>)
 8001f76:	2202      	movs	r2, #2
 8001f78:	771a      	strb	r2, [r3, #28]
 8001f7a:	e002      	b.n	8001f82 <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001f7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ff0 <HAL_FLASH_Program+0xd0>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	771a      	strb	r2, [r3, #28]
    }

    if(TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f8c:	68b8      	ldr	r0, [r7, #8]
 8001f8e:	f000 f8bb 	bl	8002108 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8001f92:	2301      	movs	r3, #1
 8001f94:	613b      	str	r3, [r7, #16]
 8001f96:	e010      	b.n	8001fba <HAL_FLASH_Program+0x9a>
    }
    else if((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d002      	beq.n	8001fa4 <HAL_FLASH_Program+0x84>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d10a      	bne.n	8001fba <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	68b8      	ldr	r0, [r7, #8]
 8001faa:	f000 f8d3 	bl	8002154 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if(TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d102      	bne.n	8001fba <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8001fb4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001fb8:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001fba:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8001fbe:	f000 f84d 	bl	800205c <FLASH_WaitForLastOperation>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d006      	beq.n	8001fda <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_FLASH_Program+0xd4>)
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	4907      	ldr	r1, [pc, #28]	@ (8001ff4 <HAL_FLASH_Program+0xd4>)
 8001fd6:	4013      	ands	r3, r2
 8001fd8:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001fda:	f000 f9eb 	bl	80023b4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fde:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <HAL_FLASH_Program+0xd0>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]

  return status;
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000010 	.word	0x20000010
 8001ff4:	40022000 	.word	0x40022000

08001ff8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001ffe:	2300      	movs	r3, #0
 8002000:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <HAL_FLASH_Unlock+0x38>)
 8002004:	695b      	ldr	r3, [r3, #20]
 8002006:	2b00      	cmp	r3, #0
 8002008:	da0b      	bge.n	8002022 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <HAL_FLASH_Unlock+0x38>)
 800200c:	4a09      	ldr	r2, [pc, #36]	@ (8002034 <HAL_FLASH_Unlock+0x3c>)
 800200e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <HAL_FLASH_Unlock+0x38>)
 8002012:	4a09      	ldr	r2, [pc, #36]	@ (8002038 <HAL_FLASH_Unlock+0x40>)
 8002014:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8002016:	4b06      	ldr	r3, [pc, #24]	@ (8002030 <HAL_FLASH_Unlock+0x38>)
 8002018:	695b      	ldr	r3, [r3, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	da01      	bge.n	8002022 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8002022:	79fb      	ldrb	r3, [r7, #7]
}
 8002024:	4618      	mov	r0, r3
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	40022000 	.word	0x40022000
 8002034:	45670123 	.word	0x45670123
 8002038:	cdef89ab 	.word	0xcdef89ab

0800203c <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002040:	4b05      	ldr	r3, [pc, #20]	@ (8002058 <HAL_FLASH_Lock+0x1c>)
 8002042:	695b      	ldr	r3, [r3, #20]
 8002044:	4a04      	ldr	r2, [pc, #16]	@ (8002058 <HAL_FLASH_Lock+0x1c>)
 8002046:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800204a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	40022000 	.word	0x40022000

0800205c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff fe1a 	bl	8001c9c <HAL_GetTick>
 8002068:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800206a:	e00d      	b.n	8002088 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002072:	d009      	beq.n	8002088 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 8002074:	f7ff fe12 	bl	8001c9c <HAL_GetTick>
 8002078:	4602      	mov	r2, r0
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	1ad3      	subs	r3, r2, r3
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	429a      	cmp	r2, r3
 8002082:	d801      	bhi.n	8002088 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e036      	b.n	80020f6 <FLASH_WaitForLastOperation+0x9a>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <FLASH_WaitForLastOperation+0xa4>)
 800208a:	691b      	ldr	r3, [r3, #16]
 800208c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d1eb      	bne.n	800206c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8002094:	4b1a      	ldr	r3, [pc, #104]	@ (8002100 <FLASH_WaitForLastOperation+0xa4>)
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800209c:	4013      	ands	r3, r2
 800209e:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d01d      	beq.n	80020e2 <FLASH_WaitForLastOperation+0x86>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80020a6:	4b17      	ldr	r3, [pc, #92]	@ (8002104 <FLASH_WaitForLastOperation+0xa8>)
 80020a8:	685a      	ldr	r2, [r3, #4]
 80020aa:	68bb      	ldr	r3, [r7, #8]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	4a15      	ldr	r2, [pc, #84]	@ (8002104 <FLASH_WaitForLastOperation+0xa8>)
 80020b0:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020b8:	d307      	bcc.n	80020ca <FLASH_WaitForLastOperation+0x6e>
 80020ba:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <FLASH_WaitForLastOperation+0xa4>)
 80020bc:	699a      	ldr	r2, [r3, #24]
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80020c4:	490e      	ldr	r1, [pc, #56]	@ (8002100 <FLASH_WaitForLastOperation+0xa4>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	618b      	str	r3, [r1, #24]
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <FLASH_WaitForLastOperation+0x82>
 80020d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002100 <FLASH_WaitForLastOperation+0xa4>)
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80020dc:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e009      	b.n	80020f6 <FLASH_WaitForLastOperation+0x9a>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <FLASH_WaitForLastOperation+0xa4>)
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d002      	beq.n	80020f4 <FLASH_WaitForLastOperation+0x98>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80020ee:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <FLASH_WaitForLastOperation+0xa4>)
 80020f0:	2201      	movs	r2, #1
 80020f2:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40022000 	.word	0x40022000
 8002104:	20000010 	.word	0x20000010

08002108 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002108:	b480      	push	{r7}
 800210a:	b085      	sub	sp, #20
 800210c:	af00      	add	r7, sp, #0
 800210e:	60f8      	str	r0, [r7, #12]
 8002110:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <FLASH_Program_DoubleWord+0x48>)
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	4a0d      	ldr	r2, [pc, #52]	@ (8002150 <FLASH_Program_DoubleWord+0x48>)
 800211a:	f043 0301 	orr.w	r3, r3, #1
 800211e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	683a      	ldr	r2, [r7, #0]
 8002124:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8002126:	f3bf 8f6f 	isb	sy
}
 800212a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4U) = (uint32_t)(Data >> 32);
 800212c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002130:	f04f 0200 	mov.w	r2, #0
 8002134:	f04f 0300 	mov.w	r3, #0
 8002138:	000a      	movs	r2, r1
 800213a:	2300      	movs	r3, #0
 800213c:	68f9      	ldr	r1, [r7, #12]
 800213e:	3104      	adds	r1, #4
 8002140:	4613      	mov	r3, r2
 8002142:	600b      	str	r3, [r1, #0]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40022000 	.word	0x40022000

08002154 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8002154:	b480      	push	{r7}
 8002156:	b089      	sub	sp, #36	@ 0x24
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t primask_bit;
  uint8_t row_index = (2*FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800215e:	2340      	movs	r3, #64	@ 0x40
 8002160:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t*)Address;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t*)DataAddress;
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800216a:	4b14      	ldr	r3, [pc, #80]	@ (80021bc <FLASH_Program_Fast+0x68>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	4a13      	ldr	r2, [pc, #76]	@ (80021bc <FLASH_Program_Fast+0x68>)
 8002170:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002174:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002176:	f3ef 8310 	mrs	r3, PRIMASK
 800217a:	60fb      	str	r3, [r7, #12]
  return(result);
 800217c:	68fb      	ldr	r3, [r7, #12]

  /* Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800217e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002180:	b672      	cpsid	i
}
 8002182:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800218c:	69bb      	ldr	r3, [r7, #24]
 800218e:	3304      	adds	r3, #4
 8002190:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	3304      	adds	r3, #4
 8002196:	617b      	str	r3, [r7, #20]
    row_index--;
 8002198:	7ffb      	ldrb	r3, [r7, #31]
 800219a:	3b01      	subs	r3, #1
 800219c:	77fb      	strb	r3, [r7, #31]
  } while (row_index != 0U);
 800219e:	7ffb      	ldrb	r3, [r7, #31]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1ef      	bne.n	8002184 <FLASH_Program_Fast+0x30>
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f383 8810 	msr	PRIMASK, r3
}
 80021ae:	bf00      	nop

  /* Re-enable the interrupts */
  __set_PRIMASK(primask_bit);
}
 80021b0:	bf00      	nop
 80021b2:	3724      	adds	r7, #36	@ 0x24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr
 80021bc:	40022000 	.word	0x40022000

080021c0 <HAL_FLASHEx_Erase>:
  *         the pages have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80021ca:	4b49      	ldr	r3, [pc, #292]	@ (80022f0 <HAL_FLASHEx_Erase+0x130>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d101      	bne.n	80021d6 <HAL_FLASHEx_Erase+0x16>
 80021d2:	2302      	movs	r3, #2
 80021d4:	e087      	b.n	80022e6 <HAL_FLASHEx_Erase+0x126>
 80021d6:	4b46      	ldr	r3, [pc, #280]	@ (80022f0 <HAL_FLASHEx_Erase+0x130>)
 80021d8:	2201      	movs	r2, #1
 80021da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021dc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80021e0:	f7ff ff3c 	bl	800205c <FLASH_WaitForLastOperation>
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d177      	bne.n	80022de <HAL_FLASHEx_Erase+0x11e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021ee:	4b40      	ldr	r3, [pc, #256]	@ (80022f0 <HAL_FLASHEx_Erase+0x130>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80021f4:	4b3f      	ldr	r3, [pc, #252]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d013      	beq.n	8002228 <HAL_FLASHEx_Erase+0x68>
    {
      if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002200:	4b3c      	ldr	r3, [pc, #240]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002208:	2b00      	cmp	r3, #0
 800220a:	d009      	beq.n	8002220 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800220c:	4b39      	ldr	r3, [pc, #228]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a38      	ldr	r2, [pc, #224]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 8002212:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002216:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8002218:	4b35      	ldr	r3, [pc, #212]	@ (80022f0 <HAL_FLASHEx_Erase+0x130>)
 800221a:	2203      	movs	r2, #3
 800221c:	771a      	strb	r2, [r3, #28]
 800221e:	e016      	b.n	800224e <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8002220:	4b33      	ldr	r3, [pc, #204]	@ (80022f0 <HAL_FLASHEx_Erase+0x130>)
 8002222:	2201      	movs	r2, #1
 8002224:	771a      	strb	r2, [r3, #28]
 8002226:	e012      	b.n	800224e <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8002228:	4b32      	ldr	r3, [pc, #200]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002234:	4b2f      	ldr	r3, [pc, #188]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a2e      	ldr	r2, [pc, #184]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 800223a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800223e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8002240:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <HAL_FLASHEx_Erase+0x130>)
 8002242:	2202      	movs	r2, #2
 8002244:	771a      	strb	r2, [r3, #28]
 8002246:	e002      	b.n	800224e <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8002248:	4b29      	ldr	r3, [pc, #164]	@ (80022f0 <HAL_FLASHEx_Erase+0x130>)
 800224a:	2200      	movs	r2, #0
 800224c:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d113      	bne.n	800227e <HAL_FLASHEx_Erase+0xbe>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f000 f84c 	bl	80022f8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002260:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8002264:	f7ff fefa 	bl	800205c <FLASH_WaitForLastOperation>
 8002268:	4603      	mov	r3, r0
 800226a:	73fb      	strb	r3, [r7, #15]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
 800226c:	4b21      	ldr	r3, [pc, #132]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 800226e:	695b      	ldr	r3, [r3, #20]
 8002270:	4a20      	ldr	r2, [pc, #128]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 8002272:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8002276:	f023 0304 	bic.w	r3, r3, #4
 800227a:	6153      	str	r3, [r2, #20]
 800227c:	e02d      	b.n	80022da <HAL_FLASHEx_Erase+0x11a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	f04f 32ff 	mov.w	r2, #4294967295
 8002284:	601a      	str	r2, [r3, #0]

      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60bb      	str	r3, [r7, #8]
 800228c:	e01d      	b.n	80022ca <HAL_FLASHEx_Erase+0x10a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4619      	mov	r1, r3
 8002294:	68b8      	ldr	r0, [r7, #8]
 8002296:	f000 f857 	bl	8002348 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800229a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800229e:	f7ff fedd 	bl	800205c <FLASH_WaitForLastOperation>
 80022a2:	4603      	mov	r3, r0
 80022a4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80022a6:	4b13      	ldr	r3, [pc, #76]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	4a12      	ldr	r2, [pc, #72]	@ (80022f4 <HAL_FLASHEx_Erase+0x134>)
 80022ac:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80022b0:	f023 0302 	bic.w	r3, r3, #2
 80022b4:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80022b6:	7bfb      	ldrb	r3, [r7, #15]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d003      	beq.n	80022c4 <HAL_FLASHEx_Erase+0x104>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = page_index;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68ba      	ldr	r2, [r7, #8]
 80022c0:	601a      	str	r2, [r3, #0]
          break;
 80022c2:	e00a      	b.n	80022da <HAL_FLASHEx_Erase+0x11a>
      for(page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	3301      	adds	r3, #1
 80022c8:	60bb      	str	r3, [r7, #8]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689a      	ldr	r2, [r3, #8]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	4413      	add	r3, r2
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d3d9      	bcc.n	800228e <HAL_FLASHEx_Erase+0xce>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80022da:	f000 f86b 	bl	80023b4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80022de:	4b04      	ldr	r3, [pc, #16]	@ (80022f0 <HAL_FLASHEx_Erase+0x130>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	701a      	strb	r2, [r3, #0]

  return status;
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
 80022ee:	bf00      	nop
 80022f0:	20000010 	.word	0x20000010
 80022f4:	40022000 	.word	0x40022000

080022f8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if((Banks & FLASH_BANK_1) != 0U)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d005      	beq.n	8002316 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800230a:	4b0e      	ldr	r3, [pc, #56]	@ (8002344 <FLASH_MassErase+0x4c>)
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4a0d      	ldr	r2, [pc, #52]	@ (8002344 <FLASH_MassErase+0x4c>)
 8002310:	f043 0304 	orr.w	r3, r3, #4
 8002314:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Set the Mass Erase Bit for the bank 2 if requested */
    if((Banks & FLASH_BANK_2) != 0U)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <FLASH_MassErase+0x34>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER2);
 8002320:	4b08      	ldr	r3, [pc, #32]	@ (8002344 <FLASH_MassErase+0x4c>)
 8002322:	695b      	ldr	r3, [r3, #20]
 8002324:	4a07      	ldr	r2, [pc, #28]	@ (8002344 <FLASH_MassErase+0x4c>)
 8002326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800232a:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800232c:	4b05      	ldr	r3, [pc, #20]	@ (8002344 <FLASH_MassErase+0x4c>)
 800232e:	695b      	ldr	r3, [r3, #20]
 8002330:	4a04      	ldr	r2, [pc, #16]	@ (8002344 <FLASH_MassErase+0x4c>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002336:	6153      	str	r3, [r2, #20]
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr
 8002344:	40022000 	.word	0x40022000

08002348 <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f003 0301 	and.w	r3, r3, #1
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 800235c:	4b14      	ldr	r3, [pc, #80]	@ (80023b0 <FLASH_PageErase+0x68>)
 800235e:	695b      	ldr	r3, [r3, #20]
 8002360:	4a13      	ldr	r2, [pc, #76]	@ (80023b0 <FLASH_PageErase+0x68>)
 8002362:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002366:	6153      	str	r3, [r2, #20]
 8002368:	e005      	b.n	8002376 <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800236a:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <FLASH_PageErase+0x68>)
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	4a10      	ldr	r2, [pc, #64]	@ (80023b0 <FLASH_PageErase+0x68>)
 8002370:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002374:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8002376:	4b0e      	ldr	r3, [pc, #56]	@ (80023b0 <FLASH_PageErase+0x68>)
 8002378:	695b      	ldr	r3, [r3, #20]
 800237a:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8002386:	490a      	ldr	r1, [pc, #40]	@ (80023b0 <FLASH_PageErase+0x68>)
 8002388:	4313      	orrs	r3, r2
 800238a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800238c:	4b08      	ldr	r3, [pc, #32]	@ (80023b0 <FLASH_PageErase+0x68>)
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	4a07      	ldr	r2, [pc, #28]	@ (80023b0 <FLASH_PageErase+0x68>)
 8002392:	f043 0302 	orr.w	r3, r3, #2
 8002396:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <FLASH_PageErase+0x68>)
 800239a:	695b      	ldr	r3, [r3, #20]
 800239c:	4a04      	ldr	r2, [pc, #16]	@ (80023b0 <FLASH_PageErase+0x68>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a2:	6153      	str	r3, [r2, #20]
}
 80023a4:	bf00      	nop
 80023a6:	370c      	adds	r7, #12
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	40022000 	.word	0x40022000

080023b4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 80023ba:	4b21      	ldr	r3, [pc, #132]	@ (8002440 <FLASH_FlushCaches+0x8c>)
 80023bc:	7f1b      	ldrb	r3, [r3, #28]
 80023be:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80023c0:	79fb      	ldrb	r3, [r7, #7]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d002      	beq.n	80023cc <FLASH_FlushCaches+0x18>
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d117      	bne.n	80023fc <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80023cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002444 <FLASH_FlushCaches+0x90>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1c      	ldr	r2, [pc, #112]	@ (8002444 <FLASH_FlushCaches+0x90>)
 80023d2:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80023d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002444 <FLASH_FlushCaches+0x90>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a19      	ldr	r2, [pc, #100]	@ (8002444 <FLASH_FlushCaches+0x90>)
 80023de:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80023e2:	6013      	str	r3, [r2, #0]
 80023e4:	4b17      	ldr	r3, [pc, #92]	@ (8002444 <FLASH_FlushCaches+0x90>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a16      	ldr	r2, [pc, #88]	@ (8002444 <FLASH_FlushCaches+0x90>)
 80023ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80023ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80023f0:	4b14      	ldr	r3, [pc, #80]	@ (8002444 <FLASH_FlushCaches+0x90>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a13      	ldr	r2, [pc, #76]	@ (8002444 <FLASH_FlushCaches+0x90>)
 80023f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023fa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d002      	beq.n	8002408 <FLASH_FlushCaches+0x54>
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	2b03      	cmp	r3, #3
 8002406:	d111      	bne.n	800242c <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002408:	4b0e      	ldr	r3, [pc, #56]	@ (8002444 <FLASH_FlushCaches+0x90>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a0d      	ldr	r2, [pc, #52]	@ (8002444 <FLASH_FlushCaches+0x90>)
 800240e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	4b0b      	ldr	r3, [pc, #44]	@ (8002444 <FLASH_FlushCaches+0x90>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a0a      	ldr	r2, [pc, #40]	@ (8002444 <FLASH_FlushCaches+0x90>)
 800241a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800241e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002420:	4b08      	ldr	r3, [pc, #32]	@ (8002444 <FLASH_FlushCaches+0x90>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a07      	ldr	r2, [pc, #28]	@ (8002444 <FLASH_FlushCaches+0x90>)
 8002426:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800242a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800242c:	4b04      	ldr	r3, [pc, #16]	@ (8002440 <FLASH_FlushCaches+0x8c>)
 800242e:	2200      	movs	r2, #0
 8002430:	771a      	strb	r2, [r3, #28]
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	20000010 	.word	0x20000010
 8002444:	40022000 	.word	0x40022000

08002448 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002448:	b480      	push	{r7}
 800244a:	b087      	sub	sp, #28
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002452:	2300      	movs	r3, #0
 8002454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002456:	e17f      	b.n	8002758 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	2101      	movs	r1, #1
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	fa01 f303 	lsl.w	r3, r1, r3
 8002464:	4013      	ands	r3, r2
 8002466:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8171 	beq.w	8002752 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	2b01      	cmp	r3, #1
 800247a:	d005      	beq.n	8002488 <HAL_GPIO_Init+0x40>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f003 0303 	and.w	r3, r3, #3
 8002484:	2b02      	cmp	r3, #2
 8002486:	d130      	bne.n	80024ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	005b      	lsls	r3, r3, #1
 8002492:	2203      	movs	r2, #3
 8002494:	fa02 f303 	lsl.w	r3, r2, r3
 8002498:	43db      	mvns	r3, r3
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	4013      	ands	r3, r2
 800249e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	68da      	ldr	r2, [r3, #12]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	005b      	lsls	r3, r3, #1
 80024a8:	fa02 f303 	lsl.w	r3, r2, r3
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	693a      	ldr	r2, [r7, #16]
 80024b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80024be:	2201      	movs	r2, #1
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	693a      	ldr	r2, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	091b      	lsrs	r3, r3, #4
 80024d4:	f003 0201 	and.w	r2, r3, #1
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	693a      	ldr	r2, [r7, #16]
 80024e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80024ea:	683b      	ldr	r3, [r7, #0]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f003 0303 	and.w	r3, r3, #3
 80024f2:	2b03      	cmp	r3, #3
 80024f4:	d118      	bne.n	8002528 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80024fc:	2201      	movs	r2, #1
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	4013      	ands	r3, r2
 800250a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	08db      	lsrs	r3, r3, #3
 8002512:	f003 0201 	and.w	r2, r3, #1
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	693a      	ldr	r2, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b03      	cmp	r3, #3
 8002532:	d017      	beq.n	8002564 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	2203      	movs	r2, #3
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	43db      	mvns	r3, r3
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	4013      	ands	r3, r2
 800254a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	fa02 f303 	lsl.w	r3, r2, r3
 8002558:	693a      	ldr	r2, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d123      	bne.n	80025b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	08da      	lsrs	r2, r3, #3
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	3208      	adds	r2, #8
 8002578:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800257c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	f003 0307 	and.w	r3, r3, #7
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	220f      	movs	r2, #15
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	4013      	ands	r3, r2
 8002592:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	691a      	ldr	r2, [r3, #16]
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	08da      	lsrs	r2, r3, #3
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	3208      	adds	r2, #8
 80025b2:	6939      	ldr	r1, [r7, #16]
 80025b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	2203      	movs	r2, #3
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	43db      	mvns	r3, r3
 80025ca:	693a      	ldr	r2, [r7, #16]
 80025cc:	4013      	ands	r3, r2
 80025ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f003 0203 	and.w	r2, r3, #3
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	005b      	lsls	r3, r3, #1
 80025dc:	fa02 f303 	lsl.w	r3, r2, r3
 80025e0:	693a      	ldr	r2, [r7, #16]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f000 80ac 	beq.w	8002752 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fa:	4b5f      	ldr	r3, [pc, #380]	@ (8002778 <HAL_GPIO_Init+0x330>)
 80025fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025fe:	4a5e      	ldr	r2, [pc, #376]	@ (8002778 <HAL_GPIO_Init+0x330>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6613      	str	r3, [r2, #96]	@ 0x60
 8002606:	4b5c      	ldr	r3, [pc, #368]	@ (8002778 <HAL_GPIO_Init+0x330>)
 8002608:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002612:	4a5a      	ldr	r2, [pc, #360]	@ (800277c <HAL_GPIO_Init+0x334>)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	089b      	lsrs	r3, r3, #2
 8002618:	3302      	adds	r3, #2
 800261a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800261e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002620:	697b      	ldr	r3, [r7, #20]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	220f      	movs	r2, #15
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43db      	mvns	r3, r3
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	4013      	ands	r3, r2
 8002634:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800263c:	d025      	beq.n	800268a <HAL_GPIO_Init+0x242>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a4f      	ldr	r2, [pc, #316]	@ (8002780 <HAL_GPIO_Init+0x338>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d01f      	beq.n	8002686 <HAL_GPIO_Init+0x23e>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a4e      	ldr	r2, [pc, #312]	@ (8002784 <HAL_GPIO_Init+0x33c>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d019      	beq.n	8002682 <HAL_GPIO_Init+0x23a>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4a4d      	ldr	r2, [pc, #308]	@ (8002788 <HAL_GPIO_Init+0x340>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d013      	beq.n	800267e <HAL_GPIO_Init+0x236>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a4c      	ldr	r2, [pc, #304]	@ (800278c <HAL_GPIO_Init+0x344>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d00d      	beq.n	800267a <HAL_GPIO_Init+0x232>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a4b      	ldr	r2, [pc, #300]	@ (8002790 <HAL_GPIO_Init+0x348>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d007      	beq.n	8002676 <HAL_GPIO_Init+0x22e>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <HAL_GPIO_Init+0x34c>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d101      	bne.n	8002672 <HAL_GPIO_Init+0x22a>
 800266e:	2306      	movs	r3, #6
 8002670:	e00c      	b.n	800268c <HAL_GPIO_Init+0x244>
 8002672:	2307      	movs	r3, #7
 8002674:	e00a      	b.n	800268c <HAL_GPIO_Init+0x244>
 8002676:	2305      	movs	r3, #5
 8002678:	e008      	b.n	800268c <HAL_GPIO_Init+0x244>
 800267a:	2304      	movs	r3, #4
 800267c:	e006      	b.n	800268c <HAL_GPIO_Init+0x244>
 800267e:	2303      	movs	r3, #3
 8002680:	e004      	b.n	800268c <HAL_GPIO_Init+0x244>
 8002682:	2302      	movs	r3, #2
 8002684:	e002      	b.n	800268c <HAL_GPIO_Init+0x244>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_GPIO_Init+0x244>
 800268a:	2300      	movs	r3, #0
 800268c:	697a      	ldr	r2, [r7, #20]
 800268e:	f002 0203 	and.w	r2, r2, #3
 8002692:	0092      	lsls	r2, r2, #2
 8002694:	4093      	lsls	r3, r2
 8002696:	693a      	ldr	r2, [r7, #16]
 8002698:	4313      	orrs	r3, r2
 800269a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800269c:	4937      	ldr	r1, [pc, #220]	@ (800277c <HAL_GPIO_Init+0x334>)
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	089b      	lsrs	r3, r3, #2
 80026a2:	3302      	adds	r3, #2
 80026a4:	693a      	ldr	r2, [r7, #16]
 80026a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80026aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002798 <HAL_GPIO_Init+0x350>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	4013      	ands	r3, r2
 80026b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80026ce:	4a32      	ldr	r2, [pc, #200]	@ (8002798 <HAL_GPIO_Init+0x350>)
 80026d0:	693b      	ldr	r3, [r7, #16]
 80026d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80026d4:	4b30      	ldr	r3, [pc, #192]	@ (8002798 <HAL_GPIO_Init+0x350>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	43db      	mvns	r3, r3
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4013      	ands	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80026f8:	4a27      	ldr	r2, [pc, #156]	@ (8002798 <HAL_GPIO_Init+0x350>)
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80026fe:	4b26      	ldr	r3, [pc, #152]	@ (8002798 <HAL_GPIO_Init+0x350>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	43db      	mvns	r3, r3
 8002708:	693a      	ldr	r2, [r7, #16]
 800270a:	4013      	ands	r3, r2
 800270c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d003      	beq.n	8002722 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800271a:	693a      	ldr	r2, [r7, #16]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002722:	4a1d      	ldr	r2, [pc, #116]	@ (8002798 <HAL_GPIO_Init+0x350>)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002728:	4b1b      	ldr	r3, [pc, #108]	@ (8002798 <HAL_GPIO_Init+0x350>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	43db      	mvns	r3, r3
 8002732:	693a      	ldr	r2, [r7, #16]
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4313      	orrs	r3, r2
 800274a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800274c:	4a12      	ldr	r2, [pc, #72]	@ (8002798 <HAL_GPIO_Init+0x350>)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	3301      	adds	r3, #1
 8002756:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	fa22 f303 	lsr.w	r3, r2, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	f47f ae78 	bne.w	8002458 <HAL_GPIO_Init+0x10>
  }
}
 8002768:	bf00      	nop
 800276a:	bf00      	nop
 800276c:	371c      	adds	r7, #28
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
 800277c:	40010000 	.word	0x40010000
 8002780:	48000400 	.word	0x48000400
 8002784:	48000800 	.word	0x48000800
 8002788:	48000c00 	.word	0x48000c00
 800278c:	48001000 	.word	0x48001000
 8002790:	48001400 	.word	0x48001400
 8002794:	48001800 	.word	0x48001800
 8002798:	40010400 	.word	0x40010400

0800279c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	460b      	mov	r3, r1
 80027a6:	807b      	strh	r3, [r7, #2]
 80027a8:	4613      	mov	r3, r2
 80027aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d003      	beq.n	80027ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80027b2:	887a      	ldrh	r2, [r7, #2]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80027b8:	e002      	b.n	80027c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80027ba:	887a      	ldrh	r2, [r7, #2]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80027cc:	b480      	push	{r7}
 80027ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80027d0:	4b04      	ldr	r3, [pc, #16]	@ (80027e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80027d8:	4618      	mov	r0, r3
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr
 80027e2:	bf00      	nop
 80027e4:	40007000 	.word	0x40007000

080027e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80027f6:	d130      	bne.n	800285a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80027f8:	4b23      	ldr	r3, [pc, #140]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002800:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002804:	d038      	beq.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002806:	4b20      	ldr	r3, [pc, #128]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800280e:	4a1e      	ldr	r2, [pc, #120]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002810:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002814:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2232      	movs	r2, #50	@ 0x32
 800281c:	fb02 f303 	mul.w	r3, r2, r3
 8002820:	4a1b      	ldr	r2, [pc, #108]	@ (8002890 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0c9b      	lsrs	r3, r3, #18
 8002828:	3301      	adds	r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800282c:	e002      	b.n	8002834 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	3b01      	subs	r3, #1
 8002832:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002834:	4b14      	ldr	r3, [pc, #80]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002840:	d102      	bne.n	8002848 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f2      	bne.n	800282e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002848:	4b0f      	ldr	r3, [pc, #60]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800284a:	695b      	ldr	r3, [r3, #20]
 800284c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002850:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002854:	d110      	bne.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002856:	2303      	movs	r3, #3
 8002858:	e00f      	b.n	800287a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800285a:	4b0b      	ldr	r3, [pc, #44]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002866:	d007      	beq.n	8002878 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002868:	4b07      	ldr	r3, [pc, #28]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002870:	4a05      	ldr	r2, [pc, #20]	@ (8002888 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002872:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002876:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002878:	2300      	movs	r3, #0
}
 800287a:	4618      	mov	r0, r3
 800287c:	3714      	adds	r7, #20
 800287e:	46bd      	mov	sp, r7
 8002880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002884:	4770      	bx	lr
 8002886:	bf00      	nop
 8002888:	40007000 	.word	0x40007000
 800288c:	20000004 	.word	0x20000004
 8002890:	431bde83 	.word	0x431bde83

08002894 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b088      	sub	sp, #32
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e3ca      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80028a6:	4b97      	ldr	r3, [pc, #604]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80028b0:	4b94      	ldr	r3, [pc, #592]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	f003 0303 	and.w	r3, r3, #3
 80028b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 80e4 	beq.w	8002a90 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d007      	beq.n	80028de <HAL_RCC_OscConfig+0x4a>
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	2b0c      	cmp	r3, #12
 80028d2:	f040 808b 	bne.w	80029ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	f040 8087 	bne.w	80029ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028de:	4b89      	ldr	r3, [pc, #548]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d005      	beq.n	80028f6 <HAL_RCC_OscConfig+0x62>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d101      	bne.n	80028f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e3a2      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a1a      	ldr	r2, [r3, #32]
 80028fa:	4b82      	ldr	r3, [pc, #520]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d004      	beq.n	8002910 <HAL_RCC_OscConfig+0x7c>
 8002906:	4b7f      	ldr	r3, [pc, #508]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800290e:	e005      	b.n	800291c <HAL_RCC_OscConfig+0x88>
 8002910:	4b7c      	ldr	r3, [pc, #496]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002912:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002916:	091b      	lsrs	r3, r3, #4
 8002918:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800291c:	4293      	cmp	r3, r2
 800291e:	d223      	bcs.n	8002968 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4618      	mov	r0, r3
 8002926:	f000 fd55 	bl	80033d4 <RCC_SetFlashLatencyFromMSIRange>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e383      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002934:	4b73      	ldr	r3, [pc, #460]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a72      	ldr	r2, [pc, #456]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 800293a:	f043 0308 	orr.w	r3, r3, #8
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	4b70      	ldr	r3, [pc, #448]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a1b      	ldr	r3, [r3, #32]
 800294c:	496d      	ldr	r1, [pc, #436]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 800294e:	4313      	orrs	r3, r2
 8002950:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002952:	4b6c      	ldr	r3, [pc, #432]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69db      	ldr	r3, [r3, #28]
 800295e:	021b      	lsls	r3, r3, #8
 8002960:	4968      	ldr	r1, [pc, #416]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
 8002966:	e025      	b.n	80029b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002968:	4b66      	ldr	r3, [pc, #408]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a65      	ldr	r2, [pc, #404]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 800296e:	f043 0308 	orr.w	r3, r3, #8
 8002972:	6013      	str	r3, [r2, #0]
 8002974:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a1b      	ldr	r3, [r3, #32]
 8002980:	4960      	ldr	r1, [pc, #384]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002986:	4b5f      	ldr	r3, [pc, #380]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	495b      	ldr	r1, [pc, #364]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002996:	4313      	orrs	r3, r2
 8002998:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a1b      	ldr	r3, [r3, #32]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f000 fd15 	bl	80033d4 <RCC_SetFlashLatencyFromMSIRange>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e343      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b4:	f000 fc4a 	bl	800324c <HAL_RCC_GetSysClockFreq>
 80029b8:	4602      	mov	r2, r0
 80029ba:	4b52      	ldr	r3, [pc, #328]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	091b      	lsrs	r3, r3, #4
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	4950      	ldr	r1, [pc, #320]	@ (8002b08 <HAL_RCC_OscConfig+0x274>)
 80029c6:	5ccb      	ldrb	r3, [r1, r3]
 80029c8:	f003 031f 	and.w	r3, r3, #31
 80029cc:	fa22 f303 	lsr.w	r3, r2, r3
 80029d0:	4a4e      	ldr	r2, [pc, #312]	@ (8002b0c <HAL_RCC_OscConfig+0x278>)
 80029d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80029d4:	4b4e      	ldr	r3, [pc, #312]	@ (8002b10 <HAL_RCC_OscConfig+0x27c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff f90f 	bl	8001bfc <HAL_InitTick>
 80029de:	4603      	mov	r3, r0
 80029e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d052      	beq.n	8002a8e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80029e8:	7bfb      	ldrb	r3, [r7, #15]
 80029ea:	e327      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	699b      	ldr	r3, [r3, #24]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d032      	beq.n	8002a5a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80029f4:	4b43      	ldr	r3, [pc, #268]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a42      	ldr	r2, [pc, #264]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 80029fa:	f043 0301 	orr.w	r3, r3, #1
 80029fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a00:	f7ff f94c 	bl	8001c9c <HAL_GetTick>
 8002a04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a06:	e008      	b.n	8002a1a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a08:	f7ff f948 	bl	8001c9c <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d901      	bls.n	8002a1a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	e310      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d0f0      	beq.n	8002a08 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002a26:	4b37      	ldr	r3, [pc, #220]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a36      	ldr	r2, [pc, #216]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a2c:	f043 0308 	orr.w	r3, r3, #8
 8002a30:	6013      	str	r3, [r2, #0]
 8002a32:	4b34      	ldr	r3, [pc, #208]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a1b      	ldr	r3, [r3, #32]
 8002a3e:	4931      	ldr	r1, [pc, #196]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002a44:	4b2f      	ldr	r3, [pc, #188]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	69db      	ldr	r3, [r3, #28]
 8002a50:	021b      	lsls	r3, r3, #8
 8002a52:	492c      	ldr	r1, [pc, #176]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a54:	4313      	orrs	r3, r2
 8002a56:	604b      	str	r3, [r1, #4]
 8002a58:	e01a      	b.n	8002a90 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002a5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a29      	ldr	r2, [pc, #164]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a60:	f023 0301 	bic.w	r3, r3, #1
 8002a64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002a66:	f7ff f919 	bl	8001c9c <HAL_GetTick>
 8002a6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a6c:	e008      	b.n	8002a80 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002a6e:	f7ff f915 	bl	8001c9c <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e2dd      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002a80:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0302 	and.w	r3, r3, #2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d1f0      	bne.n	8002a6e <HAL_RCC_OscConfig+0x1da>
 8002a8c:	e000      	b.n	8002a90 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002a8e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 0301 	and.w	r3, r3, #1
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d074      	beq.n	8002b86 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	2b08      	cmp	r3, #8
 8002aa0:	d005      	beq.n	8002aae <HAL_RCC_OscConfig+0x21a>
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	2b0c      	cmp	r3, #12
 8002aa6:	d10e      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2b03      	cmp	r3, #3
 8002aac:	d10b      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002aae:	4b15      	ldr	r3, [pc, #84]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d064      	beq.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d160      	bne.n	8002b84 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e2ba      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ace:	d106      	bne.n	8002ade <HAL_RCC_OscConfig+0x24a>
 8002ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a0b      	ldr	r2, [pc, #44]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002ad6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ada:	6013      	str	r3, [r2, #0]
 8002adc:	e026      	b.n	8002b2c <HAL_RCC_OscConfig+0x298>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ae6:	d115      	bne.n	8002b14 <HAL_RCC_OscConfig+0x280>
 8002ae8:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a05      	ldr	r2, [pc, #20]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002aee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002af2:	6013      	str	r3, [r2, #0]
 8002af4:	4b03      	ldr	r3, [pc, #12]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a02      	ldr	r2, [pc, #8]	@ (8002b04 <HAL_RCC_OscConfig+0x270>)
 8002afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afe:	6013      	str	r3, [r2, #0]
 8002b00:	e014      	b.n	8002b2c <HAL_RCC_OscConfig+0x298>
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	08008b30 	.word	0x08008b30
 8002b0c:	20000004 	.word	0x20000004
 8002b10:	20000008 	.word	0x20000008
 8002b14:	4ba0      	ldr	r3, [pc, #640]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a9f      	ldr	r2, [pc, #636]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b9d      	ldr	r3, [pc, #628]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a9c      	ldr	r2, [pc, #624]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d013      	beq.n	8002b5c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b34:	f7ff f8b2 	bl	8001c9c <HAL_GetTick>
 8002b38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b3a:	e008      	b.n	8002b4e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b3c:	f7ff f8ae 	bl	8001c9c <HAL_GetTick>
 8002b40:	4602      	mov	r2, r0
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	1ad3      	subs	r3, r2, r3
 8002b46:	2b64      	cmp	r3, #100	@ 0x64
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e276      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b4e:	4b92      	ldr	r3, [pc, #584]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d0f0      	beq.n	8002b3c <HAL_RCC_OscConfig+0x2a8>
 8002b5a:	e014      	b.n	8002b86 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b5c:	f7ff f89e 	bl	8001c9c <HAL_GetTick>
 8002b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b62:	e008      	b.n	8002b76 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b64:	f7ff f89a 	bl	8001c9c <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b64      	cmp	r3, #100	@ 0x64
 8002b70:	d901      	bls.n	8002b76 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e262      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002b76:	4b88      	ldr	r3, [pc, #544]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d1f0      	bne.n	8002b64 <HAL_RCC_OscConfig+0x2d0>
 8002b82:	e000      	b.n	8002b86 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0302 	and.w	r3, r3, #2
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d060      	beq.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	2b04      	cmp	r3, #4
 8002b96:	d005      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x310>
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	2b0c      	cmp	r3, #12
 8002b9c:	d119      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d116      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ba4:	4b7c      	ldr	r3, [pc, #496]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d005      	beq.n	8002bbc <HAL_RCC_OscConfig+0x328>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e23f      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002bbc:	4b76      	ldr	r3, [pc, #472]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	061b      	lsls	r3, r3, #24
 8002bca:	4973      	ldr	r1, [pc, #460]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002bd0:	e040      	b.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d023      	beq.n	8002c22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bda:	4b6f      	ldr	r3, [pc, #444]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a6e      	ldr	r2, [pc, #440]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002be0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be6:	f7ff f859 	bl	8001c9c <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bee:	f7ff f855 	bl	8001c9c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e21d      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c00:	4b65      	ldr	r3, [pc, #404]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c0c:	4b62      	ldr	r3, [pc, #392]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	691b      	ldr	r3, [r3, #16]
 8002c18:	061b      	lsls	r3, r3, #24
 8002c1a:	495f      	ldr	r1, [pc, #380]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	604b      	str	r3, [r1, #4]
 8002c20:	e018      	b.n	8002c54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c22:	4b5d      	ldr	r3, [pc, #372]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a5c      	ldr	r2, [pc, #368]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2e:	f7ff f835 	bl	8001c9c <HAL_GetTick>
 8002c32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c34:	e008      	b.n	8002c48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c36:	f7ff f831 	bl	8001c9c <HAL_GetTick>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	1ad3      	subs	r3, r2, r3
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d901      	bls.n	8002c48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e1f9      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002c48:	4b53      	ldr	r3, [pc, #332]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d1f0      	bne.n	8002c36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d03c      	beq.n	8002cda <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	695b      	ldr	r3, [r3, #20]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d01c      	beq.n	8002ca2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c68:	4b4b      	ldr	r3, [pc, #300]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c78:	f7ff f810 	bl	8001c9c <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c80:	f7ff f80c 	bl	8001c9c <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e1d4      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c92:	4b41      	ldr	r3, [pc, #260]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002c94:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c98:	f003 0302 	and.w	r3, r3, #2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d0ef      	beq.n	8002c80 <HAL_RCC_OscConfig+0x3ec>
 8002ca0:	e01b      	b.n	8002cda <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ca2:	4b3d      	ldr	r3, [pc, #244]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002ca4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ca8:	4a3b      	ldr	r2, [pc, #236]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002caa:	f023 0301 	bic.w	r3, r3, #1
 8002cae:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb2:	f7fe fff3 	bl	8001c9c <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002cb8:	e008      	b.n	8002ccc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cba:	f7fe ffef 	bl	8001c9c <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	693b      	ldr	r3, [r7, #16]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d901      	bls.n	8002ccc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e1b7      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ccc:	4b32      	ldr	r3, [pc, #200]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002cce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ef      	bne.n	8002cba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0304 	and.w	r3, r3, #4
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 80a6 	beq.w	8002e34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002cec:	4b2a      	ldr	r3, [pc, #168]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10d      	bne.n	8002d14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cf8:	4b27      	ldr	r3, [pc, #156]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cfc:	4a26      	ldr	r2, [pc, #152]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d04:	4b24      	ldr	r3, [pc, #144]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d10:	2301      	movs	r3, #1
 8002d12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d14:	4b21      	ldr	r3, [pc, #132]	@ (8002d9c <HAL_RCC_OscConfig+0x508>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d118      	bne.n	8002d52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d20:	4b1e      	ldr	r3, [pc, #120]	@ (8002d9c <HAL_RCC_OscConfig+0x508>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a1d      	ldr	r2, [pc, #116]	@ (8002d9c <HAL_RCC_OscConfig+0x508>)
 8002d26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d2c:	f7fe ffb6 	bl	8001c9c <HAL_GetTick>
 8002d30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d32:	e008      	b.n	8002d46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d34:	f7fe ffb2 	bl	8001c9c <HAL_GetTick>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	1ad3      	subs	r3, r2, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d901      	bls.n	8002d46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002d42:	2303      	movs	r3, #3
 8002d44:	e17a      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d46:	4b15      	ldr	r3, [pc, #84]	@ (8002d9c <HAL_RCC_OscConfig+0x508>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d0f0      	beq.n	8002d34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d108      	bne.n	8002d6c <HAL_RCC_OscConfig+0x4d8>
 8002d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d60:	4a0d      	ldr	r2, [pc, #52]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d62:	f043 0301 	orr.w	r3, r3, #1
 8002d66:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d6a:	e029      	b.n	8002dc0 <HAL_RCC_OscConfig+0x52c>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b05      	cmp	r3, #5
 8002d72:	d115      	bne.n	8002da0 <HAL_RCC_OscConfig+0x50c>
 8002d74:	4b08      	ldr	r3, [pc, #32]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d7a:	4a07      	ldr	r2, [pc, #28]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d7c:	f043 0304 	orr.w	r3, r3, #4
 8002d80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d84:	4b04      	ldr	r3, [pc, #16]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d8a:	4a03      	ldr	r2, [pc, #12]	@ (8002d98 <HAL_RCC_OscConfig+0x504>)
 8002d8c:	f043 0301 	orr.w	r3, r3, #1
 8002d90:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002d94:	e014      	b.n	8002dc0 <HAL_RCC_OscConfig+0x52c>
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	40007000 	.word	0x40007000
 8002da0:	4b9c      	ldr	r3, [pc, #624]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002da6:	4a9b      	ldr	r2, [pc, #620]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002da8:	f023 0301 	bic.w	r3, r3, #1
 8002dac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002db0:	4b98      	ldr	r3, [pc, #608]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002db6:	4a97      	ldr	r2, [pc, #604]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002db8:	f023 0304 	bic.w	r3, r3, #4
 8002dbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d016      	beq.n	8002df6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7fe ff68 	bl	8001c9c <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dce:	e00a      	b.n	8002de6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dd0:	f7fe ff64 	bl	8001c9c <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d901      	bls.n	8002de6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e12a      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002de6:	4b8b      	ldr	r3, [pc, #556]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002dec:	f003 0302 	and.w	r3, r3, #2
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d0ed      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x53c>
 8002df4:	e015      	b.n	8002e22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7fe ff51 	bl	8001c9c <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002dfc:	e00a      	b.n	8002e14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe ff4d 	bl	8001c9c <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d901      	bls.n	8002e14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	e113      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002e14:	4b7f      	ldr	r3, [pc, #508]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e1a:	f003 0302 	and.w	r3, r3, #2
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d1ed      	bne.n	8002dfe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e22:	7ffb      	ldrb	r3, [r7, #31]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d105      	bne.n	8002e34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e28:	4b7a      	ldr	r3, [pc, #488]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	4a79      	ldr	r2, [pc, #484]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002e2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e32:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	f000 80fe 	beq.w	800303a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	f040 80d0 	bne.w	8002fe8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002e48:	4b72      	ldr	r3, [pc, #456]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	f003 0203 	and.w	r2, r3, #3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d130      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	3b01      	subs	r3, #1
 8002e68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d127      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d11f      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e88:	2a07      	cmp	r2, #7
 8002e8a:	bf14      	ite	ne
 8002e8c:	2201      	movne	r2, #1
 8002e8e:	2200      	moveq	r2, #0
 8002e90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d113      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea0:	085b      	lsrs	r3, r3, #1
 8002ea2:	3b01      	subs	r3, #1
 8002ea4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d109      	bne.n	8002ebe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb4:	085b      	lsrs	r3, r3, #1
 8002eb6:	3b01      	subs	r3, #1
 8002eb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eba:	429a      	cmp	r2, r3
 8002ebc:	d06e      	beq.n	8002f9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b0c      	cmp	r3, #12
 8002ec2:	d069      	beq.n	8002f98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002ec4:	4b53      	ldr	r3, [pc, #332]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d105      	bne.n	8002edc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002ed0:	4b50      	ldr	r3, [pc, #320]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d001      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e0ad      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002ee0:	4b4c      	ldr	r3, [pc, #304]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a4b      	ldr	r2, [pc, #300]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ee6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002eea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eec:	f7fe fed6 	bl	8001c9c <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef4:	f7fe fed2 	bl	8001c9c <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e09a      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f06:	4b43      	ldr	r3, [pc, #268]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d1f0      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f12:	4b40      	ldr	r3, [pc, #256]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	4b40      	ldr	r3, [pc, #256]	@ (8003018 <HAL_RCC_OscConfig+0x784>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002f22:	3a01      	subs	r2, #1
 8002f24:	0112      	lsls	r2, r2, #4
 8002f26:	4311      	orrs	r1, r2
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002f2c:	0212      	lsls	r2, r2, #8
 8002f2e:	4311      	orrs	r1, r2
 8002f30:	687a      	ldr	r2, [r7, #4]
 8002f32:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f34:	0852      	lsrs	r2, r2, #1
 8002f36:	3a01      	subs	r2, #1
 8002f38:	0552      	lsls	r2, r2, #21
 8002f3a:	4311      	orrs	r1, r2
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002f40:	0852      	lsrs	r2, r2, #1
 8002f42:	3a01      	subs	r2, #1
 8002f44:	0652      	lsls	r2, r2, #25
 8002f46:	4311      	orrs	r1, r2
 8002f48:	687a      	ldr	r2, [r7, #4]
 8002f4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002f4c:	0912      	lsrs	r2, r2, #4
 8002f4e:	0452      	lsls	r2, r2, #17
 8002f50:	430a      	orrs	r2, r1
 8002f52:	4930      	ldr	r1, [pc, #192]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002f58:	4b2e      	ldr	r3, [pc, #184]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a2d      	ldr	r2, [pc, #180]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f5e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002f64:	4b2b      	ldr	r3, [pc, #172]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f66:	68db      	ldr	r3, [r3, #12]
 8002f68:	4a2a      	ldr	r2, [pc, #168]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002f70:	f7fe fe94 	bl	8001c9c <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe fe90 	bl	8001c9c <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e058      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f8a:	4b22      	ldr	r3, [pc, #136]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d0f0      	beq.n	8002f78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f96:	e050      	b.n	800303a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	e04f      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d148      	bne.n	800303a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a19      	ldr	r2, [pc, #100]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002fae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fb2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002fb4:	4b17      	ldr	r3, [pc, #92]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	4a16      	ldr	r2, [pc, #88]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002fba:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002fbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002fc0:	f7fe fe6c 	bl	8001c9c <HAL_GetTick>
 8002fc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fc6:	e008      	b.n	8002fda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fc8:	f7fe fe68 	bl	8001c9c <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	2b02      	cmp	r3, #2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e030      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002fda:	4b0e      	ldr	r3, [pc, #56]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d0f0      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x734>
 8002fe6:	e028      	b.n	800303a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	2b0c      	cmp	r3, #12
 8002fec:	d023      	beq.n	8003036 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a08      	ldr	r2, [pc, #32]	@ (8003014 <HAL_RCC_OscConfig+0x780>)
 8002ff4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ff8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ffa:	f7fe fe4f 	bl	8001c9c <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003000:	e00c      	b.n	800301c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003002:	f7fe fe4b 	bl	8001c9c <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d905      	bls.n	800301c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e013      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
 8003014:	40021000 	.word	0x40021000
 8003018:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800301c:	4b09      	ldr	r3, [pc, #36]	@ (8003044 <HAL_RCC_OscConfig+0x7b0>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ec      	bne.n	8003002 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003028:	4b06      	ldr	r3, [pc, #24]	@ (8003044 <HAL_RCC_OscConfig+0x7b0>)
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	4905      	ldr	r1, [pc, #20]	@ (8003044 <HAL_RCC_OscConfig+0x7b0>)
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_OscConfig+0x7b4>)
 8003030:	4013      	ands	r3, r2
 8003032:	60cb      	str	r3, [r1, #12]
 8003034:	e001      	b.n	800303a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003036:	2301      	movs	r3, #1
 8003038:	e000      	b.n	800303c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800303a:	2300      	movs	r3, #0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3720      	adds	r7, #32
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	40021000 	.word	0x40021000
 8003048:	feeefffc 	.word	0xfeeefffc

0800304c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d101      	bne.n	8003060 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800305c:	2301      	movs	r3, #1
 800305e:	e0e7      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003060:	4b75      	ldr	r3, [pc, #468]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0307 	and.w	r3, r3, #7
 8003068:	683a      	ldr	r2, [r7, #0]
 800306a:	429a      	cmp	r2, r3
 800306c:	d910      	bls.n	8003090 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800306e:	4b72      	ldr	r3, [pc, #456]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f023 0207 	bic.w	r2, r3, #7
 8003076:	4970      	ldr	r1, [pc, #448]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800307e:	4b6e      	ldr	r3, [pc, #440]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	429a      	cmp	r2, r3
 800308a:	d001      	beq.n	8003090 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e0cf      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0302 	and.w	r3, r3, #2
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	689a      	ldr	r2, [r3, #8]
 80030a0:	4b66      	ldr	r3, [pc, #408]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d908      	bls.n	80030be <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030ac:	4b63      	ldr	r3, [pc, #396]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	4960      	ldr	r1, [pc, #384]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d04c      	beq.n	8003164 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2b03      	cmp	r3, #3
 80030d0:	d107      	bne.n	80030e2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80030d2:	4b5a      	ldr	r3, [pc, #360]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d121      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e0a6      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b02      	cmp	r3, #2
 80030e8:	d107      	bne.n	80030fa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80030ea:	4b54      	ldr	r3, [pc, #336]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d115      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e09a      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d107      	bne.n	8003112 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003102:	4b4e      	ldr	r3, [pc, #312]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d109      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e08e      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003112:	4b4a      	ldr	r3, [pc, #296]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e086      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003122:	4b46      	ldr	r3, [pc, #280]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f023 0203 	bic.w	r2, r3, #3
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	4943      	ldr	r1, [pc, #268]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003130:	4313      	orrs	r3, r2
 8003132:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003134:	f7fe fdb2 	bl	8001c9c <HAL_GetTick>
 8003138:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800313a:	e00a      	b.n	8003152 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800313c:	f7fe fdae 	bl	8001c9c <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	@ 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e06e      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003152:	4b3a      	ldr	r3, [pc, #232]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 020c 	and.w	r2, r3, #12
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	429a      	cmp	r2, r3
 8003162:	d1eb      	bne.n	800313c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	4b31      	ldr	r3, [pc, #196]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800317c:	429a      	cmp	r2, r3
 800317e:	d208      	bcs.n	8003192 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003180:	4b2e      	ldr	r3, [pc, #184]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	689b      	ldr	r3, [r3, #8]
 800318c:	492b      	ldr	r1, [pc, #172]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003192:	4b29      	ldr	r3, [pc, #164]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0307 	and.w	r3, r3, #7
 800319a:	683a      	ldr	r2, [r7, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d210      	bcs.n	80031c2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031a0:	4b25      	ldr	r3, [pc, #148]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f023 0207 	bic.w	r2, r3, #7
 80031a8:	4923      	ldr	r1, [pc, #140]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031b0:	4b21      	ldr	r3, [pc, #132]	@ (8003238 <HAL_RCC_ClockConfig+0x1ec>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d001      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e036      	b.n	8003230 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0304 	and.w	r3, r3, #4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d008      	beq.n	80031e0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80031ce:	4b1b      	ldr	r3, [pc, #108]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	4918      	ldr	r1, [pc, #96]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0308 	and.w	r3, r3, #8
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d009      	beq.n	8003200 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031ec:	4b13      	ldr	r3, [pc, #76]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4910      	ldr	r1, [pc, #64]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003200:	f000 f824 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8003204:	4602      	mov	r2, r0
 8003206:	4b0d      	ldr	r3, [pc, #52]	@ (800323c <HAL_RCC_ClockConfig+0x1f0>)
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	091b      	lsrs	r3, r3, #4
 800320c:	f003 030f 	and.w	r3, r3, #15
 8003210:	490b      	ldr	r1, [pc, #44]	@ (8003240 <HAL_RCC_ClockConfig+0x1f4>)
 8003212:	5ccb      	ldrb	r3, [r1, r3]
 8003214:	f003 031f 	and.w	r3, r3, #31
 8003218:	fa22 f303 	lsr.w	r3, r2, r3
 800321c:	4a09      	ldr	r2, [pc, #36]	@ (8003244 <HAL_RCC_ClockConfig+0x1f8>)
 800321e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003220:	4b09      	ldr	r3, [pc, #36]	@ (8003248 <HAL_RCC_ClockConfig+0x1fc>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fe fce9 	bl	8001bfc <HAL_InitTick>
 800322a:	4603      	mov	r3, r0
 800322c:	72fb      	strb	r3, [r7, #11]

  return status;
 800322e:	7afb      	ldrb	r3, [r7, #11]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40022000 	.word	0x40022000
 800323c:	40021000 	.word	0x40021000
 8003240:	08008b30 	.word	0x08008b30
 8003244:	20000004 	.word	0x20000004
 8003248:	20000008 	.word	0x20000008

0800324c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800324c:	b480      	push	{r7}
 800324e:	b089      	sub	sp, #36	@ 0x24
 8003250:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003252:	2300      	movs	r3, #0
 8003254:	61fb      	str	r3, [r7, #28]
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800325a:	4b3e      	ldr	r3, [pc, #248]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f003 030c 	and.w	r3, r3, #12
 8003262:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003264:	4b3b      	ldr	r3, [pc, #236]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003266:	68db      	ldr	r3, [r3, #12]
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d005      	beq.n	8003280 <HAL_RCC_GetSysClockFreq+0x34>
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b0c      	cmp	r3, #12
 8003278:	d121      	bne.n	80032be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d11e      	bne.n	80032be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003280:	4b34      	ldr	r3, [pc, #208]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0308 	and.w	r3, r3, #8
 8003288:	2b00      	cmp	r3, #0
 800328a:	d107      	bne.n	800329c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800328c:	4b31      	ldr	r3, [pc, #196]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800328e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003292:	0a1b      	lsrs	r3, r3, #8
 8003294:	f003 030f 	and.w	r3, r3, #15
 8003298:	61fb      	str	r3, [r7, #28]
 800329a:	e005      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800329c:	4b2d      	ldr	r3, [pc, #180]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	091b      	lsrs	r3, r3, #4
 80032a2:	f003 030f 	and.w	r3, r3, #15
 80032a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80032a8:	4a2b      	ldr	r2, [pc, #172]	@ (8003358 <HAL_RCC_GetSysClockFreq+0x10c>)
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d10d      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80032bc:	e00a      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d102      	bne.n	80032ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80032c4:	4b25      	ldr	r3, [pc, #148]	@ (800335c <HAL_RCC_GetSysClockFreq+0x110>)
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	e004      	b.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80032d0:	4b23      	ldr	r3, [pc, #140]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x114>)
 80032d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	2b0c      	cmp	r3, #12
 80032d8:	d134      	bne.n	8003344 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80032da:	4b1e      	ldr	r3, [pc, #120]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f003 0303 	and.w	r3, r3, #3
 80032e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b02      	cmp	r3, #2
 80032e8:	d003      	beq.n	80032f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2b03      	cmp	r3, #3
 80032ee:	d003      	beq.n	80032f8 <HAL_RCC_GetSysClockFreq+0xac>
 80032f0:	e005      	b.n	80032fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80032f2:	4b1a      	ldr	r3, [pc, #104]	@ (800335c <HAL_RCC_GetSysClockFreq+0x110>)
 80032f4:	617b      	str	r3, [r7, #20]
      break;
 80032f6:	e005      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80032f8:	4b19      	ldr	r3, [pc, #100]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x114>)
 80032fa:	617b      	str	r3, [r7, #20]
      break;
 80032fc:	e002      	b.n	8003304 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	617b      	str	r3, [r7, #20]
      break;
 8003302:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003304:	4b13      	ldr	r3, [pc, #76]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003306:	68db      	ldr	r3, [r3, #12]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 0307 	and.w	r3, r3, #7
 800330e:	3301      	adds	r3, #1
 8003310:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003312:	4b10      	ldr	r3, [pc, #64]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	fb03 f202 	mul.w	r2, r3, r2
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	fbb2 f3f3 	udiv	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800332a:	4b0a      	ldr	r3, [pc, #40]	@ (8003354 <HAL_RCC_GetSysClockFreq+0x108>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	0e5b      	lsrs	r3, r3, #25
 8003330:	f003 0303 	and.w	r3, r3, #3
 8003334:	3301      	adds	r3, #1
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800333a:	697a      	ldr	r2, [r7, #20]
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003342:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003344:	69bb      	ldr	r3, [r7, #24]
}
 8003346:	4618      	mov	r0, r3
 8003348:	3724      	adds	r7, #36	@ 0x24
 800334a:	46bd      	mov	sp, r7
 800334c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	40021000 	.word	0x40021000
 8003358:	08008b48 	.word	0x08008b48
 800335c:	00f42400 	.word	0x00f42400
 8003360:	007a1200 	.word	0x007a1200

08003364 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_RCC_GetHCLKFreq+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20000004 	.word	0x20000004

0800337c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003380:	f7ff fff0 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4904      	ldr	r1, [pc, #16]	@ (80033a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	40021000 	.word	0x40021000
 80033a4:	08008b40 	.word	0x08008b40

080033a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80033ac:	f7ff ffda 	bl	8003364 <HAL_RCC_GetHCLKFreq>
 80033b0:	4602      	mov	r2, r0
 80033b2:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	0adb      	lsrs	r3, r3, #11
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	4904      	ldr	r1, [pc, #16]	@ (80033d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80033be:	5ccb      	ldrb	r3, [r1, r3]
 80033c0:	f003 031f 	and.w	r3, r3, #31
 80033c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	40021000 	.word	0x40021000
 80033d0:	08008b40 	.word	0x08008b40

080033d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80033dc:	2300      	movs	r3, #0
 80033de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80033e0:	4b2a      	ldr	r3, [pc, #168]	@ (800348c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80033ec:	f7ff f9ee 	bl	80027cc <HAL_PWREx_GetVoltageRange>
 80033f0:	6178      	str	r0, [r7, #20]
 80033f2:	e014      	b.n	800341e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80033f4:	4b25      	ldr	r3, [pc, #148]	@ (800348c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033f8:	4a24      	ldr	r2, [pc, #144]	@ (800348c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80033fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8003400:	4b22      	ldr	r3, [pc, #136]	@ (800348c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003402:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003404:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003408:	60fb      	str	r3, [r7, #12]
 800340a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800340c:	f7ff f9de 	bl	80027cc <HAL_PWREx_GetVoltageRange>
 8003410:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003412:	4b1e      	ldr	r3, [pc, #120]	@ (800348c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003414:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003416:	4a1d      	ldr	r2, [pc, #116]	@ (800348c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003418:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800341c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003424:	d10b      	bne.n	800343e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2b80      	cmp	r3, #128	@ 0x80
 800342a:	d919      	bls.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2ba0      	cmp	r3, #160	@ 0xa0
 8003430:	d902      	bls.n	8003438 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003432:	2302      	movs	r3, #2
 8003434:	613b      	str	r3, [r7, #16]
 8003436:	e013      	b.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003438:	2301      	movs	r3, #1
 800343a:	613b      	str	r3, [r7, #16]
 800343c:	e010      	b.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2b80      	cmp	r3, #128	@ 0x80
 8003442:	d902      	bls.n	800344a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003444:	2303      	movs	r3, #3
 8003446:	613b      	str	r3, [r7, #16]
 8003448:	e00a      	b.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2b80      	cmp	r3, #128	@ 0x80
 800344e:	d102      	bne.n	8003456 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003450:	2302      	movs	r3, #2
 8003452:	613b      	str	r3, [r7, #16]
 8003454:	e004      	b.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2b70      	cmp	r3, #112	@ 0x70
 800345a:	d101      	bne.n	8003460 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800345c:	2301      	movs	r3, #1
 800345e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003460:	4b0b      	ldr	r3, [pc, #44]	@ (8003490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f023 0207 	bic.w	r2, r3, #7
 8003468:	4909      	ldr	r1, [pc, #36]	@ (8003490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800346a:	693b      	ldr	r3, [r7, #16]
 800346c:	4313      	orrs	r3, r2
 800346e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003470:	4b07      	ldr	r3, [pc, #28]	@ (8003490 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	693a      	ldr	r2, [r7, #16]
 800347a:	429a      	cmp	r2, r3
 800347c:	d001      	beq.n	8003482 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	3718      	adds	r7, #24
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	40021000 	.word	0x40021000
 8003490:	40022000 	.word	0x40022000

08003494 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b086      	sub	sp, #24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800349c:	2300      	movs	r3, #0
 800349e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80034a0:	2300      	movs	r3, #0
 80034a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d041      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034b4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034b8:	d02a      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80034ba:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80034be:	d824      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034c4:	d008      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80034c6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80034ca:	d81e      	bhi.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80034d0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80034d4:	d010      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034d6:	e018      	b.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034d8:	4b86      	ldr	r3, [pc, #536]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4a85      	ldr	r2, [pc, #532]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034e4:	e015      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	3304      	adds	r3, #4
 80034ea:	2100      	movs	r1, #0
 80034ec:	4618      	mov	r0, r3
 80034ee:	f000 fabb 	bl	8003a68 <RCCEx_PLLSAI1_Config>
 80034f2:	4603      	mov	r3, r0
 80034f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80034f6:	e00c      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	3320      	adds	r3, #32
 80034fc:	2100      	movs	r1, #0
 80034fe:	4618      	mov	r0, r3
 8003500:	f000 fba6 	bl	8003c50 <RCCEx_PLLSAI2_Config>
 8003504:	4603      	mov	r3, r0
 8003506:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003508:	e003      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	74fb      	strb	r3, [r7, #19]
      break;
 800350e:	e000      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003510:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003512:	7cfb      	ldrb	r3, [r7, #19]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d10b      	bne.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003518:	4b76      	ldr	r3, [pc, #472]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800351e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003526:	4973      	ldr	r1, [pc, #460]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003528:	4313      	orrs	r3, r2
 800352a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800352e:	e001      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003530:	7cfb      	ldrb	r3, [r7, #19]
 8003532:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d041      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003544:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003548:	d02a      	beq.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800354a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800354e:	d824      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003550:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003554:	d008      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003556:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800355a:	d81e      	bhi.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d00a      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003560:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003564:	d010      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003566:	e018      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003568:	4b62      	ldr	r3, [pc, #392]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4a61      	ldr	r2, [pc, #388]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800356e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003572:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003574:	e015      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	3304      	adds	r3, #4
 800357a:	2100      	movs	r1, #0
 800357c:	4618      	mov	r0, r3
 800357e:	f000 fa73 	bl	8003a68 <RCCEx_PLLSAI1_Config>
 8003582:	4603      	mov	r3, r0
 8003584:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003586:	e00c      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3320      	adds	r3, #32
 800358c:	2100      	movs	r1, #0
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fb5e 	bl	8003c50 <RCCEx_PLLSAI2_Config>
 8003594:	4603      	mov	r3, r0
 8003596:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003598:	e003      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	74fb      	strb	r3, [r7, #19]
      break;
 800359e:	e000      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80035a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80035a2:	7cfb      	ldrb	r3, [r7, #19]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80035a8:	4b52      	ldr	r3, [pc, #328]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ae:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80035b6:	494f      	ldr	r1, [pc, #316]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80035be:	e001      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	7cfb      	ldrb	r3, [r7, #19]
 80035c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a0 	beq.w	8003712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80035d6:	4b47      	ldr	r3, [pc, #284]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d101      	bne.n	80035e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00d      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ec:	4b41      	ldr	r3, [pc, #260]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f0:	4a40      	ldr	r2, [pc, #256]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	6593      	str	r3, [r2, #88]	@ 0x58
 80035f8:	4b3e      	ldr	r3, [pc, #248]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003600:	60bb      	str	r3, [r7, #8]
 8003602:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003604:	2301      	movs	r3, #1
 8003606:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003608:	4b3b      	ldr	r3, [pc, #236]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a3a      	ldr	r2, [pc, #232]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800360e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003612:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003614:	f7fe fb42 	bl	8001c9c <HAL_GetTick>
 8003618:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800361a:	e009      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361c:	f7fe fb3e 	bl	8001c9c <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d902      	bls.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	74fb      	strb	r3, [r7, #19]
        break;
 800362e:	e005      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003630:	4b31      	ldr	r3, [pc, #196]	@ (80036f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ef      	beq.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800363c:	7cfb      	ldrb	r3, [r7, #19]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d15c      	bne.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003642:	4b2c      	ldr	r3, [pc, #176]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003648:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800364c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01f      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	429a      	cmp	r2, r3
 800365e:	d019      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003660:	4b24      	ldr	r3, [pc, #144]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003666:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800366a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800366c:	4b21      	ldr	r3, [pc, #132]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800366e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003672:	4a20      	ldr	r2, [pc, #128]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003678:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800367c:	4b1d      	ldr	r3, [pc, #116]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003682:	4a1c      	ldr	r2, [pc, #112]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003684:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003688:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800368c:	4a19      	ldr	r2, [pc, #100]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d016      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800369e:	f7fe fafd 	bl	8001c9c <HAL_GetTick>
 80036a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036a4:	e00b      	b.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036a6:	f7fe faf9 	bl	8001c9c <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d902      	bls.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	74fb      	strb	r3, [r7, #19]
            break;
 80036bc:	e006      	b.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036be:	4b0d      	ldr	r3, [pc, #52]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0ec      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d10c      	bne.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036d2:	4b08      	ldr	r3, [pc, #32]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80036d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80036e2:	4904      	ldr	r1, [pc, #16]	@ (80036f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80036e4:	4313      	orrs	r3, r2
 80036e6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80036ea:	e009      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80036ec:	7cfb      	ldrb	r3, [r7, #19]
 80036ee:	74bb      	strb	r3, [r7, #18]
 80036f0:	e006      	b.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80036f2:	bf00      	nop
 80036f4:	40021000 	.word	0x40021000
 80036f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036fc:	7cfb      	ldrb	r3, [r7, #19]
 80036fe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003700:	7c7b      	ldrb	r3, [r7, #17]
 8003702:	2b01      	cmp	r3, #1
 8003704:	d105      	bne.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003706:	4b9e      	ldr	r3, [pc, #632]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800370a:	4a9d      	ldr	r2, [pc, #628]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003710:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800371e:	4b98      	ldr	r3, [pc, #608]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003724:	f023 0203 	bic.w	r2, r3, #3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372c:	4994      	ldr	r1, [pc, #592]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372e:	4313      	orrs	r3, r2
 8003730:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003740:	4b8f      	ldr	r3, [pc, #572]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003742:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003746:	f023 020c 	bic.w	r2, r3, #12
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374e:	498c      	ldr	r1, [pc, #560]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003750:	4313      	orrs	r3, r2
 8003752:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003762:	4b87      	ldr	r3, [pc, #540]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003768:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	4983      	ldr	r1, [pc, #524]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003772:	4313      	orrs	r3, r2
 8003774:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0308 	and.w	r3, r3, #8
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003784:	4b7e      	ldr	r3, [pc, #504]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003786:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800378a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003792:	497b      	ldr	r1, [pc, #492]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003794:	4313      	orrs	r3, r2
 8003796:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037a6:	4b76      	ldr	r3, [pc, #472]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037b4:	4972      	ldr	r1, [pc, #456]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 0320 	and.w	r3, r3, #32
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d00a      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80037c8:	4b6d      	ldr	r3, [pc, #436]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037ce:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037d6:	496a      	ldr	r1, [pc, #424]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d00a      	beq.n	8003800 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80037ea:	4b65      	ldr	r3, [pc, #404]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037f0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037f8:	4961      	ldr	r1, [pc, #388]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fa:	4313      	orrs	r3, r2
 80037fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00a      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800380c:	4b5c      	ldr	r3, [pc, #368]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800380e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003812:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800381a:	4959      	ldr	r1, [pc, #356]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800381c:	4313      	orrs	r3, r2
 800381e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800382a:	2b00      	cmp	r3, #0
 800382c:	d00a      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800382e:	4b54      	ldr	r3, [pc, #336]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003834:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800383c:	4950      	ldr	r1, [pc, #320]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800383e:	4313      	orrs	r3, r2
 8003840:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00a      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003850:	4b4b      	ldr	r3, [pc, #300]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003852:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003856:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385e:	4948      	ldr	r1, [pc, #288]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003860:	4313      	orrs	r3, r2
 8003862:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d00a      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003872:	4b43      	ldr	r3, [pc, #268]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003878:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003880:	493f      	ldr	r1, [pc, #252]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003882:	4313      	orrs	r3, r2
 8003884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d028      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003894:	4b3a      	ldr	r3, [pc, #232]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038a2:	4937      	ldr	r1, [pc, #220]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038b2:	d106      	bne.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b4:	4b32      	ldr	r3, [pc, #200]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a31      	ldr	r2, [pc, #196]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038be:	60d3      	str	r3, [r2, #12]
 80038c0:	e011      	b.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038ca:	d10c      	bne.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	2101      	movs	r1, #1
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 f8c8 	bl	8003a68 <RCCEx_PLLSAI1_Config>
 80038d8:	4603      	mov	r3, r0
 80038da:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80038dc:	7cfb      	ldrb	r3, [r7, #19]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d028      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038f2:	4b23      	ldr	r3, [pc, #140]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038f8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003900:	491f      	ldr	r1, [pc, #124]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003902:	4313      	orrs	r3, r2
 8003904:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003910:	d106      	bne.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003912:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	4a1a      	ldr	r2, [pc, #104]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003918:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800391c:	60d3      	str	r3, [r2, #12]
 800391e:	e011      	b.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003924:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003928:	d10c      	bne.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	3304      	adds	r3, #4
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f000 f899 	bl	8003a68 <RCCEx_PLLSAI1_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800393a:	7cfb      	ldrb	r3, [r7, #19]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d001      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003940:	7cfb      	ldrb	r3, [r7, #19]
 8003942:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d02b      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003950:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003952:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003956:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800395e:	4908      	ldr	r1, [pc, #32]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800396a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800396e:	d109      	bne.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003970:	4b03      	ldr	r3, [pc, #12]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a02      	ldr	r2, [pc, #8]	@ (8003980 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800397a:	60d3      	str	r3, [r2, #12]
 800397c:	e014      	b.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800397e:	bf00      	nop
 8003980:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003988:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800398c:	d10c      	bne.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3304      	adds	r3, #4
 8003992:	2101      	movs	r1, #1
 8003994:	4618      	mov	r0, r3
 8003996:	f000 f867 	bl	8003a68 <RCCEx_PLLSAI1_Config>
 800399a:	4603      	mov	r3, r0
 800399c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800399e:	7cfb      	ldrb	r3, [r7, #19]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d001      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80039a4:	7cfb      	ldrb	r3, [r7, #19]
 80039a6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d02f      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80039b4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ba:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039c2:	4928      	ldr	r1, [pc, #160]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80039c4:	4313      	orrs	r3, r2
 80039c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039d2:	d10d      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	2102      	movs	r1, #2
 80039da:	4618      	mov	r0, r3
 80039dc:	f000 f844 	bl	8003a68 <RCCEx_PLLSAI1_Config>
 80039e0:	4603      	mov	r3, r0
 80039e2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80039e4:	7cfb      	ldrb	r3, [r7, #19]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d014      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	74bb      	strb	r3, [r7, #18]
 80039ee:	e011      	b.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80039f4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039f8:	d10c      	bne.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	3320      	adds	r3, #32
 80039fe:	2102      	movs	r1, #2
 8003a00:	4618      	mov	r0, r3
 8003a02:	f000 f925 	bl	8003c50 <RCCEx_PLLSAI2_Config>
 8003a06:	4603      	mov	r3, r0
 8003a08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003a0a:	7cfb      	ldrb	r3, [r7, #19]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d001      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003a10:	7cfb      	ldrb	r3, [r7, #19]
 8003a12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d00a      	beq.n	8003a36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003a20:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a26:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a2e:	490d      	ldr	r1, [pc, #52]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a30:	4313      	orrs	r3, r2
 8003a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00b      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003a42:	4b08      	ldr	r3, [pc, #32]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a48:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a52:	4904      	ldr	r1, [pc, #16]	@ (8003a64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003a5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3718      	adds	r7, #24
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	40021000 	.word	0x40021000

08003a68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003a72:	2300      	movs	r3, #0
 8003a74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003a76:	4b75      	ldr	r3, [pc, #468]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	f003 0303 	and.w	r3, r3, #3
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d018      	beq.n	8003ab4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003a82:	4b72      	ldr	r3, [pc, #456]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	f003 0203 	and.w	r2, r3, #3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d10d      	bne.n	8003aae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
       ||
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d009      	beq.n	8003aae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003a9a:	4b6c      	ldr	r3, [pc, #432]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	091b      	lsrs	r3, r3, #4
 8003aa0:	f003 0307 	and.w	r3, r3, #7
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
       ||
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d047      	beq.n	8003b3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	73fb      	strb	r3, [r7, #15]
 8003ab2:	e044      	b.n	8003b3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	2b03      	cmp	r3, #3
 8003aba:	d018      	beq.n	8003aee <RCCEx_PLLSAI1_Config+0x86>
 8003abc:	2b03      	cmp	r3, #3
 8003abe:	d825      	bhi.n	8003b0c <RCCEx_PLLSAI1_Config+0xa4>
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d002      	beq.n	8003aca <RCCEx_PLLSAI1_Config+0x62>
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d009      	beq.n	8003adc <RCCEx_PLLSAI1_Config+0x74>
 8003ac8:	e020      	b.n	8003b0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003aca:	4b60      	ldr	r3, [pc, #384]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0302 	and.w	r3, r3, #2
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d11d      	bne.n	8003b12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ada:	e01a      	b.n	8003b12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003adc:	4b5b      	ldr	r3, [pc, #364]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d116      	bne.n	8003b16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003aec:	e013      	b.n	8003b16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003aee:	4b57      	ldr	r3, [pc, #348]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10f      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003afa:	4b54      	ldr	r3, [pc, #336]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003b0a:	e006      	b.n	8003b1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b10:	e004      	b.n	8003b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b12:	bf00      	nop
 8003b14:	e002      	b.n	8003b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003b1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8003b1c:	7bfb      	ldrb	r3, [r7, #15]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10d      	bne.n	8003b3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003b22:	4b4a      	ldr	r3, [pc, #296]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6819      	ldr	r1, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	3b01      	subs	r3, #1
 8003b34:	011b      	lsls	r3, r3, #4
 8003b36:	430b      	orrs	r3, r1
 8003b38:	4944      	ldr	r1, [pc, #272]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003b3e:	7bfb      	ldrb	r3, [r7, #15]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d17d      	bne.n	8003c40 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003b44:	4b41      	ldr	r3, [pc, #260]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a40      	ldr	r2, [pc, #256]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003b4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b50:	f7fe f8a4 	bl	8001c9c <HAL_GetTick>
 8003b54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b56:	e009      	b.n	8003b6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b58:	f7fe f8a0 	bl	8001c9c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b02      	cmp	r3, #2
 8003b64:	d902      	bls.n	8003b6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	73fb      	strb	r3, [r7, #15]
        break;
 8003b6a:	e005      	b.n	8003b78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003b6c:	4b37      	ldr	r3, [pc, #220]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1ef      	bne.n	8003b58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003b78:	7bfb      	ldrb	r3, [r7, #15]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d160      	bne.n	8003c40 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d111      	bne.n	8003ba8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b84:	4b31      	ldr	r3, [pc, #196]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003b8c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	6892      	ldr	r2, [r2, #8]
 8003b94:	0211      	lsls	r1, r2, #8
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	68d2      	ldr	r2, [r2, #12]
 8003b9a:	0912      	lsrs	r2, r2, #4
 8003b9c:	0452      	lsls	r2, r2, #17
 8003b9e:	430a      	orrs	r2, r1
 8003ba0:	492a      	ldr	r1, [pc, #168]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	610b      	str	r3, [r1, #16]
 8003ba6:	e027      	b.n	8003bf8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d112      	bne.n	8003bd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bae:	4b27      	ldr	r3, [pc, #156]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bb0:	691b      	ldr	r3, [r3, #16]
 8003bb2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003bb6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003bba:	687a      	ldr	r2, [r7, #4]
 8003bbc:	6892      	ldr	r2, [r2, #8]
 8003bbe:	0211      	lsls	r1, r2, #8
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	6912      	ldr	r2, [r2, #16]
 8003bc4:	0852      	lsrs	r2, r2, #1
 8003bc6:	3a01      	subs	r2, #1
 8003bc8:	0552      	lsls	r2, r2, #21
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	491f      	ldr	r1, [pc, #124]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	610b      	str	r3, [r1, #16]
 8003bd2:	e011      	b.n	8003bf8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003bd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003bdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003be0:	687a      	ldr	r2, [r7, #4]
 8003be2:	6892      	ldr	r2, [r2, #8]
 8003be4:	0211      	lsls	r1, r2, #8
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	6952      	ldr	r2, [r2, #20]
 8003bea:	0852      	lsrs	r2, r2, #1
 8003bec:	3a01      	subs	r2, #1
 8003bee:	0652      	lsls	r2, r2, #25
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	4916      	ldr	r1, [pc, #88]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003bf8:	4b14      	ldr	r3, [pc, #80]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a13      	ldr	r2, [pc, #76]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003bfe:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003c02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c04:	f7fe f84a 	bl	8001c9c <HAL_GetTick>
 8003c08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c0a:	e009      	b.n	8003c20 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003c0c:	f7fe f846 	bl	8001c9c <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d902      	bls.n	8003c20 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	73fb      	strb	r3, [r7, #15]
          break;
 8003c1e:	e005      	b.n	8003c2c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003c20:	4b0a      	ldr	r3, [pc, #40]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d0ef      	beq.n	8003c0c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003c2c:	7bfb      	ldrb	r3, [r7, #15]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d106      	bne.n	8003c40 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003c32:	4b06      	ldr	r3, [pc, #24]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c34:	691a      	ldr	r2, [r3, #16]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	4904      	ldr	r1, [pc, #16]	@ (8003c4c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3710      	adds	r7, #16
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	40021000 	.word	0x40021000

08003c50 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003c5e:	4b6a      	ldr	r3, [pc, #424]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d018      	beq.n	8003c9c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003c6a:	4b67      	ldr	r3, [pc, #412]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c6c:	68db      	ldr	r3, [r3, #12]
 8003c6e:	f003 0203 	and.w	r2, r3, #3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d10d      	bne.n	8003c96 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
       ||
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003c82:	4b61      	ldr	r3, [pc, #388]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	091b      	lsrs	r3, r3, #4
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	1c5a      	adds	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
       ||
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d047      	beq.n	8003d26 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	73fb      	strb	r3, [r7, #15]
 8003c9a:	e044      	b.n	8003d26 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b03      	cmp	r3, #3
 8003ca2:	d018      	beq.n	8003cd6 <RCCEx_PLLSAI2_Config+0x86>
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d825      	bhi.n	8003cf4 <RCCEx_PLLSAI2_Config+0xa4>
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d002      	beq.n	8003cb2 <RCCEx_PLLSAI2_Config+0x62>
 8003cac:	2b02      	cmp	r3, #2
 8003cae:	d009      	beq.n	8003cc4 <RCCEx_PLLSAI2_Config+0x74>
 8003cb0:	e020      	b.n	8003cf4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003cb2:	4b55      	ldr	r3, [pc, #340]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d11d      	bne.n	8003cfa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc2:	e01a      	b.n	8003cfa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003cc4:	4b50      	ldr	r3, [pc, #320]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d116      	bne.n	8003cfe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd4:	e013      	b.n	8003cfe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003cd6:	4b4c      	ldr	r3, [pc, #304]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10f      	bne.n	8003d02 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003ce2:	4b49      	ldr	r3, [pc, #292]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d109      	bne.n	8003d02 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003cf2:	e006      	b.n	8003d02 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e004      	b.n	8003d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e002      	b.n	8003d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e000      	b.n	8003d04 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003d02:	bf00      	nop
    }

    if(status == HAL_OK)
 8003d04:	7bfb      	ldrb	r3, [r7, #15]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d10d      	bne.n	8003d26 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003d0a:	4b3f      	ldr	r3, [pc, #252]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6819      	ldr	r1, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	3b01      	subs	r3, #1
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	430b      	orrs	r3, r1
 8003d20:	4939      	ldr	r1, [pc, #228]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d22:	4313      	orrs	r3, r2
 8003d24:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003d26:	7bfb      	ldrb	r3, [r7, #15]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d167      	bne.n	8003dfc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003d2c:	4b36      	ldr	r3, [pc, #216]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a35      	ldr	r2, [pc, #212]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d38:	f7fd ffb0 	bl	8001c9c <HAL_GetTick>
 8003d3c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d3e:	e009      	b.n	8003d54 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d40:	f7fd ffac 	bl	8001c9c <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	2b02      	cmp	r3, #2
 8003d4c:	d902      	bls.n	8003d54 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	73fb      	strb	r3, [r7, #15]
        break;
 8003d52:	e005      	b.n	8003d60 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003d54:	4b2c      	ldr	r3, [pc, #176]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d1ef      	bne.n	8003d40 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d14a      	bne.n	8003dfc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d111      	bne.n	8003d90 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d6c:	4b26      	ldr	r3, [pc, #152]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003d74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d78:	687a      	ldr	r2, [r7, #4]
 8003d7a:	6892      	ldr	r2, [r2, #8]
 8003d7c:	0211      	lsls	r1, r2, #8
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	68d2      	ldr	r2, [r2, #12]
 8003d82:	0912      	lsrs	r2, r2, #4
 8003d84:	0452      	lsls	r2, r2, #17
 8003d86:	430a      	orrs	r2, r1
 8003d88:	491f      	ldr	r1, [pc, #124]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	614b      	str	r3, [r1, #20]
 8003d8e:	e011      	b.n	8003db4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003d90:	4b1d      	ldr	r3, [pc, #116]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d92:	695b      	ldr	r3, [r3, #20]
 8003d94:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003d98:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003d9c:	687a      	ldr	r2, [r7, #4]
 8003d9e:	6892      	ldr	r2, [r2, #8]
 8003da0:	0211      	lsls	r1, r2, #8
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6912      	ldr	r2, [r2, #16]
 8003da6:	0852      	lsrs	r2, r2, #1
 8003da8:	3a01      	subs	r2, #1
 8003daa:	0652      	lsls	r2, r2, #25
 8003dac:	430a      	orrs	r2, r1
 8003dae:	4916      	ldr	r1, [pc, #88]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db0:	4313      	orrs	r3, r2
 8003db2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003db4:	4b14      	ldr	r3, [pc, #80]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a13      	ldr	r2, [pc, #76]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fd ff6c 	bl	8001c9c <HAL_GetTick>
 8003dc4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003dc6:	e009      	b.n	8003ddc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003dc8:	f7fd ff68 	bl	8001c9c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d902      	bls.n	8003ddc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	73fb      	strb	r3, [r7, #15]
          break;
 8003dda:	e005      	b.n	8003de8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ddc:	4b0a      	ldr	r3, [pc, #40]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0ef      	beq.n	8003dc8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003dee:	4b06      	ldr	r3, [pc, #24]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df0:	695a      	ldr	r2, [r3, #20]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	695b      	ldr	r3, [r3, #20]
 8003df6:	4904      	ldr	r1, [pc, #16]	@ (8003e08 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3710      	adds	r7, #16
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000

08003e0c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d079      	beq.n	8003f12 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d106      	bne.n	8003e38 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f7fd fcb0 	bl	8001798 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2202      	movs	r2, #2
 8003e3c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d058      	beq.n	8003f00 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	22ca      	movs	r2, #202	@ 0xca
 8003e54:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2253      	movs	r2, #83	@ 0x53
 8003e5c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f000 fa4e 	bl	8004300 <RTC_EnterInitMode>
 8003e64:	4603      	mov	r3, r0
 8003e66:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003e68:	7bfb      	ldrb	r3, [r7, #15]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d127      	bne.n	8003ebe <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	6812      	ldr	r2, [r2, #0]
 8003e78:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003e7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e80:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6899      	ldr	r1, [r3, #8]
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	699b      	ldr	r3, [r3, #24]
 8003e96:	431a      	orrs	r2, r3
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	430a      	orrs	r2, r1
 8003e9e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68d2      	ldr	r2, [r2, #12]
 8003ea8:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6919      	ldr	r1, [r3, #16]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	041a      	lsls	r2, r3, #16
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	430a      	orrs	r2, r1
 8003ebc:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fa52 	bl	8004368 <RTC_ExitInitMode>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003ec8:	7bfb      	ldrb	r3, [r7, #15]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d113      	bne.n	8003ef6 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 0203 	bic.w	r2, r2, #3
 8003edc:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	69da      	ldr	r2, [r3, #28]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	695b      	ldr	r3, [r3, #20]
 8003eec:	431a      	orrs	r2, r3
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	22ff      	movs	r2, #255	@ 0xff
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24
 8003efe:	e001      	b.n	8003f04 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003f00:	2300      	movs	r3, #0
 8003f02:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003f04:	7bfb      	ldrb	r3, [r7, #15]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d103      	bne.n	8003f12 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8003f12:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	3710      	adds	r7, #16
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b087      	sub	sp, #28
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	60b9      	str	r1, [r7, #8]
 8003f26:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_RTC_SetTime+0x1a>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e08b      	b.n	800404e <HAL_RTC_SetTime+0x132>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2202      	movs	r2, #2
 8003f42:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	22ca      	movs	r2, #202	@ 0xca
 8003f4c:	625a      	str	r2, [r3, #36]	@ 0x24
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2253      	movs	r2, #83	@ 0x53
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f9d2 	bl	8004300 <RTC_EnterInitMode>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003f60:	7cfb      	ldrb	r3, [r7, #19]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d163      	bne.n	800402e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d126      	bne.n	8003fba <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d102      	bne.n	8003f80 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f000 fa2d 	bl	80043e4 <RTC_ByteToBcd2>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	785b      	ldrb	r3, [r3, #1]
 8003f92:	4618      	mov	r0, r3
 8003f94:	f000 fa26 	bl	80043e4 <RTC_ByteToBcd2>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f9c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	789b      	ldrb	r3, [r3, #2]
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fa1e 	bl	80043e4 <RTC_ByteToBcd2>
 8003fa8:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003faa:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	78db      	ldrb	r3, [r3, #3]
 8003fb2:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	e018      	b.n	8003fec <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fd4:	68bb      	ldr	r3, [r7, #8]
 8003fd6:	785b      	ldrb	r3, [r3, #1]
 8003fd8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003fda:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003fdc:	68ba      	ldr	r2, [r7, #8]
 8003fde:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003fe0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	78db      	ldrb	r3, [r3, #3]
 8003fe6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003ff6:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003ffa:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689a      	ldr	r2, [r3, #8]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800400a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6899      	ldr	r1, [r3, #8]
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	431a      	orrs	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	430a      	orrs	r2, r1
 8004022:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f99f 	bl	8004368 <RTC_ExitInitMode>
 800402a:	4603      	mov	r3, r0
 800402c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	22ff      	movs	r2, #255	@ 0xff
 8004034:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004036:	7cfb      	ldrb	r3, [r7, #19]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d103      	bne.n	8004044 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2200      	movs	r2, #0
 8004048:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800404c:	7cfb      	ldrb	r3, [r7, #19]
}
 800404e:	4618      	mov	r0, r3
 8004050:	371c      	adds	r7, #28
 8004052:	46bd      	mov	sp, r7
 8004054:	bd90      	pop	{r4, r7, pc}

08004056 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8004056:	b580      	push	{r7, lr}
 8004058:	b086      	sub	sp, #24
 800405a:	af00      	add	r7, sp, #0
 800405c:	60f8      	str	r0, [r7, #12]
 800405e:	60b9      	str	r1, [r7, #8]
 8004060:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8004084:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8004088:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	0c1b      	lsrs	r3, r3, #16
 800408e:	b2db      	uxtb	r3, r3
 8004090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004094:	b2da      	uxtb	r2, r3
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	0a1b      	lsrs	r3, r3, #8
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	b2db      	uxtb	r3, r3
 80040ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	0d9b      	lsrs	r3, r3, #22
 80040bc:	b2db      	uxtb	r3, r3
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d11a      	bne.n	8004104 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f9a6 	bl	8004424 <RTC_Bcd2ToByte>
 80040d8:	4603      	mov	r3, r0
 80040da:	461a      	mov	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	785b      	ldrb	r3, [r3, #1]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f000 f99d 	bl	8004424 <RTC_Bcd2ToByte>
 80040ea:	4603      	mov	r3, r0
 80040ec:	461a      	mov	r2, r3
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	789b      	ldrb	r3, [r3, #2]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 f994 	bl	8004424 <RTC_Bcd2ToByte>
 80040fc:	4603      	mov	r3, r0
 80040fe:	461a      	mov	r2, r3
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}

0800410e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800410e:	b590      	push	{r4, r7, lr}
 8004110:	b087      	sub	sp, #28
 8004112:	af00      	add	r7, sp, #0
 8004114:	60f8      	str	r0, [r7, #12]
 8004116:	60b9      	str	r1, [r7, #8]
 8004118:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004120:	2b01      	cmp	r3, #1
 8004122:	d101      	bne.n	8004128 <HAL_RTC_SetDate+0x1a>
 8004124:	2302      	movs	r3, #2
 8004126:	e075      	b.n	8004214 <HAL_RTC_SetDate+0x106>
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2201      	movs	r2, #1
 800412c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2202      	movs	r2, #2
 8004134:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d10e      	bne.n	800415c <HAL_RTC_SetDate+0x4e>
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	785b      	ldrb	r3, [r3, #1]
 8004142:	f003 0310 	and.w	r3, r3, #16
 8004146:	2b00      	cmp	r3, #0
 8004148:	d008      	beq.n	800415c <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800414a:	68bb      	ldr	r3, [r7, #8]
 800414c:	785b      	ldrb	r3, [r3, #1]
 800414e:	f023 0310 	bic.w	r3, r3, #16
 8004152:	b2db      	uxtb	r3, r3
 8004154:	330a      	adds	r3, #10
 8004156:	b2da      	uxtb	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d11c      	bne.n	800419c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	78db      	ldrb	r3, [r3, #3]
 8004166:	4618      	mov	r0, r3
 8004168:	f000 f93c 	bl	80043e4 <RTC_ByteToBcd2>
 800416c:	4603      	mov	r3, r0
 800416e:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	785b      	ldrb	r3, [r3, #1]
 8004174:	4618      	mov	r0, r3
 8004176:	f000 f935 	bl	80043e4 <RTC_ByteToBcd2>
 800417a:	4603      	mov	r3, r0
 800417c:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800417e:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	789b      	ldrb	r3, [r3, #2]
 8004184:	4618      	mov	r0, r3
 8004186:	f000 f92d 	bl	80043e4 <RTC_ByteToBcd2>
 800418a:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800418c:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8004196:	4313      	orrs	r3, r2
 8004198:	617b      	str	r3, [r7, #20]
 800419a:	e00e      	b.n	80041ba <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	78db      	ldrb	r3, [r3, #3]
 80041a0:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80041a8:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80041ae:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80041b6:	4313      	orrs	r3, r2
 80041b8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	22ca      	movs	r2, #202	@ 0xca
 80041c0:	625a      	str	r2, [r3, #36]	@ 0x24
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2253      	movs	r2, #83	@ 0x53
 80041c8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f000 f898 	bl	8004300 <RTC_EnterInitMode>
 80041d0:	4603      	mov	r3, r0
 80041d2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80041d4:	7cfb      	ldrb	r3, [r7, #19]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10c      	bne.n	80041f4 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80041e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80041e8:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f8bc 	bl	8004368 <RTC_ExitInitMode>
 80041f0:	4603      	mov	r3, r0
 80041f2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	22ff      	movs	r2, #255	@ 0xff
 80041fa:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 80041fc:	7cfb      	ldrb	r3, [r7, #19]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004212:	7cfb      	ldrb	r3, [r7, #19]
}
 8004214:	4618      	mov	r0, r3
 8004216:	371c      	adds	r7, #28
 8004218:	46bd      	mov	sp, r7
 800421a:	bd90      	pop	{r4, r7, pc}

0800421c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af00      	add	r7, sp, #0
 8004222:	60f8      	str	r0, [r7, #12]
 8004224:	60b9      	str	r1, [r7, #8]
 8004226:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004232:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004236:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	0c1b      	lsrs	r3, r3, #16
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	0a1b      	lsrs	r3, r3, #8
 8004246:	b2db      	uxtb	r3, r3
 8004248:	f003 031f 	and.w	r3, r3, #31
 800424c:	b2da      	uxtb	r2, r3
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800425a:	b2da      	uxtb	r2, r3
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	0b5b      	lsrs	r3, r3, #13
 8004264:	b2db      	uxtb	r3, r3
 8004266:	f003 0307 	and.w	r3, r3, #7
 800426a:	b2da      	uxtb	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d11a      	bne.n	80042ac <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	78db      	ldrb	r3, [r3, #3]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f8d2 	bl	8004424 <RTC_Bcd2ToByte>
 8004280:	4603      	mov	r3, r0
 8004282:	461a      	mov	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	4618      	mov	r0, r3
 800428e:	f000 f8c9 	bl	8004424 <RTC_Bcd2ToByte>
 8004292:	4603      	mov	r3, r0
 8004294:	461a      	mov	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	789b      	ldrb	r3, [r3, #2]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f8c0 	bl	8004424 <RTC_Bcd2ToByte>
 80042a4:	4603      	mov	r3, r0
 80042a6:	461a      	mov	r2, r3
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a0d      	ldr	r2, [pc, #52]	@ (80042fc <HAL_RTC_WaitForSynchro+0x44>)
 80042c6:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80042c8:	f7fd fce8 	bl	8001c9c <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042ce:	e009      	b.n	80042e4 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80042d0:	f7fd fce4 	bl	8001c9c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80042de:	d901      	bls.n	80042e4 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e007      	b.n	80042f4 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	f003 0320 	and.w	r3, r3, #32
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0ee      	beq.n	80042d0 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	0003ff5f 	.word	0x0003ff5f

08004300 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004308:	2300      	movs	r3, #0
 800430a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004316:	2b00      	cmp	r3, #0
 8004318:	d120      	bne.n	800435c <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f04f 32ff 	mov.w	r2, #4294967295
 8004322:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004324:	f7fd fcba 	bl	8001c9c <HAL_GetTick>
 8004328:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800432a:	e00d      	b.n	8004348 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800432c:	f7fd fcb6 	bl	8001c9c <HAL_GetTick>
 8004330:	4602      	mov	r2, r0
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	1ad3      	subs	r3, r2, r3
 8004336:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800433a:	d905      	bls.n	8004348 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2203      	movs	r2, #3
 8004344:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004352:	2b00      	cmp	r3, #0
 8004354:	d102      	bne.n	800435c <RTC_EnterInitMode+0x5c>
 8004356:	7bfb      	ldrb	r3, [r7, #15]
 8004358:	2b03      	cmp	r3, #3
 800435a:	d1e7      	bne.n	800432c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 800435c:	7bfb      	ldrb	r3, [r7, #15]
}
 800435e:	4618      	mov	r0, r3
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004370:	2300      	movs	r3, #0
 8004372:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8004374:	4b1a      	ldr	r3, [pc, #104]	@ (80043e0 <RTC_ExitInitMode+0x78>)
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	4a19      	ldr	r2, [pc, #100]	@ (80043e0 <RTC_ExitInitMode+0x78>)
 800437a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800437e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004380:	4b17      	ldr	r3, [pc, #92]	@ (80043e0 <RTC_ExitInitMode+0x78>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	f003 0320 	and.w	r3, r3, #32
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10c      	bne.n	80043a6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800438c:	6878      	ldr	r0, [r7, #4]
 800438e:	f7ff ff93 	bl	80042b8 <HAL_RTC_WaitForSynchro>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d01e      	beq.n	80043d6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2203      	movs	r2, #3
 800439c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80043a0:	2303      	movs	r3, #3
 80043a2:	73fb      	strb	r3, [r7, #15]
 80043a4:	e017      	b.n	80043d6 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043a6:	4b0e      	ldr	r3, [pc, #56]	@ (80043e0 <RTC_ExitInitMode+0x78>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	4a0d      	ldr	r2, [pc, #52]	@ (80043e0 <RTC_ExitInitMode+0x78>)
 80043ac:	f023 0320 	bic.w	r3, r3, #32
 80043b0:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f7ff ff80 	bl	80042b8 <HAL_RTC_WaitForSynchro>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d005      	beq.n	80043ca <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2203      	movs	r2, #3
 80043c2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80043ca:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <RTC_ExitInitMode+0x78>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	4a04      	ldr	r2, [pc, #16]	@ (80043e0 <RTC_ExitInitMode+0x78>)
 80043d0:	f043 0320 	orr.w	r3, r3, #32
 80043d4:	6093      	str	r3, [r2, #8]
  }

  return status;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40002800 	.word	0x40002800

080043e4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	4603      	mov	r3, r0
 80043ec:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80043f2:	79fb      	ldrb	r3, [r7, #7]
 80043f4:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80043f6:	e005      	b.n	8004404 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	3301      	adds	r3, #1
 80043fc:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80043fe:	7afb      	ldrb	r3, [r7, #11]
 8004400:	3b0a      	subs	r3, #10
 8004402:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004404:	7afb      	ldrb	r3, [r7, #11]
 8004406:	2b09      	cmp	r3, #9
 8004408:	d8f6      	bhi.n	80043f8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	b2db      	uxtb	r3, r3
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	b2da      	uxtb	r2, r3
 8004412:	7afb      	ldrb	r3, [r7, #11]
 8004414:	4313      	orrs	r3, r2
 8004416:	b2db      	uxtb	r3, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	3714      	adds	r7, #20
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr

08004424 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
 800442a:	4603      	mov	r3, r0
 800442c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800442e:	79fb      	ldrb	r3, [r7, #7]
 8004430:	091b      	lsrs	r3, r3, #4
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	0092      	lsls	r2, r2, #2
 8004438:	4413      	add	r3, r2
 800443a:	005b      	lsls	r3, r3, #1
 800443c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800443e:	79fb      	ldrb	r3, [r7, #7]
 8004440:	f003 030f 	and.w	r3, r3, #15
 8004444:	b2da      	uxtb	r2, r3
 8004446:	7bfb      	ldrb	r3, [r7, #15]
 8004448:	4413      	add	r3, r2
 800444a:	b2db      	uxtb	r3, r3
}
 800444c:	4618      	mov	r0, r3
 800444e:	3714      	adds	r7, #20
 8004450:	46bd      	mov	sp, r7
 8004452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004456:	4770      	bx	lr

08004458 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004466:	2301      	movs	r3, #1
 8004468:	e049      	b.n	80044fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d106      	bne.n	8004484 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f7fd f9bc 	bl	80017fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3304      	adds	r3, #4
 8004494:	4619      	mov	r1, r3
 8004496:	4610      	mov	r0, r2
 8004498:	f000 fc4e 	bl	8004d38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3708      	adds	r7, #8
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
	...

08004508 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
 8004510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004512:	2300      	movs	r3, #0
 8004514:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d104      	bne.n	8004526 <HAL_TIM_IC_Start_IT+0x1e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004522:	b2db      	uxtb	r3, r3
 8004524:	e023      	b.n	800456e <HAL_TIM_IC_Start_IT+0x66>
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b04      	cmp	r3, #4
 800452a:	d104      	bne.n	8004536 <HAL_TIM_IC_Start_IT+0x2e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004532:	b2db      	uxtb	r3, r3
 8004534:	e01b      	b.n	800456e <HAL_TIM_IC_Start_IT+0x66>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d104      	bne.n	8004546 <HAL_TIM_IC_Start_IT+0x3e>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004542:	b2db      	uxtb	r3, r3
 8004544:	e013      	b.n	800456e <HAL_TIM_IC_Start_IT+0x66>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	2b0c      	cmp	r3, #12
 800454a:	d104      	bne.n	8004556 <HAL_TIM_IC_Start_IT+0x4e>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004552:	b2db      	uxtb	r3, r3
 8004554:	e00b      	b.n	800456e <HAL_TIM_IC_Start_IT+0x66>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b10      	cmp	r3, #16
 800455a:	d104      	bne.n	8004566 <HAL_TIM_IC_Start_IT+0x5e>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004562:	b2db      	uxtb	r3, r3
 8004564:	e003      	b.n	800456e <HAL_TIM_IC_Start_IT+0x66>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800456c:	b2db      	uxtb	r3, r3
 800456e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <HAL_TIM_IC_Start_IT+0x78>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800457c:	b2db      	uxtb	r3, r3
 800457e:	e013      	b.n	80045a8 <HAL_TIM_IC_Start_IT+0xa0>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	2b04      	cmp	r3, #4
 8004584:	d104      	bne.n	8004590 <HAL_TIM_IC_Start_IT+0x88>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800458c:	b2db      	uxtb	r3, r3
 800458e:	e00b      	b.n	80045a8 <HAL_TIM_IC_Start_IT+0xa0>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	2b08      	cmp	r3, #8
 8004594:	d104      	bne.n	80045a0 <HAL_TIM_IC_Start_IT+0x98>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e003      	b.n	80045a8 <HAL_TIM_IC_Start_IT+0xa0>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80045aa:	7bbb      	ldrb	r3, [r7, #14]
 80045ac:	2b01      	cmp	r3, #1
 80045ae:	d102      	bne.n	80045b6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80045b0:	7b7b      	ldrb	r3, [r7, #13]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d001      	beq.n	80045ba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e0dd      	b.n	8004776 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <HAL_TIM_IC_Start_IT+0xc2>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045c8:	e023      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x10a>
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	2b04      	cmp	r3, #4
 80045ce:	d104      	bne.n	80045da <HAL_TIM_IC_Start_IT+0xd2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045d8:	e01b      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x10a>
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d104      	bne.n	80045ea <HAL_TIM_IC_Start_IT+0xe2>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2202      	movs	r2, #2
 80045e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045e8:	e013      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x10a>
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	2b0c      	cmp	r3, #12
 80045ee:	d104      	bne.n	80045fa <HAL_TIM_IC_Start_IT+0xf2>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2202      	movs	r2, #2
 80045f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80045f8:	e00b      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x10a>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b10      	cmp	r3, #16
 80045fe:	d104      	bne.n	800460a <HAL_TIM_IC_Start_IT+0x102>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004608:	e003      	b.n	8004612 <HAL_TIM_IC_Start_IT+0x10a>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2202      	movs	r2, #2
 800460e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d104      	bne.n	8004622 <HAL_TIM_IC_Start_IT+0x11a>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004620:	e013      	b.n	800464a <HAL_TIM_IC_Start_IT+0x142>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b04      	cmp	r3, #4
 8004626:	d104      	bne.n	8004632 <HAL_TIM_IC_Start_IT+0x12a>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004630:	e00b      	b.n	800464a <HAL_TIM_IC_Start_IT+0x142>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b08      	cmp	r3, #8
 8004636:	d104      	bne.n	8004642 <HAL_TIM_IC_Start_IT+0x13a>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004640:	e003      	b.n	800464a <HAL_TIM_IC_Start_IT+0x142>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	2b0c      	cmp	r3, #12
 800464e:	d841      	bhi.n	80046d4 <HAL_TIM_IC_Start_IT+0x1cc>
 8004650:	a201      	add	r2, pc, #4	@ (adr r2, 8004658 <HAL_TIM_IC_Start_IT+0x150>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800468d 	.word	0x0800468d
 800465c:	080046d5 	.word	0x080046d5
 8004660:	080046d5 	.word	0x080046d5
 8004664:	080046d5 	.word	0x080046d5
 8004668:	0800469f 	.word	0x0800469f
 800466c:	080046d5 	.word	0x080046d5
 8004670:	080046d5 	.word	0x080046d5
 8004674:	080046d5 	.word	0x080046d5
 8004678:	080046b1 	.word	0x080046b1
 800467c:	080046d5 	.word	0x080046d5
 8004680:	080046d5 	.word	0x080046d5
 8004684:	080046d5 	.word	0x080046d5
 8004688:	080046c3 	.word	0x080046c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68da      	ldr	r2, [r3, #12]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f042 0202 	orr.w	r2, r2, #2
 800469a:	60da      	str	r2, [r3, #12]
      break;
 800469c:	e01d      	b.n	80046da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0204 	orr.w	r2, r2, #4
 80046ac:	60da      	str	r2, [r3, #12]
      break;
 80046ae:	e014      	b.n	80046da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	68da      	ldr	r2, [r3, #12]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0208 	orr.w	r2, r2, #8
 80046be:	60da      	str	r2, [r3, #12]
      break;
 80046c0:	e00b      	b.n	80046da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68da      	ldr	r2, [r3, #12]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f042 0210 	orr.w	r2, r2, #16
 80046d0:	60da      	str	r2, [r3, #12]
      break;
 80046d2:	e002      	b.n	80046da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
      break;
 80046d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d149      	bne.n	8004774 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2201      	movs	r2, #1
 80046e6:	6839      	ldr	r1, [r7, #0]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f000 fcef 	bl	80050cc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a23      	ldr	r2, [pc, #140]	@ (8004780 <HAL_TIM_IC_Start_IT+0x278>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d01d      	beq.n	8004734 <HAL_TIM_IC_Start_IT+0x22c>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004700:	d018      	beq.n	8004734 <HAL_TIM_IC_Start_IT+0x22c>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a1f      	ldr	r2, [pc, #124]	@ (8004784 <HAL_TIM_IC_Start_IT+0x27c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d013      	beq.n	8004734 <HAL_TIM_IC_Start_IT+0x22c>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a1d      	ldr	r2, [pc, #116]	@ (8004788 <HAL_TIM_IC_Start_IT+0x280>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d00e      	beq.n	8004734 <HAL_TIM_IC_Start_IT+0x22c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1c      	ldr	r2, [pc, #112]	@ (800478c <HAL_TIM_IC_Start_IT+0x284>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d009      	beq.n	8004734 <HAL_TIM_IC_Start_IT+0x22c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a1a      	ldr	r2, [pc, #104]	@ (8004790 <HAL_TIM_IC_Start_IT+0x288>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d004      	beq.n	8004734 <HAL_TIM_IC_Start_IT+0x22c>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a19      	ldr	r2, [pc, #100]	@ (8004794 <HAL_TIM_IC_Start_IT+0x28c>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d115      	bne.n	8004760 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	689a      	ldr	r2, [r3, #8]
 800473a:	4b17      	ldr	r3, [pc, #92]	@ (8004798 <HAL_TIM_IC_Start_IT+0x290>)
 800473c:	4013      	ands	r3, r2
 800473e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b06      	cmp	r3, #6
 8004744:	d015      	beq.n	8004772 <HAL_TIM_IC_Start_IT+0x26a>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800474c:	d011      	beq.n	8004772 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f042 0201 	orr.w	r2, r2, #1
 800475c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800475e:	e008      	b.n	8004772 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f042 0201 	orr.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	e000      	b.n	8004774 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004772:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	40012c00 	.word	0x40012c00
 8004784:	40000400 	.word	0x40000400
 8004788:	40000800 	.word	0x40000800
 800478c:	40000c00 	.word	0x40000c00
 8004790:	40013400 	.word	0x40013400
 8004794:	40014000 	.word	0x40014000
 8004798:	00010007 	.word	0x00010007

0800479c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b084      	sub	sp, #16
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	2b0c      	cmp	r3, #12
 80047ae:	d841      	bhi.n	8004834 <HAL_TIM_IC_Stop_IT+0x98>
 80047b0:	a201      	add	r2, pc, #4	@ (adr r2, 80047b8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80047b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047b6:	bf00      	nop
 80047b8:	080047ed 	.word	0x080047ed
 80047bc:	08004835 	.word	0x08004835
 80047c0:	08004835 	.word	0x08004835
 80047c4:	08004835 	.word	0x08004835
 80047c8:	080047ff 	.word	0x080047ff
 80047cc:	08004835 	.word	0x08004835
 80047d0:	08004835 	.word	0x08004835
 80047d4:	08004835 	.word	0x08004835
 80047d8:	08004811 	.word	0x08004811
 80047dc:	08004835 	.word	0x08004835
 80047e0:	08004835 	.word	0x08004835
 80047e4:	08004835 	.word	0x08004835
 80047e8:	08004823 	.word	0x08004823
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	68da      	ldr	r2, [r3, #12]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f022 0202 	bic.w	r2, r2, #2
 80047fa:	60da      	str	r2, [r3, #12]
      break;
 80047fc:	e01d      	b.n	800483a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0204 	bic.w	r2, r2, #4
 800480c:	60da      	str	r2, [r3, #12]
      break;
 800480e:	e014      	b.n	800483a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	68da      	ldr	r2, [r3, #12]
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f022 0208 	bic.w	r2, r2, #8
 800481e:	60da      	str	r2, [r3, #12]
      break;
 8004820:	e00b      	b.n	800483a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68da      	ldr	r2, [r3, #12]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0210 	bic.w	r2, r2, #16
 8004830:	60da      	str	r2, [r3, #12]
      break;
 8004832:	e002      	b.n	800483a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	73fb      	strb	r3, [r7, #15]
      break;
 8004838:	bf00      	nop
  }

  if (status == HAL_OK)
 800483a:	7bfb      	ldrb	r3, [r7, #15]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d166      	bne.n	800490e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2200      	movs	r2, #0
 8004846:	6839      	ldr	r1, [r7, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f000 fc3f 	bl	80050cc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a1a      	ldr	r2, [r3, #32]
 8004854:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004858:	4013      	ands	r3, r2
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10f      	bne.n	800487e <HAL_TIM_IC_Stop_IT+0xe2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	6a1a      	ldr	r2, [r3, #32]
 8004864:	f240 4344 	movw	r3, #1092	@ 0x444
 8004868:	4013      	ands	r3, r2
 800486a:	2b00      	cmp	r3, #0
 800486c:	d107      	bne.n	800487e <HAL_TIM_IC_Stop_IT+0xe2>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f022 0201 	bic.w	r2, r2, #1
 800487c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d104      	bne.n	800488e <HAL_TIM_IC_Stop_IT+0xf2>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2201      	movs	r2, #1
 8004888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800488c:	e023      	b.n	80048d6 <HAL_TIM_IC_Stop_IT+0x13a>
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b04      	cmp	r3, #4
 8004892:	d104      	bne.n	800489e <HAL_TIM_IC_Stop_IT+0x102>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800489c:	e01b      	b.n	80048d6 <HAL_TIM_IC_Stop_IT+0x13a>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_IC_Stop_IT+0x112>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048ac:	e013      	b.n	80048d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d104      	bne.n	80048be <HAL_TIM_IC_Stop_IT+0x122>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048bc:	e00b      	b.n	80048d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b10      	cmp	r3, #16
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_IC_Stop_IT+0x132>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048cc:	e003      	b.n	80048d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_IC_Stop_IT+0x14a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80048e4:	e013      	b.n	800490e <HAL_TIM_IC_Stop_IT+0x172>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_IC_Stop_IT+0x15a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048f4:	e00b      	b.n	800490e <HAL_TIM_IC_Stop_IT+0x172>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_IC_Stop_IT+0x16a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004904:	e003      	b.n	800490e <HAL_TIM_IC_Stop_IT+0x172>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0302 	and.w	r3, r3, #2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0202 	mvn.w	r2, #2
 800494c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f003 0303 	and.w	r3, r3, #3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7fc fb34 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f9c6 	bl	8004cfc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 f9cd 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0304 	and.w	r3, r3, #4
 8004982:	2b00      	cmp	r3, #0
 8004984:	d020      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01b      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0204 	mvn.w	r2, #4
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f7fc fb0e 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f9a0 	bl	8004cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 f9a7 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0308 	and.w	r3, r3, #8
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d020      	beq.n	8004a14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0308 	and.w	r3, r3, #8
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01b      	beq.n	8004a14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0208 	mvn.w	r2, #8
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2204      	movs	r2, #4
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 0303 	and.w	r3, r3, #3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f7fc fae8 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f97a 	bl	8004cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f981 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0310 	and.w	r3, r3, #16
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d020      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 0310 	and.w	r3, r3, #16
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d01b      	beq.n	8004a60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0210 	mvn.w	r2, #16
 8004a30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2208      	movs	r2, #8
 8004a36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d003      	beq.n	8004a4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fc fac2 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8004a4c:	e005      	b.n	8004a5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f954 	bl	8004cfc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f000 f95b 	bl	8004d10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	f003 0301 	and.w	r3, r3, #1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d00c      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d007      	beq.n	8004a84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f06f 0201 	mvn.w	r2, #1
 8004a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f932 	bl	8004ce8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d104      	bne.n	8004a98 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00c      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d007      	beq.n	8004ab2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004aaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fbc5 	bl	800523c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00c      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d007      	beq.n	8004ad6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004ace:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f000 fbbd 	bl	8005250 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00c      	beq.n	8004afa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d007      	beq.n	8004afa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004af2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	f000 f915 	bl	8004d24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	f003 0320 	and.w	r3, r3, #32
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d00c      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0320 	and.w	r3, r3, #32
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f06f 0220 	mvn.w	r2, #32
 8004b16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 fb85 	bl	8005228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b086      	sub	sp, #24
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	60f8      	str	r0, [r7, #12]
 8004b2e:	60b9      	str	r1, [r7, #8]
 8004b30:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e088      	b.n	8004c56 <HAL_TIM_IC_ConfigChannel+0x130>
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d11b      	bne.n	8004b8a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004b62:	f000 f98f 	bl	8004e84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f022 020c 	bic.w	r2, r2, #12
 8004b74:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6999      	ldr	r1, [r3, #24]
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	689a      	ldr	r2, [r3, #8]
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	430a      	orrs	r2, r1
 8004b86:	619a      	str	r2, [r3, #24]
 8004b88:	e060      	b.n	8004c4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b04      	cmp	r3, #4
 8004b8e:	d11c      	bne.n	8004bca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004ba0:	f000 f9de 	bl	8004f60 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699a      	ldr	r2, [r3, #24]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004bb2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6999      	ldr	r1, [r3, #24]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	689b      	ldr	r3, [r3, #8]
 8004bbe:	021a      	lsls	r2, r3, #8
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	430a      	orrs	r2, r1
 8004bc6:	619a      	str	r2, [r3, #24]
 8004bc8:	e040      	b.n	8004c4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d11b      	bne.n	8004c08 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004bdc:	68bb      	ldr	r3, [r7, #8]
 8004bde:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004be0:	f000 f9fb 	bl	8004fda <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69da      	ldr	r2, [r3, #28]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f022 020c 	bic.w	r2, r2, #12
 8004bf2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69d9      	ldr	r1, [r3, #28]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	689a      	ldr	r2, [r3, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	430a      	orrs	r2, r1
 8004c04:	61da      	str	r2, [r3, #28]
 8004c06:	e021      	b.n	8004c4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b0c      	cmp	r3, #12
 8004c0c:	d11c      	bne.n	8004c48 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c12:	68bb      	ldr	r3, [r7, #8]
 8004c14:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004c1e:	f000 fa18 	bl	8005052 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69da      	ldr	r2, [r3, #28]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8004c30:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69d9      	ldr	r1, [r3, #28]
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	021a      	lsls	r2, r3, #8
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	430a      	orrs	r2, r1
 8004c44:	61da      	str	r2, [r3, #28]
 8004c46:	e001      	b.n	8004c4c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
	...

08004c60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b0c      	cmp	r3, #12
 8004c72:	d831      	bhi.n	8004cd8 <HAL_TIM_ReadCapturedValue+0x78>
 8004c74:	a201      	add	r2, pc, #4	@ (adr r2, 8004c7c <HAL_TIM_ReadCapturedValue+0x1c>)
 8004c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7a:	bf00      	nop
 8004c7c:	08004cb1 	.word	0x08004cb1
 8004c80:	08004cd9 	.word	0x08004cd9
 8004c84:	08004cd9 	.word	0x08004cd9
 8004c88:	08004cd9 	.word	0x08004cd9
 8004c8c:	08004cbb 	.word	0x08004cbb
 8004c90:	08004cd9 	.word	0x08004cd9
 8004c94:	08004cd9 	.word	0x08004cd9
 8004c98:	08004cd9 	.word	0x08004cd9
 8004c9c:	08004cc5 	.word	0x08004cc5
 8004ca0:	08004cd9 	.word	0x08004cd9
 8004ca4:	08004cd9 	.word	0x08004cd9
 8004ca8:	08004cd9 	.word	0x08004cd9
 8004cac:	08004ccf 	.word	0x08004ccf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cb6:	60fb      	str	r3, [r7, #12]

      break;
 8004cb8:	e00f      	b.n	8004cda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc0:	60fb      	str	r3, [r7, #12]

      break;
 8004cc2:	e00a      	b.n	8004cda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cca:	60fb      	str	r3, [r7, #12]

      break;
 8004ccc:	e005      	b.n	8004cda <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	60fb      	str	r3, [r7, #12]

      break;
 8004cd6:	e000      	b.n	8004cda <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8004cd8:	bf00      	nop
  }

  return tmpreg;
 8004cda:	68fb      	ldr	r3, [r7, #12]
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b083      	sub	sp, #12
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004cf0:	bf00      	nop
 8004cf2:	370c      	adds	r7, #12
 8004cf4:	46bd      	mov	sp, r7
 8004cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfa:	4770      	bx	lr

08004cfc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004d2c:	bf00      	nop
 8004d2e:	370c      	adds	r7, #12
 8004d30:	46bd      	mov	sp, r7
 8004d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d36:	4770      	bx	lr

08004d38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a46      	ldr	r2, [pc, #280]	@ (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d56:	d00f      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a43      	ldr	r2, [pc, #268]	@ (8004e68 <TIM_Base_SetConfig+0x130>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00b      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a42      	ldr	r2, [pc, #264]	@ (8004e6c <TIM_Base_SetConfig+0x134>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d007      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a41      	ldr	r2, [pc, #260]	@ (8004e70 <TIM_Base_SetConfig+0x138>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d003      	beq.n	8004d78 <TIM_Base_SetConfig+0x40>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a40      	ldr	r2, [pc, #256]	@ (8004e74 <TIM_Base_SetConfig+0x13c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d108      	bne.n	8004d8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004d7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	68fa      	ldr	r2, [r7, #12]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a35      	ldr	r2, [pc, #212]	@ (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d01f      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d98:	d01b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a32      	ldr	r2, [pc, #200]	@ (8004e68 <TIM_Base_SetConfig+0x130>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d017      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a31      	ldr	r2, [pc, #196]	@ (8004e6c <TIM_Base_SetConfig+0x134>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a30      	ldr	r2, [pc, #192]	@ (8004e70 <TIM_Base_SetConfig+0x138>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d00f      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a2f      	ldr	r2, [pc, #188]	@ (8004e74 <TIM_Base_SetConfig+0x13c>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d00b      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8004e78 <TIM_Base_SetConfig+0x140>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d007      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	4a2d      	ldr	r2, [pc, #180]	@ (8004e7c <TIM_Base_SetConfig+0x144>)
 8004dc6:	4293      	cmp	r3, r2
 8004dc8:	d003      	beq.n	8004dd2 <TIM_Base_SetConfig+0x9a>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	4a2c      	ldr	r2, [pc, #176]	@ (8004e80 <TIM_Base_SetConfig+0x148>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d108      	bne.n	8004de4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004dd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	68fa      	ldr	r2, [r7, #12]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	695b      	ldr	r3, [r3, #20]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	689a      	ldr	r2, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	681a      	ldr	r2, [r3, #0]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a16      	ldr	r2, [pc, #88]	@ (8004e64 <TIM_Base_SetConfig+0x12c>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d00f      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a18      	ldr	r2, [pc, #96]	@ (8004e74 <TIM_Base_SetConfig+0x13c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00b      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	@ (8004e78 <TIM_Base_SetConfig+0x140>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d007      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a16      	ldr	r2, [pc, #88]	@ (8004e7c <TIM_Base_SetConfig+0x144>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_Base_SetConfig+0xf8>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a15      	ldr	r2, [pc, #84]	@ (8004e80 <TIM_Base_SetConfig+0x148>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d103      	bne.n	8004e38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	f003 0301 	and.w	r3, r3, #1
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d105      	bne.n	8004e56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f023 0201 	bic.w	r2, r3, #1
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	611a      	str	r2, [r3, #16]
  }
}
 8004e56:	bf00      	nop
 8004e58:	3714      	adds	r7, #20
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e60:	4770      	bx	lr
 8004e62:	bf00      	nop
 8004e64:	40012c00 	.word	0x40012c00
 8004e68:	40000400 	.word	0x40000400
 8004e6c:	40000800 	.word	0x40000800
 8004e70:	40000c00 	.word	0x40000c00
 8004e74:	40013400 	.word	0x40013400
 8004e78:	40014000 	.word	0x40014000
 8004e7c:	40014400 	.word	0x40014400
 8004e80:	40014800 	.word	0x40014800

08004e84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b087      	sub	sp, #28
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	f023 0201 	bic.w	r2, r3, #1
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	699b      	ldr	r3, [r3, #24]
 8004ea8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	4a26      	ldr	r2, [pc, #152]	@ (8004f48 <TIM_TI1_SetConfig+0xc4>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d017      	beq.n	8004ee2 <TIM_TI1_SetConfig+0x5e>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004eb8:	d013      	beq.n	8004ee2 <TIM_TI1_SetConfig+0x5e>
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	4a23      	ldr	r2, [pc, #140]	@ (8004f4c <TIM_TI1_SetConfig+0xc8>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d00f      	beq.n	8004ee2 <TIM_TI1_SetConfig+0x5e>
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	4a22      	ldr	r2, [pc, #136]	@ (8004f50 <TIM_TI1_SetConfig+0xcc>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d00b      	beq.n	8004ee2 <TIM_TI1_SetConfig+0x5e>
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	4a21      	ldr	r2, [pc, #132]	@ (8004f54 <TIM_TI1_SetConfig+0xd0>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d007      	beq.n	8004ee2 <TIM_TI1_SetConfig+0x5e>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	4a20      	ldr	r2, [pc, #128]	@ (8004f58 <TIM_TI1_SetConfig+0xd4>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d003      	beq.n	8004ee2 <TIM_TI1_SetConfig+0x5e>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	4a1f      	ldr	r2, [pc, #124]	@ (8004f5c <TIM_TI1_SetConfig+0xd8>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d101      	bne.n	8004ee6 <TIM_TI1_SetConfig+0x62>
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e000      	b.n	8004ee8 <TIM_TI1_SetConfig+0x64>
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d008      	beq.n	8004efe <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f023 0303 	bic.w	r3, r3, #3
 8004ef2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	e003      	b.n	8004f06 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	f043 0301 	orr.w	r3, r3, #1
 8004f04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f023 030a 	bic.w	r3, r3, #10
 8004f20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f003 030a 	and.w	r3, r3, #10
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	697a      	ldr	r2, [r7, #20]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	40012c00 	.word	0x40012c00
 8004f4c:	40000400 	.word	0x40000400
 8004f50:	40000800 	.word	0x40000800
 8004f54:	40000c00 	.word	0x40000c00
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40014000 	.word	0x40014000

08004f60 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6a1b      	ldr	r3, [r3, #32]
 8004f72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	6a1b      	ldr	r3, [r3, #32]
 8004f78:	f023 0210 	bic.w	r2, r3, #16
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	699b      	ldr	r3, [r3, #24]
 8004f84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	021b      	lsls	r3, r3, #8
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	031b      	lsls	r3, r3, #12
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fb2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004fbc:	697a      	ldr	r2, [r7, #20]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	693a      	ldr	r2, [r7, #16]
 8004fc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	697a      	ldr	r2, [r7, #20]
 8004fcc:	621a      	str	r2, [r3, #32]
}
 8004fce:	bf00      	nop
 8004fd0:	371c      	adds	r7, #28
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b087      	sub	sp, #28
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	60f8      	str	r0, [r7, #12]
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	607a      	str	r2, [r7, #4]
 8004fe6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	6a1b      	ldr	r3, [r3, #32]
 8004fec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	69db      	ldr	r3, [r3, #28]
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005008:	693a      	ldr	r2, [r7, #16]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4313      	orrs	r3, r2
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	b2db      	uxtb	r3, r3
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4313      	orrs	r3, r2
 8005022:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 800502a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	021b      	lsls	r3, r3, #8
 8005030:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005034:	697a      	ldr	r2, [r7, #20]
 8005036:	4313      	orrs	r3, r2
 8005038:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	621a      	str	r2, [r3, #32]
}
 8005046:	bf00      	nop
 8005048:	371c      	adds	r7, #28
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr

08005052 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005052:	b480      	push	{r7}
 8005054:	b087      	sub	sp, #28
 8005056:	af00      	add	r7, sp, #0
 8005058:	60f8      	str	r0, [r7, #12]
 800505a:	60b9      	str	r1, [r7, #8]
 800505c:	607a      	str	r2, [r7, #4]
 800505e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800507e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	693a      	ldr	r2, [r7, #16]
 8005086:	4313      	orrs	r3, r2
 8005088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005090:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	031b      	lsls	r3, r3, #12
 8005096:	b29b      	uxth	r3, r3
 8005098:	693a      	ldr	r2, [r7, #16]
 800509a:	4313      	orrs	r3, r2
 800509c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80050a4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	031b      	lsls	r3, r3, #12
 80050aa:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80050ae:	697a      	ldr	r2, [r7, #20]
 80050b0:	4313      	orrs	r3, r2
 80050b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	621a      	str	r2, [r3, #32]
}
 80050c0:	bf00      	nop
 80050c2:	371c      	adds	r7, #28
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b087      	sub	sp, #28
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f003 031f 	and.w	r3, r3, #31
 80050de:	2201      	movs	r2, #1
 80050e0:	fa02 f303 	lsl.w	r3, r2, r3
 80050e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a1a      	ldr	r2, [r3, #32]
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	401a      	ands	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a1a      	ldr	r2, [r3, #32]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	f003 031f 	and.w	r3, r3, #31
 80050fe:	6879      	ldr	r1, [r7, #4]
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	431a      	orrs	r2, r3
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	621a      	str	r2, [r3, #32]
}
 800510a:	bf00      	nop
 800510c:	371c      	adds	r7, #28
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
	...

08005118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005118:	b480      	push	{r7}
 800511a:	b085      	sub	sp, #20
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
 8005120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800512c:	2302      	movs	r3, #2
 800512e:	e068      	b.n	8005202 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2e      	ldr	r2, [pc, #184]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d004      	beq.n	8005164 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2d      	ldr	r2, [pc, #180]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d108      	bne.n	8005176 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800516a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	68fa      	ldr	r2, [r7, #12]
 8005172:	4313      	orrs	r3, r2
 8005174:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800517c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	4313      	orrs	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a1e      	ldr	r2, [pc, #120]	@ (8005210 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d01d      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051a2:	d018      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1b      	ldr	r2, [pc, #108]	@ (8005218 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d013      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1a      	ldr	r2, [pc, #104]	@ (800521c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d00e      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a18      	ldr	r2, [pc, #96]	@ (8005220 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d009      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a13      	ldr	r2, [pc, #76]	@ (8005214 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d004      	beq.n	80051d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a14      	ldr	r2, [pc, #80]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10c      	bne.n	80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68ba      	ldr	r2, [r7, #8]
 80051ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2201      	movs	r2, #1
 80051f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3714      	adds	r7, #20
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr
 800520e:	bf00      	nop
 8005210:	40012c00 	.word	0x40012c00
 8005214:	40013400 	.word	0x40013400
 8005218:	40000400 	.word	0x40000400
 800521c:	40000800 	.word	0x40000800
 8005220:	40000c00 	.word	0x40000c00
 8005224:	40014000 	.word	0x40014000

08005228 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr

0800523c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b082      	sub	sp, #8
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e040      	b.n	80052f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800527a:	2b00      	cmp	r3, #0
 800527c:	d106      	bne.n	800528c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7fc fb00 	bl	800188c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2224      	movs	r2, #36	@ 0x24
 8005290:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 0201 	bic.w	r2, r2, #1
 80052a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d002      	beq.n	80052b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fb6a 	bl	8005984 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 f8af 	bl	8005414 <UART_SetConfig>
 80052b6:	4603      	mov	r3, r0
 80052b8:	2b01      	cmp	r3, #1
 80052ba:	d101      	bne.n	80052c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80052bc:	2301      	movs	r3, #1
 80052be:	e01b      	b.n	80052f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	685a      	ldr	r2, [r3, #4]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 fbe9 	bl	8005ac8 <UART_CheckIdleState>
 80052f6:	4603      	mov	r3, r0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08a      	sub	sp, #40	@ 0x28
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	603b      	str	r3, [r7, #0]
 800530c:	4613      	mov	r3, r2
 800530e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005314:	2b20      	cmp	r3, #32
 8005316:	d177      	bne.n	8005408 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <HAL_UART_Transmit+0x24>
 800531e:	88fb      	ldrh	r3, [r7, #6]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e070      	b.n	800540a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2200      	movs	r2, #0
 800532c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2221      	movs	r2, #33	@ 0x21
 8005334:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005336:	f7fc fcb1 	bl	8001c9c <HAL_GetTick>
 800533a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	88fa      	ldrh	r2, [r7, #6]
 8005340:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	88fa      	ldrh	r2, [r7, #6]
 8005348:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005354:	d108      	bne.n	8005368 <HAL_UART_Transmit+0x68>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d104      	bne.n	8005368 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	e003      	b.n	8005370 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800536c:	2300      	movs	r3, #0
 800536e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005370:	e02f      	b.n	80053d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2200      	movs	r2, #0
 800537a:	2180      	movs	r1, #128	@ 0x80
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 fc4b 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d004      	beq.n	8005392 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800538e:	2303      	movs	r3, #3
 8005390:	e03b      	b.n	800540a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005392:	69fb      	ldr	r3, [r7, #28]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d10b      	bne.n	80053b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005398:	69bb      	ldr	r3, [r7, #24]
 800539a:	881a      	ldrh	r2, [r3, #0]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a4:	b292      	uxth	r2, r2
 80053a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	3302      	adds	r3, #2
 80053ac:	61bb      	str	r3, [r7, #24]
 80053ae:	e007      	b.n	80053c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	781a      	ldrb	r2, [r3, #0]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	3301      	adds	r3, #1
 80053be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80053d8:	b29b      	uxth	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1c9      	bne.n	8005372 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	9300      	str	r3, [sp, #0]
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	2200      	movs	r2, #0
 80053e6:	2140      	movs	r1, #64	@ 0x40
 80053e8:	68f8      	ldr	r0, [r7, #12]
 80053ea:	f000 fc15 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d004      	beq.n	80053fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2220      	movs	r2, #32
 80053f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80053fa:	2303      	movs	r3, #3
 80053fc:	e005      	b.n	800540a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2220      	movs	r2, #32
 8005402:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	e000      	b.n	800540a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005408:	2302      	movs	r3, #2
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
	...

08005414 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005414:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005418:	b08a      	sub	sp, #40	@ 0x28
 800541a:	af00      	add	r7, sp, #0
 800541c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800541e:	2300      	movs	r3, #0
 8005420:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	691b      	ldr	r3, [r3, #16]
 800542c:	431a      	orrs	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	695b      	ldr	r3, [r3, #20]
 8005432:	431a      	orrs	r2, r3
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	4313      	orrs	r3, r2
 800543a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	4ba4      	ldr	r3, [pc, #656]	@ (80056d4 <UART_SetConfig+0x2c0>)
 8005444:	4013      	ands	r3, r2
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	6812      	ldr	r2, [r2, #0]
 800544a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800544c:	430b      	orrs	r3, r1
 800544e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	430a      	orrs	r2, r1
 8005464:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a99      	ldr	r2, [pc, #612]	@ (80056d8 <UART_SetConfig+0x2c4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d004      	beq.n	8005480 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800547c:	4313      	orrs	r3, r2
 800547e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005490:	430a      	orrs	r2, r1
 8005492:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a90      	ldr	r2, [pc, #576]	@ (80056dc <UART_SetConfig+0x2c8>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d126      	bne.n	80054ec <UART_SetConfig+0xd8>
 800549e:	4b90      	ldr	r3, [pc, #576]	@ (80056e0 <UART_SetConfig+0x2cc>)
 80054a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054a4:	f003 0303 	and.w	r3, r3, #3
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d81b      	bhi.n	80054e4 <UART_SetConfig+0xd0>
 80054ac:	a201      	add	r2, pc, #4	@ (adr r2, 80054b4 <UART_SetConfig+0xa0>)
 80054ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b2:	bf00      	nop
 80054b4:	080054c5 	.word	0x080054c5
 80054b8:	080054d5 	.word	0x080054d5
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054dd 	.word	0x080054dd
 80054c4:	2301      	movs	r3, #1
 80054c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ca:	e116      	b.n	80056fa <UART_SetConfig+0x2e6>
 80054cc:	2302      	movs	r3, #2
 80054ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054d2:	e112      	b.n	80056fa <UART_SetConfig+0x2e6>
 80054d4:	2304      	movs	r3, #4
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054da:	e10e      	b.n	80056fa <UART_SetConfig+0x2e6>
 80054dc:	2308      	movs	r3, #8
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054e2:	e10a      	b.n	80056fa <UART_SetConfig+0x2e6>
 80054e4:	2310      	movs	r3, #16
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054ea:	e106      	b.n	80056fa <UART_SetConfig+0x2e6>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a7c      	ldr	r2, [pc, #496]	@ (80056e4 <UART_SetConfig+0x2d0>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d138      	bne.n	8005568 <UART_SetConfig+0x154>
 80054f6:	4b7a      	ldr	r3, [pc, #488]	@ (80056e0 <UART_SetConfig+0x2cc>)
 80054f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054fc:	f003 030c 	and.w	r3, r3, #12
 8005500:	2b0c      	cmp	r3, #12
 8005502:	d82d      	bhi.n	8005560 <UART_SetConfig+0x14c>
 8005504:	a201      	add	r2, pc, #4	@ (adr r2, 800550c <UART_SetConfig+0xf8>)
 8005506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550a:	bf00      	nop
 800550c:	08005541 	.word	0x08005541
 8005510:	08005561 	.word	0x08005561
 8005514:	08005561 	.word	0x08005561
 8005518:	08005561 	.word	0x08005561
 800551c:	08005551 	.word	0x08005551
 8005520:	08005561 	.word	0x08005561
 8005524:	08005561 	.word	0x08005561
 8005528:	08005561 	.word	0x08005561
 800552c:	08005549 	.word	0x08005549
 8005530:	08005561 	.word	0x08005561
 8005534:	08005561 	.word	0x08005561
 8005538:	08005561 	.word	0x08005561
 800553c:	08005559 	.word	0x08005559
 8005540:	2300      	movs	r3, #0
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005546:	e0d8      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005548:	2302      	movs	r3, #2
 800554a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800554e:	e0d4      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005550:	2304      	movs	r3, #4
 8005552:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005556:	e0d0      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005558:	2308      	movs	r3, #8
 800555a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800555e:	e0cc      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005560:	2310      	movs	r3, #16
 8005562:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005566:	e0c8      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a5e      	ldr	r2, [pc, #376]	@ (80056e8 <UART_SetConfig+0x2d4>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d125      	bne.n	80055be <UART_SetConfig+0x1aa>
 8005572:	4b5b      	ldr	r3, [pc, #364]	@ (80056e0 <UART_SetConfig+0x2cc>)
 8005574:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005578:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800557c:	2b30      	cmp	r3, #48	@ 0x30
 800557e:	d016      	beq.n	80055ae <UART_SetConfig+0x19a>
 8005580:	2b30      	cmp	r3, #48	@ 0x30
 8005582:	d818      	bhi.n	80055b6 <UART_SetConfig+0x1a2>
 8005584:	2b20      	cmp	r3, #32
 8005586:	d00a      	beq.n	800559e <UART_SetConfig+0x18a>
 8005588:	2b20      	cmp	r3, #32
 800558a:	d814      	bhi.n	80055b6 <UART_SetConfig+0x1a2>
 800558c:	2b00      	cmp	r3, #0
 800558e:	d002      	beq.n	8005596 <UART_SetConfig+0x182>
 8005590:	2b10      	cmp	r3, #16
 8005592:	d008      	beq.n	80055a6 <UART_SetConfig+0x192>
 8005594:	e00f      	b.n	80055b6 <UART_SetConfig+0x1a2>
 8005596:	2300      	movs	r3, #0
 8005598:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800559c:	e0ad      	b.n	80056fa <UART_SetConfig+0x2e6>
 800559e:	2302      	movs	r3, #2
 80055a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055a4:	e0a9      	b.n	80056fa <UART_SetConfig+0x2e6>
 80055a6:	2304      	movs	r3, #4
 80055a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ac:	e0a5      	b.n	80056fa <UART_SetConfig+0x2e6>
 80055ae:	2308      	movs	r3, #8
 80055b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055b4:	e0a1      	b.n	80056fa <UART_SetConfig+0x2e6>
 80055b6:	2310      	movs	r3, #16
 80055b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055bc:	e09d      	b.n	80056fa <UART_SetConfig+0x2e6>
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	4a4a      	ldr	r2, [pc, #296]	@ (80056ec <UART_SetConfig+0x2d8>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d125      	bne.n	8005614 <UART_SetConfig+0x200>
 80055c8:	4b45      	ldr	r3, [pc, #276]	@ (80056e0 <UART_SetConfig+0x2cc>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80055d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80055d4:	d016      	beq.n	8005604 <UART_SetConfig+0x1f0>
 80055d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80055d8:	d818      	bhi.n	800560c <UART_SetConfig+0x1f8>
 80055da:	2b80      	cmp	r3, #128	@ 0x80
 80055dc:	d00a      	beq.n	80055f4 <UART_SetConfig+0x1e0>
 80055de:	2b80      	cmp	r3, #128	@ 0x80
 80055e0:	d814      	bhi.n	800560c <UART_SetConfig+0x1f8>
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <UART_SetConfig+0x1d8>
 80055e6:	2b40      	cmp	r3, #64	@ 0x40
 80055e8:	d008      	beq.n	80055fc <UART_SetConfig+0x1e8>
 80055ea:	e00f      	b.n	800560c <UART_SetConfig+0x1f8>
 80055ec:	2300      	movs	r3, #0
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f2:	e082      	b.n	80056fa <UART_SetConfig+0x2e6>
 80055f4:	2302      	movs	r3, #2
 80055f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055fa:	e07e      	b.n	80056fa <UART_SetConfig+0x2e6>
 80055fc:	2304      	movs	r3, #4
 80055fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005602:	e07a      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005604:	2308      	movs	r3, #8
 8005606:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800560a:	e076      	b.n	80056fa <UART_SetConfig+0x2e6>
 800560c:	2310      	movs	r3, #16
 800560e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005612:	e072      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a35      	ldr	r2, [pc, #212]	@ (80056f0 <UART_SetConfig+0x2dc>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d12a      	bne.n	8005674 <UART_SetConfig+0x260>
 800561e:	4b30      	ldr	r3, [pc, #192]	@ (80056e0 <UART_SetConfig+0x2cc>)
 8005620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005624:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005628:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800562c:	d01a      	beq.n	8005664 <UART_SetConfig+0x250>
 800562e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005632:	d81b      	bhi.n	800566c <UART_SetConfig+0x258>
 8005634:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005638:	d00c      	beq.n	8005654 <UART_SetConfig+0x240>
 800563a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800563e:	d815      	bhi.n	800566c <UART_SetConfig+0x258>
 8005640:	2b00      	cmp	r3, #0
 8005642:	d003      	beq.n	800564c <UART_SetConfig+0x238>
 8005644:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005648:	d008      	beq.n	800565c <UART_SetConfig+0x248>
 800564a:	e00f      	b.n	800566c <UART_SetConfig+0x258>
 800564c:	2300      	movs	r3, #0
 800564e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005652:	e052      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005654:	2302      	movs	r3, #2
 8005656:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800565a:	e04e      	b.n	80056fa <UART_SetConfig+0x2e6>
 800565c:	2304      	movs	r3, #4
 800565e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005662:	e04a      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005664:	2308      	movs	r3, #8
 8005666:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800566a:	e046      	b.n	80056fa <UART_SetConfig+0x2e6>
 800566c:	2310      	movs	r3, #16
 800566e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005672:	e042      	b.n	80056fa <UART_SetConfig+0x2e6>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a17      	ldr	r2, [pc, #92]	@ (80056d8 <UART_SetConfig+0x2c4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d13a      	bne.n	80056f4 <UART_SetConfig+0x2e0>
 800567e:	4b18      	ldr	r3, [pc, #96]	@ (80056e0 <UART_SetConfig+0x2cc>)
 8005680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005684:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005688:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800568c:	d01a      	beq.n	80056c4 <UART_SetConfig+0x2b0>
 800568e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005692:	d81b      	bhi.n	80056cc <UART_SetConfig+0x2b8>
 8005694:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005698:	d00c      	beq.n	80056b4 <UART_SetConfig+0x2a0>
 800569a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800569e:	d815      	bhi.n	80056cc <UART_SetConfig+0x2b8>
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d003      	beq.n	80056ac <UART_SetConfig+0x298>
 80056a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056a8:	d008      	beq.n	80056bc <UART_SetConfig+0x2a8>
 80056aa:	e00f      	b.n	80056cc <UART_SetConfig+0x2b8>
 80056ac:	2300      	movs	r3, #0
 80056ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056b2:	e022      	b.n	80056fa <UART_SetConfig+0x2e6>
 80056b4:	2302      	movs	r3, #2
 80056b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ba:	e01e      	b.n	80056fa <UART_SetConfig+0x2e6>
 80056bc:	2304      	movs	r3, #4
 80056be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056c2:	e01a      	b.n	80056fa <UART_SetConfig+0x2e6>
 80056c4:	2308      	movs	r3, #8
 80056c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056ca:	e016      	b.n	80056fa <UART_SetConfig+0x2e6>
 80056cc:	2310      	movs	r3, #16
 80056ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80056d2:	e012      	b.n	80056fa <UART_SetConfig+0x2e6>
 80056d4:	efff69f3 	.word	0xefff69f3
 80056d8:	40008000 	.word	0x40008000
 80056dc:	40013800 	.word	0x40013800
 80056e0:	40021000 	.word	0x40021000
 80056e4:	40004400 	.word	0x40004400
 80056e8:	40004800 	.word	0x40004800
 80056ec:	40004c00 	.word	0x40004c00
 80056f0:	40005000 	.word	0x40005000
 80056f4:	2310      	movs	r3, #16
 80056f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a9f      	ldr	r2, [pc, #636]	@ (800597c <UART_SetConfig+0x568>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d17a      	bne.n	80057fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005704:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005708:	2b08      	cmp	r3, #8
 800570a:	d824      	bhi.n	8005756 <UART_SetConfig+0x342>
 800570c:	a201      	add	r2, pc, #4	@ (adr r2, 8005714 <UART_SetConfig+0x300>)
 800570e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005712:	bf00      	nop
 8005714:	08005739 	.word	0x08005739
 8005718:	08005757 	.word	0x08005757
 800571c:	08005741 	.word	0x08005741
 8005720:	08005757 	.word	0x08005757
 8005724:	08005747 	.word	0x08005747
 8005728:	08005757 	.word	0x08005757
 800572c:	08005757 	.word	0x08005757
 8005730:	08005757 	.word	0x08005757
 8005734:	0800574f 	.word	0x0800574f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005738:	f7fd fe20 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 800573c:	61f8      	str	r0, [r7, #28]
        break;
 800573e:	e010      	b.n	8005762 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005740:	4b8f      	ldr	r3, [pc, #572]	@ (8005980 <UART_SetConfig+0x56c>)
 8005742:	61fb      	str	r3, [r7, #28]
        break;
 8005744:	e00d      	b.n	8005762 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005746:	f7fd fd81 	bl	800324c <HAL_RCC_GetSysClockFreq>
 800574a:	61f8      	str	r0, [r7, #28]
        break;
 800574c:	e009      	b.n	8005762 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005752:	61fb      	str	r3, [r7, #28]
        break;
 8005754:	e005      	b.n	8005762 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005760:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 80fb 	beq.w	8005960 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	685a      	ldr	r2, [r3, #4]
 800576e:	4613      	mov	r3, r2
 8005770:	005b      	lsls	r3, r3, #1
 8005772:	4413      	add	r3, r2
 8005774:	69fa      	ldr	r2, [r7, #28]
 8005776:	429a      	cmp	r2, r3
 8005778:	d305      	bcc.n	8005786 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005780:	69fa      	ldr	r2, [r7, #28]
 8005782:	429a      	cmp	r2, r3
 8005784:	d903      	bls.n	800578e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800578c:	e0e8      	b.n	8005960 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800578e:	69fb      	ldr	r3, [r7, #28]
 8005790:	2200      	movs	r2, #0
 8005792:	461c      	mov	r4, r3
 8005794:	4615      	mov	r5, r2
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	022b      	lsls	r3, r5, #8
 80057a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80057a4:	0222      	lsls	r2, r4, #8
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	6849      	ldr	r1, [r1, #4]
 80057aa:	0849      	lsrs	r1, r1, #1
 80057ac:	2000      	movs	r0, #0
 80057ae:	4688      	mov	r8, r1
 80057b0:	4681      	mov	r9, r0
 80057b2:	eb12 0a08 	adds.w	sl, r2, r8
 80057b6:	eb43 0b09 	adc.w	fp, r3, r9
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	2200      	movs	r2, #0
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c8:	4650      	mov	r0, sl
 80057ca:	4659      	mov	r1, fp
 80057cc:	f7fb fa3c 	bl	8000c48 <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4613      	mov	r3, r2
 80057d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80057d8:	69bb      	ldr	r3, [r7, #24]
 80057da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80057de:	d308      	bcc.n	80057f2 <UART_SetConfig+0x3de>
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80057e6:	d204      	bcs.n	80057f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	69ba      	ldr	r2, [r7, #24]
 80057ee:	60da      	str	r2, [r3, #12]
 80057f0:	e0b6      	b.n	8005960 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057f8:	e0b2      	b.n	8005960 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	69db      	ldr	r3, [r3, #28]
 80057fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005802:	d15e      	bne.n	80058c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005804:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005808:	2b08      	cmp	r3, #8
 800580a:	d828      	bhi.n	800585e <UART_SetConfig+0x44a>
 800580c:	a201      	add	r2, pc, #4	@ (adr r2, 8005814 <UART_SetConfig+0x400>)
 800580e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005812:	bf00      	nop
 8005814:	08005839 	.word	0x08005839
 8005818:	08005841 	.word	0x08005841
 800581c:	08005849 	.word	0x08005849
 8005820:	0800585f 	.word	0x0800585f
 8005824:	0800584f 	.word	0x0800584f
 8005828:	0800585f 	.word	0x0800585f
 800582c:	0800585f 	.word	0x0800585f
 8005830:	0800585f 	.word	0x0800585f
 8005834:	08005857 	.word	0x08005857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005838:	f7fd fda0 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 800583c:	61f8      	str	r0, [r7, #28]
        break;
 800583e:	e014      	b.n	800586a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005840:	f7fd fdb2 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8005844:	61f8      	str	r0, [r7, #28]
        break;
 8005846:	e010      	b.n	800586a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005848:	4b4d      	ldr	r3, [pc, #308]	@ (8005980 <UART_SetConfig+0x56c>)
 800584a:	61fb      	str	r3, [r7, #28]
        break;
 800584c:	e00d      	b.n	800586a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800584e:	f7fd fcfd 	bl	800324c <HAL_RCC_GetSysClockFreq>
 8005852:	61f8      	str	r0, [r7, #28]
        break;
 8005854:	e009      	b.n	800586a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800585a:	61fb      	str	r3, [r7, #28]
        break;
 800585c:	e005      	b.n	800586a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800585e:	2300      	movs	r3, #0
 8005860:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005862:	2301      	movs	r3, #1
 8005864:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800586a:	69fb      	ldr	r3, [r7, #28]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d077      	beq.n	8005960 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	005a      	lsls	r2, r3, #1
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	441a      	add	r2, r3
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	fbb2 f3f3 	udiv	r3, r2, r3
 8005884:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	2b0f      	cmp	r3, #15
 800588a:	d916      	bls.n	80058ba <UART_SetConfig+0x4a6>
 800588c:	69bb      	ldr	r3, [r7, #24]
 800588e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005892:	d212      	bcs.n	80058ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005894:	69bb      	ldr	r3, [r7, #24]
 8005896:	b29b      	uxth	r3, r3
 8005898:	f023 030f 	bic.w	r3, r3, #15
 800589c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800589e:	69bb      	ldr	r3, [r7, #24]
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	b29b      	uxth	r3, r3
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	b29a      	uxth	r2, r3
 80058aa:	8afb      	ldrh	r3, [r7, #22]
 80058ac:	4313      	orrs	r3, r2
 80058ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	8afa      	ldrh	r2, [r7, #22]
 80058b6:	60da      	str	r2, [r3, #12]
 80058b8:	e052      	b.n	8005960 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80058c0:	e04e      	b.n	8005960 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80058c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80058c6:	2b08      	cmp	r3, #8
 80058c8:	d827      	bhi.n	800591a <UART_SetConfig+0x506>
 80058ca:	a201      	add	r2, pc, #4	@ (adr r2, 80058d0 <UART_SetConfig+0x4bc>)
 80058cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058d0:	080058f5 	.word	0x080058f5
 80058d4:	080058fd 	.word	0x080058fd
 80058d8:	08005905 	.word	0x08005905
 80058dc:	0800591b 	.word	0x0800591b
 80058e0:	0800590b 	.word	0x0800590b
 80058e4:	0800591b 	.word	0x0800591b
 80058e8:	0800591b 	.word	0x0800591b
 80058ec:	0800591b 	.word	0x0800591b
 80058f0:	08005913 	.word	0x08005913
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058f4:	f7fd fd42 	bl	800337c <HAL_RCC_GetPCLK1Freq>
 80058f8:	61f8      	str	r0, [r7, #28]
        break;
 80058fa:	e014      	b.n	8005926 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058fc:	f7fd fd54 	bl	80033a8 <HAL_RCC_GetPCLK2Freq>
 8005900:	61f8      	str	r0, [r7, #28]
        break;
 8005902:	e010      	b.n	8005926 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005904:	4b1e      	ldr	r3, [pc, #120]	@ (8005980 <UART_SetConfig+0x56c>)
 8005906:	61fb      	str	r3, [r7, #28]
        break;
 8005908:	e00d      	b.n	8005926 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800590a:	f7fd fc9f 	bl	800324c <HAL_RCC_GetSysClockFreq>
 800590e:	61f8      	str	r0, [r7, #28]
        break;
 8005910:	e009      	b.n	8005926 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005912:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005916:	61fb      	str	r3, [r7, #28]
        break;
 8005918:	e005      	b.n	8005926 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800591a:	2300      	movs	r3, #0
 800591c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005924:	bf00      	nop
    }

    if (pclk != 0U)
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d019      	beq.n	8005960 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	085a      	lsrs	r2, r3, #1
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	441a      	add	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	fbb2 f3f3 	udiv	r3, r2, r3
 800593e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	2b0f      	cmp	r3, #15
 8005944:	d909      	bls.n	800595a <UART_SetConfig+0x546>
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800594c:	d205      	bcs.n	800595a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	60da      	str	r2, [r3, #12]
 8005958:	e002      	b.n	8005960 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800595a:	2301      	movs	r3, #1
 800595c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	2200      	movs	r2, #0
 800596a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800596c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005970:	4618      	mov	r0, r3
 8005972:	3728      	adds	r7, #40	@ 0x28
 8005974:	46bd      	mov	sp, r7
 8005976:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800597a:	bf00      	nop
 800597c:	40008000 	.word	0x40008000
 8005980:	00f42400 	.word	0x00f42400

08005984 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005984:	b480      	push	{r7}
 8005986:	b083      	sub	sp, #12
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	430a      	orrs	r2, r1
 80059ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059b2:	f003 0301 	and.w	r3, r3, #1
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	430a      	orrs	r2, r1
 80059ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d4:	f003 0302 	and.w	r3, r3, #2
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	430a      	orrs	r2, r1
 80059f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f6:	f003 0304 	and.w	r3, r3, #4
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	430a      	orrs	r2, r1
 8005a12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	430a      	orrs	r2, r1
 8005a56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d01a      	beq.n	8005a9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	430a      	orrs	r2, r1
 8005a78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005a82:	d10a      	bne.n	8005a9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	685b      	ldr	r3, [r3, #4]
 8005aac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	430a      	orrs	r2, r1
 8005aba:	605a      	str	r2, [r3, #4]
  }
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b098      	sub	sp, #96	@ 0x60
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005ad8:	f7fc f8e0 	bl	8001c9c <HAL_GetTick>
 8005adc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d12e      	bne.n	8005b4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005aec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005af4:	2200      	movs	r2, #0
 8005af6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f000 f88c 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d021      	beq.n	8005b4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0e:	e853 3f00 	ldrex	r3, [r3]
 8005b12:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005b14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005b1a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005b24:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b26:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b28:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005b2a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b2c:	e841 2300 	strex	r3, r2, [r1]
 8005b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005b32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1e6      	bne.n	8005b06 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2220      	movs	r2, #32
 8005b3c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2200      	movs	r2, #0
 8005b42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e062      	b.n	8005c10 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f003 0304 	and.w	r3, r3, #4
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d149      	bne.n	8005bec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b58:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005b5c:	9300      	str	r3, [sp, #0]
 8005b5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b60:	2200      	movs	r2, #0
 8005b62:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f856 	bl	8005c18 <UART_WaitOnFlagUntilTimeout>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d03c      	beq.n	8005bec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7a:	e853 3f00 	ldrex	r3, [r3]
 8005b7e:	623b      	str	r3, [r7, #32]
   return(result);
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b92:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b98:	e841 2300 	strex	r3, r2, [r1]
 8005b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d1e6      	bne.n	8005b72 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	3308      	adds	r3, #8
 8005baa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f023 0301 	bic.w	r3, r3, #1
 8005bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3308      	adds	r3, #8
 8005bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bc4:	61fa      	str	r2, [r7, #28]
 8005bc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc8:	69b9      	ldr	r1, [r7, #24]
 8005bca:	69fa      	ldr	r2, [r7, #28]
 8005bcc:	e841 2300 	strex	r3, r2, [r1]
 8005bd0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1e5      	bne.n	8005ba4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2200      	movs	r2, #0
 8005be4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005be8:	2303      	movs	r3, #3
 8005bea:	e011      	b.n	8005c10 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005c0e:	2300      	movs	r3, #0
}
 8005c10:	4618      	mov	r0, r3
 8005c12:	3758      	adds	r7, #88	@ 0x58
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	603b      	str	r3, [r7, #0]
 8005c24:	4613      	mov	r3, r2
 8005c26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c28:	e04f      	b.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c30:	d04b      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c32:	f7fc f833 	bl	8001c9c <HAL_GetTick>
 8005c36:	4602      	mov	r2, r0
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	69ba      	ldr	r2, [r7, #24]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d302      	bcc.n	8005c48 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d101      	bne.n	8005c4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	e04e      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0304 	and.w	r3, r3, #4
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d037      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	2b80      	cmp	r3, #128	@ 0x80
 8005c5e:	d034      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b40      	cmp	r3, #64	@ 0x40
 8005c64:	d031      	beq.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69db      	ldr	r3, [r3, #28]
 8005c6c:	f003 0308 	and.w	r3, r3, #8
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d110      	bne.n	8005c96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	2208      	movs	r2, #8
 8005c7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f838 	bl	8005cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2208      	movs	r2, #8
 8005c86:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e029      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ca0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ca4:	d111      	bne.n	8005cca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cb0:	68f8      	ldr	r0, [r7, #12]
 8005cb2:	f000 f81e 	bl	8005cf2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2220      	movs	r2, #32
 8005cba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005cc6:	2303      	movs	r3, #3
 8005cc8:	e00f      	b.n	8005cea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	69da      	ldr	r2, [r3, #28]
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	bf0c      	ite	eq
 8005cda:	2301      	moveq	r3, #1
 8005cdc:	2300      	movne	r3, #0
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	79fb      	ldrb	r3, [r7, #7]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d0a0      	beq.n	8005c2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3710      	adds	r7, #16
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}

08005cf2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005cf2:	b480      	push	{r7}
 8005cf4:	b095      	sub	sp, #84	@ 0x54
 8005cf6:	af00      	add	r7, sp, #0
 8005cf8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d02:	e853 3f00 	ldrex	r3, [r3]
 8005d06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	461a      	mov	r2, r3
 8005d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d18:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e6      	bne.n	8005cfa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	6a3b      	ldr	r3, [r7, #32]
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d3c:	69fb      	ldr	r3, [r7, #28]
 8005d3e:	f023 0301 	bic.w	r3, r3, #1
 8005d42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3308      	adds	r3, #8
 8005d4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d54:	e841 2300 	strex	r3, r2, [r1]
 8005d58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1e5      	bne.n	8005d2c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d118      	bne.n	8005d9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	e853 3f00 	ldrex	r3, [r3]
 8005d74:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	f023 0310 	bic.w	r3, r3, #16
 8005d7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	461a      	mov	r2, r3
 8005d84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d86:	61bb      	str	r3, [r7, #24]
 8005d88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8a:	6979      	ldr	r1, [r7, #20]
 8005d8c:	69ba      	ldr	r2, [r7, #24]
 8005d8e:	e841 2300 	strex	r3, r2, [r1]
 8005d92:	613b      	str	r3, [r7, #16]
   return(result);
 8005d94:	693b      	ldr	r3, [r7, #16]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1e6      	bne.n	8005d68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	2220      	movs	r2, #32
 8005d9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005dae:	bf00      	nop
 8005db0:	3754      	adds	r7, #84	@ 0x54
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <__cvt>:
 8005dba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dbe:	ec57 6b10 	vmov	r6, r7, d0
 8005dc2:	2f00      	cmp	r7, #0
 8005dc4:	460c      	mov	r4, r1
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	463b      	mov	r3, r7
 8005dca:	bfbb      	ittet	lt
 8005dcc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005dd0:	461f      	movlt	r7, r3
 8005dd2:	2300      	movge	r3, #0
 8005dd4:	232d      	movlt	r3, #45	@ 0x2d
 8005dd6:	700b      	strb	r3, [r1, #0]
 8005dd8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005dda:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005dde:	4691      	mov	r9, r2
 8005de0:	f023 0820 	bic.w	r8, r3, #32
 8005de4:	bfbc      	itt	lt
 8005de6:	4632      	movlt	r2, r6
 8005de8:	4616      	movlt	r6, r2
 8005dea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005dee:	d005      	beq.n	8005dfc <__cvt+0x42>
 8005df0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005df4:	d100      	bne.n	8005df8 <__cvt+0x3e>
 8005df6:	3401      	adds	r4, #1
 8005df8:	2102      	movs	r1, #2
 8005dfa:	e000      	b.n	8005dfe <__cvt+0x44>
 8005dfc:	2103      	movs	r1, #3
 8005dfe:	ab03      	add	r3, sp, #12
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	ab02      	add	r3, sp, #8
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	ec47 6b10 	vmov	d0, r6, r7
 8005e0a:	4653      	mov	r3, sl
 8005e0c:	4622      	mov	r2, r4
 8005e0e:	f000 fe6f 	bl	8006af0 <_dtoa_r>
 8005e12:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005e16:	4605      	mov	r5, r0
 8005e18:	d119      	bne.n	8005e4e <__cvt+0x94>
 8005e1a:	f019 0f01 	tst.w	r9, #1
 8005e1e:	d00e      	beq.n	8005e3e <__cvt+0x84>
 8005e20:	eb00 0904 	add.w	r9, r0, r4
 8005e24:	2200      	movs	r2, #0
 8005e26:	2300      	movs	r3, #0
 8005e28:	4630      	mov	r0, r6
 8005e2a:	4639      	mov	r1, r7
 8005e2c:	f7fa fe4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e30:	b108      	cbz	r0, 8005e36 <__cvt+0x7c>
 8005e32:	f8cd 900c 	str.w	r9, [sp, #12]
 8005e36:	2230      	movs	r2, #48	@ 0x30
 8005e38:	9b03      	ldr	r3, [sp, #12]
 8005e3a:	454b      	cmp	r3, r9
 8005e3c:	d31e      	bcc.n	8005e7c <__cvt+0xc2>
 8005e3e:	9b03      	ldr	r3, [sp, #12]
 8005e40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005e42:	1b5b      	subs	r3, r3, r5
 8005e44:	4628      	mov	r0, r5
 8005e46:	6013      	str	r3, [r2, #0]
 8005e48:	b004      	add	sp, #16
 8005e4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e4e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005e52:	eb00 0904 	add.w	r9, r0, r4
 8005e56:	d1e5      	bne.n	8005e24 <__cvt+0x6a>
 8005e58:	7803      	ldrb	r3, [r0, #0]
 8005e5a:	2b30      	cmp	r3, #48	@ 0x30
 8005e5c:	d10a      	bne.n	8005e74 <__cvt+0xba>
 8005e5e:	2200      	movs	r2, #0
 8005e60:	2300      	movs	r3, #0
 8005e62:	4630      	mov	r0, r6
 8005e64:	4639      	mov	r1, r7
 8005e66:	f7fa fe2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e6a:	b918      	cbnz	r0, 8005e74 <__cvt+0xba>
 8005e6c:	f1c4 0401 	rsb	r4, r4, #1
 8005e70:	f8ca 4000 	str.w	r4, [sl]
 8005e74:	f8da 3000 	ldr.w	r3, [sl]
 8005e78:	4499      	add	r9, r3
 8005e7a:	e7d3      	b.n	8005e24 <__cvt+0x6a>
 8005e7c:	1c59      	adds	r1, r3, #1
 8005e7e:	9103      	str	r1, [sp, #12]
 8005e80:	701a      	strb	r2, [r3, #0]
 8005e82:	e7d9      	b.n	8005e38 <__cvt+0x7e>

08005e84 <__exponent>:
 8005e84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e86:	2900      	cmp	r1, #0
 8005e88:	bfba      	itte	lt
 8005e8a:	4249      	neglt	r1, r1
 8005e8c:	232d      	movlt	r3, #45	@ 0x2d
 8005e8e:	232b      	movge	r3, #43	@ 0x2b
 8005e90:	2909      	cmp	r1, #9
 8005e92:	7002      	strb	r2, [r0, #0]
 8005e94:	7043      	strb	r3, [r0, #1]
 8005e96:	dd29      	ble.n	8005eec <__exponent+0x68>
 8005e98:	f10d 0307 	add.w	r3, sp, #7
 8005e9c:	461d      	mov	r5, r3
 8005e9e:	270a      	movs	r7, #10
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	fbb1 f6f7 	udiv	r6, r1, r7
 8005ea6:	fb07 1416 	mls	r4, r7, r6, r1
 8005eaa:	3430      	adds	r4, #48	@ 0x30
 8005eac:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005eb0:	460c      	mov	r4, r1
 8005eb2:	2c63      	cmp	r4, #99	@ 0x63
 8005eb4:	f103 33ff 	add.w	r3, r3, #4294967295
 8005eb8:	4631      	mov	r1, r6
 8005eba:	dcf1      	bgt.n	8005ea0 <__exponent+0x1c>
 8005ebc:	3130      	adds	r1, #48	@ 0x30
 8005ebe:	1e94      	subs	r4, r2, #2
 8005ec0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005ec4:	1c41      	adds	r1, r0, #1
 8005ec6:	4623      	mov	r3, r4
 8005ec8:	42ab      	cmp	r3, r5
 8005eca:	d30a      	bcc.n	8005ee2 <__exponent+0x5e>
 8005ecc:	f10d 0309 	add.w	r3, sp, #9
 8005ed0:	1a9b      	subs	r3, r3, r2
 8005ed2:	42ac      	cmp	r4, r5
 8005ed4:	bf88      	it	hi
 8005ed6:	2300      	movhi	r3, #0
 8005ed8:	3302      	adds	r3, #2
 8005eda:	4403      	add	r3, r0
 8005edc:	1a18      	subs	r0, r3, r0
 8005ede:	b003      	add	sp, #12
 8005ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ee2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ee6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005eea:	e7ed      	b.n	8005ec8 <__exponent+0x44>
 8005eec:	2330      	movs	r3, #48	@ 0x30
 8005eee:	3130      	adds	r1, #48	@ 0x30
 8005ef0:	7083      	strb	r3, [r0, #2]
 8005ef2:	70c1      	strb	r1, [r0, #3]
 8005ef4:	1d03      	adds	r3, r0, #4
 8005ef6:	e7f1      	b.n	8005edc <__exponent+0x58>

08005ef8 <_printf_float>:
 8005ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efc:	b08d      	sub	sp, #52	@ 0x34
 8005efe:	460c      	mov	r4, r1
 8005f00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005f04:	4616      	mov	r6, r2
 8005f06:	461f      	mov	r7, r3
 8005f08:	4605      	mov	r5, r0
 8005f0a:	f000 fcef 	bl	80068ec <_localeconv_r>
 8005f0e:	6803      	ldr	r3, [r0, #0]
 8005f10:	9304      	str	r3, [sp, #16]
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fa f9ac 	bl	8000270 <strlen>
 8005f18:	2300      	movs	r3, #0
 8005f1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8005f20:	9005      	str	r0, [sp, #20]
 8005f22:	3307      	adds	r3, #7
 8005f24:	f023 0307 	bic.w	r3, r3, #7
 8005f28:	f103 0208 	add.w	r2, r3, #8
 8005f2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005f30:	f8d4 b000 	ldr.w	fp, [r4]
 8005f34:	f8c8 2000 	str.w	r2, [r8]
 8005f38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005f3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005f40:	9307      	str	r3, [sp, #28]
 8005f42:	f8cd 8018 	str.w	r8, [sp, #24]
 8005f46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005f4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f4e:	4b9c      	ldr	r3, [pc, #624]	@ (80061c0 <_printf_float+0x2c8>)
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295
 8005f54:	f7fa fdea 	bl	8000b2c <__aeabi_dcmpun>
 8005f58:	bb70      	cbnz	r0, 8005fb8 <_printf_float+0xc0>
 8005f5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005f5e:	4b98      	ldr	r3, [pc, #608]	@ (80061c0 <_printf_float+0x2c8>)
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295
 8005f64:	f7fa fdc4 	bl	8000af0 <__aeabi_dcmple>
 8005f68:	bb30      	cbnz	r0, 8005fb8 <_printf_float+0xc0>
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	4640      	mov	r0, r8
 8005f70:	4649      	mov	r1, r9
 8005f72:	f7fa fdb3 	bl	8000adc <__aeabi_dcmplt>
 8005f76:	b110      	cbz	r0, 8005f7e <_printf_float+0x86>
 8005f78:	232d      	movs	r3, #45	@ 0x2d
 8005f7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f7e:	4a91      	ldr	r2, [pc, #580]	@ (80061c4 <_printf_float+0x2cc>)
 8005f80:	4b91      	ldr	r3, [pc, #580]	@ (80061c8 <_printf_float+0x2d0>)
 8005f82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005f86:	bf8c      	ite	hi
 8005f88:	4690      	movhi	r8, r2
 8005f8a:	4698      	movls	r8, r3
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	6123      	str	r3, [r4, #16]
 8005f90:	f02b 0304 	bic.w	r3, fp, #4
 8005f94:	6023      	str	r3, [r4, #0]
 8005f96:	f04f 0900 	mov.w	r9, #0
 8005f9a:	9700      	str	r7, [sp, #0]
 8005f9c:	4633      	mov	r3, r6
 8005f9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	4628      	mov	r0, r5
 8005fa4:	f000 f9d2 	bl	800634c <_printf_common>
 8005fa8:	3001      	adds	r0, #1
 8005faa:	f040 808d 	bne.w	80060c8 <_printf_float+0x1d0>
 8005fae:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb2:	b00d      	add	sp, #52	@ 0x34
 8005fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fb8:	4642      	mov	r2, r8
 8005fba:	464b      	mov	r3, r9
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	f7fa fdb4 	bl	8000b2c <__aeabi_dcmpun>
 8005fc4:	b140      	cbz	r0, 8005fd8 <_printf_float+0xe0>
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	bfbc      	itt	lt
 8005fcc:	232d      	movlt	r3, #45	@ 0x2d
 8005fce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005fd2:	4a7e      	ldr	r2, [pc, #504]	@ (80061cc <_printf_float+0x2d4>)
 8005fd4:	4b7e      	ldr	r3, [pc, #504]	@ (80061d0 <_printf_float+0x2d8>)
 8005fd6:	e7d4      	b.n	8005f82 <_printf_float+0x8a>
 8005fd8:	6863      	ldr	r3, [r4, #4]
 8005fda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005fde:	9206      	str	r2, [sp, #24]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	d13b      	bne.n	800605c <_printf_float+0x164>
 8005fe4:	2306      	movs	r3, #6
 8005fe6:	6063      	str	r3, [r4, #4]
 8005fe8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005fec:	2300      	movs	r3, #0
 8005fee:	6022      	str	r2, [r4, #0]
 8005ff0:	9303      	str	r3, [sp, #12]
 8005ff2:	ab0a      	add	r3, sp, #40	@ 0x28
 8005ff4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005ff8:	ab09      	add	r3, sp, #36	@ 0x24
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	6861      	ldr	r1, [r4, #4]
 8005ffe:	ec49 8b10 	vmov	d0, r8, r9
 8006002:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006006:	4628      	mov	r0, r5
 8006008:	f7ff fed7 	bl	8005dba <__cvt>
 800600c:	9b06      	ldr	r3, [sp, #24]
 800600e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006010:	2b47      	cmp	r3, #71	@ 0x47
 8006012:	4680      	mov	r8, r0
 8006014:	d129      	bne.n	800606a <_printf_float+0x172>
 8006016:	1cc8      	adds	r0, r1, #3
 8006018:	db02      	blt.n	8006020 <_printf_float+0x128>
 800601a:	6863      	ldr	r3, [r4, #4]
 800601c:	4299      	cmp	r1, r3
 800601e:	dd41      	ble.n	80060a4 <_printf_float+0x1ac>
 8006020:	f1aa 0a02 	sub.w	sl, sl, #2
 8006024:	fa5f fa8a 	uxtb.w	sl, sl
 8006028:	3901      	subs	r1, #1
 800602a:	4652      	mov	r2, sl
 800602c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006030:	9109      	str	r1, [sp, #36]	@ 0x24
 8006032:	f7ff ff27 	bl	8005e84 <__exponent>
 8006036:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006038:	1813      	adds	r3, r2, r0
 800603a:	2a01      	cmp	r2, #1
 800603c:	4681      	mov	r9, r0
 800603e:	6123      	str	r3, [r4, #16]
 8006040:	dc02      	bgt.n	8006048 <_printf_float+0x150>
 8006042:	6822      	ldr	r2, [r4, #0]
 8006044:	07d2      	lsls	r2, r2, #31
 8006046:	d501      	bpl.n	800604c <_printf_float+0x154>
 8006048:	3301      	adds	r3, #1
 800604a:	6123      	str	r3, [r4, #16]
 800604c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006050:	2b00      	cmp	r3, #0
 8006052:	d0a2      	beq.n	8005f9a <_printf_float+0xa2>
 8006054:	232d      	movs	r3, #45	@ 0x2d
 8006056:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800605a:	e79e      	b.n	8005f9a <_printf_float+0xa2>
 800605c:	9a06      	ldr	r2, [sp, #24]
 800605e:	2a47      	cmp	r2, #71	@ 0x47
 8006060:	d1c2      	bne.n	8005fe8 <_printf_float+0xf0>
 8006062:	2b00      	cmp	r3, #0
 8006064:	d1c0      	bne.n	8005fe8 <_printf_float+0xf0>
 8006066:	2301      	movs	r3, #1
 8006068:	e7bd      	b.n	8005fe6 <_printf_float+0xee>
 800606a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800606e:	d9db      	bls.n	8006028 <_printf_float+0x130>
 8006070:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006074:	d118      	bne.n	80060a8 <_printf_float+0x1b0>
 8006076:	2900      	cmp	r1, #0
 8006078:	6863      	ldr	r3, [r4, #4]
 800607a:	dd0b      	ble.n	8006094 <_printf_float+0x19c>
 800607c:	6121      	str	r1, [r4, #16]
 800607e:	b913      	cbnz	r3, 8006086 <_printf_float+0x18e>
 8006080:	6822      	ldr	r2, [r4, #0]
 8006082:	07d0      	lsls	r0, r2, #31
 8006084:	d502      	bpl.n	800608c <_printf_float+0x194>
 8006086:	3301      	adds	r3, #1
 8006088:	440b      	add	r3, r1
 800608a:	6123      	str	r3, [r4, #16]
 800608c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800608e:	f04f 0900 	mov.w	r9, #0
 8006092:	e7db      	b.n	800604c <_printf_float+0x154>
 8006094:	b913      	cbnz	r3, 800609c <_printf_float+0x1a4>
 8006096:	6822      	ldr	r2, [r4, #0]
 8006098:	07d2      	lsls	r2, r2, #31
 800609a:	d501      	bpl.n	80060a0 <_printf_float+0x1a8>
 800609c:	3302      	adds	r3, #2
 800609e:	e7f4      	b.n	800608a <_printf_float+0x192>
 80060a0:	2301      	movs	r3, #1
 80060a2:	e7f2      	b.n	800608a <_printf_float+0x192>
 80060a4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80060a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060aa:	4299      	cmp	r1, r3
 80060ac:	db05      	blt.n	80060ba <_printf_float+0x1c2>
 80060ae:	6823      	ldr	r3, [r4, #0]
 80060b0:	6121      	str	r1, [r4, #16]
 80060b2:	07d8      	lsls	r0, r3, #31
 80060b4:	d5ea      	bpl.n	800608c <_printf_float+0x194>
 80060b6:	1c4b      	adds	r3, r1, #1
 80060b8:	e7e7      	b.n	800608a <_printf_float+0x192>
 80060ba:	2900      	cmp	r1, #0
 80060bc:	bfd4      	ite	le
 80060be:	f1c1 0202 	rsble	r2, r1, #2
 80060c2:	2201      	movgt	r2, #1
 80060c4:	4413      	add	r3, r2
 80060c6:	e7e0      	b.n	800608a <_printf_float+0x192>
 80060c8:	6823      	ldr	r3, [r4, #0]
 80060ca:	055a      	lsls	r2, r3, #21
 80060cc:	d407      	bmi.n	80060de <_printf_float+0x1e6>
 80060ce:	6923      	ldr	r3, [r4, #16]
 80060d0:	4642      	mov	r2, r8
 80060d2:	4631      	mov	r1, r6
 80060d4:	4628      	mov	r0, r5
 80060d6:	47b8      	blx	r7
 80060d8:	3001      	adds	r0, #1
 80060da:	d12b      	bne.n	8006134 <_printf_float+0x23c>
 80060dc:	e767      	b.n	8005fae <_printf_float+0xb6>
 80060de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80060e2:	f240 80dd 	bls.w	80062a0 <_printf_float+0x3a8>
 80060e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80060ea:	2200      	movs	r2, #0
 80060ec:	2300      	movs	r3, #0
 80060ee:	f7fa fceb 	bl	8000ac8 <__aeabi_dcmpeq>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d033      	beq.n	800615e <_printf_float+0x266>
 80060f6:	4a37      	ldr	r2, [pc, #220]	@ (80061d4 <_printf_float+0x2dc>)
 80060f8:	2301      	movs	r3, #1
 80060fa:	4631      	mov	r1, r6
 80060fc:	4628      	mov	r0, r5
 80060fe:	47b8      	blx	r7
 8006100:	3001      	adds	r0, #1
 8006102:	f43f af54 	beq.w	8005fae <_printf_float+0xb6>
 8006106:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800610a:	4543      	cmp	r3, r8
 800610c:	db02      	blt.n	8006114 <_printf_float+0x21c>
 800610e:	6823      	ldr	r3, [r4, #0]
 8006110:	07d8      	lsls	r0, r3, #31
 8006112:	d50f      	bpl.n	8006134 <_printf_float+0x23c>
 8006114:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006118:	4631      	mov	r1, r6
 800611a:	4628      	mov	r0, r5
 800611c:	47b8      	blx	r7
 800611e:	3001      	adds	r0, #1
 8006120:	f43f af45 	beq.w	8005fae <_printf_float+0xb6>
 8006124:	f04f 0900 	mov.w	r9, #0
 8006128:	f108 38ff 	add.w	r8, r8, #4294967295
 800612c:	f104 0a1a 	add.w	sl, r4, #26
 8006130:	45c8      	cmp	r8, r9
 8006132:	dc09      	bgt.n	8006148 <_printf_float+0x250>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	079b      	lsls	r3, r3, #30
 8006138:	f100 8103 	bmi.w	8006342 <_printf_float+0x44a>
 800613c:	68e0      	ldr	r0, [r4, #12]
 800613e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006140:	4298      	cmp	r0, r3
 8006142:	bfb8      	it	lt
 8006144:	4618      	movlt	r0, r3
 8006146:	e734      	b.n	8005fb2 <_printf_float+0xba>
 8006148:	2301      	movs	r3, #1
 800614a:	4652      	mov	r2, sl
 800614c:	4631      	mov	r1, r6
 800614e:	4628      	mov	r0, r5
 8006150:	47b8      	blx	r7
 8006152:	3001      	adds	r0, #1
 8006154:	f43f af2b 	beq.w	8005fae <_printf_float+0xb6>
 8006158:	f109 0901 	add.w	r9, r9, #1
 800615c:	e7e8      	b.n	8006130 <_printf_float+0x238>
 800615e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006160:	2b00      	cmp	r3, #0
 8006162:	dc39      	bgt.n	80061d8 <_printf_float+0x2e0>
 8006164:	4a1b      	ldr	r2, [pc, #108]	@ (80061d4 <_printf_float+0x2dc>)
 8006166:	2301      	movs	r3, #1
 8006168:	4631      	mov	r1, r6
 800616a:	4628      	mov	r0, r5
 800616c:	47b8      	blx	r7
 800616e:	3001      	adds	r0, #1
 8006170:	f43f af1d 	beq.w	8005fae <_printf_float+0xb6>
 8006174:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006178:	ea59 0303 	orrs.w	r3, r9, r3
 800617c:	d102      	bne.n	8006184 <_printf_float+0x28c>
 800617e:	6823      	ldr	r3, [r4, #0]
 8006180:	07d9      	lsls	r1, r3, #31
 8006182:	d5d7      	bpl.n	8006134 <_printf_float+0x23c>
 8006184:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006188:	4631      	mov	r1, r6
 800618a:	4628      	mov	r0, r5
 800618c:	47b8      	blx	r7
 800618e:	3001      	adds	r0, #1
 8006190:	f43f af0d 	beq.w	8005fae <_printf_float+0xb6>
 8006194:	f04f 0a00 	mov.w	sl, #0
 8006198:	f104 0b1a 	add.w	fp, r4, #26
 800619c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800619e:	425b      	negs	r3, r3
 80061a0:	4553      	cmp	r3, sl
 80061a2:	dc01      	bgt.n	80061a8 <_printf_float+0x2b0>
 80061a4:	464b      	mov	r3, r9
 80061a6:	e793      	b.n	80060d0 <_printf_float+0x1d8>
 80061a8:	2301      	movs	r3, #1
 80061aa:	465a      	mov	r2, fp
 80061ac:	4631      	mov	r1, r6
 80061ae:	4628      	mov	r0, r5
 80061b0:	47b8      	blx	r7
 80061b2:	3001      	adds	r0, #1
 80061b4:	f43f aefb 	beq.w	8005fae <_printf_float+0xb6>
 80061b8:	f10a 0a01 	add.w	sl, sl, #1
 80061bc:	e7ee      	b.n	800619c <_printf_float+0x2a4>
 80061be:	bf00      	nop
 80061c0:	7fefffff 	.word	0x7fefffff
 80061c4:	08008b7c 	.word	0x08008b7c
 80061c8:	08008b78 	.word	0x08008b78
 80061cc:	08008b84 	.word	0x08008b84
 80061d0:	08008b80 	.word	0x08008b80
 80061d4:	08008b88 	.word	0x08008b88
 80061d8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061da:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80061de:	4553      	cmp	r3, sl
 80061e0:	bfa8      	it	ge
 80061e2:	4653      	movge	r3, sl
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	4699      	mov	r9, r3
 80061e8:	dc36      	bgt.n	8006258 <_printf_float+0x360>
 80061ea:	f04f 0b00 	mov.w	fp, #0
 80061ee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80061f2:	f104 021a 	add.w	r2, r4, #26
 80061f6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80061f8:	9306      	str	r3, [sp, #24]
 80061fa:	eba3 0309 	sub.w	r3, r3, r9
 80061fe:	455b      	cmp	r3, fp
 8006200:	dc31      	bgt.n	8006266 <_printf_float+0x36e>
 8006202:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006204:	459a      	cmp	sl, r3
 8006206:	dc3a      	bgt.n	800627e <_printf_float+0x386>
 8006208:	6823      	ldr	r3, [r4, #0]
 800620a:	07da      	lsls	r2, r3, #31
 800620c:	d437      	bmi.n	800627e <_printf_float+0x386>
 800620e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006210:	ebaa 0903 	sub.w	r9, sl, r3
 8006214:	9b06      	ldr	r3, [sp, #24]
 8006216:	ebaa 0303 	sub.w	r3, sl, r3
 800621a:	4599      	cmp	r9, r3
 800621c:	bfa8      	it	ge
 800621e:	4699      	movge	r9, r3
 8006220:	f1b9 0f00 	cmp.w	r9, #0
 8006224:	dc33      	bgt.n	800628e <_printf_float+0x396>
 8006226:	f04f 0800 	mov.w	r8, #0
 800622a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800622e:	f104 0b1a 	add.w	fp, r4, #26
 8006232:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006234:	ebaa 0303 	sub.w	r3, sl, r3
 8006238:	eba3 0309 	sub.w	r3, r3, r9
 800623c:	4543      	cmp	r3, r8
 800623e:	f77f af79 	ble.w	8006134 <_printf_float+0x23c>
 8006242:	2301      	movs	r3, #1
 8006244:	465a      	mov	r2, fp
 8006246:	4631      	mov	r1, r6
 8006248:	4628      	mov	r0, r5
 800624a:	47b8      	blx	r7
 800624c:	3001      	adds	r0, #1
 800624e:	f43f aeae 	beq.w	8005fae <_printf_float+0xb6>
 8006252:	f108 0801 	add.w	r8, r8, #1
 8006256:	e7ec      	b.n	8006232 <_printf_float+0x33a>
 8006258:	4642      	mov	r2, r8
 800625a:	4631      	mov	r1, r6
 800625c:	4628      	mov	r0, r5
 800625e:	47b8      	blx	r7
 8006260:	3001      	adds	r0, #1
 8006262:	d1c2      	bne.n	80061ea <_printf_float+0x2f2>
 8006264:	e6a3      	b.n	8005fae <_printf_float+0xb6>
 8006266:	2301      	movs	r3, #1
 8006268:	4631      	mov	r1, r6
 800626a:	4628      	mov	r0, r5
 800626c:	9206      	str	r2, [sp, #24]
 800626e:	47b8      	blx	r7
 8006270:	3001      	adds	r0, #1
 8006272:	f43f ae9c 	beq.w	8005fae <_printf_float+0xb6>
 8006276:	9a06      	ldr	r2, [sp, #24]
 8006278:	f10b 0b01 	add.w	fp, fp, #1
 800627c:	e7bb      	b.n	80061f6 <_printf_float+0x2fe>
 800627e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006282:	4631      	mov	r1, r6
 8006284:	4628      	mov	r0, r5
 8006286:	47b8      	blx	r7
 8006288:	3001      	adds	r0, #1
 800628a:	d1c0      	bne.n	800620e <_printf_float+0x316>
 800628c:	e68f      	b.n	8005fae <_printf_float+0xb6>
 800628e:	9a06      	ldr	r2, [sp, #24]
 8006290:	464b      	mov	r3, r9
 8006292:	4442      	add	r2, r8
 8006294:	4631      	mov	r1, r6
 8006296:	4628      	mov	r0, r5
 8006298:	47b8      	blx	r7
 800629a:	3001      	adds	r0, #1
 800629c:	d1c3      	bne.n	8006226 <_printf_float+0x32e>
 800629e:	e686      	b.n	8005fae <_printf_float+0xb6>
 80062a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80062a4:	f1ba 0f01 	cmp.w	sl, #1
 80062a8:	dc01      	bgt.n	80062ae <_printf_float+0x3b6>
 80062aa:	07db      	lsls	r3, r3, #31
 80062ac:	d536      	bpl.n	800631c <_printf_float+0x424>
 80062ae:	2301      	movs	r3, #1
 80062b0:	4642      	mov	r2, r8
 80062b2:	4631      	mov	r1, r6
 80062b4:	4628      	mov	r0, r5
 80062b6:	47b8      	blx	r7
 80062b8:	3001      	adds	r0, #1
 80062ba:	f43f ae78 	beq.w	8005fae <_printf_float+0xb6>
 80062be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062c2:	4631      	mov	r1, r6
 80062c4:	4628      	mov	r0, r5
 80062c6:	47b8      	blx	r7
 80062c8:	3001      	adds	r0, #1
 80062ca:	f43f ae70 	beq.w	8005fae <_printf_float+0xb6>
 80062ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80062d2:	2200      	movs	r2, #0
 80062d4:	2300      	movs	r3, #0
 80062d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80062da:	f7fa fbf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80062de:	b9c0      	cbnz	r0, 8006312 <_printf_float+0x41a>
 80062e0:	4653      	mov	r3, sl
 80062e2:	f108 0201 	add.w	r2, r8, #1
 80062e6:	4631      	mov	r1, r6
 80062e8:	4628      	mov	r0, r5
 80062ea:	47b8      	blx	r7
 80062ec:	3001      	adds	r0, #1
 80062ee:	d10c      	bne.n	800630a <_printf_float+0x412>
 80062f0:	e65d      	b.n	8005fae <_printf_float+0xb6>
 80062f2:	2301      	movs	r3, #1
 80062f4:	465a      	mov	r2, fp
 80062f6:	4631      	mov	r1, r6
 80062f8:	4628      	mov	r0, r5
 80062fa:	47b8      	blx	r7
 80062fc:	3001      	adds	r0, #1
 80062fe:	f43f ae56 	beq.w	8005fae <_printf_float+0xb6>
 8006302:	f108 0801 	add.w	r8, r8, #1
 8006306:	45d0      	cmp	r8, sl
 8006308:	dbf3      	blt.n	80062f2 <_printf_float+0x3fa>
 800630a:	464b      	mov	r3, r9
 800630c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006310:	e6df      	b.n	80060d2 <_printf_float+0x1da>
 8006312:	f04f 0800 	mov.w	r8, #0
 8006316:	f104 0b1a 	add.w	fp, r4, #26
 800631a:	e7f4      	b.n	8006306 <_printf_float+0x40e>
 800631c:	2301      	movs	r3, #1
 800631e:	4642      	mov	r2, r8
 8006320:	e7e1      	b.n	80062e6 <_printf_float+0x3ee>
 8006322:	2301      	movs	r3, #1
 8006324:	464a      	mov	r2, r9
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	47b8      	blx	r7
 800632c:	3001      	adds	r0, #1
 800632e:	f43f ae3e 	beq.w	8005fae <_printf_float+0xb6>
 8006332:	f108 0801 	add.w	r8, r8, #1
 8006336:	68e3      	ldr	r3, [r4, #12]
 8006338:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800633a:	1a5b      	subs	r3, r3, r1
 800633c:	4543      	cmp	r3, r8
 800633e:	dcf0      	bgt.n	8006322 <_printf_float+0x42a>
 8006340:	e6fc      	b.n	800613c <_printf_float+0x244>
 8006342:	f04f 0800 	mov.w	r8, #0
 8006346:	f104 0919 	add.w	r9, r4, #25
 800634a:	e7f4      	b.n	8006336 <_printf_float+0x43e>

0800634c <_printf_common>:
 800634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	4616      	mov	r6, r2
 8006352:	4698      	mov	r8, r3
 8006354:	688a      	ldr	r2, [r1, #8]
 8006356:	690b      	ldr	r3, [r1, #16]
 8006358:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800635c:	4293      	cmp	r3, r2
 800635e:	bfb8      	it	lt
 8006360:	4613      	movlt	r3, r2
 8006362:	6033      	str	r3, [r6, #0]
 8006364:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006368:	4607      	mov	r7, r0
 800636a:	460c      	mov	r4, r1
 800636c:	b10a      	cbz	r2, 8006372 <_printf_common+0x26>
 800636e:	3301      	adds	r3, #1
 8006370:	6033      	str	r3, [r6, #0]
 8006372:	6823      	ldr	r3, [r4, #0]
 8006374:	0699      	lsls	r1, r3, #26
 8006376:	bf42      	ittt	mi
 8006378:	6833      	ldrmi	r3, [r6, #0]
 800637a:	3302      	addmi	r3, #2
 800637c:	6033      	strmi	r3, [r6, #0]
 800637e:	6825      	ldr	r5, [r4, #0]
 8006380:	f015 0506 	ands.w	r5, r5, #6
 8006384:	d106      	bne.n	8006394 <_printf_common+0x48>
 8006386:	f104 0a19 	add.w	sl, r4, #25
 800638a:	68e3      	ldr	r3, [r4, #12]
 800638c:	6832      	ldr	r2, [r6, #0]
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	42ab      	cmp	r3, r5
 8006392:	dc26      	bgt.n	80063e2 <_printf_common+0x96>
 8006394:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006398:	6822      	ldr	r2, [r4, #0]
 800639a:	3b00      	subs	r3, #0
 800639c:	bf18      	it	ne
 800639e:	2301      	movne	r3, #1
 80063a0:	0692      	lsls	r2, r2, #26
 80063a2:	d42b      	bmi.n	80063fc <_printf_common+0xb0>
 80063a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80063a8:	4641      	mov	r1, r8
 80063aa:	4638      	mov	r0, r7
 80063ac:	47c8      	blx	r9
 80063ae:	3001      	adds	r0, #1
 80063b0:	d01e      	beq.n	80063f0 <_printf_common+0xa4>
 80063b2:	6823      	ldr	r3, [r4, #0]
 80063b4:	6922      	ldr	r2, [r4, #16]
 80063b6:	f003 0306 	and.w	r3, r3, #6
 80063ba:	2b04      	cmp	r3, #4
 80063bc:	bf02      	ittt	eq
 80063be:	68e5      	ldreq	r5, [r4, #12]
 80063c0:	6833      	ldreq	r3, [r6, #0]
 80063c2:	1aed      	subeq	r5, r5, r3
 80063c4:	68a3      	ldr	r3, [r4, #8]
 80063c6:	bf0c      	ite	eq
 80063c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063cc:	2500      	movne	r5, #0
 80063ce:	4293      	cmp	r3, r2
 80063d0:	bfc4      	itt	gt
 80063d2:	1a9b      	subgt	r3, r3, r2
 80063d4:	18ed      	addgt	r5, r5, r3
 80063d6:	2600      	movs	r6, #0
 80063d8:	341a      	adds	r4, #26
 80063da:	42b5      	cmp	r5, r6
 80063dc:	d11a      	bne.n	8006414 <_printf_common+0xc8>
 80063de:	2000      	movs	r0, #0
 80063e0:	e008      	b.n	80063f4 <_printf_common+0xa8>
 80063e2:	2301      	movs	r3, #1
 80063e4:	4652      	mov	r2, sl
 80063e6:	4641      	mov	r1, r8
 80063e8:	4638      	mov	r0, r7
 80063ea:	47c8      	blx	r9
 80063ec:	3001      	adds	r0, #1
 80063ee:	d103      	bne.n	80063f8 <_printf_common+0xac>
 80063f0:	f04f 30ff 	mov.w	r0, #4294967295
 80063f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063f8:	3501      	adds	r5, #1
 80063fa:	e7c6      	b.n	800638a <_printf_common+0x3e>
 80063fc:	18e1      	adds	r1, r4, r3
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	2030      	movs	r0, #48	@ 0x30
 8006402:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006406:	4422      	add	r2, r4
 8006408:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800640c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006410:	3302      	adds	r3, #2
 8006412:	e7c7      	b.n	80063a4 <_printf_common+0x58>
 8006414:	2301      	movs	r3, #1
 8006416:	4622      	mov	r2, r4
 8006418:	4641      	mov	r1, r8
 800641a:	4638      	mov	r0, r7
 800641c:	47c8      	blx	r9
 800641e:	3001      	adds	r0, #1
 8006420:	d0e6      	beq.n	80063f0 <_printf_common+0xa4>
 8006422:	3601      	adds	r6, #1
 8006424:	e7d9      	b.n	80063da <_printf_common+0x8e>
	...

08006428 <_printf_i>:
 8006428:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800642c:	7e0f      	ldrb	r7, [r1, #24]
 800642e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006430:	2f78      	cmp	r7, #120	@ 0x78
 8006432:	4691      	mov	r9, r2
 8006434:	4680      	mov	r8, r0
 8006436:	460c      	mov	r4, r1
 8006438:	469a      	mov	sl, r3
 800643a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800643e:	d807      	bhi.n	8006450 <_printf_i+0x28>
 8006440:	2f62      	cmp	r7, #98	@ 0x62
 8006442:	d80a      	bhi.n	800645a <_printf_i+0x32>
 8006444:	2f00      	cmp	r7, #0
 8006446:	f000 80d1 	beq.w	80065ec <_printf_i+0x1c4>
 800644a:	2f58      	cmp	r7, #88	@ 0x58
 800644c:	f000 80b8 	beq.w	80065c0 <_printf_i+0x198>
 8006450:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006454:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006458:	e03a      	b.n	80064d0 <_printf_i+0xa8>
 800645a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800645e:	2b15      	cmp	r3, #21
 8006460:	d8f6      	bhi.n	8006450 <_printf_i+0x28>
 8006462:	a101      	add	r1, pc, #4	@ (adr r1, 8006468 <_printf_i+0x40>)
 8006464:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006468:	080064c1 	.word	0x080064c1
 800646c:	080064d5 	.word	0x080064d5
 8006470:	08006451 	.word	0x08006451
 8006474:	08006451 	.word	0x08006451
 8006478:	08006451 	.word	0x08006451
 800647c:	08006451 	.word	0x08006451
 8006480:	080064d5 	.word	0x080064d5
 8006484:	08006451 	.word	0x08006451
 8006488:	08006451 	.word	0x08006451
 800648c:	08006451 	.word	0x08006451
 8006490:	08006451 	.word	0x08006451
 8006494:	080065d3 	.word	0x080065d3
 8006498:	080064ff 	.word	0x080064ff
 800649c:	0800658d 	.word	0x0800658d
 80064a0:	08006451 	.word	0x08006451
 80064a4:	08006451 	.word	0x08006451
 80064a8:	080065f5 	.word	0x080065f5
 80064ac:	08006451 	.word	0x08006451
 80064b0:	080064ff 	.word	0x080064ff
 80064b4:	08006451 	.word	0x08006451
 80064b8:	08006451 	.word	0x08006451
 80064bc:	08006595 	.word	0x08006595
 80064c0:	6833      	ldr	r3, [r6, #0]
 80064c2:	1d1a      	adds	r2, r3, #4
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	6032      	str	r2, [r6, #0]
 80064c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80064cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80064d0:	2301      	movs	r3, #1
 80064d2:	e09c      	b.n	800660e <_printf_i+0x1e6>
 80064d4:	6833      	ldr	r3, [r6, #0]
 80064d6:	6820      	ldr	r0, [r4, #0]
 80064d8:	1d19      	adds	r1, r3, #4
 80064da:	6031      	str	r1, [r6, #0]
 80064dc:	0606      	lsls	r6, r0, #24
 80064de:	d501      	bpl.n	80064e4 <_printf_i+0xbc>
 80064e0:	681d      	ldr	r5, [r3, #0]
 80064e2:	e003      	b.n	80064ec <_printf_i+0xc4>
 80064e4:	0645      	lsls	r5, r0, #25
 80064e6:	d5fb      	bpl.n	80064e0 <_printf_i+0xb8>
 80064e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80064ec:	2d00      	cmp	r5, #0
 80064ee:	da03      	bge.n	80064f8 <_printf_i+0xd0>
 80064f0:	232d      	movs	r3, #45	@ 0x2d
 80064f2:	426d      	negs	r5, r5
 80064f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064f8:	4858      	ldr	r0, [pc, #352]	@ (800665c <_printf_i+0x234>)
 80064fa:	230a      	movs	r3, #10
 80064fc:	e011      	b.n	8006522 <_printf_i+0xfa>
 80064fe:	6821      	ldr	r1, [r4, #0]
 8006500:	6833      	ldr	r3, [r6, #0]
 8006502:	0608      	lsls	r0, r1, #24
 8006504:	f853 5b04 	ldr.w	r5, [r3], #4
 8006508:	d402      	bmi.n	8006510 <_printf_i+0xe8>
 800650a:	0649      	lsls	r1, r1, #25
 800650c:	bf48      	it	mi
 800650e:	b2ad      	uxthmi	r5, r5
 8006510:	2f6f      	cmp	r7, #111	@ 0x6f
 8006512:	4852      	ldr	r0, [pc, #328]	@ (800665c <_printf_i+0x234>)
 8006514:	6033      	str	r3, [r6, #0]
 8006516:	bf14      	ite	ne
 8006518:	230a      	movne	r3, #10
 800651a:	2308      	moveq	r3, #8
 800651c:	2100      	movs	r1, #0
 800651e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006522:	6866      	ldr	r6, [r4, #4]
 8006524:	60a6      	str	r6, [r4, #8]
 8006526:	2e00      	cmp	r6, #0
 8006528:	db05      	blt.n	8006536 <_printf_i+0x10e>
 800652a:	6821      	ldr	r1, [r4, #0]
 800652c:	432e      	orrs	r6, r5
 800652e:	f021 0104 	bic.w	r1, r1, #4
 8006532:	6021      	str	r1, [r4, #0]
 8006534:	d04b      	beq.n	80065ce <_printf_i+0x1a6>
 8006536:	4616      	mov	r6, r2
 8006538:	fbb5 f1f3 	udiv	r1, r5, r3
 800653c:	fb03 5711 	mls	r7, r3, r1, r5
 8006540:	5dc7      	ldrb	r7, [r0, r7]
 8006542:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006546:	462f      	mov	r7, r5
 8006548:	42bb      	cmp	r3, r7
 800654a:	460d      	mov	r5, r1
 800654c:	d9f4      	bls.n	8006538 <_printf_i+0x110>
 800654e:	2b08      	cmp	r3, #8
 8006550:	d10b      	bne.n	800656a <_printf_i+0x142>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	07df      	lsls	r7, r3, #31
 8006556:	d508      	bpl.n	800656a <_printf_i+0x142>
 8006558:	6923      	ldr	r3, [r4, #16]
 800655a:	6861      	ldr	r1, [r4, #4]
 800655c:	4299      	cmp	r1, r3
 800655e:	bfde      	ittt	le
 8006560:	2330      	movle	r3, #48	@ 0x30
 8006562:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006566:	f106 36ff 	addle.w	r6, r6, #4294967295
 800656a:	1b92      	subs	r2, r2, r6
 800656c:	6122      	str	r2, [r4, #16]
 800656e:	f8cd a000 	str.w	sl, [sp]
 8006572:	464b      	mov	r3, r9
 8006574:	aa03      	add	r2, sp, #12
 8006576:	4621      	mov	r1, r4
 8006578:	4640      	mov	r0, r8
 800657a:	f7ff fee7 	bl	800634c <_printf_common>
 800657e:	3001      	adds	r0, #1
 8006580:	d14a      	bne.n	8006618 <_printf_i+0x1f0>
 8006582:	f04f 30ff 	mov.w	r0, #4294967295
 8006586:	b004      	add	sp, #16
 8006588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658c:	6823      	ldr	r3, [r4, #0]
 800658e:	f043 0320 	orr.w	r3, r3, #32
 8006592:	6023      	str	r3, [r4, #0]
 8006594:	4832      	ldr	r0, [pc, #200]	@ (8006660 <_printf_i+0x238>)
 8006596:	2778      	movs	r7, #120	@ 0x78
 8006598:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	6831      	ldr	r1, [r6, #0]
 80065a0:	061f      	lsls	r7, r3, #24
 80065a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80065a6:	d402      	bmi.n	80065ae <_printf_i+0x186>
 80065a8:	065f      	lsls	r7, r3, #25
 80065aa:	bf48      	it	mi
 80065ac:	b2ad      	uxthmi	r5, r5
 80065ae:	6031      	str	r1, [r6, #0]
 80065b0:	07d9      	lsls	r1, r3, #31
 80065b2:	bf44      	itt	mi
 80065b4:	f043 0320 	orrmi.w	r3, r3, #32
 80065b8:	6023      	strmi	r3, [r4, #0]
 80065ba:	b11d      	cbz	r5, 80065c4 <_printf_i+0x19c>
 80065bc:	2310      	movs	r3, #16
 80065be:	e7ad      	b.n	800651c <_printf_i+0xf4>
 80065c0:	4826      	ldr	r0, [pc, #152]	@ (800665c <_printf_i+0x234>)
 80065c2:	e7e9      	b.n	8006598 <_printf_i+0x170>
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	f023 0320 	bic.w	r3, r3, #32
 80065ca:	6023      	str	r3, [r4, #0]
 80065cc:	e7f6      	b.n	80065bc <_printf_i+0x194>
 80065ce:	4616      	mov	r6, r2
 80065d0:	e7bd      	b.n	800654e <_printf_i+0x126>
 80065d2:	6833      	ldr	r3, [r6, #0]
 80065d4:	6825      	ldr	r5, [r4, #0]
 80065d6:	6961      	ldr	r1, [r4, #20]
 80065d8:	1d18      	adds	r0, r3, #4
 80065da:	6030      	str	r0, [r6, #0]
 80065dc:	062e      	lsls	r6, r5, #24
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	d501      	bpl.n	80065e6 <_printf_i+0x1be>
 80065e2:	6019      	str	r1, [r3, #0]
 80065e4:	e002      	b.n	80065ec <_printf_i+0x1c4>
 80065e6:	0668      	lsls	r0, r5, #25
 80065e8:	d5fb      	bpl.n	80065e2 <_printf_i+0x1ba>
 80065ea:	8019      	strh	r1, [r3, #0]
 80065ec:	2300      	movs	r3, #0
 80065ee:	6123      	str	r3, [r4, #16]
 80065f0:	4616      	mov	r6, r2
 80065f2:	e7bc      	b.n	800656e <_printf_i+0x146>
 80065f4:	6833      	ldr	r3, [r6, #0]
 80065f6:	1d1a      	adds	r2, r3, #4
 80065f8:	6032      	str	r2, [r6, #0]
 80065fa:	681e      	ldr	r6, [r3, #0]
 80065fc:	6862      	ldr	r2, [r4, #4]
 80065fe:	2100      	movs	r1, #0
 8006600:	4630      	mov	r0, r6
 8006602:	f7f9 fde5 	bl	80001d0 <memchr>
 8006606:	b108      	cbz	r0, 800660c <_printf_i+0x1e4>
 8006608:	1b80      	subs	r0, r0, r6
 800660a:	6060      	str	r0, [r4, #4]
 800660c:	6863      	ldr	r3, [r4, #4]
 800660e:	6123      	str	r3, [r4, #16]
 8006610:	2300      	movs	r3, #0
 8006612:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006616:	e7aa      	b.n	800656e <_printf_i+0x146>
 8006618:	6923      	ldr	r3, [r4, #16]
 800661a:	4632      	mov	r2, r6
 800661c:	4649      	mov	r1, r9
 800661e:	4640      	mov	r0, r8
 8006620:	47d0      	blx	sl
 8006622:	3001      	adds	r0, #1
 8006624:	d0ad      	beq.n	8006582 <_printf_i+0x15a>
 8006626:	6823      	ldr	r3, [r4, #0]
 8006628:	079b      	lsls	r3, r3, #30
 800662a:	d413      	bmi.n	8006654 <_printf_i+0x22c>
 800662c:	68e0      	ldr	r0, [r4, #12]
 800662e:	9b03      	ldr	r3, [sp, #12]
 8006630:	4298      	cmp	r0, r3
 8006632:	bfb8      	it	lt
 8006634:	4618      	movlt	r0, r3
 8006636:	e7a6      	b.n	8006586 <_printf_i+0x15e>
 8006638:	2301      	movs	r3, #1
 800663a:	4632      	mov	r2, r6
 800663c:	4649      	mov	r1, r9
 800663e:	4640      	mov	r0, r8
 8006640:	47d0      	blx	sl
 8006642:	3001      	adds	r0, #1
 8006644:	d09d      	beq.n	8006582 <_printf_i+0x15a>
 8006646:	3501      	adds	r5, #1
 8006648:	68e3      	ldr	r3, [r4, #12]
 800664a:	9903      	ldr	r1, [sp, #12]
 800664c:	1a5b      	subs	r3, r3, r1
 800664e:	42ab      	cmp	r3, r5
 8006650:	dcf2      	bgt.n	8006638 <_printf_i+0x210>
 8006652:	e7eb      	b.n	800662c <_printf_i+0x204>
 8006654:	2500      	movs	r5, #0
 8006656:	f104 0619 	add.w	r6, r4, #25
 800665a:	e7f5      	b.n	8006648 <_printf_i+0x220>
 800665c:	08008b8a 	.word	0x08008b8a
 8006660:	08008b9b 	.word	0x08008b9b

08006664 <std>:
 8006664:	2300      	movs	r3, #0
 8006666:	b510      	push	{r4, lr}
 8006668:	4604      	mov	r4, r0
 800666a:	e9c0 3300 	strd	r3, r3, [r0]
 800666e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006672:	6083      	str	r3, [r0, #8]
 8006674:	8181      	strh	r1, [r0, #12]
 8006676:	6643      	str	r3, [r0, #100]	@ 0x64
 8006678:	81c2      	strh	r2, [r0, #14]
 800667a:	6183      	str	r3, [r0, #24]
 800667c:	4619      	mov	r1, r3
 800667e:	2208      	movs	r2, #8
 8006680:	305c      	adds	r0, #92	@ 0x5c
 8006682:	f000 f92a 	bl	80068da <memset>
 8006686:	4b0d      	ldr	r3, [pc, #52]	@ (80066bc <std+0x58>)
 8006688:	6263      	str	r3, [r4, #36]	@ 0x24
 800668a:	4b0d      	ldr	r3, [pc, #52]	@ (80066c0 <std+0x5c>)
 800668c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800668e:	4b0d      	ldr	r3, [pc, #52]	@ (80066c4 <std+0x60>)
 8006690:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006692:	4b0d      	ldr	r3, [pc, #52]	@ (80066c8 <std+0x64>)
 8006694:	6323      	str	r3, [r4, #48]	@ 0x30
 8006696:	4b0d      	ldr	r3, [pc, #52]	@ (80066cc <std+0x68>)
 8006698:	6224      	str	r4, [r4, #32]
 800669a:	429c      	cmp	r4, r3
 800669c:	d006      	beq.n	80066ac <std+0x48>
 800669e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80066a2:	4294      	cmp	r4, r2
 80066a4:	d002      	beq.n	80066ac <std+0x48>
 80066a6:	33d0      	adds	r3, #208	@ 0xd0
 80066a8:	429c      	cmp	r4, r3
 80066aa:	d105      	bne.n	80066b8 <std+0x54>
 80066ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80066b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066b4:	f000 b98e 	b.w	80069d4 <__retarget_lock_init_recursive>
 80066b8:	bd10      	pop	{r4, pc}
 80066ba:	bf00      	nop
 80066bc:	08006855 	.word	0x08006855
 80066c0:	08006877 	.word	0x08006877
 80066c4:	080068af 	.word	0x080068af
 80066c8:	080068d3 	.word	0x080068d3
 80066cc:	20000364 	.word	0x20000364

080066d0 <stdio_exit_handler>:
 80066d0:	4a02      	ldr	r2, [pc, #8]	@ (80066dc <stdio_exit_handler+0xc>)
 80066d2:	4903      	ldr	r1, [pc, #12]	@ (80066e0 <stdio_exit_handler+0x10>)
 80066d4:	4803      	ldr	r0, [pc, #12]	@ (80066e4 <stdio_exit_handler+0x14>)
 80066d6:	f000 b869 	b.w	80067ac <_fwalk_sglue>
 80066da:	bf00      	nop
 80066dc:	20000030 	.word	0x20000030
 80066e0:	0800833d 	.word	0x0800833d
 80066e4:	20000040 	.word	0x20000040

080066e8 <cleanup_stdio>:
 80066e8:	6841      	ldr	r1, [r0, #4]
 80066ea:	4b0c      	ldr	r3, [pc, #48]	@ (800671c <cleanup_stdio+0x34>)
 80066ec:	4299      	cmp	r1, r3
 80066ee:	b510      	push	{r4, lr}
 80066f0:	4604      	mov	r4, r0
 80066f2:	d001      	beq.n	80066f8 <cleanup_stdio+0x10>
 80066f4:	f001 fe22 	bl	800833c <_fflush_r>
 80066f8:	68a1      	ldr	r1, [r4, #8]
 80066fa:	4b09      	ldr	r3, [pc, #36]	@ (8006720 <cleanup_stdio+0x38>)
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d002      	beq.n	8006706 <cleanup_stdio+0x1e>
 8006700:	4620      	mov	r0, r4
 8006702:	f001 fe1b 	bl	800833c <_fflush_r>
 8006706:	68e1      	ldr	r1, [r4, #12]
 8006708:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <cleanup_stdio+0x3c>)
 800670a:	4299      	cmp	r1, r3
 800670c:	d004      	beq.n	8006718 <cleanup_stdio+0x30>
 800670e:	4620      	mov	r0, r4
 8006710:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006714:	f001 be12 	b.w	800833c <_fflush_r>
 8006718:	bd10      	pop	{r4, pc}
 800671a:	bf00      	nop
 800671c:	20000364 	.word	0x20000364
 8006720:	200003cc 	.word	0x200003cc
 8006724:	20000434 	.word	0x20000434

08006728 <global_stdio_init.part.0>:
 8006728:	b510      	push	{r4, lr}
 800672a:	4b0b      	ldr	r3, [pc, #44]	@ (8006758 <global_stdio_init.part.0+0x30>)
 800672c:	4c0b      	ldr	r4, [pc, #44]	@ (800675c <global_stdio_init.part.0+0x34>)
 800672e:	4a0c      	ldr	r2, [pc, #48]	@ (8006760 <global_stdio_init.part.0+0x38>)
 8006730:	601a      	str	r2, [r3, #0]
 8006732:	4620      	mov	r0, r4
 8006734:	2200      	movs	r2, #0
 8006736:	2104      	movs	r1, #4
 8006738:	f7ff ff94 	bl	8006664 <std>
 800673c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006740:	2201      	movs	r2, #1
 8006742:	2109      	movs	r1, #9
 8006744:	f7ff ff8e 	bl	8006664 <std>
 8006748:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800674c:	2202      	movs	r2, #2
 800674e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006752:	2112      	movs	r1, #18
 8006754:	f7ff bf86 	b.w	8006664 <std>
 8006758:	2000049c 	.word	0x2000049c
 800675c:	20000364 	.word	0x20000364
 8006760:	080066d1 	.word	0x080066d1

08006764 <__sfp_lock_acquire>:
 8006764:	4801      	ldr	r0, [pc, #4]	@ (800676c <__sfp_lock_acquire+0x8>)
 8006766:	f000 b936 	b.w	80069d6 <__retarget_lock_acquire_recursive>
 800676a:	bf00      	nop
 800676c:	200004a5 	.word	0x200004a5

08006770 <__sfp_lock_release>:
 8006770:	4801      	ldr	r0, [pc, #4]	@ (8006778 <__sfp_lock_release+0x8>)
 8006772:	f000 b931 	b.w	80069d8 <__retarget_lock_release_recursive>
 8006776:	bf00      	nop
 8006778:	200004a5 	.word	0x200004a5

0800677c <__sinit>:
 800677c:	b510      	push	{r4, lr}
 800677e:	4604      	mov	r4, r0
 8006780:	f7ff fff0 	bl	8006764 <__sfp_lock_acquire>
 8006784:	6a23      	ldr	r3, [r4, #32]
 8006786:	b11b      	cbz	r3, 8006790 <__sinit+0x14>
 8006788:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800678c:	f7ff bff0 	b.w	8006770 <__sfp_lock_release>
 8006790:	4b04      	ldr	r3, [pc, #16]	@ (80067a4 <__sinit+0x28>)
 8006792:	6223      	str	r3, [r4, #32]
 8006794:	4b04      	ldr	r3, [pc, #16]	@ (80067a8 <__sinit+0x2c>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1f5      	bne.n	8006788 <__sinit+0xc>
 800679c:	f7ff ffc4 	bl	8006728 <global_stdio_init.part.0>
 80067a0:	e7f2      	b.n	8006788 <__sinit+0xc>
 80067a2:	bf00      	nop
 80067a4:	080066e9 	.word	0x080066e9
 80067a8:	2000049c 	.word	0x2000049c

080067ac <_fwalk_sglue>:
 80067ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067b0:	4607      	mov	r7, r0
 80067b2:	4688      	mov	r8, r1
 80067b4:	4614      	mov	r4, r2
 80067b6:	2600      	movs	r6, #0
 80067b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067bc:	f1b9 0901 	subs.w	r9, r9, #1
 80067c0:	d505      	bpl.n	80067ce <_fwalk_sglue+0x22>
 80067c2:	6824      	ldr	r4, [r4, #0]
 80067c4:	2c00      	cmp	r4, #0
 80067c6:	d1f7      	bne.n	80067b8 <_fwalk_sglue+0xc>
 80067c8:	4630      	mov	r0, r6
 80067ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067ce:	89ab      	ldrh	r3, [r5, #12]
 80067d0:	2b01      	cmp	r3, #1
 80067d2:	d907      	bls.n	80067e4 <_fwalk_sglue+0x38>
 80067d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80067d8:	3301      	adds	r3, #1
 80067da:	d003      	beq.n	80067e4 <_fwalk_sglue+0x38>
 80067dc:	4629      	mov	r1, r5
 80067de:	4638      	mov	r0, r7
 80067e0:	47c0      	blx	r8
 80067e2:	4306      	orrs	r6, r0
 80067e4:	3568      	adds	r5, #104	@ 0x68
 80067e6:	e7e9      	b.n	80067bc <_fwalk_sglue+0x10>

080067e8 <sniprintf>:
 80067e8:	b40c      	push	{r2, r3}
 80067ea:	b530      	push	{r4, r5, lr}
 80067ec:	4b18      	ldr	r3, [pc, #96]	@ (8006850 <sniprintf+0x68>)
 80067ee:	1e0c      	subs	r4, r1, #0
 80067f0:	681d      	ldr	r5, [r3, #0]
 80067f2:	b09d      	sub	sp, #116	@ 0x74
 80067f4:	da08      	bge.n	8006808 <sniprintf+0x20>
 80067f6:	238b      	movs	r3, #139	@ 0x8b
 80067f8:	602b      	str	r3, [r5, #0]
 80067fa:	f04f 30ff 	mov.w	r0, #4294967295
 80067fe:	b01d      	add	sp, #116	@ 0x74
 8006800:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006804:	b002      	add	sp, #8
 8006806:	4770      	bx	lr
 8006808:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800680c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006810:	f04f 0300 	mov.w	r3, #0
 8006814:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006816:	bf14      	ite	ne
 8006818:	f104 33ff 	addne.w	r3, r4, #4294967295
 800681c:	4623      	moveq	r3, r4
 800681e:	9304      	str	r3, [sp, #16]
 8006820:	9307      	str	r3, [sp, #28]
 8006822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006826:	9002      	str	r0, [sp, #8]
 8006828:	9006      	str	r0, [sp, #24]
 800682a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800682e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006830:	ab21      	add	r3, sp, #132	@ 0x84
 8006832:	a902      	add	r1, sp, #8
 8006834:	4628      	mov	r0, r5
 8006836:	9301      	str	r3, [sp, #4]
 8006838:	f001 fc00 	bl	800803c <_svfiprintf_r>
 800683c:	1c43      	adds	r3, r0, #1
 800683e:	bfbc      	itt	lt
 8006840:	238b      	movlt	r3, #139	@ 0x8b
 8006842:	602b      	strlt	r3, [r5, #0]
 8006844:	2c00      	cmp	r4, #0
 8006846:	d0da      	beq.n	80067fe <sniprintf+0x16>
 8006848:	9b02      	ldr	r3, [sp, #8]
 800684a:	2200      	movs	r2, #0
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	e7d6      	b.n	80067fe <sniprintf+0x16>
 8006850:	2000003c 	.word	0x2000003c

08006854 <__sread>:
 8006854:	b510      	push	{r4, lr}
 8006856:	460c      	mov	r4, r1
 8006858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800685c:	f000 f86c 	bl	8006938 <_read_r>
 8006860:	2800      	cmp	r0, #0
 8006862:	bfab      	itete	ge
 8006864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006866:	89a3      	ldrhlt	r3, [r4, #12]
 8006868:	181b      	addge	r3, r3, r0
 800686a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800686e:	bfac      	ite	ge
 8006870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006872:	81a3      	strhlt	r3, [r4, #12]
 8006874:	bd10      	pop	{r4, pc}

08006876 <__swrite>:
 8006876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687a:	461f      	mov	r7, r3
 800687c:	898b      	ldrh	r3, [r1, #12]
 800687e:	05db      	lsls	r3, r3, #23
 8006880:	4605      	mov	r5, r0
 8006882:	460c      	mov	r4, r1
 8006884:	4616      	mov	r6, r2
 8006886:	d505      	bpl.n	8006894 <__swrite+0x1e>
 8006888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688c:	2302      	movs	r3, #2
 800688e:	2200      	movs	r2, #0
 8006890:	f000 f840 	bl	8006914 <_lseek_r>
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800689a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800689e:	81a3      	strh	r3, [r4, #12]
 80068a0:	4632      	mov	r2, r6
 80068a2:	463b      	mov	r3, r7
 80068a4:	4628      	mov	r0, r5
 80068a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068aa:	f000 b857 	b.w	800695c <_write_r>

080068ae <__sseek>:
 80068ae:	b510      	push	{r4, lr}
 80068b0:	460c      	mov	r4, r1
 80068b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b6:	f000 f82d 	bl	8006914 <_lseek_r>
 80068ba:	1c43      	adds	r3, r0, #1
 80068bc:	89a3      	ldrh	r3, [r4, #12]
 80068be:	bf15      	itete	ne
 80068c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80068c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80068c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80068ca:	81a3      	strheq	r3, [r4, #12]
 80068cc:	bf18      	it	ne
 80068ce:	81a3      	strhne	r3, [r4, #12]
 80068d0:	bd10      	pop	{r4, pc}

080068d2 <__sclose>:
 80068d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d6:	f000 b80d 	b.w	80068f4 <_close_r>

080068da <memset>:
 80068da:	4402      	add	r2, r0
 80068dc:	4603      	mov	r3, r0
 80068de:	4293      	cmp	r3, r2
 80068e0:	d100      	bne.n	80068e4 <memset+0xa>
 80068e2:	4770      	bx	lr
 80068e4:	f803 1b01 	strb.w	r1, [r3], #1
 80068e8:	e7f9      	b.n	80068de <memset+0x4>
	...

080068ec <_localeconv_r>:
 80068ec:	4800      	ldr	r0, [pc, #0]	@ (80068f0 <_localeconv_r+0x4>)
 80068ee:	4770      	bx	lr
 80068f0:	2000017c 	.word	0x2000017c

080068f4 <_close_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d06      	ldr	r5, [pc, #24]	@ (8006910 <_close_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fb f8b6 	bl	8001a70 <_close>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_close_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_close_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	200004a0 	.word	0x200004a0

08006914 <_lseek_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4d07      	ldr	r5, [pc, #28]	@ (8006934 <_lseek_r+0x20>)
 8006918:	4604      	mov	r4, r0
 800691a:	4608      	mov	r0, r1
 800691c:	4611      	mov	r1, r2
 800691e:	2200      	movs	r2, #0
 8006920:	602a      	str	r2, [r5, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	f7fb f8cb 	bl	8001abe <_lseek>
 8006928:	1c43      	adds	r3, r0, #1
 800692a:	d102      	bne.n	8006932 <_lseek_r+0x1e>
 800692c:	682b      	ldr	r3, [r5, #0]
 800692e:	b103      	cbz	r3, 8006932 <_lseek_r+0x1e>
 8006930:	6023      	str	r3, [r4, #0]
 8006932:	bd38      	pop	{r3, r4, r5, pc}
 8006934:	200004a0 	.word	0x200004a0

08006938 <_read_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d07      	ldr	r5, [pc, #28]	@ (8006958 <_read_r+0x20>)
 800693c:	4604      	mov	r4, r0
 800693e:	4608      	mov	r0, r1
 8006940:	4611      	mov	r1, r2
 8006942:	2200      	movs	r2, #0
 8006944:	602a      	str	r2, [r5, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	f7fb f859 	bl	80019fe <_read>
 800694c:	1c43      	adds	r3, r0, #1
 800694e:	d102      	bne.n	8006956 <_read_r+0x1e>
 8006950:	682b      	ldr	r3, [r5, #0]
 8006952:	b103      	cbz	r3, 8006956 <_read_r+0x1e>
 8006954:	6023      	str	r3, [r4, #0]
 8006956:	bd38      	pop	{r3, r4, r5, pc}
 8006958:	200004a0 	.word	0x200004a0

0800695c <_write_r>:
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	4d07      	ldr	r5, [pc, #28]	@ (800697c <_write_r+0x20>)
 8006960:	4604      	mov	r4, r0
 8006962:	4608      	mov	r0, r1
 8006964:	4611      	mov	r1, r2
 8006966:	2200      	movs	r2, #0
 8006968:	602a      	str	r2, [r5, #0]
 800696a:	461a      	mov	r2, r3
 800696c:	f7fb f864 	bl	8001a38 <_write>
 8006970:	1c43      	adds	r3, r0, #1
 8006972:	d102      	bne.n	800697a <_write_r+0x1e>
 8006974:	682b      	ldr	r3, [r5, #0]
 8006976:	b103      	cbz	r3, 800697a <_write_r+0x1e>
 8006978:	6023      	str	r3, [r4, #0]
 800697a:	bd38      	pop	{r3, r4, r5, pc}
 800697c:	200004a0 	.word	0x200004a0

08006980 <__errno>:
 8006980:	4b01      	ldr	r3, [pc, #4]	@ (8006988 <__errno+0x8>)
 8006982:	6818      	ldr	r0, [r3, #0]
 8006984:	4770      	bx	lr
 8006986:	bf00      	nop
 8006988:	2000003c 	.word	0x2000003c

0800698c <__libc_init_array>:
 800698c:	b570      	push	{r4, r5, r6, lr}
 800698e:	4d0d      	ldr	r5, [pc, #52]	@ (80069c4 <__libc_init_array+0x38>)
 8006990:	4c0d      	ldr	r4, [pc, #52]	@ (80069c8 <__libc_init_array+0x3c>)
 8006992:	1b64      	subs	r4, r4, r5
 8006994:	10a4      	asrs	r4, r4, #2
 8006996:	2600      	movs	r6, #0
 8006998:	42a6      	cmp	r6, r4
 800699a:	d109      	bne.n	80069b0 <__libc_init_array+0x24>
 800699c:	4d0b      	ldr	r5, [pc, #44]	@ (80069cc <__libc_init_array+0x40>)
 800699e:	4c0c      	ldr	r4, [pc, #48]	@ (80069d0 <__libc_init_array+0x44>)
 80069a0:	f002 f86a 	bl	8008a78 <_init>
 80069a4:	1b64      	subs	r4, r4, r5
 80069a6:	10a4      	asrs	r4, r4, #2
 80069a8:	2600      	movs	r6, #0
 80069aa:	42a6      	cmp	r6, r4
 80069ac:	d105      	bne.n	80069ba <__libc_init_array+0x2e>
 80069ae:	bd70      	pop	{r4, r5, r6, pc}
 80069b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80069b4:	4798      	blx	r3
 80069b6:	3601      	adds	r6, #1
 80069b8:	e7ee      	b.n	8006998 <__libc_init_array+0xc>
 80069ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80069be:	4798      	blx	r3
 80069c0:	3601      	adds	r6, #1
 80069c2:	e7f2      	b.n	80069aa <__libc_init_array+0x1e>
 80069c4:	08008ef4 	.word	0x08008ef4
 80069c8:	08008ef4 	.word	0x08008ef4
 80069cc:	08008ef4 	.word	0x08008ef4
 80069d0:	08008ef8 	.word	0x08008ef8

080069d4 <__retarget_lock_init_recursive>:
 80069d4:	4770      	bx	lr

080069d6 <__retarget_lock_acquire_recursive>:
 80069d6:	4770      	bx	lr

080069d8 <__retarget_lock_release_recursive>:
 80069d8:	4770      	bx	lr

080069da <quorem>:
 80069da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069de:	6903      	ldr	r3, [r0, #16]
 80069e0:	690c      	ldr	r4, [r1, #16]
 80069e2:	42a3      	cmp	r3, r4
 80069e4:	4607      	mov	r7, r0
 80069e6:	db7e      	blt.n	8006ae6 <quorem+0x10c>
 80069e8:	3c01      	subs	r4, #1
 80069ea:	f101 0814 	add.w	r8, r1, #20
 80069ee:	00a3      	lsls	r3, r4, #2
 80069f0:	f100 0514 	add.w	r5, r0, #20
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80069fa:	9301      	str	r3, [sp, #4]
 80069fc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006a00:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006a04:	3301      	adds	r3, #1
 8006a06:	429a      	cmp	r2, r3
 8006a08:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006a0c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006a10:	d32e      	bcc.n	8006a70 <quorem+0x96>
 8006a12:	f04f 0a00 	mov.w	sl, #0
 8006a16:	46c4      	mov	ip, r8
 8006a18:	46ae      	mov	lr, r5
 8006a1a:	46d3      	mov	fp, sl
 8006a1c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006a20:	b298      	uxth	r0, r3
 8006a22:	fb06 a000 	mla	r0, r6, r0, sl
 8006a26:	0c02      	lsrs	r2, r0, #16
 8006a28:	0c1b      	lsrs	r3, r3, #16
 8006a2a:	fb06 2303 	mla	r3, r6, r3, r2
 8006a2e:	f8de 2000 	ldr.w	r2, [lr]
 8006a32:	b280      	uxth	r0, r0
 8006a34:	b292      	uxth	r2, r2
 8006a36:	1a12      	subs	r2, r2, r0
 8006a38:	445a      	add	r2, fp
 8006a3a:	f8de 0000 	ldr.w	r0, [lr]
 8006a3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006a48:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006a4c:	b292      	uxth	r2, r2
 8006a4e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006a52:	45e1      	cmp	r9, ip
 8006a54:	f84e 2b04 	str.w	r2, [lr], #4
 8006a58:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006a5c:	d2de      	bcs.n	8006a1c <quorem+0x42>
 8006a5e:	9b00      	ldr	r3, [sp, #0]
 8006a60:	58eb      	ldr	r3, [r5, r3]
 8006a62:	b92b      	cbnz	r3, 8006a70 <quorem+0x96>
 8006a64:	9b01      	ldr	r3, [sp, #4]
 8006a66:	3b04      	subs	r3, #4
 8006a68:	429d      	cmp	r5, r3
 8006a6a:	461a      	mov	r2, r3
 8006a6c:	d32f      	bcc.n	8006ace <quorem+0xf4>
 8006a6e:	613c      	str	r4, [r7, #16]
 8006a70:	4638      	mov	r0, r7
 8006a72:	f001 f97f 	bl	8007d74 <__mcmp>
 8006a76:	2800      	cmp	r0, #0
 8006a78:	db25      	blt.n	8006ac6 <quorem+0xec>
 8006a7a:	4629      	mov	r1, r5
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006a82:	f8d1 c000 	ldr.w	ip, [r1]
 8006a86:	fa1f fe82 	uxth.w	lr, r2
 8006a8a:	fa1f f38c 	uxth.w	r3, ip
 8006a8e:	eba3 030e 	sub.w	r3, r3, lr
 8006a92:	4403      	add	r3, r0
 8006a94:	0c12      	lsrs	r2, r2, #16
 8006a96:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006a9a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006aa4:	45c1      	cmp	r9, r8
 8006aa6:	f841 3b04 	str.w	r3, [r1], #4
 8006aaa:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006aae:	d2e6      	bcs.n	8006a7e <quorem+0xa4>
 8006ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ab4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006ab8:	b922      	cbnz	r2, 8006ac4 <quorem+0xea>
 8006aba:	3b04      	subs	r3, #4
 8006abc:	429d      	cmp	r5, r3
 8006abe:	461a      	mov	r2, r3
 8006ac0:	d30b      	bcc.n	8006ada <quorem+0x100>
 8006ac2:	613c      	str	r4, [r7, #16]
 8006ac4:	3601      	adds	r6, #1
 8006ac6:	4630      	mov	r0, r6
 8006ac8:	b003      	add	sp, #12
 8006aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ace:	6812      	ldr	r2, [r2, #0]
 8006ad0:	3b04      	subs	r3, #4
 8006ad2:	2a00      	cmp	r2, #0
 8006ad4:	d1cb      	bne.n	8006a6e <quorem+0x94>
 8006ad6:	3c01      	subs	r4, #1
 8006ad8:	e7c6      	b.n	8006a68 <quorem+0x8e>
 8006ada:	6812      	ldr	r2, [r2, #0]
 8006adc:	3b04      	subs	r3, #4
 8006ade:	2a00      	cmp	r2, #0
 8006ae0:	d1ef      	bne.n	8006ac2 <quorem+0xe8>
 8006ae2:	3c01      	subs	r4, #1
 8006ae4:	e7ea      	b.n	8006abc <quorem+0xe2>
 8006ae6:	2000      	movs	r0, #0
 8006ae8:	e7ee      	b.n	8006ac8 <quorem+0xee>
 8006aea:	0000      	movs	r0, r0
 8006aec:	0000      	movs	r0, r0
	...

08006af0 <_dtoa_r>:
 8006af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006af4:	69c7      	ldr	r7, [r0, #28]
 8006af6:	b097      	sub	sp, #92	@ 0x5c
 8006af8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006afc:	ec55 4b10 	vmov	r4, r5, d0
 8006b00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8006b02:	9107      	str	r1, [sp, #28]
 8006b04:	4681      	mov	r9, r0
 8006b06:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b08:	9311      	str	r3, [sp, #68]	@ 0x44
 8006b0a:	b97f      	cbnz	r7, 8006b2c <_dtoa_r+0x3c>
 8006b0c:	2010      	movs	r0, #16
 8006b0e:	f000 fe09 	bl	8007724 <malloc>
 8006b12:	4602      	mov	r2, r0
 8006b14:	f8c9 001c 	str.w	r0, [r9, #28]
 8006b18:	b920      	cbnz	r0, 8006b24 <_dtoa_r+0x34>
 8006b1a:	4ba9      	ldr	r3, [pc, #676]	@ (8006dc0 <_dtoa_r+0x2d0>)
 8006b1c:	21ef      	movs	r1, #239	@ 0xef
 8006b1e:	48a9      	ldr	r0, [pc, #676]	@ (8006dc4 <_dtoa_r+0x2d4>)
 8006b20:	f001 fc6c 	bl	80083fc <__assert_func>
 8006b24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006b28:	6007      	str	r7, [r0, #0]
 8006b2a:	60c7      	str	r7, [r0, #12]
 8006b2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b30:	6819      	ldr	r1, [r3, #0]
 8006b32:	b159      	cbz	r1, 8006b4c <_dtoa_r+0x5c>
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	604a      	str	r2, [r1, #4]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4093      	lsls	r3, r2
 8006b3c:	608b      	str	r3, [r1, #8]
 8006b3e:	4648      	mov	r0, r9
 8006b40:	f000 fee6 	bl	8007910 <_Bfree>
 8006b44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	601a      	str	r2, [r3, #0]
 8006b4c:	1e2b      	subs	r3, r5, #0
 8006b4e:	bfb9      	ittee	lt
 8006b50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006b54:	9305      	strlt	r3, [sp, #20]
 8006b56:	2300      	movge	r3, #0
 8006b58:	6033      	strge	r3, [r6, #0]
 8006b5a:	9f05      	ldr	r7, [sp, #20]
 8006b5c:	4b9a      	ldr	r3, [pc, #616]	@ (8006dc8 <_dtoa_r+0x2d8>)
 8006b5e:	bfbc      	itt	lt
 8006b60:	2201      	movlt	r2, #1
 8006b62:	6032      	strlt	r2, [r6, #0]
 8006b64:	43bb      	bics	r3, r7
 8006b66:	d112      	bne.n	8006b8e <_dtoa_r+0x9e>
 8006b68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006b6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006b6e:	6013      	str	r3, [r2, #0]
 8006b70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b74:	4323      	orrs	r3, r4
 8006b76:	f000 855a 	beq.w	800762e <_dtoa_r+0xb3e>
 8006b7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b7c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006ddc <_dtoa_r+0x2ec>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	f000 855c 	beq.w	800763e <_dtoa_r+0xb4e>
 8006b86:	f10a 0303 	add.w	r3, sl, #3
 8006b8a:	f000 bd56 	b.w	800763a <_dtoa_r+0xb4a>
 8006b8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8006b92:	2200      	movs	r2, #0
 8006b94:	ec51 0b17 	vmov	r0, r1, d7
 8006b98:	2300      	movs	r3, #0
 8006b9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8006b9e:	f7f9 ff93 	bl	8000ac8 <__aeabi_dcmpeq>
 8006ba2:	4680      	mov	r8, r0
 8006ba4:	b158      	cbz	r0, 8006bbe <_dtoa_r+0xce>
 8006ba6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006ba8:	2301      	movs	r3, #1
 8006baa:	6013      	str	r3, [r2, #0]
 8006bac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bae:	b113      	cbz	r3, 8006bb6 <_dtoa_r+0xc6>
 8006bb0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8006bb2:	4b86      	ldr	r3, [pc, #536]	@ (8006dcc <_dtoa_r+0x2dc>)
 8006bb4:	6013      	str	r3, [r2, #0]
 8006bb6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006de0 <_dtoa_r+0x2f0>
 8006bba:	f000 bd40 	b.w	800763e <_dtoa_r+0xb4e>
 8006bbe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8006bc2:	aa14      	add	r2, sp, #80	@ 0x50
 8006bc4:	a915      	add	r1, sp, #84	@ 0x54
 8006bc6:	4648      	mov	r0, r9
 8006bc8:	f001 f984 	bl	8007ed4 <__d2b>
 8006bcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006bd0:	9002      	str	r0, [sp, #8]
 8006bd2:	2e00      	cmp	r6, #0
 8006bd4:	d078      	beq.n	8006cc8 <_dtoa_r+0x1d8>
 8006bd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bd8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006be0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006be4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006be8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006bec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	4b76      	ldr	r3, [pc, #472]	@ (8006dd0 <_dtoa_r+0x2e0>)
 8006bf6:	f7f9 fb47 	bl	8000288 <__aeabi_dsub>
 8006bfa:	a36b      	add	r3, pc, #428	@ (adr r3, 8006da8 <_dtoa_r+0x2b8>)
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f7f9 fcfa 	bl	80005f8 <__aeabi_dmul>
 8006c04:	a36a      	add	r3, pc, #424	@ (adr r3, 8006db0 <_dtoa_r+0x2c0>)
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f7f9 fb3f 	bl	800028c <__adddf3>
 8006c0e:	4604      	mov	r4, r0
 8006c10:	4630      	mov	r0, r6
 8006c12:	460d      	mov	r5, r1
 8006c14:	f7f9 fc86 	bl	8000524 <__aeabi_i2d>
 8006c18:	a367      	add	r3, pc, #412	@ (adr r3, 8006db8 <_dtoa_r+0x2c8>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	f7f9 fceb 	bl	80005f8 <__aeabi_dmul>
 8006c22:	4602      	mov	r2, r0
 8006c24:	460b      	mov	r3, r1
 8006c26:	4620      	mov	r0, r4
 8006c28:	4629      	mov	r1, r5
 8006c2a:	f7f9 fb2f 	bl	800028c <__adddf3>
 8006c2e:	4604      	mov	r4, r0
 8006c30:	460d      	mov	r5, r1
 8006c32:	f7f9 ff91 	bl	8000b58 <__aeabi_d2iz>
 8006c36:	2200      	movs	r2, #0
 8006c38:	4607      	mov	r7, r0
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f7f9 ff4c 	bl	8000adc <__aeabi_dcmplt>
 8006c44:	b140      	cbz	r0, 8006c58 <_dtoa_r+0x168>
 8006c46:	4638      	mov	r0, r7
 8006c48:	f7f9 fc6c 	bl	8000524 <__aeabi_i2d>
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	462b      	mov	r3, r5
 8006c50:	f7f9 ff3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c54:	b900      	cbnz	r0, 8006c58 <_dtoa_r+0x168>
 8006c56:	3f01      	subs	r7, #1
 8006c58:	2f16      	cmp	r7, #22
 8006c5a:	d852      	bhi.n	8006d02 <_dtoa_r+0x212>
 8006c5c:	4b5d      	ldr	r3, [pc, #372]	@ (8006dd4 <_dtoa_r+0x2e4>)
 8006c5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006c6a:	f7f9 ff37 	bl	8000adc <__aeabi_dcmplt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d049      	beq.n	8006d06 <_dtoa_r+0x216>
 8006c72:	3f01      	subs	r7, #1
 8006c74:	2300      	movs	r3, #0
 8006c76:	9310      	str	r3, [sp, #64]	@ 0x40
 8006c78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006c7a:	1b9b      	subs	r3, r3, r6
 8006c7c:	1e5a      	subs	r2, r3, #1
 8006c7e:	bf45      	ittet	mi
 8006c80:	f1c3 0301 	rsbmi	r3, r3, #1
 8006c84:	9300      	strmi	r3, [sp, #0]
 8006c86:	2300      	movpl	r3, #0
 8006c88:	2300      	movmi	r3, #0
 8006c8a:	9206      	str	r2, [sp, #24]
 8006c8c:	bf54      	ite	pl
 8006c8e:	9300      	strpl	r3, [sp, #0]
 8006c90:	9306      	strmi	r3, [sp, #24]
 8006c92:	2f00      	cmp	r7, #0
 8006c94:	db39      	blt.n	8006d0a <_dtoa_r+0x21a>
 8006c96:	9b06      	ldr	r3, [sp, #24]
 8006c98:	970d      	str	r7, [sp, #52]	@ 0x34
 8006c9a:	443b      	add	r3, r7
 8006c9c:	9306      	str	r3, [sp, #24]
 8006c9e:	2300      	movs	r3, #0
 8006ca0:	9308      	str	r3, [sp, #32]
 8006ca2:	9b07      	ldr	r3, [sp, #28]
 8006ca4:	2b09      	cmp	r3, #9
 8006ca6:	d863      	bhi.n	8006d70 <_dtoa_r+0x280>
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	bfc4      	itt	gt
 8006cac:	3b04      	subgt	r3, #4
 8006cae:	9307      	strgt	r3, [sp, #28]
 8006cb0:	9b07      	ldr	r3, [sp, #28]
 8006cb2:	f1a3 0302 	sub.w	r3, r3, #2
 8006cb6:	bfcc      	ite	gt
 8006cb8:	2400      	movgt	r4, #0
 8006cba:	2401      	movle	r4, #1
 8006cbc:	2b03      	cmp	r3, #3
 8006cbe:	d863      	bhi.n	8006d88 <_dtoa_r+0x298>
 8006cc0:	e8df f003 	tbb	[pc, r3]
 8006cc4:	2b375452 	.word	0x2b375452
 8006cc8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006ccc:	441e      	add	r6, r3
 8006cce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006cd2:	2b20      	cmp	r3, #32
 8006cd4:	bfc1      	itttt	gt
 8006cd6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006cda:	409f      	lslgt	r7, r3
 8006cdc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006ce0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ce4:	bfd6      	itet	le
 8006ce6:	f1c3 0320 	rsble	r3, r3, #32
 8006cea:	ea47 0003 	orrgt.w	r0, r7, r3
 8006cee:	fa04 f003 	lslle.w	r0, r4, r3
 8006cf2:	f7f9 fc07 	bl	8000504 <__aeabi_ui2d>
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006cfc:	3e01      	subs	r6, #1
 8006cfe:	9212      	str	r2, [sp, #72]	@ 0x48
 8006d00:	e776      	b.n	8006bf0 <_dtoa_r+0x100>
 8006d02:	2301      	movs	r3, #1
 8006d04:	e7b7      	b.n	8006c76 <_dtoa_r+0x186>
 8006d06:	9010      	str	r0, [sp, #64]	@ 0x40
 8006d08:	e7b6      	b.n	8006c78 <_dtoa_r+0x188>
 8006d0a:	9b00      	ldr	r3, [sp, #0]
 8006d0c:	1bdb      	subs	r3, r3, r7
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	427b      	negs	r3, r7
 8006d12:	9308      	str	r3, [sp, #32]
 8006d14:	2300      	movs	r3, #0
 8006d16:	930d      	str	r3, [sp, #52]	@ 0x34
 8006d18:	e7c3      	b.n	8006ca2 <_dtoa_r+0x1b2>
 8006d1a:	2301      	movs	r3, #1
 8006d1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d20:	eb07 0b03 	add.w	fp, r7, r3
 8006d24:	f10b 0301 	add.w	r3, fp, #1
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	9303      	str	r3, [sp, #12]
 8006d2c:	bfb8      	it	lt
 8006d2e:	2301      	movlt	r3, #1
 8006d30:	e006      	b.n	8006d40 <_dtoa_r+0x250>
 8006d32:	2301      	movs	r3, #1
 8006d34:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	dd28      	ble.n	8006d8e <_dtoa_r+0x29e>
 8006d3c:	469b      	mov	fp, r3
 8006d3e:	9303      	str	r3, [sp, #12]
 8006d40:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8006d44:	2100      	movs	r1, #0
 8006d46:	2204      	movs	r2, #4
 8006d48:	f102 0514 	add.w	r5, r2, #20
 8006d4c:	429d      	cmp	r5, r3
 8006d4e:	d926      	bls.n	8006d9e <_dtoa_r+0x2ae>
 8006d50:	6041      	str	r1, [r0, #4]
 8006d52:	4648      	mov	r0, r9
 8006d54:	f000 fd9c 	bl	8007890 <_Balloc>
 8006d58:	4682      	mov	sl, r0
 8006d5a:	2800      	cmp	r0, #0
 8006d5c:	d142      	bne.n	8006de4 <_dtoa_r+0x2f4>
 8006d5e:	4b1e      	ldr	r3, [pc, #120]	@ (8006dd8 <_dtoa_r+0x2e8>)
 8006d60:	4602      	mov	r2, r0
 8006d62:	f240 11af 	movw	r1, #431	@ 0x1af
 8006d66:	e6da      	b.n	8006b1e <_dtoa_r+0x2e>
 8006d68:	2300      	movs	r3, #0
 8006d6a:	e7e3      	b.n	8006d34 <_dtoa_r+0x244>
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	e7d5      	b.n	8006d1c <_dtoa_r+0x22c>
 8006d70:	2401      	movs	r4, #1
 8006d72:	2300      	movs	r3, #0
 8006d74:	9307      	str	r3, [sp, #28]
 8006d76:	9409      	str	r4, [sp, #36]	@ 0x24
 8006d78:	f04f 3bff 	mov.w	fp, #4294967295
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8cd b00c 	str.w	fp, [sp, #12]
 8006d82:	2312      	movs	r3, #18
 8006d84:	920c      	str	r2, [sp, #48]	@ 0x30
 8006d86:	e7db      	b.n	8006d40 <_dtoa_r+0x250>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d8c:	e7f4      	b.n	8006d78 <_dtoa_r+0x288>
 8006d8e:	f04f 0b01 	mov.w	fp, #1
 8006d92:	f8cd b00c 	str.w	fp, [sp, #12]
 8006d96:	465b      	mov	r3, fp
 8006d98:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8006d9c:	e7d0      	b.n	8006d40 <_dtoa_r+0x250>
 8006d9e:	3101      	adds	r1, #1
 8006da0:	0052      	lsls	r2, r2, #1
 8006da2:	e7d1      	b.n	8006d48 <_dtoa_r+0x258>
 8006da4:	f3af 8000 	nop.w
 8006da8:	636f4361 	.word	0x636f4361
 8006dac:	3fd287a7 	.word	0x3fd287a7
 8006db0:	8b60c8b3 	.word	0x8b60c8b3
 8006db4:	3fc68a28 	.word	0x3fc68a28
 8006db8:	509f79fb 	.word	0x509f79fb
 8006dbc:	3fd34413 	.word	0x3fd34413
 8006dc0:	08008bb9 	.word	0x08008bb9
 8006dc4:	08008bd0 	.word	0x08008bd0
 8006dc8:	7ff00000 	.word	0x7ff00000
 8006dcc:	08008b89 	.word	0x08008b89
 8006dd0:	3ff80000 	.word	0x3ff80000
 8006dd4:	08008d20 	.word	0x08008d20
 8006dd8:	08008c28 	.word	0x08008c28
 8006ddc:	08008bb5 	.word	0x08008bb5
 8006de0:	08008b88 	.word	0x08008b88
 8006de4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006de8:	6018      	str	r0, [r3, #0]
 8006dea:	9b03      	ldr	r3, [sp, #12]
 8006dec:	2b0e      	cmp	r3, #14
 8006dee:	f200 80a1 	bhi.w	8006f34 <_dtoa_r+0x444>
 8006df2:	2c00      	cmp	r4, #0
 8006df4:	f000 809e 	beq.w	8006f34 <_dtoa_r+0x444>
 8006df8:	2f00      	cmp	r7, #0
 8006dfa:	dd33      	ble.n	8006e64 <_dtoa_r+0x374>
 8006dfc:	4b9c      	ldr	r3, [pc, #624]	@ (8007070 <_dtoa_r+0x580>)
 8006dfe:	f007 020f 	and.w	r2, r7, #15
 8006e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e06:	ed93 7b00 	vldr	d7, [r3]
 8006e0a:	05f8      	lsls	r0, r7, #23
 8006e0c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006e10:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006e14:	d516      	bpl.n	8006e44 <_dtoa_r+0x354>
 8006e16:	4b97      	ldr	r3, [pc, #604]	@ (8007074 <_dtoa_r+0x584>)
 8006e18:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e1c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006e20:	f7f9 fd14 	bl	800084c <__aeabi_ddiv>
 8006e24:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e28:	f004 040f 	and.w	r4, r4, #15
 8006e2c:	2603      	movs	r6, #3
 8006e2e:	4d91      	ldr	r5, [pc, #580]	@ (8007074 <_dtoa_r+0x584>)
 8006e30:	b954      	cbnz	r4, 8006e48 <_dtoa_r+0x358>
 8006e32:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006e36:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006e3a:	f7f9 fd07 	bl	800084c <__aeabi_ddiv>
 8006e3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e42:	e028      	b.n	8006e96 <_dtoa_r+0x3a6>
 8006e44:	2602      	movs	r6, #2
 8006e46:	e7f2      	b.n	8006e2e <_dtoa_r+0x33e>
 8006e48:	07e1      	lsls	r1, r4, #31
 8006e4a:	d508      	bpl.n	8006e5e <_dtoa_r+0x36e>
 8006e4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006e50:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006e54:	f7f9 fbd0 	bl	80005f8 <__aeabi_dmul>
 8006e58:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006e5c:	3601      	adds	r6, #1
 8006e5e:	1064      	asrs	r4, r4, #1
 8006e60:	3508      	adds	r5, #8
 8006e62:	e7e5      	b.n	8006e30 <_dtoa_r+0x340>
 8006e64:	f000 80af 	beq.w	8006fc6 <_dtoa_r+0x4d6>
 8006e68:	427c      	negs	r4, r7
 8006e6a:	4b81      	ldr	r3, [pc, #516]	@ (8007070 <_dtoa_r+0x580>)
 8006e6c:	4d81      	ldr	r5, [pc, #516]	@ (8007074 <_dtoa_r+0x584>)
 8006e6e:	f004 020f 	and.w	r2, r4, #15
 8006e72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006e76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006e7e:	f7f9 fbbb 	bl	80005f8 <__aeabi_dmul>
 8006e82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006e86:	1124      	asrs	r4, r4, #4
 8006e88:	2300      	movs	r3, #0
 8006e8a:	2602      	movs	r6, #2
 8006e8c:	2c00      	cmp	r4, #0
 8006e8e:	f040 808f 	bne.w	8006fb0 <_dtoa_r+0x4c0>
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d1d3      	bne.n	8006e3e <_dtoa_r+0x34e>
 8006e96:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006e98:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	f000 8094 	beq.w	8006fca <_dtoa_r+0x4da>
 8006ea2:	4b75      	ldr	r3, [pc, #468]	@ (8007078 <_dtoa_r+0x588>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	4620      	mov	r0, r4
 8006ea8:	4629      	mov	r1, r5
 8006eaa:	f7f9 fe17 	bl	8000adc <__aeabi_dcmplt>
 8006eae:	2800      	cmp	r0, #0
 8006eb0:	f000 808b 	beq.w	8006fca <_dtoa_r+0x4da>
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8087 	beq.w	8006fca <_dtoa_r+0x4da>
 8006ebc:	f1bb 0f00 	cmp.w	fp, #0
 8006ec0:	dd34      	ble.n	8006f2c <_dtoa_r+0x43c>
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	4b6d      	ldr	r3, [pc, #436]	@ (800707c <_dtoa_r+0x58c>)
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	4629      	mov	r1, r5
 8006eca:	f7f9 fb95 	bl	80005f8 <__aeabi_dmul>
 8006ece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006ed2:	f107 38ff 	add.w	r8, r7, #4294967295
 8006ed6:	3601      	adds	r6, #1
 8006ed8:	465c      	mov	r4, fp
 8006eda:	4630      	mov	r0, r6
 8006edc:	f7f9 fb22 	bl	8000524 <__aeabi_i2d>
 8006ee0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ee4:	f7f9 fb88 	bl	80005f8 <__aeabi_dmul>
 8006ee8:	4b65      	ldr	r3, [pc, #404]	@ (8007080 <_dtoa_r+0x590>)
 8006eea:	2200      	movs	r2, #0
 8006eec:	f7f9 f9ce 	bl	800028c <__adddf3>
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006ef6:	2c00      	cmp	r4, #0
 8006ef8:	d16a      	bne.n	8006fd0 <_dtoa_r+0x4e0>
 8006efa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006efe:	4b61      	ldr	r3, [pc, #388]	@ (8007084 <_dtoa_r+0x594>)
 8006f00:	2200      	movs	r2, #0
 8006f02:	f7f9 f9c1 	bl	8000288 <__aeabi_dsub>
 8006f06:	4602      	mov	r2, r0
 8006f08:	460b      	mov	r3, r1
 8006f0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006f0e:	462a      	mov	r2, r5
 8006f10:	4633      	mov	r3, r6
 8006f12:	f7f9 fe01 	bl	8000b18 <__aeabi_dcmpgt>
 8006f16:	2800      	cmp	r0, #0
 8006f18:	f040 8298 	bne.w	800744c <_dtoa_r+0x95c>
 8006f1c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f20:	462a      	mov	r2, r5
 8006f22:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006f26:	f7f9 fdd9 	bl	8000adc <__aeabi_dcmplt>
 8006f2a:	bb38      	cbnz	r0, 8006f7c <_dtoa_r+0x48c>
 8006f2c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006f30:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006f34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	f2c0 8157 	blt.w	80071ea <_dtoa_r+0x6fa>
 8006f3c:	2f0e      	cmp	r7, #14
 8006f3e:	f300 8154 	bgt.w	80071ea <_dtoa_r+0x6fa>
 8006f42:	4b4b      	ldr	r3, [pc, #300]	@ (8007070 <_dtoa_r+0x580>)
 8006f44:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006f48:	ed93 7b00 	vldr	d7, [r3]
 8006f4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	ed8d 7b00 	vstr	d7, [sp]
 8006f54:	f280 80e5 	bge.w	8007122 <_dtoa_r+0x632>
 8006f58:	9b03      	ldr	r3, [sp, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f300 80e1 	bgt.w	8007122 <_dtoa_r+0x632>
 8006f60:	d10c      	bne.n	8006f7c <_dtoa_r+0x48c>
 8006f62:	4b48      	ldr	r3, [pc, #288]	@ (8007084 <_dtoa_r+0x594>)
 8006f64:	2200      	movs	r2, #0
 8006f66:	ec51 0b17 	vmov	r0, r1, d7
 8006f6a:	f7f9 fb45 	bl	80005f8 <__aeabi_dmul>
 8006f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f72:	f7f9 fdc7 	bl	8000b04 <__aeabi_dcmpge>
 8006f76:	2800      	cmp	r0, #0
 8006f78:	f000 8266 	beq.w	8007448 <_dtoa_r+0x958>
 8006f7c:	2400      	movs	r4, #0
 8006f7e:	4625      	mov	r5, r4
 8006f80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006f82:	4656      	mov	r6, sl
 8006f84:	ea6f 0803 	mvn.w	r8, r3
 8006f88:	2700      	movs	r7, #0
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	4648      	mov	r0, r9
 8006f8e:	f000 fcbf 	bl	8007910 <_Bfree>
 8006f92:	2d00      	cmp	r5, #0
 8006f94:	f000 80bd 	beq.w	8007112 <_dtoa_r+0x622>
 8006f98:	b12f      	cbz	r7, 8006fa6 <_dtoa_r+0x4b6>
 8006f9a:	42af      	cmp	r7, r5
 8006f9c:	d003      	beq.n	8006fa6 <_dtoa_r+0x4b6>
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	4648      	mov	r0, r9
 8006fa2:	f000 fcb5 	bl	8007910 <_Bfree>
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	4648      	mov	r0, r9
 8006faa:	f000 fcb1 	bl	8007910 <_Bfree>
 8006fae:	e0b0      	b.n	8007112 <_dtoa_r+0x622>
 8006fb0:	07e2      	lsls	r2, r4, #31
 8006fb2:	d505      	bpl.n	8006fc0 <_dtoa_r+0x4d0>
 8006fb4:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006fb8:	f7f9 fb1e 	bl	80005f8 <__aeabi_dmul>
 8006fbc:	3601      	adds	r6, #1
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	1064      	asrs	r4, r4, #1
 8006fc2:	3508      	adds	r5, #8
 8006fc4:	e762      	b.n	8006e8c <_dtoa_r+0x39c>
 8006fc6:	2602      	movs	r6, #2
 8006fc8:	e765      	b.n	8006e96 <_dtoa_r+0x3a6>
 8006fca:	9c03      	ldr	r4, [sp, #12]
 8006fcc:	46b8      	mov	r8, r7
 8006fce:	e784      	b.n	8006eda <_dtoa_r+0x3ea>
 8006fd0:	4b27      	ldr	r3, [pc, #156]	@ (8007070 <_dtoa_r+0x580>)
 8006fd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006fd4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006fd8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006fdc:	4454      	add	r4, sl
 8006fde:	2900      	cmp	r1, #0
 8006fe0:	d054      	beq.n	800708c <_dtoa_r+0x59c>
 8006fe2:	4929      	ldr	r1, [pc, #164]	@ (8007088 <_dtoa_r+0x598>)
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	f7f9 fc31 	bl	800084c <__aeabi_ddiv>
 8006fea:	4633      	mov	r3, r6
 8006fec:	462a      	mov	r2, r5
 8006fee:	f7f9 f94b 	bl	8000288 <__aeabi_dsub>
 8006ff2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ff6:	4656      	mov	r6, sl
 8006ff8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ffc:	f7f9 fdac 	bl	8000b58 <__aeabi_d2iz>
 8007000:	4605      	mov	r5, r0
 8007002:	f7f9 fa8f 	bl	8000524 <__aeabi_i2d>
 8007006:	4602      	mov	r2, r0
 8007008:	460b      	mov	r3, r1
 800700a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800700e:	f7f9 f93b 	bl	8000288 <__aeabi_dsub>
 8007012:	3530      	adds	r5, #48	@ 0x30
 8007014:	4602      	mov	r2, r0
 8007016:	460b      	mov	r3, r1
 8007018:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800701c:	f806 5b01 	strb.w	r5, [r6], #1
 8007020:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007024:	f7f9 fd5a 	bl	8000adc <__aeabi_dcmplt>
 8007028:	2800      	cmp	r0, #0
 800702a:	d172      	bne.n	8007112 <_dtoa_r+0x622>
 800702c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007030:	4911      	ldr	r1, [pc, #68]	@ (8007078 <_dtoa_r+0x588>)
 8007032:	2000      	movs	r0, #0
 8007034:	f7f9 f928 	bl	8000288 <__aeabi_dsub>
 8007038:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800703c:	f7f9 fd4e 	bl	8000adc <__aeabi_dcmplt>
 8007040:	2800      	cmp	r0, #0
 8007042:	f040 80b4 	bne.w	80071ae <_dtoa_r+0x6be>
 8007046:	42a6      	cmp	r6, r4
 8007048:	f43f af70 	beq.w	8006f2c <_dtoa_r+0x43c>
 800704c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007050:	4b0a      	ldr	r3, [pc, #40]	@ (800707c <_dtoa_r+0x58c>)
 8007052:	2200      	movs	r2, #0
 8007054:	f7f9 fad0 	bl	80005f8 <__aeabi_dmul>
 8007058:	4b08      	ldr	r3, [pc, #32]	@ (800707c <_dtoa_r+0x58c>)
 800705a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800705e:	2200      	movs	r2, #0
 8007060:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007064:	f7f9 fac8 	bl	80005f8 <__aeabi_dmul>
 8007068:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800706c:	e7c4      	b.n	8006ff8 <_dtoa_r+0x508>
 800706e:	bf00      	nop
 8007070:	08008d20 	.word	0x08008d20
 8007074:	08008cf8 	.word	0x08008cf8
 8007078:	3ff00000 	.word	0x3ff00000
 800707c:	40240000 	.word	0x40240000
 8007080:	401c0000 	.word	0x401c0000
 8007084:	40140000 	.word	0x40140000
 8007088:	3fe00000 	.word	0x3fe00000
 800708c:	4631      	mov	r1, r6
 800708e:	4628      	mov	r0, r5
 8007090:	f7f9 fab2 	bl	80005f8 <__aeabi_dmul>
 8007094:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007098:	9413      	str	r4, [sp, #76]	@ 0x4c
 800709a:	4656      	mov	r6, sl
 800709c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070a0:	f7f9 fd5a 	bl	8000b58 <__aeabi_d2iz>
 80070a4:	4605      	mov	r5, r0
 80070a6:	f7f9 fa3d 	bl	8000524 <__aeabi_i2d>
 80070aa:	4602      	mov	r2, r0
 80070ac:	460b      	mov	r3, r1
 80070ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070b2:	f7f9 f8e9 	bl	8000288 <__aeabi_dsub>
 80070b6:	3530      	adds	r5, #48	@ 0x30
 80070b8:	f806 5b01 	strb.w	r5, [r6], #1
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	42a6      	cmp	r6, r4
 80070c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070c6:	f04f 0200 	mov.w	r2, #0
 80070ca:	d124      	bne.n	8007116 <_dtoa_r+0x626>
 80070cc:	4baf      	ldr	r3, [pc, #700]	@ (800738c <_dtoa_r+0x89c>)
 80070ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80070d2:	f7f9 f8db 	bl	800028c <__adddf3>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070de:	f7f9 fd1b 	bl	8000b18 <__aeabi_dcmpgt>
 80070e2:	2800      	cmp	r0, #0
 80070e4:	d163      	bne.n	80071ae <_dtoa_r+0x6be>
 80070e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80070ea:	49a8      	ldr	r1, [pc, #672]	@ (800738c <_dtoa_r+0x89c>)
 80070ec:	2000      	movs	r0, #0
 80070ee:	f7f9 f8cb 	bl	8000288 <__aeabi_dsub>
 80070f2:	4602      	mov	r2, r0
 80070f4:	460b      	mov	r3, r1
 80070f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070fa:	f7f9 fcef 	bl	8000adc <__aeabi_dcmplt>
 80070fe:	2800      	cmp	r0, #0
 8007100:	f43f af14 	beq.w	8006f2c <_dtoa_r+0x43c>
 8007104:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007106:	1e73      	subs	r3, r6, #1
 8007108:	9313      	str	r3, [sp, #76]	@ 0x4c
 800710a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800710e:	2b30      	cmp	r3, #48	@ 0x30
 8007110:	d0f8      	beq.n	8007104 <_dtoa_r+0x614>
 8007112:	4647      	mov	r7, r8
 8007114:	e03b      	b.n	800718e <_dtoa_r+0x69e>
 8007116:	4b9e      	ldr	r3, [pc, #632]	@ (8007390 <_dtoa_r+0x8a0>)
 8007118:	f7f9 fa6e 	bl	80005f8 <__aeabi_dmul>
 800711c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007120:	e7bc      	b.n	800709c <_dtoa_r+0x5ac>
 8007122:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007126:	4656      	mov	r6, sl
 8007128:	e9dd 2300 	ldrd	r2, r3, [sp]
 800712c:	4620      	mov	r0, r4
 800712e:	4629      	mov	r1, r5
 8007130:	f7f9 fb8c 	bl	800084c <__aeabi_ddiv>
 8007134:	f7f9 fd10 	bl	8000b58 <__aeabi_d2iz>
 8007138:	4680      	mov	r8, r0
 800713a:	f7f9 f9f3 	bl	8000524 <__aeabi_i2d>
 800713e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007142:	f7f9 fa59 	bl	80005f8 <__aeabi_dmul>
 8007146:	4602      	mov	r2, r0
 8007148:	460b      	mov	r3, r1
 800714a:	4620      	mov	r0, r4
 800714c:	4629      	mov	r1, r5
 800714e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007152:	f7f9 f899 	bl	8000288 <__aeabi_dsub>
 8007156:	f806 4b01 	strb.w	r4, [r6], #1
 800715a:	9d03      	ldr	r5, [sp, #12]
 800715c:	eba6 040a 	sub.w	r4, r6, sl
 8007160:	42a5      	cmp	r5, r4
 8007162:	4602      	mov	r2, r0
 8007164:	460b      	mov	r3, r1
 8007166:	d133      	bne.n	80071d0 <_dtoa_r+0x6e0>
 8007168:	f7f9 f890 	bl	800028c <__adddf3>
 800716c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007170:	4604      	mov	r4, r0
 8007172:	460d      	mov	r5, r1
 8007174:	f7f9 fcd0 	bl	8000b18 <__aeabi_dcmpgt>
 8007178:	b9c0      	cbnz	r0, 80071ac <_dtoa_r+0x6bc>
 800717a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800717e:	4620      	mov	r0, r4
 8007180:	4629      	mov	r1, r5
 8007182:	f7f9 fca1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007186:	b110      	cbz	r0, 800718e <_dtoa_r+0x69e>
 8007188:	f018 0f01 	tst.w	r8, #1
 800718c:	d10e      	bne.n	80071ac <_dtoa_r+0x6bc>
 800718e:	9902      	ldr	r1, [sp, #8]
 8007190:	4648      	mov	r0, r9
 8007192:	f000 fbbd 	bl	8007910 <_Bfree>
 8007196:	2300      	movs	r3, #0
 8007198:	7033      	strb	r3, [r6, #0]
 800719a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800719c:	3701      	adds	r7, #1
 800719e:	601f      	str	r7, [r3, #0]
 80071a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f000 824b 	beq.w	800763e <_dtoa_r+0xb4e>
 80071a8:	601e      	str	r6, [r3, #0]
 80071aa:	e248      	b.n	800763e <_dtoa_r+0xb4e>
 80071ac:	46b8      	mov	r8, r7
 80071ae:	4633      	mov	r3, r6
 80071b0:	461e      	mov	r6, r3
 80071b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80071b6:	2a39      	cmp	r2, #57	@ 0x39
 80071b8:	d106      	bne.n	80071c8 <_dtoa_r+0x6d8>
 80071ba:	459a      	cmp	sl, r3
 80071bc:	d1f8      	bne.n	80071b0 <_dtoa_r+0x6c0>
 80071be:	2230      	movs	r2, #48	@ 0x30
 80071c0:	f108 0801 	add.w	r8, r8, #1
 80071c4:	f88a 2000 	strb.w	r2, [sl]
 80071c8:	781a      	ldrb	r2, [r3, #0]
 80071ca:	3201      	adds	r2, #1
 80071cc:	701a      	strb	r2, [r3, #0]
 80071ce:	e7a0      	b.n	8007112 <_dtoa_r+0x622>
 80071d0:	4b6f      	ldr	r3, [pc, #444]	@ (8007390 <_dtoa_r+0x8a0>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	f7f9 fa10 	bl	80005f8 <__aeabi_dmul>
 80071d8:	2200      	movs	r2, #0
 80071da:	2300      	movs	r3, #0
 80071dc:	4604      	mov	r4, r0
 80071de:	460d      	mov	r5, r1
 80071e0:	f7f9 fc72 	bl	8000ac8 <__aeabi_dcmpeq>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d09f      	beq.n	8007128 <_dtoa_r+0x638>
 80071e8:	e7d1      	b.n	800718e <_dtoa_r+0x69e>
 80071ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071ec:	2a00      	cmp	r2, #0
 80071ee:	f000 80ea 	beq.w	80073c6 <_dtoa_r+0x8d6>
 80071f2:	9a07      	ldr	r2, [sp, #28]
 80071f4:	2a01      	cmp	r2, #1
 80071f6:	f300 80cd 	bgt.w	8007394 <_dtoa_r+0x8a4>
 80071fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80071fc:	2a00      	cmp	r2, #0
 80071fe:	f000 80c1 	beq.w	8007384 <_dtoa_r+0x894>
 8007202:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007206:	9c08      	ldr	r4, [sp, #32]
 8007208:	9e00      	ldr	r6, [sp, #0]
 800720a:	9a00      	ldr	r2, [sp, #0]
 800720c:	441a      	add	r2, r3
 800720e:	9200      	str	r2, [sp, #0]
 8007210:	9a06      	ldr	r2, [sp, #24]
 8007212:	2101      	movs	r1, #1
 8007214:	441a      	add	r2, r3
 8007216:	4648      	mov	r0, r9
 8007218:	9206      	str	r2, [sp, #24]
 800721a:	f000 fc2d 	bl	8007a78 <__i2b>
 800721e:	4605      	mov	r5, r0
 8007220:	b166      	cbz	r6, 800723c <_dtoa_r+0x74c>
 8007222:	9b06      	ldr	r3, [sp, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	dd09      	ble.n	800723c <_dtoa_r+0x74c>
 8007228:	42b3      	cmp	r3, r6
 800722a:	9a00      	ldr	r2, [sp, #0]
 800722c:	bfa8      	it	ge
 800722e:	4633      	movge	r3, r6
 8007230:	1ad2      	subs	r2, r2, r3
 8007232:	9200      	str	r2, [sp, #0]
 8007234:	9a06      	ldr	r2, [sp, #24]
 8007236:	1af6      	subs	r6, r6, r3
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	9306      	str	r3, [sp, #24]
 800723c:	9b08      	ldr	r3, [sp, #32]
 800723e:	b30b      	cbz	r3, 8007284 <_dtoa_r+0x794>
 8007240:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 80c6 	beq.w	80073d4 <_dtoa_r+0x8e4>
 8007248:	2c00      	cmp	r4, #0
 800724a:	f000 80c0 	beq.w	80073ce <_dtoa_r+0x8de>
 800724e:	4629      	mov	r1, r5
 8007250:	4622      	mov	r2, r4
 8007252:	4648      	mov	r0, r9
 8007254:	f000 fcc8 	bl	8007be8 <__pow5mult>
 8007258:	9a02      	ldr	r2, [sp, #8]
 800725a:	4601      	mov	r1, r0
 800725c:	4605      	mov	r5, r0
 800725e:	4648      	mov	r0, r9
 8007260:	f000 fc20 	bl	8007aa4 <__multiply>
 8007264:	9902      	ldr	r1, [sp, #8]
 8007266:	4680      	mov	r8, r0
 8007268:	4648      	mov	r0, r9
 800726a:	f000 fb51 	bl	8007910 <_Bfree>
 800726e:	9b08      	ldr	r3, [sp, #32]
 8007270:	1b1b      	subs	r3, r3, r4
 8007272:	9308      	str	r3, [sp, #32]
 8007274:	f000 80b1 	beq.w	80073da <_dtoa_r+0x8ea>
 8007278:	9a08      	ldr	r2, [sp, #32]
 800727a:	4641      	mov	r1, r8
 800727c:	4648      	mov	r0, r9
 800727e:	f000 fcb3 	bl	8007be8 <__pow5mult>
 8007282:	9002      	str	r0, [sp, #8]
 8007284:	2101      	movs	r1, #1
 8007286:	4648      	mov	r0, r9
 8007288:	f000 fbf6 	bl	8007a78 <__i2b>
 800728c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800728e:	4604      	mov	r4, r0
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 81d8 	beq.w	8007646 <_dtoa_r+0xb56>
 8007296:	461a      	mov	r2, r3
 8007298:	4601      	mov	r1, r0
 800729a:	4648      	mov	r0, r9
 800729c:	f000 fca4 	bl	8007be8 <__pow5mult>
 80072a0:	9b07      	ldr	r3, [sp, #28]
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	4604      	mov	r4, r0
 80072a6:	f300 809f 	bgt.w	80073e8 <_dtoa_r+0x8f8>
 80072aa:	9b04      	ldr	r3, [sp, #16]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	f040 8097 	bne.w	80073e0 <_dtoa_r+0x8f0>
 80072b2:	9b05      	ldr	r3, [sp, #20]
 80072b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	f040 8093 	bne.w	80073e4 <_dtoa_r+0x8f4>
 80072be:	9b05      	ldr	r3, [sp, #20]
 80072c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80072c4:	0d1b      	lsrs	r3, r3, #20
 80072c6:	051b      	lsls	r3, r3, #20
 80072c8:	b133      	cbz	r3, 80072d8 <_dtoa_r+0x7e8>
 80072ca:	9b00      	ldr	r3, [sp, #0]
 80072cc:	3301      	adds	r3, #1
 80072ce:	9300      	str	r3, [sp, #0]
 80072d0:	9b06      	ldr	r3, [sp, #24]
 80072d2:	3301      	adds	r3, #1
 80072d4:	9306      	str	r3, [sp, #24]
 80072d6:	2301      	movs	r3, #1
 80072d8:	9308      	str	r3, [sp, #32]
 80072da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 81b8 	beq.w	8007652 <_dtoa_r+0xb62>
 80072e2:	6923      	ldr	r3, [r4, #16]
 80072e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80072e8:	6918      	ldr	r0, [r3, #16]
 80072ea:	f000 fb79 	bl	80079e0 <__hi0bits>
 80072ee:	f1c0 0020 	rsb	r0, r0, #32
 80072f2:	9b06      	ldr	r3, [sp, #24]
 80072f4:	4418      	add	r0, r3
 80072f6:	f010 001f 	ands.w	r0, r0, #31
 80072fa:	f000 8082 	beq.w	8007402 <_dtoa_r+0x912>
 80072fe:	f1c0 0320 	rsb	r3, r0, #32
 8007302:	2b04      	cmp	r3, #4
 8007304:	dd73      	ble.n	80073ee <_dtoa_r+0x8fe>
 8007306:	9b00      	ldr	r3, [sp, #0]
 8007308:	f1c0 001c 	rsb	r0, r0, #28
 800730c:	4403      	add	r3, r0
 800730e:	9300      	str	r3, [sp, #0]
 8007310:	9b06      	ldr	r3, [sp, #24]
 8007312:	4403      	add	r3, r0
 8007314:	4406      	add	r6, r0
 8007316:	9306      	str	r3, [sp, #24]
 8007318:	9b00      	ldr	r3, [sp, #0]
 800731a:	2b00      	cmp	r3, #0
 800731c:	dd05      	ble.n	800732a <_dtoa_r+0x83a>
 800731e:	9902      	ldr	r1, [sp, #8]
 8007320:	461a      	mov	r2, r3
 8007322:	4648      	mov	r0, r9
 8007324:	f000 fcba 	bl	8007c9c <__lshift>
 8007328:	9002      	str	r0, [sp, #8]
 800732a:	9b06      	ldr	r3, [sp, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	dd05      	ble.n	800733c <_dtoa_r+0x84c>
 8007330:	4621      	mov	r1, r4
 8007332:	461a      	mov	r2, r3
 8007334:	4648      	mov	r0, r9
 8007336:	f000 fcb1 	bl	8007c9c <__lshift>
 800733a:	4604      	mov	r4, r0
 800733c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800733e:	2b00      	cmp	r3, #0
 8007340:	d061      	beq.n	8007406 <_dtoa_r+0x916>
 8007342:	9802      	ldr	r0, [sp, #8]
 8007344:	4621      	mov	r1, r4
 8007346:	f000 fd15 	bl	8007d74 <__mcmp>
 800734a:	2800      	cmp	r0, #0
 800734c:	da5b      	bge.n	8007406 <_dtoa_r+0x916>
 800734e:	2300      	movs	r3, #0
 8007350:	9902      	ldr	r1, [sp, #8]
 8007352:	220a      	movs	r2, #10
 8007354:	4648      	mov	r0, r9
 8007356:	f000 fafd 	bl	8007954 <__multadd>
 800735a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800735c:	9002      	str	r0, [sp, #8]
 800735e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007362:	2b00      	cmp	r3, #0
 8007364:	f000 8177 	beq.w	8007656 <_dtoa_r+0xb66>
 8007368:	4629      	mov	r1, r5
 800736a:	2300      	movs	r3, #0
 800736c:	220a      	movs	r2, #10
 800736e:	4648      	mov	r0, r9
 8007370:	f000 faf0 	bl	8007954 <__multadd>
 8007374:	f1bb 0f00 	cmp.w	fp, #0
 8007378:	4605      	mov	r5, r0
 800737a:	dc6f      	bgt.n	800745c <_dtoa_r+0x96c>
 800737c:	9b07      	ldr	r3, [sp, #28]
 800737e:	2b02      	cmp	r3, #2
 8007380:	dc49      	bgt.n	8007416 <_dtoa_r+0x926>
 8007382:	e06b      	b.n	800745c <_dtoa_r+0x96c>
 8007384:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007386:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800738a:	e73c      	b.n	8007206 <_dtoa_r+0x716>
 800738c:	3fe00000 	.word	0x3fe00000
 8007390:	40240000 	.word	0x40240000
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	1e5c      	subs	r4, r3, #1
 8007398:	9b08      	ldr	r3, [sp, #32]
 800739a:	42a3      	cmp	r3, r4
 800739c:	db09      	blt.n	80073b2 <_dtoa_r+0x8c2>
 800739e:	1b1c      	subs	r4, r3, r4
 80073a0:	9b03      	ldr	r3, [sp, #12]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f6bf af30 	bge.w	8007208 <_dtoa_r+0x718>
 80073a8:	9b00      	ldr	r3, [sp, #0]
 80073aa:	9a03      	ldr	r2, [sp, #12]
 80073ac:	1a9e      	subs	r6, r3, r2
 80073ae:	2300      	movs	r3, #0
 80073b0:	e72b      	b.n	800720a <_dtoa_r+0x71a>
 80073b2:	9b08      	ldr	r3, [sp, #32]
 80073b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80073b6:	9408      	str	r4, [sp, #32]
 80073b8:	1ae3      	subs	r3, r4, r3
 80073ba:	441a      	add	r2, r3
 80073bc:	9e00      	ldr	r6, [sp, #0]
 80073be:	9b03      	ldr	r3, [sp, #12]
 80073c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80073c2:	2400      	movs	r4, #0
 80073c4:	e721      	b.n	800720a <_dtoa_r+0x71a>
 80073c6:	9c08      	ldr	r4, [sp, #32]
 80073c8:	9e00      	ldr	r6, [sp, #0]
 80073ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80073cc:	e728      	b.n	8007220 <_dtoa_r+0x730>
 80073ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80073d2:	e751      	b.n	8007278 <_dtoa_r+0x788>
 80073d4:	9a08      	ldr	r2, [sp, #32]
 80073d6:	9902      	ldr	r1, [sp, #8]
 80073d8:	e750      	b.n	800727c <_dtoa_r+0x78c>
 80073da:	f8cd 8008 	str.w	r8, [sp, #8]
 80073de:	e751      	b.n	8007284 <_dtoa_r+0x794>
 80073e0:	2300      	movs	r3, #0
 80073e2:	e779      	b.n	80072d8 <_dtoa_r+0x7e8>
 80073e4:	9b04      	ldr	r3, [sp, #16]
 80073e6:	e777      	b.n	80072d8 <_dtoa_r+0x7e8>
 80073e8:	2300      	movs	r3, #0
 80073ea:	9308      	str	r3, [sp, #32]
 80073ec:	e779      	b.n	80072e2 <_dtoa_r+0x7f2>
 80073ee:	d093      	beq.n	8007318 <_dtoa_r+0x828>
 80073f0:	9a00      	ldr	r2, [sp, #0]
 80073f2:	331c      	adds	r3, #28
 80073f4:	441a      	add	r2, r3
 80073f6:	9200      	str	r2, [sp, #0]
 80073f8:	9a06      	ldr	r2, [sp, #24]
 80073fa:	441a      	add	r2, r3
 80073fc:	441e      	add	r6, r3
 80073fe:	9206      	str	r2, [sp, #24]
 8007400:	e78a      	b.n	8007318 <_dtoa_r+0x828>
 8007402:	4603      	mov	r3, r0
 8007404:	e7f4      	b.n	80073f0 <_dtoa_r+0x900>
 8007406:	9b03      	ldr	r3, [sp, #12]
 8007408:	2b00      	cmp	r3, #0
 800740a:	46b8      	mov	r8, r7
 800740c:	dc20      	bgt.n	8007450 <_dtoa_r+0x960>
 800740e:	469b      	mov	fp, r3
 8007410:	9b07      	ldr	r3, [sp, #28]
 8007412:	2b02      	cmp	r3, #2
 8007414:	dd1e      	ble.n	8007454 <_dtoa_r+0x964>
 8007416:	f1bb 0f00 	cmp.w	fp, #0
 800741a:	f47f adb1 	bne.w	8006f80 <_dtoa_r+0x490>
 800741e:	4621      	mov	r1, r4
 8007420:	465b      	mov	r3, fp
 8007422:	2205      	movs	r2, #5
 8007424:	4648      	mov	r0, r9
 8007426:	f000 fa95 	bl	8007954 <__multadd>
 800742a:	4601      	mov	r1, r0
 800742c:	4604      	mov	r4, r0
 800742e:	9802      	ldr	r0, [sp, #8]
 8007430:	f000 fca0 	bl	8007d74 <__mcmp>
 8007434:	2800      	cmp	r0, #0
 8007436:	f77f ada3 	ble.w	8006f80 <_dtoa_r+0x490>
 800743a:	4656      	mov	r6, sl
 800743c:	2331      	movs	r3, #49	@ 0x31
 800743e:	f806 3b01 	strb.w	r3, [r6], #1
 8007442:	f108 0801 	add.w	r8, r8, #1
 8007446:	e59f      	b.n	8006f88 <_dtoa_r+0x498>
 8007448:	9c03      	ldr	r4, [sp, #12]
 800744a:	46b8      	mov	r8, r7
 800744c:	4625      	mov	r5, r4
 800744e:	e7f4      	b.n	800743a <_dtoa_r+0x94a>
 8007450:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8101 	beq.w	800765e <_dtoa_r+0xb6e>
 800745c:	2e00      	cmp	r6, #0
 800745e:	dd05      	ble.n	800746c <_dtoa_r+0x97c>
 8007460:	4629      	mov	r1, r5
 8007462:	4632      	mov	r2, r6
 8007464:	4648      	mov	r0, r9
 8007466:	f000 fc19 	bl	8007c9c <__lshift>
 800746a:	4605      	mov	r5, r0
 800746c:	9b08      	ldr	r3, [sp, #32]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d05c      	beq.n	800752c <_dtoa_r+0xa3c>
 8007472:	6869      	ldr	r1, [r5, #4]
 8007474:	4648      	mov	r0, r9
 8007476:	f000 fa0b 	bl	8007890 <_Balloc>
 800747a:	4606      	mov	r6, r0
 800747c:	b928      	cbnz	r0, 800748a <_dtoa_r+0x99a>
 800747e:	4b82      	ldr	r3, [pc, #520]	@ (8007688 <_dtoa_r+0xb98>)
 8007480:	4602      	mov	r2, r0
 8007482:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007486:	f7ff bb4a 	b.w	8006b1e <_dtoa_r+0x2e>
 800748a:	692a      	ldr	r2, [r5, #16]
 800748c:	3202      	adds	r2, #2
 800748e:	0092      	lsls	r2, r2, #2
 8007490:	f105 010c 	add.w	r1, r5, #12
 8007494:	300c      	adds	r0, #12
 8007496:	f000 ffa3 	bl	80083e0 <memcpy>
 800749a:	2201      	movs	r2, #1
 800749c:	4631      	mov	r1, r6
 800749e:	4648      	mov	r0, r9
 80074a0:	f000 fbfc 	bl	8007c9c <__lshift>
 80074a4:	f10a 0301 	add.w	r3, sl, #1
 80074a8:	9300      	str	r3, [sp, #0]
 80074aa:	eb0a 030b 	add.w	r3, sl, fp
 80074ae:	9308      	str	r3, [sp, #32]
 80074b0:	9b04      	ldr	r3, [sp, #16]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	462f      	mov	r7, r5
 80074b8:	9306      	str	r3, [sp, #24]
 80074ba:	4605      	mov	r5, r0
 80074bc:	9b00      	ldr	r3, [sp, #0]
 80074be:	9802      	ldr	r0, [sp, #8]
 80074c0:	4621      	mov	r1, r4
 80074c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80074c6:	f7ff fa88 	bl	80069da <quorem>
 80074ca:	4603      	mov	r3, r0
 80074cc:	3330      	adds	r3, #48	@ 0x30
 80074ce:	9003      	str	r0, [sp, #12]
 80074d0:	4639      	mov	r1, r7
 80074d2:	9802      	ldr	r0, [sp, #8]
 80074d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80074d6:	f000 fc4d 	bl	8007d74 <__mcmp>
 80074da:	462a      	mov	r2, r5
 80074dc:	9004      	str	r0, [sp, #16]
 80074de:	4621      	mov	r1, r4
 80074e0:	4648      	mov	r0, r9
 80074e2:	f000 fc63 	bl	8007dac <__mdiff>
 80074e6:	68c2      	ldr	r2, [r0, #12]
 80074e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074ea:	4606      	mov	r6, r0
 80074ec:	bb02      	cbnz	r2, 8007530 <_dtoa_r+0xa40>
 80074ee:	4601      	mov	r1, r0
 80074f0:	9802      	ldr	r0, [sp, #8]
 80074f2:	f000 fc3f 	bl	8007d74 <__mcmp>
 80074f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074f8:	4602      	mov	r2, r0
 80074fa:	4631      	mov	r1, r6
 80074fc:	4648      	mov	r0, r9
 80074fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8007500:	9309      	str	r3, [sp, #36]	@ 0x24
 8007502:	f000 fa05 	bl	8007910 <_Bfree>
 8007506:	9b07      	ldr	r3, [sp, #28]
 8007508:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800750a:	9e00      	ldr	r6, [sp, #0]
 800750c:	ea42 0103 	orr.w	r1, r2, r3
 8007510:	9b06      	ldr	r3, [sp, #24]
 8007512:	4319      	orrs	r1, r3
 8007514:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007516:	d10d      	bne.n	8007534 <_dtoa_r+0xa44>
 8007518:	2b39      	cmp	r3, #57	@ 0x39
 800751a:	d027      	beq.n	800756c <_dtoa_r+0xa7c>
 800751c:	9a04      	ldr	r2, [sp, #16]
 800751e:	2a00      	cmp	r2, #0
 8007520:	dd01      	ble.n	8007526 <_dtoa_r+0xa36>
 8007522:	9b03      	ldr	r3, [sp, #12]
 8007524:	3331      	adds	r3, #49	@ 0x31
 8007526:	f88b 3000 	strb.w	r3, [fp]
 800752a:	e52e      	b.n	8006f8a <_dtoa_r+0x49a>
 800752c:	4628      	mov	r0, r5
 800752e:	e7b9      	b.n	80074a4 <_dtoa_r+0x9b4>
 8007530:	2201      	movs	r2, #1
 8007532:	e7e2      	b.n	80074fa <_dtoa_r+0xa0a>
 8007534:	9904      	ldr	r1, [sp, #16]
 8007536:	2900      	cmp	r1, #0
 8007538:	db04      	blt.n	8007544 <_dtoa_r+0xa54>
 800753a:	9807      	ldr	r0, [sp, #28]
 800753c:	4301      	orrs	r1, r0
 800753e:	9806      	ldr	r0, [sp, #24]
 8007540:	4301      	orrs	r1, r0
 8007542:	d120      	bne.n	8007586 <_dtoa_r+0xa96>
 8007544:	2a00      	cmp	r2, #0
 8007546:	ddee      	ble.n	8007526 <_dtoa_r+0xa36>
 8007548:	9902      	ldr	r1, [sp, #8]
 800754a:	9300      	str	r3, [sp, #0]
 800754c:	2201      	movs	r2, #1
 800754e:	4648      	mov	r0, r9
 8007550:	f000 fba4 	bl	8007c9c <__lshift>
 8007554:	4621      	mov	r1, r4
 8007556:	9002      	str	r0, [sp, #8]
 8007558:	f000 fc0c 	bl	8007d74 <__mcmp>
 800755c:	2800      	cmp	r0, #0
 800755e:	9b00      	ldr	r3, [sp, #0]
 8007560:	dc02      	bgt.n	8007568 <_dtoa_r+0xa78>
 8007562:	d1e0      	bne.n	8007526 <_dtoa_r+0xa36>
 8007564:	07da      	lsls	r2, r3, #31
 8007566:	d5de      	bpl.n	8007526 <_dtoa_r+0xa36>
 8007568:	2b39      	cmp	r3, #57	@ 0x39
 800756a:	d1da      	bne.n	8007522 <_dtoa_r+0xa32>
 800756c:	2339      	movs	r3, #57	@ 0x39
 800756e:	f88b 3000 	strb.w	r3, [fp]
 8007572:	4633      	mov	r3, r6
 8007574:	461e      	mov	r6, r3
 8007576:	3b01      	subs	r3, #1
 8007578:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800757c:	2a39      	cmp	r2, #57	@ 0x39
 800757e:	d04e      	beq.n	800761e <_dtoa_r+0xb2e>
 8007580:	3201      	adds	r2, #1
 8007582:	701a      	strb	r2, [r3, #0]
 8007584:	e501      	b.n	8006f8a <_dtoa_r+0x49a>
 8007586:	2a00      	cmp	r2, #0
 8007588:	dd03      	ble.n	8007592 <_dtoa_r+0xaa2>
 800758a:	2b39      	cmp	r3, #57	@ 0x39
 800758c:	d0ee      	beq.n	800756c <_dtoa_r+0xa7c>
 800758e:	3301      	adds	r3, #1
 8007590:	e7c9      	b.n	8007526 <_dtoa_r+0xa36>
 8007592:	9a00      	ldr	r2, [sp, #0]
 8007594:	9908      	ldr	r1, [sp, #32]
 8007596:	f802 3c01 	strb.w	r3, [r2, #-1]
 800759a:	428a      	cmp	r2, r1
 800759c:	d028      	beq.n	80075f0 <_dtoa_r+0xb00>
 800759e:	9902      	ldr	r1, [sp, #8]
 80075a0:	2300      	movs	r3, #0
 80075a2:	220a      	movs	r2, #10
 80075a4:	4648      	mov	r0, r9
 80075a6:	f000 f9d5 	bl	8007954 <__multadd>
 80075aa:	42af      	cmp	r7, r5
 80075ac:	9002      	str	r0, [sp, #8]
 80075ae:	f04f 0300 	mov.w	r3, #0
 80075b2:	f04f 020a 	mov.w	r2, #10
 80075b6:	4639      	mov	r1, r7
 80075b8:	4648      	mov	r0, r9
 80075ba:	d107      	bne.n	80075cc <_dtoa_r+0xadc>
 80075bc:	f000 f9ca 	bl	8007954 <__multadd>
 80075c0:	4607      	mov	r7, r0
 80075c2:	4605      	mov	r5, r0
 80075c4:	9b00      	ldr	r3, [sp, #0]
 80075c6:	3301      	adds	r3, #1
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	e777      	b.n	80074bc <_dtoa_r+0x9cc>
 80075cc:	f000 f9c2 	bl	8007954 <__multadd>
 80075d0:	4629      	mov	r1, r5
 80075d2:	4607      	mov	r7, r0
 80075d4:	2300      	movs	r3, #0
 80075d6:	220a      	movs	r2, #10
 80075d8:	4648      	mov	r0, r9
 80075da:	f000 f9bb 	bl	8007954 <__multadd>
 80075de:	4605      	mov	r5, r0
 80075e0:	e7f0      	b.n	80075c4 <_dtoa_r+0xad4>
 80075e2:	f1bb 0f00 	cmp.w	fp, #0
 80075e6:	bfcc      	ite	gt
 80075e8:	465e      	movgt	r6, fp
 80075ea:	2601      	movle	r6, #1
 80075ec:	4456      	add	r6, sl
 80075ee:	2700      	movs	r7, #0
 80075f0:	9902      	ldr	r1, [sp, #8]
 80075f2:	9300      	str	r3, [sp, #0]
 80075f4:	2201      	movs	r2, #1
 80075f6:	4648      	mov	r0, r9
 80075f8:	f000 fb50 	bl	8007c9c <__lshift>
 80075fc:	4621      	mov	r1, r4
 80075fe:	9002      	str	r0, [sp, #8]
 8007600:	f000 fbb8 	bl	8007d74 <__mcmp>
 8007604:	2800      	cmp	r0, #0
 8007606:	dcb4      	bgt.n	8007572 <_dtoa_r+0xa82>
 8007608:	d102      	bne.n	8007610 <_dtoa_r+0xb20>
 800760a:	9b00      	ldr	r3, [sp, #0]
 800760c:	07db      	lsls	r3, r3, #31
 800760e:	d4b0      	bmi.n	8007572 <_dtoa_r+0xa82>
 8007610:	4633      	mov	r3, r6
 8007612:	461e      	mov	r6, r3
 8007614:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007618:	2a30      	cmp	r2, #48	@ 0x30
 800761a:	d0fa      	beq.n	8007612 <_dtoa_r+0xb22>
 800761c:	e4b5      	b.n	8006f8a <_dtoa_r+0x49a>
 800761e:	459a      	cmp	sl, r3
 8007620:	d1a8      	bne.n	8007574 <_dtoa_r+0xa84>
 8007622:	2331      	movs	r3, #49	@ 0x31
 8007624:	f108 0801 	add.w	r8, r8, #1
 8007628:	f88a 3000 	strb.w	r3, [sl]
 800762c:	e4ad      	b.n	8006f8a <_dtoa_r+0x49a>
 800762e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007630:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800768c <_dtoa_r+0xb9c>
 8007634:	b11b      	cbz	r3, 800763e <_dtoa_r+0xb4e>
 8007636:	f10a 0308 	add.w	r3, sl, #8
 800763a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800763c:	6013      	str	r3, [r2, #0]
 800763e:	4650      	mov	r0, sl
 8007640:	b017      	add	sp, #92	@ 0x5c
 8007642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007646:	9b07      	ldr	r3, [sp, #28]
 8007648:	2b01      	cmp	r3, #1
 800764a:	f77f ae2e 	ble.w	80072aa <_dtoa_r+0x7ba>
 800764e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007650:	9308      	str	r3, [sp, #32]
 8007652:	2001      	movs	r0, #1
 8007654:	e64d      	b.n	80072f2 <_dtoa_r+0x802>
 8007656:	f1bb 0f00 	cmp.w	fp, #0
 800765a:	f77f aed9 	ble.w	8007410 <_dtoa_r+0x920>
 800765e:	4656      	mov	r6, sl
 8007660:	9802      	ldr	r0, [sp, #8]
 8007662:	4621      	mov	r1, r4
 8007664:	f7ff f9b9 	bl	80069da <quorem>
 8007668:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800766c:	f806 3b01 	strb.w	r3, [r6], #1
 8007670:	eba6 020a 	sub.w	r2, r6, sl
 8007674:	4593      	cmp	fp, r2
 8007676:	ddb4      	ble.n	80075e2 <_dtoa_r+0xaf2>
 8007678:	9902      	ldr	r1, [sp, #8]
 800767a:	2300      	movs	r3, #0
 800767c:	220a      	movs	r2, #10
 800767e:	4648      	mov	r0, r9
 8007680:	f000 f968 	bl	8007954 <__multadd>
 8007684:	9002      	str	r0, [sp, #8]
 8007686:	e7eb      	b.n	8007660 <_dtoa_r+0xb70>
 8007688:	08008c28 	.word	0x08008c28
 800768c:	08008bac 	.word	0x08008bac

08007690 <_free_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4605      	mov	r5, r0
 8007694:	2900      	cmp	r1, #0
 8007696:	d041      	beq.n	800771c <_free_r+0x8c>
 8007698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800769c:	1f0c      	subs	r4, r1, #4
 800769e:	2b00      	cmp	r3, #0
 80076a0:	bfb8      	it	lt
 80076a2:	18e4      	addlt	r4, r4, r3
 80076a4:	f000 f8e8 	bl	8007878 <__malloc_lock>
 80076a8:	4a1d      	ldr	r2, [pc, #116]	@ (8007720 <_free_r+0x90>)
 80076aa:	6813      	ldr	r3, [r2, #0]
 80076ac:	b933      	cbnz	r3, 80076bc <_free_r+0x2c>
 80076ae:	6063      	str	r3, [r4, #4]
 80076b0:	6014      	str	r4, [r2, #0]
 80076b2:	4628      	mov	r0, r5
 80076b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076b8:	f000 b8e4 	b.w	8007884 <__malloc_unlock>
 80076bc:	42a3      	cmp	r3, r4
 80076be:	d908      	bls.n	80076d2 <_free_r+0x42>
 80076c0:	6820      	ldr	r0, [r4, #0]
 80076c2:	1821      	adds	r1, r4, r0
 80076c4:	428b      	cmp	r3, r1
 80076c6:	bf01      	itttt	eq
 80076c8:	6819      	ldreq	r1, [r3, #0]
 80076ca:	685b      	ldreq	r3, [r3, #4]
 80076cc:	1809      	addeq	r1, r1, r0
 80076ce:	6021      	streq	r1, [r4, #0]
 80076d0:	e7ed      	b.n	80076ae <_free_r+0x1e>
 80076d2:	461a      	mov	r2, r3
 80076d4:	685b      	ldr	r3, [r3, #4]
 80076d6:	b10b      	cbz	r3, 80076dc <_free_r+0x4c>
 80076d8:	42a3      	cmp	r3, r4
 80076da:	d9fa      	bls.n	80076d2 <_free_r+0x42>
 80076dc:	6811      	ldr	r1, [r2, #0]
 80076de:	1850      	adds	r0, r2, r1
 80076e0:	42a0      	cmp	r0, r4
 80076e2:	d10b      	bne.n	80076fc <_free_r+0x6c>
 80076e4:	6820      	ldr	r0, [r4, #0]
 80076e6:	4401      	add	r1, r0
 80076e8:	1850      	adds	r0, r2, r1
 80076ea:	4283      	cmp	r3, r0
 80076ec:	6011      	str	r1, [r2, #0]
 80076ee:	d1e0      	bne.n	80076b2 <_free_r+0x22>
 80076f0:	6818      	ldr	r0, [r3, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	6053      	str	r3, [r2, #4]
 80076f6:	4408      	add	r0, r1
 80076f8:	6010      	str	r0, [r2, #0]
 80076fa:	e7da      	b.n	80076b2 <_free_r+0x22>
 80076fc:	d902      	bls.n	8007704 <_free_r+0x74>
 80076fe:	230c      	movs	r3, #12
 8007700:	602b      	str	r3, [r5, #0]
 8007702:	e7d6      	b.n	80076b2 <_free_r+0x22>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	1821      	adds	r1, r4, r0
 8007708:	428b      	cmp	r3, r1
 800770a:	bf04      	itt	eq
 800770c:	6819      	ldreq	r1, [r3, #0]
 800770e:	685b      	ldreq	r3, [r3, #4]
 8007710:	6063      	str	r3, [r4, #4]
 8007712:	bf04      	itt	eq
 8007714:	1809      	addeq	r1, r1, r0
 8007716:	6021      	streq	r1, [r4, #0]
 8007718:	6054      	str	r4, [r2, #4]
 800771a:	e7ca      	b.n	80076b2 <_free_r+0x22>
 800771c:	bd38      	pop	{r3, r4, r5, pc}
 800771e:	bf00      	nop
 8007720:	200004ac 	.word	0x200004ac

08007724 <malloc>:
 8007724:	4b02      	ldr	r3, [pc, #8]	@ (8007730 <malloc+0xc>)
 8007726:	4601      	mov	r1, r0
 8007728:	6818      	ldr	r0, [r3, #0]
 800772a:	f000 b825 	b.w	8007778 <_malloc_r>
 800772e:	bf00      	nop
 8007730:	2000003c 	.word	0x2000003c

08007734 <sbrk_aligned>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	4e0f      	ldr	r6, [pc, #60]	@ (8007774 <sbrk_aligned+0x40>)
 8007738:	460c      	mov	r4, r1
 800773a:	6831      	ldr	r1, [r6, #0]
 800773c:	4605      	mov	r5, r0
 800773e:	b911      	cbnz	r1, 8007746 <sbrk_aligned+0x12>
 8007740:	f000 fe3e 	bl	80083c0 <_sbrk_r>
 8007744:	6030      	str	r0, [r6, #0]
 8007746:	4621      	mov	r1, r4
 8007748:	4628      	mov	r0, r5
 800774a:	f000 fe39 	bl	80083c0 <_sbrk_r>
 800774e:	1c43      	adds	r3, r0, #1
 8007750:	d103      	bne.n	800775a <sbrk_aligned+0x26>
 8007752:	f04f 34ff 	mov.w	r4, #4294967295
 8007756:	4620      	mov	r0, r4
 8007758:	bd70      	pop	{r4, r5, r6, pc}
 800775a:	1cc4      	adds	r4, r0, #3
 800775c:	f024 0403 	bic.w	r4, r4, #3
 8007760:	42a0      	cmp	r0, r4
 8007762:	d0f8      	beq.n	8007756 <sbrk_aligned+0x22>
 8007764:	1a21      	subs	r1, r4, r0
 8007766:	4628      	mov	r0, r5
 8007768:	f000 fe2a 	bl	80083c0 <_sbrk_r>
 800776c:	3001      	adds	r0, #1
 800776e:	d1f2      	bne.n	8007756 <sbrk_aligned+0x22>
 8007770:	e7ef      	b.n	8007752 <sbrk_aligned+0x1e>
 8007772:	bf00      	nop
 8007774:	200004a8 	.word	0x200004a8

08007778 <_malloc_r>:
 8007778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800777c:	1ccd      	adds	r5, r1, #3
 800777e:	f025 0503 	bic.w	r5, r5, #3
 8007782:	3508      	adds	r5, #8
 8007784:	2d0c      	cmp	r5, #12
 8007786:	bf38      	it	cc
 8007788:	250c      	movcc	r5, #12
 800778a:	2d00      	cmp	r5, #0
 800778c:	4606      	mov	r6, r0
 800778e:	db01      	blt.n	8007794 <_malloc_r+0x1c>
 8007790:	42a9      	cmp	r1, r5
 8007792:	d904      	bls.n	800779e <_malloc_r+0x26>
 8007794:	230c      	movs	r3, #12
 8007796:	6033      	str	r3, [r6, #0]
 8007798:	2000      	movs	r0, #0
 800779a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800779e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007874 <_malloc_r+0xfc>
 80077a2:	f000 f869 	bl	8007878 <__malloc_lock>
 80077a6:	f8d8 3000 	ldr.w	r3, [r8]
 80077aa:	461c      	mov	r4, r3
 80077ac:	bb44      	cbnz	r4, 8007800 <_malloc_r+0x88>
 80077ae:	4629      	mov	r1, r5
 80077b0:	4630      	mov	r0, r6
 80077b2:	f7ff ffbf 	bl	8007734 <sbrk_aligned>
 80077b6:	1c43      	adds	r3, r0, #1
 80077b8:	4604      	mov	r4, r0
 80077ba:	d158      	bne.n	800786e <_malloc_r+0xf6>
 80077bc:	f8d8 4000 	ldr.w	r4, [r8]
 80077c0:	4627      	mov	r7, r4
 80077c2:	2f00      	cmp	r7, #0
 80077c4:	d143      	bne.n	800784e <_malloc_r+0xd6>
 80077c6:	2c00      	cmp	r4, #0
 80077c8:	d04b      	beq.n	8007862 <_malloc_r+0xea>
 80077ca:	6823      	ldr	r3, [r4, #0]
 80077cc:	4639      	mov	r1, r7
 80077ce:	4630      	mov	r0, r6
 80077d0:	eb04 0903 	add.w	r9, r4, r3
 80077d4:	f000 fdf4 	bl	80083c0 <_sbrk_r>
 80077d8:	4581      	cmp	r9, r0
 80077da:	d142      	bne.n	8007862 <_malloc_r+0xea>
 80077dc:	6821      	ldr	r1, [r4, #0]
 80077de:	1a6d      	subs	r5, r5, r1
 80077e0:	4629      	mov	r1, r5
 80077e2:	4630      	mov	r0, r6
 80077e4:	f7ff ffa6 	bl	8007734 <sbrk_aligned>
 80077e8:	3001      	adds	r0, #1
 80077ea:	d03a      	beq.n	8007862 <_malloc_r+0xea>
 80077ec:	6823      	ldr	r3, [r4, #0]
 80077ee:	442b      	add	r3, r5
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	f8d8 3000 	ldr.w	r3, [r8]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	bb62      	cbnz	r2, 8007854 <_malloc_r+0xdc>
 80077fa:	f8c8 7000 	str.w	r7, [r8]
 80077fe:	e00f      	b.n	8007820 <_malloc_r+0xa8>
 8007800:	6822      	ldr	r2, [r4, #0]
 8007802:	1b52      	subs	r2, r2, r5
 8007804:	d420      	bmi.n	8007848 <_malloc_r+0xd0>
 8007806:	2a0b      	cmp	r2, #11
 8007808:	d917      	bls.n	800783a <_malloc_r+0xc2>
 800780a:	1961      	adds	r1, r4, r5
 800780c:	42a3      	cmp	r3, r4
 800780e:	6025      	str	r5, [r4, #0]
 8007810:	bf18      	it	ne
 8007812:	6059      	strne	r1, [r3, #4]
 8007814:	6863      	ldr	r3, [r4, #4]
 8007816:	bf08      	it	eq
 8007818:	f8c8 1000 	streq.w	r1, [r8]
 800781c:	5162      	str	r2, [r4, r5]
 800781e:	604b      	str	r3, [r1, #4]
 8007820:	4630      	mov	r0, r6
 8007822:	f000 f82f 	bl	8007884 <__malloc_unlock>
 8007826:	f104 000b 	add.w	r0, r4, #11
 800782a:	1d23      	adds	r3, r4, #4
 800782c:	f020 0007 	bic.w	r0, r0, #7
 8007830:	1ac2      	subs	r2, r0, r3
 8007832:	bf1c      	itt	ne
 8007834:	1a1b      	subne	r3, r3, r0
 8007836:	50a3      	strne	r3, [r4, r2]
 8007838:	e7af      	b.n	800779a <_malloc_r+0x22>
 800783a:	6862      	ldr	r2, [r4, #4]
 800783c:	42a3      	cmp	r3, r4
 800783e:	bf0c      	ite	eq
 8007840:	f8c8 2000 	streq.w	r2, [r8]
 8007844:	605a      	strne	r2, [r3, #4]
 8007846:	e7eb      	b.n	8007820 <_malloc_r+0xa8>
 8007848:	4623      	mov	r3, r4
 800784a:	6864      	ldr	r4, [r4, #4]
 800784c:	e7ae      	b.n	80077ac <_malloc_r+0x34>
 800784e:	463c      	mov	r4, r7
 8007850:	687f      	ldr	r7, [r7, #4]
 8007852:	e7b6      	b.n	80077c2 <_malloc_r+0x4a>
 8007854:	461a      	mov	r2, r3
 8007856:	685b      	ldr	r3, [r3, #4]
 8007858:	42a3      	cmp	r3, r4
 800785a:	d1fb      	bne.n	8007854 <_malloc_r+0xdc>
 800785c:	2300      	movs	r3, #0
 800785e:	6053      	str	r3, [r2, #4]
 8007860:	e7de      	b.n	8007820 <_malloc_r+0xa8>
 8007862:	230c      	movs	r3, #12
 8007864:	6033      	str	r3, [r6, #0]
 8007866:	4630      	mov	r0, r6
 8007868:	f000 f80c 	bl	8007884 <__malloc_unlock>
 800786c:	e794      	b.n	8007798 <_malloc_r+0x20>
 800786e:	6005      	str	r5, [r0, #0]
 8007870:	e7d6      	b.n	8007820 <_malloc_r+0xa8>
 8007872:	bf00      	nop
 8007874:	200004ac 	.word	0x200004ac

08007878 <__malloc_lock>:
 8007878:	4801      	ldr	r0, [pc, #4]	@ (8007880 <__malloc_lock+0x8>)
 800787a:	f7ff b8ac 	b.w	80069d6 <__retarget_lock_acquire_recursive>
 800787e:	bf00      	nop
 8007880:	200004a4 	.word	0x200004a4

08007884 <__malloc_unlock>:
 8007884:	4801      	ldr	r0, [pc, #4]	@ (800788c <__malloc_unlock+0x8>)
 8007886:	f7ff b8a7 	b.w	80069d8 <__retarget_lock_release_recursive>
 800788a:	bf00      	nop
 800788c:	200004a4 	.word	0x200004a4

08007890 <_Balloc>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	69c6      	ldr	r6, [r0, #28]
 8007894:	4604      	mov	r4, r0
 8007896:	460d      	mov	r5, r1
 8007898:	b976      	cbnz	r6, 80078b8 <_Balloc+0x28>
 800789a:	2010      	movs	r0, #16
 800789c:	f7ff ff42 	bl	8007724 <malloc>
 80078a0:	4602      	mov	r2, r0
 80078a2:	61e0      	str	r0, [r4, #28]
 80078a4:	b920      	cbnz	r0, 80078b0 <_Balloc+0x20>
 80078a6:	4b18      	ldr	r3, [pc, #96]	@ (8007908 <_Balloc+0x78>)
 80078a8:	4818      	ldr	r0, [pc, #96]	@ (800790c <_Balloc+0x7c>)
 80078aa:	216b      	movs	r1, #107	@ 0x6b
 80078ac:	f000 fda6 	bl	80083fc <__assert_func>
 80078b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80078b4:	6006      	str	r6, [r0, #0]
 80078b6:	60c6      	str	r6, [r0, #12]
 80078b8:	69e6      	ldr	r6, [r4, #28]
 80078ba:	68f3      	ldr	r3, [r6, #12]
 80078bc:	b183      	cbz	r3, 80078e0 <_Balloc+0x50>
 80078be:	69e3      	ldr	r3, [r4, #28]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80078c6:	b9b8      	cbnz	r0, 80078f8 <_Balloc+0x68>
 80078c8:	2101      	movs	r1, #1
 80078ca:	fa01 f605 	lsl.w	r6, r1, r5
 80078ce:	1d72      	adds	r2, r6, #5
 80078d0:	0092      	lsls	r2, r2, #2
 80078d2:	4620      	mov	r0, r4
 80078d4:	f000 fdb0 	bl	8008438 <_calloc_r>
 80078d8:	b160      	cbz	r0, 80078f4 <_Balloc+0x64>
 80078da:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80078de:	e00e      	b.n	80078fe <_Balloc+0x6e>
 80078e0:	2221      	movs	r2, #33	@ 0x21
 80078e2:	2104      	movs	r1, #4
 80078e4:	4620      	mov	r0, r4
 80078e6:	f000 fda7 	bl	8008438 <_calloc_r>
 80078ea:	69e3      	ldr	r3, [r4, #28]
 80078ec:	60f0      	str	r0, [r6, #12]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d1e4      	bne.n	80078be <_Balloc+0x2e>
 80078f4:	2000      	movs	r0, #0
 80078f6:	bd70      	pop	{r4, r5, r6, pc}
 80078f8:	6802      	ldr	r2, [r0, #0]
 80078fa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80078fe:	2300      	movs	r3, #0
 8007900:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007904:	e7f7      	b.n	80078f6 <_Balloc+0x66>
 8007906:	bf00      	nop
 8007908:	08008bb9 	.word	0x08008bb9
 800790c:	08008c39 	.word	0x08008c39

08007910 <_Bfree>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	69c6      	ldr	r6, [r0, #28]
 8007914:	4605      	mov	r5, r0
 8007916:	460c      	mov	r4, r1
 8007918:	b976      	cbnz	r6, 8007938 <_Bfree+0x28>
 800791a:	2010      	movs	r0, #16
 800791c:	f7ff ff02 	bl	8007724 <malloc>
 8007920:	4602      	mov	r2, r0
 8007922:	61e8      	str	r0, [r5, #28]
 8007924:	b920      	cbnz	r0, 8007930 <_Bfree+0x20>
 8007926:	4b09      	ldr	r3, [pc, #36]	@ (800794c <_Bfree+0x3c>)
 8007928:	4809      	ldr	r0, [pc, #36]	@ (8007950 <_Bfree+0x40>)
 800792a:	218f      	movs	r1, #143	@ 0x8f
 800792c:	f000 fd66 	bl	80083fc <__assert_func>
 8007930:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007934:	6006      	str	r6, [r0, #0]
 8007936:	60c6      	str	r6, [r0, #12]
 8007938:	b13c      	cbz	r4, 800794a <_Bfree+0x3a>
 800793a:	69eb      	ldr	r3, [r5, #28]
 800793c:	6862      	ldr	r2, [r4, #4]
 800793e:	68db      	ldr	r3, [r3, #12]
 8007940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007944:	6021      	str	r1, [r4, #0]
 8007946:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800794a:	bd70      	pop	{r4, r5, r6, pc}
 800794c:	08008bb9 	.word	0x08008bb9
 8007950:	08008c39 	.word	0x08008c39

08007954 <__multadd>:
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	690d      	ldr	r5, [r1, #16]
 800795a:	4607      	mov	r7, r0
 800795c:	460c      	mov	r4, r1
 800795e:	461e      	mov	r6, r3
 8007960:	f101 0c14 	add.w	ip, r1, #20
 8007964:	2000      	movs	r0, #0
 8007966:	f8dc 3000 	ldr.w	r3, [ip]
 800796a:	b299      	uxth	r1, r3
 800796c:	fb02 6101 	mla	r1, r2, r1, r6
 8007970:	0c1e      	lsrs	r6, r3, #16
 8007972:	0c0b      	lsrs	r3, r1, #16
 8007974:	fb02 3306 	mla	r3, r2, r6, r3
 8007978:	b289      	uxth	r1, r1
 800797a:	3001      	adds	r0, #1
 800797c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007980:	4285      	cmp	r5, r0
 8007982:	f84c 1b04 	str.w	r1, [ip], #4
 8007986:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800798a:	dcec      	bgt.n	8007966 <__multadd+0x12>
 800798c:	b30e      	cbz	r6, 80079d2 <__multadd+0x7e>
 800798e:	68a3      	ldr	r3, [r4, #8]
 8007990:	42ab      	cmp	r3, r5
 8007992:	dc19      	bgt.n	80079c8 <__multadd+0x74>
 8007994:	6861      	ldr	r1, [r4, #4]
 8007996:	4638      	mov	r0, r7
 8007998:	3101      	adds	r1, #1
 800799a:	f7ff ff79 	bl	8007890 <_Balloc>
 800799e:	4680      	mov	r8, r0
 80079a0:	b928      	cbnz	r0, 80079ae <__multadd+0x5a>
 80079a2:	4602      	mov	r2, r0
 80079a4:	4b0c      	ldr	r3, [pc, #48]	@ (80079d8 <__multadd+0x84>)
 80079a6:	480d      	ldr	r0, [pc, #52]	@ (80079dc <__multadd+0x88>)
 80079a8:	21ba      	movs	r1, #186	@ 0xba
 80079aa:	f000 fd27 	bl	80083fc <__assert_func>
 80079ae:	6922      	ldr	r2, [r4, #16]
 80079b0:	3202      	adds	r2, #2
 80079b2:	f104 010c 	add.w	r1, r4, #12
 80079b6:	0092      	lsls	r2, r2, #2
 80079b8:	300c      	adds	r0, #12
 80079ba:	f000 fd11 	bl	80083e0 <memcpy>
 80079be:	4621      	mov	r1, r4
 80079c0:	4638      	mov	r0, r7
 80079c2:	f7ff ffa5 	bl	8007910 <_Bfree>
 80079c6:	4644      	mov	r4, r8
 80079c8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80079cc:	3501      	adds	r5, #1
 80079ce:	615e      	str	r6, [r3, #20]
 80079d0:	6125      	str	r5, [r4, #16]
 80079d2:	4620      	mov	r0, r4
 80079d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079d8:	08008c28 	.word	0x08008c28
 80079dc:	08008c39 	.word	0x08008c39

080079e0 <__hi0bits>:
 80079e0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80079e4:	4603      	mov	r3, r0
 80079e6:	bf36      	itet	cc
 80079e8:	0403      	lslcc	r3, r0, #16
 80079ea:	2000      	movcs	r0, #0
 80079ec:	2010      	movcc	r0, #16
 80079ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80079f2:	bf3c      	itt	cc
 80079f4:	021b      	lslcc	r3, r3, #8
 80079f6:	3008      	addcc	r0, #8
 80079f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079fc:	bf3c      	itt	cc
 80079fe:	011b      	lslcc	r3, r3, #4
 8007a00:	3004      	addcc	r0, #4
 8007a02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007a06:	bf3c      	itt	cc
 8007a08:	009b      	lslcc	r3, r3, #2
 8007a0a:	3002      	addcc	r0, #2
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	db05      	blt.n	8007a1c <__hi0bits+0x3c>
 8007a10:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007a14:	f100 0001 	add.w	r0, r0, #1
 8007a18:	bf08      	it	eq
 8007a1a:	2020      	moveq	r0, #32
 8007a1c:	4770      	bx	lr

08007a1e <__lo0bits>:
 8007a1e:	6803      	ldr	r3, [r0, #0]
 8007a20:	4602      	mov	r2, r0
 8007a22:	f013 0007 	ands.w	r0, r3, #7
 8007a26:	d00b      	beq.n	8007a40 <__lo0bits+0x22>
 8007a28:	07d9      	lsls	r1, r3, #31
 8007a2a:	d421      	bmi.n	8007a70 <__lo0bits+0x52>
 8007a2c:	0798      	lsls	r0, r3, #30
 8007a2e:	bf49      	itett	mi
 8007a30:	085b      	lsrmi	r3, r3, #1
 8007a32:	089b      	lsrpl	r3, r3, #2
 8007a34:	2001      	movmi	r0, #1
 8007a36:	6013      	strmi	r3, [r2, #0]
 8007a38:	bf5c      	itt	pl
 8007a3a:	6013      	strpl	r3, [r2, #0]
 8007a3c:	2002      	movpl	r0, #2
 8007a3e:	4770      	bx	lr
 8007a40:	b299      	uxth	r1, r3
 8007a42:	b909      	cbnz	r1, 8007a48 <__lo0bits+0x2a>
 8007a44:	0c1b      	lsrs	r3, r3, #16
 8007a46:	2010      	movs	r0, #16
 8007a48:	b2d9      	uxtb	r1, r3
 8007a4a:	b909      	cbnz	r1, 8007a50 <__lo0bits+0x32>
 8007a4c:	3008      	adds	r0, #8
 8007a4e:	0a1b      	lsrs	r3, r3, #8
 8007a50:	0719      	lsls	r1, r3, #28
 8007a52:	bf04      	itt	eq
 8007a54:	091b      	lsreq	r3, r3, #4
 8007a56:	3004      	addeq	r0, #4
 8007a58:	0799      	lsls	r1, r3, #30
 8007a5a:	bf04      	itt	eq
 8007a5c:	089b      	lsreq	r3, r3, #2
 8007a5e:	3002      	addeq	r0, #2
 8007a60:	07d9      	lsls	r1, r3, #31
 8007a62:	d403      	bmi.n	8007a6c <__lo0bits+0x4e>
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	f100 0001 	add.w	r0, r0, #1
 8007a6a:	d003      	beq.n	8007a74 <__lo0bits+0x56>
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	4770      	bx	lr
 8007a70:	2000      	movs	r0, #0
 8007a72:	4770      	bx	lr
 8007a74:	2020      	movs	r0, #32
 8007a76:	4770      	bx	lr

08007a78 <__i2b>:
 8007a78:	b510      	push	{r4, lr}
 8007a7a:	460c      	mov	r4, r1
 8007a7c:	2101      	movs	r1, #1
 8007a7e:	f7ff ff07 	bl	8007890 <_Balloc>
 8007a82:	4602      	mov	r2, r0
 8007a84:	b928      	cbnz	r0, 8007a92 <__i2b+0x1a>
 8007a86:	4b05      	ldr	r3, [pc, #20]	@ (8007a9c <__i2b+0x24>)
 8007a88:	4805      	ldr	r0, [pc, #20]	@ (8007aa0 <__i2b+0x28>)
 8007a8a:	f240 1145 	movw	r1, #325	@ 0x145
 8007a8e:	f000 fcb5 	bl	80083fc <__assert_func>
 8007a92:	2301      	movs	r3, #1
 8007a94:	6144      	str	r4, [r0, #20]
 8007a96:	6103      	str	r3, [r0, #16]
 8007a98:	bd10      	pop	{r4, pc}
 8007a9a:	bf00      	nop
 8007a9c:	08008c28 	.word	0x08008c28
 8007aa0:	08008c39 	.word	0x08008c39

08007aa4 <__multiply>:
 8007aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aa8:	4617      	mov	r7, r2
 8007aaa:	690a      	ldr	r2, [r1, #16]
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	bfa8      	it	ge
 8007ab2:	463b      	movge	r3, r7
 8007ab4:	4689      	mov	r9, r1
 8007ab6:	bfa4      	itt	ge
 8007ab8:	460f      	movge	r7, r1
 8007aba:	4699      	movge	r9, r3
 8007abc:	693d      	ldr	r5, [r7, #16]
 8007abe:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007ac2:	68bb      	ldr	r3, [r7, #8]
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	eb05 060a 	add.w	r6, r5, sl
 8007aca:	42b3      	cmp	r3, r6
 8007acc:	b085      	sub	sp, #20
 8007ace:	bfb8      	it	lt
 8007ad0:	3101      	addlt	r1, #1
 8007ad2:	f7ff fedd 	bl	8007890 <_Balloc>
 8007ad6:	b930      	cbnz	r0, 8007ae6 <__multiply+0x42>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	4b41      	ldr	r3, [pc, #260]	@ (8007be0 <__multiply+0x13c>)
 8007adc:	4841      	ldr	r0, [pc, #260]	@ (8007be4 <__multiply+0x140>)
 8007ade:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007ae2:	f000 fc8b 	bl	80083fc <__assert_func>
 8007ae6:	f100 0414 	add.w	r4, r0, #20
 8007aea:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007aee:	4623      	mov	r3, r4
 8007af0:	2200      	movs	r2, #0
 8007af2:	4573      	cmp	r3, lr
 8007af4:	d320      	bcc.n	8007b38 <__multiply+0x94>
 8007af6:	f107 0814 	add.w	r8, r7, #20
 8007afa:	f109 0114 	add.w	r1, r9, #20
 8007afe:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8007b02:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8007b06:	9302      	str	r3, [sp, #8]
 8007b08:	1beb      	subs	r3, r5, r7
 8007b0a:	3b15      	subs	r3, #21
 8007b0c:	f023 0303 	bic.w	r3, r3, #3
 8007b10:	3304      	adds	r3, #4
 8007b12:	3715      	adds	r7, #21
 8007b14:	42bd      	cmp	r5, r7
 8007b16:	bf38      	it	cc
 8007b18:	2304      	movcc	r3, #4
 8007b1a:	9301      	str	r3, [sp, #4]
 8007b1c:	9b02      	ldr	r3, [sp, #8]
 8007b1e:	9103      	str	r1, [sp, #12]
 8007b20:	428b      	cmp	r3, r1
 8007b22:	d80c      	bhi.n	8007b3e <__multiply+0x9a>
 8007b24:	2e00      	cmp	r6, #0
 8007b26:	dd03      	ble.n	8007b30 <__multiply+0x8c>
 8007b28:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d055      	beq.n	8007bdc <__multiply+0x138>
 8007b30:	6106      	str	r6, [r0, #16]
 8007b32:	b005      	add	sp, #20
 8007b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b38:	f843 2b04 	str.w	r2, [r3], #4
 8007b3c:	e7d9      	b.n	8007af2 <__multiply+0x4e>
 8007b3e:	f8b1 a000 	ldrh.w	sl, [r1]
 8007b42:	f1ba 0f00 	cmp.w	sl, #0
 8007b46:	d01f      	beq.n	8007b88 <__multiply+0xe4>
 8007b48:	46c4      	mov	ip, r8
 8007b4a:	46a1      	mov	r9, r4
 8007b4c:	2700      	movs	r7, #0
 8007b4e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007b52:	f8d9 3000 	ldr.w	r3, [r9]
 8007b56:	fa1f fb82 	uxth.w	fp, r2
 8007b5a:	b29b      	uxth	r3, r3
 8007b5c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007b60:	443b      	add	r3, r7
 8007b62:	f8d9 7000 	ldr.w	r7, [r9]
 8007b66:	0c12      	lsrs	r2, r2, #16
 8007b68:	0c3f      	lsrs	r7, r7, #16
 8007b6a:	fb0a 7202 	mla	r2, sl, r2, r7
 8007b6e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8007b72:	b29b      	uxth	r3, r3
 8007b74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007b78:	4565      	cmp	r5, ip
 8007b7a:	f849 3b04 	str.w	r3, [r9], #4
 8007b7e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8007b82:	d8e4      	bhi.n	8007b4e <__multiply+0xaa>
 8007b84:	9b01      	ldr	r3, [sp, #4]
 8007b86:	50e7      	str	r7, [r4, r3]
 8007b88:	9b03      	ldr	r3, [sp, #12]
 8007b8a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b8e:	3104      	adds	r1, #4
 8007b90:	f1b9 0f00 	cmp.w	r9, #0
 8007b94:	d020      	beq.n	8007bd8 <__multiply+0x134>
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	4647      	mov	r7, r8
 8007b9a:	46a4      	mov	ip, r4
 8007b9c:	f04f 0a00 	mov.w	sl, #0
 8007ba0:	f8b7 b000 	ldrh.w	fp, [r7]
 8007ba4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8007ba8:	fb09 220b 	mla	r2, r9, fp, r2
 8007bac:	4452      	add	r2, sl
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007bb4:	f84c 3b04 	str.w	r3, [ip], #4
 8007bb8:	f857 3b04 	ldr.w	r3, [r7], #4
 8007bbc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bc0:	f8bc 3000 	ldrh.w	r3, [ip]
 8007bc4:	fb09 330a 	mla	r3, r9, sl, r3
 8007bc8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8007bcc:	42bd      	cmp	r5, r7
 8007bce:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007bd2:	d8e5      	bhi.n	8007ba0 <__multiply+0xfc>
 8007bd4:	9a01      	ldr	r2, [sp, #4]
 8007bd6:	50a3      	str	r3, [r4, r2]
 8007bd8:	3404      	adds	r4, #4
 8007bda:	e79f      	b.n	8007b1c <__multiply+0x78>
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	e7a1      	b.n	8007b24 <__multiply+0x80>
 8007be0:	08008c28 	.word	0x08008c28
 8007be4:	08008c39 	.word	0x08008c39

08007be8 <__pow5mult>:
 8007be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bec:	4615      	mov	r5, r2
 8007bee:	f012 0203 	ands.w	r2, r2, #3
 8007bf2:	4607      	mov	r7, r0
 8007bf4:	460e      	mov	r6, r1
 8007bf6:	d007      	beq.n	8007c08 <__pow5mult+0x20>
 8007bf8:	4c25      	ldr	r4, [pc, #148]	@ (8007c90 <__pow5mult+0xa8>)
 8007bfa:	3a01      	subs	r2, #1
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007c02:	f7ff fea7 	bl	8007954 <__multadd>
 8007c06:	4606      	mov	r6, r0
 8007c08:	10ad      	asrs	r5, r5, #2
 8007c0a:	d03d      	beq.n	8007c88 <__pow5mult+0xa0>
 8007c0c:	69fc      	ldr	r4, [r7, #28]
 8007c0e:	b97c      	cbnz	r4, 8007c30 <__pow5mult+0x48>
 8007c10:	2010      	movs	r0, #16
 8007c12:	f7ff fd87 	bl	8007724 <malloc>
 8007c16:	4602      	mov	r2, r0
 8007c18:	61f8      	str	r0, [r7, #28]
 8007c1a:	b928      	cbnz	r0, 8007c28 <__pow5mult+0x40>
 8007c1c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c94 <__pow5mult+0xac>)
 8007c1e:	481e      	ldr	r0, [pc, #120]	@ (8007c98 <__pow5mult+0xb0>)
 8007c20:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007c24:	f000 fbea 	bl	80083fc <__assert_func>
 8007c28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007c2c:	6004      	str	r4, [r0, #0]
 8007c2e:	60c4      	str	r4, [r0, #12]
 8007c30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007c34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007c38:	b94c      	cbnz	r4, 8007c4e <__pow5mult+0x66>
 8007c3a:	f240 2171 	movw	r1, #625	@ 0x271
 8007c3e:	4638      	mov	r0, r7
 8007c40:	f7ff ff1a 	bl	8007a78 <__i2b>
 8007c44:	2300      	movs	r3, #0
 8007c46:	f8c8 0008 	str.w	r0, [r8, #8]
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	6003      	str	r3, [r0, #0]
 8007c4e:	f04f 0900 	mov.w	r9, #0
 8007c52:	07eb      	lsls	r3, r5, #31
 8007c54:	d50a      	bpl.n	8007c6c <__pow5mult+0x84>
 8007c56:	4631      	mov	r1, r6
 8007c58:	4622      	mov	r2, r4
 8007c5a:	4638      	mov	r0, r7
 8007c5c:	f7ff ff22 	bl	8007aa4 <__multiply>
 8007c60:	4631      	mov	r1, r6
 8007c62:	4680      	mov	r8, r0
 8007c64:	4638      	mov	r0, r7
 8007c66:	f7ff fe53 	bl	8007910 <_Bfree>
 8007c6a:	4646      	mov	r6, r8
 8007c6c:	106d      	asrs	r5, r5, #1
 8007c6e:	d00b      	beq.n	8007c88 <__pow5mult+0xa0>
 8007c70:	6820      	ldr	r0, [r4, #0]
 8007c72:	b938      	cbnz	r0, 8007c84 <__pow5mult+0x9c>
 8007c74:	4622      	mov	r2, r4
 8007c76:	4621      	mov	r1, r4
 8007c78:	4638      	mov	r0, r7
 8007c7a:	f7ff ff13 	bl	8007aa4 <__multiply>
 8007c7e:	6020      	str	r0, [r4, #0]
 8007c80:	f8c0 9000 	str.w	r9, [r0]
 8007c84:	4604      	mov	r4, r0
 8007c86:	e7e4      	b.n	8007c52 <__pow5mult+0x6a>
 8007c88:	4630      	mov	r0, r6
 8007c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c8e:	bf00      	nop
 8007c90:	08008cec 	.word	0x08008cec
 8007c94:	08008bb9 	.word	0x08008bb9
 8007c98:	08008c39 	.word	0x08008c39

08007c9c <__lshift>:
 8007c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ca0:	460c      	mov	r4, r1
 8007ca2:	6849      	ldr	r1, [r1, #4]
 8007ca4:	6923      	ldr	r3, [r4, #16]
 8007ca6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007caa:	68a3      	ldr	r3, [r4, #8]
 8007cac:	4607      	mov	r7, r0
 8007cae:	4691      	mov	r9, r2
 8007cb0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007cb4:	f108 0601 	add.w	r6, r8, #1
 8007cb8:	42b3      	cmp	r3, r6
 8007cba:	db0b      	blt.n	8007cd4 <__lshift+0x38>
 8007cbc:	4638      	mov	r0, r7
 8007cbe:	f7ff fde7 	bl	8007890 <_Balloc>
 8007cc2:	4605      	mov	r5, r0
 8007cc4:	b948      	cbnz	r0, 8007cda <__lshift+0x3e>
 8007cc6:	4602      	mov	r2, r0
 8007cc8:	4b28      	ldr	r3, [pc, #160]	@ (8007d6c <__lshift+0xd0>)
 8007cca:	4829      	ldr	r0, [pc, #164]	@ (8007d70 <__lshift+0xd4>)
 8007ccc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007cd0:	f000 fb94 	bl	80083fc <__assert_func>
 8007cd4:	3101      	adds	r1, #1
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	e7ee      	b.n	8007cb8 <__lshift+0x1c>
 8007cda:	2300      	movs	r3, #0
 8007cdc:	f100 0114 	add.w	r1, r0, #20
 8007ce0:	f100 0210 	add.w	r2, r0, #16
 8007ce4:	4618      	mov	r0, r3
 8007ce6:	4553      	cmp	r3, sl
 8007ce8:	db33      	blt.n	8007d52 <__lshift+0xb6>
 8007cea:	6920      	ldr	r0, [r4, #16]
 8007cec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007cf0:	f104 0314 	add.w	r3, r4, #20
 8007cf4:	f019 091f 	ands.w	r9, r9, #31
 8007cf8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007cfc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007d00:	d02b      	beq.n	8007d5a <__lshift+0xbe>
 8007d02:	f1c9 0e20 	rsb	lr, r9, #32
 8007d06:	468a      	mov	sl, r1
 8007d08:	2200      	movs	r2, #0
 8007d0a:	6818      	ldr	r0, [r3, #0]
 8007d0c:	fa00 f009 	lsl.w	r0, r0, r9
 8007d10:	4310      	orrs	r0, r2
 8007d12:	f84a 0b04 	str.w	r0, [sl], #4
 8007d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d1a:	459c      	cmp	ip, r3
 8007d1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007d20:	d8f3      	bhi.n	8007d0a <__lshift+0x6e>
 8007d22:	ebac 0304 	sub.w	r3, ip, r4
 8007d26:	3b15      	subs	r3, #21
 8007d28:	f023 0303 	bic.w	r3, r3, #3
 8007d2c:	3304      	adds	r3, #4
 8007d2e:	f104 0015 	add.w	r0, r4, #21
 8007d32:	4560      	cmp	r0, ip
 8007d34:	bf88      	it	hi
 8007d36:	2304      	movhi	r3, #4
 8007d38:	50ca      	str	r2, [r1, r3]
 8007d3a:	b10a      	cbz	r2, 8007d40 <__lshift+0xa4>
 8007d3c:	f108 0602 	add.w	r6, r8, #2
 8007d40:	3e01      	subs	r6, #1
 8007d42:	4638      	mov	r0, r7
 8007d44:	612e      	str	r6, [r5, #16]
 8007d46:	4621      	mov	r1, r4
 8007d48:	f7ff fde2 	bl	8007910 <_Bfree>
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d52:	f842 0f04 	str.w	r0, [r2, #4]!
 8007d56:	3301      	adds	r3, #1
 8007d58:	e7c5      	b.n	8007ce6 <__lshift+0x4a>
 8007d5a:	3904      	subs	r1, #4
 8007d5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d60:	f841 2f04 	str.w	r2, [r1, #4]!
 8007d64:	459c      	cmp	ip, r3
 8007d66:	d8f9      	bhi.n	8007d5c <__lshift+0xc0>
 8007d68:	e7ea      	b.n	8007d40 <__lshift+0xa4>
 8007d6a:	bf00      	nop
 8007d6c:	08008c28 	.word	0x08008c28
 8007d70:	08008c39 	.word	0x08008c39

08007d74 <__mcmp>:
 8007d74:	690a      	ldr	r2, [r1, #16]
 8007d76:	4603      	mov	r3, r0
 8007d78:	6900      	ldr	r0, [r0, #16]
 8007d7a:	1a80      	subs	r0, r0, r2
 8007d7c:	b530      	push	{r4, r5, lr}
 8007d7e:	d10e      	bne.n	8007d9e <__mcmp+0x2a>
 8007d80:	3314      	adds	r3, #20
 8007d82:	3114      	adds	r1, #20
 8007d84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d94:	4295      	cmp	r5, r2
 8007d96:	d003      	beq.n	8007da0 <__mcmp+0x2c>
 8007d98:	d205      	bcs.n	8007da6 <__mcmp+0x32>
 8007d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9e:	bd30      	pop	{r4, r5, pc}
 8007da0:	42a3      	cmp	r3, r4
 8007da2:	d3f3      	bcc.n	8007d8c <__mcmp+0x18>
 8007da4:	e7fb      	b.n	8007d9e <__mcmp+0x2a>
 8007da6:	2001      	movs	r0, #1
 8007da8:	e7f9      	b.n	8007d9e <__mcmp+0x2a>
	...

08007dac <__mdiff>:
 8007dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	4689      	mov	r9, r1
 8007db2:	4606      	mov	r6, r0
 8007db4:	4611      	mov	r1, r2
 8007db6:	4648      	mov	r0, r9
 8007db8:	4614      	mov	r4, r2
 8007dba:	f7ff ffdb 	bl	8007d74 <__mcmp>
 8007dbe:	1e05      	subs	r5, r0, #0
 8007dc0:	d112      	bne.n	8007de8 <__mdiff+0x3c>
 8007dc2:	4629      	mov	r1, r5
 8007dc4:	4630      	mov	r0, r6
 8007dc6:	f7ff fd63 	bl	8007890 <_Balloc>
 8007dca:	4602      	mov	r2, r0
 8007dcc:	b928      	cbnz	r0, 8007dda <__mdiff+0x2e>
 8007dce:	4b3f      	ldr	r3, [pc, #252]	@ (8007ecc <__mdiff+0x120>)
 8007dd0:	f240 2137 	movw	r1, #567	@ 0x237
 8007dd4:	483e      	ldr	r0, [pc, #248]	@ (8007ed0 <__mdiff+0x124>)
 8007dd6:	f000 fb11 	bl	80083fc <__assert_func>
 8007dda:	2301      	movs	r3, #1
 8007ddc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007de0:	4610      	mov	r0, r2
 8007de2:	b003      	add	sp, #12
 8007de4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007de8:	bfbc      	itt	lt
 8007dea:	464b      	movlt	r3, r9
 8007dec:	46a1      	movlt	r9, r4
 8007dee:	4630      	mov	r0, r6
 8007df0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007df4:	bfba      	itte	lt
 8007df6:	461c      	movlt	r4, r3
 8007df8:	2501      	movlt	r5, #1
 8007dfa:	2500      	movge	r5, #0
 8007dfc:	f7ff fd48 	bl	8007890 <_Balloc>
 8007e00:	4602      	mov	r2, r0
 8007e02:	b918      	cbnz	r0, 8007e0c <__mdiff+0x60>
 8007e04:	4b31      	ldr	r3, [pc, #196]	@ (8007ecc <__mdiff+0x120>)
 8007e06:	f240 2145 	movw	r1, #581	@ 0x245
 8007e0a:	e7e3      	b.n	8007dd4 <__mdiff+0x28>
 8007e0c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007e10:	6926      	ldr	r6, [r4, #16]
 8007e12:	60c5      	str	r5, [r0, #12]
 8007e14:	f109 0310 	add.w	r3, r9, #16
 8007e18:	f109 0514 	add.w	r5, r9, #20
 8007e1c:	f104 0e14 	add.w	lr, r4, #20
 8007e20:	f100 0b14 	add.w	fp, r0, #20
 8007e24:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007e28:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007e2c:	9301      	str	r3, [sp, #4]
 8007e2e:	46d9      	mov	r9, fp
 8007e30:	f04f 0c00 	mov.w	ip, #0
 8007e34:	9b01      	ldr	r3, [sp, #4]
 8007e36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007e3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007e3e:	9301      	str	r3, [sp, #4]
 8007e40:	fa1f f38a 	uxth.w	r3, sl
 8007e44:	4619      	mov	r1, r3
 8007e46:	b283      	uxth	r3, r0
 8007e48:	1acb      	subs	r3, r1, r3
 8007e4a:	0c00      	lsrs	r0, r0, #16
 8007e4c:	4463      	add	r3, ip
 8007e4e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007e52:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007e56:	b29b      	uxth	r3, r3
 8007e58:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007e5c:	4576      	cmp	r6, lr
 8007e5e:	f849 3b04 	str.w	r3, [r9], #4
 8007e62:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e66:	d8e5      	bhi.n	8007e34 <__mdiff+0x88>
 8007e68:	1b33      	subs	r3, r6, r4
 8007e6a:	3b15      	subs	r3, #21
 8007e6c:	f023 0303 	bic.w	r3, r3, #3
 8007e70:	3415      	adds	r4, #21
 8007e72:	3304      	adds	r3, #4
 8007e74:	42a6      	cmp	r6, r4
 8007e76:	bf38      	it	cc
 8007e78:	2304      	movcc	r3, #4
 8007e7a:	441d      	add	r5, r3
 8007e7c:	445b      	add	r3, fp
 8007e7e:	461e      	mov	r6, r3
 8007e80:	462c      	mov	r4, r5
 8007e82:	4544      	cmp	r4, r8
 8007e84:	d30e      	bcc.n	8007ea4 <__mdiff+0xf8>
 8007e86:	f108 0103 	add.w	r1, r8, #3
 8007e8a:	1b49      	subs	r1, r1, r5
 8007e8c:	f021 0103 	bic.w	r1, r1, #3
 8007e90:	3d03      	subs	r5, #3
 8007e92:	45a8      	cmp	r8, r5
 8007e94:	bf38      	it	cc
 8007e96:	2100      	movcc	r1, #0
 8007e98:	440b      	add	r3, r1
 8007e9a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e9e:	b191      	cbz	r1, 8007ec6 <__mdiff+0x11a>
 8007ea0:	6117      	str	r7, [r2, #16]
 8007ea2:	e79d      	b.n	8007de0 <__mdiff+0x34>
 8007ea4:	f854 1b04 	ldr.w	r1, [r4], #4
 8007ea8:	46e6      	mov	lr, ip
 8007eaa:	0c08      	lsrs	r0, r1, #16
 8007eac:	fa1c fc81 	uxtah	ip, ip, r1
 8007eb0:	4471      	add	r1, lr
 8007eb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007eb6:	b289      	uxth	r1, r1
 8007eb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007ebc:	f846 1b04 	str.w	r1, [r6], #4
 8007ec0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ec4:	e7dd      	b.n	8007e82 <__mdiff+0xd6>
 8007ec6:	3f01      	subs	r7, #1
 8007ec8:	e7e7      	b.n	8007e9a <__mdiff+0xee>
 8007eca:	bf00      	nop
 8007ecc:	08008c28 	.word	0x08008c28
 8007ed0:	08008c39 	.word	0x08008c39

08007ed4 <__d2b>:
 8007ed4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007ed8:	460f      	mov	r7, r1
 8007eda:	2101      	movs	r1, #1
 8007edc:	ec59 8b10 	vmov	r8, r9, d0
 8007ee0:	4616      	mov	r6, r2
 8007ee2:	f7ff fcd5 	bl	8007890 <_Balloc>
 8007ee6:	4604      	mov	r4, r0
 8007ee8:	b930      	cbnz	r0, 8007ef8 <__d2b+0x24>
 8007eea:	4602      	mov	r2, r0
 8007eec:	4b23      	ldr	r3, [pc, #140]	@ (8007f7c <__d2b+0xa8>)
 8007eee:	4824      	ldr	r0, [pc, #144]	@ (8007f80 <__d2b+0xac>)
 8007ef0:	f240 310f 	movw	r1, #783	@ 0x30f
 8007ef4:	f000 fa82 	bl	80083fc <__assert_func>
 8007ef8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007efc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f00:	b10d      	cbz	r5, 8007f06 <__d2b+0x32>
 8007f02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f06:	9301      	str	r3, [sp, #4]
 8007f08:	f1b8 0300 	subs.w	r3, r8, #0
 8007f0c:	d023      	beq.n	8007f56 <__d2b+0x82>
 8007f0e:	4668      	mov	r0, sp
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	f7ff fd84 	bl	8007a1e <__lo0bits>
 8007f16:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f1a:	b1d0      	cbz	r0, 8007f52 <__d2b+0x7e>
 8007f1c:	f1c0 0320 	rsb	r3, r0, #32
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	430b      	orrs	r3, r1
 8007f26:	40c2      	lsrs	r2, r0
 8007f28:	6163      	str	r3, [r4, #20]
 8007f2a:	9201      	str	r2, [sp, #4]
 8007f2c:	9b01      	ldr	r3, [sp, #4]
 8007f2e:	61a3      	str	r3, [r4, #24]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	bf0c      	ite	eq
 8007f34:	2201      	moveq	r2, #1
 8007f36:	2202      	movne	r2, #2
 8007f38:	6122      	str	r2, [r4, #16]
 8007f3a:	b1a5      	cbz	r5, 8007f66 <__d2b+0x92>
 8007f3c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007f40:	4405      	add	r5, r0
 8007f42:	603d      	str	r5, [r7, #0]
 8007f44:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007f48:	6030      	str	r0, [r6, #0]
 8007f4a:	4620      	mov	r0, r4
 8007f4c:	b003      	add	sp, #12
 8007f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007f52:	6161      	str	r1, [r4, #20]
 8007f54:	e7ea      	b.n	8007f2c <__d2b+0x58>
 8007f56:	a801      	add	r0, sp, #4
 8007f58:	f7ff fd61 	bl	8007a1e <__lo0bits>
 8007f5c:	9b01      	ldr	r3, [sp, #4]
 8007f5e:	6163      	str	r3, [r4, #20]
 8007f60:	3020      	adds	r0, #32
 8007f62:	2201      	movs	r2, #1
 8007f64:	e7e8      	b.n	8007f38 <__d2b+0x64>
 8007f66:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007f6a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007f6e:	6038      	str	r0, [r7, #0]
 8007f70:	6918      	ldr	r0, [r3, #16]
 8007f72:	f7ff fd35 	bl	80079e0 <__hi0bits>
 8007f76:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007f7a:	e7e5      	b.n	8007f48 <__d2b+0x74>
 8007f7c:	08008c28 	.word	0x08008c28
 8007f80:	08008c39 	.word	0x08008c39

08007f84 <__ssputs_r>:
 8007f84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f88:	688e      	ldr	r6, [r1, #8]
 8007f8a:	461f      	mov	r7, r3
 8007f8c:	42be      	cmp	r6, r7
 8007f8e:	680b      	ldr	r3, [r1, #0]
 8007f90:	4682      	mov	sl, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	4690      	mov	r8, r2
 8007f96:	d82d      	bhi.n	8007ff4 <__ssputs_r+0x70>
 8007f98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f9c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007fa0:	d026      	beq.n	8007ff0 <__ssputs_r+0x6c>
 8007fa2:	6965      	ldr	r5, [r4, #20]
 8007fa4:	6909      	ldr	r1, [r1, #16]
 8007fa6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007faa:	eba3 0901 	sub.w	r9, r3, r1
 8007fae:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fb2:	1c7b      	adds	r3, r7, #1
 8007fb4:	444b      	add	r3, r9
 8007fb6:	106d      	asrs	r5, r5, #1
 8007fb8:	429d      	cmp	r5, r3
 8007fba:	bf38      	it	cc
 8007fbc:	461d      	movcc	r5, r3
 8007fbe:	0553      	lsls	r3, r2, #21
 8007fc0:	d527      	bpl.n	8008012 <__ssputs_r+0x8e>
 8007fc2:	4629      	mov	r1, r5
 8007fc4:	f7ff fbd8 	bl	8007778 <_malloc_r>
 8007fc8:	4606      	mov	r6, r0
 8007fca:	b360      	cbz	r0, 8008026 <__ssputs_r+0xa2>
 8007fcc:	6921      	ldr	r1, [r4, #16]
 8007fce:	464a      	mov	r2, r9
 8007fd0:	f000 fa06 	bl	80083e0 <memcpy>
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007fda:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	6126      	str	r6, [r4, #16]
 8007fe2:	6165      	str	r5, [r4, #20]
 8007fe4:	444e      	add	r6, r9
 8007fe6:	eba5 0509 	sub.w	r5, r5, r9
 8007fea:	6026      	str	r6, [r4, #0]
 8007fec:	60a5      	str	r5, [r4, #8]
 8007fee:	463e      	mov	r6, r7
 8007ff0:	42be      	cmp	r6, r7
 8007ff2:	d900      	bls.n	8007ff6 <__ssputs_r+0x72>
 8007ff4:	463e      	mov	r6, r7
 8007ff6:	6820      	ldr	r0, [r4, #0]
 8007ff8:	4632      	mov	r2, r6
 8007ffa:	4641      	mov	r1, r8
 8007ffc:	f000 f9c6 	bl	800838c <memmove>
 8008000:	68a3      	ldr	r3, [r4, #8]
 8008002:	1b9b      	subs	r3, r3, r6
 8008004:	60a3      	str	r3, [r4, #8]
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	4433      	add	r3, r6
 800800a:	6023      	str	r3, [r4, #0]
 800800c:	2000      	movs	r0, #0
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	462a      	mov	r2, r5
 8008014:	f000 fa36 	bl	8008484 <_realloc_r>
 8008018:	4606      	mov	r6, r0
 800801a:	2800      	cmp	r0, #0
 800801c:	d1e0      	bne.n	8007fe0 <__ssputs_r+0x5c>
 800801e:	6921      	ldr	r1, [r4, #16]
 8008020:	4650      	mov	r0, sl
 8008022:	f7ff fb35 	bl	8007690 <_free_r>
 8008026:	230c      	movs	r3, #12
 8008028:	f8ca 3000 	str.w	r3, [sl]
 800802c:	89a3      	ldrh	r3, [r4, #12]
 800802e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008032:	81a3      	strh	r3, [r4, #12]
 8008034:	f04f 30ff 	mov.w	r0, #4294967295
 8008038:	e7e9      	b.n	800800e <__ssputs_r+0x8a>
	...

0800803c <_svfiprintf_r>:
 800803c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008040:	4698      	mov	r8, r3
 8008042:	898b      	ldrh	r3, [r1, #12]
 8008044:	061b      	lsls	r3, r3, #24
 8008046:	b09d      	sub	sp, #116	@ 0x74
 8008048:	4607      	mov	r7, r0
 800804a:	460d      	mov	r5, r1
 800804c:	4614      	mov	r4, r2
 800804e:	d510      	bpl.n	8008072 <_svfiprintf_r+0x36>
 8008050:	690b      	ldr	r3, [r1, #16]
 8008052:	b973      	cbnz	r3, 8008072 <_svfiprintf_r+0x36>
 8008054:	2140      	movs	r1, #64	@ 0x40
 8008056:	f7ff fb8f 	bl	8007778 <_malloc_r>
 800805a:	6028      	str	r0, [r5, #0]
 800805c:	6128      	str	r0, [r5, #16]
 800805e:	b930      	cbnz	r0, 800806e <_svfiprintf_r+0x32>
 8008060:	230c      	movs	r3, #12
 8008062:	603b      	str	r3, [r7, #0]
 8008064:	f04f 30ff 	mov.w	r0, #4294967295
 8008068:	b01d      	add	sp, #116	@ 0x74
 800806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806e:	2340      	movs	r3, #64	@ 0x40
 8008070:	616b      	str	r3, [r5, #20]
 8008072:	2300      	movs	r3, #0
 8008074:	9309      	str	r3, [sp, #36]	@ 0x24
 8008076:	2320      	movs	r3, #32
 8008078:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800807c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008080:	2330      	movs	r3, #48	@ 0x30
 8008082:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008220 <_svfiprintf_r+0x1e4>
 8008086:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800808a:	f04f 0901 	mov.w	r9, #1
 800808e:	4623      	mov	r3, r4
 8008090:	469a      	mov	sl, r3
 8008092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008096:	b10a      	cbz	r2, 800809c <_svfiprintf_r+0x60>
 8008098:	2a25      	cmp	r2, #37	@ 0x25
 800809a:	d1f9      	bne.n	8008090 <_svfiprintf_r+0x54>
 800809c:	ebba 0b04 	subs.w	fp, sl, r4
 80080a0:	d00b      	beq.n	80080ba <_svfiprintf_r+0x7e>
 80080a2:	465b      	mov	r3, fp
 80080a4:	4622      	mov	r2, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	4638      	mov	r0, r7
 80080aa:	f7ff ff6b 	bl	8007f84 <__ssputs_r>
 80080ae:	3001      	adds	r0, #1
 80080b0:	f000 80a7 	beq.w	8008202 <_svfiprintf_r+0x1c6>
 80080b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080b6:	445a      	add	r2, fp
 80080b8:	9209      	str	r2, [sp, #36]	@ 0x24
 80080ba:	f89a 3000 	ldrb.w	r3, [sl]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 809f 	beq.w	8008202 <_svfiprintf_r+0x1c6>
 80080c4:	2300      	movs	r3, #0
 80080c6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ce:	f10a 0a01 	add.w	sl, sl, #1
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	9307      	str	r3, [sp, #28]
 80080d6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80080da:	931a      	str	r3, [sp, #104]	@ 0x68
 80080dc:	4654      	mov	r4, sl
 80080de:	2205      	movs	r2, #5
 80080e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e4:	484e      	ldr	r0, [pc, #312]	@ (8008220 <_svfiprintf_r+0x1e4>)
 80080e6:	f7f8 f873 	bl	80001d0 <memchr>
 80080ea:	9a04      	ldr	r2, [sp, #16]
 80080ec:	b9d8      	cbnz	r0, 8008126 <_svfiprintf_r+0xea>
 80080ee:	06d0      	lsls	r0, r2, #27
 80080f0:	bf44      	itt	mi
 80080f2:	2320      	movmi	r3, #32
 80080f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080f8:	0711      	lsls	r1, r2, #28
 80080fa:	bf44      	itt	mi
 80080fc:	232b      	movmi	r3, #43	@ 0x2b
 80080fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008102:	f89a 3000 	ldrb.w	r3, [sl]
 8008106:	2b2a      	cmp	r3, #42	@ 0x2a
 8008108:	d015      	beq.n	8008136 <_svfiprintf_r+0xfa>
 800810a:	9a07      	ldr	r2, [sp, #28]
 800810c:	4654      	mov	r4, sl
 800810e:	2000      	movs	r0, #0
 8008110:	f04f 0c0a 	mov.w	ip, #10
 8008114:	4621      	mov	r1, r4
 8008116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811a:	3b30      	subs	r3, #48	@ 0x30
 800811c:	2b09      	cmp	r3, #9
 800811e:	d94b      	bls.n	80081b8 <_svfiprintf_r+0x17c>
 8008120:	b1b0      	cbz	r0, 8008150 <_svfiprintf_r+0x114>
 8008122:	9207      	str	r2, [sp, #28]
 8008124:	e014      	b.n	8008150 <_svfiprintf_r+0x114>
 8008126:	eba0 0308 	sub.w	r3, r0, r8
 800812a:	fa09 f303 	lsl.w	r3, r9, r3
 800812e:	4313      	orrs	r3, r2
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	46a2      	mov	sl, r4
 8008134:	e7d2      	b.n	80080dc <_svfiprintf_r+0xa0>
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	1d19      	adds	r1, r3, #4
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	9103      	str	r1, [sp, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	bfbb      	ittet	lt
 8008142:	425b      	neglt	r3, r3
 8008144:	f042 0202 	orrlt.w	r2, r2, #2
 8008148:	9307      	strge	r3, [sp, #28]
 800814a:	9307      	strlt	r3, [sp, #28]
 800814c:	bfb8      	it	lt
 800814e:	9204      	strlt	r2, [sp, #16]
 8008150:	7823      	ldrb	r3, [r4, #0]
 8008152:	2b2e      	cmp	r3, #46	@ 0x2e
 8008154:	d10a      	bne.n	800816c <_svfiprintf_r+0x130>
 8008156:	7863      	ldrb	r3, [r4, #1]
 8008158:	2b2a      	cmp	r3, #42	@ 0x2a
 800815a:	d132      	bne.n	80081c2 <_svfiprintf_r+0x186>
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	1d1a      	adds	r2, r3, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	9203      	str	r2, [sp, #12]
 8008164:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008168:	3402      	adds	r4, #2
 800816a:	9305      	str	r3, [sp, #20]
 800816c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008230 <_svfiprintf_r+0x1f4>
 8008170:	7821      	ldrb	r1, [r4, #0]
 8008172:	2203      	movs	r2, #3
 8008174:	4650      	mov	r0, sl
 8008176:	f7f8 f82b 	bl	80001d0 <memchr>
 800817a:	b138      	cbz	r0, 800818c <_svfiprintf_r+0x150>
 800817c:	9b04      	ldr	r3, [sp, #16]
 800817e:	eba0 000a 	sub.w	r0, r0, sl
 8008182:	2240      	movs	r2, #64	@ 0x40
 8008184:	4082      	lsls	r2, r0
 8008186:	4313      	orrs	r3, r2
 8008188:	3401      	adds	r4, #1
 800818a:	9304      	str	r3, [sp, #16]
 800818c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008190:	4824      	ldr	r0, [pc, #144]	@ (8008224 <_svfiprintf_r+0x1e8>)
 8008192:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008196:	2206      	movs	r2, #6
 8008198:	f7f8 f81a 	bl	80001d0 <memchr>
 800819c:	2800      	cmp	r0, #0
 800819e:	d036      	beq.n	800820e <_svfiprintf_r+0x1d2>
 80081a0:	4b21      	ldr	r3, [pc, #132]	@ (8008228 <_svfiprintf_r+0x1ec>)
 80081a2:	bb1b      	cbnz	r3, 80081ec <_svfiprintf_r+0x1b0>
 80081a4:	9b03      	ldr	r3, [sp, #12]
 80081a6:	3307      	adds	r3, #7
 80081a8:	f023 0307 	bic.w	r3, r3, #7
 80081ac:	3308      	adds	r3, #8
 80081ae:	9303      	str	r3, [sp, #12]
 80081b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081b2:	4433      	add	r3, r6
 80081b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80081b6:	e76a      	b.n	800808e <_svfiprintf_r+0x52>
 80081b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80081bc:	460c      	mov	r4, r1
 80081be:	2001      	movs	r0, #1
 80081c0:	e7a8      	b.n	8008114 <_svfiprintf_r+0xd8>
 80081c2:	2300      	movs	r3, #0
 80081c4:	3401      	adds	r4, #1
 80081c6:	9305      	str	r3, [sp, #20]
 80081c8:	4619      	mov	r1, r3
 80081ca:	f04f 0c0a 	mov.w	ip, #10
 80081ce:	4620      	mov	r0, r4
 80081d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081d4:	3a30      	subs	r2, #48	@ 0x30
 80081d6:	2a09      	cmp	r2, #9
 80081d8:	d903      	bls.n	80081e2 <_svfiprintf_r+0x1a6>
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d0c6      	beq.n	800816c <_svfiprintf_r+0x130>
 80081de:	9105      	str	r1, [sp, #20]
 80081e0:	e7c4      	b.n	800816c <_svfiprintf_r+0x130>
 80081e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80081e6:	4604      	mov	r4, r0
 80081e8:	2301      	movs	r3, #1
 80081ea:	e7f0      	b.n	80081ce <_svfiprintf_r+0x192>
 80081ec:	ab03      	add	r3, sp, #12
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	462a      	mov	r2, r5
 80081f2:	4b0e      	ldr	r3, [pc, #56]	@ (800822c <_svfiprintf_r+0x1f0>)
 80081f4:	a904      	add	r1, sp, #16
 80081f6:	4638      	mov	r0, r7
 80081f8:	f7fd fe7e 	bl	8005ef8 <_printf_float>
 80081fc:	1c42      	adds	r2, r0, #1
 80081fe:	4606      	mov	r6, r0
 8008200:	d1d6      	bne.n	80081b0 <_svfiprintf_r+0x174>
 8008202:	89ab      	ldrh	r3, [r5, #12]
 8008204:	065b      	lsls	r3, r3, #25
 8008206:	f53f af2d 	bmi.w	8008064 <_svfiprintf_r+0x28>
 800820a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800820c:	e72c      	b.n	8008068 <_svfiprintf_r+0x2c>
 800820e:	ab03      	add	r3, sp, #12
 8008210:	9300      	str	r3, [sp, #0]
 8008212:	462a      	mov	r2, r5
 8008214:	4b05      	ldr	r3, [pc, #20]	@ (800822c <_svfiprintf_r+0x1f0>)
 8008216:	a904      	add	r1, sp, #16
 8008218:	4638      	mov	r0, r7
 800821a:	f7fe f905 	bl	8006428 <_printf_i>
 800821e:	e7ed      	b.n	80081fc <_svfiprintf_r+0x1c0>
 8008220:	08008c92 	.word	0x08008c92
 8008224:	08008c9c 	.word	0x08008c9c
 8008228:	08005ef9 	.word	0x08005ef9
 800822c:	08007f85 	.word	0x08007f85
 8008230:	08008c98 	.word	0x08008c98

08008234 <__sflush_r>:
 8008234:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800823c:	0716      	lsls	r6, r2, #28
 800823e:	4605      	mov	r5, r0
 8008240:	460c      	mov	r4, r1
 8008242:	d454      	bmi.n	80082ee <__sflush_r+0xba>
 8008244:	684b      	ldr	r3, [r1, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	dc02      	bgt.n	8008250 <__sflush_r+0x1c>
 800824a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	dd48      	ble.n	80082e2 <__sflush_r+0xae>
 8008250:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008252:	2e00      	cmp	r6, #0
 8008254:	d045      	beq.n	80082e2 <__sflush_r+0xae>
 8008256:	2300      	movs	r3, #0
 8008258:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800825c:	682f      	ldr	r7, [r5, #0]
 800825e:	6a21      	ldr	r1, [r4, #32]
 8008260:	602b      	str	r3, [r5, #0]
 8008262:	d030      	beq.n	80082c6 <__sflush_r+0x92>
 8008264:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008266:	89a3      	ldrh	r3, [r4, #12]
 8008268:	0759      	lsls	r1, r3, #29
 800826a:	d505      	bpl.n	8008278 <__sflush_r+0x44>
 800826c:	6863      	ldr	r3, [r4, #4]
 800826e:	1ad2      	subs	r2, r2, r3
 8008270:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008272:	b10b      	cbz	r3, 8008278 <__sflush_r+0x44>
 8008274:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008276:	1ad2      	subs	r2, r2, r3
 8008278:	2300      	movs	r3, #0
 800827a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800827c:	6a21      	ldr	r1, [r4, #32]
 800827e:	4628      	mov	r0, r5
 8008280:	47b0      	blx	r6
 8008282:	1c43      	adds	r3, r0, #1
 8008284:	89a3      	ldrh	r3, [r4, #12]
 8008286:	d106      	bne.n	8008296 <__sflush_r+0x62>
 8008288:	6829      	ldr	r1, [r5, #0]
 800828a:	291d      	cmp	r1, #29
 800828c:	d82b      	bhi.n	80082e6 <__sflush_r+0xb2>
 800828e:	4a2a      	ldr	r2, [pc, #168]	@ (8008338 <__sflush_r+0x104>)
 8008290:	40ca      	lsrs	r2, r1
 8008292:	07d6      	lsls	r6, r2, #31
 8008294:	d527      	bpl.n	80082e6 <__sflush_r+0xb2>
 8008296:	2200      	movs	r2, #0
 8008298:	6062      	str	r2, [r4, #4]
 800829a:	04d9      	lsls	r1, r3, #19
 800829c:	6922      	ldr	r2, [r4, #16]
 800829e:	6022      	str	r2, [r4, #0]
 80082a0:	d504      	bpl.n	80082ac <__sflush_r+0x78>
 80082a2:	1c42      	adds	r2, r0, #1
 80082a4:	d101      	bne.n	80082aa <__sflush_r+0x76>
 80082a6:	682b      	ldr	r3, [r5, #0]
 80082a8:	b903      	cbnz	r3, 80082ac <__sflush_r+0x78>
 80082aa:	6560      	str	r0, [r4, #84]	@ 0x54
 80082ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082ae:	602f      	str	r7, [r5, #0]
 80082b0:	b1b9      	cbz	r1, 80082e2 <__sflush_r+0xae>
 80082b2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082b6:	4299      	cmp	r1, r3
 80082b8:	d002      	beq.n	80082c0 <__sflush_r+0x8c>
 80082ba:	4628      	mov	r0, r5
 80082bc:	f7ff f9e8 	bl	8007690 <_free_r>
 80082c0:	2300      	movs	r3, #0
 80082c2:	6363      	str	r3, [r4, #52]	@ 0x34
 80082c4:	e00d      	b.n	80082e2 <__sflush_r+0xae>
 80082c6:	2301      	movs	r3, #1
 80082c8:	4628      	mov	r0, r5
 80082ca:	47b0      	blx	r6
 80082cc:	4602      	mov	r2, r0
 80082ce:	1c50      	adds	r0, r2, #1
 80082d0:	d1c9      	bne.n	8008266 <__sflush_r+0x32>
 80082d2:	682b      	ldr	r3, [r5, #0]
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d0c6      	beq.n	8008266 <__sflush_r+0x32>
 80082d8:	2b1d      	cmp	r3, #29
 80082da:	d001      	beq.n	80082e0 <__sflush_r+0xac>
 80082dc:	2b16      	cmp	r3, #22
 80082de:	d11e      	bne.n	800831e <__sflush_r+0xea>
 80082e0:	602f      	str	r7, [r5, #0]
 80082e2:	2000      	movs	r0, #0
 80082e4:	e022      	b.n	800832c <__sflush_r+0xf8>
 80082e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082ea:	b21b      	sxth	r3, r3
 80082ec:	e01b      	b.n	8008326 <__sflush_r+0xf2>
 80082ee:	690f      	ldr	r7, [r1, #16]
 80082f0:	2f00      	cmp	r7, #0
 80082f2:	d0f6      	beq.n	80082e2 <__sflush_r+0xae>
 80082f4:	0793      	lsls	r3, r2, #30
 80082f6:	680e      	ldr	r6, [r1, #0]
 80082f8:	bf08      	it	eq
 80082fa:	694b      	ldreq	r3, [r1, #20]
 80082fc:	600f      	str	r7, [r1, #0]
 80082fe:	bf18      	it	ne
 8008300:	2300      	movne	r3, #0
 8008302:	eba6 0807 	sub.w	r8, r6, r7
 8008306:	608b      	str	r3, [r1, #8]
 8008308:	f1b8 0f00 	cmp.w	r8, #0
 800830c:	dde9      	ble.n	80082e2 <__sflush_r+0xae>
 800830e:	6a21      	ldr	r1, [r4, #32]
 8008310:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008312:	4643      	mov	r3, r8
 8008314:	463a      	mov	r2, r7
 8008316:	4628      	mov	r0, r5
 8008318:	47b0      	blx	r6
 800831a:	2800      	cmp	r0, #0
 800831c:	dc08      	bgt.n	8008330 <__sflush_r+0xfc>
 800831e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008322:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008326:	81a3      	strh	r3, [r4, #12]
 8008328:	f04f 30ff 	mov.w	r0, #4294967295
 800832c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008330:	4407      	add	r7, r0
 8008332:	eba8 0800 	sub.w	r8, r8, r0
 8008336:	e7e7      	b.n	8008308 <__sflush_r+0xd4>
 8008338:	20400001 	.word	0x20400001

0800833c <_fflush_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	690b      	ldr	r3, [r1, #16]
 8008340:	4605      	mov	r5, r0
 8008342:	460c      	mov	r4, r1
 8008344:	b913      	cbnz	r3, 800834c <_fflush_r+0x10>
 8008346:	2500      	movs	r5, #0
 8008348:	4628      	mov	r0, r5
 800834a:	bd38      	pop	{r3, r4, r5, pc}
 800834c:	b118      	cbz	r0, 8008356 <_fflush_r+0x1a>
 800834e:	6a03      	ldr	r3, [r0, #32]
 8008350:	b90b      	cbnz	r3, 8008356 <_fflush_r+0x1a>
 8008352:	f7fe fa13 	bl	800677c <__sinit>
 8008356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800835a:	2b00      	cmp	r3, #0
 800835c:	d0f3      	beq.n	8008346 <_fflush_r+0xa>
 800835e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008360:	07d0      	lsls	r0, r2, #31
 8008362:	d404      	bmi.n	800836e <_fflush_r+0x32>
 8008364:	0599      	lsls	r1, r3, #22
 8008366:	d402      	bmi.n	800836e <_fflush_r+0x32>
 8008368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800836a:	f7fe fb34 	bl	80069d6 <__retarget_lock_acquire_recursive>
 800836e:	4628      	mov	r0, r5
 8008370:	4621      	mov	r1, r4
 8008372:	f7ff ff5f 	bl	8008234 <__sflush_r>
 8008376:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008378:	07da      	lsls	r2, r3, #31
 800837a:	4605      	mov	r5, r0
 800837c:	d4e4      	bmi.n	8008348 <_fflush_r+0xc>
 800837e:	89a3      	ldrh	r3, [r4, #12]
 8008380:	059b      	lsls	r3, r3, #22
 8008382:	d4e1      	bmi.n	8008348 <_fflush_r+0xc>
 8008384:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008386:	f7fe fb27 	bl	80069d8 <__retarget_lock_release_recursive>
 800838a:	e7dd      	b.n	8008348 <_fflush_r+0xc>

0800838c <memmove>:
 800838c:	4288      	cmp	r0, r1
 800838e:	b510      	push	{r4, lr}
 8008390:	eb01 0402 	add.w	r4, r1, r2
 8008394:	d902      	bls.n	800839c <memmove+0x10>
 8008396:	4284      	cmp	r4, r0
 8008398:	4623      	mov	r3, r4
 800839a:	d807      	bhi.n	80083ac <memmove+0x20>
 800839c:	1e43      	subs	r3, r0, #1
 800839e:	42a1      	cmp	r1, r4
 80083a0:	d008      	beq.n	80083b4 <memmove+0x28>
 80083a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083aa:	e7f8      	b.n	800839e <memmove+0x12>
 80083ac:	4402      	add	r2, r0
 80083ae:	4601      	mov	r1, r0
 80083b0:	428a      	cmp	r2, r1
 80083b2:	d100      	bne.n	80083b6 <memmove+0x2a>
 80083b4:	bd10      	pop	{r4, pc}
 80083b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083be:	e7f7      	b.n	80083b0 <memmove+0x24>

080083c0 <_sbrk_r>:
 80083c0:	b538      	push	{r3, r4, r5, lr}
 80083c2:	4d06      	ldr	r5, [pc, #24]	@ (80083dc <_sbrk_r+0x1c>)
 80083c4:	2300      	movs	r3, #0
 80083c6:	4604      	mov	r4, r0
 80083c8:	4608      	mov	r0, r1
 80083ca:	602b      	str	r3, [r5, #0]
 80083cc:	f7f9 fb84 	bl	8001ad8 <_sbrk>
 80083d0:	1c43      	adds	r3, r0, #1
 80083d2:	d102      	bne.n	80083da <_sbrk_r+0x1a>
 80083d4:	682b      	ldr	r3, [r5, #0]
 80083d6:	b103      	cbz	r3, 80083da <_sbrk_r+0x1a>
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	bd38      	pop	{r3, r4, r5, pc}
 80083dc:	200004a0 	.word	0x200004a0

080083e0 <memcpy>:
 80083e0:	440a      	add	r2, r1
 80083e2:	4291      	cmp	r1, r2
 80083e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80083e8:	d100      	bne.n	80083ec <memcpy+0xc>
 80083ea:	4770      	bx	lr
 80083ec:	b510      	push	{r4, lr}
 80083ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083f6:	4291      	cmp	r1, r2
 80083f8:	d1f9      	bne.n	80083ee <memcpy+0xe>
 80083fa:	bd10      	pop	{r4, pc}

080083fc <__assert_func>:
 80083fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083fe:	4614      	mov	r4, r2
 8008400:	461a      	mov	r2, r3
 8008402:	4b09      	ldr	r3, [pc, #36]	@ (8008428 <__assert_func+0x2c>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4605      	mov	r5, r0
 8008408:	68d8      	ldr	r0, [r3, #12]
 800840a:	b14c      	cbz	r4, 8008420 <__assert_func+0x24>
 800840c:	4b07      	ldr	r3, [pc, #28]	@ (800842c <__assert_func+0x30>)
 800840e:	9100      	str	r1, [sp, #0]
 8008410:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008414:	4906      	ldr	r1, [pc, #24]	@ (8008430 <__assert_func+0x34>)
 8008416:	462b      	mov	r3, r5
 8008418:	f000 f870 	bl	80084fc <fiprintf>
 800841c:	f000 f880 	bl	8008520 <abort>
 8008420:	4b04      	ldr	r3, [pc, #16]	@ (8008434 <__assert_func+0x38>)
 8008422:	461c      	mov	r4, r3
 8008424:	e7f3      	b.n	800840e <__assert_func+0x12>
 8008426:	bf00      	nop
 8008428:	2000003c 	.word	0x2000003c
 800842c:	08008cad 	.word	0x08008cad
 8008430:	08008cba 	.word	0x08008cba
 8008434:	08008ce8 	.word	0x08008ce8

08008438 <_calloc_r>:
 8008438:	b570      	push	{r4, r5, r6, lr}
 800843a:	fba1 5402 	umull	r5, r4, r1, r2
 800843e:	b934      	cbnz	r4, 800844e <_calloc_r+0x16>
 8008440:	4629      	mov	r1, r5
 8008442:	f7ff f999 	bl	8007778 <_malloc_r>
 8008446:	4606      	mov	r6, r0
 8008448:	b928      	cbnz	r0, 8008456 <_calloc_r+0x1e>
 800844a:	4630      	mov	r0, r6
 800844c:	bd70      	pop	{r4, r5, r6, pc}
 800844e:	220c      	movs	r2, #12
 8008450:	6002      	str	r2, [r0, #0]
 8008452:	2600      	movs	r6, #0
 8008454:	e7f9      	b.n	800844a <_calloc_r+0x12>
 8008456:	462a      	mov	r2, r5
 8008458:	4621      	mov	r1, r4
 800845a:	f7fe fa3e 	bl	80068da <memset>
 800845e:	e7f4      	b.n	800844a <_calloc_r+0x12>

08008460 <__ascii_mbtowc>:
 8008460:	b082      	sub	sp, #8
 8008462:	b901      	cbnz	r1, 8008466 <__ascii_mbtowc+0x6>
 8008464:	a901      	add	r1, sp, #4
 8008466:	b142      	cbz	r2, 800847a <__ascii_mbtowc+0x1a>
 8008468:	b14b      	cbz	r3, 800847e <__ascii_mbtowc+0x1e>
 800846a:	7813      	ldrb	r3, [r2, #0]
 800846c:	600b      	str	r3, [r1, #0]
 800846e:	7812      	ldrb	r2, [r2, #0]
 8008470:	1e10      	subs	r0, r2, #0
 8008472:	bf18      	it	ne
 8008474:	2001      	movne	r0, #1
 8008476:	b002      	add	sp, #8
 8008478:	4770      	bx	lr
 800847a:	4610      	mov	r0, r2
 800847c:	e7fb      	b.n	8008476 <__ascii_mbtowc+0x16>
 800847e:	f06f 0001 	mvn.w	r0, #1
 8008482:	e7f8      	b.n	8008476 <__ascii_mbtowc+0x16>

08008484 <_realloc_r>:
 8008484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008488:	4607      	mov	r7, r0
 800848a:	4614      	mov	r4, r2
 800848c:	460d      	mov	r5, r1
 800848e:	b921      	cbnz	r1, 800849a <_realloc_r+0x16>
 8008490:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008494:	4611      	mov	r1, r2
 8008496:	f7ff b96f 	b.w	8007778 <_malloc_r>
 800849a:	b92a      	cbnz	r2, 80084a8 <_realloc_r+0x24>
 800849c:	f7ff f8f8 	bl	8007690 <_free_r>
 80084a0:	4625      	mov	r5, r4
 80084a2:	4628      	mov	r0, r5
 80084a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084a8:	f000 f841 	bl	800852e <_malloc_usable_size_r>
 80084ac:	4284      	cmp	r4, r0
 80084ae:	4606      	mov	r6, r0
 80084b0:	d802      	bhi.n	80084b8 <_realloc_r+0x34>
 80084b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80084b6:	d8f4      	bhi.n	80084a2 <_realloc_r+0x1e>
 80084b8:	4621      	mov	r1, r4
 80084ba:	4638      	mov	r0, r7
 80084bc:	f7ff f95c 	bl	8007778 <_malloc_r>
 80084c0:	4680      	mov	r8, r0
 80084c2:	b908      	cbnz	r0, 80084c8 <_realloc_r+0x44>
 80084c4:	4645      	mov	r5, r8
 80084c6:	e7ec      	b.n	80084a2 <_realloc_r+0x1e>
 80084c8:	42b4      	cmp	r4, r6
 80084ca:	4622      	mov	r2, r4
 80084cc:	4629      	mov	r1, r5
 80084ce:	bf28      	it	cs
 80084d0:	4632      	movcs	r2, r6
 80084d2:	f7ff ff85 	bl	80083e0 <memcpy>
 80084d6:	4629      	mov	r1, r5
 80084d8:	4638      	mov	r0, r7
 80084da:	f7ff f8d9 	bl	8007690 <_free_r>
 80084de:	e7f1      	b.n	80084c4 <_realloc_r+0x40>

080084e0 <__ascii_wctomb>:
 80084e0:	4603      	mov	r3, r0
 80084e2:	4608      	mov	r0, r1
 80084e4:	b141      	cbz	r1, 80084f8 <__ascii_wctomb+0x18>
 80084e6:	2aff      	cmp	r2, #255	@ 0xff
 80084e8:	d904      	bls.n	80084f4 <__ascii_wctomb+0x14>
 80084ea:	228a      	movs	r2, #138	@ 0x8a
 80084ec:	601a      	str	r2, [r3, #0]
 80084ee:	f04f 30ff 	mov.w	r0, #4294967295
 80084f2:	4770      	bx	lr
 80084f4:	700a      	strb	r2, [r1, #0]
 80084f6:	2001      	movs	r0, #1
 80084f8:	4770      	bx	lr
	...

080084fc <fiprintf>:
 80084fc:	b40e      	push	{r1, r2, r3}
 80084fe:	b503      	push	{r0, r1, lr}
 8008500:	4601      	mov	r1, r0
 8008502:	ab03      	add	r3, sp, #12
 8008504:	4805      	ldr	r0, [pc, #20]	@ (800851c <fiprintf+0x20>)
 8008506:	f853 2b04 	ldr.w	r2, [r3], #4
 800850a:	6800      	ldr	r0, [r0, #0]
 800850c:	9301      	str	r3, [sp, #4]
 800850e:	f000 f83f 	bl	8008590 <_vfiprintf_r>
 8008512:	b002      	add	sp, #8
 8008514:	f85d eb04 	ldr.w	lr, [sp], #4
 8008518:	b003      	add	sp, #12
 800851a:	4770      	bx	lr
 800851c:	2000003c 	.word	0x2000003c

08008520 <abort>:
 8008520:	b508      	push	{r3, lr}
 8008522:	2006      	movs	r0, #6
 8008524:	f000 fa08 	bl	8008938 <raise>
 8008528:	2001      	movs	r0, #1
 800852a:	f7f9 fa5d 	bl	80019e8 <_exit>

0800852e <_malloc_usable_size_r>:
 800852e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008532:	1f18      	subs	r0, r3, #4
 8008534:	2b00      	cmp	r3, #0
 8008536:	bfbc      	itt	lt
 8008538:	580b      	ldrlt	r3, [r1, r0]
 800853a:	18c0      	addlt	r0, r0, r3
 800853c:	4770      	bx	lr

0800853e <__sfputc_r>:
 800853e:	6893      	ldr	r3, [r2, #8]
 8008540:	3b01      	subs	r3, #1
 8008542:	2b00      	cmp	r3, #0
 8008544:	b410      	push	{r4}
 8008546:	6093      	str	r3, [r2, #8]
 8008548:	da08      	bge.n	800855c <__sfputc_r+0x1e>
 800854a:	6994      	ldr	r4, [r2, #24]
 800854c:	42a3      	cmp	r3, r4
 800854e:	db01      	blt.n	8008554 <__sfputc_r+0x16>
 8008550:	290a      	cmp	r1, #10
 8008552:	d103      	bne.n	800855c <__sfputc_r+0x1e>
 8008554:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008558:	f000 b932 	b.w	80087c0 <__swbuf_r>
 800855c:	6813      	ldr	r3, [r2, #0]
 800855e:	1c58      	adds	r0, r3, #1
 8008560:	6010      	str	r0, [r2, #0]
 8008562:	7019      	strb	r1, [r3, #0]
 8008564:	4608      	mov	r0, r1
 8008566:	f85d 4b04 	ldr.w	r4, [sp], #4
 800856a:	4770      	bx	lr

0800856c <__sfputs_r>:
 800856c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856e:	4606      	mov	r6, r0
 8008570:	460f      	mov	r7, r1
 8008572:	4614      	mov	r4, r2
 8008574:	18d5      	adds	r5, r2, r3
 8008576:	42ac      	cmp	r4, r5
 8008578:	d101      	bne.n	800857e <__sfputs_r+0x12>
 800857a:	2000      	movs	r0, #0
 800857c:	e007      	b.n	800858e <__sfputs_r+0x22>
 800857e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008582:	463a      	mov	r2, r7
 8008584:	4630      	mov	r0, r6
 8008586:	f7ff ffda 	bl	800853e <__sfputc_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	d1f3      	bne.n	8008576 <__sfputs_r+0xa>
 800858e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008590 <_vfiprintf_r>:
 8008590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008594:	460d      	mov	r5, r1
 8008596:	b09d      	sub	sp, #116	@ 0x74
 8008598:	4614      	mov	r4, r2
 800859a:	4698      	mov	r8, r3
 800859c:	4606      	mov	r6, r0
 800859e:	b118      	cbz	r0, 80085a8 <_vfiprintf_r+0x18>
 80085a0:	6a03      	ldr	r3, [r0, #32]
 80085a2:	b90b      	cbnz	r3, 80085a8 <_vfiprintf_r+0x18>
 80085a4:	f7fe f8ea 	bl	800677c <__sinit>
 80085a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085aa:	07d9      	lsls	r1, r3, #31
 80085ac:	d405      	bmi.n	80085ba <_vfiprintf_r+0x2a>
 80085ae:	89ab      	ldrh	r3, [r5, #12]
 80085b0:	059a      	lsls	r2, r3, #22
 80085b2:	d402      	bmi.n	80085ba <_vfiprintf_r+0x2a>
 80085b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085b6:	f7fe fa0e 	bl	80069d6 <__retarget_lock_acquire_recursive>
 80085ba:	89ab      	ldrh	r3, [r5, #12]
 80085bc:	071b      	lsls	r3, r3, #28
 80085be:	d501      	bpl.n	80085c4 <_vfiprintf_r+0x34>
 80085c0:	692b      	ldr	r3, [r5, #16]
 80085c2:	b99b      	cbnz	r3, 80085ec <_vfiprintf_r+0x5c>
 80085c4:	4629      	mov	r1, r5
 80085c6:	4630      	mov	r0, r6
 80085c8:	f000 f938 	bl	800883c <__swsetup_r>
 80085cc:	b170      	cbz	r0, 80085ec <_vfiprintf_r+0x5c>
 80085ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80085d0:	07dc      	lsls	r4, r3, #31
 80085d2:	d504      	bpl.n	80085de <_vfiprintf_r+0x4e>
 80085d4:	f04f 30ff 	mov.w	r0, #4294967295
 80085d8:	b01d      	add	sp, #116	@ 0x74
 80085da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085de:	89ab      	ldrh	r3, [r5, #12]
 80085e0:	0598      	lsls	r0, r3, #22
 80085e2:	d4f7      	bmi.n	80085d4 <_vfiprintf_r+0x44>
 80085e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80085e6:	f7fe f9f7 	bl	80069d8 <__retarget_lock_release_recursive>
 80085ea:	e7f3      	b.n	80085d4 <_vfiprintf_r+0x44>
 80085ec:	2300      	movs	r3, #0
 80085ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80085f0:	2320      	movs	r3, #32
 80085f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80085f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80085fa:	2330      	movs	r3, #48	@ 0x30
 80085fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80087ac <_vfiprintf_r+0x21c>
 8008600:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008604:	f04f 0901 	mov.w	r9, #1
 8008608:	4623      	mov	r3, r4
 800860a:	469a      	mov	sl, r3
 800860c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008610:	b10a      	cbz	r2, 8008616 <_vfiprintf_r+0x86>
 8008612:	2a25      	cmp	r2, #37	@ 0x25
 8008614:	d1f9      	bne.n	800860a <_vfiprintf_r+0x7a>
 8008616:	ebba 0b04 	subs.w	fp, sl, r4
 800861a:	d00b      	beq.n	8008634 <_vfiprintf_r+0xa4>
 800861c:	465b      	mov	r3, fp
 800861e:	4622      	mov	r2, r4
 8008620:	4629      	mov	r1, r5
 8008622:	4630      	mov	r0, r6
 8008624:	f7ff ffa2 	bl	800856c <__sfputs_r>
 8008628:	3001      	adds	r0, #1
 800862a:	f000 80a7 	beq.w	800877c <_vfiprintf_r+0x1ec>
 800862e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008630:	445a      	add	r2, fp
 8008632:	9209      	str	r2, [sp, #36]	@ 0x24
 8008634:	f89a 3000 	ldrb.w	r3, [sl]
 8008638:	2b00      	cmp	r3, #0
 800863a:	f000 809f 	beq.w	800877c <_vfiprintf_r+0x1ec>
 800863e:	2300      	movs	r3, #0
 8008640:	f04f 32ff 	mov.w	r2, #4294967295
 8008644:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008648:	f10a 0a01 	add.w	sl, sl, #1
 800864c:	9304      	str	r3, [sp, #16]
 800864e:	9307      	str	r3, [sp, #28]
 8008650:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008654:	931a      	str	r3, [sp, #104]	@ 0x68
 8008656:	4654      	mov	r4, sl
 8008658:	2205      	movs	r2, #5
 800865a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865e:	4853      	ldr	r0, [pc, #332]	@ (80087ac <_vfiprintf_r+0x21c>)
 8008660:	f7f7 fdb6 	bl	80001d0 <memchr>
 8008664:	9a04      	ldr	r2, [sp, #16]
 8008666:	b9d8      	cbnz	r0, 80086a0 <_vfiprintf_r+0x110>
 8008668:	06d1      	lsls	r1, r2, #27
 800866a:	bf44      	itt	mi
 800866c:	2320      	movmi	r3, #32
 800866e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008672:	0713      	lsls	r3, r2, #28
 8008674:	bf44      	itt	mi
 8008676:	232b      	movmi	r3, #43	@ 0x2b
 8008678:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800867c:	f89a 3000 	ldrb.w	r3, [sl]
 8008680:	2b2a      	cmp	r3, #42	@ 0x2a
 8008682:	d015      	beq.n	80086b0 <_vfiprintf_r+0x120>
 8008684:	9a07      	ldr	r2, [sp, #28]
 8008686:	4654      	mov	r4, sl
 8008688:	2000      	movs	r0, #0
 800868a:	f04f 0c0a 	mov.w	ip, #10
 800868e:	4621      	mov	r1, r4
 8008690:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008694:	3b30      	subs	r3, #48	@ 0x30
 8008696:	2b09      	cmp	r3, #9
 8008698:	d94b      	bls.n	8008732 <_vfiprintf_r+0x1a2>
 800869a:	b1b0      	cbz	r0, 80086ca <_vfiprintf_r+0x13a>
 800869c:	9207      	str	r2, [sp, #28]
 800869e:	e014      	b.n	80086ca <_vfiprintf_r+0x13a>
 80086a0:	eba0 0308 	sub.w	r3, r0, r8
 80086a4:	fa09 f303 	lsl.w	r3, r9, r3
 80086a8:	4313      	orrs	r3, r2
 80086aa:	9304      	str	r3, [sp, #16]
 80086ac:	46a2      	mov	sl, r4
 80086ae:	e7d2      	b.n	8008656 <_vfiprintf_r+0xc6>
 80086b0:	9b03      	ldr	r3, [sp, #12]
 80086b2:	1d19      	adds	r1, r3, #4
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	9103      	str	r1, [sp, #12]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	bfbb      	ittet	lt
 80086bc:	425b      	neglt	r3, r3
 80086be:	f042 0202 	orrlt.w	r2, r2, #2
 80086c2:	9307      	strge	r3, [sp, #28]
 80086c4:	9307      	strlt	r3, [sp, #28]
 80086c6:	bfb8      	it	lt
 80086c8:	9204      	strlt	r2, [sp, #16]
 80086ca:	7823      	ldrb	r3, [r4, #0]
 80086cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80086ce:	d10a      	bne.n	80086e6 <_vfiprintf_r+0x156>
 80086d0:	7863      	ldrb	r3, [r4, #1]
 80086d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80086d4:	d132      	bne.n	800873c <_vfiprintf_r+0x1ac>
 80086d6:	9b03      	ldr	r3, [sp, #12]
 80086d8:	1d1a      	adds	r2, r3, #4
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	9203      	str	r2, [sp, #12]
 80086de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80086e2:	3402      	adds	r4, #2
 80086e4:	9305      	str	r3, [sp, #20]
 80086e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80087bc <_vfiprintf_r+0x22c>
 80086ea:	7821      	ldrb	r1, [r4, #0]
 80086ec:	2203      	movs	r2, #3
 80086ee:	4650      	mov	r0, sl
 80086f0:	f7f7 fd6e 	bl	80001d0 <memchr>
 80086f4:	b138      	cbz	r0, 8008706 <_vfiprintf_r+0x176>
 80086f6:	9b04      	ldr	r3, [sp, #16]
 80086f8:	eba0 000a 	sub.w	r0, r0, sl
 80086fc:	2240      	movs	r2, #64	@ 0x40
 80086fe:	4082      	lsls	r2, r0
 8008700:	4313      	orrs	r3, r2
 8008702:	3401      	adds	r4, #1
 8008704:	9304      	str	r3, [sp, #16]
 8008706:	f814 1b01 	ldrb.w	r1, [r4], #1
 800870a:	4829      	ldr	r0, [pc, #164]	@ (80087b0 <_vfiprintf_r+0x220>)
 800870c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008710:	2206      	movs	r2, #6
 8008712:	f7f7 fd5d 	bl	80001d0 <memchr>
 8008716:	2800      	cmp	r0, #0
 8008718:	d03f      	beq.n	800879a <_vfiprintf_r+0x20a>
 800871a:	4b26      	ldr	r3, [pc, #152]	@ (80087b4 <_vfiprintf_r+0x224>)
 800871c:	bb1b      	cbnz	r3, 8008766 <_vfiprintf_r+0x1d6>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	3307      	adds	r3, #7
 8008722:	f023 0307 	bic.w	r3, r3, #7
 8008726:	3308      	adds	r3, #8
 8008728:	9303      	str	r3, [sp, #12]
 800872a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800872c:	443b      	add	r3, r7
 800872e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008730:	e76a      	b.n	8008608 <_vfiprintf_r+0x78>
 8008732:	fb0c 3202 	mla	r2, ip, r2, r3
 8008736:	460c      	mov	r4, r1
 8008738:	2001      	movs	r0, #1
 800873a:	e7a8      	b.n	800868e <_vfiprintf_r+0xfe>
 800873c:	2300      	movs	r3, #0
 800873e:	3401      	adds	r4, #1
 8008740:	9305      	str	r3, [sp, #20]
 8008742:	4619      	mov	r1, r3
 8008744:	f04f 0c0a 	mov.w	ip, #10
 8008748:	4620      	mov	r0, r4
 800874a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800874e:	3a30      	subs	r2, #48	@ 0x30
 8008750:	2a09      	cmp	r2, #9
 8008752:	d903      	bls.n	800875c <_vfiprintf_r+0x1cc>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d0c6      	beq.n	80086e6 <_vfiprintf_r+0x156>
 8008758:	9105      	str	r1, [sp, #20]
 800875a:	e7c4      	b.n	80086e6 <_vfiprintf_r+0x156>
 800875c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008760:	4604      	mov	r4, r0
 8008762:	2301      	movs	r3, #1
 8008764:	e7f0      	b.n	8008748 <_vfiprintf_r+0x1b8>
 8008766:	ab03      	add	r3, sp, #12
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	462a      	mov	r2, r5
 800876c:	4b12      	ldr	r3, [pc, #72]	@ (80087b8 <_vfiprintf_r+0x228>)
 800876e:	a904      	add	r1, sp, #16
 8008770:	4630      	mov	r0, r6
 8008772:	f7fd fbc1 	bl	8005ef8 <_printf_float>
 8008776:	4607      	mov	r7, r0
 8008778:	1c78      	adds	r0, r7, #1
 800877a:	d1d6      	bne.n	800872a <_vfiprintf_r+0x19a>
 800877c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800877e:	07d9      	lsls	r1, r3, #31
 8008780:	d405      	bmi.n	800878e <_vfiprintf_r+0x1fe>
 8008782:	89ab      	ldrh	r3, [r5, #12]
 8008784:	059a      	lsls	r2, r3, #22
 8008786:	d402      	bmi.n	800878e <_vfiprintf_r+0x1fe>
 8008788:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800878a:	f7fe f925 	bl	80069d8 <__retarget_lock_release_recursive>
 800878e:	89ab      	ldrh	r3, [r5, #12]
 8008790:	065b      	lsls	r3, r3, #25
 8008792:	f53f af1f 	bmi.w	80085d4 <_vfiprintf_r+0x44>
 8008796:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008798:	e71e      	b.n	80085d8 <_vfiprintf_r+0x48>
 800879a:	ab03      	add	r3, sp, #12
 800879c:	9300      	str	r3, [sp, #0]
 800879e:	462a      	mov	r2, r5
 80087a0:	4b05      	ldr	r3, [pc, #20]	@ (80087b8 <_vfiprintf_r+0x228>)
 80087a2:	a904      	add	r1, sp, #16
 80087a4:	4630      	mov	r0, r6
 80087a6:	f7fd fe3f 	bl	8006428 <_printf_i>
 80087aa:	e7e4      	b.n	8008776 <_vfiprintf_r+0x1e6>
 80087ac:	08008c92 	.word	0x08008c92
 80087b0:	08008c9c 	.word	0x08008c9c
 80087b4:	08005ef9 	.word	0x08005ef9
 80087b8:	0800856d 	.word	0x0800856d
 80087bc:	08008c98 	.word	0x08008c98

080087c0 <__swbuf_r>:
 80087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087c2:	460e      	mov	r6, r1
 80087c4:	4614      	mov	r4, r2
 80087c6:	4605      	mov	r5, r0
 80087c8:	b118      	cbz	r0, 80087d2 <__swbuf_r+0x12>
 80087ca:	6a03      	ldr	r3, [r0, #32]
 80087cc:	b90b      	cbnz	r3, 80087d2 <__swbuf_r+0x12>
 80087ce:	f7fd ffd5 	bl	800677c <__sinit>
 80087d2:	69a3      	ldr	r3, [r4, #24]
 80087d4:	60a3      	str	r3, [r4, #8]
 80087d6:	89a3      	ldrh	r3, [r4, #12]
 80087d8:	071a      	lsls	r2, r3, #28
 80087da:	d501      	bpl.n	80087e0 <__swbuf_r+0x20>
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	b943      	cbnz	r3, 80087f2 <__swbuf_r+0x32>
 80087e0:	4621      	mov	r1, r4
 80087e2:	4628      	mov	r0, r5
 80087e4:	f000 f82a 	bl	800883c <__swsetup_r>
 80087e8:	b118      	cbz	r0, 80087f2 <__swbuf_r+0x32>
 80087ea:	f04f 37ff 	mov.w	r7, #4294967295
 80087ee:	4638      	mov	r0, r7
 80087f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	1a98      	subs	r0, r3, r2
 80087f8:	6963      	ldr	r3, [r4, #20]
 80087fa:	b2f6      	uxtb	r6, r6
 80087fc:	4283      	cmp	r3, r0
 80087fe:	4637      	mov	r7, r6
 8008800:	dc05      	bgt.n	800880e <__swbuf_r+0x4e>
 8008802:	4621      	mov	r1, r4
 8008804:	4628      	mov	r0, r5
 8008806:	f7ff fd99 	bl	800833c <_fflush_r>
 800880a:	2800      	cmp	r0, #0
 800880c:	d1ed      	bne.n	80087ea <__swbuf_r+0x2a>
 800880e:	68a3      	ldr	r3, [r4, #8]
 8008810:	3b01      	subs	r3, #1
 8008812:	60a3      	str	r3, [r4, #8]
 8008814:	6823      	ldr	r3, [r4, #0]
 8008816:	1c5a      	adds	r2, r3, #1
 8008818:	6022      	str	r2, [r4, #0]
 800881a:	701e      	strb	r6, [r3, #0]
 800881c:	6962      	ldr	r2, [r4, #20]
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	429a      	cmp	r2, r3
 8008822:	d004      	beq.n	800882e <__swbuf_r+0x6e>
 8008824:	89a3      	ldrh	r3, [r4, #12]
 8008826:	07db      	lsls	r3, r3, #31
 8008828:	d5e1      	bpl.n	80087ee <__swbuf_r+0x2e>
 800882a:	2e0a      	cmp	r6, #10
 800882c:	d1df      	bne.n	80087ee <__swbuf_r+0x2e>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f7ff fd83 	bl	800833c <_fflush_r>
 8008836:	2800      	cmp	r0, #0
 8008838:	d0d9      	beq.n	80087ee <__swbuf_r+0x2e>
 800883a:	e7d6      	b.n	80087ea <__swbuf_r+0x2a>

0800883c <__swsetup_r>:
 800883c:	b538      	push	{r3, r4, r5, lr}
 800883e:	4b29      	ldr	r3, [pc, #164]	@ (80088e4 <__swsetup_r+0xa8>)
 8008840:	4605      	mov	r5, r0
 8008842:	6818      	ldr	r0, [r3, #0]
 8008844:	460c      	mov	r4, r1
 8008846:	b118      	cbz	r0, 8008850 <__swsetup_r+0x14>
 8008848:	6a03      	ldr	r3, [r0, #32]
 800884a:	b90b      	cbnz	r3, 8008850 <__swsetup_r+0x14>
 800884c:	f7fd ff96 	bl	800677c <__sinit>
 8008850:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008854:	0719      	lsls	r1, r3, #28
 8008856:	d422      	bmi.n	800889e <__swsetup_r+0x62>
 8008858:	06da      	lsls	r2, r3, #27
 800885a:	d407      	bmi.n	800886c <__swsetup_r+0x30>
 800885c:	2209      	movs	r2, #9
 800885e:	602a      	str	r2, [r5, #0]
 8008860:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	f04f 30ff 	mov.w	r0, #4294967295
 800886a:	e033      	b.n	80088d4 <__swsetup_r+0x98>
 800886c:	0758      	lsls	r0, r3, #29
 800886e:	d512      	bpl.n	8008896 <__swsetup_r+0x5a>
 8008870:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008872:	b141      	cbz	r1, 8008886 <__swsetup_r+0x4a>
 8008874:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008878:	4299      	cmp	r1, r3
 800887a:	d002      	beq.n	8008882 <__swsetup_r+0x46>
 800887c:	4628      	mov	r0, r5
 800887e:	f7fe ff07 	bl	8007690 <_free_r>
 8008882:	2300      	movs	r3, #0
 8008884:	6363      	str	r3, [r4, #52]	@ 0x34
 8008886:	89a3      	ldrh	r3, [r4, #12]
 8008888:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800888c:	81a3      	strh	r3, [r4, #12]
 800888e:	2300      	movs	r3, #0
 8008890:	6063      	str	r3, [r4, #4]
 8008892:	6923      	ldr	r3, [r4, #16]
 8008894:	6023      	str	r3, [r4, #0]
 8008896:	89a3      	ldrh	r3, [r4, #12]
 8008898:	f043 0308 	orr.w	r3, r3, #8
 800889c:	81a3      	strh	r3, [r4, #12]
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	b94b      	cbnz	r3, 80088b6 <__swsetup_r+0x7a>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80088a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80088ac:	d003      	beq.n	80088b6 <__swsetup_r+0x7a>
 80088ae:	4621      	mov	r1, r4
 80088b0:	4628      	mov	r0, r5
 80088b2:	f000 f883 	bl	80089bc <__smakebuf_r>
 80088b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ba:	f013 0201 	ands.w	r2, r3, #1
 80088be:	d00a      	beq.n	80088d6 <__swsetup_r+0x9a>
 80088c0:	2200      	movs	r2, #0
 80088c2:	60a2      	str	r2, [r4, #8]
 80088c4:	6962      	ldr	r2, [r4, #20]
 80088c6:	4252      	negs	r2, r2
 80088c8:	61a2      	str	r2, [r4, #24]
 80088ca:	6922      	ldr	r2, [r4, #16]
 80088cc:	b942      	cbnz	r2, 80088e0 <__swsetup_r+0xa4>
 80088ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088d2:	d1c5      	bne.n	8008860 <__swsetup_r+0x24>
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	0799      	lsls	r1, r3, #30
 80088d8:	bf58      	it	pl
 80088da:	6962      	ldrpl	r2, [r4, #20]
 80088dc:	60a2      	str	r2, [r4, #8]
 80088de:	e7f4      	b.n	80088ca <__swsetup_r+0x8e>
 80088e0:	2000      	movs	r0, #0
 80088e2:	e7f7      	b.n	80088d4 <__swsetup_r+0x98>
 80088e4:	2000003c 	.word	0x2000003c

080088e8 <_raise_r>:
 80088e8:	291f      	cmp	r1, #31
 80088ea:	b538      	push	{r3, r4, r5, lr}
 80088ec:	4605      	mov	r5, r0
 80088ee:	460c      	mov	r4, r1
 80088f0:	d904      	bls.n	80088fc <_raise_r+0x14>
 80088f2:	2316      	movs	r3, #22
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	f04f 30ff 	mov.w	r0, #4294967295
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088fe:	b112      	cbz	r2, 8008906 <_raise_r+0x1e>
 8008900:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008904:	b94b      	cbnz	r3, 800891a <_raise_r+0x32>
 8008906:	4628      	mov	r0, r5
 8008908:	f000 f830 	bl	800896c <_getpid_r>
 800890c:	4622      	mov	r2, r4
 800890e:	4601      	mov	r1, r0
 8008910:	4628      	mov	r0, r5
 8008912:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008916:	f000 b817 	b.w	8008948 <_kill_r>
 800891a:	2b01      	cmp	r3, #1
 800891c:	d00a      	beq.n	8008934 <_raise_r+0x4c>
 800891e:	1c59      	adds	r1, r3, #1
 8008920:	d103      	bne.n	800892a <_raise_r+0x42>
 8008922:	2316      	movs	r3, #22
 8008924:	6003      	str	r3, [r0, #0]
 8008926:	2001      	movs	r0, #1
 8008928:	e7e7      	b.n	80088fa <_raise_r+0x12>
 800892a:	2100      	movs	r1, #0
 800892c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008930:	4620      	mov	r0, r4
 8008932:	4798      	blx	r3
 8008934:	2000      	movs	r0, #0
 8008936:	e7e0      	b.n	80088fa <_raise_r+0x12>

08008938 <raise>:
 8008938:	4b02      	ldr	r3, [pc, #8]	@ (8008944 <raise+0xc>)
 800893a:	4601      	mov	r1, r0
 800893c:	6818      	ldr	r0, [r3, #0]
 800893e:	f7ff bfd3 	b.w	80088e8 <_raise_r>
 8008942:	bf00      	nop
 8008944:	2000003c 	.word	0x2000003c

08008948 <_kill_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4d07      	ldr	r5, [pc, #28]	@ (8008968 <_kill_r+0x20>)
 800894c:	2300      	movs	r3, #0
 800894e:	4604      	mov	r4, r0
 8008950:	4608      	mov	r0, r1
 8008952:	4611      	mov	r1, r2
 8008954:	602b      	str	r3, [r5, #0]
 8008956:	f7f9 f837 	bl	80019c8 <_kill>
 800895a:	1c43      	adds	r3, r0, #1
 800895c:	d102      	bne.n	8008964 <_kill_r+0x1c>
 800895e:	682b      	ldr	r3, [r5, #0]
 8008960:	b103      	cbz	r3, 8008964 <_kill_r+0x1c>
 8008962:	6023      	str	r3, [r4, #0]
 8008964:	bd38      	pop	{r3, r4, r5, pc}
 8008966:	bf00      	nop
 8008968:	200004a0 	.word	0x200004a0

0800896c <_getpid_r>:
 800896c:	f7f9 b824 	b.w	80019b8 <_getpid>

08008970 <__swhatbuf_r>:
 8008970:	b570      	push	{r4, r5, r6, lr}
 8008972:	460c      	mov	r4, r1
 8008974:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008978:	2900      	cmp	r1, #0
 800897a:	b096      	sub	sp, #88	@ 0x58
 800897c:	4615      	mov	r5, r2
 800897e:	461e      	mov	r6, r3
 8008980:	da0d      	bge.n	800899e <__swhatbuf_r+0x2e>
 8008982:	89a3      	ldrh	r3, [r4, #12]
 8008984:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008988:	f04f 0100 	mov.w	r1, #0
 800898c:	bf14      	ite	ne
 800898e:	2340      	movne	r3, #64	@ 0x40
 8008990:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008994:	2000      	movs	r0, #0
 8008996:	6031      	str	r1, [r6, #0]
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	b016      	add	sp, #88	@ 0x58
 800899c:	bd70      	pop	{r4, r5, r6, pc}
 800899e:	466a      	mov	r2, sp
 80089a0:	f000 f848 	bl	8008a34 <_fstat_r>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	dbec      	blt.n	8008982 <__swhatbuf_r+0x12>
 80089a8:	9901      	ldr	r1, [sp, #4]
 80089aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80089ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80089b2:	4259      	negs	r1, r3
 80089b4:	4159      	adcs	r1, r3
 80089b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80089ba:	e7eb      	b.n	8008994 <__swhatbuf_r+0x24>

080089bc <__smakebuf_r>:
 80089bc:	898b      	ldrh	r3, [r1, #12]
 80089be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80089c0:	079d      	lsls	r5, r3, #30
 80089c2:	4606      	mov	r6, r0
 80089c4:	460c      	mov	r4, r1
 80089c6:	d507      	bpl.n	80089d8 <__smakebuf_r+0x1c>
 80089c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80089cc:	6023      	str	r3, [r4, #0]
 80089ce:	6123      	str	r3, [r4, #16]
 80089d0:	2301      	movs	r3, #1
 80089d2:	6163      	str	r3, [r4, #20]
 80089d4:	b003      	add	sp, #12
 80089d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089d8:	ab01      	add	r3, sp, #4
 80089da:	466a      	mov	r2, sp
 80089dc:	f7ff ffc8 	bl	8008970 <__swhatbuf_r>
 80089e0:	9f00      	ldr	r7, [sp, #0]
 80089e2:	4605      	mov	r5, r0
 80089e4:	4639      	mov	r1, r7
 80089e6:	4630      	mov	r0, r6
 80089e8:	f7fe fec6 	bl	8007778 <_malloc_r>
 80089ec:	b948      	cbnz	r0, 8008a02 <__smakebuf_r+0x46>
 80089ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f2:	059a      	lsls	r2, r3, #22
 80089f4:	d4ee      	bmi.n	80089d4 <__smakebuf_r+0x18>
 80089f6:	f023 0303 	bic.w	r3, r3, #3
 80089fa:	f043 0302 	orr.w	r3, r3, #2
 80089fe:	81a3      	strh	r3, [r4, #12]
 8008a00:	e7e2      	b.n	80089c8 <__smakebuf_r+0xc>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	6020      	str	r0, [r4, #0]
 8008a06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0a:	81a3      	strh	r3, [r4, #12]
 8008a0c:	9b01      	ldr	r3, [sp, #4]
 8008a0e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008a12:	b15b      	cbz	r3, 8008a2c <__smakebuf_r+0x70>
 8008a14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a18:	4630      	mov	r0, r6
 8008a1a:	f000 f81d 	bl	8008a58 <_isatty_r>
 8008a1e:	b128      	cbz	r0, 8008a2c <__smakebuf_r+0x70>
 8008a20:	89a3      	ldrh	r3, [r4, #12]
 8008a22:	f023 0303 	bic.w	r3, r3, #3
 8008a26:	f043 0301 	orr.w	r3, r3, #1
 8008a2a:	81a3      	strh	r3, [r4, #12]
 8008a2c:	89a3      	ldrh	r3, [r4, #12]
 8008a2e:	431d      	orrs	r5, r3
 8008a30:	81a5      	strh	r5, [r4, #12]
 8008a32:	e7cf      	b.n	80089d4 <__smakebuf_r+0x18>

08008a34 <_fstat_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	@ (8008a54 <_fstat_r+0x20>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	f7f9 f821 	bl	8001a88 <_fstat>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d102      	bne.n	8008a50 <_fstat_r+0x1c>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	b103      	cbz	r3, 8008a50 <_fstat_r+0x1c>
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	bf00      	nop
 8008a54:	200004a0 	.word	0x200004a0

08008a58 <_isatty_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	@ (8008a74 <_isatty_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f9 f820 	bl	8001aa8 <_isatty>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_isatty_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_isatty_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	200004a0 	.word	0x200004a0

08008a78 <_init>:
 8008a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7a:	bf00      	nop
 8008a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a7e:	bc08      	pop	{r3}
 8008a80:	469e      	mov	lr, r3
 8008a82:	4770      	bx	lr

08008a84 <_fini>:
 8008a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a86:	bf00      	nop
 8008a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8a:	bc08      	pop	{r3}
 8008a8c:	469e      	mov	lr, r3
 8008a8e:	4770      	bx	lr
