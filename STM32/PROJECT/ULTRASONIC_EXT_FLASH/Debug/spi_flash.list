
spi_flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096b8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000047c  08009848  08009848  0000a848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cc4  08009cc4  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009cc4  08009cc4  0000acc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ccc  08009ccc  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ccc  08009ccc  0000accc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cd0  08009cd0  0000acd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009cd4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000320  200001d4  08009ea8  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004f4  08009ea8  0000b4f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013a54  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002750  00000000  00000000  0001ec58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001258  00000000  00000000  000213a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e51  00000000  00000000  00022600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028caa  00000000  00000000  00023451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152c0  00000000  00000000  0004c0fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc8a0  00000000  00000000  000613bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015dc5b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f7c  00000000  00000000  0015dca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000051  00000000  00000000  00163c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009830 	.word	0x08009830

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	08009830 	.word	0x08009830

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b988 	b.w	8000f70 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	468e      	mov	lr, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	4688      	mov	r8, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4617      	mov	r7, r2
 8000c8c:	d962      	bls.n	8000d54 <__udivmoddi4+0xdc>
 8000c8e:	fab2 f682 	clz	r6, r2
 8000c92:	b14e      	cbz	r6, 8000ca8 <__udivmoddi4+0x30>
 8000c94:	f1c6 0320 	rsb	r3, r6, #32
 8000c98:	fa01 f806 	lsl.w	r8, r1, r6
 8000c9c:	fa20 f303 	lsr.w	r3, r0, r3
 8000ca0:	40b7      	lsls	r7, r6
 8000ca2:	ea43 0808 	orr.w	r8, r3, r8
 8000ca6:	40b4      	lsls	r4, r6
 8000ca8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cac:	fa1f fc87 	uxth.w	ip, r7
 8000cb0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cb4:	0c23      	lsrs	r3, r4, #16
 8000cb6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cbe:	fb01 f20c 	mul.w	r2, r1, ip
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000ccc:	f080 80ea 	bcs.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd0:	429a      	cmp	r2, r3
 8000cd2:	f240 80e7 	bls.w	8000ea4 <__udivmoddi4+0x22c>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	443b      	add	r3, r7
 8000cda:	1a9a      	subs	r2, r3, r2
 8000cdc:	b2a3      	uxth	r3, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cea:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cee:	459c      	cmp	ip, r3
 8000cf0:	d909      	bls.n	8000d06 <__udivmoddi4+0x8e>
 8000cf2:	18fb      	adds	r3, r7, r3
 8000cf4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cf8:	f080 80d6 	bcs.w	8000ea8 <__udivmoddi4+0x230>
 8000cfc:	459c      	cmp	ip, r3
 8000cfe:	f240 80d3 	bls.w	8000ea8 <__udivmoddi4+0x230>
 8000d02:	443b      	add	r3, r7
 8000d04:	3802      	subs	r0, #2
 8000d06:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0a:	eba3 030c 	sub.w	r3, r3, ip
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11d      	cbz	r5, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40f3      	lsrs	r3, r6
 8000d14:	2200      	movs	r2, #0
 8000d16:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d905      	bls.n	8000d2e <__udivmoddi4+0xb6>
 8000d22:	b10d      	cbz	r5, 8000d28 <__udivmoddi4+0xb0>
 8000d24:	e9c5 0100 	strd	r0, r1, [r5]
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4608      	mov	r0, r1
 8000d2c:	e7f5      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d2e:	fab3 f183 	clz	r1, r3
 8000d32:	2900      	cmp	r1, #0
 8000d34:	d146      	bne.n	8000dc4 <__udivmoddi4+0x14c>
 8000d36:	4573      	cmp	r3, lr
 8000d38:	d302      	bcc.n	8000d40 <__udivmoddi4+0xc8>
 8000d3a:	4282      	cmp	r2, r0
 8000d3c:	f200 8105 	bhi.w	8000f4a <__udivmoddi4+0x2d2>
 8000d40:	1a84      	subs	r4, r0, r2
 8000d42:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d46:	2001      	movs	r0, #1
 8000d48:	4690      	mov	r8, r2
 8000d4a:	2d00      	cmp	r5, #0
 8000d4c:	d0e5      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d4e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d52:	e7e2      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	2a00      	cmp	r2, #0
 8000d56:	f000 8090 	beq.w	8000e7a <__udivmoddi4+0x202>
 8000d5a:	fab2 f682 	clz	r6, r2
 8000d5e:	2e00      	cmp	r6, #0
 8000d60:	f040 80a4 	bne.w	8000eac <__udivmoddi4+0x234>
 8000d64:	1a8a      	subs	r2, r1, r2
 8000d66:	0c03      	lsrs	r3, r0, #16
 8000d68:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d6c:	b280      	uxth	r0, r0
 8000d6e:	b2bc      	uxth	r4, r7
 8000d70:	2101      	movs	r1, #1
 8000d72:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d76:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d7e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d82:	429a      	cmp	r2, r3
 8000d84:	d907      	bls.n	8000d96 <__udivmoddi4+0x11e>
 8000d86:	18fb      	adds	r3, r7, r3
 8000d88:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x11c>
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	f200 80e0 	bhi.w	8000f54 <__udivmoddi4+0x2dc>
 8000d94:	46c4      	mov	ip, r8
 8000d96:	1a9b      	subs	r3, r3, r2
 8000d98:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d9c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000da0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000da4:	fb02 f404 	mul.w	r4, r2, r4
 8000da8:	429c      	cmp	r4, r3
 8000daa:	d907      	bls.n	8000dbc <__udivmoddi4+0x144>
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	f102 30ff 	add.w	r0, r2, #4294967295
 8000db2:	d202      	bcs.n	8000dba <__udivmoddi4+0x142>
 8000db4:	429c      	cmp	r4, r3
 8000db6:	f200 80ca 	bhi.w	8000f4e <__udivmoddi4+0x2d6>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	1b1b      	subs	r3, r3, r4
 8000dbe:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dc2:	e7a5      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dc4:	f1c1 0620 	rsb	r6, r1, #32
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	fa22 f706 	lsr.w	r7, r2, r6
 8000dce:	431f      	orrs	r7, r3
 8000dd0:	fa0e f401 	lsl.w	r4, lr, r1
 8000dd4:	fa20 f306 	lsr.w	r3, r0, r6
 8000dd8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000ddc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000de0:	4323      	orrs	r3, r4
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	fa1f fc87 	uxth.w	ip, r7
 8000dea:	fbbe f0f9 	udiv	r0, lr, r9
 8000dee:	0c1c      	lsrs	r4, r3, #16
 8000df0:	fb09 ee10 	mls	lr, r9, r0, lr
 8000df4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000df8:	fb00 fe0c 	mul.w	lr, r0, ip
 8000dfc:	45a6      	cmp	lr, r4
 8000dfe:	fa02 f201 	lsl.w	r2, r2, r1
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x1a0>
 8000e04:	193c      	adds	r4, r7, r4
 8000e06:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e0a:	f080 809c 	bcs.w	8000f46 <__udivmoddi4+0x2ce>
 8000e0e:	45a6      	cmp	lr, r4
 8000e10:	f240 8099 	bls.w	8000f46 <__udivmoddi4+0x2ce>
 8000e14:	3802      	subs	r0, #2
 8000e16:	443c      	add	r4, r7
 8000e18:	eba4 040e 	sub.w	r4, r4, lr
 8000e1c:	fa1f fe83 	uxth.w	lr, r3
 8000e20:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e24:	fb09 4413 	mls	r4, r9, r3, r4
 8000e28:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e2c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e30:	45a4      	cmp	ip, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x1ce>
 8000e34:	193c      	adds	r4, r7, r4
 8000e36:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e3a:	f080 8082 	bcs.w	8000f42 <__udivmoddi4+0x2ca>
 8000e3e:	45a4      	cmp	ip, r4
 8000e40:	d97f      	bls.n	8000f42 <__udivmoddi4+0x2ca>
 8000e42:	3b02      	subs	r3, #2
 8000e44:	443c      	add	r4, r7
 8000e46:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e4a:	eba4 040c 	sub.w	r4, r4, ip
 8000e4e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e52:	4564      	cmp	r4, ip
 8000e54:	4673      	mov	r3, lr
 8000e56:	46e1      	mov	r9, ip
 8000e58:	d362      	bcc.n	8000f20 <__udivmoddi4+0x2a8>
 8000e5a:	d05f      	beq.n	8000f1c <__udivmoddi4+0x2a4>
 8000e5c:	b15d      	cbz	r5, 8000e76 <__udivmoddi4+0x1fe>
 8000e5e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e62:	eb64 0409 	sbc.w	r4, r4, r9
 8000e66:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e6e:	431e      	orrs	r6, r3
 8000e70:	40cc      	lsrs	r4, r1
 8000e72:	e9c5 6400 	strd	r6, r4, [r5]
 8000e76:	2100      	movs	r1, #0
 8000e78:	e74f      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000e7a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e7e:	0c01      	lsrs	r1, r0, #16
 8000e80:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e84:	b280      	uxth	r0, r0
 8000e86:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4638      	mov	r0, r7
 8000e8e:	463c      	mov	r4, r7
 8000e90:	46b8      	mov	r8, r7
 8000e92:	46be      	mov	lr, r7
 8000e94:	2620      	movs	r6, #32
 8000e96:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e9a:	eba2 0208 	sub.w	r2, r2, r8
 8000e9e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ea2:	e766      	b.n	8000d72 <__udivmoddi4+0xfa>
 8000ea4:	4601      	mov	r1, r0
 8000ea6:	e718      	b.n	8000cda <__udivmoddi4+0x62>
 8000ea8:	4610      	mov	r0, r2
 8000eaa:	e72c      	b.n	8000d06 <__udivmoddi4+0x8e>
 8000eac:	f1c6 0220 	rsb	r2, r6, #32
 8000eb0:	fa2e f302 	lsr.w	r3, lr, r2
 8000eb4:	40b7      	lsls	r7, r6
 8000eb6:	40b1      	lsls	r1, r6
 8000eb8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ebc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ec6:	b2bc      	uxth	r4, r7
 8000ec8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000ecc:	0c11      	lsrs	r1, r2, #16
 8000ece:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed2:	fb08 f904 	mul.w	r9, r8, r4
 8000ed6:	40b0      	lsls	r0, r6
 8000ed8:	4589      	cmp	r9, r1
 8000eda:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000ede:	b280      	uxth	r0, r0
 8000ee0:	d93e      	bls.n	8000f60 <__udivmoddi4+0x2e8>
 8000ee2:	1879      	adds	r1, r7, r1
 8000ee4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ee8:	d201      	bcs.n	8000eee <__udivmoddi4+0x276>
 8000eea:	4589      	cmp	r9, r1
 8000eec:	d81f      	bhi.n	8000f2e <__udivmoddi4+0x2b6>
 8000eee:	eba1 0109 	sub.w	r1, r1, r9
 8000ef2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ef6:	fb09 f804 	mul.w	r8, r9, r4
 8000efa:	fb0e 1119 	mls	r1, lr, r9, r1
 8000efe:	b292      	uxth	r2, r2
 8000f00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f04:	4542      	cmp	r2, r8
 8000f06:	d229      	bcs.n	8000f5c <__udivmoddi4+0x2e4>
 8000f08:	18ba      	adds	r2, r7, r2
 8000f0a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f0e:	d2c4      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f10:	4542      	cmp	r2, r8
 8000f12:	d2c2      	bcs.n	8000e9a <__udivmoddi4+0x222>
 8000f14:	f1a9 0102 	sub.w	r1, r9, #2
 8000f18:	443a      	add	r2, r7
 8000f1a:	e7be      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f1c:	45f0      	cmp	r8, lr
 8000f1e:	d29d      	bcs.n	8000e5c <__udivmoddi4+0x1e4>
 8000f20:	ebbe 0302 	subs.w	r3, lr, r2
 8000f24:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f28:	3801      	subs	r0, #1
 8000f2a:	46e1      	mov	r9, ip
 8000f2c:	e796      	b.n	8000e5c <__udivmoddi4+0x1e4>
 8000f2e:	eba7 0909 	sub.w	r9, r7, r9
 8000f32:	4449      	add	r1, r9
 8000f34:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f38:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f3c:	fb09 f804 	mul.w	r8, r9, r4
 8000f40:	e7db      	b.n	8000efa <__udivmoddi4+0x282>
 8000f42:	4673      	mov	r3, lr
 8000f44:	e77f      	b.n	8000e46 <__udivmoddi4+0x1ce>
 8000f46:	4650      	mov	r0, sl
 8000f48:	e766      	b.n	8000e18 <__udivmoddi4+0x1a0>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e6fd      	b.n	8000d4a <__udivmoddi4+0xd2>
 8000f4e:	443b      	add	r3, r7
 8000f50:	3a02      	subs	r2, #2
 8000f52:	e733      	b.n	8000dbc <__udivmoddi4+0x144>
 8000f54:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f58:	443b      	add	r3, r7
 8000f5a:	e71c      	b.n	8000d96 <__udivmoddi4+0x11e>
 8000f5c:	4649      	mov	r1, r9
 8000f5e:	e79c      	b.n	8000e9a <__udivmoddi4+0x222>
 8000f60:	eba1 0109 	sub.w	r1, r1, r9
 8000f64:	46c4      	mov	ip, r8
 8000f66:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f6a:	fb09 f804 	mul.w	r8, r9, r4
 8000f6e:	e7c4      	b.n	8000efa <__udivmoddi4+0x282>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <HCSR04_Trigger>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HCSR04_Trigger(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);  // TRIG high
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2102      	movs	r1, #2
 8000f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f82:	f001 fbad 	bl	80026e0 <HAL_GPIO_WritePin>
 // HAL_Delay(0);  // Wait few cycles
  for (volatile int i = 0; i < 160; i++);  // ~10 µs at 16 MHz
 8000f86:	2300      	movs	r3, #0
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	e002      	b.n	8000f92 <HCSR04_Trigger+0x1e>
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	2b9f      	cmp	r3, #159	@ 0x9f
 8000f96:	ddf9      	ble.n	8000f8c <HCSR04_Trigger+0x18>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);  // TRIG low
 8000f98:	2200      	movs	r2, #0
 8000f9a:	2102      	movs	r1, #2
 8000f9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000fa0:	f001 fb9e 	bl	80026e0 <HAL_GPIO_WritePin>
}
 8000fa4:	bf00      	nop
 8000fa6:	3708      	adds	r7, #8
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}

08000fac <Start_HCSR04>:

void Start_HCSR04(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  is_first_capture = 0;
 8000fb0:	4b05      	ldr	r3, [pc, #20]	@ (8000fc8 <Start_HCSR04+0x1c>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fb6:	2100      	movs	r1, #0
 8000fb8:	4804      	ldr	r0, [pc, #16]	@ (8000fcc <Start_HCSR04+0x20>)
 8000fba:	f004 f925 	bl	8005208 <HAL_TIM_IC_Start_IT>
  HCSR04_Trigger();
 8000fbe:	f7ff ffd9 	bl	8000f74 <HCSR04_Trigger>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	20000358 	.word	0x20000358
 8000fcc:	20000278 	.word	0x20000278

08000fd0 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	7f1b      	ldrb	r3, [r3, #28]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d175      	bne.n	80010cc <HAL_TIM_IC_CaptureCallback+0xfc>
  {
    if (is_first_capture == 0)
 8000fe0:	4b3f      	ldr	r3, [pc, #252]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d11a      	bne.n	800101e <HAL_TIM_IC_CaptureCallback+0x4e>
    {
      ic_val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Rising edge
 8000fe8:	2100      	movs	r1, #0
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f004 fcb8 	bl	8005960 <HAL_TIM_ReadCapturedValue>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a3c      	ldr	r2, [pc, #240]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 8000ff4:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	6a1a      	ldr	r2, [r3, #32]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f022 020a 	bic.w	r2, r2, #10
 8001004:	621a      	str	r2, [r3, #32]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6a1a      	ldr	r2, [r3, #32]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	f042 0202 	orr.w	r2, r2, #2
 8001014:	621a      	str	r2, [r3, #32]
      is_first_capture = 1;
 8001016:	4b32      	ldr	r3, [pc, #200]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001018:	2201      	movs	r2, #1
 800101a:	701a      	strb	r2, [r3, #0]

      distance_cm = (float)diff * 0.0343 / 2.0;

    }
  }
}
 800101c:	e056      	b.n	80010cc <HAL_TIM_IC_CaptureCallback+0xfc>
    else if (is_first_capture == 1)
 800101e:	4b30      	ldr	r3, [pc, #192]	@ (80010e0 <HAL_TIM_IC_CaptureCallback+0x110>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d152      	bne.n	80010cc <HAL_TIM_IC_CaptureCallback+0xfc>
      ic_val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // Falling edge
 8001026:	2100      	movs	r1, #0
 8001028:	6878      	ldr	r0, [r7, #4]
 800102a:	f004 fc99 	bl	8005960 <HAL_TIM_ReadCapturedValue>
 800102e:	4603      	mov	r3, r0
 8001030:	4a2d      	ldr	r2, [pc, #180]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001032:	6013      	str	r3, [r2, #0]
      __HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	6a1a      	ldr	r2, [r3, #32]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f022 020a 	bic.w	r2, r2, #10
 8001042:	621a      	str	r2, [r3, #32]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6a12      	ldr	r2, [r2, #32]
 800104e:	621a      	str	r2, [r3, #32]
      HAL_TIM_IC_Stop_IT(htim, TIM_CHANNEL_1);
 8001050:	2100      	movs	r1, #0
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f004 fa22 	bl	800549c <HAL_TIM_IC_Stop_IT>
      if (ic_val2 > ic_val1)
 8001058:	4b23      	ldr	r3, [pc, #140]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x118>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	429a      	cmp	r2, r3
 8001062:	d907      	bls.n	8001074 <HAL_TIM_IC_CaptureCallback+0xa4>
        diff = ic_val2 - ic_val1;
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	4a1f      	ldr	r2, [pc, #124]	@ (80010ec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	e009      	b.n	8001088 <HAL_TIM_IC_CaptureCallback+0xb8>
        diff = (0xFFFF - ic_val1 + ic_val2);
 8001074:	4b1c      	ldr	r3, [pc, #112]	@ (80010e8 <HAL_TIM_IC_CaptureCallback+0x118>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b1a      	ldr	r3, [pc, #104]	@ (80010e4 <HAL_TIM_IC_CaptureCallback+0x114>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001082:	33ff      	adds	r3, #255	@ 0xff
 8001084:	4a19      	ldr	r2, [pc, #100]	@ (80010ec <HAL_TIM_IC_CaptureCallback+0x11c>)
 8001086:	6013      	str	r3, [r2, #0]
      distance_cm = (float)diff * 0.0343 / 2.0;
 8001088:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <HAL_TIM_IC_CaptureCallback+0x11c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	ee07 3a90 	vmov	s15, r3
 8001090:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001094:	ee17 0a90 	vmov	r0, s15
 8001098:	f7ff fa56 	bl	8000548 <__aeabi_f2d>
 800109c:	a30e      	add	r3, pc, #56	@ (adr r3, 80010d8 <HAL_TIM_IC_CaptureCallback+0x108>)
 800109e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a2:	f7ff faa9 	bl	80005f8 <__aeabi_dmul>
 80010a6:	4602      	mov	r2, r0
 80010a8:	460b      	mov	r3, r1
 80010aa:	4610      	mov	r0, r2
 80010ac:	4619      	mov	r1, r3
 80010ae:	f04f 0200 	mov.w	r2, #0
 80010b2:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80010b6:	f7ff fbc9 	bl	800084c <__aeabi_ddiv>
 80010ba:	4602      	mov	r2, r0
 80010bc:	460b      	mov	r3, r1
 80010be:	4610      	mov	r0, r2
 80010c0:	4619      	mov	r1, r3
 80010c2:	f7ff fd71 	bl	8000ba8 <__aeabi_d2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a09      	ldr	r2, [pc, #36]	@ (80010f0 <HAL_TIM_IC_CaptureCallback+0x120>)
 80010ca:	6013      	str	r3, [r2, #0]
}
 80010cc:	bf00      	nop
 80010ce:	3708      	adds	r7, #8
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	f3af 8000 	nop.w
 80010d8:	04816f00 	.word	0x04816f00
 80010dc:	3fa18fc5 	.word	0x3fa18fc5
 80010e0:	20000358 	.word	0x20000358
 80010e4:	2000034c 	.word	0x2000034c
 80010e8:	20000350 	.word	0x20000350
 80010ec:	20000354 	.word	0x20000354
 80010f0:	2000035c 	.word	0x2000035c

080010f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010f8:	b0c5      	sub	sp, #276	@ 0x114
 80010fa:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010fc:	f000 ff94 	bl	8002028 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001100:	f000 fa38 	bl	8001574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001104:	f000 fba8 	bl	8001858 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001108:	f000 fb76 	bl	80017f8 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800110c:	f000 fae2 	bl	80016d4 <MX_SPI1_Init>
  MX_RTC_Init();
 8001110:	f000 fa84 	bl	800161c <MX_RTC_Init>
  MX_TIM2_Init();
 8001114:	f000 fb1c 	bl	8001750 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  W25QXX_Init(&hspi1);   // initialising w25qxx external flash
 8001118:	48a7      	ldr	r0, [pc, #668]	@ (80013b8 <main+0x2c4>)
 800111a:	f000 fe81 	bl	8001e20 <W25QXX_Init>
  W25QXX_SectorErase(0x000000);
 800111e:	2000      	movs	r0, #0
 8001120:	f000 ff30 	bl	8001f84 <W25QXX_SectorErase>
  uint8_t patt[] = "HELLO-W25Q";
 8001124:	4aa5      	ldr	r2, [pc, #660]	@ (80013bc <main+0x2c8>)
 8001126:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800112a:	ca07      	ldmia	r2, {r0, r1, r2}
 800112c:	c303      	stmia	r3!, {r0, r1}
 800112e:	801a      	strh	r2, [r3, #0]
 8001130:	3302      	adds	r3, #2
 8001132:	0c12      	lsrs	r2, r2, #16
 8001134:	701a      	strb	r2, [r3, #0]
  W25QXX_Write(0, patt, sizeof(patt)-1);
 8001136:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800113a:	220a      	movs	r2, #10
 800113c:	4619      	mov	r1, r3
 800113e:	2000      	movs	r0, #0
 8001140:	f000 febc 	bl	8001ebc <W25QXX_Write>
  uint8_t back[16]={0};
 8001144:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
  W25QXX_Read(0, back, sizeof(patt)-1);
 8001152:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 8001156:	220a      	movs	r2, #10
 8001158:	4619      	mov	r1, r3
 800115a:	2000      	movs	r0, #0
 800115c:	f000 fee2 	bl	8001f24 <W25QXX_Read>
  back[sizeof(patt)-1] = '\0';
 8001160:	2300      	movs	r3, #0
 8001162:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
  HAL_UART_Transmit(&huart2, back, strlen((char*)back), HAL_MAX_DELAY);
 8001166:	f107 03d0 	add.w	r3, r7, #208	@ 0xd0
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f880 	bl	8000270 <strlen>
 8001170:	4603      	mov	r3, r0
 8001172:	b29a      	uxth	r2, r3
 8001174:	f107 01d0 	add.w	r1, r7, #208	@ 0xd0
 8001178:	f04f 33ff 	mov.w	r3, #4294967295
 800117c:	4890      	ldr	r0, [pc, #576]	@ (80013c0 <main+0x2cc>)
 800117e:	f004 ff3f 	bl	8006000 <HAL_UART_Transmit>

  uint32_t current_address=0;  // starting address for external flash
 8001182:	2300      	movs	r3, #0
 8001184:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  /*intialising the RTC with date and time*/
  if ((RTC->ISR & RTC_ISR_INITS) == 0)
 8001188:	4b8e      	ldr	r3, [pc, #568]	@ (80013c4 <main+0x2d0>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b00      	cmp	r3, #0
 8001192:	d127      	bne.n	80011e4 <main+0xf0>
     {
       printf("RTC not yet initialized. Setting time and date...\r\n");
 8001194:	488c      	ldr	r0, [pc, #560]	@ (80013c8 <main+0x2d4>)
 8001196:	f006 f9fd 	bl	8007594 <puts>

       sTime.Hours = 02;
 800119a:	4b8c      	ldr	r3, [pc, #560]	@ (80013cc <main+0x2d8>)
 800119c:	2202      	movs	r2, #2
 800119e:	701a      	strb	r2, [r3, #0]
       sTime.Minutes = 30;
 80011a0:	4b8a      	ldr	r3, [pc, #552]	@ (80013cc <main+0x2d8>)
 80011a2:	221e      	movs	r2, #30
 80011a4:	705a      	strb	r2, [r3, #1]
       sTime.Seconds = 00;
 80011a6:	4b89      	ldr	r3, [pc, #548]	@ (80013cc <main+0x2d8>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	709a      	strb	r2, [r3, #2]
       sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011ac:	4b87      	ldr	r3, [pc, #540]	@ (80013cc <main+0x2d8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	60da      	str	r2, [r3, #12]
       sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011b2:	4b86      	ldr	r3, [pc, #536]	@ (80013cc <main+0x2d8>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
       HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80011b8:	2200      	movs	r2, #0
 80011ba:	4984      	ldr	r1, [pc, #528]	@ (80013cc <main+0x2d8>)
 80011bc:	4884      	ldr	r0, [pc, #528]	@ (80013d0 <main+0x2dc>)
 80011be:	f002 fe4f 	bl	8003e60 <HAL_RTC_SetTime>

       sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80011c2:	4b84      	ldr	r3, [pc, #528]	@ (80013d4 <main+0x2e0>)
 80011c4:	2203      	movs	r2, #3
 80011c6:	701a      	strb	r2, [r3, #0]
       sDate.Month = RTC_MONTH_AUGUST;
 80011c8:	4b82      	ldr	r3, [pc, #520]	@ (80013d4 <main+0x2e0>)
 80011ca:	2208      	movs	r2, #8
 80011cc:	705a      	strb	r2, [r3, #1]
       sDate.Date = 12;
 80011ce:	4b81      	ldr	r3, [pc, #516]	@ (80013d4 <main+0x2e0>)
 80011d0:	220c      	movs	r2, #12
 80011d2:	709a      	strb	r2, [r3, #2]
       sDate.Year = 25;
 80011d4:	4b7f      	ldr	r3, [pc, #508]	@ (80013d4 <main+0x2e0>)
 80011d6:	2219      	movs	r2, #25
 80011d8:	70da      	strb	r2, [r3, #3]
       HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80011da:	2200      	movs	r2, #0
 80011dc:	497d      	ldr	r1, [pc, #500]	@ (80013d4 <main+0x2e0>)
 80011de:	487c      	ldr	r0, [pc, #496]	@ (80013d0 <main+0x2dc>)
 80011e0:	f002 ff37 	bl	8004052 <HAL_RTC_SetDate>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
       while (1)
        {
    /* USER CODE END WHILE */
    	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);   // getting time.
 80011e4:	2200      	movs	r2, #0
 80011e6:	4979      	ldr	r1, [pc, #484]	@ (80013cc <main+0x2d8>)
 80011e8:	4879      	ldr	r0, [pc, #484]	@ (80013d0 <main+0x2dc>)
 80011ea:	f002 fed6 	bl	8003f9a <HAL_RTC_GetTime>
		 // HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);  // getting date

		 snprintf(timestamp, sizeof(timestamp), "%02d:%02d:%02d",sTime.Hours, sTime.Minutes, sTime.Seconds); //storing the time format in one variable
 80011ee:	4b77      	ldr	r3, [pc, #476]	@ (80013cc <main+0x2d8>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	4619      	mov	r1, r3
 80011f4:	4b75      	ldr	r3, [pc, #468]	@ (80013cc <main+0x2d8>)
 80011f6:	785b      	ldrb	r3, [r3, #1]
 80011f8:	461a      	mov	r2, r3
 80011fa:	4b74      	ldr	r3, [pc, #464]	@ (80013cc <main+0x2d8>)
 80011fc:	789b      	ldrb	r3, [r3, #2]
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	9200      	str	r2, [sp, #0]
 8001202:	460b      	mov	r3, r1
 8001204:	4a74      	ldr	r2, [pc, #464]	@ (80013d8 <main+0x2e4>)
 8001206:	2120      	movs	r1, #32
 8001208:	4874      	ldr	r0, [pc, #464]	@ (80013dc <main+0x2e8>)
 800120a:	f006 f9cb 	bl	80075a4 <sniprintf>
		 Start_HCSR04();// getting value of ultrasonic sensor
 800120e:	f7ff fecd 	bl	8000fac <Start_HCSR04>

		 char buffer[50]; //buffer to store UART message format of distance
		 uint8_t rx_data1[70]; // buffer to store data read from flash
		 char tx_data1[70]; // buffer to store data to be written in flash
		 snprintf(buffer, sizeof(buffer), "Distance: %07.2f cm\r\n", distance_cm);// format the distance
 8001212:	4b73      	ldr	r3, [pc, #460]	@ (80013e0 <main+0x2ec>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f996 	bl	8000548 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	f107 000c 	add.w	r0, r7, #12
 8001224:	e9cd 2300 	strd	r2, r3, [sp]
 8001228:	4a6e      	ldr	r2, [pc, #440]	@ (80013e4 <main+0x2f0>)
 800122a:	2132      	movs	r1, #50	@ 0x32
 800122c:	f006 f9ba 	bl	80075a4 <sniprintf>
		 HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 2000);//send distance update over UART
 8001230:	f107 030c 	add.w	r3, r7, #12
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f81b 	bl	8000270 <strlen>
 800123a:	4603      	mov	r3, r0
 800123c:	b29a      	uxth	r2, r3
 800123e:	f107 010c 	add.w	r1, r7, #12
 8001242:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001246:	485e      	ldr	r0, [pc, #376]	@ (80013c0 <main+0x2cc>)
 8001248:	f004 feda 	bl	8006000 <HAL_UART_Transmit>
		 HAL_Delay(2000); // delay to slow down sampling
 800124c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001250:	f000 ff66 	bl	8002120 <HAL_Delay>

		 if (distance_cm < THRESHOLD_CM) // determine if object is present within 30 cm
 8001254:	4b62      	ldr	r3, [pc, #392]	@ (80013e0 <main+0x2ec>)
 8001256:	edd3 7a00 	vldr	s15, [r3]
 800125a:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 800125e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001266:	d503      	bpl.n	8001270 <main+0x17c>
			 object_present = 1;  //object detected
 8001268:	4b5f      	ldr	r3, [pc, #380]	@ (80013e8 <main+0x2f4>)
 800126a:	2201      	movs	r2, #1
 800126c:	701a      	strb	r2, [r3, #0]
 800126e:	e002      	b.n	8001276 <main+0x182>
		 else
			  object_present = 0; //no object detection
 8001270:	4b5d      	ldr	r3, [pc, #372]	@ (80013e8 <main+0x2f4>)
 8001272:	2200      	movs	r2, #0
 8001274:	701a      	strb	r2, [r3, #0]

				 if (object_present && !object_previous) //object entry
 8001276:	4b5c      	ldr	r3, [pc, #368]	@ (80013e8 <main+0x2f4>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80be 	beq.w	80013fc <main+0x308>
 8001280:	4b5a      	ldr	r3, [pc, #360]	@ (80013ec <main+0x2f8>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	f040 80b9 	bne.w	80013fc <main+0x308>
				 {
 800128a:	466b      	mov	r3, sp
 800128c:	461e      	mov	r6, r3
					 //formating data to be stored into flash
					 snprintf(tx_data1, sizeof(tx_data1), "IN  [%s]: %07.2f cm\r\n", timestamp, distance_cm);
 800128e:	4b54      	ldr	r3, [pc, #336]	@ (80013e0 <main+0x2ec>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f958 	bl	8000548 <__aeabi_f2d>
 8001298:	4602      	mov	r2, r0
 800129a:	460b      	mov	r3, r1
 800129c:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 80012a0:	e9cd 2300 	strd	r2, r3, [sp]
 80012a4:	4b4d      	ldr	r3, [pc, #308]	@ (80013dc <main+0x2e8>)
 80012a6:	4a52      	ldr	r2, [pc, #328]	@ (80013f0 <main+0x2fc>)
 80012a8:	2146      	movs	r1, #70	@ 0x46
 80012aa:	f006 f97b 	bl	80075a4 <sniprintf>
					 //data written into flash with timestamp and distance
					 int l=strlen(tx_data1);
 80012ae:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7fe ffdc 	bl	8000270 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
					 W25QXX_Write(current_address,(uint8_t*)tx_data1,l); //wriitng data to flash
 80012be:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80012c8:	4619      	mov	r1, r3
 80012ca:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 80012ce:	f000 fdf5 	bl	8001ebc <W25QXX_Write>
					 HAL_Delay(100); //small delay
 80012d2:	2064      	movs	r0, #100	@ 0x64
 80012d4:	f000 ff24 	bl	8002120 <HAL_Delay>
					 HAL_UART_Transmit(&huart2, (uint8_t*)tx_data1, strlen(tx_data1), HAL_MAX_DELAY);
 80012d8:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80012dc:	4618      	mov	r0, r3
 80012de:	f7fe ffc7 	bl	8000270 <strlen>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b29a      	uxth	r2, r3
 80012e6:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	4834      	ldr	r0, [pc, #208]	@ (80013c0 <main+0x2cc>)
 80012f0:	f004 fe86 	bl	8006000 <HAL_UART_Transmit>
					 W25QXX_Read(current_address, rx_data1,l); //reading data stored in flash
 80012f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 80012f8:	b29a      	uxth	r2, r3
 80012fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80012fe:	4619      	mov	r1, r3
 8001300:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001304:	f000 fe0e 	bl	8001f24 <W25QXX_Read>
					 rx_data1[l]='\0';
 8001308:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800130c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8001310:	4413      	add	r3, r2
 8001312:	2200      	movs	r2, #0
 8001314:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart2, (uint8_t*)"W25Qxx write success..\r\n",25, HAL_MAX_DELAY); //print a success message
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	2219      	movs	r2, #25
 800131c:	4935      	ldr	r1, [pc, #212]	@ (80013f4 <main+0x300>)
 800131e:	4828      	ldr	r0, [pc, #160]	@ (80013c0 <main+0x2cc>)
 8001320:	f004 fe6e 	bl	8006000 <HAL_UART_Transmit>
					 char msg1[l];
 8001324:	f8d7 1100 	ldr.w	r1, [r7, #256]	@ 0x100
 8001328:	1e4b      	subs	r3, r1, #1
 800132a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800132e:	460a      	mov	r2, r1
 8001330:	2300      	movs	r3, #0
 8001332:	4614      	mov	r4, r2
 8001334:	461d      	mov	r5, r3
 8001336:	f04f 0200 	mov.w	r2, #0
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	00eb      	lsls	r3, r5, #3
 8001340:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001344:	00e2      	lsls	r2, r4, #3
 8001346:	460a      	mov	r2, r1
 8001348:	2300      	movs	r3, #0
 800134a:	4690      	mov	r8, r2
 800134c:	4699      	mov	r9, r3
 800134e:	f04f 0200 	mov.w	r2, #0
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800135a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800135e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001362:	460b      	mov	r3, r1
 8001364:	3307      	adds	r3, #7
 8001366:	08db      	lsrs	r3, r3, #3
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	ebad 0d03 	sub.w	sp, sp, r3
 800136e:	ab02      	add	r3, sp, #8
 8001370:	3300      	adds	r3, #0
 8001372:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
					 snprintf(msg1, sizeof(msg1), "Read %s\r\n", rx_data1);// formatting read data from flash
 8001376:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800137a:	4a1f      	ldr	r2, [pc, #124]	@ (80013f8 <main+0x304>)
 800137c:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8001380:	f006 f910 	bl	80075a4 <sniprintf>
					 HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY); //transmitiing read data via uart
 8001384:	f8d7 00f8 	ldr.w	r0, [r7, #248]	@ 0xf8
 8001388:	f7fe ff72 	bl	8000270 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	f04f 33ff 	mov.w	r3, #4294967295
 8001394:	f8d7 10f8 	ldr.w	r1, [r7, #248]	@ 0xf8
 8001398:	4809      	ldr	r0, [pc, #36]	@ (80013c0 <main+0x2cc>)
 800139a:	f004 fe31 	bl	8006000 <HAL_UART_Transmit>
					 current_address += strlen(tx_data1);  // Move to next available address
 800139e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7fe ff64 	bl	8000270 <strlen>
 80013a8:	4602      	mov	r2, r0
 80013aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80013ae:	4413      	add	r3, r2
 80013b0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80013b4:	46b5      	mov	sp, r6
				 {
 80013b6:	e0c4      	b.n	8001542 <main+0x44e>
 80013b8:	20000214 	.word	0x20000214
 80013bc:	080098fc 	.word	0x080098fc
 80013c0:	200002c4 	.word	0x200002c4
 80013c4:	40002800 	.word	0x40002800
 80013c8:	08009848 	.word	0x08009848
 80013cc:	20000364 	.word	0x20000364
 80013d0:	200001f0 	.word	0x200001f0
 80013d4:	20000378 	.word	0x20000378
 80013d8:	0800987c 	.word	0x0800987c
 80013dc:	2000037c 	.word	0x2000037c
 80013e0:	2000035c 	.word	0x2000035c
 80013e4:	0800988c 	.word	0x0800988c
 80013e8:	20000360 	.word	0x20000360
 80013ec:	20000361 	.word	0x20000361
 80013f0:	080098a4 	.word	0x080098a4
 80013f4:	080098bc 	.word	0x080098bc
 80013f8:	080098d8 	.word	0x080098d8

				 }
				 else if (!object_present && object_previous)
 80013fc:	4b55      	ldr	r3, [pc, #340]	@ (8001554 <main+0x460>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	f040 809e 	bne.w	8001542 <main+0x44e>
 8001406:	4b54      	ldr	r3, [pc, #336]	@ (8001558 <main+0x464>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b00      	cmp	r3, #0
 800140c:	f000 8099 	beq.w	8001542 <main+0x44e>
				 {
 8001410:	466b      	mov	r3, sp
 8001412:	461e      	mov	r6, r3
					 //formating data to be stored into flash
					 snprintf(tx_data1, sizeof(tx_data1), "OUT [%s]: %07.2f cm\r\n", timestamp, distance_cm);
 8001414:	4b51      	ldr	r3, [pc, #324]	@ (800155c <main+0x468>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff f895 	bl	8000548 <__aeabi_f2d>
 800141e:	4602      	mov	r2, r0
 8001420:	460b      	mov	r3, r1
 8001422:	f107 0088 	add.w	r0, r7, #136	@ 0x88
 8001426:	e9cd 2300 	strd	r2, r3, [sp]
 800142a:	4b4d      	ldr	r3, [pc, #308]	@ (8001560 <main+0x46c>)
 800142c:	4a4d      	ldr	r2, [pc, #308]	@ (8001564 <main+0x470>)
 800142e:	2146      	movs	r1, #70	@ 0x46
 8001430:	f006 f8b8 	bl	80075a4 <sniprintf>
					 //data written into flash with timestamp and distance
					 int l=strlen(tx_data1);
 8001434:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001438:	4618      	mov	r0, r3
 800143a:	f7fe ff19 	bl	8000270 <strlen>
 800143e:	4603      	mov	r3, r0
 8001440:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
					 W25QXX_Write(current_address,(uint8_t*)tx_data1,l); //writing data into flash
 8001444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001448:	b29a      	uxth	r2, r3
 800144a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800144e:	4619      	mov	r1, r3
 8001450:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 8001454:	f000 fd32 	bl	8001ebc <W25QXX_Write>
					 HAL_Delay(100); //small delay
 8001458:	2064      	movs	r0, #100	@ 0x64
 800145a:	f000 fe61 	bl	8002120 <HAL_Delay>
					 HAL_UART_Transmit(&huart2, (uint8_t*)tx_data1, strlen(tx_data1), HAL_MAX_DELAY);
 800145e:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001462:	4618      	mov	r0, r3
 8001464:	f7fe ff04 	bl	8000270 <strlen>
 8001468:	4603      	mov	r3, r0
 800146a:	b29a      	uxth	r2, r3
 800146c:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
 8001474:	483c      	ldr	r0, [pc, #240]	@ (8001568 <main+0x474>)
 8001476:	f004 fdc3 	bl	8006000 <HAL_UART_Transmit>
					 W25QXX_Read(current_address, rx_data1, l); //reading data stored in flash
 800147a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800147e:	b29a      	uxth	r2, r3
 8001480:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001484:	4619      	mov	r1, r3
 8001486:	f8d7 0104 	ldr.w	r0, [r7, #260]	@ 0x104
 800148a:	f000 fd4b 	bl	8001f24 <W25QXX_Read>
					 rx_data1[l]='\0';
 800148e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8001492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8001496:	4413      	add	r3, r2
 8001498:	2200      	movs	r2, #0
 800149a:	701a      	strb	r2, [r3, #0]
					 HAL_UART_Transmit(&huart2, (uint8_t*)"W25Qxx write success..\r\n",25, HAL_MAX_DELAY);
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
 80014a0:	2219      	movs	r2, #25
 80014a2:	4932      	ldr	r1, [pc, #200]	@ (800156c <main+0x478>)
 80014a4:	4830      	ldr	r0, [pc, #192]	@ (8001568 <main+0x474>)
 80014a6:	f004 fdab 	bl	8006000 <HAL_UART_Transmit>
					 char msg1[l];
 80014aa:	f8d7 10f4 	ldr.w	r1, [r7, #244]	@ 0xf4
 80014ae:	1e4b      	subs	r3, r1, #1
 80014b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80014b4:	460a      	mov	r2, r1
 80014b6:	2300      	movs	r3, #0
 80014b8:	4692      	mov	sl, r2
 80014ba:	469b      	mov	fp, r3
 80014bc:	f04f 0200 	mov.w	r2, #0
 80014c0:	f04f 0300 	mov.w	r3, #0
 80014c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80014c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80014cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80014d0:	460a      	mov	r2, r1
 80014d2:	2300      	movs	r3, #0
 80014d4:	603a      	str	r2, [r7, #0]
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	00c3      	lsls	r3, r0, #3
 80014e4:	6838      	ldr	r0, [r7, #0]
 80014e6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80014ea:	6838      	ldr	r0, [r7, #0]
 80014ec:	00c2      	lsls	r2, r0, #3
 80014ee:	460b      	mov	r3, r1
 80014f0:	3307      	adds	r3, #7
 80014f2:	08db      	lsrs	r3, r3, #3
 80014f4:	00db      	lsls	r3, r3, #3
 80014f6:	ebad 0d03 	sub.w	sp, sp, r3
 80014fa:	ab02      	add	r3, sp, #8
 80014fc:	3300      	adds	r3, #0
 80014fe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
					 snprintf(msg1, sizeof(msg1), "Read %s\r\n", rx_data1);  //formatting data read form flash
 8001502:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001506:	4a1a      	ldr	r2, [pc, #104]	@ (8001570 <main+0x47c>)
 8001508:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 800150c:	f006 f84a 	bl	80075a4 <sniprintf>
					 HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);//transmitting data via uart
 8001510:	f8d7 00ec 	ldr.w	r0, [r7, #236]	@ 0xec
 8001514:	f7fe feac 	bl	8000270 <strlen>
 8001518:	4603      	mov	r3, r0
 800151a:	b29a      	uxth	r2, r3
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	f8d7 10ec 	ldr.w	r1, [r7, #236]	@ 0xec
 8001524:	4810      	ldr	r0, [pc, #64]	@ (8001568 <main+0x474>)
 8001526:	f004 fd6b 	bl	8006000 <HAL_UART_Transmit>
					 current_address += strlen(tx_data1);  // Move to next available address
 800152a:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe fe9e 	bl	8000270 <strlen>
 8001534:	4602      	mov	r2, r0
 8001536:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800153a:	4413      	add	r3, r2
 800153c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001540:	46b5      	mov	sp, r6
				 }
				 object_previous = object_present;
 8001542:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <main+0x460>)
 8001544:	781a      	ldrb	r2, [r3, #0]
 8001546:	4b04      	ldr	r3, [pc, #16]	@ (8001558 <main+0x464>)
 8001548:	701a      	strb	r2, [r3, #0]
    	   		HAL_Delay(100);  // Sampling interval
 800154a:	2064      	movs	r0, #100	@ 0x64
 800154c:	f000 fde8 	bl	8002120 <HAL_Delay>
        {
 8001550:	e648      	b.n	80011e4 <main+0xf0>
 8001552:	bf00      	nop
 8001554:	20000360 	.word	0x20000360
 8001558:	20000361 	.word	0x20000361
 800155c:	2000035c 	.word	0x2000035c
 8001560:	2000037c 	.word	0x2000037c
 8001564:	080098e4 	.word	0x080098e4
 8001568:	200002c4 	.word	0x200002c4
 800156c:	080098bc 	.word	0x080098bc
 8001570:	080098d8 	.word	0x080098d8

08001574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b096      	sub	sp, #88	@ 0x58
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	2244      	movs	r2, #68	@ 0x44
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f006 f91c 	bl	80077c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	463b      	mov	r3, r7
 800158a:	2200      	movs	r2, #0
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	605a      	str	r2, [r3, #4]
 8001590:	609a      	str	r2, [r3, #8]
 8001592:	60da      	str	r2, [r3, #12]
 8001594:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001596:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800159a:	f001 f8c7 	bl	800272c <HAL_PWREx_ControlVoltageScaling>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015a4:	f000 f9d4 	bl	8001950 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80015a8:	230a      	movs	r3, #10
 80015aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80015b0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015b2:	2310      	movs	r3, #16
 80015b4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015b6:	2301      	movs	r3, #1
 80015b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ba:	2302      	movs	r3, #2
 80015bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015be:	2302      	movs	r3, #2
 80015c0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015c2:	2301      	movs	r3, #1
 80015c4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015c6:	230a      	movs	r3, #10
 80015c8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ca:	2307      	movs	r3, #7
 80015cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ce:	2302      	movs	r3, #2
 80015d0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	4618      	mov	r0, r3
 80015dc:	f001 f8fc 	bl	80027d8 <HAL_RCC_OscConfig>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <SystemClock_Config+0x76>
  {
    Error_Handler();
 80015e6:	f000 f9b3 	bl	8001950 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ea:	230f      	movs	r3, #15
 80015ec:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ee:	2303      	movs	r3, #3
 80015f0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015fe:	463b      	mov	r3, r7
 8001600:	2104      	movs	r1, #4
 8001602:	4618      	mov	r0, r3
 8001604:	f001 fcc4 	bl	8002f90 <HAL_RCC_ClockConfig>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800160e:	f000 f99f 	bl	8001950 <Error_Handler>
  }
}
 8001612:	bf00      	nop
 8001614:	3758      	adds	r7, #88	@ 0x58
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
	...

0800161c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001630:	2300      	movs	r3, #0
 8001632:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001634:	4b25      	ldr	r3, [pc, #148]	@ (80016cc <MX_RTC_Init+0xb0>)
 8001636:	4a26      	ldr	r2, [pc, #152]	@ (80016d0 <MX_RTC_Init+0xb4>)
 8001638:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800163a:	4b24      	ldr	r3, [pc, #144]	@ (80016cc <MX_RTC_Init+0xb0>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001640:	4b22      	ldr	r3, [pc, #136]	@ (80016cc <MX_RTC_Init+0xb0>)
 8001642:	227f      	movs	r2, #127	@ 0x7f
 8001644:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001646:	4b21      	ldr	r3, [pc, #132]	@ (80016cc <MX_RTC_Init+0xb0>)
 8001648:	22ff      	movs	r2, #255	@ 0xff
 800164a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800164c:	4b1f      	ldr	r3, [pc, #124]	@ (80016cc <MX_RTC_Init+0xb0>)
 800164e:	2200      	movs	r2, #0
 8001650:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8001652:	4b1e      	ldr	r3, [pc, #120]	@ (80016cc <MX_RTC_Init+0xb0>)
 8001654:	2200      	movs	r2, #0
 8001656:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001658:	4b1c      	ldr	r3, [pc, #112]	@ (80016cc <MX_RTC_Init+0xb0>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800165e:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <MX_RTC_Init+0xb0>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001664:	4819      	ldr	r0, [pc, #100]	@ (80016cc <MX_RTC_Init+0xb0>)
 8001666:	f002 fb73 	bl	8003d50 <HAL_RTC_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8001670:	f000 f96e 	bl	8001950 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001674:	2300      	movs	r3, #0
 8001676:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001678:	2300      	movs	r3, #0
 800167a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800167c:	2300      	movs	r3, #0
 800167e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001680:	2300      	movs	r3, #0
 8001682:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001684:	2300      	movs	r3, #0
 8001686:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001688:	1d3b      	adds	r3, r7, #4
 800168a:	2201      	movs	r2, #1
 800168c:	4619      	mov	r1, r3
 800168e:	480f      	ldr	r0, [pc, #60]	@ (80016cc <MX_RTC_Init+0xb0>)
 8001690:	f002 fbe6 	bl	8003e60 <HAL_RTC_SetTime>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_RTC_Init+0x82>
  {
    Error_Handler();
 800169a:	f000 f959 	bl	8001950 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800169e:	2301      	movs	r3, #1
 80016a0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80016a2:	2301      	movs	r3, #1
 80016a4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80016a6:	2301      	movs	r3, #1
 80016a8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80016ae:	463b      	mov	r3, r7
 80016b0:	2201      	movs	r2, #1
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_RTC_Init+0xb0>)
 80016b6:	f002 fccc 	bl	8004052 <HAL_RTC_SetDate>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80016c0:	f000 f946 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	200001f0 	.word	0x200001f0
 80016d0:	40002800 	.word	0x40002800

080016d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016d8:	4b1b      	ldr	r3, [pc, #108]	@ (8001748 <MX_SPI1_Init+0x74>)
 80016da:	4a1c      	ldr	r2, [pc, #112]	@ (800174c <MX_SPI1_Init+0x78>)
 80016dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016de:	4b1a      	ldr	r3, [pc, #104]	@ (8001748 <MX_SPI1_Init+0x74>)
 80016e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016e6:	4b18      	ldr	r3, [pc, #96]	@ (8001748 <MX_SPI1_Init+0x74>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016ec:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <MX_SPI1_Init+0x74>)
 80016ee:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80016f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016f4:	4b14      	ldr	r3, [pc, #80]	@ (8001748 <MX_SPI1_Init+0x74>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016fa:	4b13      	ldr	r3, [pc, #76]	@ (8001748 <MX_SPI1_Init+0x74>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001700:	4b11      	ldr	r3, [pc, #68]	@ (8001748 <MX_SPI1_Init+0x74>)
 8001702:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001706:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001708:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <MX_SPI1_Init+0x74>)
 800170a:	2210      	movs	r2, #16
 800170c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800170e:	4b0e      	ldr	r3, [pc, #56]	@ (8001748 <MX_SPI1_Init+0x74>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001714:	4b0c      	ldr	r3, [pc, #48]	@ (8001748 <MX_SPI1_Init+0x74>)
 8001716:	2200      	movs	r2, #0
 8001718:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	@ (8001748 <MX_SPI1_Init+0x74>)
 800171c:	2200      	movs	r2, #0
 800171e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <MX_SPI1_Init+0x74>)
 8001722:	2207      	movs	r2, #7
 8001724:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001726:	4b08      	ldr	r3, [pc, #32]	@ (8001748 <MX_SPI1_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800172c:	4b06      	ldr	r3, [pc, #24]	@ (8001748 <MX_SPI1_Init+0x74>)
 800172e:	2208      	movs	r2, #8
 8001730:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	@ (8001748 <MX_SPI1_Init+0x74>)
 8001734:	f002 fde4 	bl	8004300 <HAL_SPI_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800173e:	f000 f907 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20000214 	.word	0x20000214
 800174c:	40013000 	.word	0x40013000

08001750 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001762:	1d3b      	adds	r3, r7, #4
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800176e:	4b21      	ldr	r3, [pc, #132]	@ (80017f4 <MX_TIM2_Init+0xa4>)
 8001770:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001774:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 79;
 8001776:	4b1f      	ldr	r3, [pc, #124]	@ (80017f4 <MX_TIM2_Init+0xa4>)
 8001778:	224f      	movs	r2, #79	@ 0x4f
 800177a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177c:	4b1d      	ldr	r3, [pc, #116]	@ (80017f4 <MX_TIM2_Init+0xa4>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001782:	4b1c      	ldr	r3, [pc, #112]	@ (80017f4 <MX_TIM2_Init+0xa4>)
 8001784:	f04f 32ff 	mov.w	r2, #4294967295
 8001788:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800178a:	4b1a      	ldr	r3, [pc, #104]	@ (80017f4 <MX_TIM2_Init+0xa4>)
 800178c:	2200      	movs	r2, #0
 800178e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001790:	4b18      	ldr	r3, [pc, #96]	@ (80017f4 <MX_TIM2_Init+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001796:	4817      	ldr	r0, [pc, #92]	@ (80017f4 <MX_TIM2_Init+0xa4>)
 8001798:	f003 fcde 	bl	8005158 <HAL_TIM_IC_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80017a2:	f000 f8d5 	bl	8001950 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017ae:	f107 0314 	add.w	r3, r7, #20
 80017b2:	4619      	mov	r1, r3
 80017b4:	480f      	ldr	r0, [pc, #60]	@ (80017f4 <MX_TIM2_Init+0xa4>)
 80017b6:	f004 fb2f 	bl	8005e18 <HAL_TIMEx_MasterConfigSynchronization>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 80017c0:	f000 f8c6 	bl	8001950 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80017c4:	2300      	movs	r3, #0
 80017c6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80017c8:	2301      	movs	r3, #1
 80017ca:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80017cc:	2300      	movs	r3, #0
 80017ce:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80017d0:	2300      	movs	r3, #0
 80017d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80017d4:	1d3b      	adds	r3, r7, #4
 80017d6:	2200      	movs	r2, #0
 80017d8:	4619      	mov	r1, r3
 80017da:	4806      	ldr	r0, [pc, #24]	@ (80017f4 <MX_TIM2_Init+0xa4>)
 80017dc:	f004 f823 	bl	8005826 <HAL_TIM_IC_ConfigChannel>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80017e6:	f000 f8b3 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000278 	.word	0x20000278

080017f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80017fc:	4b14      	ldr	r3, [pc, #80]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 80017fe:	4a15      	ldr	r2, [pc, #84]	@ (8001854 <MX_USART2_UART_Init+0x5c>)
 8001800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001802:	4b13      	ldr	r3, [pc, #76]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 8001804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800180a:	4b11      	ldr	r3, [pc, #68]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001810:	4b0f      	ldr	r3, [pc, #60]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001816:	4b0e      	ldr	r3, [pc, #56]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800181c:	4b0c      	ldr	r3, [pc, #48]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 800181e:	220c      	movs	r2, #12
 8001820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001822:	4b0b      	ldr	r3, [pc, #44]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001828:	4b09      	ldr	r3, [pc, #36]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182e:	4b08      	ldr	r3, [pc, #32]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001834:	4b06      	ldr	r3, [pc, #24]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 8001836:	2200      	movs	r2, #0
 8001838:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800183a:	4805      	ldr	r0, [pc, #20]	@ (8001850 <MX_USART2_UART_Init+0x58>)
 800183c:	f004 fb92 	bl	8005f64 <HAL_UART_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001846:	f000 f883 	bl	8001950 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200002c4 	.word	0x200002c4
 8001854:	40004400 	.word	0x40004400

08001858 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b08a      	sub	sp, #40	@ 0x28
 800185c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	605a      	str	r2, [r3, #4]
 8001868:	609a      	str	r2, [r3, #8]
 800186a:	60da      	str	r2, [r3, #12]
 800186c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b36      	ldr	r3, [pc, #216]	@ (8001948 <MX_GPIO_Init+0xf0>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001872:	4a35      	ldr	r2, [pc, #212]	@ (8001948 <MX_GPIO_Init+0xf0>)
 8001874:	f043 0304 	orr.w	r3, r3, #4
 8001878:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800187a:	4b33      	ldr	r3, [pc, #204]	@ (8001948 <MX_GPIO_Init+0xf0>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	613b      	str	r3, [r7, #16]
 8001884:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001886:	4b30      	ldr	r3, [pc, #192]	@ (8001948 <MX_GPIO_Init+0xf0>)
 8001888:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800188a:	4a2f      	ldr	r2, [pc, #188]	@ (8001948 <MX_GPIO_Init+0xf0>)
 800188c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001890:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001892:	4b2d      	ldr	r3, [pc, #180]	@ (8001948 <MX_GPIO_Init+0xf0>)
 8001894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800189e:	4b2a      	ldr	r3, [pc, #168]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018a2:	4a29      	ldr	r2, [pc, #164]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018a4:	f043 0301 	orr.w	r3, r3, #1
 80018a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018aa:	4b27      	ldr	r3, [pc, #156]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
 80018b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	4b24      	ldr	r3, [pc, #144]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018ba:	4a23      	ldr	r2, [pc, #140]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018bc:	f043 0302 	orr.w	r3, r3, #2
 80018c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018c2:	4b21      	ldr	r3, [pc, #132]	@ (8001948 <MX_GPIO_Init+0xf0>)
 80018c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	607b      	str	r3, [r7, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80018ce:	2200      	movs	r2, #0
 80018d0:	2102      	movs	r1, #2
 80018d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018d6:	f000 ff03 	bl	80026e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80018da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80018e0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80018e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e6:	2300      	movs	r3, #0
 80018e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80018ea:	f107 0314 	add.w	r3, r7, #20
 80018ee:	4619      	mov	r1, r3
 80018f0:	4816      	ldr	r0, [pc, #88]	@ (800194c <MX_GPIO_Init+0xf4>)
 80018f2:	f000 fd4b 	bl	800238c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80018f6:	2302      	movs	r3, #2
 80018f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018fa:	2301      	movs	r3, #1
 80018fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001902:	2300      	movs	r3, #0
 8001904:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001906:	f107 0314 	add.w	r3, r7, #20
 800190a:	4619      	mov	r1, r3
 800190c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001910:	f000 fd3c 	bl	800238c <HAL_GPIO_Init>
  // PA4 as manual CS for W25Qxx

  GPIO_InitStruct.Pin   = GPIO_PIN_4;
 8001914:	2310      	movs	r3, #16
 8001916:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001918:	2301      	movs	r3, #1
 800191a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001920:	2303      	movs	r3, #3
 8001922:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192e:	f000 fd2d 	bl	800238c <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); // CS high (inactive)
 8001932:	2201      	movs	r2, #1
 8001934:	2110      	movs	r1, #16
 8001936:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800193a:	f000 fed1 	bl	80026e0 <HAL_GPIO_WritePin>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800193e:	bf00      	nop
 8001940:	3728      	adds	r7, #40	@ 0x28
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000
 800194c:	48000800 	.word	0x48000800

08001950 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001954:	b672      	cpsid	i
}
 8001956:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001958:	bf00      	nop
 800195a:	e7fd      	b.n	8001958 <Error_Handler+0x8>

0800195c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_MspInit+0x44>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001966:	4a0e      	ldr	r2, [pc, #56]	@ (80019a0 <HAL_MspInit+0x44>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	6613      	str	r3, [r2, #96]	@ 0x60
 800196e:	4b0c      	ldr	r3, [pc, #48]	@ (80019a0 <HAL_MspInit+0x44>)
 8001970:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001972:	f003 0301 	and.w	r3, r3, #1
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800197a:	4b09      	ldr	r3, [pc, #36]	@ (80019a0 <HAL_MspInit+0x44>)
 800197c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800197e:	4a08      	ldr	r2, [pc, #32]	@ (80019a0 <HAL_MspInit+0x44>)
 8001980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001984:	6593      	str	r3, [r2, #88]	@ 0x58
 8001986:	4b06      	ldr	r3, [pc, #24]	@ (80019a0 <HAL_MspInit+0x44>)
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800198e:	603b      	str	r3, [r7, #0]
 8001990:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	40021000 	.word	0x40021000

080019a4 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b0a4      	sub	sp, #144	@ 0x90
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019ac:	f107 0308 	add.w	r3, r7, #8
 80019b0:	2288      	movs	r2, #136	@ 0x88
 80019b2:	2100      	movs	r1, #0
 80019b4:	4618      	mov	r0, r3
 80019b6:	f005 ff03 	bl	80077c0 <memset>
  if(hrtc->Instance==RTC)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	4a10      	ldr	r2, [pc, #64]	@ (8001a00 <HAL_RTC_MspInit+0x5c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d118      	bne.n	80019f6 <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80019c4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019c8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80019ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ce:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	4618      	mov	r0, r3
 80019d8:	f001 fcfe 	bl	80033d8 <HAL_RCCEx_PeriphCLKConfig>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d001      	beq.n	80019e6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80019e2:	f7ff ffb5 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80019e6:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <HAL_RTC_MspInit+0x60>)
 80019e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80019ec:	4a05      	ldr	r2, [pc, #20]	@ (8001a04 <HAL_RTC_MspInit+0x60>)
 80019ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80019f6:	bf00      	nop
 80019f8:	3790      	adds	r7, #144	@ 0x90
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40002800 	.word	0x40002800
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08a      	sub	sp, #40	@ 0x28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a17      	ldr	r2, [pc, #92]	@ (8001a84 <HAL_SPI_MspInit+0x7c>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d128      	bne.n	8001a7c <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a2a:	4b17      	ldr	r3, [pc, #92]	@ (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a2e:	4a16      	ldr	r2, [pc, #88]	@ (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001a34:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a36:	4b14      	ldr	r3, [pc, #80]	@ (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a3a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a3e:	613b      	str	r3, [r7, #16]
 8001a40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	4b11      	ldr	r3, [pc, #68]	@ (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	4a10      	ldr	r2, [pc, #64]	@ (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a4e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a88 <HAL_SPI_MspInit+0x80>)
 8001a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a5a:	23f0      	movs	r3, #240	@ 0xf0
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6e:	f107 0314 	add.w	r3, r7, #20
 8001a72:	4619      	mov	r1, r3
 8001a74:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a78:	f000 fc88 	bl	800238c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	@ 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40013000 	.word	0x40013000
 8001a88:	40021000 	.word	0x40021000

08001a8c <HAL_TIM_IC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_ic: TIM_IC handle pointer
  * @retval None
  */
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b08a      	sub	sp, #40	@ 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	2200      	movs	r2, #0
 8001a9a:	601a      	str	r2, [r3, #0]
 8001a9c:	605a      	str	r2, [r3, #4]
 8001a9e:	609a      	str	r2, [r3, #8]
 8001aa0:	60da      	str	r2, [r3, #12]
 8001aa2:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aac:	d130      	bne.n	8001b10 <HAL_TIM_IC_MspInit+0x84>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aae:	4b1a      	ldr	r3, [pc, #104]	@ (8001b18 <HAL_TIM_IC_MspInit+0x8c>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab2:	4a19      	ldr	r2, [pc, #100]	@ (8001b18 <HAL_TIM_IC_MspInit+0x8c>)
 8001ab4:	f043 0301 	orr.w	r3, r3, #1
 8001ab8:	6593      	str	r3, [r2, #88]	@ 0x58
 8001aba:	4b17      	ldr	r3, [pc, #92]	@ (8001b18 <HAL_TIM_IC_MspInit+0x8c>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001abe:	f003 0301 	and.w	r3, r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
 8001ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac6:	4b14      	ldr	r3, [pc, #80]	@ (8001b18 <HAL_TIM_IC_MspInit+0x8c>)
 8001ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001aca:	4a13      	ldr	r2, [pc, #76]	@ (8001b18 <HAL_TIM_IC_MspInit+0x8c>)
 8001acc:	f043 0301 	orr.w	r3, r3, #1
 8001ad0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ad2:	4b11      	ldr	r3, [pc, #68]	@ (8001b18 <HAL_TIM_IC_MspInit+0x8c>)
 8001ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	60fb      	str	r3, [r7, #12]
 8001adc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001aee:	2301      	movs	r3, #1
 8001af0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af2:	f107 0314 	add.w	r3, r7, #20
 8001af6:	4619      	mov	r1, r3
 8001af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001afc:	f000 fc46 	bl	800238c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b00:	2200      	movs	r2, #0
 8001b02:	2100      	movs	r1, #0
 8001b04:	201c      	movs	r0, #28
 8001b06:	f000 fc0a 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b0a:	201c      	movs	r0, #28
 8001b0c:	f000 fc23 	bl	8002356 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001b10:	bf00      	nop
 8001b12:	3728      	adds	r7, #40	@ 0x28
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000

08001b1c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b0ac      	sub	sp, #176	@ 0xb0
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	2288      	movs	r2, #136	@ 0x88
 8001b3a:	2100      	movs	r1, #0
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f005 fe3f 	bl	80077c0 <memset>
  if(huart->Instance==USART2)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a21      	ldr	r2, [pc, #132]	@ (8001bcc <HAL_UART_MspInit+0xb0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d13b      	bne.n	8001bc4 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b50:	2300      	movs	r3, #0
 8001b52:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b54:	f107 0314 	add.w	r3, r7, #20
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f001 fc3d 	bl	80033d8 <HAL_RCCEx_PeriphCLKConfig>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b64:	f7ff fef4 	bl	8001950 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b68:	4b19      	ldr	r3, [pc, #100]	@ (8001bd0 <HAL_UART_MspInit+0xb4>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b6c:	4a18      	ldr	r2, [pc, #96]	@ (8001bd0 <HAL_UART_MspInit+0xb4>)
 8001b6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b72:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b74:	4b16      	ldr	r3, [pc, #88]	@ (8001bd0 <HAL_UART_MspInit+0xb4>)
 8001b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b7c:	613b      	str	r3, [r7, #16]
 8001b7e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b80:	4b13      	ldr	r3, [pc, #76]	@ (8001bd0 <HAL_UART_MspInit+0xb4>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b84:	4a12      	ldr	r2, [pc, #72]	@ (8001bd0 <HAL_UART_MspInit+0xb4>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001b8c:	4b10      	ldr	r3, [pc, #64]	@ (8001bd0 <HAL_UART_MspInit+0xb4>)
 8001b8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001baa:	2303      	movs	r3, #3
 8001bac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bb0:	2307      	movs	r3, #7
 8001bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bb6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001bba:	4619      	mov	r1, r3
 8001bbc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001bc0:	f000 fbe4 	bl	800238c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001bc4:	bf00      	nop
 8001bc6:	37b0      	adds	r7, #176	@ 0xb0
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	40004400 	.word	0x40004400
 8001bd0:	40021000 	.word	0x40021000

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <NMI_Handler+0x4>

08001bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c26:	b580      	push	{r7, lr}
 8001c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c2a:	f000 fa59 	bl	80020e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
	...

08001c34 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <TIM2_IRQHandler+0x10>)
 8001c3a:	f003 fced 	bl	8005618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000278 	.word	0x20000278

08001c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_kill>:

int _kill(int pid, int sig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c62:	f005 fdff 	bl	8007864 <__errno>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2216      	movs	r2, #22
 8001c6a:	601a      	str	r2, [r3, #0]
  return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_exit>:

void _exit (int status)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffe7 	bl	8001c58 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c8a:	bf00      	nop
 8001c8c:	e7fd      	b.n	8001c8a <_exit+0x12>

08001c8e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8e:	b580      	push	{r7, lr}
 8001c90:	b086      	sub	sp, #24
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	60f8      	str	r0, [r7, #12]
 8001c96:	60b9      	str	r1, [r7, #8]
 8001c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	617b      	str	r3, [r7, #20]
 8001c9e:	e00a      	b.n	8001cb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ca0:	f3af 8000 	nop.w
 8001ca4:	4601      	mov	r1, r0
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	60ba      	str	r2, [r7, #8]
 8001cac:	b2ca      	uxtb	r2, r1
 8001cae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	3301      	adds	r3, #1
 8001cb4:	617b      	str	r3, [r7, #20]
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	dbf0      	blt.n	8001ca0 <_read+0x12>
  }

  return len;
 8001cbe:	687b      	ldr	r3, [r7, #4]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3718      	adds	r7, #24
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	e009      	b.n	8001cee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	1c5a      	adds	r2, r3, #1
 8001cde:	60ba      	str	r2, [r7, #8]
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	3301      	adds	r3, #1
 8001cec:	617b      	str	r3, [r7, #20]
 8001cee:	697a      	ldr	r2, [r7, #20]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	dbf1      	blt.n	8001cda <_write+0x12>
  }
  return len;
 8001cf6:	687b      	ldr	r3, [r7, #4]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <_close>:

int _close(int file)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	370c      	adds	r7, #12
 8001d10:	46bd      	mov	sp, r7
 8001d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d16:	4770      	bx	lr

08001d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d28:	605a      	str	r2, [r3, #4]
  return 0;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <_isatty>:

int _isatty(int file)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d40:	2301      	movs	r3, #1
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b085      	sub	sp, #20
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	60f8      	str	r0, [r7, #12]
 8001d56:	60b9      	str	r1, [r7, #8]
 8001d58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3714      	adds	r7, #20
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	@ (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	@ (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	@ (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	@ (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	@ (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	@ (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f005 fd64 	bl	8007864 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	@ (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	@ (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	@ (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20018000 	.word	0x20018000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	2000039c 	.word	0x2000039c
 8001dd0:	200004f8 	.word	0x200004f8

08001dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <CS_LOW>:
#include "w25qxx.h"

static SPI_HandleTypeDef *spi;

static void CS_LOW()  { HAL_GPIO_WritePin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin, GPIO_PIN_RESET); }
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2110      	movs	r1, #16
 8001e00:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e04:	f000 fc6c 	bl	80026e0 <HAL_GPIO_WritePin>
 8001e08:	bf00      	nop
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <CS_HIGH>:
static void CS_HIGH() { HAL_GPIO_WritePin(W25QXX_CS_GPIO_Port, W25QXX_CS_Pin, GPIO_PIN_SET); }
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
 8001e10:	2201      	movs	r2, #1
 8001e12:	2110      	movs	r1, #16
 8001e14:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001e18:	f000 fc62 	bl	80026e0 <HAL_GPIO_WritePin>
 8001e1c:	bf00      	nop
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <W25QXX_Init>:

void W25QXX_Init(SPI_HandleTypeDef *hspi_instance) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
    spi = hspi_instance;
 8001e28:	4a04      	ldr	r2, [pc, #16]	@ (8001e3c <W25QXX_Init+0x1c>)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6013      	str	r3, [r2, #0]
    CS_HIGH();
 8001e2e:	f7ff ffed 	bl	8001e0c <CS_HIGH>
}
 8001e32:	bf00      	nop
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	200003a0 	.word	0x200003a0

08001e40 <WriteEnable>:

static void WriteEnable() {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
    uint8_t cmd = W25Q_WRITE_ENABLE;
 8001e46:	2306      	movs	r3, #6
 8001e48:	71fb      	strb	r3, [r7, #7]
    CS_LOW();
 8001e4a:	f7ff ffd5 	bl	8001df8 <CS_LOW>
    HAL_SPI_Transmit(spi, &cmd, 1, HAL_MAX_DELAY);
 8001e4e:	4b07      	ldr	r3, [pc, #28]	@ (8001e6c <WriteEnable+0x2c>)
 8001e50:	6818      	ldr	r0, [r3, #0]
 8001e52:	1df9      	adds	r1, r7, #7
 8001e54:	f04f 33ff 	mov.w	r3, #4294967295
 8001e58:	2201      	movs	r2, #1
 8001e5a:	f002 faf4 	bl	8004446 <HAL_SPI_Transmit>
    CS_HIGH();
 8001e5e:	f7ff ffd5 	bl	8001e0c <CS_HIGH>
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200003a0 	.word	0x200003a0

08001e70 <WaitUntilReady>:

static void WaitUntilReady() {
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
    uint8_t cmd = W25Q_READ_STATUS_REG1;
 8001e76:	2305      	movs	r3, #5
 8001e78:	71fb      	strb	r3, [r7, #7]
    uint8_t status;
    do {
        CS_LOW();
 8001e7a:	f7ff ffbd 	bl	8001df8 <CS_LOW>
        HAL_SPI_Transmit(spi, &cmd, 1, HAL_MAX_DELAY);
 8001e7e:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <WaitUntilReady+0x48>)
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	1df9      	adds	r1, r7, #7
 8001e84:	f04f 33ff 	mov.w	r3, #4294967295
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f002 fadc 	bl	8004446 <HAL_SPI_Transmit>
        HAL_SPI_Receive(spi, &status, 1, HAL_MAX_DELAY);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <WaitUntilReady+0x48>)
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	1db9      	adds	r1, r7, #6
 8001e94:	f04f 33ff 	mov.w	r3, #4294967295
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f002 fc4a 	bl	8004732 <HAL_SPI_Receive>
        CS_HIGH();
 8001e9e:	f7ff ffb5 	bl	8001e0c <CS_HIGH>
    } while (status & 0x01); // WIP bit
 8001ea2:	79bb      	ldrb	r3, [r7, #6]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1e6      	bne.n	8001e7a <WaitUntilReady+0xa>
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	200003a0 	.word	0x200003a0

08001ebc <W25QXX_Write>:

void W25QXX_Write(uint32_t addr, uint8_t *data, uint16_t len) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b086      	sub	sp, #24
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	80fb      	strh	r3, [r7, #6]
    WriteEnable();
 8001eca:	f7ff ffb9 	bl	8001e40 <WriteEnable>
    uint8_t cmd[4] = {
 8001ece:	2302      	movs	r3, #2
 8001ed0:	753b      	strb	r3, [r7, #20]
        W25Q_PAGE_PROGRAM,
        (addr >> 16) & 0xFF,
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[4] = {
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	757b      	strb	r3, [r7, #21]
        (addr >> 8) & 0xFF,
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[4] = {
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	75bb      	strb	r3, [r7, #22]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	75fb      	strb	r3, [r7, #23]
        addr & 0xFF
    };
    CS_LOW();
 8001ee8:	f7ff ff86 	bl	8001df8 <CS_LOW>
    HAL_SPI_Transmit(spi, cmd, 4, HAL_MAX_DELAY);
 8001eec:	4b0c      	ldr	r3, [pc, #48]	@ (8001f20 <W25QXX_Write+0x64>)
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	f107 0114 	add.w	r1, r7, #20
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef8:	2204      	movs	r2, #4
 8001efa:	f002 faa4 	bl	8004446 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(spi, data, len, HAL_MAX_DELAY);
 8001efe:	4b08      	ldr	r3, [pc, #32]	@ (8001f20 <W25QXX_Write+0x64>)
 8001f00:	6818      	ldr	r0, [r3, #0]
 8001f02:	88fa      	ldrh	r2, [r7, #6]
 8001f04:	f04f 33ff 	mov.w	r3, #4294967295
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	f002 fa9c 	bl	8004446 <HAL_SPI_Transmit>
    CS_HIGH();
 8001f0e:	f7ff ff7d 	bl	8001e0c <CS_HIGH>
    WaitUntilReady();
 8001f12:	f7ff ffad 	bl	8001e70 <WaitUntilReady>
}
 8001f16:	bf00      	nop
 8001f18:	3718      	adds	r7, #24
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	200003a0 	.word	0x200003a0

08001f24 <W25QXX_Read>:


void W25QXX_Read(uint32_t addr, uint8_t *data, uint16_t len) {
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b086      	sub	sp, #24
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	60b9      	str	r1, [r7, #8]
 8001f2e:	4613      	mov	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
    uint8_t cmd[4] = {
 8001f32:	2303      	movs	r3, #3
 8001f34:	753b      	strb	r3, [r7, #20]
        W25Q_READ_DATA,
        (addr >> 16) & 0xFF,
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	0c1b      	lsrs	r3, r3, #16
    uint8_t cmd[4] = {
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	757b      	strb	r3, [r7, #21]
        (addr >> 8) & 0xFF,
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	0a1b      	lsrs	r3, r3, #8
    uint8_t cmd[4] = {
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	75bb      	strb	r3, [r7, #22]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	75fb      	strb	r3, [r7, #23]
        addr & 0xFF
    };
    CS_LOW();
 8001f4c:	f7ff ff54 	bl	8001df8 <CS_LOW>
    HAL_SPI_Transmit(spi, cmd, 4, HAL_MAX_DELAY);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <W25QXX_Read+0x5c>)
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	f107 0114 	add.w	r1, r7, #20
 8001f58:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	f002 fa72 	bl	8004446 <HAL_SPI_Transmit>
    HAL_SPI_Receive(spi, data, len, HAL_MAX_DELAY);
 8001f62:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <W25QXX_Read+0x5c>)
 8001f64:	6818      	ldr	r0, [r3, #0]
 8001f66:	88fa      	ldrh	r2, [r7, #6]
 8001f68:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6c:	68b9      	ldr	r1, [r7, #8]
 8001f6e:	f002 fbe0 	bl	8004732 <HAL_SPI_Receive>
    CS_HIGH();
 8001f72:	f7ff ff4b 	bl	8001e0c <CS_HIGH>
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	200003a0 	.word	0x200003a0

08001f84 <W25QXX_SectorErase>:
void W25QXX_SectorErase(uint32_t address)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
	  uint8_t cmd[4] = {
 8001f8c:	2320      	movs	r3, #32
 8001f8e:	733b      	strb	r3, [r7, #12]
	        CMD_SECTOR_ERASE,
	        (address >> 16) & 0xFF,
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	0c1b      	lsrs	r3, r3, #16
	  uint8_t cmd[4] = {
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	737b      	strb	r3, [r7, #13]
	        (address >> 8) & 0xFF,
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
	  uint8_t cmd[4] = {
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	73bb      	strb	r3, [r7, #14]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	73fb      	strb	r3, [r7, #15]
	        address & 0xFF
	    };
    WriteEnable();
 8001fa6:	f7ff ff4b 	bl	8001e40 <WriteEnable>
    CS_LOW();
 8001faa:	f7ff ff25 	bl	8001df8 <CS_LOW>
    HAL_SPI_Transmit(spi, cmd, 4, HAL_MAX_DELAY);
 8001fae:	4b08      	ldr	r3, [pc, #32]	@ (8001fd0 <W25QXX_SectorErase+0x4c>)
 8001fb0:	6818      	ldr	r0, [r3, #0]
 8001fb2:	f107 010c 	add.w	r1, r7, #12
 8001fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001fba:	2204      	movs	r2, #4
 8001fbc:	f002 fa43 	bl	8004446 <HAL_SPI_Transmit>
    CS_HIGH();
 8001fc0:	f7ff ff24 	bl	8001e0c <CS_HIGH>
    WaitUntilReady();
 8001fc4:	f7ff ff54 	bl	8001e70 <WaitUntilReady>
}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	200003a0 	.word	0x200003a0

08001fd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800200c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fd8:	f7ff fefc 	bl	8001dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fdc:	480c      	ldr	r0, [pc, #48]	@ (8002010 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fde:	490d      	ldr	r1, [pc, #52]	@ (8002014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fe0:	4a0d      	ldr	r2, [pc, #52]	@ (8002018 <LoopForever+0xe>)
  movs r3, #0
 8001fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fe4:	e002      	b.n	8001fec <LoopCopyDataInit>

08001fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fea:	3304      	adds	r3, #4

08001fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ff0:	d3f9      	bcc.n	8001fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	@ (800201c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ff4:	4c0a      	ldr	r4, [pc, #40]	@ (8002020 <LoopForever+0x16>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ff8:	e001      	b.n	8001ffe <LoopFillZerobss>

08001ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ffc:	3204      	adds	r2, #4

08001ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002000:	d3fb      	bcc.n	8001ffa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002002:	f005 fc35 	bl	8007870 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002006:	f7ff f875 	bl	80010f4 <main>

0800200a <LoopForever>:

LoopForever:
    b LoopForever
 800200a:	e7fe      	b.n	800200a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800200c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002014:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002018:	08009cd4 	.word	0x08009cd4
  ldr r2, =_sbss
 800201c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002020:	200004f4 	.word	0x200004f4

08002024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002024:	e7fe      	b.n	8002024 <ADC1_2_IRQHandler>
	...

08002028 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002032:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <HAL_Init+0x3c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a0b      	ldr	r2, [pc, #44]	@ (8002064 <HAL_Init+0x3c>)
 8002038:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800203c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800203e:	2003      	movs	r0, #3
 8002040:	f000 f962 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002044:	2000      	movs	r0, #0
 8002046:	f000 f80f 	bl	8002068 <HAL_InitTick>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d002      	beq.n	8002056 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	71fb      	strb	r3, [r7, #7]
 8002054:	e001      	b.n	800205a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002056:	f7ff fc81 	bl	800195c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800205a:	79fb      	ldrb	r3, [r7, #7]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}
 8002064:	40022000 	.word	0x40022000

08002068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b084      	sub	sp, #16
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002070:	2300      	movs	r3, #0
 8002072:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002074:	4b17      	ldr	r3, [pc, #92]	@ (80020d4 <HAL_InitTick+0x6c>)
 8002076:	781b      	ldrb	r3, [r3, #0]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d023      	beq.n	80020c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800207c:	4b16      	ldr	r3, [pc, #88]	@ (80020d8 <HAL_InitTick+0x70>)
 800207e:	681a      	ldr	r2, [r3, #0]
 8002080:	4b14      	ldr	r3, [pc, #80]	@ (80020d4 <HAL_InitTick+0x6c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	4619      	mov	r1, r3
 8002086:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208a:	fbb3 f3f1 	udiv	r3, r3, r1
 800208e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002092:	4618      	mov	r0, r3
 8002094:	f000 f96d 	bl	8002372 <HAL_SYSTICK_Config>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10f      	bne.n	80020be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b0f      	cmp	r3, #15
 80020a2:	d809      	bhi.n	80020b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020a4:	2200      	movs	r2, #0
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	f04f 30ff 	mov.w	r0, #4294967295
 80020ac:	f000 f937 	bl	800231e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80020b0:	4a0a      	ldr	r2, [pc, #40]	@ (80020dc <HAL_InitTick+0x74>)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6013      	str	r3, [r2, #0]
 80020b6:	e007      	b.n	80020c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	73fb      	strb	r3, [r7, #15]
 80020bc:	e004      	b.n	80020c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	73fb      	strb	r3, [r7, #15]
 80020c2:	e001      	b.n	80020c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	20000008 	.word	0x20000008
 80020d8:	20000000 	.word	0x20000000
 80020dc:	20000004 	.word	0x20000004

080020e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e0:	b480      	push	{r7}
 80020e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <HAL_IncTick+0x20>)
 80020e6:	781b      	ldrb	r3, [r3, #0]
 80020e8:	461a      	mov	r2, r3
 80020ea:	4b06      	ldr	r3, [pc, #24]	@ (8002104 <HAL_IncTick+0x24>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4413      	add	r3, r2
 80020f0:	4a04      	ldr	r2, [pc, #16]	@ (8002104 <HAL_IncTick+0x24>)
 80020f2:	6013      	str	r3, [r2, #0]
}
 80020f4:	bf00      	nop
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	20000008 	.word	0x20000008
 8002104:	200003a4 	.word	0x200003a4

08002108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  return uwTick;
 800210c:	4b03      	ldr	r3, [pc, #12]	@ (800211c <HAL_GetTick+0x14>)
 800210e:	681b      	ldr	r3, [r3, #0]
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	200003a4 	.word	0x200003a4

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff ffee 	bl	8002108 <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800213a:	4b0a      	ldr	r3, [pc, #40]	@ (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffde 	bl	8002108 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000008 	.word	0x20000008

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	@ (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	@ (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	@ (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	@ (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	@ 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	@ 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	@ (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff8e 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	@ (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	@ (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff29 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff3e 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff8e 	bl	800225c <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5d 	bl	8002208 <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff31 	bl	80021cc <__NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffa2 	bl	80022c4 <SysTick_Config>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800238c:	b480      	push	{r7}
 800238e:	b087      	sub	sp, #28
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800239a:	e17f      	b.n	800269c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	2101      	movs	r1, #1
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	fa01 f303 	lsl.w	r3, r1, r3
 80023a8:	4013      	ands	r3, r2
 80023aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8171 	beq.w	8002696 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d005      	beq.n	80023cc <HAL_GPIO_Init+0x40>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f003 0303 	and.w	r3, r3, #3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d130      	bne.n	800242e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	4013      	ands	r3, r2
 80023e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	68da      	ldr	r2, [r3, #12]
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	693a      	ldr	r2, [r7, #16]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002402:	2201      	movs	r2, #1
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	693a      	ldr	r2, [r7, #16]
 800240e:	4013      	ands	r3, r2
 8002410:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	091b      	lsrs	r3, r3, #4
 8002418:	f003 0201 	and.w	r2, r3, #1
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	693a      	ldr	r2, [r7, #16]
 8002424:	4313      	orrs	r3, r2
 8002426:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	2b03      	cmp	r3, #3
 8002438:	d118      	bne.n	800246c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002440:	2201      	movs	r2, #1
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	4013      	ands	r3, r2
 800244e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	08db      	lsrs	r3, r3, #3
 8002456:	f003 0201 	and.w	r2, r3, #1
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4313      	orrs	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	2b03      	cmp	r3, #3
 8002476:	d017      	beq.n	80024a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	2203      	movs	r2, #3
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	43db      	mvns	r3, r3
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	4013      	ands	r3, r2
 800248e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	693a      	ldr	r2, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	693a      	ldr	r2, [r7, #16]
 80024a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 0303 	and.w	r3, r3, #3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d123      	bne.n	80024fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	08da      	lsrs	r2, r3, #3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	3208      	adds	r2, #8
 80024bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	220f      	movs	r2, #15
 80024cc:	fa02 f303 	lsl.w	r3, r2, r3
 80024d0:	43db      	mvns	r3, r3
 80024d2:	693a      	ldr	r2, [r7, #16]
 80024d4:	4013      	ands	r3, r2
 80024d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	691a      	ldr	r2, [r3, #16]
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	fa02 f303 	lsl.w	r3, r2, r3
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024ee:	697b      	ldr	r3, [r7, #20]
 80024f0:	08da      	lsrs	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3208      	adds	r2, #8
 80024f6:	6939      	ldr	r1, [r7, #16]
 80024f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	2203      	movs	r2, #3
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	693a      	ldr	r2, [r7, #16]
 8002510:	4013      	ands	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 0203 	and.w	r2, r3, #3
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4313      	orrs	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002538:	2b00      	cmp	r3, #0
 800253a:	f000 80ac 	beq.w	8002696 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800253e:	4b5f      	ldr	r3, [pc, #380]	@ (80026bc <HAL_GPIO_Init+0x330>)
 8002540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002542:	4a5e      	ldr	r2, [pc, #376]	@ (80026bc <HAL_GPIO_Init+0x330>)
 8002544:	f043 0301 	orr.w	r3, r3, #1
 8002548:	6613      	str	r3, [r2, #96]	@ 0x60
 800254a:	4b5c      	ldr	r3, [pc, #368]	@ (80026bc <HAL_GPIO_Init+0x330>)
 800254c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254e:	f003 0301 	and.w	r3, r3, #1
 8002552:	60bb      	str	r3, [r7, #8]
 8002554:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002556:	4a5a      	ldr	r2, [pc, #360]	@ (80026c0 <HAL_GPIO_Init+0x334>)
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	089b      	lsrs	r3, r3, #2
 800255c:	3302      	adds	r3, #2
 800255e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	220f      	movs	r2, #15
 800256e:	fa02 f303 	lsl.w	r3, r2, r3
 8002572:	43db      	mvns	r3, r3
 8002574:	693a      	ldr	r2, [r7, #16]
 8002576:	4013      	ands	r3, r2
 8002578:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002580:	d025      	beq.n	80025ce <HAL_GPIO_Init+0x242>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a4f      	ldr	r2, [pc, #316]	@ (80026c4 <HAL_GPIO_Init+0x338>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d01f      	beq.n	80025ca <HAL_GPIO_Init+0x23e>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4e      	ldr	r2, [pc, #312]	@ (80026c8 <HAL_GPIO_Init+0x33c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d019      	beq.n	80025c6 <HAL_GPIO_Init+0x23a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4d      	ldr	r2, [pc, #308]	@ (80026cc <HAL_GPIO_Init+0x340>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d013      	beq.n	80025c2 <HAL_GPIO_Init+0x236>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4c      	ldr	r2, [pc, #304]	@ (80026d0 <HAL_GPIO_Init+0x344>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d00d      	beq.n	80025be <HAL_GPIO_Init+0x232>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4b      	ldr	r2, [pc, #300]	@ (80026d4 <HAL_GPIO_Init+0x348>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d007      	beq.n	80025ba <HAL_GPIO_Init+0x22e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4a      	ldr	r2, [pc, #296]	@ (80026d8 <HAL_GPIO_Init+0x34c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d101      	bne.n	80025b6 <HAL_GPIO_Init+0x22a>
 80025b2:	2306      	movs	r3, #6
 80025b4:	e00c      	b.n	80025d0 <HAL_GPIO_Init+0x244>
 80025b6:	2307      	movs	r3, #7
 80025b8:	e00a      	b.n	80025d0 <HAL_GPIO_Init+0x244>
 80025ba:	2305      	movs	r3, #5
 80025bc:	e008      	b.n	80025d0 <HAL_GPIO_Init+0x244>
 80025be:	2304      	movs	r3, #4
 80025c0:	e006      	b.n	80025d0 <HAL_GPIO_Init+0x244>
 80025c2:	2303      	movs	r3, #3
 80025c4:	e004      	b.n	80025d0 <HAL_GPIO_Init+0x244>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e002      	b.n	80025d0 <HAL_GPIO_Init+0x244>
 80025ca:	2301      	movs	r3, #1
 80025cc:	e000      	b.n	80025d0 <HAL_GPIO_Init+0x244>
 80025ce:	2300      	movs	r3, #0
 80025d0:	697a      	ldr	r2, [r7, #20]
 80025d2:	f002 0203 	and.w	r2, r2, #3
 80025d6:	0092      	lsls	r2, r2, #2
 80025d8:	4093      	lsls	r3, r2
 80025da:	693a      	ldr	r2, [r7, #16]
 80025dc:	4313      	orrs	r3, r2
 80025de:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80025e0:	4937      	ldr	r1, [pc, #220]	@ (80026c0 <HAL_GPIO_Init+0x334>)
 80025e2:	697b      	ldr	r3, [r7, #20]
 80025e4:	089b      	lsrs	r3, r3, #2
 80025e6:	3302      	adds	r3, #2
 80025e8:	693a      	ldr	r2, [r7, #16]
 80025ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025ee:	4b3b      	ldr	r3, [pc, #236]	@ (80026dc <HAL_GPIO_Init+0x350>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	43db      	mvns	r3, r3
 80025f8:	693a      	ldr	r2, [r7, #16]
 80025fa:	4013      	ands	r3, r2
 80025fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d003      	beq.n	8002612 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	4313      	orrs	r3, r2
 8002610:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002612:	4a32      	ldr	r2, [pc, #200]	@ (80026dc <HAL_GPIO_Init+0x350>)
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002618:	4b30      	ldr	r3, [pc, #192]	@ (80026dc <HAL_GPIO_Init+0x350>)
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	43db      	mvns	r3, r3
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4013      	ands	r3, r2
 8002626:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002634:	693a      	ldr	r2, [r7, #16]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	4313      	orrs	r3, r2
 800263a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800263c:	4a27      	ldr	r2, [pc, #156]	@ (80026dc <HAL_GPIO_Init+0x350>)
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002642:	4b26      	ldr	r3, [pc, #152]	@ (80026dc <HAL_GPIO_Init+0x350>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	43db      	mvns	r3, r3
 800264c:	693a      	ldr	r2, [r7, #16]
 800264e:	4013      	ands	r3, r2
 8002650:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d003      	beq.n	8002666 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002666:	4a1d      	ldr	r2, [pc, #116]	@ (80026dc <HAL_GPIO_Init+0x350>)
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800266c:	4b1b      	ldr	r3, [pc, #108]	@ (80026dc <HAL_GPIO_Init+0x350>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	43db      	mvns	r3, r3
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4013      	ands	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002684:	2b00      	cmp	r3, #0
 8002686:	d003      	beq.n	8002690 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002688:	693a      	ldr	r2, [r7, #16]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002690:	4a12      	ldr	r2, [pc, #72]	@ (80026dc <HAL_GPIO_Init+0x350>)
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	3301      	adds	r3, #1
 800269a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f47f ae78 	bne.w	800239c <HAL_GPIO_Init+0x10>
  }
}
 80026ac:	bf00      	nop
 80026ae:	bf00      	nop
 80026b0:	371c      	adds	r7, #28
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	40010000 	.word	0x40010000
 80026c4:	48000400 	.word	0x48000400
 80026c8:	48000800 	.word	0x48000800
 80026cc:	48000c00 	.word	0x48000c00
 80026d0:	48001000 	.word	0x48001000
 80026d4:	48001400 	.word	0x48001400
 80026d8:	48001800 	.word	0x48001800
 80026dc:	40010400 	.word	0x40010400

080026e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	807b      	strh	r3, [r7, #2]
 80026ec:	4613      	mov	r3, r2
 80026ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026f0:	787b      	ldrb	r3, [r7, #1]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026f6:	887a      	ldrh	r2, [r7, #2]
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026fc:	e002      	b.n	8002704 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026fe:	887a      	ldrh	r2, [r7, #2]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002710:	b480      	push	{r7}
 8002712:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002714:	4b04      	ldr	r3, [pc, #16]	@ (8002728 <HAL_PWREx_GetVoltageRange+0x18>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800271c:	4618      	mov	r0, r3
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr
 8002726:	bf00      	nop
 8002728:	40007000 	.word	0x40007000

0800272c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800273a:	d130      	bne.n	800279e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800273c:	4b23      	ldr	r3, [pc, #140]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002748:	d038      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800274a:	4b20      	ldr	r3, [pc, #128]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002752:	4a1e      	ldr	r2, [pc, #120]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002754:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002758:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800275a:	4b1d      	ldr	r3, [pc, #116]	@ (80027d0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	2232      	movs	r2, #50	@ 0x32
 8002760:	fb02 f303 	mul.w	r3, r2, r3
 8002764:	4a1b      	ldr	r2, [pc, #108]	@ (80027d4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	0c9b      	lsrs	r3, r3, #18
 800276c:	3301      	adds	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002770:	e002      	b.n	8002778 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	3b01      	subs	r3, #1
 8002776:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002778:	4b14      	ldr	r3, [pc, #80]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002780:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002784:	d102      	bne.n	800278c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d1f2      	bne.n	8002772 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800278c:	4b0f      	ldr	r3, [pc, #60]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002798:	d110      	bne.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e00f      	b.n	80027be <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800279e:	4b0b      	ldr	r3, [pc, #44]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80027a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027aa:	d007      	beq.n	80027bc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80027ac:	4b07      	ldr	r3, [pc, #28]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80027b4:	4a05      	ldr	r2, [pc, #20]	@ (80027cc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80027b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027ba:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40007000 	.word	0x40007000
 80027d0:	20000000 	.word	0x20000000
 80027d4:	431bde83 	.word	0x431bde83

080027d8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e3ca      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ea:	4b97      	ldr	r3, [pc, #604]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	f003 030c 	and.w	r3, r3, #12
 80027f2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027f4:	4b94      	ldr	r3, [pc, #592]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	f003 0303 	and.w	r3, r3, #3
 80027fc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0310 	and.w	r3, r3, #16
 8002806:	2b00      	cmp	r3, #0
 8002808:	f000 80e4 	beq.w	80029d4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800280c:	69bb      	ldr	r3, [r7, #24]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d007      	beq.n	8002822 <HAL_RCC_OscConfig+0x4a>
 8002812:	69bb      	ldr	r3, [r7, #24]
 8002814:	2b0c      	cmp	r3, #12
 8002816:	f040 808b 	bne.w	8002930 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b01      	cmp	r3, #1
 800281e:	f040 8087 	bne.w	8002930 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002822:	4b89      	ldr	r3, [pc, #548]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d005      	beq.n	800283a <HAL_RCC_OscConfig+0x62>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	699b      	ldr	r3, [r3, #24]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d101      	bne.n	800283a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e3a2      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a1a      	ldr	r2, [r3, #32]
 800283e:	4b82      	ldr	r3, [pc, #520]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d004      	beq.n	8002854 <HAL_RCC_OscConfig+0x7c>
 800284a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002852:	e005      	b.n	8002860 <HAL_RCC_OscConfig+0x88>
 8002854:	4b7c      	ldr	r3, [pc, #496]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002856:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800285a:	091b      	lsrs	r3, r3, #4
 800285c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002860:	4293      	cmp	r3, r2
 8002862:	d223      	bcs.n	80028ac <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a1b      	ldr	r3, [r3, #32]
 8002868:	4618      	mov	r0, r3
 800286a:	f000 fd55 	bl	8003318 <RCC_SetFlashLatencyFromMSIRange>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d001      	beq.n	8002878 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e383      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002878:	4b73      	ldr	r3, [pc, #460]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a72      	ldr	r2, [pc, #456]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800287e:	f043 0308 	orr.w	r3, r3, #8
 8002882:	6013      	str	r3, [r2, #0]
 8002884:	4b70      	ldr	r3, [pc, #448]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	496d      	ldr	r1, [pc, #436]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002892:	4313      	orrs	r3, r2
 8002894:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002896:	4b6c      	ldr	r3, [pc, #432]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	69db      	ldr	r3, [r3, #28]
 80028a2:	021b      	lsls	r3, r3, #8
 80028a4:	4968      	ldr	r1, [pc, #416]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	604b      	str	r3, [r1, #4]
 80028aa:	e025      	b.n	80028f8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028ac:	4b66      	ldr	r3, [pc, #408]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a65      	ldr	r2, [pc, #404]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028b2:	f043 0308 	orr.w	r3, r3, #8
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b63      	ldr	r3, [pc, #396]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6a1b      	ldr	r3, [r3, #32]
 80028c4:	4960      	ldr	r1, [pc, #384]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028ca:	4b5f      	ldr	r3, [pc, #380]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	021b      	lsls	r3, r3, #8
 80028d8:	495b      	ldr	r1, [pc, #364]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6a1b      	ldr	r3, [r3, #32]
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 fd15 	bl	8003318 <RCC_SetFlashLatencyFromMSIRange>
 80028ee:	4603      	mov	r3, r0
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d001      	beq.n	80028f8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e343      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028f8:	f000 fc4a 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 80028fc:	4602      	mov	r2, r0
 80028fe:	4b52      	ldr	r3, [pc, #328]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	4950      	ldr	r1, [pc, #320]	@ (8002a4c <HAL_RCC_OscConfig+0x274>)
 800290a:	5ccb      	ldrb	r3, [r1, r3]
 800290c:	f003 031f 	and.w	r3, r3, #31
 8002910:	fa22 f303 	lsr.w	r3, r2, r3
 8002914:	4a4e      	ldr	r2, [pc, #312]	@ (8002a50 <HAL_RCC_OscConfig+0x278>)
 8002916:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002918:	4b4e      	ldr	r3, [pc, #312]	@ (8002a54 <HAL_RCC_OscConfig+0x27c>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff fba3 	bl	8002068 <HAL_InitTick>
 8002922:	4603      	mov	r3, r0
 8002924:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002926:	7bfb      	ldrb	r3, [r7, #15]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d052      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800292c:	7bfb      	ldrb	r3, [r7, #15]
 800292e:	e327      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	699b      	ldr	r3, [r3, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d032      	beq.n	800299e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002938:	4b43      	ldr	r3, [pc, #268]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a42      	ldr	r2, [pc, #264]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800293e:	f043 0301 	orr.w	r3, r3, #1
 8002942:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002944:	f7ff fbe0 	bl	8002108 <HAL_GetTick>
 8002948:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800294a:	e008      	b.n	800295e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800294c:	f7ff fbdc 	bl	8002108 <HAL_GetTick>
 8002950:	4602      	mov	r2, r0
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	1ad3      	subs	r3, r2, r3
 8002956:	2b02      	cmp	r3, #2
 8002958:	d901      	bls.n	800295e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800295a:	2303      	movs	r3, #3
 800295c:	e310      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800295e:	4b3a      	ldr	r3, [pc, #232]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d0f0      	beq.n	800294c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296a:	4b37      	ldr	r3, [pc, #220]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a36      	ldr	r2, [pc, #216]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002970:	f043 0308 	orr.w	r3, r3, #8
 8002974:	6013      	str	r3, [r2, #0]
 8002976:	4b34      	ldr	r3, [pc, #208]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	4931      	ldr	r1, [pc, #196]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002988:	4b2f      	ldr	r3, [pc, #188]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	021b      	lsls	r3, r3, #8
 8002996:	492c      	ldr	r1, [pc, #176]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002998:	4313      	orrs	r3, r2
 800299a:	604b      	str	r3, [r1, #4]
 800299c:	e01a      	b.n	80029d4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800299e:	4b2a      	ldr	r3, [pc, #168]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a29      	ldr	r2, [pc, #164]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029a4:	f023 0301 	bic.w	r3, r3, #1
 80029a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80029aa:	f7ff fbad 	bl	8002108 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029b2:	f7ff fba9 	bl	8002108 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e2dd      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80029c4:	4b20      	ldr	r3, [pc, #128]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0302 	and.w	r3, r3, #2
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1f0      	bne.n	80029b2 <HAL_RCC_OscConfig+0x1da>
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80029d2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d074      	beq.n	8002aca <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b08      	cmp	r3, #8
 80029e4:	d005      	beq.n	80029f2 <HAL_RCC_OscConfig+0x21a>
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	2b0c      	cmp	r3, #12
 80029ea:	d10e      	bne.n	8002a0a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	2b03      	cmp	r3, #3
 80029f0:	d10b      	bne.n	8002a0a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d064      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d160      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e2ba      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a12:	d106      	bne.n	8002a22 <HAL_RCC_OscConfig+0x24a>
 8002a14:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a0b      	ldr	r2, [pc, #44]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1e:	6013      	str	r3, [r2, #0]
 8002a20:	e026      	b.n	8002a70 <HAL_RCC_OscConfig+0x298>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a2a:	d115      	bne.n	8002a58 <HAL_RCC_OscConfig+0x280>
 8002a2c:	4b06      	ldr	r3, [pc, #24]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a05      	ldr	r2, [pc, #20]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a32:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a36:	6013      	str	r3, [r2, #0]
 8002a38:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a02      	ldr	r2, [pc, #8]	@ (8002a48 <HAL_RCC_OscConfig+0x270>)
 8002a3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a42:	6013      	str	r3, [r2, #0]
 8002a44:	e014      	b.n	8002a70 <HAL_RCC_OscConfig+0x298>
 8002a46:	bf00      	nop
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	08009908 	.word	0x08009908
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004
 8002a58:	4ba0      	ldr	r3, [pc, #640]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a9f      	ldr	r2, [pc, #636]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a5e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a62:	6013      	str	r3, [r2, #0]
 8002a64:	4b9d      	ldr	r3, [pc, #628]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a9c      	ldr	r2, [pc, #624]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a6a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d013      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7ff fb46 	bl	8002108 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a80:	f7ff fb42 	bl	8002108 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b64      	cmp	r3, #100	@ 0x64
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e276      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a92:	4b92      	ldr	r3, [pc, #584]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x2a8>
 8002a9e:	e014      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aa0:	f7ff fb32 	bl	8002108 <HAL_GetTick>
 8002aa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aa6:	e008      	b.n	8002aba <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002aa8:	f7ff fb2e 	bl	8002108 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	693b      	ldr	r3, [r7, #16]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	2b64      	cmp	r3, #100	@ 0x64
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e262      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002aba:	4b88      	ldr	r3, [pc, #544]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1f0      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x2d0>
 8002ac6:	e000      	b.n	8002aca <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ac8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0302 	and.w	r3, r3, #2
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d060      	beq.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	2b04      	cmp	r3, #4
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x310>
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	2b0c      	cmp	r3, #12
 8002ae0:	d119      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d116      	bne.n	8002b16 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ae8:	4b7c      	ldr	r3, [pc, #496]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_OscConfig+0x328>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e23f      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b00:	4b76      	ldr	r3, [pc, #472]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	061b      	lsls	r3, r3, #24
 8002b0e:	4973      	ldr	r1, [pc, #460]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b14:	e040      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	68db      	ldr	r3, [r3, #12]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d023      	beq.n	8002b66 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b1e:	4b6f      	ldr	r3, [pc, #444]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a6e      	ldr	r2, [pc, #440]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b28:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b2a:	f7ff faed 	bl	8002108 <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b30:	e008      	b.n	8002b44 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b32:	f7ff fae9 	bl	8002108 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d901      	bls.n	8002b44 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e21d      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b44:	4b65      	ldr	r3, [pc, #404]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d0f0      	beq.n	8002b32 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b50:	4b62      	ldr	r3, [pc, #392]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	691b      	ldr	r3, [r3, #16]
 8002b5c:	061b      	lsls	r3, r3, #24
 8002b5e:	495f      	ldr	r1, [pc, #380]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	e018      	b.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b66:	4b5d      	ldr	r3, [pc, #372]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b72:	f7ff fac9 	bl	8002108 <HAL_GetTick>
 8002b76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b78:	e008      	b.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b7a:	f7ff fac5 	bl	8002108 <HAL_GetTick>
 8002b7e:	4602      	mov	r2, r0
 8002b80:	693b      	ldr	r3, [r7, #16]
 8002b82:	1ad3      	subs	r3, r2, r3
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d901      	bls.n	8002b8c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e1f9      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b8c:	4b53      	ldr	r3, [pc, #332]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d1f0      	bne.n	8002b7a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d03c      	beq.n	8002c1e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01c      	beq.n	8002be6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bac:	4b4b      	ldr	r3, [pc, #300]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bb2:	4a4a      	ldr	r2, [pc, #296]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bb4:	f043 0301 	orr.w	r3, r3, #1
 8002bb8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f7ff faa4 	bl	8002108 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bc2:	e008      	b.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bc4:	f7ff faa0 	bl	8002108 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e1d4      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002bd6:	4b41      	ldr	r3, [pc, #260]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0ef      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x3ec>
 8002be4:	e01b      	b.n	8002c1e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be6:	4b3d      	ldr	r3, [pc, #244]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002be8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002bec:	4a3b      	ldr	r2, [pc, #236]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002bee:	f023 0301 	bic.w	r3, r3, #1
 8002bf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf6:	f7ff fa87 	bl	8002108 <HAL_GetTick>
 8002bfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002bfc:	e008      	b.n	8002c10 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002bfe:	f7ff fa83 	bl	8002108 <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d901      	bls.n	8002c10 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e1b7      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002c10:	4b32      	ldr	r3, [pc, #200]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c12:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c16:	f003 0302 	and.w	r3, r3, #2
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1ef      	bne.n	8002bfe <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0304 	and.w	r3, r3, #4
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	f000 80a6 	beq.w	8002d78 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002c30:	4b2a      	ldr	r3, [pc, #168]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c34:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10d      	bne.n	8002c58 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3c:	4b27      	ldr	r3, [pc, #156]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c40:	4a26      	ldr	r2, [pc, #152]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c42:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c46:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c48:	4b24      	ldr	r3, [pc, #144]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c50:	60bb      	str	r3, [r7, #8]
 8002c52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c54:	2301      	movs	r3, #1
 8002c56:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c58:	4b21      	ldr	r3, [pc, #132]	@ (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d118      	bne.n	8002c96 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c64:	4b1e      	ldr	r3, [pc, #120]	@ (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a1d      	ldr	r2, [pc, #116]	@ (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c70:	f7ff fa4a 	bl	8002108 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c76:	e008      	b.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7ff fa46 	bl	8002108 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e17a      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c8a:	4b15      	ldr	r3, [pc, #84]	@ (8002ce0 <HAL_RCC_OscConfig+0x508>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d108      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x4d8>
 8002c9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cae:	e029      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2b05      	cmp	r3, #5
 8002cb6:	d115      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x50c>
 8002cb8:	4b08      	ldr	r3, [pc, #32]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cbe:	4a07      	ldr	r2, [pc, #28]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cc8:	4b04      	ldr	r3, [pc, #16]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cce:	4a03      	ldr	r2, [pc, #12]	@ (8002cdc <HAL_RCC_OscConfig+0x504>)
 8002cd0:	f043 0301 	orr.w	r3, r3, #1
 8002cd4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cd8:	e014      	b.n	8002d04 <HAL_RCC_OscConfig+0x52c>
 8002cda:	bf00      	nop
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	4b9c      	ldr	r3, [pc, #624]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cea:	4a9b      	ldr	r2, [pc, #620]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002cf4:	4b98      	ldr	r3, [pc, #608]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cfa:	4a97      	ldr	r2, [pc, #604]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002cfc:	f023 0304 	bic.w	r3, r3, #4
 8002d00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d016      	beq.n	8002d3a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0c:	f7ff f9fc 	bl	8002108 <HAL_GetTick>
 8002d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d12:	e00a      	b.n	8002d2a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d14:	f7ff f9f8 	bl	8002108 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d901      	bls.n	8002d2a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002d26:	2303      	movs	r3, #3
 8002d28:	e12a      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d2a:	4b8b      	ldr	r3, [pc, #556]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d0ed      	beq.n	8002d14 <HAL_RCC_OscConfig+0x53c>
 8002d38:	e015      	b.n	8002d66 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3a:	f7ff f9e5 	bl	8002108 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d40:	e00a      	b.n	8002d58 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d42:	f7ff f9e1 	bl	8002108 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e113      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002d58:	4b7f      	ldr	r3, [pc, #508]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002d5e:	f003 0302 	and.w	r3, r3, #2
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1ed      	bne.n	8002d42 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d66:	7ffb      	ldrb	r3, [r7, #31]
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d105      	bne.n	8002d78 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d6c:	4b7a      	ldr	r3, [pc, #488]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d70:	4a79      	ldr	r2, [pc, #484]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002d72:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80fe 	beq.w	8002f7e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d86:	2b02      	cmp	r3, #2
 8002d88:	f040 80d0 	bne.w	8002f2c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d8c:	4b72      	ldr	r3, [pc, #456]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d130      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002daa:	3b01      	subs	r3, #1
 8002dac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d127      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dbc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d11f      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002dcc:	2a07      	cmp	r2, #7
 8002dce:	bf14      	ite	ne
 8002dd0:	2201      	movne	r2, #1
 8002dd2:	2200      	moveq	r2, #0
 8002dd4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d113      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002de4:	085b      	lsrs	r3, r3, #1
 8002de6:	3b01      	subs	r3, #1
 8002de8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d109      	bne.n	8002e02 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002df8:	085b      	lsrs	r3, r3, #1
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d06e      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e02:	69bb      	ldr	r3, [r7, #24]
 8002e04:	2b0c      	cmp	r3, #12
 8002e06:	d069      	beq.n	8002edc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002e08:	4b53      	ldr	r3, [pc, #332]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d105      	bne.n	8002e20 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002e14:	4b50      	ldr	r3, [pc, #320]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0ad      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002e24:	4b4c      	ldr	r3, [pc, #304]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a4b      	ldr	r2, [pc, #300]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002e2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e2e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e30:	f7ff f96a 	bl	8002108 <HAL_GetTick>
 8002e34:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e36:	e008      	b.n	8002e4a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e38:	f7ff f966 	bl	8002108 <HAL_GetTick>
 8002e3c:	4602      	mov	r2, r0
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e09a      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e4a:	4b43      	ldr	r3, [pc, #268]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1f0      	bne.n	8002e38 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e56:	4b40      	ldr	r3, [pc, #256]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	4b40      	ldr	r3, [pc, #256]	@ (8002f5c <HAL_RCC_OscConfig+0x784>)
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	687a      	ldr	r2, [r7, #4]
 8002e60:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e66:	3a01      	subs	r2, #1
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	4311      	orrs	r1, r2
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e70:	0212      	lsls	r2, r2, #8
 8002e72:	4311      	orrs	r1, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e78:	0852      	lsrs	r2, r2, #1
 8002e7a:	3a01      	subs	r2, #1
 8002e7c:	0552      	lsls	r2, r2, #21
 8002e7e:	4311      	orrs	r1, r2
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e84:	0852      	lsrs	r2, r2, #1
 8002e86:	3a01      	subs	r2, #1
 8002e88:	0652      	lsls	r2, r2, #25
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e90:	0912      	lsrs	r2, r2, #4
 8002e92:	0452      	lsls	r2, r2, #17
 8002e94:	430a      	orrs	r2, r1
 8002e96:	4930      	ldr	r1, [pc, #192]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e9c:	4b2e      	ldr	r3, [pc, #184]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a2d      	ldr	r2, [pc, #180]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002ea2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ea6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ea8:	4b2b      	ldr	r3, [pc, #172]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	4a2a      	ldr	r2, [pc, #168]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002eae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002eb2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002eb4:	f7ff f928 	bl	8002108 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7ff f924 	bl	8002108 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e058      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ece:	4b22      	ldr	r3, [pc, #136]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d0f0      	beq.n	8002ebc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002eda:	e050      	b.n	8002f7e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002edc:	2301      	movs	r3, #1
 8002ede:	e04f      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ee0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d148      	bne.n	8002f7e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002eec:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a19      	ldr	r2, [pc, #100]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002ef2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ef6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ef8:	4b17      	ldr	r3, [pc, #92]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002efa:	68db      	ldr	r3, [r3, #12]
 8002efc:	4a16      	ldr	r2, [pc, #88]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002efe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002f02:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f04:	f7ff f900 	bl	8002108 <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f0c:	f7ff f8fc 	bl	8002108 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e030      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0f0      	beq.n	8002f0c <HAL_RCC_OscConfig+0x734>
 8002f2a:	e028      	b.n	8002f7e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d023      	beq.n	8002f7a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f32:	4b09      	ldr	r3, [pc, #36]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a08      	ldr	r2, [pc, #32]	@ (8002f58 <HAL_RCC_OscConfig+0x780>)
 8002f38:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002f3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3e:	f7ff f8e3 	bl	8002108 <HAL_GetTick>
 8002f42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f44:	e00c      	b.n	8002f60 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f46:	f7ff f8df 	bl	8002108 <HAL_GetTick>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	1ad3      	subs	r3, r2, r3
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d905      	bls.n	8002f60 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002f54:	2303      	movs	r3, #3
 8002f56:	e013      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
 8002f58:	40021000 	.word	0x40021000
 8002f5c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002f60:	4b09      	ldr	r3, [pc, #36]	@ (8002f88 <HAL_RCC_OscConfig+0x7b0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ec      	bne.n	8002f46 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f6c:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <HAL_RCC_OscConfig+0x7b0>)
 8002f6e:	68da      	ldr	r2, [r3, #12]
 8002f70:	4905      	ldr	r1, [pc, #20]	@ (8002f88 <HAL_RCC_OscConfig+0x7b0>)
 8002f72:	4b06      	ldr	r3, [pc, #24]	@ (8002f8c <HAL_RCC_OscConfig+0x7b4>)
 8002f74:	4013      	ands	r3, r2
 8002f76:	60cb      	str	r3, [r1, #12]
 8002f78:	e001      	b.n	8002f7e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	e000      	b.n	8002f80 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	3720      	adds	r7, #32
 8002f84:	46bd      	mov	sp, r7
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	feeefffc 	.word	0xfeeefffc

08002f90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
 8002f98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e0e7      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fa4:	4b75      	ldr	r3, [pc, #468]	@ (800317c <HAL_RCC_ClockConfig+0x1ec>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0307 	and.w	r3, r3, #7
 8002fac:	683a      	ldr	r2, [r7, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d910      	bls.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fb2:	4b72      	ldr	r3, [pc, #456]	@ (800317c <HAL_RCC_ClockConfig+0x1ec>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f023 0207 	bic.w	r2, r3, #7
 8002fba:	4970      	ldr	r1, [pc, #448]	@ (800317c <HAL_RCC_ClockConfig+0x1ec>)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fc2:	4b6e      	ldr	r3, [pc, #440]	@ (800317c <HAL_RCC_ClockConfig+0x1ec>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0307 	and.w	r3, r3, #7
 8002fca:	683a      	ldr	r2, [r7, #0]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d001      	beq.n	8002fd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	e0cf      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d010      	beq.n	8003002 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	4b66      	ldr	r3, [pc, #408]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d908      	bls.n	8003002 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ff0:	4b63      	ldr	r3, [pc, #396]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	689b      	ldr	r3, [r3, #8]
 8002ffc:	4960      	ldr	r1, [pc, #384]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d04c      	beq.n	80030a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2b03      	cmp	r3, #3
 8003014:	d107      	bne.n	8003026 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003016:	4b5a      	ldr	r3, [pc, #360]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d121      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e0a6      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	2b02      	cmp	r3, #2
 800302c:	d107      	bne.n	800303e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800302e:	4b54      	ldr	r3, [pc, #336]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d115      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e09a      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d107      	bne.n	8003056 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003046:	4b4e      	ldr	r3, [pc, #312]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d109      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e08e      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003056:	4b4a      	ldr	r3, [pc, #296]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800305e:	2b00      	cmp	r3, #0
 8003060:	d101      	bne.n	8003066 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e086      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003066:	4b46      	ldr	r3, [pc, #280]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f023 0203 	bic.w	r2, r3, #3
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	4943      	ldr	r1, [pc, #268]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003074:	4313      	orrs	r3, r2
 8003076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003078:	f7ff f846 	bl	8002108 <HAL_GetTick>
 800307c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307e:	e00a      	b.n	8003096 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003080:	f7ff f842 	bl	8002108 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e06e      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003096:	4b3a      	ldr	r3, [pc, #232]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	f003 020c 	and.w	r2, r3, #12
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	429a      	cmp	r2, r3
 80030a6:	d1eb      	bne.n	8003080 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d010      	beq.n	80030d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	4b31      	ldr	r3, [pc, #196]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d208      	bcs.n	80030d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	492b      	ldr	r1, [pc, #172]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030d6:	4b29      	ldr	r3, [pc, #164]	@ (800317c <HAL_RCC_ClockConfig+0x1ec>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d210      	bcs.n	8003106 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_RCC_ClockConfig+0x1ec>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f023 0207 	bic.w	r2, r3, #7
 80030ec:	4923      	ldr	r1, [pc, #140]	@ (800317c <HAL_RCC_ClockConfig+0x1ec>)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030f4:	4b21      	ldr	r3, [pc, #132]	@ (800317c <HAL_RCC_ClockConfig+0x1ec>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0307 	and.w	r3, r3, #7
 80030fc:	683a      	ldr	r2, [r7, #0]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e036      	b.n	8003174 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0304 	and.w	r3, r3, #4
 800310e:	2b00      	cmp	r3, #0
 8003110:	d008      	beq.n	8003124 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003112:	4b1b      	ldr	r3, [pc, #108]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	4918      	ldr	r1, [pc, #96]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003120:	4313      	orrs	r3, r2
 8003122:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d009      	beq.n	8003144 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003130:	4b13      	ldr	r3, [pc, #76]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	691b      	ldr	r3, [r3, #16]
 800313c:	00db      	lsls	r3, r3, #3
 800313e:	4910      	ldr	r1, [pc, #64]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 8003140:	4313      	orrs	r3, r2
 8003142:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003144:	f000 f824 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8003148:	4602      	mov	r2, r0
 800314a:	4b0d      	ldr	r3, [pc, #52]	@ (8003180 <HAL_RCC_ClockConfig+0x1f0>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	091b      	lsrs	r3, r3, #4
 8003150:	f003 030f 	and.w	r3, r3, #15
 8003154:	490b      	ldr	r1, [pc, #44]	@ (8003184 <HAL_RCC_ClockConfig+0x1f4>)
 8003156:	5ccb      	ldrb	r3, [r1, r3]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	fa22 f303 	lsr.w	r3, r2, r3
 8003160:	4a09      	ldr	r2, [pc, #36]	@ (8003188 <HAL_RCC_ClockConfig+0x1f8>)
 8003162:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003164:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_ClockConfig+0x1fc>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7fe ff7d 	bl	8002068 <HAL_InitTick>
 800316e:	4603      	mov	r3, r0
 8003170:	72fb      	strb	r3, [r7, #11]

  return status;
 8003172:	7afb      	ldrb	r3, [r7, #11]
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40022000 	.word	0x40022000
 8003180:	40021000 	.word	0x40021000
 8003184:	08009908 	.word	0x08009908
 8003188:	20000000 	.word	0x20000000
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	@ 0x24
 8003194:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	61fb      	str	r3, [r7, #28]
 800319a:	2300      	movs	r3, #0
 800319c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800319e:	4b3e      	ldr	r3, [pc, #248]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f003 030c 	and.w	r3, r3, #12
 80031a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0303 	and.w	r3, r3, #3
 80031b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x34>
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	2b0c      	cmp	r3, #12
 80031bc:	d121      	bne.n	8003202 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2b01      	cmp	r3, #1
 80031c2:	d11e      	bne.n	8003202 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80031c4:	4b34      	ldr	r3, [pc, #208]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0308 	and.w	r3, r3, #8
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d107      	bne.n	80031e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80031d0:	4b31      	ldr	r3, [pc, #196]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80031d6:	0a1b      	lsrs	r3, r3, #8
 80031d8:	f003 030f 	and.w	r3, r3, #15
 80031dc:	61fb      	str	r3, [r7, #28]
 80031de:	e005      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80031e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	091b      	lsrs	r3, r3, #4
 80031e6:	f003 030f 	and.w	r3, r3, #15
 80031ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80031ec:	4a2b      	ldr	r2, [pc, #172]	@ (800329c <HAL_RCC_GetSysClockFreq+0x10c>)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d10d      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003200:	e00a      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	2b04      	cmp	r3, #4
 8003206:	d102      	bne.n	800320e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003208:	4b25      	ldr	r3, [pc, #148]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800320a:	61bb      	str	r3, [r7, #24]
 800320c:	e004      	b.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	2b08      	cmp	r3, #8
 8003212:	d101      	bne.n	8003218 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003214:	4b23      	ldr	r3, [pc, #140]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003216:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	2b0c      	cmp	r3, #12
 800321c:	d134      	bne.n	8003288 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800321e:	4b1e      	ldr	r3, [pc, #120]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d003      	beq.n	8003236 <HAL_RCC_GetSysClockFreq+0xa6>
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	2b03      	cmp	r3, #3
 8003232:	d003      	beq.n	800323c <HAL_RCC_GetSysClockFreq+0xac>
 8003234:	e005      	b.n	8003242 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003236:	4b1a      	ldr	r3, [pc, #104]	@ (80032a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003238:	617b      	str	r3, [r7, #20]
      break;
 800323a:	e005      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800323c:	4b19      	ldr	r3, [pc, #100]	@ (80032a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800323e:	617b      	str	r3, [r7, #20]
      break;
 8003240:	e002      	b.n	8003248 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	617b      	str	r3, [r7, #20]
      break;
 8003246:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003248:	4b13      	ldr	r3, [pc, #76]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	091b      	lsrs	r3, r3, #4
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	3301      	adds	r3, #1
 8003254:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003260:	697a      	ldr	r2, [r7, #20]
 8003262:	fb03 f202 	mul.w	r2, r3, r2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	fbb2 f3f3 	udiv	r3, r2, r3
 800326c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800326e:	4b0a      	ldr	r3, [pc, #40]	@ (8003298 <HAL_RCC_GetSysClockFreq+0x108>)
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	0e5b      	lsrs	r3, r3, #25
 8003274:	f003 0303 	and.w	r3, r3, #3
 8003278:	3301      	adds	r3, #1
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	fbb2 f3f3 	udiv	r3, r2, r3
 8003286:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003288:	69bb      	ldr	r3, [r7, #24]
}
 800328a:	4618      	mov	r0, r3
 800328c:	3724      	adds	r7, #36	@ 0x24
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000
 800329c:	08009920 	.word	0x08009920
 80032a0:	00f42400 	.word	0x00f42400
 80032a4:	007a1200 	.word	0x007a1200

080032a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80032ac:	4b03      	ldr	r3, [pc, #12]	@ (80032bc <HAL_RCC_GetHCLKFreq+0x14>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	20000000 	.word	0x20000000

080032c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80032c4:	f7ff fff0 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032c8:	4602      	mov	r2, r0
 80032ca:	4b06      	ldr	r3, [pc, #24]	@ (80032e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	0a1b      	lsrs	r3, r3, #8
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	4904      	ldr	r1, [pc, #16]	@ (80032e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80032d6:	5ccb      	ldrb	r3, [r1, r3]
 80032d8:	f003 031f 	and.w	r3, r3, #31
 80032dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	40021000 	.word	0x40021000
 80032e8:	08009918 	.word	0x08009918

080032ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80032f0:	f7ff ffda 	bl	80032a8 <HAL_RCC_GetHCLKFreq>
 80032f4:	4602      	mov	r2, r0
 80032f6:	4b06      	ldr	r3, [pc, #24]	@ (8003310 <HAL_RCC_GetPCLK2Freq+0x24>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	0adb      	lsrs	r3, r3, #11
 80032fc:	f003 0307 	and.w	r3, r3, #7
 8003300:	4904      	ldr	r1, [pc, #16]	@ (8003314 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003302:	5ccb      	ldrb	r3, [r1, r3]
 8003304:	f003 031f 	and.w	r3, r3, #31
 8003308:	fa22 f303 	lsr.w	r3, r2, r3
}
 800330c:	4618      	mov	r0, r3
 800330e:	bd80      	pop	{r7, pc}
 8003310:	40021000 	.word	0x40021000
 8003314:	08009918 	.word	0x08009918

08003318 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003320:	2300      	movs	r3, #0
 8003322:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003324:	4b2a      	ldr	r3, [pc, #168]	@ (80033d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003328:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d003      	beq.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003330:	f7ff f9ee 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 8003334:	6178      	str	r0, [r7, #20]
 8003336:	e014      	b.n	8003362 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003338:	4b25      	ldr	r3, [pc, #148]	@ (80033d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800333c:	4a24      	ldr	r2, [pc, #144]	@ (80033d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800333e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003342:	6593      	str	r3, [r2, #88]	@ 0x58
 8003344:	4b22      	ldr	r3, [pc, #136]	@ (80033d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003346:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003348:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800334c:	60fb      	str	r3, [r7, #12]
 800334e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003350:	f7ff f9de 	bl	8002710 <HAL_PWREx_GetVoltageRange>
 8003354:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4b1e      	ldr	r3, [pc, #120]	@ (80033d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335a:	4a1d      	ldr	r2, [pc, #116]	@ (80033d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800335c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003360:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003368:	d10b      	bne.n	8003382 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2b80      	cmp	r3, #128	@ 0x80
 800336e:	d919      	bls.n	80033a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2ba0      	cmp	r3, #160	@ 0xa0
 8003374:	d902      	bls.n	800337c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003376:	2302      	movs	r3, #2
 8003378:	613b      	str	r3, [r7, #16]
 800337a:	e013      	b.n	80033a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800337c:	2301      	movs	r3, #1
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	e010      	b.n	80033a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2b80      	cmp	r3, #128	@ 0x80
 8003386:	d902      	bls.n	800338e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003388:	2303      	movs	r3, #3
 800338a:	613b      	str	r3, [r7, #16]
 800338c:	e00a      	b.n	80033a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2b80      	cmp	r3, #128	@ 0x80
 8003392:	d102      	bne.n	800339a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003394:	2302      	movs	r3, #2
 8003396:	613b      	str	r3, [r7, #16]
 8003398:	e004      	b.n	80033a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2b70      	cmp	r3, #112	@ 0x70
 800339e:	d101      	bne.n	80033a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80033a0:	2301      	movs	r3, #1
 80033a2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80033a4:	4b0b      	ldr	r3, [pc, #44]	@ (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f023 0207 	bic.w	r2, r3, #7
 80033ac:	4909      	ldr	r1, [pc, #36]	@ (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80033b4:	4b07      	ldr	r3, [pc, #28]	@ (80033d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d001      	beq.n	80033c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000
 80033d4:	40022000 	.word	0x40022000

080033d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033e0:	2300      	movs	r3, #0
 80033e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033e4:	2300      	movs	r3, #0
 80033e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d041      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033f8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80033fc:	d02a      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80033fe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003402:	d824      	bhi.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003404:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003408:	d008      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800340a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800340e:	d81e      	bhi.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003414:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003418:	d010      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800341a:	e018      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800341c:	4b86      	ldr	r3, [pc, #536]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4a85      	ldr	r2, [pc, #532]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003422:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003426:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003428:	e015      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	3304      	adds	r3, #4
 800342e:	2100      	movs	r1, #0
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fabb 	bl	80039ac <RCCEx_PLLSAI1_Config>
 8003436:	4603      	mov	r3, r0
 8003438:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800343a:	e00c      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3320      	adds	r3, #32
 8003440:	2100      	movs	r1, #0
 8003442:	4618      	mov	r0, r3
 8003444:	f000 fba6 	bl	8003b94 <RCCEx_PLLSAI2_Config>
 8003448:	4603      	mov	r3, r0
 800344a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800344c:	e003      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	74fb      	strb	r3, [r7, #19]
      break;
 8003452:	e000      	b.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003454:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003456:	7cfb      	ldrb	r3, [r7, #19]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d10b      	bne.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800345c:	4b76      	ldr	r3, [pc, #472]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003462:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800346a:	4973      	ldr	r1, [pc, #460]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003472:	e001      	b.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003474:	7cfb      	ldrb	r3, [r7, #19]
 8003476:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d041      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003488:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800348c:	d02a      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800348e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003492:	d824      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003494:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003498:	d008      	beq.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800349a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800349e:	d81e      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d00a      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034a8:	d010      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034aa:	e018      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80034ac:	4b62      	ldr	r3, [pc, #392]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	4a61      	ldr	r2, [pc, #388]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034b8:	e015      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2100      	movs	r1, #0
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 fa73 	bl	80039ac <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034ca:	e00c      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3320      	adds	r3, #32
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fb5e 	bl	8003b94 <RCCEx_PLLSAI2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80034dc:	e003      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	74fb      	strb	r3, [r7, #19]
      break;
 80034e2:	e000      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80034e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80034e6:	7cfb      	ldrb	r3, [r7, #19]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d10b      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80034ec:	4b52      	ldr	r3, [pc, #328]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034f2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80034fa:	494f      	ldr	r1, [pc, #316]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003502:	e001      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	7cfb      	ldrb	r3, [r7, #19]
 8003506:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003510:	2b00      	cmp	r3, #0
 8003512:	f000 80a0 	beq.w	8003656 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003516:	2300      	movs	r3, #0
 8003518:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800351a:	4b47      	ldr	r3, [pc, #284]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800351e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800352a:	2300      	movs	r3, #0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00d      	beq.n	800354c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003530:	4b41      	ldr	r3, [pc, #260]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003532:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003534:	4a40      	ldr	r2, [pc, #256]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800353a:	6593      	str	r3, [r2, #88]	@ 0x58
 800353c:	4b3e      	ldr	r3, [pc, #248]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003548:	2301      	movs	r3, #1
 800354a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800354c:	4b3b      	ldr	r3, [pc, #236]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a3a      	ldr	r2, [pc, #232]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003552:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003556:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003558:	f7fe fdd6 	bl	8002108 <HAL_GetTick>
 800355c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800355e:	e009      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003560:	f7fe fdd2 	bl	8002108 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d902      	bls.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	74fb      	strb	r3, [r7, #19]
        break;
 8003572:	e005      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003574:	4b31      	ldr	r3, [pc, #196]	@ (800363c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800357c:	2b00      	cmp	r3, #0
 800357e:	d0ef      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003580:	7cfb      	ldrb	r3, [r7, #19]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d15c      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003586:	4b2c      	ldr	r3, [pc, #176]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800358c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003590:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d01f      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d019      	beq.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80035a4:	4b24      	ldr	r3, [pc, #144]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80035ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80035b0:	4b21      	ldr	r3, [pc, #132]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b6:	4a20      	ldr	r2, [pc, #128]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80035c0:	4b1d      	ldr	r3, [pc, #116]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80035d0:	4a19      	ldr	r2, [pc, #100]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d016      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e2:	f7fe fd91 	bl	8002108 <HAL_GetTick>
 80035e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035e8:	e00b      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ea:	f7fe fd8d 	bl	8002108 <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d902      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	74fb      	strb	r3, [r7, #19]
            break;
 8003600:	e006      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003602:	4b0d      	ldr	r3, [pc, #52]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0ec      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003610:	7cfb      	ldrb	r3, [r7, #19]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d10c      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003616:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800361c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003626:	4904      	ldr	r1, [pc, #16]	@ (8003638 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800362e:	e009      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003630:	7cfb      	ldrb	r3, [r7, #19]
 8003632:	74bb      	strb	r3, [r7, #18]
 8003634:	e006      	b.n	8003644 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000
 800363c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003640:	7cfb      	ldrb	r3, [r7, #19]
 8003642:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003644:	7c7b      	ldrb	r3, [r7, #17]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d105      	bne.n	8003656 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800364a:	4b9e      	ldr	r3, [pc, #632]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364e:	4a9d      	ldr	r2, [pc, #628]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003650:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003654:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00a      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003662:	4b98      	ldr	r3, [pc, #608]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003664:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003668:	f023 0203 	bic.w	r2, r3, #3
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003670:	4994      	ldr	r1, [pc, #592]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003672:	4313      	orrs	r3, r2
 8003674:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00a      	beq.n	800369a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003684:	4b8f      	ldr	r3, [pc, #572]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003686:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800368a:	f023 020c 	bic.w	r2, r3, #12
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003692:	498c      	ldr	r1, [pc, #560]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003694:	4313      	orrs	r3, r2
 8003696:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80036a6:	4b87      	ldr	r3, [pc, #540]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	4983      	ldr	r1, [pc, #524]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0308 	and.w	r3, r3, #8
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80036c8:	4b7e      	ldr	r3, [pc, #504]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	497b      	ldr	r1, [pc, #492]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0310 	and.w	r3, r3, #16
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d00a      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80036ea:	4b76      	ldr	r3, [pc, #472]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036f8:	4972      	ldr	r1, [pc, #456]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0320 	and.w	r3, r3, #32
 8003708:	2b00      	cmp	r3, #0
 800370a:	d00a      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800370c:	4b6d      	ldr	r3, [pc, #436]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003712:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800371a:	496a      	ldr	r1, [pc, #424]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800371c:	4313      	orrs	r3, r2
 800371e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800372a:	2b00      	cmp	r3, #0
 800372c:	d00a      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800372e:	4b65      	ldr	r3, [pc, #404]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003730:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003734:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	4961      	ldr	r1, [pc, #388]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800373e:	4313      	orrs	r3, r2
 8003740:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800374c:	2b00      	cmp	r3, #0
 800374e:	d00a      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003750:	4b5c      	ldr	r3, [pc, #368]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003756:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800375e:	4959      	ldr	r1, [pc, #356]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003760:	4313      	orrs	r3, r2
 8003762:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003772:	4b54      	ldr	r3, [pc, #336]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003774:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003778:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003780:	4950      	ldr	r1, [pc, #320]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003782:	4313      	orrs	r3, r2
 8003784:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003794:	4b4b      	ldr	r3, [pc, #300]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003796:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800379a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a2:	4948      	ldr	r1, [pc, #288]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037a4:	4313      	orrs	r3, r2
 80037a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80037b6:	4b43      	ldr	r3, [pc, #268]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c4:	493f      	ldr	r1, [pc, #252]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037c6:	4313      	orrs	r3, r2
 80037c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d028      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037d8:	4b3a      	ldr	r3, [pc, #232]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037de:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037e6:	4937      	ldr	r1, [pc, #220]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037e8:	4313      	orrs	r3, r2
 80037ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80037f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037f6:	d106      	bne.n	8003806 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037f8:	4b32      	ldr	r3, [pc, #200]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	4a31      	ldr	r2, [pc, #196]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003802:	60d3      	str	r3, [r2, #12]
 8003804:	e011      	b.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800380a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800380e:	d10c      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	3304      	adds	r3, #4
 8003814:	2101      	movs	r1, #1
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f8c8 	bl	80039ac <RCCEx_PLLSAI1_Config>
 800381c:	4603      	mov	r3, r0
 800381e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003820:	7cfb      	ldrb	r3, [r7, #19]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003826:	7cfb      	ldrb	r3, [r7, #19]
 8003828:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003832:	2b00      	cmp	r3, #0
 8003834:	d028      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003836:	4b23      	ldr	r3, [pc, #140]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800383c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003844:	491f      	ldr	r1, [pc, #124]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003846:	4313      	orrs	r3, r2
 8003848:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003850:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003854:	d106      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003856:	4b1b      	ldr	r3, [pc, #108]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003858:	68db      	ldr	r3, [r3, #12]
 800385a:	4a1a      	ldr	r2, [pc, #104]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800385c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003860:	60d3      	str	r3, [r2, #12]
 8003862:	e011      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003868:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800386c:	d10c      	bne.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	3304      	adds	r3, #4
 8003872:	2101      	movs	r1, #1
 8003874:	4618      	mov	r0, r3
 8003876:	f000 f899 	bl	80039ac <RCCEx_PLLSAI1_Config>
 800387a:	4603      	mov	r3, r0
 800387c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800387e:	7cfb      	ldrb	r3, [r7, #19]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d001      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d02b      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003894:	4b0b      	ldr	r3, [pc, #44]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038a2:	4908      	ldr	r1, [pc, #32]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80038b2:	d109      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80038b4:	4b03      	ldr	r3, [pc, #12]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	4a02      	ldr	r2, [pc, #8]	@ (80038c4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80038ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80038be:	60d3      	str	r3, [r2, #12]
 80038c0:	e014      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x514>
 80038c2:	bf00      	nop
 80038c4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038cc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3304      	adds	r3, #4
 80038d6:	2101      	movs	r1, #1
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 f867 	bl	80039ac <RCCEx_PLLSAI1_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d02f      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80038f8:	4b2b      	ldr	r3, [pc, #172]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003906:	4928      	ldr	r1, [pc, #160]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003912:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003916:	d10d      	bne.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	3304      	adds	r3, #4
 800391c:	2102      	movs	r1, #2
 800391e:	4618      	mov	r0, r3
 8003920:	f000 f844 	bl	80039ac <RCCEx_PLLSAI1_Config>
 8003924:	4603      	mov	r3, r0
 8003926:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003928:	7cfb      	ldrb	r3, [r7, #19]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d014      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800392e:	7cfb      	ldrb	r3, [r7, #19]
 8003930:	74bb      	strb	r3, [r7, #18]
 8003932:	e011      	b.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003938:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800393c:	d10c      	bne.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	3320      	adds	r3, #32
 8003942:	2102      	movs	r1, #2
 8003944:	4618      	mov	r0, r3
 8003946:	f000 f925 	bl	8003b94 <RCCEx_PLLSAI2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800394e:	7cfb      	ldrb	r3, [r7, #19]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003954:	7cfb      	ldrb	r3, [r7, #19]
 8003956:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003960:	2b00      	cmp	r3, #0
 8003962:	d00a      	beq.n	800397a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003964:	4b10      	ldr	r3, [pc, #64]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003966:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800396a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003972:	490d      	ldr	r1, [pc, #52]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003974:	4313      	orrs	r3, r2
 8003976:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00b      	beq.n	800399e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003986:	4b08      	ldr	r3, [pc, #32]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003988:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800398c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003996:	4904      	ldr	r1, [pc, #16]	@ (80039a8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003998:	4313      	orrs	r3, r2
 800399a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800399e:	7cbb      	ldrb	r3, [r7, #18]
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3718      	adds	r7, #24
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000

080039ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
 80039b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039b6:	2300      	movs	r3, #0
 80039b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ba:	4b75      	ldr	r3, [pc, #468]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f003 0303 	and.w	r3, r3, #3
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d018      	beq.n	80039f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039c6:	4b72      	ldr	r3, [pc, #456]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	f003 0203 	and.w	r2, r3, #3
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d10d      	bne.n	80039f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
       ||
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d009      	beq.n	80039f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80039de:	4b6c      	ldr	r3, [pc, #432]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 80039e0:	68db      	ldr	r3, [r3, #12]
 80039e2:	091b      	lsrs	r3, r3, #4
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	1c5a      	adds	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
       ||
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d047      	beq.n	8003a82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	73fb      	strb	r3, [r7, #15]
 80039f6:	e044      	b.n	8003a82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d018      	beq.n	8003a32 <RCCEx_PLLSAI1_Config+0x86>
 8003a00:	2b03      	cmp	r3, #3
 8003a02:	d825      	bhi.n	8003a50 <RCCEx_PLLSAI1_Config+0xa4>
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d002      	beq.n	8003a0e <RCCEx_PLLSAI1_Config+0x62>
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d009      	beq.n	8003a20 <RCCEx_PLLSAI1_Config+0x74>
 8003a0c:	e020      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a0e:	4b60      	ldr	r3, [pc, #384]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0302 	and.w	r3, r3, #2
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d11d      	bne.n	8003a56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a1e:	e01a      	b.n	8003a56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a20:	4b5b      	ldr	r3, [pc, #364]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d116      	bne.n	8003a5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a30:	e013      	b.n	8003a5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a32:	4b57      	ldr	r3, [pc, #348]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a3e:	4b54      	ldr	r3, [pc, #336]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d109      	bne.n	8003a5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a4e:	e006      	b.n	8003a5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	73fb      	strb	r3, [r7, #15]
      break;
 8003a54:	e004      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a56:	bf00      	nop
 8003a58:	e002      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a5a:	bf00      	nop
 8003a5c:	e000      	b.n	8003a60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003a5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a60:	7bfb      	ldrb	r3, [r7, #15]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10d      	bne.n	8003a82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003a66:	4b4a      	ldr	r3, [pc, #296]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6819      	ldr	r1, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	3b01      	subs	r3, #1
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	430b      	orrs	r3, r1
 8003a7c:	4944      	ldr	r1, [pc, #272]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d17d      	bne.n	8003b84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a88:	4b41      	ldr	r3, [pc, #260]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a40      	ldr	r2, [pc, #256]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003a8e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003a92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a94:	f7fe fb38 	bl	8002108 <HAL_GetTick>
 8003a98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a9a:	e009      	b.n	8003ab0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a9c:	f7fe fb34 	bl	8002108 <HAL_GetTick>
 8003aa0:	4602      	mov	r2, r0
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	1ad3      	subs	r3, r2, r3
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d902      	bls.n	8003ab0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	73fb      	strb	r3, [r7, #15]
        break;
 8003aae:	e005      	b.n	8003abc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003ab0:	4b37      	ldr	r3, [pc, #220]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d1ef      	bne.n	8003a9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d160      	bne.n	8003b84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d111      	bne.n	8003aec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ac8:	4b31      	ldr	r3, [pc, #196]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003aca:	691b      	ldr	r3, [r3, #16]
 8003acc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	6892      	ldr	r2, [r2, #8]
 8003ad8:	0211      	lsls	r1, r2, #8
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	68d2      	ldr	r2, [r2, #12]
 8003ade:	0912      	lsrs	r2, r2, #4
 8003ae0:	0452      	lsls	r2, r2, #17
 8003ae2:	430a      	orrs	r2, r1
 8003ae4:	492a      	ldr	r1, [pc, #168]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	610b      	str	r3, [r1, #16]
 8003aea:	e027      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d112      	bne.n	8003b18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003af2:	4b27      	ldr	r3, [pc, #156]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003afa:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6892      	ldr	r2, [r2, #8]
 8003b02:	0211      	lsls	r1, r2, #8
 8003b04:	687a      	ldr	r2, [r7, #4]
 8003b06:	6912      	ldr	r2, [r2, #16]
 8003b08:	0852      	lsrs	r2, r2, #1
 8003b0a:	3a01      	subs	r2, #1
 8003b0c:	0552      	lsls	r2, r2, #21
 8003b0e:	430a      	orrs	r2, r1
 8003b10:	491f      	ldr	r1, [pc, #124]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	610b      	str	r3, [r1, #16]
 8003b16:	e011      	b.n	8003b3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b18:	4b1d      	ldr	r3, [pc, #116]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003b20:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	6892      	ldr	r2, [r2, #8]
 8003b28:	0211      	lsls	r1, r2, #8
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6952      	ldr	r2, [r2, #20]
 8003b2e:	0852      	lsrs	r2, r2, #1
 8003b30:	3a01      	subs	r2, #1
 8003b32:	0652      	lsls	r2, r2, #25
 8003b34:	430a      	orrs	r2, r1
 8003b36:	4916      	ldr	r1, [pc, #88]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b3c:	4b14      	ldr	r3, [pc, #80]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a13      	ldr	r2, [pc, #76]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b42:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b48:	f7fe fade 	bl	8002108 <HAL_GetTick>
 8003b4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b4e:	e009      	b.n	8003b64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b50:	f7fe fada 	bl	8002108 <HAL_GetTick>
 8003b54:	4602      	mov	r2, r0
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d902      	bls.n	8003b64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	73fb      	strb	r3, [r7, #15]
          break;
 8003b62:	e005      	b.n	8003b70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b64:	4b0a      	ldr	r3, [pc, #40]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0ef      	beq.n	8003b50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8003b70:	7bfb      	ldrb	r3, [r7, #15]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d106      	bne.n	8003b84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b76:	4b06      	ldr	r3, [pc, #24]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b78:	691a      	ldr	r2, [r3, #16]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	4904      	ldr	r1, [pc, #16]	@ (8003b90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b84:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3710      	adds	r7, #16
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40021000 	.word	0x40021000

08003b94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003ba2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	f003 0303 	and.w	r3, r3, #3
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d018      	beq.n	8003be0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bae:	4b67      	ldr	r3, [pc, #412]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	f003 0203 	and.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d10d      	bne.n	8003bda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
       ||
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003bc6:	4b61      	ldr	r3, [pc, #388]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	091b      	lsrs	r3, r3, #4
 8003bcc:	f003 0307 	and.w	r3, r3, #7
 8003bd0:	1c5a      	adds	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	685b      	ldr	r3, [r3, #4]
       ||
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d047      	beq.n	8003c6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	73fb      	strb	r3, [r7, #15]
 8003bde:	e044      	b.n	8003c6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	2b03      	cmp	r3, #3
 8003be6:	d018      	beq.n	8003c1a <RCCEx_PLLSAI2_Config+0x86>
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d825      	bhi.n	8003c38 <RCCEx_PLLSAI2_Config+0xa4>
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d002      	beq.n	8003bf6 <RCCEx_PLLSAI2_Config+0x62>
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d009      	beq.n	8003c08 <RCCEx_PLLSAI2_Config+0x74>
 8003bf4:	e020      	b.n	8003c38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003bf6:	4b55      	ldr	r3, [pc, #340]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d11d      	bne.n	8003c3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c06:	e01a      	b.n	8003c3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003c08:	4b50      	ldr	r3, [pc, #320]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d116      	bne.n	8003c42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c18:	e013      	b.n	8003c42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c1a:	4b4c      	ldr	r3, [pc, #304]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d10f      	bne.n	8003c46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c26:	4b49      	ldr	r3, [pc, #292]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d109      	bne.n	8003c46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c36:	e006      	b.n	8003c46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3c:	e004      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c3e:	bf00      	nop
 8003c40:	e002      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c42:	bf00      	nop
 8003c44:	e000      	b.n	8003c48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003c46:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c48:	7bfb      	ldrb	r3, [r7, #15]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d10d      	bne.n	8003c6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6819      	ldr	r1, [r3, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	430b      	orrs	r3, r1
 8003c64:	4939      	ldr	r1, [pc, #228]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003c6a:	7bfb      	ldrb	r3, [r7, #15]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d167      	bne.n	8003d40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c70:	4b36      	ldr	r3, [pc, #216]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a35      	ldr	r2, [pc, #212]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c7c:	f7fe fa44 	bl	8002108 <HAL_GetTick>
 8003c80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c82:	e009      	b.n	8003c98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c84:	f7fe fa40 	bl	8002108 <HAL_GetTick>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	1ad3      	subs	r3, r2, r3
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d902      	bls.n	8003c98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003c92:	2303      	movs	r3, #3
 8003c94:	73fb      	strb	r3, [r7, #15]
        break;
 8003c96:	e005      	b.n	8003ca4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c98:	4b2c      	ldr	r3, [pc, #176]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1ef      	bne.n	8003c84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d14a      	bne.n	8003d40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d111      	bne.n	8003cd4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cb0:	4b26      	ldr	r3, [pc, #152]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	6892      	ldr	r2, [r2, #8]
 8003cc0:	0211      	lsls	r1, r2, #8
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68d2      	ldr	r2, [r2, #12]
 8003cc6:	0912      	lsrs	r2, r2, #4
 8003cc8:	0452      	lsls	r2, r2, #17
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	491f      	ldr	r1, [pc, #124]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	614b      	str	r3, [r1, #20]
 8003cd2:	e011      	b.n	8003cf8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cd4:	4b1d      	ldr	r3, [pc, #116]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003cdc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	6892      	ldr	r2, [r2, #8]
 8003ce4:	0211      	lsls	r1, r2, #8
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6912      	ldr	r2, [r2, #16]
 8003cea:	0852      	lsrs	r2, r2, #1
 8003cec:	3a01      	subs	r2, #1
 8003cee:	0652      	lsls	r2, r2, #25
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	4916      	ldr	r1, [pc, #88]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003cf8:	4b14      	ldr	r3, [pc, #80]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a13      	ldr	r2, [pc, #76]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d04:	f7fe fa00 	bl	8002108 <HAL_GetTick>
 8003d08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d0a:	e009      	b.n	8003d20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d0c:	f7fe f9fc 	bl	8002108 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b02      	cmp	r3, #2
 8003d18:	d902      	bls.n	8003d20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	73fb      	strb	r3, [r7, #15]
          break;
 8003d1e:	e005      	b.n	8003d2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d20:	4b0a      	ldr	r3, [pc, #40]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0ef      	beq.n	8003d0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003d2c:	7bfb      	ldrb	r3, [r7, #15]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d32:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d34:	695a      	ldr	r2, [r3, #20]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	4904      	ldr	r1, [pc, #16]	@ (8003d4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3710      	adds	r7, #16
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000

08003d50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d079      	beq.n	8003e56 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d106      	bne.n	8003d7c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003d76:	6878      	ldr	r0, [r7, #4]
 8003d78:	f7fd fe14 	bl	80019a4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2202      	movs	r2, #2
 8003d80:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b10      	cmp	r3, #16
 8003d90:	d058      	beq.n	8003e44 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	22ca      	movs	r2, #202	@ 0xca
 8003d98:	625a      	str	r2, [r3, #36]	@ 0x24
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2253      	movs	r2, #83	@ 0x53
 8003da0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f000 fa00 	bl	80041a8 <RTC_EnterInitMode>
 8003da8:	4603      	mov	r3, r0
 8003daa:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d127      	bne.n	8003e02 <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8003dc0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003dc4:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6899      	ldr	r1, [r3, #8]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	431a      	orrs	r2, r3
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	430a      	orrs	r2, r1
 8003de2:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	68d2      	ldr	r2, [r2, #12]
 8003dec:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	6919      	ldr	r1, [r3, #16]
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	041a      	lsls	r2, r3, #16
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fa04 	bl	8004210 <RTC_ExitInitMode>
 8003e08:	4603      	mov	r3, r0
 8003e0a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003e0c:	7bfb      	ldrb	r3, [r7, #15]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d113      	bne.n	8003e3a <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f022 0203 	bic.w	r2, r2, #3
 8003e20:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	431a      	orrs	r2, r3
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	22ff      	movs	r2, #255	@ 0xff
 8003e40:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e42:	e001      	b.n	8003e48 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d103      	bne.n	8003e56 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8003e56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3710      	adds	r7, #16
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003e60:	b590      	push	{r4, r7, lr}
 8003e62:	b087      	sub	sp, #28
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_RTC_SetTime+0x1a>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e08b      	b.n	8003f92 <HAL_RTC_SetTime+0x132>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2202      	movs	r2, #2
 8003e86:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	22ca      	movs	r2, #202	@ 0xca
 8003e90:	625a      	str	r2, [r3, #36]	@ 0x24
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2253      	movs	r2, #83	@ 0x53
 8003e98:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f984 	bl	80041a8 <RTC_EnterInitMode>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d163      	bne.n	8003f72 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d126      	bne.n	8003efe <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d102      	bne.n	8003ec4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f000 f9df 	bl	800428c <RTC_ByteToBcd2>
 8003ece:	4603      	mov	r3, r0
 8003ed0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	785b      	ldrb	r3, [r3, #1]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f000 f9d8 	bl	800428c <RTC_ByteToBcd2>
 8003edc:	4603      	mov	r3, r0
 8003ede:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ee0:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	789b      	ldrb	r3, [r3, #2]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f000 f9d0 	bl	800428c <RTC_ByteToBcd2>
 8003eec:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003eee:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	78db      	ldrb	r3, [r3, #3]
 8003ef6:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	617b      	str	r3, [r7, #20]
 8003efc:	e018      	b.n	8003f30 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d102      	bne.n	8003f12 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	2200      	movs	r2, #0
 8003f10:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	785b      	ldrb	r3, [r3, #1]
 8003f1c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f1e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003f20:	68ba      	ldr	r2, [r7, #8]
 8003f22:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003f24:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	78db      	ldrb	r3, [r3, #3]
 8003f2a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003f3a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003f3e:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	689a      	ldr	r2, [r3, #8]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003f4e:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	6899      	ldr	r1, [r3, #8]
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	68da      	ldr	r2, [r3, #12]
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f000 f951 	bl	8004210 <RTC_ExitInitMode>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	22ff      	movs	r2, #255	@ 0xff
 8003f78:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8003f7a:	7cfb      	ldrb	r3, [r7, #19]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003f90:	7cfb      	ldrb	r3, [r7, #19]
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	371c      	adds	r7, #28
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd90      	pop	{r4, r7, pc}

08003f9a <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b086      	sub	sp, #24
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	60f8      	str	r0, [r7, #12]
 8003fa2:	60b9      	str	r1, [r7, #8]
 8003fa4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003fc8:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	0c1b      	lsrs	r3, r3, #16
 8003fd2:	b2db      	uxtb	r3, r3
 8003fd4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003fd8:	b2da      	uxtb	r2, r3
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003fde:	697b      	ldr	r3, [r7, #20]
 8003fe0:	0a1b      	lsrs	r3, r3, #8
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003fe8:	b2da      	uxtb	r2, r3
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ff6:	b2da      	uxtb	r2, r3
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	0d9b      	lsrs	r3, r3, #22
 8004000:	b2db      	uxtb	r3, r3
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	b2da      	uxtb	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d11a      	bne.n	8004048 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	4618      	mov	r0, r3
 8004018:	f000 f958 	bl	80042cc <RTC_Bcd2ToByte>
 800401c:	4603      	mov	r3, r0
 800401e:	461a      	mov	r2, r3
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	785b      	ldrb	r3, [r3, #1]
 8004028:	4618      	mov	r0, r3
 800402a:	f000 f94f 	bl	80042cc <RTC_Bcd2ToByte>
 800402e:	4603      	mov	r3, r0
 8004030:	461a      	mov	r2, r3
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	789b      	ldrb	r3, [r3, #2]
 800403a:	4618      	mov	r0, r3
 800403c:	f000 f946 	bl	80042cc <RTC_Bcd2ToByte>
 8004040:	4603      	mov	r3, r0
 8004042:	461a      	mov	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3718      	adds	r7, #24
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}

08004052 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004052:	b590      	push	{r4, r7, lr}
 8004054:	b087      	sub	sp, #28
 8004056:	af00      	add	r7, sp, #0
 8004058:	60f8      	str	r0, [r7, #12]
 800405a:	60b9      	str	r1, [r7, #8]
 800405c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d101      	bne.n	800406c <HAL_RTC_SetDate+0x1a>
 8004068:	2302      	movs	r3, #2
 800406a:	e075      	b.n	8004158 <HAL_RTC_SetDate+0x106>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2202      	movs	r2, #2
 8004078:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10e      	bne.n	80040a0 <HAL_RTC_SetDate+0x4e>
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	785b      	ldrb	r3, [r3, #1]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d008      	beq.n	80040a0 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	f023 0310 	bic.w	r3, r3, #16
 8004096:	b2db      	uxtb	r3, r3
 8004098:	330a      	adds	r3, #10
 800409a:	b2da      	uxtb	r2, r3
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d11c      	bne.n	80040e0 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	78db      	ldrb	r3, [r3, #3]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 f8ee 	bl	800428c <RTC_ByteToBcd2>
 80040b0:	4603      	mov	r3, r0
 80040b2:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	785b      	ldrb	r3, [r3, #1]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f000 f8e7 	bl	800428c <RTC_ByteToBcd2>
 80040be:	4603      	mov	r3, r0
 80040c0:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80040c2:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	789b      	ldrb	r3, [r3, #2]
 80040c8:	4618      	mov	r0, r3
 80040ca:	f000 f8df 	bl	800428c <RTC_ByteToBcd2>
 80040ce:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80040d0:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]
 80040de:	e00e      	b.n	80040fe <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	78db      	ldrb	r3, [r3, #3]
 80040e4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80040e6:	68bb      	ldr	r3, [r7, #8]
 80040e8:	785b      	ldrb	r3, [r3, #1]
 80040ea:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80040ec:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80040f2:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80040fa:	4313      	orrs	r3, r2
 80040fc:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	22ca      	movs	r2, #202	@ 0xca
 8004104:	625a      	str	r2, [r3, #36]	@ 0x24
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2253      	movs	r2, #83	@ 0x53
 800410c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800410e:	68f8      	ldr	r0, [r7, #12]
 8004110:	f000 f84a 	bl	80041a8 <RTC_EnterInitMode>
 8004114:	4603      	mov	r3, r0
 8004116:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8004118:	7cfb      	ldrb	r3, [r7, #19]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d10c      	bne.n	8004138 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004128:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800412c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800412e:	68f8      	ldr	r0, [r7, #12]
 8004130:	f000 f86e 	bl	8004210 <RTC_ExitInitMode>
 8004134:	4603      	mov	r3, r0
 8004136:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	22ff      	movs	r2, #255	@ 0xff
 800413e:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8004140:	7cfb      	ldrb	r3, [r7, #19]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d103      	bne.n	800414e <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8004156:	7cfb      	ldrb	r3, [r7, #19]
}
 8004158:	4618      	mov	r0, r3
 800415a:	371c      	adds	r7, #28
 800415c:	46bd      	mov	sp, r7
 800415e:	bd90      	pop	{r4, r7, pc}

08004160 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4a0d      	ldr	r2, [pc, #52]	@ (80041a4 <HAL_RTC_WaitForSynchro+0x44>)
 800416e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8004170:	f7fd ffca 	bl	8002108 <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8004176:	e009      	b.n	800418c <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8004178:	f7fd ffc6 	bl	8002108 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004186:	d901      	bls.n	800418c <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e007      	b.n	800419c <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	f003 0320 	and.w	r3, r3, #32
 8004196:	2b00      	cmp	r3, #0
 8004198:	d0ee      	beq.n	8004178 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}
 80041a4:	0003ff5f 	.word	0x0003ff5f

080041a8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80041b0:	2300      	movs	r3, #0
 80041b2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d120      	bne.n	8004204 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f04f 32ff 	mov.w	r2, #4294967295
 80041ca:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80041cc:	f7fd ff9c 	bl	8002108 <HAL_GetTick>
 80041d0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041d2:	e00d      	b.n	80041f0 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80041d4:	f7fd ff98 	bl	8002108 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80041e2:	d905      	bls.n	80041f0 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2203      	movs	r2, #3
 80041ec:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d102      	bne.n	8004204 <RTC_EnterInitMode+0x5c>
 80041fe:	7bfb      	ldrb	r3, [r7, #15]
 8004200:	2b03      	cmp	r3, #3
 8004202:	d1e7      	bne.n	80041d4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
	...

08004210 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004218:	2300      	movs	r3, #0
 800421a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800421c:	4b1a      	ldr	r3, [pc, #104]	@ (8004288 <RTC_ExitInitMode+0x78>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a19      	ldr	r2, [pc, #100]	@ (8004288 <RTC_ExitInitMode+0x78>)
 8004222:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004226:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8004228:	4b17      	ldr	r3, [pc, #92]	@ (8004288 <RTC_ExitInitMode+0x78>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f003 0320 	and.w	r3, r3, #32
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10c      	bne.n	800424e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	f7ff ff93 	bl	8004160 <HAL_RTC_WaitForSynchro>
 800423a:	4603      	mov	r3, r0
 800423c:	2b00      	cmp	r3, #0
 800423e:	d01e      	beq.n	800427e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2203      	movs	r2, #3
 8004244:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8004248:	2303      	movs	r3, #3
 800424a:	73fb      	strb	r3, [r7, #15]
 800424c:	e017      	b.n	800427e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800424e:	4b0e      	ldr	r3, [pc, #56]	@ (8004288 <RTC_ExitInitMode+0x78>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	4a0d      	ldr	r2, [pc, #52]	@ (8004288 <RTC_ExitInitMode+0x78>)
 8004254:	f023 0320 	bic.w	r3, r3, #32
 8004258:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff ff80 	bl	8004160 <HAL_RTC_WaitForSynchro>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d005      	beq.n	8004272 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2203      	movs	r2, #3
 800426a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8004272:	4b05      	ldr	r3, [pc, #20]	@ (8004288 <RTC_ExitInitMode+0x78>)
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	4a04      	ldr	r2, [pc, #16]	@ (8004288 <RTC_ExitInitMode+0x78>)
 8004278:	f043 0320 	orr.w	r3, r3, #32
 800427c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800427e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40002800 	.word	0x40002800

0800428c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004296:	2300      	movs	r3, #0
 8004298:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800429a:	79fb      	ldrb	r3, [r7, #7]
 800429c:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800429e:	e005      	b.n	80042ac <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80042a6:	7afb      	ldrb	r3, [r7, #11]
 80042a8:	3b0a      	subs	r3, #10
 80042aa:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80042ac:	7afb      	ldrb	r3, [r7, #11]
 80042ae:	2b09      	cmp	r3, #9
 80042b0:	d8f6      	bhi.n	80042a0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	7afb      	ldrb	r3, [r7, #11]
 80042bc:	4313      	orrs	r3, r2
 80042be:	b2db      	uxtb	r3, r3
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	4603      	mov	r3, r0
 80042d4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80042d6:	79fb      	ldrb	r3, [r7, #7]
 80042d8:	091b      	lsrs	r3, r3, #4
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	461a      	mov	r2, r3
 80042de:	0092      	lsls	r2, r2, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	005b      	lsls	r3, r3, #1
 80042e4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80042e6:	79fb      	ldrb	r3, [r7, #7]
 80042e8:	f003 030f 	and.w	r3, r3, #15
 80042ec:	b2da      	uxtb	r2, r3
 80042ee:	7bfb      	ldrb	r3, [r7, #15]
 80042f0:	4413      	add	r3, r2
 80042f2:	b2db      	uxtb	r3, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b084      	sub	sp, #16
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d101      	bne.n	8004312 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	e095      	b.n	800443e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004322:	d009      	beq.n	8004338 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	61da      	str	r2, [r3, #28]
 800432a:	e005      	b.n	8004338 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b00      	cmp	r3, #0
 8004348:	d106      	bne.n	8004358 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd fb58 	bl	8001a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800436e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004378:	d902      	bls.n	8004380 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800437a:	2300      	movs	r3, #0
 800437c:	60fb      	str	r3, [r7, #12]
 800437e:	e002      	b.n	8004386 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004384:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800438e:	d007      	beq.n	80043a0 <HAL_SPI_Init+0xa0>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004398:	d002      	beq.n	80043a0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80043b0:	431a      	orrs	r2, r3
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	f003 0302 	and.w	r3, r3, #2
 80043ba:	431a      	orrs	r2, r3
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	431a      	orrs	r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043ce:	431a      	orrs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	69db      	ldr	r3, [r3, #28]
 80043d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80043d8:	431a      	orrs	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6a1b      	ldr	r3, [r3, #32]
 80043de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043e2:	ea42 0103 	orr.w	r1, r2, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	430a      	orrs	r2, r1
 80043f4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	0c1b      	lsrs	r3, r3, #16
 80043fc:	f003 0204 	and.w	r2, r3, #4
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004404:	f003 0310 	and.w	r3, r3, #16
 8004408:	431a      	orrs	r2, r3
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800440e:	f003 0308 	and.w	r3, r3, #8
 8004412:	431a      	orrs	r2, r3
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800441c:	ea42 0103 	orr.w	r1, r2, r3
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2200      	movs	r2, #0
 8004432:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b088      	sub	sp, #32
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	603b      	str	r3, [r7, #0]
 8004452:	4613      	mov	r3, r2
 8004454:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004456:	f7fd fe57 	bl	8002108 <HAL_GetTick>
 800445a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800445c:	88fb      	ldrh	r3, [r7, #6]
 800445e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	d001      	beq.n	8004470 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800446c:	2302      	movs	r3, #2
 800446e:	e15c      	b.n	800472a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <HAL_SPI_Transmit+0x36>
 8004476:	88fb      	ldrh	r3, [r7, #6]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d101      	bne.n	8004480 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e154      	b.n	800472a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004486:	2b01      	cmp	r3, #1
 8004488:	d101      	bne.n	800448e <HAL_SPI_Transmit+0x48>
 800448a:	2302      	movs	r3, #2
 800448c:	e14d      	b.n	800472a <HAL_SPI_Transmit+0x2e4>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2203      	movs	r2, #3
 800449a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	88fa      	ldrh	r2, [r7, #6]
 80044ae:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	88fa      	ldrh	r2, [r7, #6]
 80044b4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80044e0:	d10f      	bne.n	8004502 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004500:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800450c:	2b40      	cmp	r3, #64	@ 0x40
 800450e:	d007      	beq.n	8004520 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800451e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004528:	d952      	bls.n	80045d0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d002      	beq.n	8004538 <HAL_SPI_Transmit+0xf2>
 8004532:	8b7b      	ldrh	r3, [r7, #26]
 8004534:	2b01      	cmp	r3, #1
 8004536:	d145      	bne.n	80045c4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800453c:	881a      	ldrh	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004548:	1c9a      	adds	r2, r3, #2
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004552:	b29b      	uxth	r3, r3
 8004554:	3b01      	subs	r3, #1
 8004556:	b29a      	uxth	r2, r3
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800455c:	e032      	b.n	80045c4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b02      	cmp	r3, #2
 800456a:	d112      	bne.n	8004592 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004570:	881a      	ldrh	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800457c:	1c9a      	adds	r2, r3, #2
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004586:	b29b      	uxth	r3, r3
 8004588:	3b01      	subs	r3, #1
 800458a:	b29a      	uxth	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004590:	e018      	b.n	80045c4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004592:	f7fd fdb9 	bl	8002108 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	683a      	ldr	r2, [r7, #0]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d803      	bhi.n	80045aa <HAL_SPI_Transmit+0x164>
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a8:	d102      	bne.n	80045b0 <HAL_SPI_Transmit+0x16a>
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e0b2      	b.n	800472a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d1c7      	bne.n	800455e <HAL_SPI_Transmit+0x118>
 80045ce:	e083      	b.n	80046d8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	685b      	ldr	r3, [r3, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d002      	beq.n	80045de <HAL_SPI_Transmit+0x198>
 80045d8:	8b7b      	ldrh	r3, [r7, #26]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d177      	bne.n	80046ce <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80045e2:	b29b      	uxth	r3, r3
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d912      	bls.n	800460e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045ec:	881a      	ldrh	r2, [r3, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045f8:	1c9a      	adds	r2, r3, #2
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004602:	b29b      	uxth	r3, r3
 8004604:	3b02      	subs	r3, #2
 8004606:	b29a      	uxth	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800460c:	e05f      	b.n	80046ce <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	330c      	adds	r3, #12
 8004618:	7812      	ldrb	r2, [r2, #0]
 800461a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004620:	1c5a      	adds	r2, r3, #1
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800462a:	b29b      	uxth	r3, r3
 800462c:	3b01      	subs	r3, #1
 800462e:	b29a      	uxth	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004634:	e04b      	b.n	80046ce <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	2b02      	cmp	r3, #2
 8004642:	d12b      	bne.n	800469c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004648:	b29b      	uxth	r3, r3
 800464a:	2b01      	cmp	r3, #1
 800464c:	d912      	bls.n	8004674 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465e:	1c9a      	adds	r2, r3, #2
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004668:	b29b      	uxth	r3, r3
 800466a:	3b02      	subs	r3, #2
 800466c:	b29a      	uxth	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004672:	e02c      	b.n	80046ce <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004686:	1c5a      	adds	r2, r3, #1
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004690:	b29b      	uxth	r3, r3
 8004692:	3b01      	subs	r3, #1
 8004694:	b29a      	uxth	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800469a:	e018      	b.n	80046ce <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800469c:	f7fd fd34 	bl	8002108 <HAL_GetTick>
 80046a0:	4602      	mov	r2, r0
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	1ad3      	subs	r3, r2, r3
 80046a6:	683a      	ldr	r2, [r7, #0]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d803      	bhi.n	80046b4 <HAL_SPI_Transmit+0x26e>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d102      	bne.n	80046ba <HAL_SPI_Transmit+0x274>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	e02d      	b.n	800472a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1ae      	bne.n	8004636 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80046d8:	69fa      	ldr	r2, [r7, #28]
 80046da:	6839      	ldr	r1, [r7, #0]
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f000 fcf5 	bl	80050cc <SPI_EndRxTxTransaction>
 80046e2:	4603      	mov	r3, r0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d002      	beq.n	80046ee <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2220      	movs	r2, #32
 80046ec:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80046f6:	2300      	movs	r3, #0
 80046f8:	617b      	str	r3, [r7, #20]
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68db      	ldr	r3, [r3, #12]
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	617b      	str	r3, [r7, #20]
 800470a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e000      	b.n	800472a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8004728:	2300      	movs	r3, #0
  }
}
 800472a:	4618      	mov	r0, r3
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b088      	sub	sp, #32
 8004736:	af02      	add	r7, sp, #8
 8004738:	60f8      	str	r0, [r7, #12]
 800473a:	60b9      	str	r1, [r7, #8]
 800473c:	603b      	str	r3, [r7, #0]
 800473e:	4613      	mov	r3, r2
 8004740:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b01      	cmp	r3, #1
 800474c:	d001      	beq.n	8004752 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800474e:	2302      	movs	r3, #2
 8004750:	e123      	b.n	800499a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800475a:	d112      	bne.n	8004782 <HAL_SPI_Receive+0x50>
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d10e      	bne.n	8004782 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2204      	movs	r2, #4
 8004768:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800476c:	88fa      	ldrh	r2, [r7, #6]
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	9300      	str	r3, [sp, #0]
 8004772:	4613      	mov	r3, r2
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	68b9      	ldr	r1, [r7, #8]
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	f000 f912 	bl	80049a2 <HAL_SPI_TransmitReceive>
 800477e:	4603      	mov	r3, r0
 8004780:	e10b      	b.n	800499a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004782:	f7fd fcc1 	bl	8002108 <HAL_GetTick>
 8004786:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b00      	cmp	r3, #0
 800478c:	d002      	beq.n	8004794 <HAL_SPI_Receive+0x62>
 800478e:	88fb      	ldrh	r3, [r7, #6]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d101      	bne.n	8004798 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e100      	b.n	800499a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_SPI_Receive+0x74>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e0f9      	b.n	800499a <HAL_SPI_Receive+0x268>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2204      	movs	r2, #4
 80047b2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	88fa      	ldrh	r2, [r7, #6]
 80047c6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	88fa      	ldrh	r2, [r7, #6]
 80047ce:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2200      	movs	r2, #0
 80047e2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047f8:	d908      	bls.n	800480c <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685a      	ldr	r2, [r3, #4]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	e007      	b.n	800481c <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685a      	ldr	r2, [r3, #4]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800481a:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	689b      	ldr	r3, [r3, #8]
 8004820:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004824:	d10f      	bne.n	8004846 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004834:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8004844:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004850:	2b40      	cmp	r3, #64	@ 0x40
 8004852:	d007      	beq.n	8004864 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004862:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800486c:	d875      	bhi.n	800495a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800486e:	e037      	b.n	80048e0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 0301 	and.w	r3, r3, #1
 800487a:	2b01      	cmp	r3, #1
 800487c:	d117      	bne.n	80048ae <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f103 020c 	add.w	r2, r3, #12
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	7812      	ldrb	r2, [r2, #0]
 800488c:	b2d2      	uxtb	r2, r2
 800488e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	3b01      	subs	r3, #1
 80048a4:	b29a      	uxth	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 80048ac:	e018      	b.n	80048e0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048ae:	f7fd fc2b 	bl	8002108 <HAL_GetTick>
 80048b2:	4602      	mov	r2, r0
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	1ad3      	subs	r3, r2, r3
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	429a      	cmp	r2, r3
 80048bc:	d803      	bhi.n	80048c6 <HAL_SPI_Receive+0x194>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c4:	d102      	bne.n	80048cc <HAL_SPI_Receive+0x19a>
 80048c6:	683b      	ldr	r3, [r7, #0]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d109      	bne.n	80048e0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e05c      	b.n	800499a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 80048e6:	b29b      	uxth	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d1c1      	bne.n	8004870 <HAL_SPI_Receive+0x13e>
 80048ec:	e03b      	b.n	8004966 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d115      	bne.n	8004928 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004906:	b292      	uxth	r2, r2
 8004908:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	1c9a      	adds	r2, r3, #2
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 800491a:	b29b      	uxth	r3, r3
 800491c:	3b01      	subs	r3, #1
 800491e:	b29a      	uxth	r2, r3
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8004926:	e018      	b.n	800495a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004928:	f7fd fbee 	bl	8002108 <HAL_GetTick>
 800492c:	4602      	mov	r2, r0
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	1ad3      	subs	r3, r2, r3
 8004932:	683a      	ldr	r2, [r7, #0]
 8004934:	429a      	cmp	r2, r3
 8004936:	d803      	bhi.n	8004940 <HAL_SPI_Receive+0x20e>
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493e:	d102      	bne.n	8004946 <HAL_SPI_Receive+0x214>
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2200      	movs	r2, #0
 8004952:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e01f      	b.n	800499a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004960:	b29b      	uxth	r3, r3
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1c3      	bne.n	80048ee <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	6839      	ldr	r1, [r7, #0]
 800496a:	68f8      	ldr	r0, [r7, #12]
 800496c:	f000 fb56 	bl	800501c <SPI_EndRxTransaction>
 8004970:	4603      	mov	r3, r0
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2220      	movs	r2, #32
 800497a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e000      	b.n	800499a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8004998:	2300      	movs	r3, #0
  }
}
 800499a:	4618      	mov	r0, r3
 800499c:	3718      	adds	r7, #24
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}

080049a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80049a2:	b580      	push	{r7, lr}
 80049a4:	b08a      	sub	sp, #40	@ 0x28
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	60f8      	str	r0, [r7, #12]
 80049aa:	60b9      	str	r1, [r7, #8]
 80049ac:	607a      	str	r2, [r7, #4]
 80049ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80049b0:	2301      	movs	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049b4:	f7fd fba8 	bl	8002108 <HAL_GetTick>
 80049b8:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80049c0:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80049c8:	887b      	ldrh	r3, [r7, #2]
 80049ca:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80049cc:	887b      	ldrh	r3, [r7, #2]
 80049ce:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80049d0:	7ffb      	ldrb	r3, [r7, #31]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d00c      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x4e>
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80049dc:	d106      	bne.n	80049ec <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d102      	bne.n	80049ec <HAL_SPI_TransmitReceive+0x4a>
 80049e6:	7ffb      	ldrb	r3, [r7, #31]
 80049e8:	2b04      	cmp	r3, #4
 80049ea:	d001      	beq.n	80049f0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80049ec:	2302      	movs	r3, #2
 80049ee:	e1f3      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x60>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d002      	beq.n	8004a02 <HAL_SPI_TransmitReceive+0x60>
 80049fc:	887b      	ldrh	r3, [r7, #2]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e1e8      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d101      	bne.n	8004a14 <HAL_SPI_TransmitReceive+0x72>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e1e1      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x436>
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	2201      	movs	r2, #1
 8004a18:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	2b04      	cmp	r3, #4
 8004a26:	d003      	beq.n	8004a30 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2205      	movs	r2, #5
 8004a2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2200      	movs	r2, #0
 8004a34:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	887a      	ldrh	r2, [r7, #2]
 8004a40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	887a      	ldrh	r2, [r7, #2]
 8004a48:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	887a      	ldrh	r2, [r7, #2]
 8004a56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	887a      	ldrh	r2, [r7, #2]
 8004a5c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2200      	movs	r2, #0
 8004a68:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	68db      	ldr	r3, [r3, #12]
 8004a6e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004a72:	d802      	bhi.n	8004a7a <HAL_SPI_TransmitReceive+0xd8>
 8004a74:	8abb      	ldrh	r3, [r7, #20]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d908      	bls.n	8004a8c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685a      	ldr	r2, [r3, #4]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004a88:	605a      	str	r2, [r3, #4]
 8004a8a:	e007      	b.n	8004a9c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	685a      	ldr	r2, [r3, #4]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004a9a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa6:	2b40      	cmp	r3, #64	@ 0x40
 8004aa8:	d007      	beq.n	8004aba <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681a      	ldr	r2, [r3, #0]
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8004ac2:	f240 8083 	bls.w	8004bcc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d002      	beq.n	8004ad4 <HAL_SPI_TransmitReceive+0x132>
 8004ace:	8afb      	ldrh	r3, [r7, #22]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d16f      	bne.n	8004bb4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad8:	881a      	ldrh	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ae4:	1c9a      	adds	r2, r3, #2
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	3b01      	subs	r3, #1
 8004af2:	b29a      	uxth	r2, r3
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004af8:	e05c      	b.n	8004bb4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	689b      	ldr	r3, [r3, #8]
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	d11b      	bne.n	8004b40 <HAL_SPI_TransmitReceive+0x19e>
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d016      	beq.n	8004b40 <HAL_SPI_TransmitReceive+0x19e>
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d113      	bne.n	8004b40 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b1c:	881a      	ldrh	r2, [r3, #0]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b28:	1c9a      	adds	r2, r3, #2
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d11c      	bne.n	8004b88 <HAL_SPI_TransmitReceive+0x1e6>
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d016      	beq.n	8004b88 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b64:	b292      	uxth	r2, r2
 8004b66:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b6c:	1c9a      	adds	r2, r3, #2
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004b78:	b29b      	uxth	r3, r3
 8004b7a:	3b01      	subs	r3, #1
 8004b7c:	b29a      	uxth	r2, r3
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004b84:	2301      	movs	r3, #1
 8004b86:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004b88:	f7fd fabe 	bl	8002108 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d80d      	bhi.n	8004bb4 <HAL_SPI_TransmitReceive+0x212>
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b9e:	d009      	beq.n	8004bb4 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e111      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d19d      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x158>
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d197      	bne.n	8004afa <HAL_SPI_TransmitReceive+0x158>
 8004bca:	e0e5      	b.n	8004d98 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d003      	beq.n	8004bdc <HAL_SPI_TransmitReceive+0x23a>
 8004bd4:	8afb      	ldrh	r3, [r7, #22]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	f040 80d1 	bne.w	8004d7e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b01      	cmp	r3, #1
 8004be4:	d912      	bls.n	8004c0c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bea:	881a      	ldrh	r2, [r3, #0]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bf6:	1c9a      	adds	r2, r3, #2
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b02      	subs	r3, #2
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c0a:	e0b8      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	7812      	ldrb	r2, [r2, #0]
 8004c18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004c32:	e0a4      	b.n	8004d7e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d134      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x30a>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d02f      	beq.n	8004cac <HAL_SPI_TransmitReceive+0x30a>
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d12c      	bne.n	8004cac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	2b01      	cmp	r3, #1
 8004c5a:	d912      	bls.n	8004c82 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c60:	881a      	ldrh	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c6c:	1c9a      	adds	r2, r3, #2
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	3b02      	subs	r3, #2
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8004c80:	e012      	b.n	8004ca8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	330c      	adds	r3, #12
 8004c8c:	7812      	ldrb	r2, [r2, #0]
 8004c8e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	1c5a      	adds	r2, r3, #1
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	3b01      	subs	r3, #1
 8004ca2:	b29a      	uxth	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0301 	and.w	r3, r3, #1
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d148      	bne.n	8004d4c <HAL_SPI_TransmitReceive+0x3aa>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cc0:	b29b      	uxth	r3, r3
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d042      	beq.n	8004d4c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004ccc:	b29b      	uxth	r3, r3
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d923      	bls.n	8004d1a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68da      	ldr	r2, [r3, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	b292      	uxth	r2, r2
 8004cde:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce4:	1c9a      	adds	r2, r3, #2
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b02      	subs	r3, #2
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d81f      	bhi.n	8004d48 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	685a      	ldr	r2, [r3, #4]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8004d16:	605a      	str	r2, [r3, #4]
 8004d18:	e016      	b.n	8004d48 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f103 020c 	add.w	r2, r3, #12
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d26:	7812      	ldrb	r2, [r2, #0]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d30:	1c5a      	adds	r2, r3, #1
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d3c:	b29b      	uxth	r3, r3
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	b29a      	uxth	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004d4c:	f7fd f9dc 	bl	8002108 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	1ad3      	subs	r3, r2, r3
 8004d56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d803      	bhi.n	8004d64 <HAL_SPI_TransmitReceive+0x3c2>
 8004d5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d62:	d102      	bne.n	8004d6a <HAL_SPI_TransmitReceive+0x3c8>
 8004d64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e02c      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004d82:	b29b      	uxth	r3, r3
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f47f af55 	bne.w	8004c34 <HAL_SPI_TransmitReceive+0x292>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8004d90:	b29b      	uxth	r3, r3
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	f47f af4e 	bne.w	8004c34 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d98:	6a3a      	ldr	r2, [r7, #32]
 8004d9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f000 f995 	bl	80050cc <SPI_EndRxTxTransaction>
 8004da2:	4603      	mov	r3, r0
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d008      	beq.n	8004dba <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	2220      	movs	r2, #32
 8004dac:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e00e      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d001      	beq.n	8004dd6 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
  }
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3728      	adds	r7, #40	@ 0x28
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	603b      	str	r3, [r7, #0]
 8004dec:	4613      	mov	r3, r2
 8004dee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004df0:	f7fd f98a 	bl	8002108 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df8:	1a9b      	subs	r3, r3, r2
 8004dfa:	683a      	ldr	r2, [r7, #0]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e00:	f7fd f982 	bl	8002108 <HAL_GetTick>
 8004e04:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e06:	4b39      	ldr	r3, [pc, #228]	@ (8004eec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	015b      	lsls	r3, r3, #5
 8004e0c:	0d1b      	lsrs	r3, r3, #20
 8004e0e:	69fa      	ldr	r2, [r7, #28]
 8004e10:	fb02 f303 	mul.w	r3, r2, r3
 8004e14:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e16:	e054      	b.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	d050      	beq.n	8004ec2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e20:	f7fd f972 	bl	8002108 <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	69fa      	ldr	r2, [r7, #28]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d902      	bls.n	8004e36 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d13d      	bne.n	8004eb2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004e44:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e4e:	d111      	bne.n	8004e74 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e58:	d004      	beq.n	8004e64 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	689b      	ldr	r3, [r3, #8]
 8004e5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e62:	d107      	bne.n	8004e74 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e72:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e78:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e7c:	d10f      	bne.n	8004e9e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681a      	ldr	r2, [r3, #0]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e9c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e017      	b.n	8004ee2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d101      	bne.n	8004ebc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	689a      	ldr	r2, [r3, #8]
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	bf0c      	ite	eq
 8004ed2:	2301      	moveq	r3, #1
 8004ed4:	2300      	movne	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	461a      	mov	r2, r3
 8004eda:	79fb      	ldrb	r3, [r7, #7]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d19b      	bne.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ee0:	2300      	movs	r3, #0
}
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	3720      	adds	r7, #32
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}
 8004eea:	bf00      	nop
 8004eec:	20000000 	.word	0x20000000

08004ef0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	@ 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	60f8      	str	r0, [r7, #12]
 8004ef8:	60b9      	str	r1, [r7, #8]
 8004efa:	607a      	str	r2, [r7, #4]
 8004efc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004efe:	2300      	movs	r3, #0
 8004f00:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004f02:	f7fd f901 	bl	8002108 <HAL_GetTick>
 8004f06:	4602      	mov	r2, r0
 8004f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f0a:	1a9b      	subs	r3, r3, r2
 8004f0c:	683a      	ldr	r2, [r7, #0]
 8004f0e:	4413      	add	r3, r2
 8004f10:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004f12:	f7fd f8f9 	bl	8002108 <HAL_GetTick>
 8004f16:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004f20:	4b3d      	ldr	r3, [pc, #244]	@ (8005018 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	00da      	lsls	r2, r3, #3
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	0d1b      	lsrs	r3, r3, #20
 8004f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f32:	fb02 f303 	mul.w	r3, r2, r3
 8004f36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004f38:	e060      	b.n	8004ffc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004f40:	d107      	bne.n	8004f52 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004f50:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d050      	beq.n	8004ffc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004f5a:	f7fd f8d5 	bl	8002108 <HAL_GetTick>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	6a3b      	ldr	r3, [r7, #32]
 8004f62:	1ad3      	subs	r3, r2, r3
 8004f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f66:	429a      	cmp	r2, r3
 8004f68:	d902      	bls.n	8004f70 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d13d      	bne.n	8004fec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	685a      	ldr	r2, [r3, #4]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004f7e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004f88:	d111      	bne.n	8004fae <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f92:	d004      	beq.n	8004f9e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f9c:	d107      	bne.n	8004fae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fb2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004fb6:	d10f      	bne.n	8004fd8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fc6:	601a      	str	r2, [r3, #0]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681a      	ldr	r2, [r3, #0]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004fd6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004fe8:	2303      	movs	r3, #3
 8004fea:	e010      	b.n	800500e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004fec:	69bb      	ldr	r3, [r7, #24]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	3b01      	subs	r3, #1
 8004ffa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	4013      	ands	r3, r2
 8005006:	687a      	ldr	r2, [r7, #4]
 8005008:	429a      	cmp	r2, r3
 800500a:	d196      	bne.n	8004f3a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3728      	adds	r7, #40	@ 0x28
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	20000000 	.word	0x20000000

0800501c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b086      	sub	sp, #24
 8005020:	af02      	add	r7, sp, #8
 8005022:	60f8      	str	r0, [r7, #12]
 8005024:	60b9      	str	r1, [r7, #8]
 8005026:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005030:	d111      	bne.n	8005056 <SPI_EndRxTransaction+0x3a>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	689b      	ldr	r3, [r3, #8]
 8005036:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800503a:	d004      	beq.n	8005046 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005044:	d107      	bne.n	8005056 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005054:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	9300      	str	r3, [sp, #0]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	2200      	movs	r2, #0
 800505e:	2180      	movs	r1, #128	@ 0x80
 8005060:	68f8      	ldr	r0, [r7, #12]
 8005062:	f7ff febd 	bl	8004de0 <SPI_WaitFlagStateUntilTimeout>
 8005066:	4603      	mov	r3, r0
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005070:	f043 0220 	orr.w	r2, r3, #32
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005078:	2303      	movs	r3, #3
 800507a:	e023      	b.n	80050c4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005084:	d11d      	bne.n	80050c2 <SPI_EndRxTransaction+0xa6>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800508e:	d004      	beq.n	800509a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005098:	d113      	bne.n	80050c2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	9300      	str	r3, [sp, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f7ff ff22 	bl	8004ef0 <SPI_WaitFifoStateUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d007      	beq.n	80050c2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050b6:	f043 0220 	orr.w	r2, r3, #32
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	e000      	b.n	80050c4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80050c2:	2300      	movs	r3, #0
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	3710      	adds	r7, #16
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b086      	sub	sp, #24
 80050d0:	af02      	add	r7, sp, #8
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	2200      	movs	r2, #0
 80050e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f7ff ff03 	bl	8004ef0 <SPI_WaitFifoStateUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050f4:	f043 0220 	orr.w	r2, r3, #32
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80050fc:	2303      	movs	r3, #3
 80050fe:	e027      	b.n	8005150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	9300      	str	r3, [sp, #0]
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	2200      	movs	r2, #0
 8005108:	2180      	movs	r1, #128	@ 0x80
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f7ff fe68 	bl	8004de0 <SPI_WaitFlagStateUntilTimeout>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800511a:	f043 0220 	orr.w	r2, r3, #32
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005122:	2303      	movs	r3, #3
 8005124:	e014      	b.n	8005150 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	9300      	str	r3, [sp, #0]
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	2200      	movs	r2, #0
 800512e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005132:	68f8      	ldr	r0, [r7, #12]
 8005134:	f7ff fedc 	bl	8004ef0 <SPI_WaitFifoStateUntilTimeout>
 8005138:	4603      	mov	r3, r0
 800513a:	2b00      	cmp	r3, #0
 800513c:	d007      	beq.n	800514e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005142:	f043 0220 	orr.w	r2, r3, #32
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e000      	b.n	8005150 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800514e:	2300      	movs	r3, #0
}
 8005150:	4618      	mov	r0, r3
 8005152:	3710      	adds	r7, #16
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b082      	sub	sp, #8
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e049      	b.n	80051fe <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b00      	cmp	r3, #0
 8005174:	d106      	bne.n	8005184 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2200      	movs	r2, #0
 800517a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7fc fc84 	bl	8001a8c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	3304      	adds	r3, #4
 8005194:	4619      	mov	r1, r3
 8005196:	4610      	mov	r0, r2
 8005198:	f000 fc4e 	bl	8005a38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2201      	movs	r2, #1
 80051a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80051fc:	2300      	movs	r3, #0
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3708      	adds	r7, #8
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
	...

08005208 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b084      	sub	sp, #16
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005212:	2300      	movs	r3, #0
 8005214:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d104      	bne.n	8005226 <HAL_TIM_IC_Start_IT+0x1e>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005222:	b2db      	uxtb	r3, r3
 8005224:	e023      	b.n	800526e <HAL_TIM_IC_Start_IT+0x66>
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b04      	cmp	r3, #4
 800522a:	d104      	bne.n	8005236 <HAL_TIM_IC_Start_IT+0x2e>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005232:	b2db      	uxtb	r3, r3
 8005234:	e01b      	b.n	800526e <HAL_TIM_IC_Start_IT+0x66>
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b08      	cmp	r3, #8
 800523a:	d104      	bne.n	8005246 <HAL_TIM_IC_Start_IT+0x3e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005242:	b2db      	uxtb	r3, r3
 8005244:	e013      	b.n	800526e <HAL_TIM_IC_Start_IT+0x66>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	2b0c      	cmp	r3, #12
 800524a:	d104      	bne.n	8005256 <HAL_TIM_IC_Start_IT+0x4e>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	e00b      	b.n	800526e <HAL_TIM_IC_Start_IT+0x66>
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b10      	cmp	r3, #16
 800525a:	d104      	bne.n	8005266 <HAL_TIM_IC_Start_IT+0x5e>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005262:	b2db      	uxtb	r3, r3
 8005264:	e003      	b.n	800526e <HAL_TIM_IC_Start_IT+0x66>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800526c:	b2db      	uxtb	r3, r3
 800526e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d104      	bne.n	8005280 <HAL_TIM_IC_Start_IT+0x78>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800527c:	b2db      	uxtb	r3, r3
 800527e:	e013      	b.n	80052a8 <HAL_TIM_IC_Start_IT+0xa0>
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	2b04      	cmp	r3, #4
 8005284:	d104      	bne.n	8005290 <HAL_TIM_IC_Start_IT+0x88>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e00b      	b.n	80052a8 <HAL_TIM_IC_Start_IT+0xa0>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b08      	cmp	r3, #8
 8005294:	d104      	bne.n	80052a0 <HAL_TIM_IC_Start_IT+0x98>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800529c:	b2db      	uxtb	r3, r3
 800529e:	e003      	b.n	80052a8 <HAL_TIM_IC_Start_IT+0xa0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80052aa:	7bbb      	ldrb	r3, [r7, #14]
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d102      	bne.n	80052b6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80052b0:	7b7b      	ldrb	r3, [r7, #13]
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d001      	beq.n	80052ba <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e0dd      	b.n	8005476 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d104      	bne.n	80052ca <HAL_TIM_IC_Start_IT+0xc2>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80052c8:	e023      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x10a>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b04      	cmp	r3, #4
 80052ce:	d104      	bne.n	80052da <HAL_TIM_IC_Start_IT+0xd2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80052d8:	e01b      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x10a>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d104      	bne.n	80052ea <HAL_TIM_IC_Start_IT+0xe2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2202      	movs	r2, #2
 80052e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80052e8:	e013      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x10a>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	2b0c      	cmp	r3, #12
 80052ee:	d104      	bne.n	80052fa <HAL_TIM_IC_Start_IT+0xf2>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2202      	movs	r2, #2
 80052f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80052f8:	e00b      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x10a>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d104      	bne.n	800530a <HAL_TIM_IC_Start_IT+0x102>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2202      	movs	r2, #2
 8005304:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005308:	e003      	b.n	8005312 <HAL_TIM_IC_Start_IT+0x10a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2202      	movs	r2, #2
 800530e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d104      	bne.n	8005322 <HAL_TIM_IC_Start_IT+0x11a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005320:	e013      	b.n	800534a <HAL_TIM_IC_Start_IT+0x142>
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	2b04      	cmp	r3, #4
 8005326:	d104      	bne.n	8005332 <HAL_TIM_IC_Start_IT+0x12a>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005330:	e00b      	b.n	800534a <HAL_TIM_IC_Start_IT+0x142>
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	2b08      	cmp	r3, #8
 8005336:	d104      	bne.n	8005342 <HAL_TIM_IC_Start_IT+0x13a>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2202      	movs	r2, #2
 800533c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005340:	e003      	b.n	800534a <HAL_TIM_IC_Start_IT+0x142>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2202      	movs	r2, #2
 8005346:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b0c      	cmp	r3, #12
 800534e:	d841      	bhi.n	80053d4 <HAL_TIM_IC_Start_IT+0x1cc>
 8005350:	a201      	add	r2, pc, #4	@ (adr r2, 8005358 <HAL_TIM_IC_Start_IT+0x150>)
 8005352:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005356:	bf00      	nop
 8005358:	0800538d 	.word	0x0800538d
 800535c:	080053d5 	.word	0x080053d5
 8005360:	080053d5 	.word	0x080053d5
 8005364:	080053d5 	.word	0x080053d5
 8005368:	0800539f 	.word	0x0800539f
 800536c:	080053d5 	.word	0x080053d5
 8005370:	080053d5 	.word	0x080053d5
 8005374:	080053d5 	.word	0x080053d5
 8005378:	080053b1 	.word	0x080053b1
 800537c:	080053d5 	.word	0x080053d5
 8005380:	080053d5 	.word	0x080053d5
 8005384:	080053d5 	.word	0x080053d5
 8005388:	080053c3 	.word	0x080053c3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68da      	ldr	r2, [r3, #12]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0202 	orr.w	r2, r2, #2
 800539a:	60da      	str	r2, [r3, #12]
      break;
 800539c:	e01d      	b.n	80053da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68da      	ldr	r2, [r3, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0204 	orr.w	r2, r2, #4
 80053ac:	60da      	str	r2, [r3, #12]
      break;
 80053ae:	e014      	b.n	80053da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68da      	ldr	r2, [r3, #12]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	60da      	str	r2, [r3, #12]
      break;
 80053c0:	e00b      	b.n	80053da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68da      	ldr	r2, [r3, #12]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f042 0210 	orr.w	r2, r2, #16
 80053d0:	60da      	str	r2, [r3, #12]
      break;
 80053d2:	e002      	b.n	80053da <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80053d4:	2301      	movs	r3, #1
 80053d6:	73fb      	strb	r3, [r7, #15]
      break;
 80053d8:	bf00      	nop
  }

  if (status == HAL_OK)
 80053da:	7bfb      	ldrb	r3, [r7, #15]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d149      	bne.n	8005474 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	6839      	ldr	r1, [r7, #0]
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fcef 	bl	8005dcc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a23      	ldr	r2, [pc, #140]	@ (8005480 <HAL_TIM_IC_Start_IT+0x278>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d01d      	beq.n	8005434 <HAL_TIM_IC_Start_IT+0x22c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005400:	d018      	beq.n	8005434 <HAL_TIM_IC_Start_IT+0x22c>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1f      	ldr	r2, [pc, #124]	@ (8005484 <HAL_TIM_IC_Start_IT+0x27c>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_TIM_IC_Start_IT+0x22c>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1d      	ldr	r2, [pc, #116]	@ (8005488 <HAL_TIM_IC_Start_IT+0x280>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_IC_Start_IT+0x22c>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1c      	ldr	r2, [pc, #112]	@ (800548c <HAL_TIM_IC_Start_IT+0x284>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_TIM_IC_Start_IT+0x22c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1a      	ldr	r2, [pc, #104]	@ (8005490 <HAL_TIM_IC_Start_IT+0x288>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_IC_Start_IT+0x22c>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a19      	ldr	r2, [pc, #100]	@ (8005494 <HAL_TIM_IC_Start_IT+0x28c>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d115      	bne.n	8005460 <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	4b17      	ldr	r3, [pc, #92]	@ (8005498 <HAL_TIM_IC_Start_IT+0x290>)
 800543c:	4013      	ands	r3, r2
 800543e:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	2b06      	cmp	r3, #6
 8005444:	d015      	beq.n	8005472 <HAL_TIM_IC_Start_IT+0x26a>
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800544c:	d011      	beq.n	8005472 <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f042 0201 	orr.w	r2, r2, #1
 800545c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800545e:	e008      	b.n	8005472 <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f042 0201 	orr.w	r2, r2, #1
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	e000      	b.n	8005474 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005472:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8005474:	7bfb      	ldrb	r3, [r7, #15]
}
 8005476:	4618      	mov	r0, r3
 8005478:	3710      	adds	r7, #16
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	40012c00 	.word	0x40012c00
 8005484:	40000400 	.word	0x40000400
 8005488:	40000800 	.word	0x40000800
 800548c:	40000c00 	.word	0x40000c00
 8005490:	40013400 	.word	0x40013400
 8005494:	40014000 	.word	0x40014000
 8005498:	00010007 	.word	0x00010007

0800549c <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
 80054a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054a6:	2300      	movs	r3, #0
 80054a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  switch (Channel)
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b0c      	cmp	r3, #12
 80054ae:	d841      	bhi.n	8005534 <HAL_TIM_IC_Stop_IT+0x98>
 80054b0:	a201      	add	r2, pc, #4	@ (adr r2, 80054b8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80054b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054b6:	bf00      	nop
 80054b8:	080054ed 	.word	0x080054ed
 80054bc:	08005535 	.word	0x08005535
 80054c0:	08005535 	.word	0x08005535
 80054c4:	08005535 	.word	0x08005535
 80054c8:	080054ff 	.word	0x080054ff
 80054cc:	08005535 	.word	0x08005535
 80054d0:	08005535 	.word	0x08005535
 80054d4:	08005535 	.word	0x08005535
 80054d8:	08005511 	.word	0x08005511
 80054dc:	08005535 	.word	0x08005535
 80054e0:	08005535 	.word	0x08005535
 80054e4:	08005535 	.word	0x08005535
 80054e8:	08005523 	.word	0x08005523
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f022 0202 	bic.w	r2, r2, #2
 80054fa:	60da      	str	r2, [r3, #12]
      break;
 80054fc:	e01d      	b.n	800553a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68da      	ldr	r2, [r3, #12]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0204 	bic.w	r2, r2, #4
 800550c:	60da      	str	r2, [r3, #12]
      break;
 800550e:	e014      	b.n	800553a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f022 0208 	bic.w	r2, r2, #8
 800551e:	60da      	str	r2, [r3, #12]
      break;
 8005520:	e00b      	b.n	800553a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68da      	ldr	r2, [r3, #12]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f022 0210 	bic.w	r2, r2, #16
 8005530:	60da      	str	r2, [r3, #12]
      break;
 8005532:	e002      	b.n	800553a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005534:	2301      	movs	r3, #1
 8005536:	73fb      	strb	r3, [r7, #15]
      break;
 8005538:	bf00      	nop
  }

  if (status == HAL_OK)
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d166      	bne.n	800560e <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	2200      	movs	r2, #0
 8005546:	6839      	ldr	r1, [r7, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f000 fc3f 	bl	8005dcc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6a1a      	ldr	r2, [r3, #32]
 8005554:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005558:	4013      	ands	r3, r2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d10f      	bne.n	800557e <HAL_TIM_IC_Stop_IT+0xe2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6a1a      	ldr	r2, [r3, #32]
 8005564:	f240 4344 	movw	r3, #1092	@ 0x444
 8005568:	4013      	ands	r3, r2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d107      	bne.n	800557e <HAL_TIM_IC_Stop_IT+0xe2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d104      	bne.n	800558e <HAL_TIM_IC_Stop_IT+0xf2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800558c:	e023      	b.n	80055d6 <HAL_TIM_IC_Stop_IT+0x13a>
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d104      	bne.n	800559e <HAL_TIM_IC_Stop_IT+0x102>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800559c:	e01b      	b.n	80055d6 <HAL_TIM_IC_Stop_IT+0x13a>
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	2b08      	cmp	r3, #8
 80055a2:	d104      	bne.n	80055ae <HAL_TIM_IC_Stop_IT+0x112>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80055ac:	e013      	b.n	80055d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	2b0c      	cmp	r3, #12
 80055b2:	d104      	bne.n	80055be <HAL_TIM_IC_Stop_IT+0x122>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80055bc:	e00b      	b.n	80055d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b10      	cmp	r3, #16
 80055c2:	d104      	bne.n	80055ce <HAL_TIM_IC_Stop_IT+0x132>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80055cc:	e003      	b.n	80055d6 <HAL_TIM_IC_Stop_IT+0x13a>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_IC_Stop_IT+0x14a>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055e4:	e013      	b.n	800560e <HAL_TIM_IC_Stop_IT+0x172>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b04      	cmp	r3, #4
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_IC_Stop_IT+0x15a>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055f4:	e00b      	b.n	800560e <HAL_TIM_IC_Stop_IT+0x172>
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	2b08      	cmp	r3, #8
 80055fa:	d104      	bne.n	8005606 <HAL_TIM_IC_Stop_IT+0x16a>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2201      	movs	r2, #1
 8005600:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005604:	e003      	b.n	800560e <HAL_TIM_IC_Stop_IT+0x172>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2201      	movs	r2, #1
 800560a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005630:	68bb      	ldr	r3, [r7, #8]
 8005632:	f003 0302 	and.w	r3, r3, #2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d020      	beq.n	800567c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f003 0302 	and.w	r3, r3, #2
 8005640:	2b00      	cmp	r3, #0
 8005642:	d01b      	beq.n	800567c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f06f 0202 	mvn.w	r2, #2
 800564c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	2b00      	cmp	r3, #0
 8005660:	d003      	beq.n	800566a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f7fb fcb4 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8005668:	e005      	b.n	8005676 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f9c6 	bl	80059fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 f9cd 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2200      	movs	r2, #0
 800567a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d020      	beq.n	80056c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	f003 0304 	and.w	r3, r3, #4
 800568c:	2b00      	cmp	r3, #0
 800568e:	d01b      	beq.n	80056c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f06f 0204 	mvn.w	r2, #4
 8005698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2202      	movs	r2, #2
 800569e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	699b      	ldr	r3, [r3, #24]
 80056a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7fb fc8e 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 80056b4:	e005      	b.n	80056c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056b6:	6878      	ldr	r0, [r7, #4]
 80056b8:	f000 f9a0 	bl	80059fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056bc:	6878      	ldr	r0, [r7, #4]
 80056be:	f000 f9a7 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	f003 0308 	and.w	r3, r3, #8
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d020      	beq.n	8005714 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	f003 0308 	and.w	r3, r3, #8
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d01b      	beq.n	8005714 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f06f 0208 	mvn.w	r2, #8
 80056e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2204      	movs	r2, #4
 80056ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	69db      	ldr	r3, [r3, #28]
 80056f2:	f003 0303 	and.w	r3, r3, #3
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d003      	beq.n	8005702 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f7fb fc68 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 8005700:	e005      	b.n	800570e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f97a 	bl	80059fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 f981 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	f003 0310 	and.w	r3, r3, #16
 800571a:	2b00      	cmp	r3, #0
 800571c:	d020      	beq.n	8005760 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	f003 0310 	and.w	r3, r3, #16
 8005724:	2b00      	cmp	r3, #0
 8005726:	d01b      	beq.n	8005760 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f06f 0210 	mvn.w	r2, #16
 8005730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2208      	movs	r2, #8
 8005736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005742:	2b00      	cmp	r3, #0
 8005744:	d003      	beq.n	800574e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fb fc42 	bl	8000fd0 <HAL_TIM_IC_CaptureCallback>
 800574c:	e005      	b.n	800575a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800574e:	6878      	ldr	r0, [r7, #4]
 8005750:	f000 f954 	bl	80059fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f95b 	bl	8005a10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00c      	beq.n	8005784 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d007      	beq.n	8005784 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f06f 0201 	mvn.w	r2, #1
 800577c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 f932 	bl	80059e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800578a:	2b00      	cmp	r3, #0
 800578c:	d104      	bne.n	8005798 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00c      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d007      	beq.n	80057b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80057aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 fbc5 	bl	8005f3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00c      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d007      	beq.n	80057d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80057ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fbbd 	bl	8005f50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d00c      	beq.n	80057fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d007      	beq.n	80057fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80057f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 f915 	bl	8005a24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d00c      	beq.n	800581e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f003 0320 	and.w	r3, r3, #32
 800580a:	2b00      	cmp	r3, #0
 800580c:	d007      	beq.n	800581e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f06f 0220 	mvn.w	r2, #32
 8005816:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f000 fb85 	bl	8005f28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	60b9      	str	r1, [r7, #8]
 8005830:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005832:	2300      	movs	r3, #0
 8005834:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800583c:	2b01      	cmp	r3, #1
 800583e:	d101      	bne.n	8005844 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005840:	2302      	movs	r3, #2
 8005842:	e088      	b.n	8005956 <HAL_TIM_IC_ConfigChannel+0x130>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d11b      	bne.n	800588a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800585e:	68bb      	ldr	r3, [r7, #8]
 8005860:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8005862:	f000 f98f 	bl	8005b84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699a      	ldr	r2, [r3, #24]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f022 020c 	bic.w	r2, r2, #12
 8005874:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6999      	ldr	r1, [r3, #24]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	689a      	ldr	r2, [r3, #8]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	619a      	str	r2, [r3, #24]
 8005888:	e060      	b.n	800594c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b04      	cmp	r3, #4
 800588e:	d11c      	bne.n	80058ca <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80058a0:	f000 f9de 	bl	8005c60 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	699a      	ldr	r2, [r3, #24]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80058b2:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	6999      	ldr	r1, [r3, #24]
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	021a      	lsls	r2, r3, #8
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	430a      	orrs	r2, r1
 80058c6:	619a      	str	r2, [r3, #24]
 80058c8:	e040      	b.n	800594c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b08      	cmp	r3, #8
 80058ce:	d11b      	bne.n	8005908 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80058e0:	f000 f9fb 	bl	8005cda <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	69da      	ldr	r2, [r3, #28]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f022 020c 	bic.w	r2, r2, #12
 80058f2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	69d9      	ldr	r1, [r3, #28]
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	689a      	ldr	r2, [r3, #8]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	430a      	orrs	r2, r1
 8005904:	61da      	str	r2, [r3, #28]
 8005906:	e021      	b.n	800594c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2b0c      	cmp	r3, #12
 800590c:	d11c      	bne.n	8005948 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 800591e:	f000 fa18 	bl	8005d52 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	69da      	ldr	r2, [r3, #28]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8005930:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	69d9      	ldr	r1, [r3, #28]
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	021a      	lsls	r2, r3, #8
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	61da      	str	r2, [r3, #28]
 8005946:	e001      	b.n	800594c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005954:	7dfb      	ldrb	r3, [r7, #23]
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005960:	b480      	push	{r7}
 8005962:	b085      	sub	sp, #20
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800596a:	2300      	movs	r3, #0
 800596c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	2b0c      	cmp	r3, #12
 8005972:	d831      	bhi.n	80059d8 <HAL_TIM_ReadCapturedValue+0x78>
 8005974:	a201      	add	r2, pc, #4	@ (adr r2, 800597c <HAL_TIM_ReadCapturedValue+0x1c>)
 8005976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800597a:	bf00      	nop
 800597c:	080059b1 	.word	0x080059b1
 8005980:	080059d9 	.word	0x080059d9
 8005984:	080059d9 	.word	0x080059d9
 8005988:	080059d9 	.word	0x080059d9
 800598c:	080059bb 	.word	0x080059bb
 8005990:	080059d9 	.word	0x080059d9
 8005994:	080059d9 	.word	0x080059d9
 8005998:	080059d9 	.word	0x080059d9
 800599c:	080059c5 	.word	0x080059c5
 80059a0:	080059d9 	.word	0x080059d9
 80059a4:	080059d9 	.word	0x080059d9
 80059a8:	080059d9 	.word	0x080059d9
 80059ac:	080059cf 	.word	0x080059cf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b6:	60fb      	str	r3, [r7, #12]

      break;
 80059b8:	e00f      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c0:	60fb      	str	r3, [r7, #12]

      break;
 80059c2:	e00a      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059ca:	60fb      	str	r3, [r7, #12]

      break;
 80059cc:	e005      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d4:	60fb      	str	r3, [r7, #12]

      break;
 80059d6:	e000      	b.n	80059da <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80059d8:	bf00      	nop
  }

  return tmpreg;
 80059da:	68fb      	ldr	r3, [r7, #12]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80059f0:	bf00      	nop
 80059f2:	370c      	adds	r7, #12
 80059f4:	46bd      	mov	sp, r7
 80059f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fa:	4770      	bx	lr

080059fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	4a46      	ldr	r2, [pc, #280]	@ (8005b64 <TIM_Base_SetConfig+0x12c>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d013      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a56:	d00f      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a43      	ldr	r2, [pc, #268]	@ (8005b68 <TIM_Base_SetConfig+0x130>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d00b      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	4a42      	ldr	r2, [pc, #264]	@ (8005b6c <TIM_Base_SetConfig+0x134>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d007      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a41      	ldr	r2, [pc, #260]	@ (8005b70 <TIM_Base_SetConfig+0x138>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d003      	beq.n	8005a78 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a40      	ldr	r2, [pc, #256]	@ (8005b74 <TIM_Base_SetConfig+0x13c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d108      	bne.n	8005a8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4a35      	ldr	r2, [pc, #212]	@ (8005b64 <TIM_Base_SetConfig+0x12c>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d01f      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005a98:	d01b      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a32      	ldr	r2, [pc, #200]	@ (8005b68 <TIM_Base_SetConfig+0x130>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d017      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a31      	ldr	r2, [pc, #196]	@ (8005b6c <TIM_Base_SetConfig+0x134>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d013      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a30      	ldr	r2, [pc, #192]	@ (8005b70 <TIM_Base_SetConfig+0x138>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d00f      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2f      	ldr	r2, [pc, #188]	@ (8005b74 <TIM_Base_SetConfig+0x13c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d00b      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2e      	ldr	r2, [pc, #184]	@ (8005b78 <TIM_Base_SetConfig+0x140>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d007      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a2d      	ldr	r2, [pc, #180]	@ (8005b7c <TIM_Base_SetConfig+0x144>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d003      	beq.n	8005ad2 <TIM_Base_SetConfig+0x9a>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a2c      	ldr	r2, [pc, #176]	@ (8005b80 <TIM_Base_SetConfig+0x148>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d108      	bne.n	8005ae4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ada:	683b      	ldr	r3, [r7, #0]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	695b      	ldr	r3, [r3, #20]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68fa      	ldr	r2, [r7, #12]
 8005af6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	689a      	ldr	r2, [r3, #8]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a16      	ldr	r2, [pc, #88]	@ (8005b64 <TIM_Base_SetConfig+0x12c>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00f      	beq.n	8005b30 <TIM_Base_SetConfig+0xf8>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a18      	ldr	r2, [pc, #96]	@ (8005b74 <TIM_Base_SetConfig+0x13c>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d00b      	beq.n	8005b30 <TIM_Base_SetConfig+0xf8>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	4a17      	ldr	r2, [pc, #92]	@ (8005b78 <TIM_Base_SetConfig+0x140>)
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	d007      	beq.n	8005b30 <TIM_Base_SetConfig+0xf8>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	4a16      	ldr	r2, [pc, #88]	@ (8005b7c <TIM_Base_SetConfig+0x144>)
 8005b24:	4293      	cmp	r3, r2
 8005b26:	d003      	beq.n	8005b30 <TIM_Base_SetConfig+0xf8>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	4a15      	ldr	r2, [pc, #84]	@ (8005b80 <TIM_Base_SetConfig+0x148>)
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d103      	bne.n	8005b38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	691a      	ldr	r2, [r3, #16]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	691b      	ldr	r3, [r3, #16]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b01      	cmp	r3, #1
 8005b48:	d105      	bne.n	8005b56 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	691b      	ldr	r3, [r3, #16]
 8005b4e:	f023 0201 	bic.w	r2, r3, #1
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	611a      	str	r2, [r3, #16]
  }
}
 8005b56:	bf00      	nop
 8005b58:	3714      	adds	r7, #20
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	40012c00 	.word	0x40012c00
 8005b68:	40000400 	.word	0x40000400
 8005b6c:	40000800 	.word	0x40000800
 8005b70:	40000c00 	.word	0x40000c00
 8005b74:	40013400 	.word	0x40013400
 8005b78:	40014000 	.word	0x40014000
 8005b7c:	40014400 	.word	0x40014400
 8005b80:	40014800 	.word	0x40014800

08005b84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b087      	sub	sp, #28
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	60b9      	str	r1, [r7, #8]
 8005b8e:	607a      	str	r2, [r7, #4]
 8005b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f023 0201 	bic.w	r2, r3, #1
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	4a26      	ldr	r2, [pc, #152]	@ (8005c48 <TIM_TI1_SetConfig+0xc4>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d017      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bb8:	d013      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4a23      	ldr	r2, [pc, #140]	@ (8005c4c <TIM_TI1_SetConfig+0xc8>)
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d00f      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4a22      	ldr	r2, [pc, #136]	@ (8005c50 <TIM_TI1_SetConfig+0xcc>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d00b      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4a21      	ldr	r2, [pc, #132]	@ (8005c54 <TIM_TI1_SetConfig+0xd0>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d007      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	4a20      	ldr	r2, [pc, #128]	@ (8005c58 <TIM_TI1_SetConfig+0xd4>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_TI1_SetConfig+0x5e>
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	4a1f      	ldr	r2, [pc, #124]	@ (8005c5c <TIM_TI1_SetConfig+0xd8>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d101      	bne.n	8005be6 <TIM_TI1_SetConfig+0x62>
 8005be2:	2301      	movs	r3, #1
 8005be4:	e000      	b.n	8005be8 <TIM_TI1_SetConfig+0x64>
 8005be6:	2300      	movs	r3, #0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	f023 0303 	bic.w	r3, r3, #3
 8005bf2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	617b      	str	r3, [r7, #20]
 8005bfc:	e003      	b.n	8005c06 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	f043 0301 	orr.w	r3, r3, #1
 8005c04:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	011b      	lsls	r3, r3, #4
 8005c12:	b2db      	uxtb	r3, r3
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f023 030a 	bic.w	r3, r3, #10
 8005c20:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	f003 030a 	and.w	r3, r3, #10
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	697a      	ldr	r2, [r7, #20]
 8005c32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	621a      	str	r2, [r3, #32]
}
 8005c3a:	bf00      	nop
 8005c3c:	371c      	adds	r7, #28
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c44:	4770      	bx	lr
 8005c46:	bf00      	nop
 8005c48:	40012c00 	.word	0x40012c00
 8005c4c:	40000400 	.word	0x40000400
 8005c50:	40000800 	.word	0x40000800
 8005c54:	40000c00 	.word	0x40000c00
 8005c58:	40013400 	.word	0x40013400
 8005c5c:	40014000 	.word	0x40014000

08005c60 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b087      	sub	sp, #28
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	60f8      	str	r0, [r7, #12]
 8005c68:	60b9      	str	r1, [r7, #8]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f023 0210 	bic.w	r2, r3, #16
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	021b      	lsls	r3, r3, #8
 8005c92:	693a      	ldr	r2, [r7, #16]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c98:	693b      	ldr	r3, [r7, #16]
 8005c9a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	031b      	lsls	r3, r3, #12
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005cbc:	697a      	ldr	r2, [r7, #20]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	621a      	str	r2, [r3, #32]
}
 8005cce:	bf00      	nop
 8005cd0:	371c      	adds	r7, #28
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005cda:	b480      	push	{r7}
 8005cdc:	b087      	sub	sp, #28
 8005cde:	af00      	add	r7, sp, #0
 8005ce0:	60f8      	str	r0, [r7, #12]
 8005ce2:	60b9      	str	r1, [r7, #8]
 8005ce4:	607a      	str	r2, [r7, #4]
 8005ce6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6a1b      	ldr	r3, [r3, #32]
 8005cf2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	69db      	ldr	r3, [r3, #28]
 8005cfe:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	f023 0303 	bic.w	r3, r3, #3
 8005d06:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005d16:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	011b      	lsls	r3, r3, #4
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	4313      	orrs	r3, r2
 8005d22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8005d2a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	021b      	lsls	r3, r3, #8
 8005d30:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	621a      	str	r2, [r3, #32]
}
 8005d46:	bf00      	nop
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr

08005d52 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005d52:	b480      	push	{r7}
 8005d54:	b087      	sub	sp, #28
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	607a      	str	r2, [r7, #4]
 8005d5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	69db      	ldr	r3, [r3, #28]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005d90:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	031b      	lsls	r3, r3, #12
 8005d96:	b29b      	uxth	r3, r3
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8005da4:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	031b      	lsls	r3, r3, #12
 8005daa:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 8005dae:	697a      	ldr	r2, [r7, #20]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	693a      	ldr	r2, [r7, #16]
 8005db8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	621a      	str	r2, [r3, #32]
}
 8005dc0:	bf00      	nop
 8005dc2:	371c      	adds	r7, #28
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	f003 031f 	and.w	r3, r3, #31
 8005dde:	2201      	movs	r2, #1
 8005de0:	fa02 f303 	lsl.w	r3, r2, r3
 8005de4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	6a1a      	ldr	r2, [r3, #32]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	43db      	mvns	r3, r3
 8005dee:	401a      	ands	r2, r3
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6a1a      	ldr	r2, [r3, #32]
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	f003 031f 	and.w	r3, r3, #31
 8005dfe:	6879      	ldr	r1, [r7, #4]
 8005e00:	fa01 f303 	lsl.w	r3, r1, r3
 8005e04:	431a      	orrs	r2, r3
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
	...

08005e18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b085      	sub	sp, #20
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d101      	bne.n	8005e30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e2c:	2302      	movs	r3, #2
 8005e2e:	e068      	b.n	8005f02 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a2e      	ldr	r2, [pc, #184]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d004      	beq.n	8005e64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d108      	bne.n	8005e76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005e6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005e7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	68fa      	ldr	r2, [r7, #12]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68fa      	ldr	r2, [r7, #12]
 8005e8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1e      	ldr	r2, [pc, #120]	@ (8005f10 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d01d      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ea2:	d018      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a1b      	ldr	r2, [pc, #108]	@ (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d013      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a1a      	ldr	r2, [pc, #104]	@ (8005f1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d00e      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	4a18      	ldr	r2, [pc, #96]	@ (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d009      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a13      	ldr	r2, [pc, #76]	@ (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d004      	beq.n	8005ed6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	4a14      	ldr	r2, [pc, #80]	@ (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d10c      	bne.n	8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005edc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3714      	adds	r7, #20
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
 8005f0e:	bf00      	nop
 8005f10:	40012c00 	.word	0x40012c00
 8005f14:	40013400 	.word	0x40013400
 8005f18:	40000400 	.word	0x40000400
 8005f1c:	40000800 	.word	0x40000800
 8005f20:	40000c00 	.word	0x40000c00
 8005f24:	40014000 	.word	0x40014000

08005f28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f28:	b480      	push	{r7}
 8005f2a:	b083      	sub	sp, #12
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f44:	bf00      	nop
 8005f46:	370c      	adds	r7, #12
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f58:	bf00      	nop
 8005f5a:	370c      	adds	r7, #12
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr

08005f64 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e040      	b.n	8005ff8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d106      	bne.n	8005f8c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f7fb fdc8 	bl	8001b1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2224      	movs	r2, #36	@ 0x24
 8005f90:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	681a      	ldr	r2, [r3, #0]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f022 0201 	bic.w	r2, r2, #1
 8005fa0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fb6a 	bl	8006684 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005fb0:	6878      	ldr	r0, [r7, #4]
 8005fb2:	f000 f8af 	bl	8006114 <UART_SetConfig>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d101      	bne.n	8005fc0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e01b      	b.n	8005ff8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689a      	ldr	r2, [r3, #8]
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fde:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	681a      	ldr	r2, [r3, #0]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f042 0201 	orr.w	r2, r2, #1
 8005fee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 fbe9 	bl	80067c8 <UART_CheckIdleState>
 8005ff6:	4603      	mov	r3, r0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	@ 0x28
 8006004:	af02      	add	r7, sp, #8
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	4613      	mov	r3, r2
 800600e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006014:	2b20      	cmp	r3, #32
 8006016:	d177      	bne.n	8006108 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006018:	68bb      	ldr	r3, [r7, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d002      	beq.n	8006024 <HAL_UART_Transmit+0x24>
 800601e:	88fb      	ldrh	r3, [r7, #6]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e070      	b.n	800610a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2221      	movs	r2, #33	@ 0x21
 8006034:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006036:	f7fc f867 	bl	8002108 <HAL_GetTick>
 800603a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	88fa      	ldrh	r2, [r7, #6]
 8006040:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	88fa      	ldrh	r2, [r7, #6]
 8006048:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006054:	d108      	bne.n	8006068 <HAL_UART_Transmit+0x68>
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d104      	bne.n	8006068 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	e003      	b.n	8006070 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800606c:	2300      	movs	r3, #0
 800606e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006070:	e02f      	b.n	80060d2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	9300      	str	r3, [sp, #0]
 8006076:	697b      	ldr	r3, [r7, #20]
 8006078:	2200      	movs	r2, #0
 800607a:	2180      	movs	r1, #128	@ 0x80
 800607c:	68f8      	ldr	r0, [r7, #12]
 800607e:	f000 fc4b 	bl	8006918 <UART_WaitOnFlagUntilTimeout>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e03b      	b.n	800610a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d10b      	bne.n	80060b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	881a      	ldrh	r2, [r3, #0]
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a4:	b292      	uxth	r2, r2
 80060a6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80060a8:	69bb      	ldr	r3, [r7, #24]
 80060aa:	3302      	adds	r3, #2
 80060ac:	61bb      	str	r3, [r7, #24]
 80060ae:	e007      	b.n	80060c0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80060ba:	69fb      	ldr	r3, [r7, #28]
 80060bc:	3301      	adds	r3, #1
 80060be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	3b01      	subs	r3, #1
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80060d8:	b29b      	uxth	r3, r3
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1c9      	bne.n	8006072 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	9300      	str	r3, [sp, #0]
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	2200      	movs	r2, #0
 80060e6:	2140      	movs	r1, #64	@ 0x40
 80060e8:	68f8      	ldr	r0, [r7, #12]
 80060ea:	f000 fc15 	bl	8006918 <UART_WaitOnFlagUntilTimeout>
 80060ee:	4603      	mov	r3, r0
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d004      	beq.n	80060fe <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2220      	movs	r2, #32
 80060f8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80060fa:	2303      	movs	r3, #3
 80060fc:	e005      	b.n	800610a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	2220      	movs	r2, #32
 8006102:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006104:	2300      	movs	r3, #0
 8006106:	e000      	b.n	800610a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006108:	2302      	movs	r3, #2
  }
}
 800610a:	4618      	mov	r0, r3
 800610c:	3720      	adds	r7, #32
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
	...

08006114 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006114:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006118:	b08a      	sub	sp, #40	@ 0x28
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800611e:	2300      	movs	r3, #0
 8006120:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	691b      	ldr	r3, [r3, #16]
 800612c:	431a      	orrs	r2, r3
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	431a      	orrs	r2, r3
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	69db      	ldr	r3, [r3, #28]
 8006138:	4313      	orrs	r3, r2
 800613a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	4ba4      	ldr	r3, [pc, #656]	@ (80063d4 <UART_SetConfig+0x2c0>)
 8006144:	4013      	ands	r3, r2
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	6812      	ldr	r2, [r2, #0]
 800614a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800614c:	430b      	orrs	r3, r1
 800614e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685b      	ldr	r3, [r3, #4]
 8006156:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	68da      	ldr	r2, [r3, #12]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	430a      	orrs	r2, r1
 8006164:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a99      	ldr	r2, [pc, #612]	@ (80063d8 <UART_SetConfig+0x2c4>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800617c:	4313      	orrs	r3, r2
 800617e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006190:	430a      	orrs	r2, r1
 8006192:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a90      	ldr	r2, [pc, #576]	@ (80063dc <UART_SetConfig+0x2c8>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d126      	bne.n	80061ec <UART_SetConfig+0xd8>
 800619e:	4b90      	ldr	r3, [pc, #576]	@ (80063e0 <UART_SetConfig+0x2cc>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061a4:	f003 0303 	and.w	r3, r3, #3
 80061a8:	2b03      	cmp	r3, #3
 80061aa:	d81b      	bhi.n	80061e4 <UART_SetConfig+0xd0>
 80061ac:	a201      	add	r2, pc, #4	@ (adr r2, 80061b4 <UART_SetConfig+0xa0>)
 80061ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b2:	bf00      	nop
 80061b4:	080061c5 	.word	0x080061c5
 80061b8:	080061d5 	.word	0x080061d5
 80061bc:	080061cd 	.word	0x080061cd
 80061c0:	080061dd 	.word	0x080061dd
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ca:	e116      	b.n	80063fa <UART_SetConfig+0x2e6>
 80061cc:	2302      	movs	r3, #2
 80061ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061d2:	e112      	b.n	80063fa <UART_SetConfig+0x2e6>
 80061d4:	2304      	movs	r3, #4
 80061d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061da:	e10e      	b.n	80063fa <UART_SetConfig+0x2e6>
 80061dc:	2308      	movs	r3, #8
 80061de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061e2:	e10a      	b.n	80063fa <UART_SetConfig+0x2e6>
 80061e4:	2310      	movs	r3, #16
 80061e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80061ea:	e106      	b.n	80063fa <UART_SetConfig+0x2e6>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a7c      	ldr	r2, [pc, #496]	@ (80063e4 <UART_SetConfig+0x2d0>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d138      	bne.n	8006268 <UART_SetConfig+0x154>
 80061f6:	4b7a      	ldr	r3, [pc, #488]	@ (80063e0 <UART_SetConfig+0x2cc>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80061fc:	f003 030c 	and.w	r3, r3, #12
 8006200:	2b0c      	cmp	r3, #12
 8006202:	d82d      	bhi.n	8006260 <UART_SetConfig+0x14c>
 8006204:	a201      	add	r2, pc, #4	@ (adr r2, 800620c <UART_SetConfig+0xf8>)
 8006206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620a:	bf00      	nop
 800620c:	08006241 	.word	0x08006241
 8006210:	08006261 	.word	0x08006261
 8006214:	08006261 	.word	0x08006261
 8006218:	08006261 	.word	0x08006261
 800621c:	08006251 	.word	0x08006251
 8006220:	08006261 	.word	0x08006261
 8006224:	08006261 	.word	0x08006261
 8006228:	08006261 	.word	0x08006261
 800622c:	08006249 	.word	0x08006249
 8006230:	08006261 	.word	0x08006261
 8006234:	08006261 	.word	0x08006261
 8006238:	08006261 	.word	0x08006261
 800623c:	08006259 	.word	0x08006259
 8006240:	2300      	movs	r3, #0
 8006242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006246:	e0d8      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006248:	2302      	movs	r3, #2
 800624a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800624e:	e0d4      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006250:	2304      	movs	r3, #4
 8006252:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006256:	e0d0      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006258:	2308      	movs	r3, #8
 800625a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800625e:	e0cc      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006260:	2310      	movs	r3, #16
 8006262:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006266:	e0c8      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a5e      	ldr	r2, [pc, #376]	@ (80063e8 <UART_SetConfig+0x2d4>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d125      	bne.n	80062be <UART_SetConfig+0x1aa>
 8006272:	4b5b      	ldr	r3, [pc, #364]	@ (80063e0 <UART_SetConfig+0x2cc>)
 8006274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006278:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800627c:	2b30      	cmp	r3, #48	@ 0x30
 800627e:	d016      	beq.n	80062ae <UART_SetConfig+0x19a>
 8006280:	2b30      	cmp	r3, #48	@ 0x30
 8006282:	d818      	bhi.n	80062b6 <UART_SetConfig+0x1a2>
 8006284:	2b20      	cmp	r3, #32
 8006286:	d00a      	beq.n	800629e <UART_SetConfig+0x18a>
 8006288:	2b20      	cmp	r3, #32
 800628a:	d814      	bhi.n	80062b6 <UART_SetConfig+0x1a2>
 800628c:	2b00      	cmp	r3, #0
 800628e:	d002      	beq.n	8006296 <UART_SetConfig+0x182>
 8006290:	2b10      	cmp	r3, #16
 8006292:	d008      	beq.n	80062a6 <UART_SetConfig+0x192>
 8006294:	e00f      	b.n	80062b6 <UART_SetConfig+0x1a2>
 8006296:	2300      	movs	r3, #0
 8006298:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800629c:	e0ad      	b.n	80063fa <UART_SetConfig+0x2e6>
 800629e:	2302      	movs	r3, #2
 80062a0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062a4:	e0a9      	b.n	80063fa <UART_SetConfig+0x2e6>
 80062a6:	2304      	movs	r3, #4
 80062a8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062ac:	e0a5      	b.n	80063fa <UART_SetConfig+0x2e6>
 80062ae:	2308      	movs	r3, #8
 80062b0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062b4:	e0a1      	b.n	80063fa <UART_SetConfig+0x2e6>
 80062b6:	2310      	movs	r3, #16
 80062b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062bc:	e09d      	b.n	80063fa <UART_SetConfig+0x2e6>
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a4a      	ldr	r2, [pc, #296]	@ (80063ec <UART_SetConfig+0x2d8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d125      	bne.n	8006314 <UART_SetConfig+0x200>
 80062c8:	4b45      	ldr	r3, [pc, #276]	@ (80063e0 <UART_SetConfig+0x2cc>)
 80062ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062ce:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80062d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80062d4:	d016      	beq.n	8006304 <UART_SetConfig+0x1f0>
 80062d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80062d8:	d818      	bhi.n	800630c <UART_SetConfig+0x1f8>
 80062da:	2b80      	cmp	r3, #128	@ 0x80
 80062dc:	d00a      	beq.n	80062f4 <UART_SetConfig+0x1e0>
 80062de:	2b80      	cmp	r3, #128	@ 0x80
 80062e0:	d814      	bhi.n	800630c <UART_SetConfig+0x1f8>
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d002      	beq.n	80062ec <UART_SetConfig+0x1d8>
 80062e6:	2b40      	cmp	r3, #64	@ 0x40
 80062e8:	d008      	beq.n	80062fc <UART_SetConfig+0x1e8>
 80062ea:	e00f      	b.n	800630c <UART_SetConfig+0x1f8>
 80062ec:	2300      	movs	r3, #0
 80062ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062f2:	e082      	b.n	80063fa <UART_SetConfig+0x2e6>
 80062f4:	2302      	movs	r3, #2
 80062f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80062fa:	e07e      	b.n	80063fa <UART_SetConfig+0x2e6>
 80062fc:	2304      	movs	r3, #4
 80062fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006302:	e07a      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006304:	2308      	movs	r3, #8
 8006306:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800630a:	e076      	b.n	80063fa <UART_SetConfig+0x2e6>
 800630c:	2310      	movs	r3, #16
 800630e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006312:	e072      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a35      	ldr	r2, [pc, #212]	@ (80063f0 <UART_SetConfig+0x2dc>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d12a      	bne.n	8006374 <UART_SetConfig+0x260>
 800631e:	4b30      	ldr	r3, [pc, #192]	@ (80063e0 <UART_SetConfig+0x2cc>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006324:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006328:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800632c:	d01a      	beq.n	8006364 <UART_SetConfig+0x250>
 800632e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006332:	d81b      	bhi.n	800636c <UART_SetConfig+0x258>
 8006334:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006338:	d00c      	beq.n	8006354 <UART_SetConfig+0x240>
 800633a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800633e:	d815      	bhi.n	800636c <UART_SetConfig+0x258>
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <UART_SetConfig+0x238>
 8006344:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006348:	d008      	beq.n	800635c <UART_SetConfig+0x248>
 800634a:	e00f      	b.n	800636c <UART_SetConfig+0x258>
 800634c:	2300      	movs	r3, #0
 800634e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006352:	e052      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006354:	2302      	movs	r3, #2
 8006356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800635a:	e04e      	b.n	80063fa <UART_SetConfig+0x2e6>
 800635c:	2304      	movs	r3, #4
 800635e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006362:	e04a      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006364:	2308      	movs	r3, #8
 8006366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800636a:	e046      	b.n	80063fa <UART_SetConfig+0x2e6>
 800636c:	2310      	movs	r3, #16
 800636e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006372:	e042      	b.n	80063fa <UART_SetConfig+0x2e6>
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a17      	ldr	r2, [pc, #92]	@ (80063d8 <UART_SetConfig+0x2c4>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d13a      	bne.n	80063f4 <UART_SetConfig+0x2e0>
 800637e:	4b18      	ldr	r3, [pc, #96]	@ (80063e0 <UART_SetConfig+0x2cc>)
 8006380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006384:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800638c:	d01a      	beq.n	80063c4 <UART_SetConfig+0x2b0>
 800638e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006392:	d81b      	bhi.n	80063cc <UART_SetConfig+0x2b8>
 8006394:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006398:	d00c      	beq.n	80063b4 <UART_SetConfig+0x2a0>
 800639a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800639e:	d815      	bhi.n	80063cc <UART_SetConfig+0x2b8>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d003      	beq.n	80063ac <UART_SetConfig+0x298>
 80063a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80063a8:	d008      	beq.n	80063bc <UART_SetConfig+0x2a8>
 80063aa:	e00f      	b.n	80063cc <UART_SetConfig+0x2b8>
 80063ac:	2300      	movs	r3, #0
 80063ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063b2:	e022      	b.n	80063fa <UART_SetConfig+0x2e6>
 80063b4:	2302      	movs	r3, #2
 80063b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ba:	e01e      	b.n	80063fa <UART_SetConfig+0x2e6>
 80063bc:	2304      	movs	r3, #4
 80063be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063c2:	e01a      	b.n	80063fa <UART_SetConfig+0x2e6>
 80063c4:	2308      	movs	r3, #8
 80063c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063ca:	e016      	b.n	80063fa <UART_SetConfig+0x2e6>
 80063cc:	2310      	movs	r3, #16
 80063ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80063d2:	e012      	b.n	80063fa <UART_SetConfig+0x2e6>
 80063d4:	efff69f3 	.word	0xefff69f3
 80063d8:	40008000 	.word	0x40008000
 80063dc:	40013800 	.word	0x40013800
 80063e0:	40021000 	.word	0x40021000
 80063e4:	40004400 	.word	0x40004400
 80063e8:	40004800 	.word	0x40004800
 80063ec:	40004c00 	.word	0x40004c00
 80063f0:	40005000 	.word	0x40005000
 80063f4:	2310      	movs	r3, #16
 80063f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	4a9f      	ldr	r2, [pc, #636]	@ (800667c <UART_SetConfig+0x568>)
 8006400:	4293      	cmp	r3, r2
 8006402:	d17a      	bne.n	80064fa <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006404:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006408:	2b08      	cmp	r3, #8
 800640a:	d824      	bhi.n	8006456 <UART_SetConfig+0x342>
 800640c:	a201      	add	r2, pc, #4	@ (adr r2, 8006414 <UART_SetConfig+0x300>)
 800640e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006412:	bf00      	nop
 8006414:	08006439 	.word	0x08006439
 8006418:	08006457 	.word	0x08006457
 800641c:	08006441 	.word	0x08006441
 8006420:	08006457 	.word	0x08006457
 8006424:	08006447 	.word	0x08006447
 8006428:	08006457 	.word	0x08006457
 800642c:	08006457 	.word	0x08006457
 8006430:	08006457 	.word	0x08006457
 8006434:	0800644f 	.word	0x0800644f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006438:	f7fc ff42 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 800643c:	61f8      	str	r0, [r7, #28]
        break;
 800643e:	e010      	b.n	8006462 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006440:	4b8f      	ldr	r3, [pc, #572]	@ (8006680 <UART_SetConfig+0x56c>)
 8006442:	61fb      	str	r3, [r7, #28]
        break;
 8006444:	e00d      	b.n	8006462 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006446:	f7fc fea3 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800644a:	61f8      	str	r0, [r7, #28]
        break;
 800644c:	e009      	b.n	8006462 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006452:	61fb      	str	r3, [r7, #28]
        break;
 8006454:	e005      	b.n	8006462 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006460:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	2b00      	cmp	r3, #0
 8006466:	f000 80fb 	beq.w	8006660 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	4613      	mov	r3, r2
 8006470:	005b      	lsls	r3, r3, #1
 8006472:	4413      	add	r3, r2
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	429a      	cmp	r2, r3
 8006478:	d305      	bcc.n	8006486 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	429a      	cmp	r2, r3
 8006484:	d903      	bls.n	800648e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800648c:	e0e8      	b.n	8006660 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800648e:	69fb      	ldr	r3, [r7, #28]
 8006490:	2200      	movs	r2, #0
 8006492:	461c      	mov	r4, r3
 8006494:	4615      	mov	r5, r2
 8006496:	f04f 0200 	mov.w	r2, #0
 800649a:	f04f 0300 	mov.w	r3, #0
 800649e:	022b      	lsls	r3, r5, #8
 80064a0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80064a4:	0222      	lsls	r2, r4, #8
 80064a6:	68f9      	ldr	r1, [r7, #12]
 80064a8:	6849      	ldr	r1, [r1, #4]
 80064aa:	0849      	lsrs	r1, r1, #1
 80064ac:	2000      	movs	r0, #0
 80064ae:	4688      	mov	r8, r1
 80064b0:	4681      	mov	r9, r0
 80064b2:	eb12 0a08 	adds.w	sl, r2, r8
 80064b6:	eb43 0b09 	adc.w	fp, r3, r9
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	2200      	movs	r2, #0
 80064c0:	603b      	str	r3, [r7, #0]
 80064c2:	607a      	str	r2, [r7, #4]
 80064c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80064c8:	4650      	mov	r0, sl
 80064ca:	4659      	mov	r1, fp
 80064cc:	f7fa fbbc 	bl	8000c48 <__aeabi_uldivmod>
 80064d0:	4602      	mov	r2, r0
 80064d2:	460b      	mov	r3, r1
 80064d4:	4613      	mov	r3, r2
 80064d6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064de:	d308      	bcc.n	80064f2 <UART_SetConfig+0x3de>
 80064e0:	69bb      	ldr	r3, [r7, #24]
 80064e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064e6:	d204      	bcs.n	80064f2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	60da      	str	r2, [r3, #12]
 80064f0:	e0b6      	b.n	8006660 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80064f8:	e0b2      	b.n	8006660 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	69db      	ldr	r3, [r3, #28]
 80064fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006502:	d15e      	bne.n	80065c2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006504:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006508:	2b08      	cmp	r3, #8
 800650a:	d828      	bhi.n	800655e <UART_SetConfig+0x44a>
 800650c:	a201      	add	r2, pc, #4	@ (adr r2, 8006514 <UART_SetConfig+0x400>)
 800650e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006512:	bf00      	nop
 8006514:	08006539 	.word	0x08006539
 8006518:	08006541 	.word	0x08006541
 800651c:	08006549 	.word	0x08006549
 8006520:	0800655f 	.word	0x0800655f
 8006524:	0800654f 	.word	0x0800654f
 8006528:	0800655f 	.word	0x0800655f
 800652c:	0800655f 	.word	0x0800655f
 8006530:	0800655f 	.word	0x0800655f
 8006534:	08006557 	.word	0x08006557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006538:	f7fc fec2 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 800653c:	61f8      	str	r0, [r7, #28]
        break;
 800653e:	e014      	b.n	800656a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006540:	f7fc fed4 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8006544:	61f8      	str	r0, [r7, #28]
        break;
 8006546:	e010      	b.n	800656a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006548:	4b4d      	ldr	r3, [pc, #308]	@ (8006680 <UART_SetConfig+0x56c>)
 800654a:	61fb      	str	r3, [r7, #28]
        break;
 800654c:	e00d      	b.n	800656a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800654e:	f7fc fe1f 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 8006552:	61f8      	str	r0, [r7, #28]
        break;
 8006554:	e009      	b.n	800656a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006556:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800655a:	61fb      	str	r3, [r7, #28]
        break;
 800655c:	e005      	b.n	800656a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800655e:	2300      	movs	r3, #0
 8006560:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006568:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d077      	beq.n	8006660 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006570:	69fb      	ldr	r3, [r7, #28]
 8006572:	005a      	lsls	r2, r3, #1
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	085b      	lsrs	r3, r3, #1
 800657a:	441a      	add	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	fbb2 f3f3 	udiv	r3, r2, r3
 8006584:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	2b0f      	cmp	r3, #15
 800658a:	d916      	bls.n	80065ba <UART_SetConfig+0x4a6>
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006592:	d212      	bcs.n	80065ba <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	b29b      	uxth	r3, r3
 8006598:	f023 030f 	bic.w	r3, r3, #15
 800659c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800659e:	69bb      	ldr	r3, [r7, #24]
 80065a0:	085b      	lsrs	r3, r3, #1
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	f003 0307 	and.w	r3, r3, #7
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	8afb      	ldrh	r3, [r7, #22]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	8afa      	ldrh	r2, [r7, #22]
 80065b6:	60da      	str	r2, [r3, #12]
 80065b8:	e052      	b.n	8006660 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80065c0:	e04e      	b.n	8006660 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80065c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80065c6:	2b08      	cmp	r3, #8
 80065c8:	d827      	bhi.n	800661a <UART_SetConfig+0x506>
 80065ca:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <UART_SetConfig+0x4bc>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	080065f5 	.word	0x080065f5
 80065d4:	080065fd 	.word	0x080065fd
 80065d8:	08006605 	.word	0x08006605
 80065dc:	0800661b 	.word	0x0800661b
 80065e0:	0800660b 	.word	0x0800660b
 80065e4:	0800661b 	.word	0x0800661b
 80065e8:	0800661b 	.word	0x0800661b
 80065ec:	0800661b 	.word	0x0800661b
 80065f0:	08006613 	.word	0x08006613
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065f4:	f7fc fe64 	bl	80032c0 <HAL_RCC_GetPCLK1Freq>
 80065f8:	61f8      	str	r0, [r7, #28]
        break;
 80065fa:	e014      	b.n	8006626 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065fc:	f7fc fe76 	bl	80032ec <HAL_RCC_GetPCLK2Freq>
 8006600:	61f8      	str	r0, [r7, #28]
        break;
 8006602:	e010      	b.n	8006626 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006604:	4b1e      	ldr	r3, [pc, #120]	@ (8006680 <UART_SetConfig+0x56c>)
 8006606:	61fb      	str	r3, [r7, #28]
        break;
 8006608:	e00d      	b.n	8006626 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800660a:	f7fc fdc1 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800660e:	61f8      	str	r0, [r7, #28]
        break;
 8006610:	e009      	b.n	8006626 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006612:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006616:	61fb      	str	r3, [r7, #28]
        break;
 8006618:	e005      	b.n	8006626 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800661e:	2301      	movs	r3, #1
 8006620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006624:	bf00      	nop
    }

    if (pclk != 0U)
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d019      	beq.n	8006660 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	685b      	ldr	r3, [r3, #4]
 8006630:	085a      	lsrs	r2, r3, #1
 8006632:	69fb      	ldr	r3, [r7, #28]
 8006634:	441a      	add	r2, r3
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	fbb2 f3f3 	udiv	r3, r2, r3
 800663e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	2b0f      	cmp	r3, #15
 8006644:	d909      	bls.n	800665a <UART_SetConfig+0x546>
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800664c:	d205      	bcs.n	800665a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800664e:	69bb      	ldr	r3, [r7, #24]
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	60da      	str	r2, [r3, #12]
 8006658:	e002      	b.n	8006660 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800666c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006670:	4618      	mov	r0, r3
 8006672:	3728      	adds	r7, #40	@ 0x28
 8006674:	46bd      	mov	sp, r7
 8006676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800667a:	bf00      	nop
 800667c:	40008000 	.word	0x40008000
 8006680:	00f42400 	.word	0x00f42400

08006684 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d00a      	beq.n	80066ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	430a      	orrs	r2, r1
 80066ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00a      	beq.n	80066d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	430a      	orrs	r2, r1
 80066ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	f003 0302 	and.w	r3, r3, #2
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d00a      	beq.n	80066f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	430a      	orrs	r2, r1
 80066f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066f6:	f003 0304 	and.w	r3, r3, #4
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d00a      	beq.n	8006714 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	430a      	orrs	r2, r1
 8006712:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673a:	f003 0320 	and.w	r3, r3, #32
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006760:	2b00      	cmp	r3, #0
 8006762:	d01a      	beq.n	800679a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	685b      	ldr	r3, [r3, #4]
 800676a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	430a      	orrs	r2, r1
 8006778:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800677e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006782:	d10a      	bne.n	800679a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	430a      	orrs	r2, r1
 8006798:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800679e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00a      	beq.n	80067bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	430a      	orrs	r2, r1
 80067ba:	605a      	str	r2, [r3, #4]
  }
}
 80067bc:	bf00      	nop
 80067be:	370c      	adds	r7, #12
 80067c0:	46bd      	mov	sp, r7
 80067c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c6:	4770      	bx	lr

080067c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b098      	sub	sp, #96	@ 0x60
 80067cc:	af02      	add	r7, sp, #8
 80067ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80067d8:	f7fb fc96 	bl	8002108 <HAL_GetTick>
 80067dc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b08      	cmp	r3, #8
 80067ea:	d12e      	bne.n	800684a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ec:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067f4:	2200      	movs	r2, #0
 80067f6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f88c 	bl	8006918 <UART_WaitOnFlagUntilTimeout>
 8006800:	4603      	mov	r3, r0
 8006802:	2b00      	cmp	r3, #0
 8006804:	d021      	beq.n	800684a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680e:	e853 3f00 	ldrex	r3, [r3]
 8006812:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006814:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006816:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800681a:	653b      	str	r3, [r7, #80]	@ 0x50
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	461a      	mov	r2, r3
 8006822:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006824:	647b      	str	r3, [r7, #68]	@ 0x44
 8006826:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006828:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800682a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800682c:	e841 2300 	strex	r3, r2, [r1]
 8006830:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e6      	bne.n	8006806 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2220      	movs	r2, #32
 800683c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2200      	movs	r2, #0
 8006842:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006846:	2303      	movs	r3, #3
 8006848:	e062      	b.n	8006910 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b04      	cmp	r3, #4
 8006856:	d149      	bne.n	80068ec <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006858:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006860:	2200      	movs	r2, #0
 8006862:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f856 	bl	8006918 <UART_WaitOnFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d03c      	beq.n	80068ec <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	623b      	str	r3, [r7, #32]
   return(result);
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006886:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	461a      	mov	r2, r3
 800688e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006890:	633b      	str	r3, [r7, #48]	@ 0x30
 8006892:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800689e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e6      	bne.n	8006872 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	3308      	adds	r3, #8
 80068aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	e853 3f00 	ldrex	r3, [r3]
 80068b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f023 0301 	bic.w	r3, r3, #1
 80068ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3308      	adds	r3, #8
 80068c2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068c4:	61fa      	str	r2, [r7, #28]
 80068c6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068c8:	69b9      	ldr	r1, [r7, #24]
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	e841 2300 	strex	r3, r2, [r1]
 80068d0:	617b      	str	r3, [r7, #20]
   return(result);
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d1e5      	bne.n	80068a4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e011      	b.n	8006910 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2220      	movs	r2, #32
 80068f0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2220      	movs	r2, #32
 80068f6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2200      	movs	r2, #0
 800690a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800690e:	2300      	movs	r3, #0
}
 8006910:	4618      	mov	r0, r3
 8006912:	3758      	adds	r7, #88	@ 0x58
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}

08006918 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b084      	sub	sp, #16
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	603b      	str	r3, [r7, #0]
 8006924:	4613      	mov	r3, r2
 8006926:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006928:	e04f      	b.n	80069ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800692a:	69bb      	ldr	r3, [r7, #24]
 800692c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006930:	d04b      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006932:	f7fb fbe9 	bl	8002108 <HAL_GetTick>
 8006936:	4602      	mov	r2, r0
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	1ad3      	subs	r3, r2, r3
 800693c:	69ba      	ldr	r2, [r7, #24]
 800693e:	429a      	cmp	r2, r3
 8006940:	d302      	bcc.n	8006948 <UART_WaitOnFlagUntilTimeout+0x30>
 8006942:	69bb      	ldr	r3, [r7, #24]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d101      	bne.n	800694c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006948:	2303      	movs	r3, #3
 800694a:	e04e      	b.n	80069ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f003 0304 	and.w	r3, r3, #4
 8006956:	2b00      	cmp	r3, #0
 8006958:	d037      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	2b80      	cmp	r3, #128	@ 0x80
 800695e:	d034      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	2b40      	cmp	r3, #64	@ 0x40
 8006964:	d031      	beq.n	80069ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	f003 0308 	and.w	r3, r3, #8
 8006970:	2b08      	cmp	r3, #8
 8006972:	d110      	bne.n	8006996 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2208      	movs	r2, #8
 800697a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800697c:	68f8      	ldr	r0, [r7, #12]
 800697e:	f000 f838 	bl	80069f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2208      	movs	r2, #8
 8006986:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006992:	2301      	movs	r3, #1
 8006994:	e029      	b.n	80069ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69db      	ldr	r3, [r3, #28]
 800699c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069a4:	d111      	bne.n	80069ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f81e 	bl	80069f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2220      	movs	r2, #32
 80069ba:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80069c6:	2303      	movs	r3, #3
 80069c8:	e00f      	b.n	80069ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	69da      	ldr	r2, [r3, #28]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	4013      	ands	r3, r2
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	bf0c      	ite	eq
 80069da:	2301      	moveq	r3, #1
 80069dc:	2300      	movne	r3, #0
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	461a      	mov	r2, r3
 80069e2:	79fb      	ldrb	r3, [r7, #7]
 80069e4:	429a      	cmp	r2, r3
 80069e6:	d0a0      	beq.n	800692a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b095      	sub	sp, #84	@ 0x54
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a02:	e853 3f00 	ldrex	r3, [r3]
 8006a06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	461a      	mov	r2, r3
 8006a16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a18:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a20:	e841 2300 	strex	r3, r2, [r1]
 8006a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d1e6      	bne.n	80069fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a34:	6a3b      	ldr	r3, [r7, #32]
 8006a36:	e853 3f00 	ldrex	r3, [r3]
 8006a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	f023 0301 	bic.w	r3, r3, #1
 8006a42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a4c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a50:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006a52:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a54:	e841 2300 	strex	r3, r2, [r1]
 8006a58:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d1e5      	bne.n	8006a2c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006a64:	2b01      	cmp	r3, #1
 8006a66:	d118      	bne.n	8006a9a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	e853 3f00 	ldrex	r3, [r3]
 8006a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f023 0310 	bic.w	r3, r3, #16
 8006a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	461a      	mov	r2, r3
 8006a84:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a86:	61bb      	str	r3, [r7, #24]
 8006a88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a8a:	6979      	ldr	r1, [r7, #20]
 8006a8c:	69ba      	ldr	r2, [r7, #24]
 8006a8e:	e841 2300 	strex	r3, r2, [r1]
 8006a92:	613b      	str	r3, [r7, #16]
   return(result);
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1e6      	bne.n	8006a68 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2220      	movs	r2, #32
 8006a9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006aae:	bf00      	nop
 8006ab0:	3754      	adds	r7, #84	@ 0x54
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab8:	4770      	bx	lr

08006aba <__cvt>:
 8006aba:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006abe:	ec57 6b10 	vmov	r6, r7, d0
 8006ac2:	2f00      	cmp	r7, #0
 8006ac4:	460c      	mov	r4, r1
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	463b      	mov	r3, r7
 8006aca:	bfbb      	ittet	lt
 8006acc:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006ad0:	461f      	movlt	r7, r3
 8006ad2:	2300      	movge	r3, #0
 8006ad4:	232d      	movlt	r3, #45	@ 0x2d
 8006ad6:	700b      	strb	r3, [r1, #0]
 8006ad8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ada:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006ade:	4691      	mov	r9, r2
 8006ae0:	f023 0820 	bic.w	r8, r3, #32
 8006ae4:	bfbc      	itt	lt
 8006ae6:	4632      	movlt	r2, r6
 8006ae8:	4616      	movlt	r6, r2
 8006aea:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006aee:	d005      	beq.n	8006afc <__cvt+0x42>
 8006af0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006af4:	d100      	bne.n	8006af8 <__cvt+0x3e>
 8006af6:	3401      	adds	r4, #1
 8006af8:	2102      	movs	r1, #2
 8006afa:	e000      	b.n	8006afe <__cvt+0x44>
 8006afc:	2103      	movs	r1, #3
 8006afe:	ab03      	add	r3, sp, #12
 8006b00:	9301      	str	r3, [sp, #4]
 8006b02:	ab02      	add	r3, sp, #8
 8006b04:	9300      	str	r3, [sp, #0]
 8006b06:	ec47 6b10 	vmov	d0, r6, r7
 8006b0a:	4653      	mov	r3, sl
 8006b0c:	4622      	mov	r2, r4
 8006b0e:	f000 ff5f 	bl	80079d0 <_dtoa_r>
 8006b12:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006b16:	4605      	mov	r5, r0
 8006b18:	d119      	bne.n	8006b4e <__cvt+0x94>
 8006b1a:	f019 0f01 	tst.w	r9, #1
 8006b1e:	d00e      	beq.n	8006b3e <__cvt+0x84>
 8006b20:	eb00 0904 	add.w	r9, r0, r4
 8006b24:	2200      	movs	r2, #0
 8006b26:	2300      	movs	r3, #0
 8006b28:	4630      	mov	r0, r6
 8006b2a:	4639      	mov	r1, r7
 8006b2c:	f7f9 ffcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b30:	b108      	cbz	r0, 8006b36 <__cvt+0x7c>
 8006b32:	f8cd 900c 	str.w	r9, [sp, #12]
 8006b36:	2230      	movs	r2, #48	@ 0x30
 8006b38:	9b03      	ldr	r3, [sp, #12]
 8006b3a:	454b      	cmp	r3, r9
 8006b3c:	d31e      	bcc.n	8006b7c <__cvt+0xc2>
 8006b3e:	9b03      	ldr	r3, [sp, #12]
 8006b40:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b42:	1b5b      	subs	r3, r3, r5
 8006b44:	4628      	mov	r0, r5
 8006b46:	6013      	str	r3, [r2, #0]
 8006b48:	b004      	add	sp, #16
 8006b4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b4e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006b52:	eb00 0904 	add.w	r9, r0, r4
 8006b56:	d1e5      	bne.n	8006b24 <__cvt+0x6a>
 8006b58:	7803      	ldrb	r3, [r0, #0]
 8006b5a:	2b30      	cmp	r3, #48	@ 0x30
 8006b5c:	d10a      	bne.n	8006b74 <__cvt+0xba>
 8006b5e:	2200      	movs	r2, #0
 8006b60:	2300      	movs	r3, #0
 8006b62:	4630      	mov	r0, r6
 8006b64:	4639      	mov	r1, r7
 8006b66:	f7f9 ffaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8006b6a:	b918      	cbnz	r0, 8006b74 <__cvt+0xba>
 8006b6c:	f1c4 0401 	rsb	r4, r4, #1
 8006b70:	f8ca 4000 	str.w	r4, [sl]
 8006b74:	f8da 3000 	ldr.w	r3, [sl]
 8006b78:	4499      	add	r9, r3
 8006b7a:	e7d3      	b.n	8006b24 <__cvt+0x6a>
 8006b7c:	1c59      	adds	r1, r3, #1
 8006b7e:	9103      	str	r1, [sp, #12]
 8006b80:	701a      	strb	r2, [r3, #0]
 8006b82:	e7d9      	b.n	8006b38 <__cvt+0x7e>

08006b84 <__exponent>:
 8006b84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b86:	2900      	cmp	r1, #0
 8006b88:	bfba      	itte	lt
 8006b8a:	4249      	neglt	r1, r1
 8006b8c:	232d      	movlt	r3, #45	@ 0x2d
 8006b8e:	232b      	movge	r3, #43	@ 0x2b
 8006b90:	2909      	cmp	r1, #9
 8006b92:	7002      	strb	r2, [r0, #0]
 8006b94:	7043      	strb	r3, [r0, #1]
 8006b96:	dd29      	ble.n	8006bec <__exponent+0x68>
 8006b98:	f10d 0307 	add.w	r3, sp, #7
 8006b9c:	461d      	mov	r5, r3
 8006b9e:	270a      	movs	r7, #10
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	fbb1 f6f7 	udiv	r6, r1, r7
 8006ba6:	fb07 1416 	mls	r4, r7, r6, r1
 8006baa:	3430      	adds	r4, #48	@ 0x30
 8006bac:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	2c63      	cmp	r4, #99	@ 0x63
 8006bb4:	f103 33ff 	add.w	r3, r3, #4294967295
 8006bb8:	4631      	mov	r1, r6
 8006bba:	dcf1      	bgt.n	8006ba0 <__exponent+0x1c>
 8006bbc:	3130      	adds	r1, #48	@ 0x30
 8006bbe:	1e94      	subs	r4, r2, #2
 8006bc0:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006bc4:	1c41      	adds	r1, r0, #1
 8006bc6:	4623      	mov	r3, r4
 8006bc8:	42ab      	cmp	r3, r5
 8006bca:	d30a      	bcc.n	8006be2 <__exponent+0x5e>
 8006bcc:	f10d 0309 	add.w	r3, sp, #9
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	42ac      	cmp	r4, r5
 8006bd4:	bf88      	it	hi
 8006bd6:	2300      	movhi	r3, #0
 8006bd8:	3302      	adds	r3, #2
 8006bda:	4403      	add	r3, r0
 8006bdc:	1a18      	subs	r0, r3, r0
 8006bde:	b003      	add	sp, #12
 8006be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006be6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006bea:	e7ed      	b.n	8006bc8 <__exponent+0x44>
 8006bec:	2330      	movs	r3, #48	@ 0x30
 8006bee:	3130      	adds	r1, #48	@ 0x30
 8006bf0:	7083      	strb	r3, [r0, #2]
 8006bf2:	70c1      	strb	r1, [r0, #3]
 8006bf4:	1d03      	adds	r3, r0, #4
 8006bf6:	e7f1      	b.n	8006bdc <__exponent+0x58>

08006bf8 <_printf_float>:
 8006bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bfc:	b08d      	sub	sp, #52	@ 0x34
 8006bfe:	460c      	mov	r4, r1
 8006c00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006c04:	4616      	mov	r6, r2
 8006c06:	461f      	mov	r7, r3
 8006c08:	4605      	mov	r5, r0
 8006c0a:	f000 fde1 	bl	80077d0 <_localeconv_r>
 8006c0e:	6803      	ldr	r3, [r0, #0]
 8006c10:	9304      	str	r3, [sp, #16]
 8006c12:	4618      	mov	r0, r3
 8006c14:	f7f9 fb2c 	bl	8000270 <strlen>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c1c:	f8d8 3000 	ldr.w	r3, [r8]
 8006c20:	9005      	str	r0, [sp, #20]
 8006c22:	3307      	adds	r3, #7
 8006c24:	f023 0307 	bic.w	r3, r3, #7
 8006c28:	f103 0208 	add.w	r2, r3, #8
 8006c2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006c30:	f8d4 b000 	ldr.w	fp, [r4]
 8006c34:	f8c8 2000 	str.w	r2, [r8]
 8006c38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006c40:	9307      	str	r3, [sp, #28]
 8006c42:	f8cd 8018 	str.w	r8, [sp, #24]
 8006c46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006c4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c4e:	4b9c      	ldr	r3, [pc, #624]	@ (8006ec0 <_printf_float+0x2c8>)
 8006c50:	f04f 32ff 	mov.w	r2, #4294967295
 8006c54:	f7f9 ff6a 	bl	8000b2c <__aeabi_dcmpun>
 8006c58:	bb70      	cbnz	r0, 8006cb8 <_printf_float+0xc0>
 8006c5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006c5e:	4b98      	ldr	r3, [pc, #608]	@ (8006ec0 <_printf_float+0x2c8>)
 8006c60:	f04f 32ff 	mov.w	r2, #4294967295
 8006c64:	f7f9 ff44 	bl	8000af0 <__aeabi_dcmple>
 8006c68:	bb30      	cbnz	r0, 8006cb8 <_printf_float+0xc0>
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4640      	mov	r0, r8
 8006c70:	4649      	mov	r1, r9
 8006c72:	f7f9 ff33 	bl	8000adc <__aeabi_dcmplt>
 8006c76:	b110      	cbz	r0, 8006c7e <_printf_float+0x86>
 8006c78:	232d      	movs	r3, #45	@ 0x2d
 8006c7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c7e:	4a91      	ldr	r2, [pc, #580]	@ (8006ec4 <_printf_float+0x2cc>)
 8006c80:	4b91      	ldr	r3, [pc, #580]	@ (8006ec8 <_printf_float+0x2d0>)
 8006c82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006c86:	bf8c      	ite	hi
 8006c88:	4690      	movhi	r8, r2
 8006c8a:	4698      	movls	r8, r3
 8006c8c:	2303      	movs	r3, #3
 8006c8e:	6123      	str	r3, [r4, #16]
 8006c90:	f02b 0304 	bic.w	r3, fp, #4
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	f04f 0900 	mov.w	r9, #0
 8006c9a:	9700      	str	r7, [sp, #0]
 8006c9c:	4633      	mov	r3, r6
 8006c9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006ca0:	4621      	mov	r1, r4
 8006ca2:	4628      	mov	r0, r5
 8006ca4:	f000 f9d2 	bl	800704c <_printf_common>
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f040 808d 	bne.w	8006dc8 <_printf_float+0x1d0>
 8006cae:	f04f 30ff 	mov.w	r0, #4294967295
 8006cb2:	b00d      	add	sp, #52	@ 0x34
 8006cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb8:	4642      	mov	r2, r8
 8006cba:	464b      	mov	r3, r9
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	4649      	mov	r1, r9
 8006cc0:	f7f9 ff34 	bl	8000b2c <__aeabi_dcmpun>
 8006cc4:	b140      	cbz	r0, 8006cd8 <_printf_float+0xe0>
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	bfbc      	itt	lt
 8006ccc:	232d      	movlt	r3, #45	@ 0x2d
 8006cce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006cd2:	4a7e      	ldr	r2, [pc, #504]	@ (8006ecc <_printf_float+0x2d4>)
 8006cd4:	4b7e      	ldr	r3, [pc, #504]	@ (8006ed0 <_printf_float+0x2d8>)
 8006cd6:	e7d4      	b.n	8006c82 <_printf_float+0x8a>
 8006cd8:	6863      	ldr	r3, [r4, #4]
 8006cda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006cde:	9206      	str	r2, [sp, #24]
 8006ce0:	1c5a      	adds	r2, r3, #1
 8006ce2:	d13b      	bne.n	8006d5c <_printf_float+0x164>
 8006ce4:	2306      	movs	r3, #6
 8006ce6:	6063      	str	r3, [r4, #4]
 8006ce8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006cec:	2300      	movs	r3, #0
 8006cee:	6022      	str	r2, [r4, #0]
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	ab0a      	add	r3, sp, #40	@ 0x28
 8006cf4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006cf8:	ab09      	add	r3, sp, #36	@ 0x24
 8006cfa:	9300      	str	r3, [sp, #0]
 8006cfc:	6861      	ldr	r1, [r4, #4]
 8006cfe:	ec49 8b10 	vmov	d0, r8, r9
 8006d02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006d06:	4628      	mov	r0, r5
 8006d08:	f7ff fed7 	bl	8006aba <__cvt>
 8006d0c:	9b06      	ldr	r3, [sp, #24]
 8006d0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d10:	2b47      	cmp	r3, #71	@ 0x47
 8006d12:	4680      	mov	r8, r0
 8006d14:	d129      	bne.n	8006d6a <_printf_float+0x172>
 8006d16:	1cc8      	adds	r0, r1, #3
 8006d18:	db02      	blt.n	8006d20 <_printf_float+0x128>
 8006d1a:	6863      	ldr	r3, [r4, #4]
 8006d1c:	4299      	cmp	r1, r3
 8006d1e:	dd41      	ble.n	8006da4 <_printf_float+0x1ac>
 8006d20:	f1aa 0a02 	sub.w	sl, sl, #2
 8006d24:	fa5f fa8a 	uxtb.w	sl, sl
 8006d28:	3901      	subs	r1, #1
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006d30:	9109      	str	r1, [sp, #36]	@ 0x24
 8006d32:	f7ff ff27 	bl	8006b84 <__exponent>
 8006d36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d38:	1813      	adds	r3, r2, r0
 8006d3a:	2a01      	cmp	r2, #1
 8006d3c:	4681      	mov	r9, r0
 8006d3e:	6123      	str	r3, [r4, #16]
 8006d40:	dc02      	bgt.n	8006d48 <_printf_float+0x150>
 8006d42:	6822      	ldr	r2, [r4, #0]
 8006d44:	07d2      	lsls	r2, r2, #31
 8006d46:	d501      	bpl.n	8006d4c <_printf_float+0x154>
 8006d48:	3301      	adds	r3, #1
 8006d4a:	6123      	str	r3, [r4, #16]
 8006d4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0a2      	beq.n	8006c9a <_printf_float+0xa2>
 8006d54:	232d      	movs	r3, #45	@ 0x2d
 8006d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d5a:	e79e      	b.n	8006c9a <_printf_float+0xa2>
 8006d5c:	9a06      	ldr	r2, [sp, #24]
 8006d5e:	2a47      	cmp	r2, #71	@ 0x47
 8006d60:	d1c2      	bne.n	8006ce8 <_printf_float+0xf0>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d1c0      	bne.n	8006ce8 <_printf_float+0xf0>
 8006d66:	2301      	movs	r3, #1
 8006d68:	e7bd      	b.n	8006ce6 <_printf_float+0xee>
 8006d6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006d6e:	d9db      	bls.n	8006d28 <_printf_float+0x130>
 8006d70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006d74:	d118      	bne.n	8006da8 <_printf_float+0x1b0>
 8006d76:	2900      	cmp	r1, #0
 8006d78:	6863      	ldr	r3, [r4, #4]
 8006d7a:	dd0b      	ble.n	8006d94 <_printf_float+0x19c>
 8006d7c:	6121      	str	r1, [r4, #16]
 8006d7e:	b913      	cbnz	r3, 8006d86 <_printf_float+0x18e>
 8006d80:	6822      	ldr	r2, [r4, #0]
 8006d82:	07d0      	lsls	r0, r2, #31
 8006d84:	d502      	bpl.n	8006d8c <_printf_float+0x194>
 8006d86:	3301      	adds	r3, #1
 8006d88:	440b      	add	r3, r1
 8006d8a:	6123      	str	r3, [r4, #16]
 8006d8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006d8e:	f04f 0900 	mov.w	r9, #0
 8006d92:	e7db      	b.n	8006d4c <_printf_float+0x154>
 8006d94:	b913      	cbnz	r3, 8006d9c <_printf_float+0x1a4>
 8006d96:	6822      	ldr	r2, [r4, #0]
 8006d98:	07d2      	lsls	r2, r2, #31
 8006d9a:	d501      	bpl.n	8006da0 <_printf_float+0x1a8>
 8006d9c:	3302      	adds	r3, #2
 8006d9e:	e7f4      	b.n	8006d8a <_printf_float+0x192>
 8006da0:	2301      	movs	r3, #1
 8006da2:	e7f2      	b.n	8006d8a <_printf_float+0x192>
 8006da4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006da8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006daa:	4299      	cmp	r1, r3
 8006dac:	db05      	blt.n	8006dba <_printf_float+0x1c2>
 8006dae:	6823      	ldr	r3, [r4, #0]
 8006db0:	6121      	str	r1, [r4, #16]
 8006db2:	07d8      	lsls	r0, r3, #31
 8006db4:	d5ea      	bpl.n	8006d8c <_printf_float+0x194>
 8006db6:	1c4b      	adds	r3, r1, #1
 8006db8:	e7e7      	b.n	8006d8a <_printf_float+0x192>
 8006dba:	2900      	cmp	r1, #0
 8006dbc:	bfd4      	ite	le
 8006dbe:	f1c1 0202 	rsble	r2, r1, #2
 8006dc2:	2201      	movgt	r2, #1
 8006dc4:	4413      	add	r3, r2
 8006dc6:	e7e0      	b.n	8006d8a <_printf_float+0x192>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	055a      	lsls	r2, r3, #21
 8006dcc:	d407      	bmi.n	8006dde <_printf_float+0x1e6>
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	4642      	mov	r2, r8
 8006dd2:	4631      	mov	r1, r6
 8006dd4:	4628      	mov	r0, r5
 8006dd6:	47b8      	blx	r7
 8006dd8:	3001      	adds	r0, #1
 8006dda:	d12b      	bne.n	8006e34 <_printf_float+0x23c>
 8006ddc:	e767      	b.n	8006cae <_printf_float+0xb6>
 8006dde:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006de2:	f240 80dd 	bls.w	8006fa0 <_printf_float+0x3a8>
 8006de6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dea:	2200      	movs	r2, #0
 8006dec:	2300      	movs	r3, #0
 8006dee:	f7f9 fe6b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006df2:	2800      	cmp	r0, #0
 8006df4:	d033      	beq.n	8006e5e <_printf_float+0x266>
 8006df6:	4a37      	ldr	r2, [pc, #220]	@ (8006ed4 <_printf_float+0x2dc>)
 8006df8:	2301      	movs	r3, #1
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	47b8      	blx	r7
 8006e00:	3001      	adds	r0, #1
 8006e02:	f43f af54 	beq.w	8006cae <_printf_float+0xb6>
 8006e06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006e0a:	4543      	cmp	r3, r8
 8006e0c:	db02      	blt.n	8006e14 <_printf_float+0x21c>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	07d8      	lsls	r0, r3, #31
 8006e12:	d50f      	bpl.n	8006e34 <_printf_float+0x23c>
 8006e14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e18:	4631      	mov	r1, r6
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	47b8      	blx	r7
 8006e1e:	3001      	adds	r0, #1
 8006e20:	f43f af45 	beq.w	8006cae <_printf_float+0xb6>
 8006e24:	f04f 0900 	mov.w	r9, #0
 8006e28:	f108 38ff 	add.w	r8, r8, #4294967295
 8006e2c:	f104 0a1a 	add.w	sl, r4, #26
 8006e30:	45c8      	cmp	r8, r9
 8006e32:	dc09      	bgt.n	8006e48 <_printf_float+0x250>
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	079b      	lsls	r3, r3, #30
 8006e38:	f100 8103 	bmi.w	8007042 <_printf_float+0x44a>
 8006e3c:	68e0      	ldr	r0, [r4, #12]
 8006e3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e40:	4298      	cmp	r0, r3
 8006e42:	bfb8      	it	lt
 8006e44:	4618      	movlt	r0, r3
 8006e46:	e734      	b.n	8006cb2 <_printf_float+0xba>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4652      	mov	r2, sl
 8006e4c:	4631      	mov	r1, r6
 8006e4e:	4628      	mov	r0, r5
 8006e50:	47b8      	blx	r7
 8006e52:	3001      	adds	r0, #1
 8006e54:	f43f af2b 	beq.w	8006cae <_printf_float+0xb6>
 8006e58:	f109 0901 	add.w	r9, r9, #1
 8006e5c:	e7e8      	b.n	8006e30 <_printf_float+0x238>
 8006e5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	dc39      	bgt.n	8006ed8 <_printf_float+0x2e0>
 8006e64:	4a1b      	ldr	r2, [pc, #108]	@ (8006ed4 <_printf_float+0x2dc>)
 8006e66:	2301      	movs	r3, #1
 8006e68:	4631      	mov	r1, r6
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	47b8      	blx	r7
 8006e6e:	3001      	adds	r0, #1
 8006e70:	f43f af1d 	beq.w	8006cae <_printf_float+0xb6>
 8006e74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006e78:	ea59 0303 	orrs.w	r3, r9, r3
 8006e7c:	d102      	bne.n	8006e84 <_printf_float+0x28c>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	07d9      	lsls	r1, r3, #31
 8006e82:	d5d7      	bpl.n	8006e34 <_printf_float+0x23c>
 8006e84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006e88:	4631      	mov	r1, r6
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	47b8      	blx	r7
 8006e8e:	3001      	adds	r0, #1
 8006e90:	f43f af0d 	beq.w	8006cae <_printf_float+0xb6>
 8006e94:	f04f 0a00 	mov.w	sl, #0
 8006e98:	f104 0b1a 	add.w	fp, r4, #26
 8006e9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e9e:	425b      	negs	r3, r3
 8006ea0:	4553      	cmp	r3, sl
 8006ea2:	dc01      	bgt.n	8006ea8 <_printf_float+0x2b0>
 8006ea4:	464b      	mov	r3, r9
 8006ea6:	e793      	b.n	8006dd0 <_printf_float+0x1d8>
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	465a      	mov	r2, fp
 8006eac:	4631      	mov	r1, r6
 8006eae:	4628      	mov	r0, r5
 8006eb0:	47b8      	blx	r7
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	f43f aefb 	beq.w	8006cae <_printf_float+0xb6>
 8006eb8:	f10a 0a01 	add.w	sl, sl, #1
 8006ebc:	e7ee      	b.n	8006e9c <_printf_float+0x2a4>
 8006ebe:	bf00      	nop
 8006ec0:	7fefffff 	.word	0x7fefffff
 8006ec4:	08009954 	.word	0x08009954
 8006ec8:	08009950 	.word	0x08009950
 8006ecc:	0800995c 	.word	0x0800995c
 8006ed0:	08009958 	.word	0x08009958
 8006ed4:	08009960 	.word	0x08009960
 8006ed8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006eda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006ede:	4553      	cmp	r3, sl
 8006ee0:	bfa8      	it	ge
 8006ee2:	4653      	movge	r3, sl
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	4699      	mov	r9, r3
 8006ee8:	dc36      	bgt.n	8006f58 <_printf_float+0x360>
 8006eea:	f04f 0b00 	mov.w	fp, #0
 8006eee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ef2:	f104 021a 	add.w	r2, r4, #26
 8006ef6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ef8:	9306      	str	r3, [sp, #24]
 8006efa:	eba3 0309 	sub.w	r3, r3, r9
 8006efe:	455b      	cmp	r3, fp
 8006f00:	dc31      	bgt.n	8006f66 <_printf_float+0x36e>
 8006f02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f04:	459a      	cmp	sl, r3
 8006f06:	dc3a      	bgt.n	8006f7e <_printf_float+0x386>
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	07da      	lsls	r2, r3, #31
 8006f0c:	d437      	bmi.n	8006f7e <_printf_float+0x386>
 8006f0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f10:	ebaa 0903 	sub.w	r9, sl, r3
 8006f14:	9b06      	ldr	r3, [sp, #24]
 8006f16:	ebaa 0303 	sub.w	r3, sl, r3
 8006f1a:	4599      	cmp	r9, r3
 8006f1c:	bfa8      	it	ge
 8006f1e:	4699      	movge	r9, r3
 8006f20:	f1b9 0f00 	cmp.w	r9, #0
 8006f24:	dc33      	bgt.n	8006f8e <_printf_float+0x396>
 8006f26:	f04f 0800 	mov.w	r8, #0
 8006f2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006f2e:	f104 0b1a 	add.w	fp, r4, #26
 8006f32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f34:	ebaa 0303 	sub.w	r3, sl, r3
 8006f38:	eba3 0309 	sub.w	r3, r3, r9
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	f77f af79 	ble.w	8006e34 <_printf_float+0x23c>
 8006f42:	2301      	movs	r3, #1
 8006f44:	465a      	mov	r2, fp
 8006f46:	4631      	mov	r1, r6
 8006f48:	4628      	mov	r0, r5
 8006f4a:	47b8      	blx	r7
 8006f4c:	3001      	adds	r0, #1
 8006f4e:	f43f aeae 	beq.w	8006cae <_printf_float+0xb6>
 8006f52:	f108 0801 	add.w	r8, r8, #1
 8006f56:	e7ec      	b.n	8006f32 <_printf_float+0x33a>
 8006f58:	4642      	mov	r2, r8
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	47b8      	blx	r7
 8006f60:	3001      	adds	r0, #1
 8006f62:	d1c2      	bne.n	8006eea <_printf_float+0x2f2>
 8006f64:	e6a3      	b.n	8006cae <_printf_float+0xb6>
 8006f66:	2301      	movs	r3, #1
 8006f68:	4631      	mov	r1, r6
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	9206      	str	r2, [sp, #24]
 8006f6e:	47b8      	blx	r7
 8006f70:	3001      	adds	r0, #1
 8006f72:	f43f ae9c 	beq.w	8006cae <_printf_float+0xb6>
 8006f76:	9a06      	ldr	r2, [sp, #24]
 8006f78:	f10b 0b01 	add.w	fp, fp, #1
 8006f7c:	e7bb      	b.n	8006ef6 <_printf_float+0x2fe>
 8006f7e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006f82:	4631      	mov	r1, r6
 8006f84:	4628      	mov	r0, r5
 8006f86:	47b8      	blx	r7
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d1c0      	bne.n	8006f0e <_printf_float+0x316>
 8006f8c:	e68f      	b.n	8006cae <_printf_float+0xb6>
 8006f8e:	9a06      	ldr	r2, [sp, #24]
 8006f90:	464b      	mov	r3, r9
 8006f92:	4442      	add	r2, r8
 8006f94:	4631      	mov	r1, r6
 8006f96:	4628      	mov	r0, r5
 8006f98:	47b8      	blx	r7
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	d1c3      	bne.n	8006f26 <_printf_float+0x32e>
 8006f9e:	e686      	b.n	8006cae <_printf_float+0xb6>
 8006fa0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006fa4:	f1ba 0f01 	cmp.w	sl, #1
 8006fa8:	dc01      	bgt.n	8006fae <_printf_float+0x3b6>
 8006faa:	07db      	lsls	r3, r3, #31
 8006fac:	d536      	bpl.n	800701c <_printf_float+0x424>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4642      	mov	r2, r8
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4628      	mov	r0, r5
 8006fb6:	47b8      	blx	r7
 8006fb8:	3001      	adds	r0, #1
 8006fba:	f43f ae78 	beq.w	8006cae <_printf_float+0xb6>
 8006fbe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fc2:	4631      	mov	r1, r6
 8006fc4:	4628      	mov	r0, r5
 8006fc6:	47b8      	blx	r7
 8006fc8:	3001      	adds	r0, #1
 8006fca:	f43f ae70 	beq.w	8006cae <_printf_float+0xb6>
 8006fce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006fda:	f7f9 fd75 	bl	8000ac8 <__aeabi_dcmpeq>
 8006fde:	b9c0      	cbnz	r0, 8007012 <_printf_float+0x41a>
 8006fe0:	4653      	mov	r3, sl
 8006fe2:	f108 0201 	add.w	r2, r8, #1
 8006fe6:	4631      	mov	r1, r6
 8006fe8:	4628      	mov	r0, r5
 8006fea:	47b8      	blx	r7
 8006fec:	3001      	adds	r0, #1
 8006fee:	d10c      	bne.n	800700a <_printf_float+0x412>
 8006ff0:	e65d      	b.n	8006cae <_printf_float+0xb6>
 8006ff2:	2301      	movs	r3, #1
 8006ff4:	465a      	mov	r2, fp
 8006ff6:	4631      	mov	r1, r6
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	47b8      	blx	r7
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	f43f ae56 	beq.w	8006cae <_printf_float+0xb6>
 8007002:	f108 0801 	add.w	r8, r8, #1
 8007006:	45d0      	cmp	r8, sl
 8007008:	dbf3      	blt.n	8006ff2 <_printf_float+0x3fa>
 800700a:	464b      	mov	r3, r9
 800700c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007010:	e6df      	b.n	8006dd2 <_printf_float+0x1da>
 8007012:	f04f 0800 	mov.w	r8, #0
 8007016:	f104 0b1a 	add.w	fp, r4, #26
 800701a:	e7f4      	b.n	8007006 <_printf_float+0x40e>
 800701c:	2301      	movs	r3, #1
 800701e:	4642      	mov	r2, r8
 8007020:	e7e1      	b.n	8006fe6 <_printf_float+0x3ee>
 8007022:	2301      	movs	r3, #1
 8007024:	464a      	mov	r2, r9
 8007026:	4631      	mov	r1, r6
 8007028:	4628      	mov	r0, r5
 800702a:	47b8      	blx	r7
 800702c:	3001      	adds	r0, #1
 800702e:	f43f ae3e 	beq.w	8006cae <_printf_float+0xb6>
 8007032:	f108 0801 	add.w	r8, r8, #1
 8007036:	68e3      	ldr	r3, [r4, #12]
 8007038:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800703a:	1a5b      	subs	r3, r3, r1
 800703c:	4543      	cmp	r3, r8
 800703e:	dcf0      	bgt.n	8007022 <_printf_float+0x42a>
 8007040:	e6fc      	b.n	8006e3c <_printf_float+0x244>
 8007042:	f04f 0800 	mov.w	r8, #0
 8007046:	f104 0919 	add.w	r9, r4, #25
 800704a:	e7f4      	b.n	8007036 <_printf_float+0x43e>

0800704c <_printf_common>:
 800704c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007050:	4616      	mov	r6, r2
 8007052:	4698      	mov	r8, r3
 8007054:	688a      	ldr	r2, [r1, #8]
 8007056:	690b      	ldr	r3, [r1, #16]
 8007058:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800705c:	4293      	cmp	r3, r2
 800705e:	bfb8      	it	lt
 8007060:	4613      	movlt	r3, r2
 8007062:	6033      	str	r3, [r6, #0]
 8007064:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007068:	4607      	mov	r7, r0
 800706a:	460c      	mov	r4, r1
 800706c:	b10a      	cbz	r2, 8007072 <_printf_common+0x26>
 800706e:	3301      	adds	r3, #1
 8007070:	6033      	str	r3, [r6, #0]
 8007072:	6823      	ldr	r3, [r4, #0]
 8007074:	0699      	lsls	r1, r3, #26
 8007076:	bf42      	ittt	mi
 8007078:	6833      	ldrmi	r3, [r6, #0]
 800707a:	3302      	addmi	r3, #2
 800707c:	6033      	strmi	r3, [r6, #0]
 800707e:	6825      	ldr	r5, [r4, #0]
 8007080:	f015 0506 	ands.w	r5, r5, #6
 8007084:	d106      	bne.n	8007094 <_printf_common+0x48>
 8007086:	f104 0a19 	add.w	sl, r4, #25
 800708a:	68e3      	ldr	r3, [r4, #12]
 800708c:	6832      	ldr	r2, [r6, #0]
 800708e:	1a9b      	subs	r3, r3, r2
 8007090:	42ab      	cmp	r3, r5
 8007092:	dc26      	bgt.n	80070e2 <_printf_common+0x96>
 8007094:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007098:	6822      	ldr	r2, [r4, #0]
 800709a:	3b00      	subs	r3, #0
 800709c:	bf18      	it	ne
 800709e:	2301      	movne	r3, #1
 80070a0:	0692      	lsls	r2, r2, #26
 80070a2:	d42b      	bmi.n	80070fc <_printf_common+0xb0>
 80070a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070a8:	4641      	mov	r1, r8
 80070aa:	4638      	mov	r0, r7
 80070ac:	47c8      	blx	r9
 80070ae:	3001      	adds	r0, #1
 80070b0:	d01e      	beq.n	80070f0 <_printf_common+0xa4>
 80070b2:	6823      	ldr	r3, [r4, #0]
 80070b4:	6922      	ldr	r2, [r4, #16]
 80070b6:	f003 0306 	and.w	r3, r3, #6
 80070ba:	2b04      	cmp	r3, #4
 80070bc:	bf02      	ittt	eq
 80070be:	68e5      	ldreq	r5, [r4, #12]
 80070c0:	6833      	ldreq	r3, [r6, #0]
 80070c2:	1aed      	subeq	r5, r5, r3
 80070c4:	68a3      	ldr	r3, [r4, #8]
 80070c6:	bf0c      	ite	eq
 80070c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070cc:	2500      	movne	r5, #0
 80070ce:	4293      	cmp	r3, r2
 80070d0:	bfc4      	itt	gt
 80070d2:	1a9b      	subgt	r3, r3, r2
 80070d4:	18ed      	addgt	r5, r5, r3
 80070d6:	2600      	movs	r6, #0
 80070d8:	341a      	adds	r4, #26
 80070da:	42b5      	cmp	r5, r6
 80070dc:	d11a      	bne.n	8007114 <_printf_common+0xc8>
 80070de:	2000      	movs	r0, #0
 80070e0:	e008      	b.n	80070f4 <_printf_common+0xa8>
 80070e2:	2301      	movs	r3, #1
 80070e4:	4652      	mov	r2, sl
 80070e6:	4641      	mov	r1, r8
 80070e8:	4638      	mov	r0, r7
 80070ea:	47c8      	blx	r9
 80070ec:	3001      	adds	r0, #1
 80070ee:	d103      	bne.n	80070f8 <_printf_common+0xac>
 80070f0:	f04f 30ff 	mov.w	r0, #4294967295
 80070f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070f8:	3501      	adds	r5, #1
 80070fa:	e7c6      	b.n	800708a <_printf_common+0x3e>
 80070fc:	18e1      	adds	r1, r4, r3
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	2030      	movs	r0, #48	@ 0x30
 8007102:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007106:	4422      	add	r2, r4
 8007108:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800710c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007110:	3302      	adds	r3, #2
 8007112:	e7c7      	b.n	80070a4 <_printf_common+0x58>
 8007114:	2301      	movs	r3, #1
 8007116:	4622      	mov	r2, r4
 8007118:	4641      	mov	r1, r8
 800711a:	4638      	mov	r0, r7
 800711c:	47c8      	blx	r9
 800711e:	3001      	adds	r0, #1
 8007120:	d0e6      	beq.n	80070f0 <_printf_common+0xa4>
 8007122:	3601      	adds	r6, #1
 8007124:	e7d9      	b.n	80070da <_printf_common+0x8e>
	...

08007128 <_printf_i>:
 8007128:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800712c:	7e0f      	ldrb	r7, [r1, #24]
 800712e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007130:	2f78      	cmp	r7, #120	@ 0x78
 8007132:	4691      	mov	r9, r2
 8007134:	4680      	mov	r8, r0
 8007136:	460c      	mov	r4, r1
 8007138:	469a      	mov	sl, r3
 800713a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800713e:	d807      	bhi.n	8007150 <_printf_i+0x28>
 8007140:	2f62      	cmp	r7, #98	@ 0x62
 8007142:	d80a      	bhi.n	800715a <_printf_i+0x32>
 8007144:	2f00      	cmp	r7, #0
 8007146:	f000 80d1 	beq.w	80072ec <_printf_i+0x1c4>
 800714a:	2f58      	cmp	r7, #88	@ 0x58
 800714c:	f000 80b8 	beq.w	80072c0 <_printf_i+0x198>
 8007150:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007154:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007158:	e03a      	b.n	80071d0 <_printf_i+0xa8>
 800715a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800715e:	2b15      	cmp	r3, #21
 8007160:	d8f6      	bhi.n	8007150 <_printf_i+0x28>
 8007162:	a101      	add	r1, pc, #4	@ (adr r1, 8007168 <_printf_i+0x40>)
 8007164:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007168:	080071c1 	.word	0x080071c1
 800716c:	080071d5 	.word	0x080071d5
 8007170:	08007151 	.word	0x08007151
 8007174:	08007151 	.word	0x08007151
 8007178:	08007151 	.word	0x08007151
 800717c:	08007151 	.word	0x08007151
 8007180:	080071d5 	.word	0x080071d5
 8007184:	08007151 	.word	0x08007151
 8007188:	08007151 	.word	0x08007151
 800718c:	08007151 	.word	0x08007151
 8007190:	08007151 	.word	0x08007151
 8007194:	080072d3 	.word	0x080072d3
 8007198:	080071ff 	.word	0x080071ff
 800719c:	0800728d 	.word	0x0800728d
 80071a0:	08007151 	.word	0x08007151
 80071a4:	08007151 	.word	0x08007151
 80071a8:	080072f5 	.word	0x080072f5
 80071ac:	08007151 	.word	0x08007151
 80071b0:	080071ff 	.word	0x080071ff
 80071b4:	08007151 	.word	0x08007151
 80071b8:	08007151 	.word	0x08007151
 80071bc:	08007295 	.word	0x08007295
 80071c0:	6833      	ldr	r3, [r6, #0]
 80071c2:	1d1a      	adds	r2, r3, #4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6032      	str	r2, [r6, #0]
 80071c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071d0:	2301      	movs	r3, #1
 80071d2:	e09c      	b.n	800730e <_printf_i+0x1e6>
 80071d4:	6833      	ldr	r3, [r6, #0]
 80071d6:	6820      	ldr	r0, [r4, #0]
 80071d8:	1d19      	adds	r1, r3, #4
 80071da:	6031      	str	r1, [r6, #0]
 80071dc:	0606      	lsls	r6, r0, #24
 80071de:	d501      	bpl.n	80071e4 <_printf_i+0xbc>
 80071e0:	681d      	ldr	r5, [r3, #0]
 80071e2:	e003      	b.n	80071ec <_printf_i+0xc4>
 80071e4:	0645      	lsls	r5, r0, #25
 80071e6:	d5fb      	bpl.n	80071e0 <_printf_i+0xb8>
 80071e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80071ec:	2d00      	cmp	r5, #0
 80071ee:	da03      	bge.n	80071f8 <_printf_i+0xd0>
 80071f0:	232d      	movs	r3, #45	@ 0x2d
 80071f2:	426d      	negs	r5, r5
 80071f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071f8:	4858      	ldr	r0, [pc, #352]	@ (800735c <_printf_i+0x234>)
 80071fa:	230a      	movs	r3, #10
 80071fc:	e011      	b.n	8007222 <_printf_i+0xfa>
 80071fe:	6821      	ldr	r1, [r4, #0]
 8007200:	6833      	ldr	r3, [r6, #0]
 8007202:	0608      	lsls	r0, r1, #24
 8007204:	f853 5b04 	ldr.w	r5, [r3], #4
 8007208:	d402      	bmi.n	8007210 <_printf_i+0xe8>
 800720a:	0649      	lsls	r1, r1, #25
 800720c:	bf48      	it	mi
 800720e:	b2ad      	uxthmi	r5, r5
 8007210:	2f6f      	cmp	r7, #111	@ 0x6f
 8007212:	4852      	ldr	r0, [pc, #328]	@ (800735c <_printf_i+0x234>)
 8007214:	6033      	str	r3, [r6, #0]
 8007216:	bf14      	ite	ne
 8007218:	230a      	movne	r3, #10
 800721a:	2308      	moveq	r3, #8
 800721c:	2100      	movs	r1, #0
 800721e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007222:	6866      	ldr	r6, [r4, #4]
 8007224:	60a6      	str	r6, [r4, #8]
 8007226:	2e00      	cmp	r6, #0
 8007228:	db05      	blt.n	8007236 <_printf_i+0x10e>
 800722a:	6821      	ldr	r1, [r4, #0]
 800722c:	432e      	orrs	r6, r5
 800722e:	f021 0104 	bic.w	r1, r1, #4
 8007232:	6021      	str	r1, [r4, #0]
 8007234:	d04b      	beq.n	80072ce <_printf_i+0x1a6>
 8007236:	4616      	mov	r6, r2
 8007238:	fbb5 f1f3 	udiv	r1, r5, r3
 800723c:	fb03 5711 	mls	r7, r3, r1, r5
 8007240:	5dc7      	ldrb	r7, [r0, r7]
 8007242:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007246:	462f      	mov	r7, r5
 8007248:	42bb      	cmp	r3, r7
 800724a:	460d      	mov	r5, r1
 800724c:	d9f4      	bls.n	8007238 <_printf_i+0x110>
 800724e:	2b08      	cmp	r3, #8
 8007250:	d10b      	bne.n	800726a <_printf_i+0x142>
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	07df      	lsls	r7, r3, #31
 8007256:	d508      	bpl.n	800726a <_printf_i+0x142>
 8007258:	6923      	ldr	r3, [r4, #16]
 800725a:	6861      	ldr	r1, [r4, #4]
 800725c:	4299      	cmp	r1, r3
 800725e:	bfde      	ittt	le
 8007260:	2330      	movle	r3, #48	@ 0x30
 8007262:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007266:	f106 36ff 	addle.w	r6, r6, #4294967295
 800726a:	1b92      	subs	r2, r2, r6
 800726c:	6122      	str	r2, [r4, #16]
 800726e:	f8cd a000 	str.w	sl, [sp]
 8007272:	464b      	mov	r3, r9
 8007274:	aa03      	add	r2, sp, #12
 8007276:	4621      	mov	r1, r4
 8007278:	4640      	mov	r0, r8
 800727a:	f7ff fee7 	bl	800704c <_printf_common>
 800727e:	3001      	adds	r0, #1
 8007280:	d14a      	bne.n	8007318 <_printf_i+0x1f0>
 8007282:	f04f 30ff 	mov.w	r0, #4294967295
 8007286:	b004      	add	sp, #16
 8007288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728c:	6823      	ldr	r3, [r4, #0]
 800728e:	f043 0320 	orr.w	r3, r3, #32
 8007292:	6023      	str	r3, [r4, #0]
 8007294:	4832      	ldr	r0, [pc, #200]	@ (8007360 <_printf_i+0x238>)
 8007296:	2778      	movs	r7, #120	@ 0x78
 8007298:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800729c:	6823      	ldr	r3, [r4, #0]
 800729e:	6831      	ldr	r1, [r6, #0]
 80072a0:	061f      	lsls	r7, r3, #24
 80072a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80072a6:	d402      	bmi.n	80072ae <_printf_i+0x186>
 80072a8:	065f      	lsls	r7, r3, #25
 80072aa:	bf48      	it	mi
 80072ac:	b2ad      	uxthmi	r5, r5
 80072ae:	6031      	str	r1, [r6, #0]
 80072b0:	07d9      	lsls	r1, r3, #31
 80072b2:	bf44      	itt	mi
 80072b4:	f043 0320 	orrmi.w	r3, r3, #32
 80072b8:	6023      	strmi	r3, [r4, #0]
 80072ba:	b11d      	cbz	r5, 80072c4 <_printf_i+0x19c>
 80072bc:	2310      	movs	r3, #16
 80072be:	e7ad      	b.n	800721c <_printf_i+0xf4>
 80072c0:	4826      	ldr	r0, [pc, #152]	@ (800735c <_printf_i+0x234>)
 80072c2:	e7e9      	b.n	8007298 <_printf_i+0x170>
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	f023 0320 	bic.w	r3, r3, #32
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	e7f6      	b.n	80072bc <_printf_i+0x194>
 80072ce:	4616      	mov	r6, r2
 80072d0:	e7bd      	b.n	800724e <_printf_i+0x126>
 80072d2:	6833      	ldr	r3, [r6, #0]
 80072d4:	6825      	ldr	r5, [r4, #0]
 80072d6:	6961      	ldr	r1, [r4, #20]
 80072d8:	1d18      	adds	r0, r3, #4
 80072da:	6030      	str	r0, [r6, #0]
 80072dc:	062e      	lsls	r6, r5, #24
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	d501      	bpl.n	80072e6 <_printf_i+0x1be>
 80072e2:	6019      	str	r1, [r3, #0]
 80072e4:	e002      	b.n	80072ec <_printf_i+0x1c4>
 80072e6:	0668      	lsls	r0, r5, #25
 80072e8:	d5fb      	bpl.n	80072e2 <_printf_i+0x1ba>
 80072ea:	8019      	strh	r1, [r3, #0]
 80072ec:	2300      	movs	r3, #0
 80072ee:	6123      	str	r3, [r4, #16]
 80072f0:	4616      	mov	r6, r2
 80072f2:	e7bc      	b.n	800726e <_printf_i+0x146>
 80072f4:	6833      	ldr	r3, [r6, #0]
 80072f6:	1d1a      	adds	r2, r3, #4
 80072f8:	6032      	str	r2, [r6, #0]
 80072fa:	681e      	ldr	r6, [r3, #0]
 80072fc:	6862      	ldr	r2, [r4, #4]
 80072fe:	2100      	movs	r1, #0
 8007300:	4630      	mov	r0, r6
 8007302:	f7f8 ff65 	bl	80001d0 <memchr>
 8007306:	b108      	cbz	r0, 800730c <_printf_i+0x1e4>
 8007308:	1b80      	subs	r0, r0, r6
 800730a:	6060      	str	r0, [r4, #4]
 800730c:	6863      	ldr	r3, [r4, #4]
 800730e:	6123      	str	r3, [r4, #16]
 8007310:	2300      	movs	r3, #0
 8007312:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007316:	e7aa      	b.n	800726e <_printf_i+0x146>
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	4632      	mov	r2, r6
 800731c:	4649      	mov	r1, r9
 800731e:	4640      	mov	r0, r8
 8007320:	47d0      	blx	sl
 8007322:	3001      	adds	r0, #1
 8007324:	d0ad      	beq.n	8007282 <_printf_i+0x15a>
 8007326:	6823      	ldr	r3, [r4, #0]
 8007328:	079b      	lsls	r3, r3, #30
 800732a:	d413      	bmi.n	8007354 <_printf_i+0x22c>
 800732c:	68e0      	ldr	r0, [r4, #12]
 800732e:	9b03      	ldr	r3, [sp, #12]
 8007330:	4298      	cmp	r0, r3
 8007332:	bfb8      	it	lt
 8007334:	4618      	movlt	r0, r3
 8007336:	e7a6      	b.n	8007286 <_printf_i+0x15e>
 8007338:	2301      	movs	r3, #1
 800733a:	4632      	mov	r2, r6
 800733c:	4649      	mov	r1, r9
 800733e:	4640      	mov	r0, r8
 8007340:	47d0      	blx	sl
 8007342:	3001      	adds	r0, #1
 8007344:	d09d      	beq.n	8007282 <_printf_i+0x15a>
 8007346:	3501      	adds	r5, #1
 8007348:	68e3      	ldr	r3, [r4, #12]
 800734a:	9903      	ldr	r1, [sp, #12]
 800734c:	1a5b      	subs	r3, r3, r1
 800734e:	42ab      	cmp	r3, r5
 8007350:	dcf2      	bgt.n	8007338 <_printf_i+0x210>
 8007352:	e7eb      	b.n	800732c <_printf_i+0x204>
 8007354:	2500      	movs	r5, #0
 8007356:	f104 0619 	add.w	r6, r4, #25
 800735a:	e7f5      	b.n	8007348 <_printf_i+0x220>
 800735c:	08009962 	.word	0x08009962
 8007360:	08009973 	.word	0x08009973

08007364 <std>:
 8007364:	2300      	movs	r3, #0
 8007366:	b510      	push	{r4, lr}
 8007368:	4604      	mov	r4, r0
 800736a:	e9c0 3300 	strd	r3, r3, [r0]
 800736e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007372:	6083      	str	r3, [r0, #8]
 8007374:	8181      	strh	r1, [r0, #12]
 8007376:	6643      	str	r3, [r0, #100]	@ 0x64
 8007378:	81c2      	strh	r2, [r0, #14]
 800737a:	6183      	str	r3, [r0, #24]
 800737c:	4619      	mov	r1, r3
 800737e:	2208      	movs	r2, #8
 8007380:	305c      	adds	r0, #92	@ 0x5c
 8007382:	f000 fa1d 	bl	80077c0 <memset>
 8007386:	4b0d      	ldr	r3, [pc, #52]	@ (80073bc <std+0x58>)
 8007388:	6263      	str	r3, [r4, #36]	@ 0x24
 800738a:	4b0d      	ldr	r3, [pc, #52]	@ (80073c0 <std+0x5c>)
 800738c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800738e:	4b0d      	ldr	r3, [pc, #52]	@ (80073c4 <std+0x60>)
 8007390:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007392:	4b0d      	ldr	r3, [pc, #52]	@ (80073c8 <std+0x64>)
 8007394:	6323      	str	r3, [r4, #48]	@ 0x30
 8007396:	4b0d      	ldr	r3, [pc, #52]	@ (80073cc <std+0x68>)
 8007398:	6224      	str	r4, [r4, #32]
 800739a:	429c      	cmp	r4, r3
 800739c:	d006      	beq.n	80073ac <std+0x48>
 800739e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80073a2:	4294      	cmp	r4, r2
 80073a4:	d002      	beq.n	80073ac <std+0x48>
 80073a6:	33d0      	adds	r3, #208	@ 0xd0
 80073a8:	429c      	cmp	r4, r3
 80073aa:	d105      	bne.n	80073b8 <std+0x54>
 80073ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80073b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b4:	f000 ba80 	b.w	80078b8 <__retarget_lock_init_recursive>
 80073b8:	bd10      	pop	{r4, pc}
 80073ba:	bf00      	nop
 80073bc:	08007611 	.word	0x08007611
 80073c0:	08007633 	.word	0x08007633
 80073c4:	0800766b 	.word	0x0800766b
 80073c8:	0800768f 	.word	0x0800768f
 80073cc:	200003a8 	.word	0x200003a8

080073d0 <stdio_exit_handler>:
 80073d0:	4a02      	ldr	r2, [pc, #8]	@ (80073dc <stdio_exit_handler+0xc>)
 80073d2:	4903      	ldr	r1, [pc, #12]	@ (80073e0 <stdio_exit_handler+0x10>)
 80073d4:	4803      	ldr	r0, [pc, #12]	@ (80073e4 <stdio_exit_handler+0x14>)
 80073d6:	f000 b869 	b.w	80074ac <_fwalk_sglue>
 80073da:	bf00      	nop
 80073dc:	2000000c 	.word	0x2000000c
 80073e0:	0800921d 	.word	0x0800921d
 80073e4:	2000001c 	.word	0x2000001c

080073e8 <cleanup_stdio>:
 80073e8:	6841      	ldr	r1, [r0, #4]
 80073ea:	4b0c      	ldr	r3, [pc, #48]	@ (800741c <cleanup_stdio+0x34>)
 80073ec:	4299      	cmp	r1, r3
 80073ee:	b510      	push	{r4, lr}
 80073f0:	4604      	mov	r4, r0
 80073f2:	d001      	beq.n	80073f8 <cleanup_stdio+0x10>
 80073f4:	f001 ff12 	bl	800921c <_fflush_r>
 80073f8:	68a1      	ldr	r1, [r4, #8]
 80073fa:	4b09      	ldr	r3, [pc, #36]	@ (8007420 <cleanup_stdio+0x38>)
 80073fc:	4299      	cmp	r1, r3
 80073fe:	d002      	beq.n	8007406 <cleanup_stdio+0x1e>
 8007400:	4620      	mov	r0, r4
 8007402:	f001 ff0b 	bl	800921c <_fflush_r>
 8007406:	68e1      	ldr	r1, [r4, #12]
 8007408:	4b06      	ldr	r3, [pc, #24]	@ (8007424 <cleanup_stdio+0x3c>)
 800740a:	4299      	cmp	r1, r3
 800740c:	d004      	beq.n	8007418 <cleanup_stdio+0x30>
 800740e:	4620      	mov	r0, r4
 8007410:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007414:	f001 bf02 	b.w	800921c <_fflush_r>
 8007418:	bd10      	pop	{r4, pc}
 800741a:	bf00      	nop
 800741c:	200003a8 	.word	0x200003a8
 8007420:	20000410 	.word	0x20000410
 8007424:	20000478 	.word	0x20000478

08007428 <global_stdio_init.part.0>:
 8007428:	b510      	push	{r4, lr}
 800742a:	4b0b      	ldr	r3, [pc, #44]	@ (8007458 <global_stdio_init.part.0+0x30>)
 800742c:	4c0b      	ldr	r4, [pc, #44]	@ (800745c <global_stdio_init.part.0+0x34>)
 800742e:	4a0c      	ldr	r2, [pc, #48]	@ (8007460 <global_stdio_init.part.0+0x38>)
 8007430:	601a      	str	r2, [r3, #0]
 8007432:	4620      	mov	r0, r4
 8007434:	2200      	movs	r2, #0
 8007436:	2104      	movs	r1, #4
 8007438:	f7ff ff94 	bl	8007364 <std>
 800743c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007440:	2201      	movs	r2, #1
 8007442:	2109      	movs	r1, #9
 8007444:	f7ff ff8e 	bl	8007364 <std>
 8007448:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800744c:	2202      	movs	r2, #2
 800744e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007452:	2112      	movs	r1, #18
 8007454:	f7ff bf86 	b.w	8007364 <std>
 8007458:	200004e0 	.word	0x200004e0
 800745c:	200003a8 	.word	0x200003a8
 8007460:	080073d1 	.word	0x080073d1

08007464 <__sfp_lock_acquire>:
 8007464:	4801      	ldr	r0, [pc, #4]	@ (800746c <__sfp_lock_acquire+0x8>)
 8007466:	f000 ba28 	b.w	80078ba <__retarget_lock_acquire_recursive>
 800746a:	bf00      	nop
 800746c:	200004e9 	.word	0x200004e9

08007470 <__sfp_lock_release>:
 8007470:	4801      	ldr	r0, [pc, #4]	@ (8007478 <__sfp_lock_release+0x8>)
 8007472:	f000 ba23 	b.w	80078bc <__retarget_lock_release_recursive>
 8007476:	bf00      	nop
 8007478:	200004e9 	.word	0x200004e9

0800747c <__sinit>:
 800747c:	b510      	push	{r4, lr}
 800747e:	4604      	mov	r4, r0
 8007480:	f7ff fff0 	bl	8007464 <__sfp_lock_acquire>
 8007484:	6a23      	ldr	r3, [r4, #32]
 8007486:	b11b      	cbz	r3, 8007490 <__sinit+0x14>
 8007488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800748c:	f7ff bff0 	b.w	8007470 <__sfp_lock_release>
 8007490:	4b04      	ldr	r3, [pc, #16]	@ (80074a4 <__sinit+0x28>)
 8007492:	6223      	str	r3, [r4, #32]
 8007494:	4b04      	ldr	r3, [pc, #16]	@ (80074a8 <__sinit+0x2c>)
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f5      	bne.n	8007488 <__sinit+0xc>
 800749c:	f7ff ffc4 	bl	8007428 <global_stdio_init.part.0>
 80074a0:	e7f2      	b.n	8007488 <__sinit+0xc>
 80074a2:	bf00      	nop
 80074a4:	080073e9 	.word	0x080073e9
 80074a8:	200004e0 	.word	0x200004e0

080074ac <_fwalk_sglue>:
 80074ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074b0:	4607      	mov	r7, r0
 80074b2:	4688      	mov	r8, r1
 80074b4:	4614      	mov	r4, r2
 80074b6:	2600      	movs	r6, #0
 80074b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80074bc:	f1b9 0901 	subs.w	r9, r9, #1
 80074c0:	d505      	bpl.n	80074ce <_fwalk_sglue+0x22>
 80074c2:	6824      	ldr	r4, [r4, #0]
 80074c4:	2c00      	cmp	r4, #0
 80074c6:	d1f7      	bne.n	80074b8 <_fwalk_sglue+0xc>
 80074c8:	4630      	mov	r0, r6
 80074ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074ce:	89ab      	ldrh	r3, [r5, #12]
 80074d0:	2b01      	cmp	r3, #1
 80074d2:	d907      	bls.n	80074e4 <_fwalk_sglue+0x38>
 80074d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80074d8:	3301      	adds	r3, #1
 80074da:	d003      	beq.n	80074e4 <_fwalk_sglue+0x38>
 80074dc:	4629      	mov	r1, r5
 80074de:	4638      	mov	r0, r7
 80074e0:	47c0      	blx	r8
 80074e2:	4306      	orrs	r6, r0
 80074e4:	3568      	adds	r5, #104	@ 0x68
 80074e6:	e7e9      	b.n	80074bc <_fwalk_sglue+0x10>

080074e8 <_puts_r>:
 80074e8:	6a03      	ldr	r3, [r0, #32]
 80074ea:	b570      	push	{r4, r5, r6, lr}
 80074ec:	6884      	ldr	r4, [r0, #8]
 80074ee:	4605      	mov	r5, r0
 80074f0:	460e      	mov	r6, r1
 80074f2:	b90b      	cbnz	r3, 80074f8 <_puts_r+0x10>
 80074f4:	f7ff ffc2 	bl	800747c <__sinit>
 80074f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80074fa:	07db      	lsls	r3, r3, #31
 80074fc:	d405      	bmi.n	800750a <_puts_r+0x22>
 80074fe:	89a3      	ldrh	r3, [r4, #12]
 8007500:	0598      	lsls	r0, r3, #22
 8007502:	d402      	bmi.n	800750a <_puts_r+0x22>
 8007504:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007506:	f000 f9d8 	bl	80078ba <__retarget_lock_acquire_recursive>
 800750a:	89a3      	ldrh	r3, [r4, #12]
 800750c:	0719      	lsls	r1, r3, #28
 800750e:	d502      	bpl.n	8007516 <_puts_r+0x2e>
 8007510:	6923      	ldr	r3, [r4, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d135      	bne.n	8007582 <_puts_r+0x9a>
 8007516:	4621      	mov	r1, r4
 8007518:	4628      	mov	r0, r5
 800751a:	f000 f8fb 	bl	8007714 <__swsetup_r>
 800751e:	b380      	cbz	r0, 8007582 <_puts_r+0x9a>
 8007520:	f04f 35ff 	mov.w	r5, #4294967295
 8007524:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007526:	07da      	lsls	r2, r3, #31
 8007528:	d405      	bmi.n	8007536 <_puts_r+0x4e>
 800752a:	89a3      	ldrh	r3, [r4, #12]
 800752c:	059b      	lsls	r3, r3, #22
 800752e:	d402      	bmi.n	8007536 <_puts_r+0x4e>
 8007530:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007532:	f000 f9c3 	bl	80078bc <__retarget_lock_release_recursive>
 8007536:	4628      	mov	r0, r5
 8007538:	bd70      	pop	{r4, r5, r6, pc}
 800753a:	2b00      	cmp	r3, #0
 800753c:	da04      	bge.n	8007548 <_puts_r+0x60>
 800753e:	69a2      	ldr	r2, [r4, #24]
 8007540:	429a      	cmp	r2, r3
 8007542:	dc17      	bgt.n	8007574 <_puts_r+0x8c>
 8007544:	290a      	cmp	r1, #10
 8007546:	d015      	beq.n	8007574 <_puts_r+0x8c>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	1c5a      	adds	r2, r3, #1
 800754c:	6022      	str	r2, [r4, #0]
 800754e:	7019      	strb	r1, [r3, #0]
 8007550:	68a3      	ldr	r3, [r4, #8]
 8007552:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007556:	3b01      	subs	r3, #1
 8007558:	60a3      	str	r3, [r4, #8]
 800755a:	2900      	cmp	r1, #0
 800755c:	d1ed      	bne.n	800753a <_puts_r+0x52>
 800755e:	2b00      	cmp	r3, #0
 8007560:	da11      	bge.n	8007586 <_puts_r+0x9e>
 8007562:	4622      	mov	r2, r4
 8007564:	210a      	movs	r1, #10
 8007566:	4628      	mov	r0, r5
 8007568:	f000 f895 	bl	8007696 <__swbuf_r>
 800756c:	3001      	adds	r0, #1
 800756e:	d0d7      	beq.n	8007520 <_puts_r+0x38>
 8007570:	250a      	movs	r5, #10
 8007572:	e7d7      	b.n	8007524 <_puts_r+0x3c>
 8007574:	4622      	mov	r2, r4
 8007576:	4628      	mov	r0, r5
 8007578:	f000 f88d 	bl	8007696 <__swbuf_r>
 800757c:	3001      	adds	r0, #1
 800757e:	d1e7      	bne.n	8007550 <_puts_r+0x68>
 8007580:	e7ce      	b.n	8007520 <_puts_r+0x38>
 8007582:	3e01      	subs	r6, #1
 8007584:	e7e4      	b.n	8007550 <_puts_r+0x68>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	6022      	str	r2, [r4, #0]
 800758c:	220a      	movs	r2, #10
 800758e:	701a      	strb	r2, [r3, #0]
 8007590:	e7ee      	b.n	8007570 <_puts_r+0x88>
	...

08007594 <puts>:
 8007594:	4b02      	ldr	r3, [pc, #8]	@ (80075a0 <puts+0xc>)
 8007596:	4601      	mov	r1, r0
 8007598:	6818      	ldr	r0, [r3, #0]
 800759a:	f7ff bfa5 	b.w	80074e8 <_puts_r>
 800759e:	bf00      	nop
 80075a0:	20000018 	.word	0x20000018

080075a4 <sniprintf>:
 80075a4:	b40c      	push	{r2, r3}
 80075a6:	b530      	push	{r4, r5, lr}
 80075a8:	4b18      	ldr	r3, [pc, #96]	@ (800760c <sniprintf+0x68>)
 80075aa:	1e0c      	subs	r4, r1, #0
 80075ac:	681d      	ldr	r5, [r3, #0]
 80075ae:	b09d      	sub	sp, #116	@ 0x74
 80075b0:	da08      	bge.n	80075c4 <sniprintf+0x20>
 80075b2:	238b      	movs	r3, #139	@ 0x8b
 80075b4:	602b      	str	r3, [r5, #0]
 80075b6:	f04f 30ff 	mov.w	r0, #4294967295
 80075ba:	b01d      	add	sp, #116	@ 0x74
 80075bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075c0:	b002      	add	sp, #8
 80075c2:	4770      	bx	lr
 80075c4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80075c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80075cc:	f04f 0300 	mov.w	r3, #0
 80075d0:	931b      	str	r3, [sp, #108]	@ 0x6c
 80075d2:	bf14      	ite	ne
 80075d4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80075d8:	4623      	moveq	r3, r4
 80075da:	9304      	str	r3, [sp, #16]
 80075dc:	9307      	str	r3, [sp, #28]
 80075de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80075e2:	9002      	str	r0, [sp, #8]
 80075e4:	9006      	str	r0, [sp, #24]
 80075e6:	f8ad 3016 	strh.w	r3, [sp, #22]
 80075ea:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80075ec:	ab21      	add	r3, sp, #132	@ 0x84
 80075ee:	a902      	add	r1, sp, #8
 80075f0:	4628      	mov	r0, r5
 80075f2:	9301      	str	r3, [sp, #4]
 80075f4:	f001 fc92 	bl	8008f1c <_svfiprintf_r>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	bfbc      	itt	lt
 80075fc:	238b      	movlt	r3, #139	@ 0x8b
 80075fe:	602b      	strlt	r3, [r5, #0]
 8007600:	2c00      	cmp	r4, #0
 8007602:	d0da      	beq.n	80075ba <sniprintf+0x16>
 8007604:	9b02      	ldr	r3, [sp, #8]
 8007606:	2200      	movs	r2, #0
 8007608:	701a      	strb	r2, [r3, #0]
 800760a:	e7d6      	b.n	80075ba <sniprintf+0x16>
 800760c:	20000018 	.word	0x20000018

08007610 <__sread>:
 8007610:	b510      	push	{r4, lr}
 8007612:	460c      	mov	r4, r1
 8007614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007618:	f000 f900 	bl	800781c <_read_r>
 800761c:	2800      	cmp	r0, #0
 800761e:	bfab      	itete	ge
 8007620:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007622:	89a3      	ldrhlt	r3, [r4, #12]
 8007624:	181b      	addge	r3, r3, r0
 8007626:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800762a:	bfac      	ite	ge
 800762c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800762e:	81a3      	strhlt	r3, [r4, #12]
 8007630:	bd10      	pop	{r4, pc}

08007632 <__swrite>:
 8007632:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007636:	461f      	mov	r7, r3
 8007638:	898b      	ldrh	r3, [r1, #12]
 800763a:	05db      	lsls	r3, r3, #23
 800763c:	4605      	mov	r5, r0
 800763e:	460c      	mov	r4, r1
 8007640:	4616      	mov	r6, r2
 8007642:	d505      	bpl.n	8007650 <__swrite+0x1e>
 8007644:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007648:	2302      	movs	r3, #2
 800764a:	2200      	movs	r2, #0
 800764c:	f000 f8d4 	bl	80077f8 <_lseek_r>
 8007650:	89a3      	ldrh	r3, [r4, #12]
 8007652:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007656:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800765a:	81a3      	strh	r3, [r4, #12]
 800765c:	4632      	mov	r2, r6
 800765e:	463b      	mov	r3, r7
 8007660:	4628      	mov	r0, r5
 8007662:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007666:	f000 b8eb 	b.w	8007840 <_write_r>

0800766a <__sseek>:
 800766a:	b510      	push	{r4, lr}
 800766c:	460c      	mov	r4, r1
 800766e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007672:	f000 f8c1 	bl	80077f8 <_lseek_r>
 8007676:	1c43      	adds	r3, r0, #1
 8007678:	89a3      	ldrh	r3, [r4, #12]
 800767a:	bf15      	itete	ne
 800767c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800767e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007682:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007686:	81a3      	strheq	r3, [r4, #12]
 8007688:	bf18      	it	ne
 800768a:	81a3      	strhne	r3, [r4, #12]
 800768c:	bd10      	pop	{r4, pc}

0800768e <__sclose>:
 800768e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007692:	f000 b8a1 	b.w	80077d8 <_close_r>

08007696 <__swbuf_r>:
 8007696:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007698:	460e      	mov	r6, r1
 800769a:	4614      	mov	r4, r2
 800769c:	4605      	mov	r5, r0
 800769e:	b118      	cbz	r0, 80076a8 <__swbuf_r+0x12>
 80076a0:	6a03      	ldr	r3, [r0, #32]
 80076a2:	b90b      	cbnz	r3, 80076a8 <__swbuf_r+0x12>
 80076a4:	f7ff feea 	bl	800747c <__sinit>
 80076a8:	69a3      	ldr	r3, [r4, #24]
 80076aa:	60a3      	str	r3, [r4, #8]
 80076ac:	89a3      	ldrh	r3, [r4, #12]
 80076ae:	071a      	lsls	r2, r3, #28
 80076b0:	d501      	bpl.n	80076b6 <__swbuf_r+0x20>
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	b943      	cbnz	r3, 80076c8 <__swbuf_r+0x32>
 80076b6:	4621      	mov	r1, r4
 80076b8:	4628      	mov	r0, r5
 80076ba:	f000 f82b 	bl	8007714 <__swsetup_r>
 80076be:	b118      	cbz	r0, 80076c8 <__swbuf_r+0x32>
 80076c0:	f04f 37ff 	mov.w	r7, #4294967295
 80076c4:	4638      	mov	r0, r7
 80076c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c8:	6823      	ldr	r3, [r4, #0]
 80076ca:	6922      	ldr	r2, [r4, #16]
 80076cc:	1a98      	subs	r0, r3, r2
 80076ce:	6963      	ldr	r3, [r4, #20]
 80076d0:	b2f6      	uxtb	r6, r6
 80076d2:	4283      	cmp	r3, r0
 80076d4:	4637      	mov	r7, r6
 80076d6:	dc05      	bgt.n	80076e4 <__swbuf_r+0x4e>
 80076d8:	4621      	mov	r1, r4
 80076da:	4628      	mov	r0, r5
 80076dc:	f001 fd9e 	bl	800921c <_fflush_r>
 80076e0:	2800      	cmp	r0, #0
 80076e2:	d1ed      	bne.n	80076c0 <__swbuf_r+0x2a>
 80076e4:	68a3      	ldr	r3, [r4, #8]
 80076e6:	3b01      	subs	r3, #1
 80076e8:	60a3      	str	r3, [r4, #8]
 80076ea:	6823      	ldr	r3, [r4, #0]
 80076ec:	1c5a      	adds	r2, r3, #1
 80076ee:	6022      	str	r2, [r4, #0]
 80076f0:	701e      	strb	r6, [r3, #0]
 80076f2:	6962      	ldr	r2, [r4, #20]
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d004      	beq.n	8007704 <__swbuf_r+0x6e>
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	07db      	lsls	r3, r3, #31
 80076fe:	d5e1      	bpl.n	80076c4 <__swbuf_r+0x2e>
 8007700:	2e0a      	cmp	r6, #10
 8007702:	d1df      	bne.n	80076c4 <__swbuf_r+0x2e>
 8007704:	4621      	mov	r1, r4
 8007706:	4628      	mov	r0, r5
 8007708:	f001 fd88 	bl	800921c <_fflush_r>
 800770c:	2800      	cmp	r0, #0
 800770e:	d0d9      	beq.n	80076c4 <__swbuf_r+0x2e>
 8007710:	e7d6      	b.n	80076c0 <__swbuf_r+0x2a>
	...

08007714 <__swsetup_r>:
 8007714:	b538      	push	{r3, r4, r5, lr}
 8007716:	4b29      	ldr	r3, [pc, #164]	@ (80077bc <__swsetup_r+0xa8>)
 8007718:	4605      	mov	r5, r0
 800771a:	6818      	ldr	r0, [r3, #0]
 800771c:	460c      	mov	r4, r1
 800771e:	b118      	cbz	r0, 8007728 <__swsetup_r+0x14>
 8007720:	6a03      	ldr	r3, [r0, #32]
 8007722:	b90b      	cbnz	r3, 8007728 <__swsetup_r+0x14>
 8007724:	f7ff feaa 	bl	800747c <__sinit>
 8007728:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800772c:	0719      	lsls	r1, r3, #28
 800772e:	d422      	bmi.n	8007776 <__swsetup_r+0x62>
 8007730:	06da      	lsls	r2, r3, #27
 8007732:	d407      	bmi.n	8007744 <__swsetup_r+0x30>
 8007734:	2209      	movs	r2, #9
 8007736:	602a      	str	r2, [r5, #0]
 8007738:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800773c:	81a3      	strh	r3, [r4, #12]
 800773e:	f04f 30ff 	mov.w	r0, #4294967295
 8007742:	e033      	b.n	80077ac <__swsetup_r+0x98>
 8007744:	0758      	lsls	r0, r3, #29
 8007746:	d512      	bpl.n	800776e <__swsetup_r+0x5a>
 8007748:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800774a:	b141      	cbz	r1, 800775e <__swsetup_r+0x4a>
 800774c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007750:	4299      	cmp	r1, r3
 8007752:	d002      	beq.n	800775a <__swsetup_r+0x46>
 8007754:	4628      	mov	r0, r5
 8007756:	f000 ff0b 	bl	8008570 <_free_r>
 800775a:	2300      	movs	r3, #0
 800775c:	6363      	str	r3, [r4, #52]	@ 0x34
 800775e:	89a3      	ldrh	r3, [r4, #12]
 8007760:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007764:	81a3      	strh	r3, [r4, #12]
 8007766:	2300      	movs	r3, #0
 8007768:	6063      	str	r3, [r4, #4]
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	89a3      	ldrh	r3, [r4, #12]
 8007770:	f043 0308 	orr.w	r3, r3, #8
 8007774:	81a3      	strh	r3, [r4, #12]
 8007776:	6923      	ldr	r3, [r4, #16]
 8007778:	b94b      	cbnz	r3, 800778e <__swsetup_r+0x7a>
 800777a:	89a3      	ldrh	r3, [r4, #12]
 800777c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007780:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007784:	d003      	beq.n	800778e <__swsetup_r+0x7a>
 8007786:	4621      	mov	r1, r4
 8007788:	4628      	mov	r0, r5
 800778a:	f001 fd95 	bl	80092b8 <__smakebuf_r>
 800778e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007792:	f013 0201 	ands.w	r2, r3, #1
 8007796:	d00a      	beq.n	80077ae <__swsetup_r+0x9a>
 8007798:	2200      	movs	r2, #0
 800779a:	60a2      	str	r2, [r4, #8]
 800779c:	6962      	ldr	r2, [r4, #20]
 800779e:	4252      	negs	r2, r2
 80077a0:	61a2      	str	r2, [r4, #24]
 80077a2:	6922      	ldr	r2, [r4, #16]
 80077a4:	b942      	cbnz	r2, 80077b8 <__swsetup_r+0xa4>
 80077a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80077aa:	d1c5      	bne.n	8007738 <__swsetup_r+0x24>
 80077ac:	bd38      	pop	{r3, r4, r5, pc}
 80077ae:	0799      	lsls	r1, r3, #30
 80077b0:	bf58      	it	pl
 80077b2:	6962      	ldrpl	r2, [r4, #20]
 80077b4:	60a2      	str	r2, [r4, #8]
 80077b6:	e7f4      	b.n	80077a2 <__swsetup_r+0x8e>
 80077b8:	2000      	movs	r0, #0
 80077ba:	e7f7      	b.n	80077ac <__swsetup_r+0x98>
 80077bc:	20000018 	.word	0x20000018

080077c0 <memset>:
 80077c0:	4402      	add	r2, r0
 80077c2:	4603      	mov	r3, r0
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d100      	bne.n	80077ca <memset+0xa>
 80077c8:	4770      	bx	lr
 80077ca:	f803 1b01 	strb.w	r1, [r3], #1
 80077ce:	e7f9      	b.n	80077c4 <memset+0x4>

080077d0 <_localeconv_r>:
 80077d0:	4800      	ldr	r0, [pc, #0]	@ (80077d4 <_localeconv_r+0x4>)
 80077d2:	4770      	bx	lr
 80077d4:	20000158 	.word	0x20000158

080077d8 <_close_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d06      	ldr	r5, [pc, #24]	@ (80077f4 <_close_r+0x1c>)
 80077dc:	2300      	movs	r3, #0
 80077de:	4604      	mov	r4, r0
 80077e0:	4608      	mov	r0, r1
 80077e2:	602b      	str	r3, [r5, #0]
 80077e4:	f7fa fa8c 	bl	8001d00 <_close>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_close_r+0x1a>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_close_r+0x1a>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	200004e4 	.word	0x200004e4

080077f8 <_lseek_r>:
 80077f8:	b538      	push	{r3, r4, r5, lr}
 80077fa:	4d07      	ldr	r5, [pc, #28]	@ (8007818 <_lseek_r+0x20>)
 80077fc:	4604      	mov	r4, r0
 80077fe:	4608      	mov	r0, r1
 8007800:	4611      	mov	r1, r2
 8007802:	2200      	movs	r2, #0
 8007804:	602a      	str	r2, [r5, #0]
 8007806:	461a      	mov	r2, r3
 8007808:	f7fa faa1 	bl	8001d4e <_lseek>
 800780c:	1c43      	adds	r3, r0, #1
 800780e:	d102      	bne.n	8007816 <_lseek_r+0x1e>
 8007810:	682b      	ldr	r3, [r5, #0]
 8007812:	b103      	cbz	r3, 8007816 <_lseek_r+0x1e>
 8007814:	6023      	str	r3, [r4, #0]
 8007816:	bd38      	pop	{r3, r4, r5, pc}
 8007818:	200004e4 	.word	0x200004e4

0800781c <_read_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4d07      	ldr	r5, [pc, #28]	@ (800783c <_read_r+0x20>)
 8007820:	4604      	mov	r4, r0
 8007822:	4608      	mov	r0, r1
 8007824:	4611      	mov	r1, r2
 8007826:	2200      	movs	r2, #0
 8007828:	602a      	str	r2, [r5, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f7fa fa2f 	bl	8001c8e <_read>
 8007830:	1c43      	adds	r3, r0, #1
 8007832:	d102      	bne.n	800783a <_read_r+0x1e>
 8007834:	682b      	ldr	r3, [r5, #0]
 8007836:	b103      	cbz	r3, 800783a <_read_r+0x1e>
 8007838:	6023      	str	r3, [r4, #0]
 800783a:	bd38      	pop	{r3, r4, r5, pc}
 800783c:	200004e4 	.word	0x200004e4

08007840 <_write_r>:
 8007840:	b538      	push	{r3, r4, r5, lr}
 8007842:	4d07      	ldr	r5, [pc, #28]	@ (8007860 <_write_r+0x20>)
 8007844:	4604      	mov	r4, r0
 8007846:	4608      	mov	r0, r1
 8007848:	4611      	mov	r1, r2
 800784a:	2200      	movs	r2, #0
 800784c:	602a      	str	r2, [r5, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	f7fa fa3a 	bl	8001cc8 <_write>
 8007854:	1c43      	adds	r3, r0, #1
 8007856:	d102      	bne.n	800785e <_write_r+0x1e>
 8007858:	682b      	ldr	r3, [r5, #0]
 800785a:	b103      	cbz	r3, 800785e <_write_r+0x1e>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	bd38      	pop	{r3, r4, r5, pc}
 8007860:	200004e4 	.word	0x200004e4

08007864 <__errno>:
 8007864:	4b01      	ldr	r3, [pc, #4]	@ (800786c <__errno+0x8>)
 8007866:	6818      	ldr	r0, [r3, #0]
 8007868:	4770      	bx	lr
 800786a:	bf00      	nop
 800786c:	20000018 	.word	0x20000018

08007870 <__libc_init_array>:
 8007870:	b570      	push	{r4, r5, r6, lr}
 8007872:	4d0d      	ldr	r5, [pc, #52]	@ (80078a8 <__libc_init_array+0x38>)
 8007874:	4c0d      	ldr	r4, [pc, #52]	@ (80078ac <__libc_init_array+0x3c>)
 8007876:	1b64      	subs	r4, r4, r5
 8007878:	10a4      	asrs	r4, r4, #2
 800787a:	2600      	movs	r6, #0
 800787c:	42a6      	cmp	r6, r4
 800787e:	d109      	bne.n	8007894 <__libc_init_array+0x24>
 8007880:	4d0b      	ldr	r5, [pc, #44]	@ (80078b0 <__libc_init_array+0x40>)
 8007882:	4c0c      	ldr	r4, [pc, #48]	@ (80078b4 <__libc_init_array+0x44>)
 8007884:	f001 ffd4 	bl	8009830 <_init>
 8007888:	1b64      	subs	r4, r4, r5
 800788a:	10a4      	asrs	r4, r4, #2
 800788c:	2600      	movs	r6, #0
 800788e:	42a6      	cmp	r6, r4
 8007890:	d105      	bne.n	800789e <__libc_init_array+0x2e>
 8007892:	bd70      	pop	{r4, r5, r6, pc}
 8007894:	f855 3b04 	ldr.w	r3, [r5], #4
 8007898:	4798      	blx	r3
 800789a:	3601      	adds	r6, #1
 800789c:	e7ee      	b.n	800787c <__libc_init_array+0xc>
 800789e:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a2:	4798      	blx	r3
 80078a4:	3601      	adds	r6, #1
 80078a6:	e7f2      	b.n	800788e <__libc_init_array+0x1e>
 80078a8:	08009ccc 	.word	0x08009ccc
 80078ac:	08009ccc 	.word	0x08009ccc
 80078b0:	08009ccc 	.word	0x08009ccc
 80078b4:	08009cd0 	.word	0x08009cd0

080078b8 <__retarget_lock_init_recursive>:
 80078b8:	4770      	bx	lr

080078ba <__retarget_lock_acquire_recursive>:
 80078ba:	4770      	bx	lr

080078bc <__retarget_lock_release_recursive>:
 80078bc:	4770      	bx	lr

080078be <quorem>:
 80078be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078c2:	6903      	ldr	r3, [r0, #16]
 80078c4:	690c      	ldr	r4, [r1, #16]
 80078c6:	42a3      	cmp	r3, r4
 80078c8:	4607      	mov	r7, r0
 80078ca:	db7e      	blt.n	80079ca <quorem+0x10c>
 80078cc:	3c01      	subs	r4, #1
 80078ce:	f101 0814 	add.w	r8, r1, #20
 80078d2:	00a3      	lsls	r3, r4, #2
 80078d4:	f100 0514 	add.w	r5, r0, #20
 80078d8:	9300      	str	r3, [sp, #0]
 80078da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078de:	9301      	str	r3, [sp, #4]
 80078e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80078e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078e8:	3301      	adds	r3, #1
 80078ea:	429a      	cmp	r2, r3
 80078ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80078f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80078f4:	d32e      	bcc.n	8007954 <quorem+0x96>
 80078f6:	f04f 0a00 	mov.w	sl, #0
 80078fa:	46c4      	mov	ip, r8
 80078fc:	46ae      	mov	lr, r5
 80078fe:	46d3      	mov	fp, sl
 8007900:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007904:	b298      	uxth	r0, r3
 8007906:	fb06 a000 	mla	r0, r6, r0, sl
 800790a:	0c02      	lsrs	r2, r0, #16
 800790c:	0c1b      	lsrs	r3, r3, #16
 800790e:	fb06 2303 	mla	r3, r6, r3, r2
 8007912:	f8de 2000 	ldr.w	r2, [lr]
 8007916:	b280      	uxth	r0, r0
 8007918:	b292      	uxth	r2, r2
 800791a:	1a12      	subs	r2, r2, r0
 800791c:	445a      	add	r2, fp
 800791e:	f8de 0000 	ldr.w	r0, [lr]
 8007922:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007926:	b29b      	uxth	r3, r3
 8007928:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800792c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007930:	b292      	uxth	r2, r2
 8007932:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007936:	45e1      	cmp	r9, ip
 8007938:	f84e 2b04 	str.w	r2, [lr], #4
 800793c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007940:	d2de      	bcs.n	8007900 <quorem+0x42>
 8007942:	9b00      	ldr	r3, [sp, #0]
 8007944:	58eb      	ldr	r3, [r5, r3]
 8007946:	b92b      	cbnz	r3, 8007954 <quorem+0x96>
 8007948:	9b01      	ldr	r3, [sp, #4]
 800794a:	3b04      	subs	r3, #4
 800794c:	429d      	cmp	r5, r3
 800794e:	461a      	mov	r2, r3
 8007950:	d32f      	bcc.n	80079b2 <quorem+0xf4>
 8007952:	613c      	str	r4, [r7, #16]
 8007954:	4638      	mov	r0, r7
 8007956:	f001 f97d 	bl	8008c54 <__mcmp>
 800795a:	2800      	cmp	r0, #0
 800795c:	db25      	blt.n	80079aa <quorem+0xec>
 800795e:	4629      	mov	r1, r5
 8007960:	2000      	movs	r0, #0
 8007962:	f858 2b04 	ldr.w	r2, [r8], #4
 8007966:	f8d1 c000 	ldr.w	ip, [r1]
 800796a:	fa1f fe82 	uxth.w	lr, r2
 800796e:	fa1f f38c 	uxth.w	r3, ip
 8007972:	eba3 030e 	sub.w	r3, r3, lr
 8007976:	4403      	add	r3, r0
 8007978:	0c12      	lsrs	r2, r2, #16
 800797a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800797e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007982:	b29b      	uxth	r3, r3
 8007984:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007988:	45c1      	cmp	r9, r8
 800798a:	f841 3b04 	str.w	r3, [r1], #4
 800798e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007992:	d2e6      	bcs.n	8007962 <quorem+0xa4>
 8007994:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007998:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800799c:	b922      	cbnz	r2, 80079a8 <quorem+0xea>
 800799e:	3b04      	subs	r3, #4
 80079a0:	429d      	cmp	r5, r3
 80079a2:	461a      	mov	r2, r3
 80079a4:	d30b      	bcc.n	80079be <quorem+0x100>
 80079a6:	613c      	str	r4, [r7, #16]
 80079a8:	3601      	adds	r6, #1
 80079aa:	4630      	mov	r0, r6
 80079ac:	b003      	add	sp, #12
 80079ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079b2:	6812      	ldr	r2, [r2, #0]
 80079b4:	3b04      	subs	r3, #4
 80079b6:	2a00      	cmp	r2, #0
 80079b8:	d1cb      	bne.n	8007952 <quorem+0x94>
 80079ba:	3c01      	subs	r4, #1
 80079bc:	e7c6      	b.n	800794c <quorem+0x8e>
 80079be:	6812      	ldr	r2, [r2, #0]
 80079c0:	3b04      	subs	r3, #4
 80079c2:	2a00      	cmp	r2, #0
 80079c4:	d1ef      	bne.n	80079a6 <quorem+0xe8>
 80079c6:	3c01      	subs	r4, #1
 80079c8:	e7ea      	b.n	80079a0 <quorem+0xe2>
 80079ca:	2000      	movs	r0, #0
 80079cc:	e7ee      	b.n	80079ac <quorem+0xee>
	...

080079d0 <_dtoa_r>:
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	69c7      	ldr	r7, [r0, #28]
 80079d6:	b097      	sub	sp, #92	@ 0x5c
 80079d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80079dc:	ec55 4b10 	vmov	r4, r5, d0
 80079e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80079e2:	9107      	str	r1, [sp, #28]
 80079e4:	4681      	mov	r9, r0
 80079e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80079e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80079ea:	b97f      	cbnz	r7, 8007a0c <_dtoa_r+0x3c>
 80079ec:	2010      	movs	r0, #16
 80079ee:	f000 fe09 	bl	8008604 <malloc>
 80079f2:	4602      	mov	r2, r0
 80079f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80079f8:	b920      	cbnz	r0, 8007a04 <_dtoa_r+0x34>
 80079fa:	4ba9      	ldr	r3, [pc, #676]	@ (8007ca0 <_dtoa_r+0x2d0>)
 80079fc:	21ef      	movs	r1, #239	@ 0xef
 80079fe:	48a9      	ldr	r0, [pc, #676]	@ (8007ca4 <_dtoa_r+0x2d4>)
 8007a00:	f001 fcf0 	bl	80093e4 <__assert_func>
 8007a04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a08:	6007      	str	r7, [r0, #0]
 8007a0a:	60c7      	str	r7, [r0, #12]
 8007a0c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a10:	6819      	ldr	r1, [r3, #0]
 8007a12:	b159      	cbz	r1, 8007a2c <_dtoa_r+0x5c>
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	604a      	str	r2, [r1, #4]
 8007a18:	2301      	movs	r3, #1
 8007a1a:	4093      	lsls	r3, r2
 8007a1c:	608b      	str	r3, [r1, #8]
 8007a1e:	4648      	mov	r0, r9
 8007a20:	f000 fee6 	bl	80087f0 <_Bfree>
 8007a24:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]
 8007a2c:	1e2b      	subs	r3, r5, #0
 8007a2e:	bfb9      	ittee	lt
 8007a30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a34:	9305      	strlt	r3, [sp, #20]
 8007a36:	2300      	movge	r3, #0
 8007a38:	6033      	strge	r3, [r6, #0]
 8007a3a:	9f05      	ldr	r7, [sp, #20]
 8007a3c:	4b9a      	ldr	r3, [pc, #616]	@ (8007ca8 <_dtoa_r+0x2d8>)
 8007a3e:	bfbc      	itt	lt
 8007a40:	2201      	movlt	r2, #1
 8007a42:	6032      	strlt	r2, [r6, #0]
 8007a44:	43bb      	bics	r3, r7
 8007a46:	d112      	bne.n	8007a6e <_dtoa_r+0x9e>
 8007a48:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a4e:	6013      	str	r3, [r2, #0]
 8007a50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007a54:	4323      	orrs	r3, r4
 8007a56:	f000 855a 	beq.w	800850e <_dtoa_r+0xb3e>
 8007a5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a5c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007cbc <_dtoa_r+0x2ec>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	f000 855c 	beq.w	800851e <_dtoa_r+0xb4e>
 8007a66:	f10a 0303 	add.w	r3, sl, #3
 8007a6a:	f000 bd56 	b.w	800851a <_dtoa_r+0xb4a>
 8007a6e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007a72:	2200      	movs	r2, #0
 8007a74:	ec51 0b17 	vmov	r0, r1, d7
 8007a78:	2300      	movs	r3, #0
 8007a7a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8007a7e:	f7f9 f823 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a82:	4680      	mov	r8, r0
 8007a84:	b158      	cbz	r0, 8007a9e <_dtoa_r+0xce>
 8007a86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6013      	str	r3, [r2, #0]
 8007a8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007a8e:	b113      	cbz	r3, 8007a96 <_dtoa_r+0xc6>
 8007a90:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007a92:	4b86      	ldr	r3, [pc, #536]	@ (8007cac <_dtoa_r+0x2dc>)
 8007a94:	6013      	str	r3, [r2, #0]
 8007a96:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007cc0 <_dtoa_r+0x2f0>
 8007a9a:	f000 bd40 	b.w	800851e <_dtoa_r+0xb4e>
 8007a9e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007aa2:	aa14      	add	r2, sp, #80	@ 0x50
 8007aa4:	a915      	add	r1, sp, #84	@ 0x54
 8007aa6:	4648      	mov	r0, r9
 8007aa8:	f001 f984 	bl	8008db4 <__d2b>
 8007aac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007ab0:	9002      	str	r0, [sp, #8]
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	d078      	beq.n	8007ba8 <_dtoa_r+0x1d8>
 8007ab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007ab8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8007abc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ac0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007ac4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007ac8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007acc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007ad0:	4619      	mov	r1, r3
 8007ad2:	2200      	movs	r2, #0
 8007ad4:	4b76      	ldr	r3, [pc, #472]	@ (8007cb0 <_dtoa_r+0x2e0>)
 8007ad6:	f7f8 fbd7 	bl	8000288 <__aeabi_dsub>
 8007ada:	a36b      	add	r3, pc, #428	@ (adr r3, 8007c88 <_dtoa_r+0x2b8>)
 8007adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ae0:	f7f8 fd8a 	bl	80005f8 <__aeabi_dmul>
 8007ae4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007c90 <_dtoa_r+0x2c0>)
 8007ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aea:	f7f8 fbcf 	bl	800028c <__adddf3>
 8007aee:	4604      	mov	r4, r0
 8007af0:	4630      	mov	r0, r6
 8007af2:	460d      	mov	r5, r1
 8007af4:	f7f8 fd16 	bl	8000524 <__aeabi_i2d>
 8007af8:	a367      	add	r3, pc, #412	@ (adr r3, 8007c98 <_dtoa_r+0x2c8>)
 8007afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007afe:	f7f8 fd7b 	bl	80005f8 <__aeabi_dmul>
 8007b02:	4602      	mov	r2, r0
 8007b04:	460b      	mov	r3, r1
 8007b06:	4620      	mov	r0, r4
 8007b08:	4629      	mov	r1, r5
 8007b0a:	f7f8 fbbf 	bl	800028c <__adddf3>
 8007b0e:	4604      	mov	r4, r0
 8007b10:	460d      	mov	r5, r1
 8007b12:	f7f9 f821 	bl	8000b58 <__aeabi_d2iz>
 8007b16:	2200      	movs	r2, #0
 8007b18:	4607      	mov	r7, r0
 8007b1a:	2300      	movs	r3, #0
 8007b1c:	4620      	mov	r0, r4
 8007b1e:	4629      	mov	r1, r5
 8007b20:	f7f8 ffdc 	bl	8000adc <__aeabi_dcmplt>
 8007b24:	b140      	cbz	r0, 8007b38 <_dtoa_r+0x168>
 8007b26:	4638      	mov	r0, r7
 8007b28:	f7f8 fcfc 	bl	8000524 <__aeabi_i2d>
 8007b2c:	4622      	mov	r2, r4
 8007b2e:	462b      	mov	r3, r5
 8007b30:	f7f8 ffca 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b34:	b900      	cbnz	r0, 8007b38 <_dtoa_r+0x168>
 8007b36:	3f01      	subs	r7, #1
 8007b38:	2f16      	cmp	r7, #22
 8007b3a:	d852      	bhi.n	8007be2 <_dtoa_r+0x212>
 8007b3c:	4b5d      	ldr	r3, [pc, #372]	@ (8007cb4 <_dtoa_r+0x2e4>)
 8007b3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007b4a:	f7f8 ffc7 	bl	8000adc <__aeabi_dcmplt>
 8007b4e:	2800      	cmp	r0, #0
 8007b50:	d049      	beq.n	8007be6 <_dtoa_r+0x216>
 8007b52:	3f01      	subs	r7, #1
 8007b54:	2300      	movs	r3, #0
 8007b56:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b58:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b5a:	1b9b      	subs	r3, r3, r6
 8007b5c:	1e5a      	subs	r2, r3, #1
 8007b5e:	bf45      	ittet	mi
 8007b60:	f1c3 0301 	rsbmi	r3, r3, #1
 8007b64:	9300      	strmi	r3, [sp, #0]
 8007b66:	2300      	movpl	r3, #0
 8007b68:	2300      	movmi	r3, #0
 8007b6a:	9206      	str	r2, [sp, #24]
 8007b6c:	bf54      	ite	pl
 8007b6e:	9300      	strpl	r3, [sp, #0]
 8007b70:	9306      	strmi	r3, [sp, #24]
 8007b72:	2f00      	cmp	r7, #0
 8007b74:	db39      	blt.n	8007bea <_dtoa_r+0x21a>
 8007b76:	9b06      	ldr	r3, [sp, #24]
 8007b78:	970d      	str	r7, [sp, #52]	@ 0x34
 8007b7a:	443b      	add	r3, r7
 8007b7c:	9306      	str	r3, [sp, #24]
 8007b7e:	2300      	movs	r3, #0
 8007b80:	9308      	str	r3, [sp, #32]
 8007b82:	9b07      	ldr	r3, [sp, #28]
 8007b84:	2b09      	cmp	r3, #9
 8007b86:	d863      	bhi.n	8007c50 <_dtoa_r+0x280>
 8007b88:	2b05      	cmp	r3, #5
 8007b8a:	bfc4      	itt	gt
 8007b8c:	3b04      	subgt	r3, #4
 8007b8e:	9307      	strgt	r3, [sp, #28]
 8007b90:	9b07      	ldr	r3, [sp, #28]
 8007b92:	f1a3 0302 	sub.w	r3, r3, #2
 8007b96:	bfcc      	ite	gt
 8007b98:	2400      	movgt	r4, #0
 8007b9a:	2401      	movle	r4, #1
 8007b9c:	2b03      	cmp	r3, #3
 8007b9e:	d863      	bhi.n	8007c68 <_dtoa_r+0x298>
 8007ba0:	e8df f003 	tbb	[pc, r3]
 8007ba4:	2b375452 	.word	0x2b375452
 8007ba8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007bac:	441e      	add	r6, r3
 8007bae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007bb2:	2b20      	cmp	r3, #32
 8007bb4:	bfc1      	itttt	gt
 8007bb6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bba:	409f      	lslgt	r7, r3
 8007bbc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bc0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bc4:	bfd6      	itet	le
 8007bc6:	f1c3 0320 	rsble	r3, r3, #32
 8007bca:	ea47 0003 	orrgt.w	r0, r7, r3
 8007bce:	fa04 f003 	lslle.w	r0, r4, r3
 8007bd2:	f7f8 fc97 	bl	8000504 <__aeabi_ui2d>
 8007bd6:	2201      	movs	r2, #1
 8007bd8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007bdc:	3e01      	subs	r6, #1
 8007bde:	9212      	str	r2, [sp, #72]	@ 0x48
 8007be0:	e776      	b.n	8007ad0 <_dtoa_r+0x100>
 8007be2:	2301      	movs	r3, #1
 8007be4:	e7b7      	b.n	8007b56 <_dtoa_r+0x186>
 8007be6:	9010      	str	r0, [sp, #64]	@ 0x40
 8007be8:	e7b6      	b.n	8007b58 <_dtoa_r+0x188>
 8007bea:	9b00      	ldr	r3, [sp, #0]
 8007bec:	1bdb      	subs	r3, r3, r7
 8007bee:	9300      	str	r3, [sp, #0]
 8007bf0:	427b      	negs	r3, r7
 8007bf2:	9308      	str	r3, [sp, #32]
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007bf8:	e7c3      	b.n	8007b82 <_dtoa_r+0x1b2>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bfe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c00:	eb07 0b03 	add.w	fp, r7, r3
 8007c04:	f10b 0301 	add.w	r3, fp, #1
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	9303      	str	r3, [sp, #12]
 8007c0c:	bfb8      	it	lt
 8007c0e:	2301      	movlt	r3, #1
 8007c10:	e006      	b.n	8007c20 <_dtoa_r+0x250>
 8007c12:	2301      	movs	r3, #1
 8007c14:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c16:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	dd28      	ble.n	8007c6e <_dtoa_r+0x29e>
 8007c1c:	469b      	mov	fp, r3
 8007c1e:	9303      	str	r3, [sp, #12]
 8007c20:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007c24:	2100      	movs	r1, #0
 8007c26:	2204      	movs	r2, #4
 8007c28:	f102 0514 	add.w	r5, r2, #20
 8007c2c:	429d      	cmp	r5, r3
 8007c2e:	d926      	bls.n	8007c7e <_dtoa_r+0x2ae>
 8007c30:	6041      	str	r1, [r0, #4]
 8007c32:	4648      	mov	r0, r9
 8007c34:	f000 fd9c 	bl	8008770 <_Balloc>
 8007c38:	4682      	mov	sl, r0
 8007c3a:	2800      	cmp	r0, #0
 8007c3c:	d142      	bne.n	8007cc4 <_dtoa_r+0x2f4>
 8007c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8007cb8 <_dtoa_r+0x2e8>)
 8007c40:	4602      	mov	r2, r0
 8007c42:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c46:	e6da      	b.n	80079fe <_dtoa_r+0x2e>
 8007c48:	2300      	movs	r3, #0
 8007c4a:	e7e3      	b.n	8007c14 <_dtoa_r+0x244>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e7d5      	b.n	8007bfc <_dtoa_r+0x22c>
 8007c50:	2401      	movs	r4, #1
 8007c52:	2300      	movs	r3, #0
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	9409      	str	r4, [sp, #36]	@ 0x24
 8007c58:	f04f 3bff 	mov.w	fp, #4294967295
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c62:	2312      	movs	r3, #18
 8007c64:	920c      	str	r2, [sp, #48]	@ 0x30
 8007c66:	e7db      	b.n	8007c20 <_dtoa_r+0x250>
 8007c68:	2301      	movs	r3, #1
 8007c6a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c6c:	e7f4      	b.n	8007c58 <_dtoa_r+0x288>
 8007c6e:	f04f 0b01 	mov.w	fp, #1
 8007c72:	f8cd b00c 	str.w	fp, [sp, #12]
 8007c76:	465b      	mov	r3, fp
 8007c78:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007c7c:	e7d0      	b.n	8007c20 <_dtoa_r+0x250>
 8007c7e:	3101      	adds	r1, #1
 8007c80:	0052      	lsls	r2, r2, #1
 8007c82:	e7d1      	b.n	8007c28 <_dtoa_r+0x258>
 8007c84:	f3af 8000 	nop.w
 8007c88:	636f4361 	.word	0x636f4361
 8007c8c:	3fd287a7 	.word	0x3fd287a7
 8007c90:	8b60c8b3 	.word	0x8b60c8b3
 8007c94:	3fc68a28 	.word	0x3fc68a28
 8007c98:	509f79fb 	.word	0x509f79fb
 8007c9c:	3fd34413 	.word	0x3fd34413
 8007ca0:	08009991 	.word	0x08009991
 8007ca4:	080099a8 	.word	0x080099a8
 8007ca8:	7ff00000 	.word	0x7ff00000
 8007cac:	08009961 	.word	0x08009961
 8007cb0:	3ff80000 	.word	0x3ff80000
 8007cb4:	08009af8 	.word	0x08009af8
 8007cb8:	08009a00 	.word	0x08009a00
 8007cbc:	0800998d 	.word	0x0800998d
 8007cc0:	08009960 	.word	0x08009960
 8007cc4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007cc8:	6018      	str	r0, [r3, #0]
 8007cca:	9b03      	ldr	r3, [sp, #12]
 8007ccc:	2b0e      	cmp	r3, #14
 8007cce:	f200 80a1 	bhi.w	8007e14 <_dtoa_r+0x444>
 8007cd2:	2c00      	cmp	r4, #0
 8007cd4:	f000 809e 	beq.w	8007e14 <_dtoa_r+0x444>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	dd33      	ble.n	8007d44 <_dtoa_r+0x374>
 8007cdc:	4b9c      	ldr	r3, [pc, #624]	@ (8007f50 <_dtoa_r+0x580>)
 8007cde:	f007 020f 	and.w	r2, r7, #15
 8007ce2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007ce6:	ed93 7b00 	vldr	d7, [r3]
 8007cea:	05f8      	lsls	r0, r7, #23
 8007cec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007cf0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007cf4:	d516      	bpl.n	8007d24 <_dtoa_r+0x354>
 8007cf6:	4b97      	ldr	r3, [pc, #604]	@ (8007f54 <_dtoa_r+0x584>)
 8007cf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007cfc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d00:	f7f8 fda4 	bl	800084c <__aeabi_ddiv>
 8007d04:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d08:	f004 040f 	and.w	r4, r4, #15
 8007d0c:	2603      	movs	r6, #3
 8007d0e:	4d91      	ldr	r5, [pc, #580]	@ (8007f54 <_dtoa_r+0x584>)
 8007d10:	b954      	cbnz	r4, 8007d28 <_dtoa_r+0x358>
 8007d12:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007d16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d1a:	f7f8 fd97 	bl	800084c <__aeabi_ddiv>
 8007d1e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d22:	e028      	b.n	8007d76 <_dtoa_r+0x3a6>
 8007d24:	2602      	movs	r6, #2
 8007d26:	e7f2      	b.n	8007d0e <_dtoa_r+0x33e>
 8007d28:	07e1      	lsls	r1, r4, #31
 8007d2a:	d508      	bpl.n	8007d3e <_dtoa_r+0x36e>
 8007d2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007d30:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d34:	f7f8 fc60 	bl	80005f8 <__aeabi_dmul>
 8007d38:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007d3c:	3601      	adds	r6, #1
 8007d3e:	1064      	asrs	r4, r4, #1
 8007d40:	3508      	adds	r5, #8
 8007d42:	e7e5      	b.n	8007d10 <_dtoa_r+0x340>
 8007d44:	f000 80af 	beq.w	8007ea6 <_dtoa_r+0x4d6>
 8007d48:	427c      	negs	r4, r7
 8007d4a:	4b81      	ldr	r3, [pc, #516]	@ (8007f50 <_dtoa_r+0x580>)
 8007d4c:	4d81      	ldr	r5, [pc, #516]	@ (8007f54 <_dtoa_r+0x584>)
 8007d4e:	f004 020f 	and.w	r2, r4, #15
 8007d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007d5e:	f7f8 fc4b 	bl	80005f8 <__aeabi_dmul>
 8007d62:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d66:	1124      	asrs	r4, r4, #4
 8007d68:	2300      	movs	r3, #0
 8007d6a:	2602      	movs	r6, #2
 8007d6c:	2c00      	cmp	r4, #0
 8007d6e:	f040 808f 	bne.w	8007e90 <_dtoa_r+0x4c0>
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d1d3      	bne.n	8007d1e <_dtoa_r+0x34e>
 8007d76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007d78:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	f000 8094 	beq.w	8007eaa <_dtoa_r+0x4da>
 8007d82:	4b75      	ldr	r3, [pc, #468]	@ (8007f58 <_dtoa_r+0x588>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	4620      	mov	r0, r4
 8007d88:	4629      	mov	r1, r5
 8007d8a:	f7f8 fea7 	bl	8000adc <__aeabi_dcmplt>
 8007d8e:	2800      	cmp	r0, #0
 8007d90:	f000 808b 	beq.w	8007eaa <_dtoa_r+0x4da>
 8007d94:	9b03      	ldr	r3, [sp, #12]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 8087 	beq.w	8007eaa <_dtoa_r+0x4da>
 8007d9c:	f1bb 0f00 	cmp.w	fp, #0
 8007da0:	dd34      	ble.n	8007e0c <_dtoa_r+0x43c>
 8007da2:	4620      	mov	r0, r4
 8007da4:	4b6d      	ldr	r3, [pc, #436]	@ (8007f5c <_dtoa_r+0x58c>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	4629      	mov	r1, r5
 8007daa:	f7f8 fc25 	bl	80005f8 <__aeabi_dmul>
 8007dae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007db2:	f107 38ff 	add.w	r8, r7, #4294967295
 8007db6:	3601      	adds	r6, #1
 8007db8:	465c      	mov	r4, fp
 8007dba:	4630      	mov	r0, r6
 8007dbc:	f7f8 fbb2 	bl	8000524 <__aeabi_i2d>
 8007dc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007dc4:	f7f8 fc18 	bl	80005f8 <__aeabi_dmul>
 8007dc8:	4b65      	ldr	r3, [pc, #404]	@ (8007f60 <_dtoa_r+0x590>)
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f7f8 fa5e 	bl	800028c <__adddf3>
 8007dd0:	4605      	mov	r5, r0
 8007dd2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dd6:	2c00      	cmp	r4, #0
 8007dd8:	d16a      	bne.n	8007eb0 <_dtoa_r+0x4e0>
 8007dda:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dde:	4b61      	ldr	r3, [pc, #388]	@ (8007f64 <_dtoa_r+0x594>)
 8007de0:	2200      	movs	r2, #0
 8007de2:	f7f8 fa51 	bl	8000288 <__aeabi_dsub>
 8007de6:	4602      	mov	r2, r0
 8007de8:	460b      	mov	r3, r1
 8007dea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dee:	462a      	mov	r2, r5
 8007df0:	4633      	mov	r3, r6
 8007df2:	f7f8 fe91 	bl	8000b18 <__aeabi_dcmpgt>
 8007df6:	2800      	cmp	r0, #0
 8007df8:	f040 8298 	bne.w	800832c <_dtoa_r+0x95c>
 8007dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e00:	462a      	mov	r2, r5
 8007e02:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e06:	f7f8 fe69 	bl	8000adc <__aeabi_dcmplt>
 8007e0a:	bb38      	cbnz	r0, 8007e5c <_dtoa_r+0x48c>
 8007e0c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007e10:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e14:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	f2c0 8157 	blt.w	80080ca <_dtoa_r+0x6fa>
 8007e1c:	2f0e      	cmp	r7, #14
 8007e1e:	f300 8154 	bgt.w	80080ca <_dtoa_r+0x6fa>
 8007e22:	4b4b      	ldr	r3, [pc, #300]	@ (8007f50 <_dtoa_r+0x580>)
 8007e24:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e28:	ed93 7b00 	vldr	d7, [r3]
 8007e2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	ed8d 7b00 	vstr	d7, [sp]
 8007e34:	f280 80e5 	bge.w	8008002 <_dtoa_r+0x632>
 8007e38:	9b03      	ldr	r3, [sp, #12]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f300 80e1 	bgt.w	8008002 <_dtoa_r+0x632>
 8007e40:	d10c      	bne.n	8007e5c <_dtoa_r+0x48c>
 8007e42:	4b48      	ldr	r3, [pc, #288]	@ (8007f64 <_dtoa_r+0x594>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	ec51 0b17 	vmov	r0, r1, d7
 8007e4a:	f7f8 fbd5 	bl	80005f8 <__aeabi_dmul>
 8007e4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e52:	f7f8 fe57 	bl	8000b04 <__aeabi_dcmpge>
 8007e56:	2800      	cmp	r0, #0
 8007e58:	f000 8266 	beq.w	8008328 <_dtoa_r+0x958>
 8007e5c:	2400      	movs	r4, #0
 8007e5e:	4625      	mov	r5, r4
 8007e60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e62:	4656      	mov	r6, sl
 8007e64:	ea6f 0803 	mvn.w	r8, r3
 8007e68:	2700      	movs	r7, #0
 8007e6a:	4621      	mov	r1, r4
 8007e6c:	4648      	mov	r0, r9
 8007e6e:	f000 fcbf 	bl	80087f0 <_Bfree>
 8007e72:	2d00      	cmp	r5, #0
 8007e74:	f000 80bd 	beq.w	8007ff2 <_dtoa_r+0x622>
 8007e78:	b12f      	cbz	r7, 8007e86 <_dtoa_r+0x4b6>
 8007e7a:	42af      	cmp	r7, r5
 8007e7c:	d003      	beq.n	8007e86 <_dtoa_r+0x4b6>
 8007e7e:	4639      	mov	r1, r7
 8007e80:	4648      	mov	r0, r9
 8007e82:	f000 fcb5 	bl	80087f0 <_Bfree>
 8007e86:	4629      	mov	r1, r5
 8007e88:	4648      	mov	r0, r9
 8007e8a:	f000 fcb1 	bl	80087f0 <_Bfree>
 8007e8e:	e0b0      	b.n	8007ff2 <_dtoa_r+0x622>
 8007e90:	07e2      	lsls	r2, r4, #31
 8007e92:	d505      	bpl.n	8007ea0 <_dtoa_r+0x4d0>
 8007e94:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007e98:	f7f8 fbae 	bl	80005f8 <__aeabi_dmul>
 8007e9c:	3601      	adds	r6, #1
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	1064      	asrs	r4, r4, #1
 8007ea2:	3508      	adds	r5, #8
 8007ea4:	e762      	b.n	8007d6c <_dtoa_r+0x39c>
 8007ea6:	2602      	movs	r6, #2
 8007ea8:	e765      	b.n	8007d76 <_dtoa_r+0x3a6>
 8007eaa:	9c03      	ldr	r4, [sp, #12]
 8007eac:	46b8      	mov	r8, r7
 8007eae:	e784      	b.n	8007dba <_dtoa_r+0x3ea>
 8007eb0:	4b27      	ldr	r3, [pc, #156]	@ (8007f50 <_dtoa_r+0x580>)
 8007eb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007eb4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007eb8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007ebc:	4454      	add	r4, sl
 8007ebe:	2900      	cmp	r1, #0
 8007ec0:	d054      	beq.n	8007f6c <_dtoa_r+0x59c>
 8007ec2:	4929      	ldr	r1, [pc, #164]	@ (8007f68 <_dtoa_r+0x598>)
 8007ec4:	2000      	movs	r0, #0
 8007ec6:	f7f8 fcc1 	bl	800084c <__aeabi_ddiv>
 8007eca:	4633      	mov	r3, r6
 8007ecc:	462a      	mov	r2, r5
 8007ece:	f7f8 f9db 	bl	8000288 <__aeabi_dsub>
 8007ed2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007ed6:	4656      	mov	r6, sl
 8007ed8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007edc:	f7f8 fe3c 	bl	8000b58 <__aeabi_d2iz>
 8007ee0:	4605      	mov	r5, r0
 8007ee2:	f7f8 fb1f 	bl	8000524 <__aeabi_i2d>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eee:	f7f8 f9cb 	bl	8000288 <__aeabi_dsub>
 8007ef2:	3530      	adds	r5, #48	@ 0x30
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	460b      	mov	r3, r1
 8007ef8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007efc:	f806 5b01 	strb.w	r5, [r6], #1
 8007f00:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f04:	f7f8 fdea 	bl	8000adc <__aeabi_dcmplt>
 8007f08:	2800      	cmp	r0, #0
 8007f0a:	d172      	bne.n	8007ff2 <_dtoa_r+0x622>
 8007f0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007f10:	4911      	ldr	r1, [pc, #68]	@ (8007f58 <_dtoa_r+0x588>)
 8007f12:	2000      	movs	r0, #0
 8007f14:	f7f8 f9b8 	bl	8000288 <__aeabi_dsub>
 8007f18:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007f1c:	f7f8 fdde 	bl	8000adc <__aeabi_dcmplt>
 8007f20:	2800      	cmp	r0, #0
 8007f22:	f040 80b4 	bne.w	800808e <_dtoa_r+0x6be>
 8007f26:	42a6      	cmp	r6, r4
 8007f28:	f43f af70 	beq.w	8007e0c <_dtoa_r+0x43c>
 8007f2c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007f30:	4b0a      	ldr	r3, [pc, #40]	@ (8007f5c <_dtoa_r+0x58c>)
 8007f32:	2200      	movs	r2, #0
 8007f34:	f7f8 fb60 	bl	80005f8 <__aeabi_dmul>
 8007f38:	4b08      	ldr	r3, [pc, #32]	@ (8007f5c <_dtoa_r+0x58c>)
 8007f3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f3e:	2200      	movs	r2, #0
 8007f40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f44:	f7f8 fb58 	bl	80005f8 <__aeabi_dmul>
 8007f48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007f4c:	e7c4      	b.n	8007ed8 <_dtoa_r+0x508>
 8007f4e:	bf00      	nop
 8007f50:	08009af8 	.word	0x08009af8
 8007f54:	08009ad0 	.word	0x08009ad0
 8007f58:	3ff00000 	.word	0x3ff00000
 8007f5c:	40240000 	.word	0x40240000
 8007f60:	401c0000 	.word	0x401c0000
 8007f64:	40140000 	.word	0x40140000
 8007f68:	3fe00000 	.word	0x3fe00000
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4628      	mov	r0, r5
 8007f70:	f7f8 fb42 	bl	80005f8 <__aeabi_dmul>
 8007f74:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007f78:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007f7a:	4656      	mov	r6, sl
 8007f7c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f80:	f7f8 fdea 	bl	8000b58 <__aeabi_d2iz>
 8007f84:	4605      	mov	r5, r0
 8007f86:	f7f8 facd 	bl	8000524 <__aeabi_i2d>
 8007f8a:	4602      	mov	r2, r0
 8007f8c:	460b      	mov	r3, r1
 8007f8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007f92:	f7f8 f979 	bl	8000288 <__aeabi_dsub>
 8007f96:	3530      	adds	r5, #48	@ 0x30
 8007f98:	f806 5b01 	strb.w	r5, [r6], #1
 8007f9c:	4602      	mov	r2, r0
 8007f9e:	460b      	mov	r3, r1
 8007fa0:	42a6      	cmp	r6, r4
 8007fa2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	d124      	bne.n	8007ff6 <_dtoa_r+0x626>
 8007fac:	4baf      	ldr	r3, [pc, #700]	@ (800826c <_dtoa_r+0x89c>)
 8007fae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007fb2:	f7f8 f96b 	bl	800028c <__adddf3>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	460b      	mov	r3, r1
 8007fba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fbe:	f7f8 fdab 	bl	8000b18 <__aeabi_dcmpgt>
 8007fc2:	2800      	cmp	r0, #0
 8007fc4:	d163      	bne.n	800808e <_dtoa_r+0x6be>
 8007fc6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007fca:	49a8      	ldr	r1, [pc, #672]	@ (800826c <_dtoa_r+0x89c>)
 8007fcc:	2000      	movs	r0, #0
 8007fce:	f7f8 f95b 	bl	8000288 <__aeabi_dsub>
 8007fd2:	4602      	mov	r2, r0
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007fda:	f7f8 fd7f 	bl	8000adc <__aeabi_dcmplt>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f43f af14 	beq.w	8007e0c <_dtoa_r+0x43c>
 8007fe4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007fe6:	1e73      	subs	r3, r6, #1
 8007fe8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007fea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007fee:	2b30      	cmp	r3, #48	@ 0x30
 8007ff0:	d0f8      	beq.n	8007fe4 <_dtoa_r+0x614>
 8007ff2:	4647      	mov	r7, r8
 8007ff4:	e03b      	b.n	800806e <_dtoa_r+0x69e>
 8007ff6:	4b9e      	ldr	r3, [pc, #632]	@ (8008270 <_dtoa_r+0x8a0>)
 8007ff8:	f7f8 fafe 	bl	80005f8 <__aeabi_dmul>
 8007ffc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008000:	e7bc      	b.n	8007f7c <_dtoa_r+0x5ac>
 8008002:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008006:	4656      	mov	r6, sl
 8008008:	e9dd 2300 	ldrd	r2, r3, [sp]
 800800c:	4620      	mov	r0, r4
 800800e:	4629      	mov	r1, r5
 8008010:	f7f8 fc1c 	bl	800084c <__aeabi_ddiv>
 8008014:	f7f8 fda0 	bl	8000b58 <__aeabi_d2iz>
 8008018:	4680      	mov	r8, r0
 800801a:	f7f8 fa83 	bl	8000524 <__aeabi_i2d>
 800801e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008022:	f7f8 fae9 	bl	80005f8 <__aeabi_dmul>
 8008026:	4602      	mov	r2, r0
 8008028:	460b      	mov	r3, r1
 800802a:	4620      	mov	r0, r4
 800802c:	4629      	mov	r1, r5
 800802e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008032:	f7f8 f929 	bl	8000288 <__aeabi_dsub>
 8008036:	f806 4b01 	strb.w	r4, [r6], #1
 800803a:	9d03      	ldr	r5, [sp, #12]
 800803c:	eba6 040a 	sub.w	r4, r6, sl
 8008040:	42a5      	cmp	r5, r4
 8008042:	4602      	mov	r2, r0
 8008044:	460b      	mov	r3, r1
 8008046:	d133      	bne.n	80080b0 <_dtoa_r+0x6e0>
 8008048:	f7f8 f920 	bl	800028c <__adddf3>
 800804c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008050:	4604      	mov	r4, r0
 8008052:	460d      	mov	r5, r1
 8008054:	f7f8 fd60 	bl	8000b18 <__aeabi_dcmpgt>
 8008058:	b9c0      	cbnz	r0, 800808c <_dtoa_r+0x6bc>
 800805a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800805e:	4620      	mov	r0, r4
 8008060:	4629      	mov	r1, r5
 8008062:	f7f8 fd31 	bl	8000ac8 <__aeabi_dcmpeq>
 8008066:	b110      	cbz	r0, 800806e <_dtoa_r+0x69e>
 8008068:	f018 0f01 	tst.w	r8, #1
 800806c:	d10e      	bne.n	800808c <_dtoa_r+0x6bc>
 800806e:	9902      	ldr	r1, [sp, #8]
 8008070:	4648      	mov	r0, r9
 8008072:	f000 fbbd 	bl	80087f0 <_Bfree>
 8008076:	2300      	movs	r3, #0
 8008078:	7033      	strb	r3, [r6, #0]
 800807a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800807c:	3701      	adds	r7, #1
 800807e:	601f      	str	r7, [r3, #0]
 8008080:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 824b 	beq.w	800851e <_dtoa_r+0xb4e>
 8008088:	601e      	str	r6, [r3, #0]
 800808a:	e248      	b.n	800851e <_dtoa_r+0xb4e>
 800808c:	46b8      	mov	r8, r7
 800808e:	4633      	mov	r3, r6
 8008090:	461e      	mov	r6, r3
 8008092:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008096:	2a39      	cmp	r2, #57	@ 0x39
 8008098:	d106      	bne.n	80080a8 <_dtoa_r+0x6d8>
 800809a:	459a      	cmp	sl, r3
 800809c:	d1f8      	bne.n	8008090 <_dtoa_r+0x6c0>
 800809e:	2230      	movs	r2, #48	@ 0x30
 80080a0:	f108 0801 	add.w	r8, r8, #1
 80080a4:	f88a 2000 	strb.w	r2, [sl]
 80080a8:	781a      	ldrb	r2, [r3, #0]
 80080aa:	3201      	adds	r2, #1
 80080ac:	701a      	strb	r2, [r3, #0]
 80080ae:	e7a0      	b.n	8007ff2 <_dtoa_r+0x622>
 80080b0:	4b6f      	ldr	r3, [pc, #444]	@ (8008270 <_dtoa_r+0x8a0>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	f7f8 faa0 	bl	80005f8 <__aeabi_dmul>
 80080b8:	2200      	movs	r2, #0
 80080ba:	2300      	movs	r3, #0
 80080bc:	4604      	mov	r4, r0
 80080be:	460d      	mov	r5, r1
 80080c0:	f7f8 fd02 	bl	8000ac8 <__aeabi_dcmpeq>
 80080c4:	2800      	cmp	r0, #0
 80080c6:	d09f      	beq.n	8008008 <_dtoa_r+0x638>
 80080c8:	e7d1      	b.n	800806e <_dtoa_r+0x69e>
 80080ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80080cc:	2a00      	cmp	r2, #0
 80080ce:	f000 80ea 	beq.w	80082a6 <_dtoa_r+0x8d6>
 80080d2:	9a07      	ldr	r2, [sp, #28]
 80080d4:	2a01      	cmp	r2, #1
 80080d6:	f300 80cd 	bgt.w	8008274 <_dtoa_r+0x8a4>
 80080da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80080dc:	2a00      	cmp	r2, #0
 80080de:	f000 80c1 	beq.w	8008264 <_dtoa_r+0x894>
 80080e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80080e6:	9c08      	ldr	r4, [sp, #32]
 80080e8:	9e00      	ldr	r6, [sp, #0]
 80080ea:	9a00      	ldr	r2, [sp, #0]
 80080ec:	441a      	add	r2, r3
 80080ee:	9200      	str	r2, [sp, #0]
 80080f0:	9a06      	ldr	r2, [sp, #24]
 80080f2:	2101      	movs	r1, #1
 80080f4:	441a      	add	r2, r3
 80080f6:	4648      	mov	r0, r9
 80080f8:	9206      	str	r2, [sp, #24]
 80080fa:	f000 fc2d 	bl	8008958 <__i2b>
 80080fe:	4605      	mov	r5, r0
 8008100:	b166      	cbz	r6, 800811c <_dtoa_r+0x74c>
 8008102:	9b06      	ldr	r3, [sp, #24]
 8008104:	2b00      	cmp	r3, #0
 8008106:	dd09      	ble.n	800811c <_dtoa_r+0x74c>
 8008108:	42b3      	cmp	r3, r6
 800810a:	9a00      	ldr	r2, [sp, #0]
 800810c:	bfa8      	it	ge
 800810e:	4633      	movge	r3, r6
 8008110:	1ad2      	subs	r2, r2, r3
 8008112:	9200      	str	r2, [sp, #0]
 8008114:	9a06      	ldr	r2, [sp, #24]
 8008116:	1af6      	subs	r6, r6, r3
 8008118:	1ad3      	subs	r3, r2, r3
 800811a:	9306      	str	r3, [sp, #24]
 800811c:	9b08      	ldr	r3, [sp, #32]
 800811e:	b30b      	cbz	r3, 8008164 <_dtoa_r+0x794>
 8008120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008122:	2b00      	cmp	r3, #0
 8008124:	f000 80c6 	beq.w	80082b4 <_dtoa_r+0x8e4>
 8008128:	2c00      	cmp	r4, #0
 800812a:	f000 80c0 	beq.w	80082ae <_dtoa_r+0x8de>
 800812e:	4629      	mov	r1, r5
 8008130:	4622      	mov	r2, r4
 8008132:	4648      	mov	r0, r9
 8008134:	f000 fcc8 	bl	8008ac8 <__pow5mult>
 8008138:	9a02      	ldr	r2, [sp, #8]
 800813a:	4601      	mov	r1, r0
 800813c:	4605      	mov	r5, r0
 800813e:	4648      	mov	r0, r9
 8008140:	f000 fc20 	bl	8008984 <__multiply>
 8008144:	9902      	ldr	r1, [sp, #8]
 8008146:	4680      	mov	r8, r0
 8008148:	4648      	mov	r0, r9
 800814a:	f000 fb51 	bl	80087f0 <_Bfree>
 800814e:	9b08      	ldr	r3, [sp, #32]
 8008150:	1b1b      	subs	r3, r3, r4
 8008152:	9308      	str	r3, [sp, #32]
 8008154:	f000 80b1 	beq.w	80082ba <_dtoa_r+0x8ea>
 8008158:	9a08      	ldr	r2, [sp, #32]
 800815a:	4641      	mov	r1, r8
 800815c:	4648      	mov	r0, r9
 800815e:	f000 fcb3 	bl	8008ac8 <__pow5mult>
 8008162:	9002      	str	r0, [sp, #8]
 8008164:	2101      	movs	r1, #1
 8008166:	4648      	mov	r0, r9
 8008168:	f000 fbf6 	bl	8008958 <__i2b>
 800816c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800816e:	4604      	mov	r4, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	f000 81d8 	beq.w	8008526 <_dtoa_r+0xb56>
 8008176:	461a      	mov	r2, r3
 8008178:	4601      	mov	r1, r0
 800817a:	4648      	mov	r0, r9
 800817c:	f000 fca4 	bl	8008ac8 <__pow5mult>
 8008180:	9b07      	ldr	r3, [sp, #28]
 8008182:	2b01      	cmp	r3, #1
 8008184:	4604      	mov	r4, r0
 8008186:	f300 809f 	bgt.w	80082c8 <_dtoa_r+0x8f8>
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	f040 8097 	bne.w	80082c0 <_dtoa_r+0x8f0>
 8008192:	9b05      	ldr	r3, [sp, #20]
 8008194:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008198:	2b00      	cmp	r3, #0
 800819a:	f040 8093 	bne.w	80082c4 <_dtoa_r+0x8f4>
 800819e:	9b05      	ldr	r3, [sp, #20]
 80081a0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081a4:	0d1b      	lsrs	r3, r3, #20
 80081a6:	051b      	lsls	r3, r3, #20
 80081a8:	b133      	cbz	r3, 80081b8 <_dtoa_r+0x7e8>
 80081aa:	9b00      	ldr	r3, [sp, #0]
 80081ac:	3301      	adds	r3, #1
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	9b06      	ldr	r3, [sp, #24]
 80081b2:	3301      	adds	r3, #1
 80081b4:	9306      	str	r3, [sp, #24]
 80081b6:	2301      	movs	r3, #1
 80081b8:	9308      	str	r3, [sp, #32]
 80081ba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80081bc:	2b00      	cmp	r3, #0
 80081be:	f000 81b8 	beq.w	8008532 <_dtoa_r+0xb62>
 80081c2:	6923      	ldr	r3, [r4, #16]
 80081c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80081c8:	6918      	ldr	r0, [r3, #16]
 80081ca:	f000 fb79 	bl	80088c0 <__hi0bits>
 80081ce:	f1c0 0020 	rsb	r0, r0, #32
 80081d2:	9b06      	ldr	r3, [sp, #24]
 80081d4:	4418      	add	r0, r3
 80081d6:	f010 001f 	ands.w	r0, r0, #31
 80081da:	f000 8082 	beq.w	80082e2 <_dtoa_r+0x912>
 80081de:	f1c0 0320 	rsb	r3, r0, #32
 80081e2:	2b04      	cmp	r3, #4
 80081e4:	dd73      	ble.n	80082ce <_dtoa_r+0x8fe>
 80081e6:	9b00      	ldr	r3, [sp, #0]
 80081e8:	f1c0 001c 	rsb	r0, r0, #28
 80081ec:	4403      	add	r3, r0
 80081ee:	9300      	str	r3, [sp, #0]
 80081f0:	9b06      	ldr	r3, [sp, #24]
 80081f2:	4403      	add	r3, r0
 80081f4:	4406      	add	r6, r0
 80081f6:	9306      	str	r3, [sp, #24]
 80081f8:	9b00      	ldr	r3, [sp, #0]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	dd05      	ble.n	800820a <_dtoa_r+0x83a>
 80081fe:	9902      	ldr	r1, [sp, #8]
 8008200:	461a      	mov	r2, r3
 8008202:	4648      	mov	r0, r9
 8008204:	f000 fcba 	bl	8008b7c <__lshift>
 8008208:	9002      	str	r0, [sp, #8]
 800820a:	9b06      	ldr	r3, [sp, #24]
 800820c:	2b00      	cmp	r3, #0
 800820e:	dd05      	ble.n	800821c <_dtoa_r+0x84c>
 8008210:	4621      	mov	r1, r4
 8008212:	461a      	mov	r2, r3
 8008214:	4648      	mov	r0, r9
 8008216:	f000 fcb1 	bl	8008b7c <__lshift>
 800821a:	4604      	mov	r4, r0
 800821c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800821e:	2b00      	cmp	r3, #0
 8008220:	d061      	beq.n	80082e6 <_dtoa_r+0x916>
 8008222:	9802      	ldr	r0, [sp, #8]
 8008224:	4621      	mov	r1, r4
 8008226:	f000 fd15 	bl	8008c54 <__mcmp>
 800822a:	2800      	cmp	r0, #0
 800822c:	da5b      	bge.n	80082e6 <_dtoa_r+0x916>
 800822e:	2300      	movs	r3, #0
 8008230:	9902      	ldr	r1, [sp, #8]
 8008232:	220a      	movs	r2, #10
 8008234:	4648      	mov	r0, r9
 8008236:	f000 fafd 	bl	8008834 <__multadd>
 800823a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823c:	9002      	str	r0, [sp, #8]
 800823e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008242:	2b00      	cmp	r3, #0
 8008244:	f000 8177 	beq.w	8008536 <_dtoa_r+0xb66>
 8008248:	4629      	mov	r1, r5
 800824a:	2300      	movs	r3, #0
 800824c:	220a      	movs	r2, #10
 800824e:	4648      	mov	r0, r9
 8008250:	f000 faf0 	bl	8008834 <__multadd>
 8008254:	f1bb 0f00 	cmp.w	fp, #0
 8008258:	4605      	mov	r5, r0
 800825a:	dc6f      	bgt.n	800833c <_dtoa_r+0x96c>
 800825c:	9b07      	ldr	r3, [sp, #28]
 800825e:	2b02      	cmp	r3, #2
 8008260:	dc49      	bgt.n	80082f6 <_dtoa_r+0x926>
 8008262:	e06b      	b.n	800833c <_dtoa_r+0x96c>
 8008264:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008266:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800826a:	e73c      	b.n	80080e6 <_dtoa_r+0x716>
 800826c:	3fe00000 	.word	0x3fe00000
 8008270:	40240000 	.word	0x40240000
 8008274:	9b03      	ldr	r3, [sp, #12]
 8008276:	1e5c      	subs	r4, r3, #1
 8008278:	9b08      	ldr	r3, [sp, #32]
 800827a:	42a3      	cmp	r3, r4
 800827c:	db09      	blt.n	8008292 <_dtoa_r+0x8c2>
 800827e:	1b1c      	subs	r4, r3, r4
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	f6bf af30 	bge.w	80080e8 <_dtoa_r+0x718>
 8008288:	9b00      	ldr	r3, [sp, #0]
 800828a:	9a03      	ldr	r2, [sp, #12]
 800828c:	1a9e      	subs	r6, r3, r2
 800828e:	2300      	movs	r3, #0
 8008290:	e72b      	b.n	80080ea <_dtoa_r+0x71a>
 8008292:	9b08      	ldr	r3, [sp, #32]
 8008294:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008296:	9408      	str	r4, [sp, #32]
 8008298:	1ae3      	subs	r3, r4, r3
 800829a:	441a      	add	r2, r3
 800829c:	9e00      	ldr	r6, [sp, #0]
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	920d      	str	r2, [sp, #52]	@ 0x34
 80082a2:	2400      	movs	r4, #0
 80082a4:	e721      	b.n	80080ea <_dtoa_r+0x71a>
 80082a6:	9c08      	ldr	r4, [sp, #32]
 80082a8:	9e00      	ldr	r6, [sp, #0]
 80082aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80082ac:	e728      	b.n	8008100 <_dtoa_r+0x730>
 80082ae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80082b2:	e751      	b.n	8008158 <_dtoa_r+0x788>
 80082b4:	9a08      	ldr	r2, [sp, #32]
 80082b6:	9902      	ldr	r1, [sp, #8]
 80082b8:	e750      	b.n	800815c <_dtoa_r+0x78c>
 80082ba:	f8cd 8008 	str.w	r8, [sp, #8]
 80082be:	e751      	b.n	8008164 <_dtoa_r+0x794>
 80082c0:	2300      	movs	r3, #0
 80082c2:	e779      	b.n	80081b8 <_dtoa_r+0x7e8>
 80082c4:	9b04      	ldr	r3, [sp, #16]
 80082c6:	e777      	b.n	80081b8 <_dtoa_r+0x7e8>
 80082c8:	2300      	movs	r3, #0
 80082ca:	9308      	str	r3, [sp, #32]
 80082cc:	e779      	b.n	80081c2 <_dtoa_r+0x7f2>
 80082ce:	d093      	beq.n	80081f8 <_dtoa_r+0x828>
 80082d0:	9a00      	ldr	r2, [sp, #0]
 80082d2:	331c      	adds	r3, #28
 80082d4:	441a      	add	r2, r3
 80082d6:	9200      	str	r2, [sp, #0]
 80082d8:	9a06      	ldr	r2, [sp, #24]
 80082da:	441a      	add	r2, r3
 80082dc:	441e      	add	r6, r3
 80082de:	9206      	str	r2, [sp, #24]
 80082e0:	e78a      	b.n	80081f8 <_dtoa_r+0x828>
 80082e2:	4603      	mov	r3, r0
 80082e4:	e7f4      	b.n	80082d0 <_dtoa_r+0x900>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	46b8      	mov	r8, r7
 80082ec:	dc20      	bgt.n	8008330 <_dtoa_r+0x960>
 80082ee:	469b      	mov	fp, r3
 80082f0:	9b07      	ldr	r3, [sp, #28]
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	dd1e      	ble.n	8008334 <_dtoa_r+0x964>
 80082f6:	f1bb 0f00 	cmp.w	fp, #0
 80082fa:	f47f adb1 	bne.w	8007e60 <_dtoa_r+0x490>
 80082fe:	4621      	mov	r1, r4
 8008300:	465b      	mov	r3, fp
 8008302:	2205      	movs	r2, #5
 8008304:	4648      	mov	r0, r9
 8008306:	f000 fa95 	bl	8008834 <__multadd>
 800830a:	4601      	mov	r1, r0
 800830c:	4604      	mov	r4, r0
 800830e:	9802      	ldr	r0, [sp, #8]
 8008310:	f000 fca0 	bl	8008c54 <__mcmp>
 8008314:	2800      	cmp	r0, #0
 8008316:	f77f ada3 	ble.w	8007e60 <_dtoa_r+0x490>
 800831a:	4656      	mov	r6, sl
 800831c:	2331      	movs	r3, #49	@ 0x31
 800831e:	f806 3b01 	strb.w	r3, [r6], #1
 8008322:	f108 0801 	add.w	r8, r8, #1
 8008326:	e59f      	b.n	8007e68 <_dtoa_r+0x498>
 8008328:	9c03      	ldr	r4, [sp, #12]
 800832a:	46b8      	mov	r8, r7
 800832c:	4625      	mov	r5, r4
 800832e:	e7f4      	b.n	800831a <_dtoa_r+0x94a>
 8008330:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	f000 8101 	beq.w	800853e <_dtoa_r+0xb6e>
 800833c:	2e00      	cmp	r6, #0
 800833e:	dd05      	ble.n	800834c <_dtoa_r+0x97c>
 8008340:	4629      	mov	r1, r5
 8008342:	4632      	mov	r2, r6
 8008344:	4648      	mov	r0, r9
 8008346:	f000 fc19 	bl	8008b7c <__lshift>
 800834a:	4605      	mov	r5, r0
 800834c:	9b08      	ldr	r3, [sp, #32]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d05c      	beq.n	800840c <_dtoa_r+0xa3c>
 8008352:	6869      	ldr	r1, [r5, #4]
 8008354:	4648      	mov	r0, r9
 8008356:	f000 fa0b 	bl	8008770 <_Balloc>
 800835a:	4606      	mov	r6, r0
 800835c:	b928      	cbnz	r0, 800836a <_dtoa_r+0x99a>
 800835e:	4b82      	ldr	r3, [pc, #520]	@ (8008568 <_dtoa_r+0xb98>)
 8008360:	4602      	mov	r2, r0
 8008362:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008366:	f7ff bb4a 	b.w	80079fe <_dtoa_r+0x2e>
 800836a:	692a      	ldr	r2, [r5, #16]
 800836c:	3202      	adds	r2, #2
 800836e:	0092      	lsls	r2, r2, #2
 8008370:	f105 010c 	add.w	r1, r5, #12
 8008374:	300c      	adds	r0, #12
 8008376:	f001 f827 	bl	80093c8 <memcpy>
 800837a:	2201      	movs	r2, #1
 800837c:	4631      	mov	r1, r6
 800837e:	4648      	mov	r0, r9
 8008380:	f000 fbfc 	bl	8008b7c <__lshift>
 8008384:	f10a 0301 	add.w	r3, sl, #1
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	eb0a 030b 	add.w	r3, sl, fp
 800838e:	9308      	str	r3, [sp, #32]
 8008390:	9b04      	ldr	r3, [sp, #16]
 8008392:	f003 0301 	and.w	r3, r3, #1
 8008396:	462f      	mov	r7, r5
 8008398:	9306      	str	r3, [sp, #24]
 800839a:	4605      	mov	r5, r0
 800839c:	9b00      	ldr	r3, [sp, #0]
 800839e:	9802      	ldr	r0, [sp, #8]
 80083a0:	4621      	mov	r1, r4
 80083a2:	f103 3bff 	add.w	fp, r3, #4294967295
 80083a6:	f7ff fa8a 	bl	80078be <quorem>
 80083aa:	4603      	mov	r3, r0
 80083ac:	3330      	adds	r3, #48	@ 0x30
 80083ae:	9003      	str	r0, [sp, #12]
 80083b0:	4639      	mov	r1, r7
 80083b2:	9802      	ldr	r0, [sp, #8]
 80083b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b6:	f000 fc4d 	bl	8008c54 <__mcmp>
 80083ba:	462a      	mov	r2, r5
 80083bc:	9004      	str	r0, [sp, #16]
 80083be:	4621      	mov	r1, r4
 80083c0:	4648      	mov	r0, r9
 80083c2:	f000 fc63 	bl	8008c8c <__mdiff>
 80083c6:	68c2      	ldr	r2, [r0, #12]
 80083c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083ca:	4606      	mov	r6, r0
 80083cc:	bb02      	cbnz	r2, 8008410 <_dtoa_r+0xa40>
 80083ce:	4601      	mov	r1, r0
 80083d0:	9802      	ldr	r0, [sp, #8]
 80083d2:	f000 fc3f 	bl	8008c54 <__mcmp>
 80083d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083d8:	4602      	mov	r2, r0
 80083da:	4631      	mov	r1, r6
 80083dc:	4648      	mov	r0, r9
 80083de:	920c      	str	r2, [sp, #48]	@ 0x30
 80083e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80083e2:	f000 fa05 	bl	80087f0 <_Bfree>
 80083e6:	9b07      	ldr	r3, [sp, #28]
 80083e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083ea:	9e00      	ldr	r6, [sp, #0]
 80083ec:	ea42 0103 	orr.w	r1, r2, r3
 80083f0:	9b06      	ldr	r3, [sp, #24]
 80083f2:	4319      	orrs	r1, r3
 80083f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083f6:	d10d      	bne.n	8008414 <_dtoa_r+0xa44>
 80083f8:	2b39      	cmp	r3, #57	@ 0x39
 80083fa:	d027      	beq.n	800844c <_dtoa_r+0xa7c>
 80083fc:	9a04      	ldr	r2, [sp, #16]
 80083fe:	2a00      	cmp	r2, #0
 8008400:	dd01      	ble.n	8008406 <_dtoa_r+0xa36>
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	3331      	adds	r3, #49	@ 0x31
 8008406:	f88b 3000 	strb.w	r3, [fp]
 800840a:	e52e      	b.n	8007e6a <_dtoa_r+0x49a>
 800840c:	4628      	mov	r0, r5
 800840e:	e7b9      	b.n	8008384 <_dtoa_r+0x9b4>
 8008410:	2201      	movs	r2, #1
 8008412:	e7e2      	b.n	80083da <_dtoa_r+0xa0a>
 8008414:	9904      	ldr	r1, [sp, #16]
 8008416:	2900      	cmp	r1, #0
 8008418:	db04      	blt.n	8008424 <_dtoa_r+0xa54>
 800841a:	9807      	ldr	r0, [sp, #28]
 800841c:	4301      	orrs	r1, r0
 800841e:	9806      	ldr	r0, [sp, #24]
 8008420:	4301      	orrs	r1, r0
 8008422:	d120      	bne.n	8008466 <_dtoa_r+0xa96>
 8008424:	2a00      	cmp	r2, #0
 8008426:	ddee      	ble.n	8008406 <_dtoa_r+0xa36>
 8008428:	9902      	ldr	r1, [sp, #8]
 800842a:	9300      	str	r3, [sp, #0]
 800842c:	2201      	movs	r2, #1
 800842e:	4648      	mov	r0, r9
 8008430:	f000 fba4 	bl	8008b7c <__lshift>
 8008434:	4621      	mov	r1, r4
 8008436:	9002      	str	r0, [sp, #8]
 8008438:	f000 fc0c 	bl	8008c54 <__mcmp>
 800843c:	2800      	cmp	r0, #0
 800843e:	9b00      	ldr	r3, [sp, #0]
 8008440:	dc02      	bgt.n	8008448 <_dtoa_r+0xa78>
 8008442:	d1e0      	bne.n	8008406 <_dtoa_r+0xa36>
 8008444:	07da      	lsls	r2, r3, #31
 8008446:	d5de      	bpl.n	8008406 <_dtoa_r+0xa36>
 8008448:	2b39      	cmp	r3, #57	@ 0x39
 800844a:	d1da      	bne.n	8008402 <_dtoa_r+0xa32>
 800844c:	2339      	movs	r3, #57	@ 0x39
 800844e:	f88b 3000 	strb.w	r3, [fp]
 8008452:	4633      	mov	r3, r6
 8008454:	461e      	mov	r6, r3
 8008456:	3b01      	subs	r3, #1
 8008458:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800845c:	2a39      	cmp	r2, #57	@ 0x39
 800845e:	d04e      	beq.n	80084fe <_dtoa_r+0xb2e>
 8008460:	3201      	adds	r2, #1
 8008462:	701a      	strb	r2, [r3, #0]
 8008464:	e501      	b.n	8007e6a <_dtoa_r+0x49a>
 8008466:	2a00      	cmp	r2, #0
 8008468:	dd03      	ble.n	8008472 <_dtoa_r+0xaa2>
 800846a:	2b39      	cmp	r3, #57	@ 0x39
 800846c:	d0ee      	beq.n	800844c <_dtoa_r+0xa7c>
 800846e:	3301      	adds	r3, #1
 8008470:	e7c9      	b.n	8008406 <_dtoa_r+0xa36>
 8008472:	9a00      	ldr	r2, [sp, #0]
 8008474:	9908      	ldr	r1, [sp, #32]
 8008476:	f802 3c01 	strb.w	r3, [r2, #-1]
 800847a:	428a      	cmp	r2, r1
 800847c:	d028      	beq.n	80084d0 <_dtoa_r+0xb00>
 800847e:	9902      	ldr	r1, [sp, #8]
 8008480:	2300      	movs	r3, #0
 8008482:	220a      	movs	r2, #10
 8008484:	4648      	mov	r0, r9
 8008486:	f000 f9d5 	bl	8008834 <__multadd>
 800848a:	42af      	cmp	r7, r5
 800848c:	9002      	str	r0, [sp, #8]
 800848e:	f04f 0300 	mov.w	r3, #0
 8008492:	f04f 020a 	mov.w	r2, #10
 8008496:	4639      	mov	r1, r7
 8008498:	4648      	mov	r0, r9
 800849a:	d107      	bne.n	80084ac <_dtoa_r+0xadc>
 800849c:	f000 f9ca 	bl	8008834 <__multadd>
 80084a0:	4607      	mov	r7, r0
 80084a2:	4605      	mov	r5, r0
 80084a4:	9b00      	ldr	r3, [sp, #0]
 80084a6:	3301      	adds	r3, #1
 80084a8:	9300      	str	r3, [sp, #0]
 80084aa:	e777      	b.n	800839c <_dtoa_r+0x9cc>
 80084ac:	f000 f9c2 	bl	8008834 <__multadd>
 80084b0:	4629      	mov	r1, r5
 80084b2:	4607      	mov	r7, r0
 80084b4:	2300      	movs	r3, #0
 80084b6:	220a      	movs	r2, #10
 80084b8:	4648      	mov	r0, r9
 80084ba:	f000 f9bb 	bl	8008834 <__multadd>
 80084be:	4605      	mov	r5, r0
 80084c0:	e7f0      	b.n	80084a4 <_dtoa_r+0xad4>
 80084c2:	f1bb 0f00 	cmp.w	fp, #0
 80084c6:	bfcc      	ite	gt
 80084c8:	465e      	movgt	r6, fp
 80084ca:	2601      	movle	r6, #1
 80084cc:	4456      	add	r6, sl
 80084ce:	2700      	movs	r7, #0
 80084d0:	9902      	ldr	r1, [sp, #8]
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	2201      	movs	r2, #1
 80084d6:	4648      	mov	r0, r9
 80084d8:	f000 fb50 	bl	8008b7c <__lshift>
 80084dc:	4621      	mov	r1, r4
 80084de:	9002      	str	r0, [sp, #8]
 80084e0:	f000 fbb8 	bl	8008c54 <__mcmp>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	dcb4      	bgt.n	8008452 <_dtoa_r+0xa82>
 80084e8:	d102      	bne.n	80084f0 <_dtoa_r+0xb20>
 80084ea:	9b00      	ldr	r3, [sp, #0]
 80084ec:	07db      	lsls	r3, r3, #31
 80084ee:	d4b0      	bmi.n	8008452 <_dtoa_r+0xa82>
 80084f0:	4633      	mov	r3, r6
 80084f2:	461e      	mov	r6, r3
 80084f4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084f8:	2a30      	cmp	r2, #48	@ 0x30
 80084fa:	d0fa      	beq.n	80084f2 <_dtoa_r+0xb22>
 80084fc:	e4b5      	b.n	8007e6a <_dtoa_r+0x49a>
 80084fe:	459a      	cmp	sl, r3
 8008500:	d1a8      	bne.n	8008454 <_dtoa_r+0xa84>
 8008502:	2331      	movs	r3, #49	@ 0x31
 8008504:	f108 0801 	add.w	r8, r8, #1
 8008508:	f88a 3000 	strb.w	r3, [sl]
 800850c:	e4ad      	b.n	8007e6a <_dtoa_r+0x49a>
 800850e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008510:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800856c <_dtoa_r+0xb9c>
 8008514:	b11b      	cbz	r3, 800851e <_dtoa_r+0xb4e>
 8008516:	f10a 0308 	add.w	r3, sl, #8
 800851a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800851c:	6013      	str	r3, [r2, #0]
 800851e:	4650      	mov	r0, sl
 8008520:	b017      	add	sp, #92	@ 0x5c
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008526:	9b07      	ldr	r3, [sp, #28]
 8008528:	2b01      	cmp	r3, #1
 800852a:	f77f ae2e 	ble.w	800818a <_dtoa_r+0x7ba>
 800852e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008530:	9308      	str	r3, [sp, #32]
 8008532:	2001      	movs	r0, #1
 8008534:	e64d      	b.n	80081d2 <_dtoa_r+0x802>
 8008536:	f1bb 0f00 	cmp.w	fp, #0
 800853a:	f77f aed9 	ble.w	80082f0 <_dtoa_r+0x920>
 800853e:	4656      	mov	r6, sl
 8008540:	9802      	ldr	r0, [sp, #8]
 8008542:	4621      	mov	r1, r4
 8008544:	f7ff f9bb 	bl	80078be <quorem>
 8008548:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800854c:	f806 3b01 	strb.w	r3, [r6], #1
 8008550:	eba6 020a 	sub.w	r2, r6, sl
 8008554:	4593      	cmp	fp, r2
 8008556:	ddb4      	ble.n	80084c2 <_dtoa_r+0xaf2>
 8008558:	9902      	ldr	r1, [sp, #8]
 800855a:	2300      	movs	r3, #0
 800855c:	220a      	movs	r2, #10
 800855e:	4648      	mov	r0, r9
 8008560:	f000 f968 	bl	8008834 <__multadd>
 8008564:	9002      	str	r0, [sp, #8]
 8008566:	e7eb      	b.n	8008540 <_dtoa_r+0xb70>
 8008568:	08009a00 	.word	0x08009a00
 800856c:	08009984 	.word	0x08009984

08008570 <_free_r>:
 8008570:	b538      	push	{r3, r4, r5, lr}
 8008572:	4605      	mov	r5, r0
 8008574:	2900      	cmp	r1, #0
 8008576:	d041      	beq.n	80085fc <_free_r+0x8c>
 8008578:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800857c:	1f0c      	subs	r4, r1, #4
 800857e:	2b00      	cmp	r3, #0
 8008580:	bfb8      	it	lt
 8008582:	18e4      	addlt	r4, r4, r3
 8008584:	f000 f8e8 	bl	8008758 <__malloc_lock>
 8008588:	4a1d      	ldr	r2, [pc, #116]	@ (8008600 <_free_r+0x90>)
 800858a:	6813      	ldr	r3, [r2, #0]
 800858c:	b933      	cbnz	r3, 800859c <_free_r+0x2c>
 800858e:	6063      	str	r3, [r4, #4]
 8008590:	6014      	str	r4, [r2, #0]
 8008592:	4628      	mov	r0, r5
 8008594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008598:	f000 b8e4 	b.w	8008764 <__malloc_unlock>
 800859c:	42a3      	cmp	r3, r4
 800859e:	d908      	bls.n	80085b2 <_free_r+0x42>
 80085a0:	6820      	ldr	r0, [r4, #0]
 80085a2:	1821      	adds	r1, r4, r0
 80085a4:	428b      	cmp	r3, r1
 80085a6:	bf01      	itttt	eq
 80085a8:	6819      	ldreq	r1, [r3, #0]
 80085aa:	685b      	ldreq	r3, [r3, #4]
 80085ac:	1809      	addeq	r1, r1, r0
 80085ae:	6021      	streq	r1, [r4, #0]
 80085b0:	e7ed      	b.n	800858e <_free_r+0x1e>
 80085b2:	461a      	mov	r2, r3
 80085b4:	685b      	ldr	r3, [r3, #4]
 80085b6:	b10b      	cbz	r3, 80085bc <_free_r+0x4c>
 80085b8:	42a3      	cmp	r3, r4
 80085ba:	d9fa      	bls.n	80085b2 <_free_r+0x42>
 80085bc:	6811      	ldr	r1, [r2, #0]
 80085be:	1850      	adds	r0, r2, r1
 80085c0:	42a0      	cmp	r0, r4
 80085c2:	d10b      	bne.n	80085dc <_free_r+0x6c>
 80085c4:	6820      	ldr	r0, [r4, #0]
 80085c6:	4401      	add	r1, r0
 80085c8:	1850      	adds	r0, r2, r1
 80085ca:	4283      	cmp	r3, r0
 80085cc:	6011      	str	r1, [r2, #0]
 80085ce:	d1e0      	bne.n	8008592 <_free_r+0x22>
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	685b      	ldr	r3, [r3, #4]
 80085d4:	6053      	str	r3, [r2, #4]
 80085d6:	4408      	add	r0, r1
 80085d8:	6010      	str	r0, [r2, #0]
 80085da:	e7da      	b.n	8008592 <_free_r+0x22>
 80085dc:	d902      	bls.n	80085e4 <_free_r+0x74>
 80085de:	230c      	movs	r3, #12
 80085e0:	602b      	str	r3, [r5, #0]
 80085e2:	e7d6      	b.n	8008592 <_free_r+0x22>
 80085e4:	6820      	ldr	r0, [r4, #0]
 80085e6:	1821      	adds	r1, r4, r0
 80085e8:	428b      	cmp	r3, r1
 80085ea:	bf04      	itt	eq
 80085ec:	6819      	ldreq	r1, [r3, #0]
 80085ee:	685b      	ldreq	r3, [r3, #4]
 80085f0:	6063      	str	r3, [r4, #4]
 80085f2:	bf04      	itt	eq
 80085f4:	1809      	addeq	r1, r1, r0
 80085f6:	6021      	streq	r1, [r4, #0]
 80085f8:	6054      	str	r4, [r2, #4]
 80085fa:	e7ca      	b.n	8008592 <_free_r+0x22>
 80085fc:	bd38      	pop	{r3, r4, r5, pc}
 80085fe:	bf00      	nop
 8008600:	200004f0 	.word	0x200004f0

08008604 <malloc>:
 8008604:	4b02      	ldr	r3, [pc, #8]	@ (8008610 <malloc+0xc>)
 8008606:	4601      	mov	r1, r0
 8008608:	6818      	ldr	r0, [r3, #0]
 800860a:	f000 b825 	b.w	8008658 <_malloc_r>
 800860e:	bf00      	nop
 8008610:	20000018 	.word	0x20000018

08008614 <sbrk_aligned>:
 8008614:	b570      	push	{r4, r5, r6, lr}
 8008616:	4e0f      	ldr	r6, [pc, #60]	@ (8008654 <sbrk_aligned+0x40>)
 8008618:	460c      	mov	r4, r1
 800861a:	6831      	ldr	r1, [r6, #0]
 800861c:	4605      	mov	r5, r0
 800861e:	b911      	cbnz	r1, 8008626 <sbrk_aligned+0x12>
 8008620:	f000 fec2 	bl	80093a8 <_sbrk_r>
 8008624:	6030      	str	r0, [r6, #0]
 8008626:	4621      	mov	r1, r4
 8008628:	4628      	mov	r0, r5
 800862a:	f000 febd 	bl	80093a8 <_sbrk_r>
 800862e:	1c43      	adds	r3, r0, #1
 8008630:	d103      	bne.n	800863a <sbrk_aligned+0x26>
 8008632:	f04f 34ff 	mov.w	r4, #4294967295
 8008636:	4620      	mov	r0, r4
 8008638:	bd70      	pop	{r4, r5, r6, pc}
 800863a:	1cc4      	adds	r4, r0, #3
 800863c:	f024 0403 	bic.w	r4, r4, #3
 8008640:	42a0      	cmp	r0, r4
 8008642:	d0f8      	beq.n	8008636 <sbrk_aligned+0x22>
 8008644:	1a21      	subs	r1, r4, r0
 8008646:	4628      	mov	r0, r5
 8008648:	f000 feae 	bl	80093a8 <_sbrk_r>
 800864c:	3001      	adds	r0, #1
 800864e:	d1f2      	bne.n	8008636 <sbrk_aligned+0x22>
 8008650:	e7ef      	b.n	8008632 <sbrk_aligned+0x1e>
 8008652:	bf00      	nop
 8008654:	200004ec 	.word	0x200004ec

08008658 <_malloc_r>:
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	1ccd      	adds	r5, r1, #3
 800865e:	f025 0503 	bic.w	r5, r5, #3
 8008662:	3508      	adds	r5, #8
 8008664:	2d0c      	cmp	r5, #12
 8008666:	bf38      	it	cc
 8008668:	250c      	movcc	r5, #12
 800866a:	2d00      	cmp	r5, #0
 800866c:	4606      	mov	r6, r0
 800866e:	db01      	blt.n	8008674 <_malloc_r+0x1c>
 8008670:	42a9      	cmp	r1, r5
 8008672:	d904      	bls.n	800867e <_malloc_r+0x26>
 8008674:	230c      	movs	r3, #12
 8008676:	6033      	str	r3, [r6, #0]
 8008678:	2000      	movs	r0, #0
 800867a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800867e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008754 <_malloc_r+0xfc>
 8008682:	f000 f869 	bl	8008758 <__malloc_lock>
 8008686:	f8d8 3000 	ldr.w	r3, [r8]
 800868a:	461c      	mov	r4, r3
 800868c:	bb44      	cbnz	r4, 80086e0 <_malloc_r+0x88>
 800868e:	4629      	mov	r1, r5
 8008690:	4630      	mov	r0, r6
 8008692:	f7ff ffbf 	bl	8008614 <sbrk_aligned>
 8008696:	1c43      	adds	r3, r0, #1
 8008698:	4604      	mov	r4, r0
 800869a:	d158      	bne.n	800874e <_malloc_r+0xf6>
 800869c:	f8d8 4000 	ldr.w	r4, [r8]
 80086a0:	4627      	mov	r7, r4
 80086a2:	2f00      	cmp	r7, #0
 80086a4:	d143      	bne.n	800872e <_malloc_r+0xd6>
 80086a6:	2c00      	cmp	r4, #0
 80086a8:	d04b      	beq.n	8008742 <_malloc_r+0xea>
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	4639      	mov	r1, r7
 80086ae:	4630      	mov	r0, r6
 80086b0:	eb04 0903 	add.w	r9, r4, r3
 80086b4:	f000 fe78 	bl	80093a8 <_sbrk_r>
 80086b8:	4581      	cmp	r9, r0
 80086ba:	d142      	bne.n	8008742 <_malloc_r+0xea>
 80086bc:	6821      	ldr	r1, [r4, #0]
 80086be:	1a6d      	subs	r5, r5, r1
 80086c0:	4629      	mov	r1, r5
 80086c2:	4630      	mov	r0, r6
 80086c4:	f7ff ffa6 	bl	8008614 <sbrk_aligned>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d03a      	beq.n	8008742 <_malloc_r+0xea>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	442b      	add	r3, r5
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	f8d8 3000 	ldr.w	r3, [r8]
 80086d6:	685a      	ldr	r2, [r3, #4]
 80086d8:	bb62      	cbnz	r2, 8008734 <_malloc_r+0xdc>
 80086da:	f8c8 7000 	str.w	r7, [r8]
 80086de:	e00f      	b.n	8008700 <_malloc_r+0xa8>
 80086e0:	6822      	ldr	r2, [r4, #0]
 80086e2:	1b52      	subs	r2, r2, r5
 80086e4:	d420      	bmi.n	8008728 <_malloc_r+0xd0>
 80086e6:	2a0b      	cmp	r2, #11
 80086e8:	d917      	bls.n	800871a <_malloc_r+0xc2>
 80086ea:	1961      	adds	r1, r4, r5
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	6025      	str	r5, [r4, #0]
 80086f0:	bf18      	it	ne
 80086f2:	6059      	strne	r1, [r3, #4]
 80086f4:	6863      	ldr	r3, [r4, #4]
 80086f6:	bf08      	it	eq
 80086f8:	f8c8 1000 	streq.w	r1, [r8]
 80086fc:	5162      	str	r2, [r4, r5]
 80086fe:	604b      	str	r3, [r1, #4]
 8008700:	4630      	mov	r0, r6
 8008702:	f000 f82f 	bl	8008764 <__malloc_unlock>
 8008706:	f104 000b 	add.w	r0, r4, #11
 800870a:	1d23      	adds	r3, r4, #4
 800870c:	f020 0007 	bic.w	r0, r0, #7
 8008710:	1ac2      	subs	r2, r0, r3
 8008712:	bf1c      	itt	ne
 8008714:	1a1b      	subne	r3, r3, r0
 8008716:	50a3      	strne	r3, [r4, r2]
 8008718:	e7af      	b.n	800867a <_malloc_r+0x22>
 800871a:	6862      	ldr	r2, [r4, #4]
 800871c:	42a3      	cmp	r3, r4
 800871e:	bf0c      	ite	eq
 8008720:	f8c8 2000 	streq.w	r2, [r8]
 8008724:	605a      	strne	r2, [r3, #4]
 8008726:	e7eb      	b.n	8008700 <_malloc_r+0xa8>
 8008728:	4623      	mov	r3, r4
 800872a:	6864      	ldr	r4, [r4, #4]
 800872c:	e7ae      	b.n	800868c <_malloc_r+0x34>
 800872e:	463c      	mov	r4, r7
 8008730:	687f      	ldr	r7, [r7, #4]
 8008732:	e7b6      	b.n	80086a2 <_malloc_r+0x4a>
 8008734:	461a      	mov	r2, r3
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	42a3      	cmp	r3, r4
 800873a:	d1fb      	bne.n	8008734 <_malloc_r+0xdc>
 800873c:	2300      	movs	r3, #0
 800873e:	6053      	str	r3, [r2, #4]
 8008740:	e7de      	b.n	8008700 <_malloc_r+0xa8>
 8008742:	230c      	movs	r3, #12
 8008744:	6033      	str	r3, [r6, #0]
 8008746:	4630      	mov	r0, r6
 8008748:	f000 f80c 	bl	8008764 <__malloc_unlock>
 800874c:	e794      	b.n	8008678 <_malloc_r+0x20>
 800874e:	6005      	str	r5, [r0, #0]
 8008750:	e7d6      	b.n	8008700 <_malloc_r+0xa8>
 8008752:	bf00      	nop
 8008754:	200004f0 	.word	0x200004f0

08008758 <__malloc_lock>:
 8008758:	4801      	ldr	r0, [pc, #4]	@ (8008760 <__malloc_lock+0x8>)
 800875a:	f7ff b8ae 	b.w	80078ba <__retarget_lock_acquire_recursive>
 800875e:	bf00      	nop
 8008760:	200004e8 	.word	0x200004e8

08008764 <__malloc_unlock>:
 8008764:	4801      	ldr	r0, [pc, #4]	@ (800876c <__malloc_unlock+0x8>)
 8008766:	f7ff b8a9 	b.w	80078bc <__retarget_lock_release_recursive>
 800876a:	bf00      	nop
 800876c:	200004e8 	.word	0x200004e8

08008770 <_Balloc>:
 8008770:	b570      	push	{r4, r5, r6, lr}
 8008772:	69c6      	ldr	r6, [r0, #28]
 8008774:	4604      	mov	r4, r0
 8008776:	460d      	mov	r5, r1
 8008778:	b976      	cbnz	r6, 8008798 <_Balloc+0x28>
 800877a:	2010      	movs	r0, #16
 800877c:	f7ff ff42 	bl	8008604 <malloc>
 8008780:	4602      	mov	r2, r0
 8008782:	61e0      	str	r0, [r4, #28]
 8008784:	b920      	cbnz	r0, 8008790 <_Balloc+0x20>
 8008786:	4b18      	ldr	r3, [pc, #96]	@ (80087e8 <_Balloc+0x78>)
 8008788:	4818      	ldr	r0, [pc, #96]	@ (80087ec <_Balloc+0x7c>)
 800878a:	216b      	movs	r1, #107	@ 0x6b
 800878c:	f000 fe2a 	bl	80093e4 <__assert_func>
 8008790:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008794:	6006      	str	r6, [r0, #0]
 8008796:	60c6      	str	r6, [r0, #12]
 8008798:	69e6      	ldr	r6, [r4, #28]
 800879a:	68f3      	ldr	r3, [r6, #12]
 800879c:	b183      	cbz	r3, 80087c0 <_Balloc+0x50>
 800879e:	69e3      	ldr	r3, [r4, #28]
 80087a0:	68db      	ldr	r3, [r3, #12]
 80087a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087a6:	b9b8      	cbnz	r0, 80087d8 <_Balloc+0x68>
 80087a8:	2101      	movs	r1, #1
 80087aa:	fa01 f605 	lsl.w	r6, r1, r5
 80087ae:	1d72      	adds	r2, r6, #5
 80087b0:	0092      	lsls	r2, r2, #2
 80087b2:	4620      	mov	r0, r4
 80087b4:	f000 fe34 	bl	8009420 <_calloc_r>
 80087b8:	b160      	cbz	r0, 80087d4 <_Balloc+0x64>
 80087ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087be:	e00e      	b.n	80087de <_Balloc+0x6e>
 80087c0:	2221      	movs	r2, #33	@ 0x21
 80087c2:	2104      	movs	r1, #4
 80087c4:	4620      	mov	r0, r4
 80087c6:	f000 fe2b 	bl	8009420 <_calloc_r>
 80087ca:	69e3      	ldr	r3, [r4, #28]
 80087cc:	60f0      	str	r0, [r6, #12]
 80087ce:	68db      	ldr	r3, [r3, #12]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d1e4      	bne.n	800879e <_Balloc+0x2e>
 80087d4:	2000      	movs	r0, #0
 80087d6:	bd70      	pop	{r4, r5, r6, pc}
 80087d8:	6802      	ldr	r2, [r0, #0]
 80087da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087de:	2300      	movs	r3, #0
 80087e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087e4:	e7f7      	b.n	80087d6 <_Balloc+0x66>
 80087e6:	bf00      	nop
 80087e8:	08009991 	.word	0x08009991
 80087ec:	08009a11 	.word	0x08009a11

080087f0 <_Bfree>:
 80087f0:	b570      	push	{r4, r5, r6, lr}
 80087f2:	69c6      	ldr	r6, [r0, #28]
 80087f4:	4605      	mov	r5, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	b976      	cbnz	r6, 8008818 <_Bfree+0x28>
 80087fa:	2010      	movs	r0, #16
 80087fc:	f7ff ff02 	bl	8008604 <malloc>
 8008800:	4602      	mov	r2, r0
 8008802:	61e8      	str	r0, [r5, #28]
 8008804:	b920      	cbnz	r0, 8008810 <_Bfree+0x20>
 8008806:	4b09      	ldr	r3, [pc, #36]	@ (800882c <_Bfree+0x3c>)
 8008808:	4809      	ldr	r0, [pc, #36]	@ (8008830 <_Bfree+0x40>)
 800880a:	218f      	movs	r1, #143	@ 0x8f
 800880c:	f000 fdea 	bl	80093e4 <__assert_func>
 8008810:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008814:	6006      	str	r6, [r0, #0]
 8008816:	60c6      	str	r6, [r0, #12]
 8008818:	b13c      	cbz	r4, 800882a <_Bfree+0x3a>
 800881a:	69eb      	ldr	r3, [r5, #28]
 800881c:	6862      	ldr	r2, [r4, #4]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008824:	6021      	str	r1, [r4, #0]
 8008826:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800882a:	bd70      	pop	{r4, r5, r6, pc}
 800882c:	08009991 	.word	0x08009991
 8008830:	08009a11 	.word	0x08009a11

08008834 <__multadd>:
 8008834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008838:	690d      	ldr	r5, [r1, #16]
 800883a:	4607      	mov	r7, r0
 800883c:	460c      	mov	r4, r1
 800883e:	461e      	mov	r6, r3
 8008840:	f101 0c14 	add.w	ip, r1, #20
 8008844:	2000      	movs	r0, #0
 8008846:	f8dc 3000 	ldr.w	r3, [ip]
 800884a:	b299      	uxth	r1, r3
 800884c:	fb02 6101 	mla	r1, r2, r1, r6
 8008850:	0c1e      	lsrs	r6, r3, #16
 8008852:	0c0b      	lsrs	r3, r1, #16
 8008854:	fb02 3306 	mla	r3, r2, r6, r3
 8008858:	b289      	uxth	r1, r1
 800885a:	3001      	adds	r0, #1
 800885c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008860:	4285      	cmp	r5, r0
 8008862:	f84c 1b04 	str.w	r1, [ip], #4
 8008866:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800886a:	dcec      	bgt.n	8008846 <__multadd+0x12>
 800886c:	b30e      	cbz	r6, 80088b2 <__multadd+0x7e>
 800886e:	68a3      	ldr	r3, [r4, #8]
 8008870:	42ab      	cmp	r3, r5
 8008872:	dc19      	bgt.n	80088a8 <__multadd+0x74>
 8008874:	6861      	ldr	r1, [r4, #4]
 8008876:	4638      	mov	r0, r7
 8008878:	3101      	adds	r1, #1
 800887a:	f7ff ff79 	bl	8008770 <_Balloc>
 800887e:	4680      	mov	r8, r0
 8008880:	b928      	cbnz	r0, 800888e <__multadd+0x5a>
 8008882:	4602      	mov	r2, r0
 8008884:	4b0c      	ldr	r3, [pc, #48]	@ (80088b8 <__multadd+0x84>)
 8008886:	480d      	ldr	r0, [pc, #52]	@ (80088bc <__multadd+0x88>)
 8008888:	21ba      	movs	r1, #186	@ 0xba
 800888a:	f000 fdab 	bl	80093e4 <__assert_func>
 800888e:	6922      	ldr	r2, [r4, #16]
 8008890:	3202      	adds	r2, #2
 8008892:	f104 010c 	add.w	r1, r4, #12
 8008896:	0092      	lsls	r2, r2, #2
 8008898:	300c      	adds	r0, #12
 800889a:	f000 fd95 	bl	80093c8 <memcpy>
 800889e:	4621      	mov	r1, r4
 80088a0:	4638      	mov	r0, r7
 80088a2:	f7ff ffa5 	bl	80087f0 <_Bfree>
 80088a6:	4644      	mov	r4, r8
 80088a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088ac:	3501      	adds	r5, #1
 80088ae:	615e      	str	r6, [r3, #20]
 80088b0:	6125      	str	r5, [r4, #16]
 80088b2:	4620      	mov	r0, r4
 80088b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088b8:	08009a00 	.word	0x08009a00
 80088bc:	08009a11 	.word	0x08009a11

080088c0 <__hi0bits>:
 80088c0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80088c4:	4603      	mov	r3, r0
 80088c6:	bf36      	itet	cc
 80088c8:	0403      	lslcc	r3, r0, #16
 80088ca:	2000      	movcs	r0, #0
 80088cc:	2010      	movcc	r0, #16
 80088ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80088d2:	bf3c      	itt	cc
 80088d4:	021b      	lslcc	r3, r3, #8
 80088d6:	3008      	addcc	r0, #8
 80088d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80088dc:	bf3c      	itt	cc
 80088de:	011b      	lslcc	r3, r3, #4
 80088e0:	3004      	addcc	r0, #4
 80088e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80088e6:	bf3c      	itt	cc
 80088e8:	009b      	lslcc	r3, r3, #2
 80088ea:	3002      	addcc	r0, #2
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	db05      	blt.n	80088fc <__hi0bits+0x3c>
 80088f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80088f4:	f100 0001 	add.w	r0, r0, #1
 80088f8:	bf08      	it	eq
 80088fa:	2020      	moveq	r0, #32
 80088fc:	4770      	bx	lr

080088fe <__lo0bits>:
 80088fe:	6803      	ldr	r3, [r0, #0]
 8008900:	4602      	mov	r2, r0
 8008902:	f013 0007 	ands.w	r0, r3, #7
 8008906:	d00b      	beq.n	8008920 <__lo0bits+0x22>
 8008908:	07d9      	lsls	r1, r3, #31
 800890a:	d421      	bmi.n	8008950 <__lo0bits+0x52>
 800890c:	0798      	lsls	r0, r3, #30
 800890e:	bf49      	itett	mi
 8008910:	085b      	lsrmi	r3, r3, #1
 8008912:	089b      	lsrpl	r3, r3, #2
 8008914:	2001      	movmi	r0, #1
 8008916:	6013      	strmi	r3, [r2, #0]
 8008918:	bf5c      	itt	pl
 800891a:	6013      	strpl	r3, [r2, #0]
 800891c:	2002      	movpl	r0, #2
 800891e:	4770      	bx	lr
 8008920:	b299      	uxth	r1, r3
 8008922:	b909      	cbnz	r1, 8008928 <__lo0bits+0x2a>
 8008924:	0c1b      	lsrs	r3, r3, #16
 8008926:	2010      	movs	r0, #16
 8008928:	b2d9      	uxtb	r1, r3
 800892a:	b909      	cbnz	r1, 8008930 <__lo0bits+0x32>
 800892c:	3008      	adds	r0, #8
 800892e:	0a1b      	lsrs	r3, r3, #8
 8008930:	0719      	lsls	r1, r3, #28
 8008932:	bf04      	itt	eq
 8008934:	091b      	lsreq	r3, r3, #4
 8008936:	3004      	addeq	r0, #4
 8008938:	0799      	lsls	r1, r3, #30
 800893a:	bf04      	itt	eq
 800893c:	089b      	lsreq	r3, r3, #2
 800893e:	3002      	addeq	r0, #2
 8008940:	07d9      	lsls	r1, r3, #31
 8008942:	d403      	bmi.n	800894c <__lo0bits+0x4e>
 8008944:	085b      	lsrs	r3, r3, #1
 8008946:	f100 0001 	add.w	r0, r0, #1
 800894a:	d003      	beq.n	8008954 <__lo0bits+0x56>
 800894c:	6013      	str	r3, [r2, #0]
 800894e:	4770      	bx	lr
 8008950:	2000      	movs	r0, #0
 8008952:	4770      	bx	lr
 8008954:	2020      	movs	r0, #32
 8008956:	4770      	bx	lr

08008958 <__i2b>:
 8008958:	b510      	push	{r4, lr}
 800895a:	460c      	mov	r4, r1
 800895c:	2101      	movs	r1, #1
 800895e:	f7ff ff07 	bl	8008770 <_Balloc>
 8008962:	4602      	mov	r2, r0
 8008964:	b928      	cbnz	r0, 8008972 <__i2b+0x1a>
 8008966:	4b05      	ldr	r3, [pc, #20]	@ (800897c <__i2b+0x24>)
 8008968:	4805      	ldr	r0, [pc, #20]	@ (8008980 <__i2b+0x28>)
 800896a:	f240 1145 	movw	r1, #325	@ 0x145
 800896e:	f000 fd39 	bl	80093e4 <__assert_func>
 8008972:	2301      	movs	r3, #1
 8008974:	6144      	str	r4, [r0, #20]
 8008976:	6103      	str	r3, [r0, #16]
 8008978:	bd10      	pop	{r4, pc}
 800897a:	bf00      	nop
 800897c:	08009a00 	.word	0x08009a00
 8008980:	08009a11 	.word	0x08009a11

08008984 <__multiply>:
 8008984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008988:	4617      	mov	r7, r2
 800898a:	690a      	ldr	r2, [r1, #16]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	429a      	cmp	r2, r3
 8008990:	bfa8      	it	ge
 8008992:	463b      	movge	r3, r7
 8008994:	4689      	mov	r9, r1
 8008996:	bfa4      	itt	ge
 8008998:	460f      	movge	r7, r1
 800899a:	4699      	movge	r9, r3
 800899c:	693d      	ldr	r5, [r7, #16]
 800899e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6879      	ldr	r1, [r7, #4]
 80089a6:	eb05 060a 	add.w	r6, r5, sl
 80089aa:	42b3      	cmp	r3, r6
 80089ac:	b085      	sub	sp, #20
 80089ae:	bfb8      	it	lt
 80089b0:	3101      	addlt	r1, #1
 80089b2:	f7ff fedd 	bl	8008770 <_Balloc>
 80089b6:	b930      	cbnz	r0, 80089c6 <__multiply+0x42>
 80089b8:	4602      	mov	r2, r0
 80089ba:	4b41      	ldr	r3, [pc, #260]	@ (8008ac0 <__multiply+0x13c>)
 80089bc:	4841      	ldr	r0, [pc, #260]	@ (8008ac4 <__multiply+0x140>)
 80089be:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80089c2:	f000 fd0f 	bl	80093e4 <__assert_func>
 80089c6:	f100 0414 	add.w	r4, r0, #20
 80089ca:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80089ce:	4623      	mov	r3, r4
 80089d0:	2200      	movs	r2, #0
 80089d2:	4573      	cmp	r3, lr
 80089d4:	d320      	bcc.n	8008a18 <__multiply+0x94>
 80089d6:	f107 0814 	add.w	r8, r7, #20
 80089da:	f109 0114 	add.w	r1, r9, #20
 80089de:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80089e2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80089e6:	9302      	str	r3, [sp, #8]
 80089e8:	1beb      	subs	r3, r5, r7
 80089ea:	3b15      	subs	r3, #21
 80089ec:	f023 0303 	bic.w	r3, r3, #3
 80089f0:	3304      	adds	r3, #4
 80089f2:	3715      	adds	r7, #21
 80089f4:	42bd      	cmp	r5, r7
 80089f6:	bf38      	it	cc
 80089f8:	2304      	movcc	r3, #4
 80089fa:	9301      	str	r3, [sp, #4]
 80089fc:	9b02      	ldr	r3, [sp, #8]
 80089fe:	9103      	str	r1, [sp, #12]
 8008a00:	428b      	cmp	r3, r1
 8008a02:	d80c      	bhi.n	8008a1e <__multiply+0x9a>
 8008a04:	2e00      	cmp	r6, #0
 8008a06:	dd03      	ble.n	8008a10 <__multiply+0x8c>
 8008a08:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d055      	beq.n	8008abc <__multiply+0x138>
 8008a10:	6106      	str	r6, [r0, #16]
 8008a12:	b005      	add	sp, #20
 8008a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a18:	f843 2b04 	str.w	r2, [r3], #4
 8008a1c:	e7d9      	b.n	80089d2 <__multiply+0x4e>
 8008a1e:	f8b1 a000 	ldrh.w	sl, [r1]
 8008a22:	f1ba 0f00 	cmp.w	sl, #0
 8008a26:	d01f      	beq.n	8008a68 <__multiply+0xe4>
 8008a28:	46c4      	mov	ip, r8
 8008a2a:	46a1      	mov	r9, r4
 8008a2c:	2700      	movs	r7, #0
 8008a2e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a32:	f8d9 3000 	ldr.w	r3, [r9]
 8008a36:	fa1f fb82 	uxth.w	fp, r2
 8008a3a:	b29b      	uxth	r3, r3
 8008a3c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008a40:	443b      	add	r3, r7
 8008a42:	f8d9 7000 	ldr.w	r7, [r9]
 8008a46:	0c12      	lsrs	r2, r2, #16
 8008a48:	0c3f      	lsrs	r7, r7, #16
 8008a4a:	fb0a 7202 	mla	r2, sl, r2, r7
 8008a4e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008a52:	b29b      	uxth	r3, r3
 8008a54:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a58:	4565      	cmp	r5, ip
 8008a5a:	f849 3b04 	str.w	r3, [r9], #4
 8008a5e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008a62:	d8e4      	bhi.n	8008a2e <__multiply+0xaa>
 8008a64:	9b01      	ldr	r3, [sp, #4]
 8008a66:	50e7      	str	r7, [r4, r3]
 8008a68:	9b03      	ldr	r3, [sp, #12]
 8008a6a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008a6e:	3104      	adds	r1, #4
 8008a70:	f1b9 0f00 	cmp.w	r9, #0
 8008a74:	d020      	beq.n	8008ab8 <__multiply+0x134>
 8008a76:	6823      	ldr	r3, [r4, #0]
 8008a78:	4647      	mov	r7, r8
 8008a7a:	46a4      	mov	ip, r4
 8008a7c:	f04f 0a00 	mov.w	sl, #0
 8008a80:	f8b7 b000 	ldrh.w	fp, [r7]
 8008a84:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008a88:	fb09 220b 	mla	r2, r9, fp, r2
 8008a8c:	4452      	add	r2, sl
 8008a8e:	b29b      	uxth	r3, r3
 8008a90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a94:	f84c 3b04 	str.w	r3, [ip], #4
 8008a98:	f857 3b04 	ldr.w	r3, [r7], #4
 8008a9c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008aa0:	f8bc 3000 	ldrh.w	r3, [ip]
 8008aa4:	fb09 330a 	mla	r3, r9, sl, r3
 8008aa8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008aac:	42bd      	cmp	r5, r7
 8008aae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008ab2:	d8e5      	bhi.n	8008a80 <__multiply+0xfc>
 8008ab4:	9a01      	ldr	r2, [sp, #4]
 8008ab6:	50a3      	str	r3, [r4, r2]
 8008ab8:	3404      	adds	r4, #4
 8008aba:	e79f      	b.n	80089fc <__multiply+0x78>
 8008abc:	3e01      	subs	r6, #1
 8008abe:	e7a1      	b.n	8008a04 <__multiply+0x80>
 8008ac0:	08009a00 	.word	0x08009a00
 8008ac4:	08009a11 	.word	0x08009a11

08008ac8 <__pow5mult>:
 8008ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008acc:	4615      	mov	r5, r2
 8008ace:	f012 0203 	ands.w	r2, r2, #3
 8008ad2:	4607      	mov	r7, r0
 8008ad4:	460e      	mov	r6, r1
 8008ad6:	d007      	beq.n	8008ae8 <__pow5mult+0x20>
 8008ad8:	4c25      	ldr	r4, [pc, #148]	@ (8008b70 <__pow5mult+0xa8>)
 8008ada:	3a01      	subs	r2, #1
 8008adc:	2300      	movs	r3, #0
 8008ade:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ae2:	f7ff fea7 	bl	8008834 <__multadd>
 8008ae6:	4606      	mov	r6, r0
 8008ae8:	10ad      	asrs	r5, r5, #2
 8008aea:	d03d      	beq.n	8008b68 <__pow5mult+0xa0>
 8008aec:	69fc      	ldr	r4, [r7, #28]
 8008aee:	b97c      	cbnz	r4, 8008b10 <__pow5mult+0x48>
 8008af0:	2010      	movs	r0, #16
 8008af2:	f7ff fd87 	bl	8008604 <malloc>
 8008af6:	4602      	mov	r2, r0
 8008af8:	61f8      	str	r0, [r7, #28]
 8008afa:	b928      	cbnz	r0, 8008b08 <__pow5mult+0x40>
 8008afc:	4b1d      	ldr	r3, [pc, #116]	@ (8008b74 <__pow5mult+0xac>)
 8008afe:	481e      	ldr	r0, [pc, #120]	@ (8008b78 <__pow5mult+0xb0>)
 8008b00:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008b04:	f000 fc6e 	bl	80093e4 <__assert_func>
 8008b08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008b0c:	6004      	str	r4, [r0, #0]
 8008b0e:	60c4      	str	r4, [r0, #12]
 8008b10:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008b14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b18:	b94c      	cbnz	r4, 8008b2e <__pow5mult+0x66>
 8008b1a:	f240 2171 	movw	r1, #625	@ 0x271
 8008b1e:	4638      	mov	r0, r7
 8008b20:	f7ff ff1a 	bl	8008958 <__i2b>
 8008b24:	2300      	movs	r3, #0
 8008b26:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b2a:	4604      	mov	r4, r0
 8008b2c:	6003      	str	r3, [r0, #0]
 8008b2e:	f04f 0900 	mov.w	r9, #0
 8008b32:	07eb      	lsls	r3, r5, #31
 8008b34:	d50a      	bpl.n	8008b4c <__pow5mult+0x84>
 8008b36:	4631      	mov	r1, r6
 8008b38:	4622      	mov	r2, r4
 8008b3a:	4638      	mov	r0, r7
 8008b3c:	f7ff ff22 	bl	8008984 <__multiply>
 8008b40:	4631      	mov	r1, r6
 8008b42:	4680      	mov	r8, r0
 8008b44:	4638      	mov	r0, r7
 8008b46:	f7ff fe53 	bl	80087f0 <_Bfree>
 8008b4a:	4646      	mov	r6, r8
 8008b4c:	106d      	asrs	r5, r5, #1
 8008b4e:	d00b      	beq.n	8008b68 <__pow5mult+0xa0>
 8008b50:	6820      	ldr	r0, [r4, #0]
 8008b52:	b938      	cbnz	r0, 8008b64 <__pow5mult+0x9c>
 8008b54:	4622      	mov	r2, r4
 8008b56:	4621      	mov	r1, r4
 8008b58:	4638      	mov	r0, r7
 8008b5a:	f7ff ff13 	bl	8008984 <__multiply>
 8008b5e:	6020      	str	r0, [r4, #0]
 8008b60:	f8c0 9000 	str.w	r9, [r0]
 8008b64:	4604      	mov	r4, r0
 8008b66:	e7e4      	b.n	8008b32 <__pow5mult+0x6a>
 8008b68:	4630      	mov	r0, r6
 8008b6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b6e:	bf00      	nop
 8008b70:	08009ac4 	.word	0x08009ac4
 8008b74:	08009991 	.word	0x08009991
 8008b78:	08009a11 	.word	0x08009a11

08008b7c <__lshift>:
 8008b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b80:	460c      	mov	r4, r1
 8008b82:	6849      	ldr	r1, [r1, #4]
 8008b84:	6923      	ldr	r3, [r4, #16]
 8008b86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b8a:	68a3      	ldr	r3, [r4, #8]
 8008b8c:	4607      	mov	r7, r0
 8008b8e:	4691      	mov	r9, r2
 8008b90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b94:	f108 0601 	add.w	r6, r8, #1
 8008b98:	42b3      	cmp	r3, r6
 8008b9a:	db0b      	blt.n	8008bb4 <__lshift+0x38>
 8008b9c:	4638      	mov	r0, r7
 8008b9e:	f7ff fde7 	bl	8008770 <_Balloc>
 8008ba2:	4605      	mov	r5, r0
 8008ba4:	b948      	cbnz	r0, 8008bba <__lshift+0x3e>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4b28      	ldr	r3, [pc, #160]	@ (8008c4c <__lshift+0xd0>)
 8008baa:	4829      	ldr	r0, [pc, #164]	@ (8008c50 <__lshift+0xd4>)
 8008bac:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008bb0:	f000 fc18 	bl	80093e4 <__assert_func>
 8008bb4:	3101      	adds	r1, #1
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	e7ee      	b.n	8008b98 <__lshift+0x1c>
 8008bba:	2300      	movs	r3, #0
 8008bbc:	f100 0114 	add.w	r1, r0, #20
 8008bc0:	f100 0210 	add.w	r2, r0, #16
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	4553      	cmp	r3, sl
 8008bc8:	db33      	blt.n	8008c32 <__lshift+0xb6>
 8008bca:	6920      	ldr	r0, [r4, #16]
 8008bcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bd0:	f104 0314 	add.w	r3, r4, #20
 8008bd4:	f019 091f 	ands.w	r9, r9, #31
 8008bd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bdc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008be0:	d02b      	beq.n	8008c3a <__lshift+0xbe>
 8008be2:	f1c9 0e20 	rsb	lr, r9, #32
 8008be6:	468a      	mov	sl, r1
 8008be8:	2200      	movs	r2, #0
 8008bea:	6818      	ldr	r0, [r3, #0]
 8008bec:	fa00 f009 	lsl.w	r0, r0, r9
 8008bf0:	4310      	orrs	r0, r2
 8008bf2:	f84a 0b04 	str.w	r0, [sl], #4
 8008bf6:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bfa:	459c      	cmp	ip, r3
 8008bfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8008c00:	d8f3      	bhi.n	8008bea <__lshift+0x6e>
 8008c02:	ebac 0304 	sub.w	r3, ip, r4
 8008c06:	3b15      	subs	r3, #21
 8008c08:	f023 0303 	bic.w	r3, r3, #3
 8008c0c:	3304      	adds	r3, #4
 8008c0e:	f104 0015 	add.w	r0, r4, #21
 8008c12:	4560      	cmp	r0, ip
 8008c14:	bf88      	it	hi
 8008c16:	2304      	movhi	r3, #4
 8008c18:	50ca      	str	r2, [r1, r3]
 8008c1a:	b10a      	cbz	r2, 8008c20 <__lshift+0xa4>
 8008c1c:	f108 0602 	add.w	r6, r8, #2
 8008c20:	3e01      	subs	r6, #1
 8008c22:	4638      	mov	r0, r7
 8008c24:	612e      	str	r6, [r5, #16]
 8008c26:	4621      	mov	r1, r4
 8008c28:	f7ff fde2 	bl	80087f0 <_Bfree>
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c32:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c36:	3301      	adds	r3, #1
 8008c38:	e7c5      	b.n	8008bc6 <__lshift+0x4a>
 8008c3a:	3904      	subs	r1, #4
 8008c3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c40:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c44:	459c      	cmp	ip, r3
 8008c46:	d8f9      	bhi.n	8008c3c <__lshift+0xc0>
 8008c48:	e7ea      	b.n	8008c20 <__lshift+0xa4>
 8008c4a:	bf00      	nop
 8008c4c:	08009a00 	.word	0x08009a00
 8008c50:	08009a11 	.word	0x08009a11

08008c54 <__mcmp>:
 8008c54:	690a      	ldr	r2, [r1, #16]
 8008c56:	4603      	mov	r3, r0
 8008c58:	6900      	ldr	r0, [r0, #16]
 8008c5a:	1a80      	subs	r0, r0, r2
 8008c5c:	b530      	push	{r4, r5, lr}
 8008c5e:	d10e      	bne.n	8008c7e <__mcmp+0x2a>
 8008c60:	3314      	adds	r3, #20
 8008c62:	3114      	adds	r1, #20
 8008c64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008c68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008c6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008c70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008c74:	4295      	cmp	r5, r2
 8008c76:	d003      	beq.n	8008c80 <__mcmp+0x2c>
 8008c78:	d205      	bcs.n	8008c86 <__mcmp+0x32>
 8008c7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008c7e:	bd30      	pop	{r4, r5, pc}
 8008c80:	42a3      	cmp	r3, r4
 8008c82:	d3f3      	bcc.n	8008c6c <__mcmp+0x18>
 8008c84:	e7fb      	b.n	8008c7e <__mcmp+0x2a>
 8008c86:	2001      	movs	r0, #1
 8008c88:	e7f9      	b.n	8008c7e <__mcmp+0x2a>
	...

08008c8c <__mdiff>:
 8008c8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c90:	4689      	mov	r9, r1
 8008c92:	4606      	mov	r6, r0
 8008c94:	4611      	mov	r1, r2
 8008c96:	4648      	mov	r0, r9
 8008c98:	4614      	mov	r4, r2
 8008c9a:	f7ff ffdb 	bl	8008c54 <__mcmp>
 8008c9e:	1e05      	subs	r5, r0, #0
 8008ca0:	d112      	bne.n	8008cc8 <__mdiff+0x3c>
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f7ff fd63 	bl	8008770 <_Balloc>
 8008caa:	4602      	mov	r2, r0
 8008cac:	b928      	cbnz	r0, 8008cba <__mdiff+0x2e>
 8008cae:	4b3f      	ldr	r3, [pc, #252]	@ (8008dac <__mdiff+0x120>)
 8008cb0:	f240 2137 	movw	r1, #567	@ 0x237
 8008cb4:	483e      	ldr	r0, [pc, #248]	@ (8008db0 <__mdiff+0x124>)
 8008cb6:	f000 fb95 	bl	80093e4 <__assert_func>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	b003      	add	sp, #12
 8008cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc8:	bfbc      	itt	lt
 8008cca:	464b      	movlt	r3, r9
 8008ccc:	46a1      	movlt	r9, r4
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008cd4:	bfba      	itte	lt
 8008cd6:	461c      	movlt	r4, r3
 8008cd8:	2501      	movlt	r5, #1
 8008cda:	2500      	movge	r5, #0
 8008cdc:	f7ff fd48 	bl	8008770 <_Balloc>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	b918      	cbnz	r0, 8008cec <__mdiff+0x60>
 8008ce4:	4b31      	ldr	r3, [pc, #196]	@ (8008dac <__mdiff+0x120>)
 8008ce6:	f240 2145 	movw	r1, #581	@ 0x245
 8008cea:	e7e3      	b.n	8008cb4 <__mdiff+0x28>
 8008cec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008cf0:	6926      	ldr	r6, [r4, #16]
 8008cf2:	60c5      	str	r5, [r0, #12]
 8008cf4:	f109 0310 	add.w	r3, r9, #16
 8008cf8:	f109 0514 	add.w	r5, r9, #20
 8008cfc:	f104 0e14 	add.w	lr, r4, #20
 8008d00:	f100 0b14 	add.w	fp, r0, #20
 8008d04:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008d08:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	46d9      	mov	r9, fp
 8008d10:	f04f 0c00 	mov.w	ip, #0
 8008d14:	9b01      	ldr	r3, [sp, #4]
 8008d16:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008d1a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008d1e:	9301      	str	r3, [sp, #4]
 8008d20:	fa1f f38a 	uxth.w	r3, sl
 8008d24:	4619      	mov	r1, r3
 8008d26:	b283      	uxth	r3, r0
 8008d28:	1acb      	subs	r3, r1, r3
 8008d2a:	0c00      	lsrs	r0, r0, #16
 8008d2c:	4463      	add	r3, ip
 8008d2e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008d32:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008d36:	b29b      	uxth	r3, r3
 8008d38:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008d3c:	4576      	cmp	r6, lr
 8008d3e:	f849 3b04 	str.w	r3, [r9], #4
 8008d42:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d46:	d8e5      	bhi.n	8008d14 <__mdiff+0x88>
 8008d48:	1b33      	subs	r3, r6, r4
 8008d4a:	3b15      	subs	r3, #21
 8008d4c:	f023 0303 	bic.w	r3, r3, #3
 8008d50:	3415      	adds	r4, #21
 8008d52:	3304      	adds	r3, #4
 8008d54:	42a6      	cmp	r6, r4
 8008d56:	bf38      	it	cc
 8008d58:	2304      	movcc	r3, #4
 8008d5a:	441d      	add	r5, r3
 8008d5c:	445b      	add	r3, fp
 8008d5e:	461e      	mov	r6, r3
 8008d60:	462c      	mov	r4, r5
 8008d62:	4544      	cmp	r4, r8
 8008d64:	d30e      	bcc.n	8008d84 <__mdiff+0xf8>
 8008d66:	f108 0103 	add.w	r1, r8, #3
 8008d6a:	1b49      	subs	r1, r1, r5
 8008d6c:	f021 0103 	bic.w	r1, r1, #3
 8008d70:	3d03      	subs	r5, #3
 8008d72:	45a8      	cmp	r8, r5
 8008d74:	bf38      	it	cc
 8008d76:	2100      	movcc	r1, #0
 8008d78:	440b      	add	r3, r1
 8008d7a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d7e:	b191      	cbz	r1, 8008da6 <__mdiff+0x11a>
 8008d80:	6117      	str	r7, [r2, #16]
 8008d82:	e79d      	b.n	8008cc0 <__mdiff+0x34>
 8008d84:	f854 1b04 	ldr.w	r1, [r4], #4
 8008d88:	46e6      	mov	lr, ip
 8008d8a:	0c08      	lsrs	r0, r1, #16
 8008d8c:	fa1c fc81 	uxtah	ip, ip, r1
 8008d90:	4471      	add	r1, lr
 8008d92:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008d96:	b289      	uxth	r1, r1
 8008d98:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d9c:	f846 1b04 	str.w	r1, [r6], #4
 8008da0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008da4:	e7dd      	b.n	8008d62 <__mdiff+0xd6>
 8008da6:	3f01      	subs	r7, #1
 8008da8:	e7e7      	b.n	8008d7a <__mdiff+0xee>
 8008daa:	bf00      	nop
 8008dac:	08009a00 	.word	0x08009a00
 8008db0:	08009a11 	.word	0x08009a11

08008db4 <__d2b>:
 8008db4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008db8:	460f      	mov	r7, r1
 8008dba:	2101      	movs	r1, #1
 8008dbc:	ec59 8b10 	vmov	r8, r9, d0
 8008dc0:	4616      	mov	r6, r2
 8008dc2:	f7ff fcd5 	bl	8008770 <_Balloc>
 8008dc6:	4604      	mov	r4, r0
 8008dc8:	b930      	cbnz	r0, 8008dd8 <__d2b+0x24>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	4b23      	ldr	r3, [pc, #140]	@ (8008e5c <__d2b+0xa8>)
 8008dce:	4824      	ldr	r0, [pc, #144]	@ (8008e60 <__d2b+0xac>)
 8008dd0:	f240 310f 	movw	r1, #783	@ 0x30f
 8008dd4:	f000 fb06 	bl	80093e4 <__assert_func>
 8008dd8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008ddc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008de0:	b10d      	cbz	r5, 8008de6 <__d2b+0x32>
 8008de2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	f1b8 0300 	subs.w	r3, r8, #0
 8008dec:	d023      	beq.n	8008e36 <__d2b+0x82>
 8008dee:	4668      	mov	r0, sp
 8008df0:	9300      	str	r3, [sp, #0]
 8008df2:	f7ff fd84 	bl	80088fe <__lo0bits>
 8008df6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008dfa:	b1d0      	cbz	r0, 8008e32 <__d2b+0x7e>
 8008dfc:	f1c0 0320 	rsb	r3, r0, #32
 8008e00:	fa02 f303 	lsl.w	r3, r2, r3
 8008e04:	430b      	orrs	r3, r1
 8008e06:	40c2      	lsrs	r2, r0
 8008e08:	6163      	str	r3, [r4, #20]
 8008e0a:	9201      	str	r2, [sp, #4]
 8008e0c:	9b01      	ldr	r3, [sp, #4]
 8008e0e:	61a3      	str	r3, [r4, #24]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	bf0c      	ite	eq
 8008e14:	2201      	moveq	r2, #1
 8008e16:	2202      	movne	r2, #2
 8008e18:	6122      	str	r2, [r4, #16]
 8008e1a:	b1a5      	cbz	r5, 8008e46 <__d2b+0x92>
 8008e1c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008e20:	4405      	add	r5, r0
 8008e22:	603d      	str	r5, [r7, #0]
 8008e24:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008e28:	6030      	str	r0, [r6, #0]
 8008e2a:	4620      	mov	r0, r4
 8008e2c:	b003      	add	sp, #12
 8008e2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e32:	6161      	str	r1, [r4, #20]
 8008e34:	e7ea      	b.n	8008e0c <__d2b+0x58>
 8008e36:	a801      	add	r0, sp, #4
 8008e38:	f7ff fd61 	bl	80088fe <__lo0bits>
 8008e3c:	9b01      	ldr	r3, [sp, #4]
 8008e3e:	6163      	str	r3, [r4, #20]
 8008e40:	3020      	adds	r0, #32
 8008e42:	2201      	movs	r2, #1
 8008e44:	e7e8      	b.n	8008e18 <__d2b+0x64>
 8008e46:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e4a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008e4e:	6038      	str	r0, [r7, #0]
 8008e50:	6918      	ldr	r0, [r3, #16]
 8008e52:	f7ff fd35 	bl	80088c0 <__hi0bits>
 8008e56:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e5a:	e7e5      	b.n	8008e28 <__d2b+0x74>
 8008e5c:	08009a00 	.word	0x08009a00
 8008e60:	08009a11 	.word	0x08009a11

08008e64 <__ssputs_r>:
 8008e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e68:	688e      	ldr	r6, [r1, #8]
 8008e6a:	461f      	mov	r7, r3
 8008e6c:	42be      	cmp	r6, r7
 8008e6e:	680b      	ldr	r3, [r1, #0]
 8008e70:	4682      	mov	sl, r0
 8008e72:	460c      	mov	r4, r1
 8008e74:	4690      	mov	r8, r2
 8008e76:	d82d      	bhi.n	8008ed4 <__ssputs_r+0x70>
 8008e78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008e7c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008e80:	d026      	beq.n	8008ed0 <__ssputs_r+0x6c>
 8008e82:	6965      	ldr	r5, [r4, #20]
 8008e84:	6909      	ldr	r1, [r1, #16]
 8008e86:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008e8a:	eba3 0901 	sub.w	r9, r3, r1
 8008e8e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008e92:	1c7b      	adds	r3, r7, #1
 8008e94:	444b      	add	r3, r9
 8008e96:	106d      	asrs	r5, r5, #1
 8008e98:	429d      	cmp	r5, r3
 8008e9a:	bf38      	it	cc
 8008e9c:	461d      	movcc	r5, r3
 8008e9e:	0553      	lsls	r3, r2, #21
 8008ea0:	d527      	bpl.n	8008ef2 <__ssputs_r+0x8e>
 8008ea2:	4629      	mov	r1, r5
 8008ea4:	f7ff fbd8 	bl	8008658 <_malloc_r>
 8008ea8:	4606      	mov	r6, r0
 8008eaa:	b360      	cbz	r0, 8008f06 <__ssputs_r+0xa2>
 8008eac:	6921      	ldr	r1, [r4, #16]
 8008eae:	464a      	mov	r2, r9
 8008eb0:	f000 fa8a 	bl	80093c8 <memcpy>
 8008eb4:	89a3      	ldrh	r3, [r4, #12]
 8008eb6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008eba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ebe:	81a3      	strh	r3, [r4, #12]
 8008ec0:	6126      	str	r6, [r4, #16]
 8008ec2:	6165      	str	r5, [r4, #20]
 8008ec4:	444e      	add	r6, r9
 8008ec6:	eba5 0509 	sub.w	r5, r5, r9
 8008eca:	6026      	str	r6, [r4, #0]
 8008ecc:	60a5      	str	r5, [r4, #8]
 8008ece:	463e      	mov	r6, r7
 8008ed0:	42be      	cmp	r6, r7
 8008ed2:	d900      	bls.n	8008ed6 <__ssputs_r+0x72>
 8008ed4:	463e      	mov	r6, r7
 8008ed6:	6820      	ldr	r0, [r4, #0]
 8008ed8:	4632      	mov	r2, r6
 8008eda:	4641      	mov	r1, r8
 8008edc:	f000 fa28 	bl	8009330 <memmove>
 8008ee0:	68a3      	ldr	r3, [r4, #8]
 8008ee2:	1b9b      	subs	r3, r3, r6
 8008ee4:	60a3      	str	r3, [r4, #8]
 8008ee6:	6823      	ldr	r3, [r4, #0]
 8008ee8:	4433      	add	r3, r6
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	2000      	movs	r0, #0
 8008eee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef2:	462a      	mov	r2, r5
 8008ef4:	f000 faba 	bl	800946c <_realloc_r>
 8008ef8:	4606      	mov	r6, r0
 8008efa:	2800      	cmp	r0, #0
 8008efc:	d1e0      	bne.n	8008ec0 <__ssputs_r+0x5c>
 8008efe:	6921      	ldr	r1, [r4, #16]
 8008f00:	4650      	mov	r0, sl
 8008f02:	f7ff fb35 	bl	8008570 <_free_r>
 8008f06:	230c      	movs	r3, #12
 8008f08:	f8ca 3000 	str.w	r3, [sl]
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f12:	81a3      	strh	r3, [r4, #12]
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295
 8008f18:	e7e9      	b.n	8008eee <__ssputs_r+0x8a>
	...

08008f1c <_svfiprintf_r>:
 8008f1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f20:	4698      	mov	r8, r3
 8008f22:	898b      	ldrh	r3, [r1, #12]
 8008f24:	061b      	lsls	r3, r3, #24
 8008f26:	b09d      	sub	sp, #116	@ 0x74
 8008f28:	4607      	mov	r7, r0
 8008f2a:	460d      	mov	r5, r1
 8008f2c:	4614      	mov	r4, r2
 8008f2e:	d510      	bpl.n	8008f52 <_svfiprintf_r+0x36>
 8008f30:	690b      	ldr	r3, [r1, #16]
 8008f32:	b973      	cbnz	r3, 8008f52 <_svfiprintf_r+0x36>
 8008f34:	2140      	movs	r1, #64	@ 0x40
 8008f36:	f7ff fb8f 	bl	8008658 <_malloc_r>
 8008f3a:	6028      	str	r0, [r5, #0]
 8008f3c:	6128      	str	r0, [r5, #16]
 8008f3e:	b930      	cbnz	r0, 8008f4e <_svfiprintf_r+0x32>
 8008f40:	230c      	movs	r3, #12
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	f04f 30ff 	mov.w	r0, #4294967295
 8008f48:	b01d      	add	sp, #116	@ 0x74
 8008f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f4e:	2340      	movs	r3, #64	@ 0x40
 8008f50:	616b      	str	r3, [r5, #20]
 8008f52:	2300      	movs	r3, #0
 8008f54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f56:	2320      	movs	r3, #32
 8008f58:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008f5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f60:	2330      	movs	r3, #48	@ 0x30
 8008f62:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009100 <_svfiprintf_r+0x1e4>
 8008f66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008f6a:	f04f 0901 	mov.w	r9, #1
 8008f6e:	4623      	mov	r3, r4
 8008f70:	469a      	mov	sl, r3
 8008f72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f76:	b10a      	cbz	r2, 8008f7c <_svfiprintf_r+0x60>
 8008f78:	2a25      	cmp	r2, #37	@ 0x25
 8008f7a:	d1f9      	bne.n	8008f70 <_svfiprintf_r+0x54>
 8008f7c:	ebba 0b04 	subs.w	fp, sl, r4
 8008f80:	d00b      	beq.n	8008f9a <_svfiprintf_r+0x7e>
 8008f82:	465b      	mov	r3, fp
 8008f84:	4622      	mov	r2, r4
 8008f86:	4629      	mov	r1, r5
 8008f88:	4638      	mov	r0, r7
 8008f8a:	f7ff ff6b 	bl	8008e64 <__ssputs_r>
 8008f8e:	3001      	adds	r0, #1
 8008f90:	f000 80a7 	beq.w	80090e2 <_svfiprintf_r+0x1c6>
 8008f94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f96:	445a      	add	r2, fp
 8008f98:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f9a:	f89a 3000 	ldrb.w	r3, [sl]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	f000 809f 	beq.w	80090e2 <_svfiprintf_r+0x1c6>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	f04f 32ff 	mov.w	r2, #4294967295
 8008faa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008fae:	f10a 0a01 	add.w	sl, sl, #1
 8008fb2:	9304      	str	r3, [sp, #16]
 8008fb4:	9307      	str	r3, [sp, #28]
 8008fb6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008fba:	931a      	str	r3, [sp, #104]	@ 0x68
 8008fbc:	4654      	mov	r4, sl
 8008fbe:	2205      	movs	r2, #5
 8008fc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008fc4:	484e      	ldr	r0, [pc, #312]	@ (8009100 <_svfiprintf_r+0x1e4>)
 8008fc6:	f7f7 f903 	bl	80001d0 <memchr>
 8008fca:	9a04      	ldr	r2, [sp, #16]
 8008fcc:	b9d8      	cbnz	r0, 8009006 <_svfiprintf_r+0xea>
 8008fce:	06d0      	lsls	r0, r2, #27
 8008fd0:	bf44      	itt	mi
 8008fd2:	2320      	movmi	r3, #32
 8008fd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fd8:	0711      	lsls	r1, r2, #28
 8008fda:	bf44      	itt	mi
 8008fdc:	232b      	movmi	r3, #43	@ 0x2b
 8008fde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008fe2:	f89a 3000 	ldrb.w	r3, [sl]
 8008fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8008fe8:	d015      	beq.n	8009016 <_svfiprintf_r+0xfa>
 8008fea:	9a07      	ldr	r2, [sp, #28]
 8008fec:	4654      	mov	r4, sl
 8008fee:	2000      	movs	r0, #0
 8008ff0:	f04f 0c0a 	mov.w	ip, #10
 8008ff4:	4621      	mov	r1, r4
 8008ff6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ffa:	3b30      	subs	r3, #48	@ 0x30
 8008ffc:	2b09      	cmp	r3, #9
 8008ffe:	d94b      	bls.n	8009098 <_svfiprintf_r+0x17c>
 8009000:	b1b0      	cbz	r0, 8009030 <_svfiprintf_r+0x114>
 8009002:	9207      	str	r2, [sp, #28]
 8009004:	e014      	b.n	8009030 <_svfiprintf_r+0x114>
 8009006:	eba0 0308 	sub.w	r3, r0, r8
 800900a:	fa09 f303 	lsl.w	r3, r9, r3
 800900e:	4313      	orrs	r3, r2
 8009010:	9304      	str	r3, [sp, #16]
 8009012:	46a2      	mov	sl, r4
 8009014:	e7d2      	b.n	8008fbc <_svfiprintf_r+0xa0>
 8009016:	9b03      	ldr	r3, [sp, #12]
 8009018:	1d19      	adds	r1, r3, #4
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	9103      	str	r1, [sp, #12]
 800901e:	2b00      	cmp	r3, #0
 8009020:	bfbb      	ittet	lt
 8009022:	425b      	neglt	r3, r3
 8009024:	f042 0202 	orrlt.w	r2, r2, #2
 8009028:	9307      	strge	r3, [sp, #28]
 800902a:	9307      	strlt	r3, [sp, #28]
 800902c:	bfb8      	it	lt
 800902e:	9204      	strlt	r2, [sp, #16]
 8009030:	7823      	ldrb	r3, [r4, #0]
 8009032:	2b2e      	cmp	r3, #46	@ 0x2e
 8009034:	d10a      	bne.n	800904c <_svfiprintf_r+0x130>
 8009036:	7863      	ldrb	r3, [r4, #1]
 8009038:	2b2a      	cmp	r3, #42	@ 0x2a
 800903a:	d132      	bne.n	80090a2 <_svfiprintf_r+0x186>
 800903c:	9b03      	ldr	r3, [sp, #12]
 800903e:	1d1a      	adds	r2, r3, #4
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	9203      	str	r2, [sp, #12]
 8009044:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009048:	3402      	adds	r4, #2
 800904a:	9305      	str	r3, [sp, #20]
 800904c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009110 <_svfiprintf_r+0x1f4>
 8009050:	7821      	ldrb	r1, [r4, #0]
 8009052:	2203      	movs	r2, #3
 8009054:	4650      	mov	r0, sl
 8009056:	f7f7 f8bb 	bl	80001d0 <memchr>
 800905a:	b138      	cbz	r0, 800906c <_svfiprintf_r+0x150>
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	eba0 000a 	sub.w	r0, r0, sl
 8009062:	2240      	movs	r2, #64	@ 0x40
 8009064:	4082      	lsls	r2, r0
 8009066:	4313      	orrs	r3, r2
 8009068:	3401      	adds	r4, #1
 800906a:	9304      	str	r3, [sp, #16]
 800906c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009070:	4824      	ldr	r0, [pc, #144]	@ (8009104 <_svfiprintf_r+0x1e8>)
 8009072:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009076:	2206      	movs	r2, #6
 8009078:	f7f7 f8aa 	bl	80001d0 <memchr>
 800907c:	2800      	cmp	r0, #0
 800907e:	d036      	beq.n	80090ee <_svfiprintf_r+0x1d2>
 8009080:	4b21      	ldr	r3, [pc, #132]	@ (8009108 <_svfiprintf_r+0x1ec>)
 8009082:	bb1b      	cbnz	r3, 80090cc <_svfiprintf_r+0x1b0>
 8009084:	9b03      	ldr	r3, [sp, #12]
 8009086:	3307      	adds	r3, #7
 8009088:	f023 0307 	bic.w	r3, r3, #7
 800908c:	3308      	adds	r3, #8
 800908e:	9303      	str	r3, [sp, #12]
 8009090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009092:	4433      	add	r3, r6
 8009094:	9309      	str	r3, [sp, #36]	@ 0x24
 8009096:	e76a      	b.n	8008f6e <_svfiprintf_r+0x52>
 8009098:	fb0c 3202 	mla	r2, ip, r2, r3
 800909c:	460c      	mov	r4, r1
 800909e:	2001      	movs	r0, #1
 80090a0:	e7a8      	b.n	8008ff4 <_svfiprintf_r+0xd8>
 80090a2:	2300      	movs	r3, #0
 80090a4:	3401      	adds	r4, #1
 80090a6:	9305      	str	r3, [sp, #20]
 80090a8:	4619      	mov	r1, r3
 80090aa:	f04f 0c0a 	mov.w	ip, #10
 80090ae:	4620      	mov	r0, r4
 80090b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80090b4:	3a30      	subs	r2, #48	@ 0x30
 80090b6:	2a09      	cmp	r2, #9
 80090b8:	d903      	bls.n	80090c2 <_svfiprintf_r+0x1a6>
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d0c6      	beq.n	800904c <_svfiprintf_r+0x130>
 80090be:	9105      	str	r1, [sp, #20]
 80090c0:	e7c4      	b.n	800904c <_svfiprintf_r+0x130>
 80090c2:	fb0c 2101 	mla	r1, ip, r1, r2
 80090c6:	4604      	mov	r4, r0
 80090c8:	2301      	movs	r3, #1
 80090ca:	e7f0      	b.n	80090ae <_svfiprintf_r+0x192>
 80090cc:	ab03      	add	r3, sp, #12
 80090ce:	9300      	str	r3, [sp, #0]
 80090d0:	462a      	mov	r2, r5
 80090d2:	4b0e      	ldr	r3, [pc, #56]	@ (800910c <_svfiprintf_r+0x1f0>)
 80090d4:	a904      	add	r1, sp, #16
 80090d6:	4638      	mov	r0, r7
 80090d8:	f7fd fd8e 	bl	8006bf8 <_printf_float>
 80090dc:	1c42      	adds	r2, r0, #1
 80090de:	4606      	mov	r6, r0
 80090e0:	d1d6      	bne.n	8009090 <_svfiprintf_r+0x174>
 80090e2:	89ab      	ldrh	r3, [r5, #12]
 80090e4:	065b      	lsls	r3, r3, #25
 80090e6:	f53f af2d 	bmi.w	8008f44 <_svfiprintf_r+0x28>
 80090ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80090ec:	e72c      	b.n	8008f48 <_svfiprintf_r+0x2c>
 80090ee:	ab03      	add	r3, sp, #12
 80090f0:	9300      	str	r3, [sp, #0]
 80090f2:	462a      	mov	r2, r5
 80090f4:	4b05      	ldr	r3, [pc, #20]	@ (800910c <_svfiprintf_r+0x1f0>)
 80090f6:	a904      	add	r1, sp, #16
 80090f8:	4638      	mov	r0, r7
 80090fa:	f7fe f815 	bl	8007128 <_printf_i>
 80090fe:	e7ed      	b.n	80090dc <_svfiprintf_r+0x1c0>
 8009100:	08009a6a 	.word	0x08009a6a
 8009104:	08009a74 	.word	0x08009a74
 8009108:	08006bf9 	.word	0x08006bf9
 800910c:	08008e65 	.word	0x08008e65
 8009110:	08009a70 	.word	0x08009a70

08009114 <__sflush_r>:
 8009114:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800911c:	0716      	lsls	r6, r2, #28
 800911e:	4605      	mov	r5, r0
 8009120:	460c      	mov	r4, r1
 8009122:	d454      	bmi.n	80091ce <__sflush_r+0xba>
 8009124:	684b      	ldr	r3, [r1, #4]
 8009126:	2b00      	cmp	r3, #0
 8009128:	dc02      	bgt.n	8009130 <__sflush_r+0x1c>
 800912a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800912c:	2b00      	cmp	r3, #0
 800912e:	dd48      	ble.n	80091c2 <__sflush_r+0xae>
 8009130:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009132:	2e00      	cmp	r6, #0
 8009134:	d045      	beq.n	80091c2 <__sflush_r+0xae>
 8009136:	2300      	movs	r3, #0
 8009138:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800913c:	682f      	ldr	r7, [r5, #0]
 800913e:	6a21      	ldr	r1, [r4, #32]
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	d030      	beq.n	80091a6 <__sflush_r+0x92>
 8009144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009146:	89a3      	ldrh	r3, [r4, #12]
 8009148:	0759      	lsls	r1, r3, #29
 800914a:	d505      	bpl.n	8009158 <__sflush_r+0x44>
 800914c:	6863      	ldr	r3, [r4, #4]
 800914e:	1ad2      	subs	r2, r2, r3
 8009150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009152:	b10b      	cbz	r3, 8009158 <__sflush_r+0x44>
 8009154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009156:	1ad2      	subs	r2, r2, r3
 8009158:	2300      	movs	r3, #0
 800915a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800915c:	6a21      	ldr	r1, [r4, #32]
 800915e:	4628      	mov	r0, r5
 8009160:	47b0      	blx	r6
 8009162:	1c43      	adds	r3, r0, #1
 8009164:	89a3      	ldrh	r3, [r4, #12]
 8009166:	d106      	bne.n	8009176 <__sflush_r+0x62>
 8009168:	6829      	ldr	r1, [r5, #0]
 800916a:	291d      	cmp	r1, #29
 800916c:	d82b      	bhi.n	80091c6 <__sflush_r+0xb2>
 800916e:	4a2a      	ldr	r2, [pc, #168]	@ (8009218 <__sflush_r+0x104>)
 8009170:	40ca      	lsrs	r2, r1
 8009172:	07d6      	lsls	r6, r2, #31
 8009174:	d527      	bpl.n	80091c6 <__sflush_r+0xb2>
 8009176:	2200      	movs	r2, #0
 8009178:	6062      	str	r2, [r4, #4]
 800917a:	04d9      	lsls	r1, r3, #19
 800917c:	6922      	ldr	r2, [r4, #16]
 800917e:	6022      	str	r2, [r4, #0]
 8009180:	d504      	bpl.n	800918c <__sflush_r+0x78>
 8009182:	1c42      	adds	r2, r0, #1
 8009184:	d101      	bne.n	800918a <__sflush_r+0x76>
 8009186:	682b      	ldr	r3, [r5, #0]
 8009188:	b903      	cbnz	r3, 800918c <__sflush_r+0x78>
 800918a:	6560      	str	r0, [r4, #84]	@ 0x54
 800918c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800918e:	602f      	str	r7, [r5, #0]
 8009190:	b1b9      	cbz	r1, 80091c2 <__sflush_r+0xae>
 8009192:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009196:	4299      	cmp	r1, r3
 8009198:	d002      	beq.n	80091a0 <__sflush_r+0x8c>
 800919a:	4628      	mov	r0, r5
 800919c:	f7ff f9e8 	bl	8008570 <_free_r>
 80091a0:	2300      	movs	r3, #0
 80091a2:	6363      	str	r3, [r4, #52]	@ 0x34
 80091a4:	e00d      	b.n	80091c2 <__sflush_r+0xae>
 80091a6:	2301      	movs	r3, #1
 80091a8:	4628      	mov	r0, r5
 80091aa:	47b0      	blx	r6
 80091ac:	4602      	mov	r2, r0
 80091ae:	1c50      	adds	r0, r2, #1
 80091b0:	d1c9      	bne.n	8009146 <__sflush_r+0x32>
 80091b2:	682b      	ldr	r3, [r5, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d0c6      	beq.n	8009146 <__sflush_r+0x32>
 80091b8:	2b1d      	cmp	r3, #29
 80091ba:	d001      	beq.n	80091c0 <__sflush_r+0xac>
 80091bc:	2b16      	cmp	r3, #22
 80091be:	d11e      	bne.n	80091fe <__sflush_r+0xea>
 80091c0:	602f      	str	r7, [r5, #0]
 80091c2:	2000      	movs	r0, #0
 80091c4:	e022      	b.n	800920c <__sflush_r+0xf8>
 80091c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091ca:	b21b      	sxth	r3, r3
 80091cc:	e01b      	b.n	8009206 <__sflush_r+0xf2>
 80091ce:	690f      	ldr	r7, [r1, #16]
 80091d0:	2f00      	cmp	r7, #0
 80091d2:	d0f6      	beq.n	80091c2 <__sflush_r+0xae>
 80091d4:	0793      	lsls	r3, r2, #30
 80091d6:	680e      	ldr	r6, [r1, #0]
 80091d8:	bf08      	it	eq
 80091da:	694b      	ldreq	r3, [r1, #20]
 80091dc:	600f      	str	r7, [r1, #0]
 80091de:	bf18      	it	ne
 80091e0:	2300      	movne	r3, #0
 80091e2:	eba6 0807 	sub.w	r8, r6, r7
 80091e6:	608b      	str	r3, [r1, #8]
 80091e8:	f1b8 0f00 	cmp.w	r8, #0
 80091ec:	dde9      	ble.n	80091c2 <__sflush_r+0xae>
 80091ee:	6a21      	ldr	r1, [r4, #32]
 80091f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80091f2:	4643      	mov	r3, r8
 80091f4:	463a      	mov	r2, r7
 80091f6:	4628      	mov	r0, r5
 80091f8:	47b0      	blx	r6
 80091fa:	2800      	cmp	r0, #0
 80091fc:	dc08      	bgt.n	8009210 <__sflush_r+0xfc>
 80091fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009202:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009206:	81a3      	strh	r3, [r4, #12]
 8009208:	f04f 30ff 	mov.w	r0, #4294967295
 800920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009210:	4407      	add	r7, r0
 8009212:	eba8 0800 	sub.w	r8, r8, r0
 8009216:	e7e7      	b.n	80091e8 <__sflush_r+0xd4>
 8009218:	20400001 	.word	0x20400001

0800921c <_fflush_r>:
 800921c:	b538      	push	{r3, r4, r5, lr}
 800921e:	690b      	ldr	r3, [r1, #16]
 8009220:	4605      	mov	r5, r0
 8009222:	460c      	mov	r4, r1
 8009224:	b913      	cbnz	r3, 800922c <_fflush_r+0x10>
 8009226:	2500      	movs	r5, #0
 8009228:	4628      	mov	r0, r5
 800922a:	bd38      	pop	{r3, r4, r5, pc}
 800922c:	b118      	cbz	r0, 8009236 <_fflush_r+0x1a>
 800922e:	6a03      	ldr	r3, [r0, #32]
 8009230:	b90b      	cbnz	r3, 8009236 <_fflush_r+0x1a>
 8009232:	f7fe f923 	bl	800747c <__sinit>
 8009236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0f3      	beq.n	8009226 <_fflush_r+0xa>
 800923e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009240:	07d0      	lsls	r0, r2, #31
 8009242:	d404      	bmi.n	800924e <_fflush_r+0x32>
 8009244:	0599      	lsls	r1, r3, #22
 8009246:	d402      	bmi.n	800924e <_fflush_r+0x32>
 8009248:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800924a:	f7fe fb36 	bl	80078ba <__retarget_lock_acquire_recursive>
 800924e:	4628      	mov	r0, r5
 8009250:	4621      	mov	r1, r4
 8009252:	f7ff ff5f 	bl	8009114 <__sflush_r>
 8009256:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009258:	07da      	lsls	r2, r3, #31
 800925a:	4605      	mov	r5, r0
 800925c:	d4e4      	bmi.n	8009228 <_fflush_r+0xc>
 800925e:	89a3      	ldrh	r3, [r4, #12]
 8009260:	059b      	lsls	r3, r3, #22
 8009262:	d4e1      	bmi.n	8009228 <_fflush_r+0xc>
 8009264:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009266:	f7fe fb29 	bl	80078bc <__retarget_lock_release_recursive>
 800926a:	e7dd      	b.n	8009228 <_fflush_r+0xc>

0800926c <__swhatbuf_r>:
 800926c:	b570      	push	{r4, r5, r6, lr}
 800926e:	460c      	mov	r4, r1
 8009270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009274:	2900      	cmp	r1, #0
 8009276:	b096      	sub	sp, #88	@ 0x58
 8009278:	4615      	mov	r5, r2
 800927a:	461e      	mov	r6, r3
 800927c:	da0d      	bge.n	800929a <__swhatbuf_r+0x2e>
 800927e:	89a3      	ldrh	r3, [r4, #12]
 8009280:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009284:	f04f 0100 	mov.w	r1, #0
 8009288:	bf14      	ite	ne
 800928a:	2340      	movne	r3, #64	@ 0x40
 800928c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009290:	2000      	movs	r0, #0
 8009292:	6031      	str	r1, [r6, #0]
 8009294:	602b      	str	r3, [r5, #0]
 8009296:	b016      	add	sp, #88	@ 0x58
 8009298:	bd70      	pop	{r4, r5, r6, pc}
 800929a:	466a      	mov	r2, sp
 800929c:	f000 f862 	bl	8009364 <_fstat_r>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	dbec      	blt.n	800927e <__swhatbuf_r+0x12>
 80092a4:	9901      	ldr	r1, [sp, #4]
 80092a6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092aa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092ae:	4259      	negs	r1, r3
 80092b0:	4159      	adcs	r1, r3
 80092b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092b6:	e7eb      	b.n	8009290 <__swhatbuf_r+0x24>

080092b8 <__smakebuf_r>:
 80092b8:	898b      	ldrh	r3, [r1, #12]
 80092ba:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092bc:	079d      	lsls	r5, r3, #30
 80092be:	4606      	mov	r6, r0
 80092c0:	460c      	mov	r4, r1
 80092c2:	d507      	bpl.n	80092d4 <__smakebuf_r+0x1c>
 80092c4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092c8:	6023      	str	r3, [r4, #0]
 80092ca:	6123      	str	r3, [r4, #16]
 80092cc:	2301      	movs	r3, #1
 80092ce:	6163      	str	r3, [r4, #20]
 80092d0:	b003      	add	sp, #12
 80092d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092d4:	ab01      	add	r3, sp, #4
 80092d6:	466a      	mov	r2, sp
 80092d8:	f7ff ffc8 	bl	800926c <__swhatbuf_r>
 80092dc:	9f00      	ldr	r7, [sp, #0]
 80092de:	4605      	mov	r5, r0
 80092e0:	4639      	mov	r1, r7
 80092e2:	4630      	mov	r0, r6
 80092e4:	f7ff f9b8 	bl	8008658 <_malloc_r>
 80092e8:	b948      	cbnz	r0, 80092fe <__smakebuf_r+0x46>
 80092ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092ee:	059a      	lsls	r2, r3, #22
 80092f0:	d4ee      	bmi.n	80092d0 <__smakebuf_r+0x18>
 80092f2:	f023 0303 	bic.w	r3, r3, #3
 80092f6:	f043 0302 	orr.w	r3, r3, #2
 80092fa:	81a3      	strh	r3, [r4, #12]
 80092fc:	e7e2      	b.n	80092c4 <__smakebuf_r+0xc>
 80092fe:	89a3      	ldrh	r3, [r4, #12]
 8009300:	6020      	str	r0, [r4, #0]
 8009302:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009306:	81a3      	strh	r3, [r4, #12]
 8009308:	9b01      	ldr	r3, [sp, #4]
 800930a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800930e:	b15b      	cbz	r3, 8009328 <__smakebuf_r+0x70>
 8009310:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009314:	4630      	mov	r0, r6
 8009316:	f000 f837 	bl	8009388 <_isatty_r>
 800931a:	b128      	cbz	r0, 8009328 <__smakebuf_r+0x70>
 800931c:	89a3      	ldrh	r3, [r4, #12]
 800931e:	f023 0303 	bic.w	r3, r3, #3
 8009322:	f043 0301 	orr.w	r3, r3, #1
 8009326:	81a3      	strh	r3, [r4, #12]
 8009328:	89a3      	ldrh	r3, [r4, #12]
 800932a:	431d      	orrs	r5, r3
 800932c:	81a5      	strh	r5, [r4, #12]
 800932e:	e7cf      	b.n	80092d0 <__smakebuf_r+0x18>

08009330 <memmove>:
 8009330:	4288      	cmp	r0, r1
 8009332:	b510      	push	{r4, lr}
 8009334:	eb01 0402 	add.w	r4, r1, r2
 8009338:	d902      	bls.n	8009340 <memmove+0x10>
 800933a:	4284      	cmp	r4, r0
 800933c:	4623      	mov	r3, r4
 800933e:	d807      	bhi.n	8009350 <memmove+0x20>
 8009340:	1e43      	subs	r3, r0, #1
 8009342:	42a1      	cmp	r1, r4
 8009344:	d008      	beq.n	8009358 <memmove+0x28>
 8009346:	f811 2b01 	ldrb.w	r2, [r1], #1
 800934a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800934e:	e7f8      	b.n	8009342 <memmove+0x12>
 8009350:	4402      	add	r2, r0
 8009352:	4601      	mov	r1, r0
 8009354:	428a      	cmp	r2, r1
 8009356:	d100      	bne.n	800935a <memmove+0x2a>
 8009358:	bd10      	pop	{r4, pc}
 800935a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800935e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009362:	e7f7      	b.n	8009354 <memmove+0x24>

08009364 <_fstat_r>:
 8009364:	b538      	push	{r3, r4, r5, lr}
 8009366:	4d07      	ldr	r5, [pc, #28]	@ (8009384 <_fstat_r+0x20>)
 8009368:	2300      	movs	r3, #0
 800936a:	4604      	mov	r4, r0
 800936c:	4608      	mov	r0, r1
 800936e:	4611      	mov	r1, r2
 8009370:	602b      	str	r3, [r5, #0]
 8009372:	f7f8 fcd1 	bl	8001d18 <_fstat>
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	d102      	bne.n	8009380 <_fstat_r+0x1c>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	b103      	cbz	r3, 8009380 <_fstat_r+0x1c>
 800937e:	6023      	str	r3, [r4, #0]
 8009380:	bd38      	pop	{r3, r4, r5, pc}
 8009382:	bf00      	nop
 8009384:	200004e4 	.word	0x200004e4

08009388 <_isatty_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	@ (80093a4 <_isatty_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f8 fcd0 	bl	8001d38 <_isatty>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_isatty_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_isatty_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	200004e4 	.word	0x200004e4

080093a8 <_sbrk_r>:
 80093a8:	b538      	push	{r3, r4, r5, lr}
 80093aa:	4d06      	ldr	r5, [pc, #24]	@ (80093c4 <_sbrk_r+0x1c>)
 80093ac:	2300      	movs	r3, #0
 80093ae:	4604      	mov	r4, r0
 80093b0:	4608      	mov	r0, r1
 80093b2:	602b      	str	r3, [r5, #0]
 80093b4:	f7f8 fcd8 	bl	8001d68 <_sbrk>
 80093b8:	1c43      	adds	r3, r0, #1
 80093ba:	d102      	bne.n	80093c2 <_sbrk_r+0x1a>
 80093bc:	682b      	ldr	r3, [r5, #0]
 80093be:	b103      	cbz	r3, 80093c2 <_sbrk_r+0x1a>
 80093c0:	6023      	str	r3, [r4, #0]
 80093c2:	bd38      	pop	{r3, r4, r5, pc}
 80093c4:	200004e4 	.word	0x200004e4

080093c8 <memcpy>:
 80093c8:	440a      	add	r2, r1
 80093ca:	4291      	cmp	r1, r2
 80093cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80093d0:	d100      	bne.n	80093d4 <memcpy+0xc>
 80093d2:	4770      	bx	lr
 80093d4:	b510      	push	{r4, lr}
 80093d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093de:	4291      	cmp	r1, r2
 80093e0:	d1f9      	bne.n	80093d6 <memcpy+0xe>
 80093e2:	bd10      	pop	{r4, pc}

080093e4 <__assert_func>:
 80093e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80093e6:	4614      	mov	r4, r2
 80093e8:	461a      	mov	r2, r3
 80093ea:	4b09      	ldr	r3, [pc, #36]	@ (8009410 <__assert_func+0x2c>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4605      	mov	r5, r0
 80093f0:	68d8      	ldr	r0, [r3, #12]
 80093f2:	b14c      	cbz	r4, 8009408 <__assert_func+0x24>
 80093f4:	4b07      	ldr	r3, [pc, #28]	@ (8009414 <__assert_func+0x30>)
 80093f6:	9100      	str	r1, [sp, #0]
 80093f8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80093fc:	4906      	ldr	r1, [pc, #24]	@ (8009418 <__assert_func+0x34>)
 80093fe:	462b      	mov	r3, r5
 8009400:	f000 f870 	bl	80094e4 <fiprintf>
 8009404:	f000 f880 	bl	8009508 <abort>
 8009408:	4b04      	ldr	r3, [pc, #16]	@ (800941c <__assert_func+0x38>)
 800940a:	461c      	mov	r4, r3
 800940c:	e7f3      	b.n	80093f6 <__assert_func+0x12>
 800940e:	bf00      	nop
 8009410:	20000018 	.word	0x20000018
 8009414:	08009a85 	.word	0x08009a85
 8009418:	08009a92 	.word	0x08009a92
 800941c:	08009ac0 	.word	0x08009ac0

08009420 <_calloc_r>:
 8009420:	b570      	push	{r4, r5, r6, lr}
 8009422:	fba1 5402 	umull	r5, r4, r1, r2
 8009426:	b934      	cbnz	r4, 8009436 <_calloc_r+0x16>
 8009428:	4629      	mov	r1, r5
 800942a:	f7ff f915 	bl	8008658 <_malloc_r>
 800942e:	4606      	mov	r6, r0
 8009430:	b928      	cbnz	r0, 800943e <_calloc_r+0x1e>
 8009432:	4630      	mov	r0, r6
 8009434:	bd70      	pop	{r4, r5, r6, pc}
 8009436:	220c      	movs	r2, #12
 8009438:	6002      	str	r2, [r0, #0]
 800943a:	2600      	movs	r6, #0
 800943c:	e7f9      	b.n	8009432 <_calloc_r+0x12>
 800943e:	462a      	mov	r2, r5
 8009440:	4621      	mov	r1, r4
 8009442:	f7fe f9bd 	bl	80077c0 <memset>
 8009446:	e7f4      	b.n	8009432 <_calloc_r+0x12>

08009448 <__ascii_mbtowc>:
 8009448:	b082      	sub	sp, #8
 800944a:	b901      	cbnz	r1, 800944e <__ascii_mbtowc+0x6>
 800944c:	a901      	add	r1, sp, #4
 800944e:	b142      	cbz	r2, 8009462 <__ascii_mbtowc+0x1a>
 8009450:	b14b      	cbz	r3, 8009466 <__ascii_mbtowc+0x1e>
 8009452:	7813      	ldrb	r3, [r2, #0]
 8009454:	600b      	str	r3, [r1, #0]
 8009456:	7812      	ldrb	r2, [r2, #0]
 8009458:	1e10      	subs	r0, r2, #0
 800945a:	bf18      	it	ne
 800945c:	2001      	movne	r0, #1
 800945e:	b002      	add	sp, #8
 8009460:	4770      	bx	lr
 8009462:	4610      	mov	r0, r2
 8009464:	e7fb      	b.n	800945e <__ascii_mbtowc+0x16>
 8009466:	f06f 0001 	mvn.w	r0, #1
 800946a:	e7f8      	b.n	800945e <__ascii_mbtowc+0x16>

0800946c <_realloc_r>:
 800946c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009470:	4607      	mov	r7, r0
 8009472:	4614      	mov	r4, r2
 8009474:	460d      	mov	r5, r1
 8009476:	b921      	cbnz	r1, 8009482 <_realloc_r+0x16>
 8009478:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947c:	4611      	mov	r1, r2
 800947e:	f7ff b8eb 	b.w	8008658 <_malloc_r>
 8009482:	b92a      	cbnz	r2, 8009490 <_realloc_r+0x24>
 8009484:	f7ff f874 	bl	8008570 <_free_r>
 8009488:	4625      	mov	r5, r4
 800948a:	4628      	mov	r0, r5
 800948c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009490:	f000 f841 	bl	8009516 <_malloc_usable_size_r>
 8009494:	4284      	cmp	r4, r0
 8009496:	4606      	mov	r6, r0
 8009498:	d802      	bhi.n	80094a0 <_realloc_r+0x34>
 800949a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800949e:	d8f4      	bhi.n	800948a <_realloc_r+0x1e>
 80094a0:	4621      	mov	r1, r4
 80094a2:	4638      	mov	r0, r7
 80094a4:	f7ff f8d8 	bl	8008658 <_malloc_r>
 80094a8:	4680      	mov	r8, r0
 80094aa:	b908      	cbnz	r0, 80094b0 <_realloc_r+0x44>
 80094ac:	4645      	mov	r5, r8
 80094ae:	e7ec      	b.n	800948a <_realloc_r+0x1e>
 80094b0:	42b4      	cmp	r4, r6
 80094b2:	4622      	mov	r2, r4
 80094b4:	4629      	mov	r1, r5
 80094b6:	bf28      	it	cs
 80094b8:	4632      	movcs	r2, r6
 80094ba:	f7ff ff85 	bl	80093c8 <memcpy>
 80094be:	4629      	mov	r1, r5
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7ff f855 	bl	8008570 <_free_r>
 80094c6:	e7f1      	b.n	80094ac <_realloc_r+0x40>

080094c8 <__ascii_wctomb>:
 80094c8:	4603      	mov	r3, r0
 80094ca:	4608      	mov	r0, r1
 80094cc:	b141      	cbz	r1, 80094e0 <__ascii_wctomb+0x18>
 80094ce:	2aff      	cmp	r2, #255	@ 0xff
 80094d0:	d904      	bls.n	80094dc <__ascii_wctomb+0x14>
 80094d2:	228a      	movs	r2, #138	@ 0x8a
 80094d4:	601a      	str	r2, [r3, #0]
 80094d6:	f04f 30ff 	mov.w	r0, #4294967295
 80094da:	4770      	bx	lr
 80094dc:	700a      	strb	r2, [r1, #0]
 80094de:	2001      	movs	r0, #1
 80094e0:	4770      	bx	lr
	...

080094e4 <fiprintf>:
 80094e4:	b40e      	push	{r1, r2, r3}
 80094e6:	b503      	push	{r0, r1, lr}
 80094e8:	4601      	mov	r1, r0
 80094ea:	ab03      	add	r3, sp, #12
 80094ec:	4805      	ldr	r0, [pc, #20]	@ (8009504 <fiprintf+0x20>)
 80094ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f2:	6800      	ldr	r0, [r0, #0]
 80094f4:	9301      	str	r3, [sp, #4]
 80094f6:	f000 f83f 	bl	8009578 <_vfiprintf_r>
 80094fa:	b002      	add	sp, #8
 80094fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009500:	b003      	add	sp, #12
 8009502:	4770      	bx	lr
 8009504:	20000018 	.word	0x20000018

08009508 <abort>:
 8009508:	b508      	push	{r3, lr}
 800950a:	2006      	movs	r0, #6
 800950c:	f000 f974 	bl	80097f8 <raise>
 8009510:	2001      	movs	r0, #1
 8009512:	f7f8 fbb1 	bl	8001c78 <_exit>

08009516 <_malloc_usable_size_r>:
 8009516:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800951a:	1f18      	subs	r0, r3, #4
 800951c:	2b00      	cmp	r3, #0
 800951e:	bfbc      	itt	lt
 8009520:	580b      	ldrlt	r3, [r1, r0]
 8009522:	18c0      	addlt	r0, r0, r3
 8009524:	4770      	bx	lr

08009526 <__sfputc_r>:
 8009526:	6893      	ldr	r3, [r2, #8]
 8009528:	3b01      	subs	r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	b410      	push	{r4}
 800952e:	6093      	str	r3, [r2, #8]
 8009530:	da08      	bge.n	8009544 <__sfputc_r+0x1e>
 8009532:	6994      	ldr	r4, [r2, #24]
 8009534:	42a3      	cmp	r3, r4
 8009536:	db01      	blt.n	800953c <__sfputc_r+0x16>
 8009538:	290a      	cmp	r1, #10
 800953a:	d103      	bne.n	8009544 <__sfputc_r+0x1e>
 800953c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009540:	f7fe b8a9 	b.w	8007696 <__swbuf_r>
 8009544:	6813      	ldr	r3, [r2, #0]
 8009546:	1c58      	adds	r0, r3, #1
 8009548:	6010      	str	r0, [r2, #0]
 800954a:	7019      	strb	r1, [r3, #0]
 800954c:	4608      	mov	r0, r1
 800954e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009552:	4770      	bx	lr

08009554 <__sfputs_r>:
 8009554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009556:	4606      	mov	r6, r0
 8009558:	460f      	mov	r7, r1
 800955a:	4614      	mov	r4, r2
 800955c:	18d5      	adds	r5, r2, r3
 800955e:	42ac      	cmp	r4, r5
 8009560:	d101      	bne.n	8009566 <__sfputs_r+0x12>
 8009562:	2000      	movs	r0, #0
 8009564:	e007      	b.n	8009576 <__sfputs_r+0x22>
 8009566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800956a:	463a      	mov	r2, r7
 800956c:	4630      	mov	r0, r6
 800956e:	f7ff ffda 	bl	8009526 <__sfputc_r>
 8009572:	1c43      	adds	r3, r0, #1
 8009574:	d1f3      	bne.n	800955e <__sfputs_r+0xa>
 8009576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009578 <_vfiprintf_r>:
 8009578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800957c:	460d      	mov	r5, r1
 800957e:	b09d      	sub	sp, #116	@ 0x74
 8009580:	4614      	mov	r4, r2
 8009582:	4698      	mov	r8, r3
 8009584:	4606      	mov	r6, r0
 8009586:	b118      	cbz	r0, 8009590 <_vfiprintf_r+0x18>
 8009588:	6a03      	ldr	r3, [r0, #32]
 800958a:	b90b      	cbnz	r3, 8009590 <_vfiprintf_r+0x18>
 800958c:	f7fd ff76 	bl	800747c <__sinit>
 8009590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009592:	07d9      	lsls	r1, r3, #31
 8009594:	d405      	bmi.n	80095a2 <_vfiprintf_r+0x2a>
 8009596:	89ab      	ldrh	r3, [r5, #12]
 8009598:	059a      	lsls	r2, r3, #22
 800959a:	d402      	bmi.n	80095a2 <_vfiprintf_r+0x2a>
 800959c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800959e:	f7fe f98c 	bl	80078ba <__retarget_lock_acquire_recursive>
 80095a2:	89ab      	ldrh	r3, [r5, #12]
 80095a4:	071b      	lsls	r3, r3, #28
 80095a6:	d501      	bpl.n	80095ac <_vfiprintf_r+0x34>
 80095a8:	692b      	ldr	r3, [r5, #16]
 80095aa:	b99b      	cbnz	r3, 80095d4 <_vfiprintf_r+0x5c>
 80095ac:	4629      	mov	r1, r5
 80095ae:	4630      	mov	r0, r6
 80095b0:	f7fe f8b0 	bl	8007714 <__swsetup_r>
 80095b4:	b170      	cbz	r0, 80095d4 <_vfiprintf_r+0x5c>
 80095b6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80095b8:	07dc      	lsls	r4, r3, #31
 80095ba:	d504      	bpl.n	80095c6 <_vfiprintf_r+0x4e>
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	b01d      	add	sp, #116	@ 0x74
 80095c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c6:	89ab      	ldrh	r3, [r5, #12]
 80095c8:	0598      	lsls	r0, r3, #22
 80095ca:	d4f7      	bmi.n	80095bc <_vfiprintf_r+0x44>
 80095cc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80095ce:	f7fe f975 	bl	80078bc <__retarget_lock_release_recursive>
 80095d2:	e7f3      	b.n	80095bc <_vfiprintf_r+0x44>
 80095d4:	2300      	movs	r3, #0
 80095d6:	9309      	str	r3, [sp, #36]	@ 0x24
 80095d8:	2320      	movs	r3, #32
 80095da:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80095de:	f8cd 800c 	str.w	r8, [sp, #12]
 80095e2:	2330      	movs	r3, #48	@ 0x30
 80095e4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009794 <_vfiprintf_r+0x21c>
 80095e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80095ec:	f04f 0901 	mov.w	r9, #1
 80095f0:	4623      	mov	r3, r4
 80095f2:	469a      	mov	sl, r3
 80095f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80095f8:	b10a      	cbz	r2, 80095fe <_vfiprintf_r+0x86>
 80095fa:	2a25      	cmp	r2, #37	@ 0x25
 80095fc:	d1f9      	bne.n	80095f2 <_vfiprintf_r+0x7a>
 80095fe:	ebba 0b04 	subs.w	fp, sl, r4
 8009602:	d00b      	beq.n	800961c <_vfiprintf_r+0xa4>
 8009604:	465b      	mov	r3, fp
 8009606:	4622      	mov	r2, r4
 8009608:	4629      	mov	r1, r5
 800960a:	4630      	mov	r0, r6
 800960c:	f7ff ffa2 	bl	8009554 <__sfputs_r>
 8009610:	3001      	adds	r0, #1
 8009612:	f000 80a7 	beq.w	8009764 <_vfiprintf_r+0x1ec>
 8009616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009618:	445a      	add	r2, fp
 800961a:	9209      	str	r2, [sp, #36]	@ 0x24
 800961c:	f89a 3000 	ldrb.w	r3, [sl]
 8009620:	2b00      	cmp	r3, #0
 8009622:	f000 809f 	beq.w	8009764 <_vfiprintf_r+0x1ec>
 8009626:	2300      	movs	r3, #0
 8009628:	f04f 32ff 	mov.w	r2, #4294967295
 800962c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009630:	f10a 0a01 	add.w	sl, sl, #1
 8009634:	9304      	str	r3, [sp, #16]
 8009636:	9307      	str	r3, [sp, #28]
 8009638:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800963c:	931a      	str	r3, [sp, #104]	@ 0x68
 800963e:	4654      	mov	r4, sl
 8009640:	2205      	movs	r2, #5
 8009642:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009646:	4853      	ldr	r0, [pc, #332]	@ (8009794 <_vfiprintf_r+0x21c>)
 8009648:	f7f6 fdc2 	bl	80001d0 <memchr>
 800964c:	9a04      	ldr	r2, [sp, #16]
 800964e:	b9d8      	cbnz	r0, 8009688 <_vfiprintf_r+0x110>
 8009650:	06d1      	lsls	r1, r2, #27
 8009652:	bf44      	itt	mi
 8009654:	2320      	movmi	r3, #32
 8009656:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800965a:	0713      	lsls	r3, r2, #28
 800965c:	bf44      	itt	mi
 800965e:	232b      	movmi	r3, #43	@ 0x2b
 8009660:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009664:	f89a 3000 	ldrb.w	r3, [sl]
 8009668:	2b2a      	cmp	r3, #42	@ 0x2a
 800966a:	d015      	beq.n	8009698 <_vfiprintf_r+0x120>
 800966c:	9a07      	ldr	r2, [sp, #28]
 800966e:	4654      	mov	r4, sl
 8009670:	2000      	movs	r0, #0
 8009672:	f04f 0c0a 	mov.w	ip, #10
 8009676:	4621      	mov	r1, r4
 8009678:	f811 3b01 	ldrb.w	r3, [r1], #1
 800967c:	3b30      	subs	r3, #48	@ 0x30
 800967e:	2b09      	cmp	r3, #9
 8009680:	d94b      	bls.n	800971a <_vfiprintf_r+0x1a2>
 8009682:	b1b0      	cbz	r0, 80096b2 <_vfiprintf_r+0x13a>
 8009684:	9207      	str	r2, [sp, #28]
 8009686:	e014      	b.n	80096b2 <_vfiprintf_r+0x13a>
 8009688:	eba0 0308 	sub.w	r3, r0, r8
 800968c:	fa09 f303 	lsl.w	r3, r9, r3
 8009690:	4313      	orrs	r3, r2
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	46a2      	mov	sl, r4
 8009696:	e7d2      	b.n	800963e <_vfiprintf_r+0xc6>
 8009698:	9b03      	ldr	r3, [sp, #12]
 800969a:	1d19      	adds	r1, r3, #4
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	9103      	str	r1, [sp, #12]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	bfbb      	ittet	lt
 80096a4:	425b      	neglt	r3, r3
 80096a6:	f042 0202 	orrlt.w	r2, r2, #2
 80096aa:	9307      	strge	r3, [sp, #28]
 80096ac:	9307      	strlt	r3, [sp, #28]
 80096ae:	bfb8      	it	lt
 80096b0:	9204      	strlt	r2, [sp, #16]
 80096b2:	7823      	ldrb	r3, [r4, #0]
 80096b4:	2b2e      	cmp	r3, #46	@ 0x2e
 80096b6:	d10a      	bne.n	80096ce <_vfiprintf_r+0x156>
 80096b8:	7863      	ldrb	r3, [r4, #1]
 80096ba:	2b2a      	cmp	r3, #42	@ 0x2a
 80096bc:	d132      	bne.n	8009724 <_vfiprintf_r+0x1ac>
 80096be:	9b03      	ldr	r3, [sp, #12]
 80096c0:	1d1a      	adds	r2, r3, #4
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	9203      	str	r2, [sp, #12]
 80096c6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80096ca:	3402      	adds	r4, #2
 80096cc:	9305      	str	r3, [sp, #20]
 80096ce:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80097a4 <_vfiprintf_r+0x22c>
 80096d2:	7821      	ldrb	r1, [r4, #0]
 80096d4:	2203      	movs	r2, #3
 80096d6:	4650      	mov	r0, sl
 80096d8:	f7f6 fd7a 	bl	80001d0 <memchr>
 80096dc:	b138      	cbz	r0, 80096ee <_vfiprintf_r+0x176>
 80096de:	9b04      	ldr	r3, [sp, #16]
 80096e0:	eba0 000a 	sub.w	r0, r0, sl
 80096e4:	2240      	movs	r2, #64	@ 0x40
 80096e6:	4082      	lsls	r2, r0
 80096e8:	4313      	orrs	r3, r2
 80096ea:	3401      	adds	r4, #1
 80096ec:	9304      	str	r3, [sp, #16]
 80096ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096f2:	4829      	ldr	r0, [pc, #164]	@ (8009798 <_vfiprintf_r+0x220>)
 80096f4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80096f8:	2206      	movs	r2, #6
 80096fa:	f7f6 fd69 	bl	80001d0 <memchr>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d03f      	beq.n	8009782 <_vfiprintf_r+0x20a>
 8009702:	4b26      	ldr	r3, [pc, #152]	@ (800979c <_vfiprintf_r+0x224>)
 8009704:	bb1b      	cbnz	r3, 800974e <_vfiprintf_r+0x1d6>
 8009706:	9b03      	ldr	r3, [sp, #12]
 8009708:	3307      	adds	r3, #7
 800970a:	f023 0307 	bic.w	r3, r3, #7
 800970e:	3308      	adds	r3, #8
 8009710:	9303      	str	r3, [sp, #12]
 8009712:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009714:	443b      	add	r3, r7
 8009716:	9309      	str	r3, [sp, #36]	@ 0x24
 8009718:	e76a      	b.n	80095f0 <_vfiprintf_r+0x78>
 800971a:	fb0c 3202 	mla	r2, ip, r2, r3
 800971e:	460c      	mov	r4, r1
 8009720:	2001      	movs	r0, #1
 8009722:	e7a8      	b.n	8009676 <_vfiprintf_r+0xfe>
 8009724:	2300      	movs	r3, #0
 8009726:	3401      	adds	r4, #1
 8009728:	9305      	str	r3, [sp, #20]
 800972a:	4619      	mov	r1, r3
 800972c:	f04f 0c0a 	mov.w	ip, #10
 8009730:	4620      	mov	r0, r4
 8009732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009736:	3a30      	subs	r2, #48	@ 0x30
 8009738:	2a09      	cmp	r2, #9
 800973a:	d903      	bls.n	8009744 <_vfiprintf_r+0x1cc>
 800973c:	2b00      	cmp	r3, #0
 800973e:	d0c6      	beq.n	80096ce <_vfiprintf_r+0x156>
 8009740:	9105      	str	r1, [sp, #20]
 8009742:	e7c4      	b.n	80096ce <_vfiprintf_r+0x156>
 8009744:	fb0c 2101 	mla	r1, ip, r1, r2
 8009748:	4604      	mov	r4, r0
 800974a:	2301      	movs	r3, #1
 800974c:	e7f0      	b.n	8009730 <_vfiprintf_r+0x1b8>
 800974e:	ab03      	add	r3, sp, #12
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	462a      	mov	r2, r5
 8009754:	4b12      	ldr	r3, [pc, #72]	@ (80097a0 <_vfiprintf_r+0x228>)
 8009756:	a904      	add	r1, sp, #16
 8009758:	4630      	mov	r0, r6
 800975a:	f7fd fa4d 	bl	8006bf8 <_printf_float>
 800975e:	4607      	mov	r7, r0
 8009760:	1c78      	adds	r0, r7, #1
 8009762:	d1d6      	bne.n	8009712 <_vfiprintf_r+0x19a>
 8009764:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009766:	07d9      	lsls	r1, r3, #31
 8009768:	d405      	bmi.n	8009776 <_vfiprintf_r+0x1fe>
 800976a:	89ab      	ldrh	r3, [r5, #12]
 800976c:	059a      	lsls	r2, r3, #22
 800976e:	d402      	bmi.n	8009776 <_vfiprintf_r+0x1fe>
 8009770:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009772:	f7fe f8a3 	bl	80078bc <__retarget_lock_release_recursive>
 8009776:	89ab      	ldrh	r3, [r5, #12]
 8009778:	065b      	lsls	r3, r3, #25
 800977a:	f53f af1f 	bmi.w	80095bc <_vfiprintf_r+0x44>
 800977e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009780:	e71e      	b.n	80095c0 <_vfiprintf_r+0x48>
 8009782:	ab03      	add	r3, sp, #12
 8009784:	9300      	str	r3, [sp, #0]
 8009786:	462a      	mov	r2, r5
 8009788:	4b05      	ldr	r3, [pc, #20]	@ (80097a0 <_vfiprintf_r+0x228>)
 800978a:	a904      	add	r1, sp, #16
 800978c:	4630      	mov	r0, r6
 800978e:	f7fd fccb 	bl	8007128 <_printf_i>
 8009792:	e7e4      	b.n	800975e <_vfiprintf_r+0x1e6>
 8009794:	08009a6a 	.word	0x08009a6a
 8009798:	08009a74 	.word	0x08009a74
 800979c:	08006bf9 	.word	0x08006bf9
 80097a0:	08009555 	.word	0x08009555
 80097a4:	08009a70 	.word	0x08009a70

080097a8 <_raise_r>:
 80097a8:	291f      	cmp	r1, #31
 80097aa:	b538      	push	{r3, r4, r5, lr}
 80097ac:	4605      	mov	r5, r0
 80097ae:	460c      	mov	r4, r1
 80097b0:	d904      	bls.n	80097bc <_raise_r+0x14>
 80097b2:	2316      	movs	r3, #22
 80097b4:	6003      	str	r3, [r0, #0]
 80097b6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80097be:	b112      	cbz	r2, 80097c6 <_raise_r+0x1e>
 80097c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80097c4:	b94b      	cbnz	r3, 80097da <_raise_r+0x32>
 80097c6:	4628      	mov	r0, r5
 80097c8:	f000 f830 	bl	800982c <_getpid_r>
 80097cc:	4622      	mov	r2, r4
 80097ce:	4601      	mov	r1, r0
 80097d0:	4628      	mov	r0, r5
 80097d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80097d6:	f000 b817 	b.w	8009808 <_kill_r>
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d00a      	beq.n	80097f4 <_raise_r+0x4c>
 80097de:	1c59      	adds	r1, r3, #1
 80097e0:	d103      	bne.n	80097ea <_raise_r+0x42>
 80097e2:	2316      	movs	r3, #22
 80097e4:	6003      	str	r3, [r0, #0]
 80097e6:	2001      	movs	r0, #1
 80097e8:	e7e7      	b.n	80097ba <_raise_r+0x12>
 80097ea:	2100      	movs	r1, #0
 80097ec:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80097f0:	4620      	mov	r0, r4
 80097f2:	4798      	blx	r3
 80097f4:	2000      	movs	r0, #0
 80097f6:	e7e0      	b.n	80097ba <_raise_r+0x12>

080097f8 <raise>:
 80097f8:	4b02      	ldr	r3, [pc, #8]	@ (8009804 <raise+0xc>)
 80097fa:	4601      	mov	r1, r0
 80097fc:	6818      	ldr	r0, [r3, #0]
 80097fe:	f7ff bfd3 	b.w	80097a8 <_raise_r>
 8009802:	bf00      	nop
 8009804:	20000018 	.word	0x20000018

08009808 <_kill_r>:
 8009808:	b538      	push	{r3, r4, r5, lr}
 800980a:	4d07      	ldr	r5, [pc, #28]	@ (8009828 <_kill_r+0x20>)
 800980c:	2300      	movs	r3, #0
 800980e:	4604      	mov	r4, r0
 8009810:	4608      	mov	r0, r1
 8009812:	4611      	mov	r1, r2
 8009814:	602b      	str	r3, [r5, #0]
 8009816:	f7f8 fa1f 	bl	8001c58 <_kill>
 800981a:	1c43      	adds	r3, r0, #1
 800981c:	d102      	bne.n	8009824 <_kill_r+0x1c>
 800981e:	682b      	ldr	r3, [r5, #0]
 8009820:	b103      	cbz	r3, 8009824 <_kill_r+0x1c>
 8009822:	6023      	str	r3, [r4, #0]
 8009824:	bd38      	pop	{r3, r4, r5, pc}
 8009826:	bf00      	nop
 8009828:	200004e4 	.word	0x200004e4

0800982c <_getpid_r>:
 800982c:	f7f8 ba0c 	b.w	8001c48 <_getpid>

08009830 <_init>:
 8009830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009832:	bf00      	nop
 8009834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009836:	bc08      	pop	{r3}
 8009838:	469e      	mov	lr, r3
 800983a:	4770      	bx	lr

0800983c <_fini>:
 800983c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800983e:	bf00      	nop
 8009840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009842:	bc08      	pop	{r3}
 8009844:	469e      	mov	lr, r3
 8009846:	4770      	bx	lr
