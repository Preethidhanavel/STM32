
uart_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dcc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003f54  08003f54  00004f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f9c  08003f9c  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003f9c  08003f9c  00004f9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003fa4  08003fa4  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003fa4  08003fa4  00004fa4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003fa8  08003fa8  00004fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003fac  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08003fb8  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003fb8  000050b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bf5d  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce6  00000000  00000000  00010f99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  00012c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000771  00000000  00000000  00013638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024fd0  00000000  00000000  00013da9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb8b  00000000  00000000  00038d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e407a  00000000  00000000  00044904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012897e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d8  00000000  00000000  001289c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0012b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003f3c 	.word	0x08003f3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003f3c 	.word	0x08003f3c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b082      	sub	sp, #8
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART2)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a08      	ldr	r2, [pc, #32]	@ (8000524 <HAL_UART_RxCpltCallback+0x30>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d10a      	bne.n	800051c <HAL_UART_RxCpltCallback+0x28>
  {
    // Echo received byte
    HAL_UART_Transmit(&huart2, &rx_data, 1, 100);
 8000506:	2364      	movs	r3, #100	@ 0x64
 8000508:	2201      	movs	r2, #1
 800050a:	4907      	ldr	r1, [pc, #28]	@ (8000528 <HAL_UART_RxCpltCallback+0x34>)
 800050c:	4807      	ldr	r0, [pc, #28]	@ (800052c <HAL_UART_RxCpltCallback+0x38>)
 800050e:	f002 f94d 	bl	80027ac <HAL_UART_Transmit>

    // Restart interrupt reception
    HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000512:	2201      	movs	r2, #1
 8000514:	4904      	ldr	r1, [pc, #16]	@ (8000528 <HAL_UART_RxCpltCallback+0x34>)
 8000516:	4805      	ldr	r0, [pc, #20]	@ (800052c <HAL_UART_RxCpltCallback+0x38>)
 8000518:	f002 f9d2 	bl	80028c0 <HAL_UART_Receive_IT>
  }
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	40004400 	.word	0x40004400
 8000528:	20000028 	.word	0x20000028
 800052c:	2000002c 	.word	0x2000002c

08000530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000534:	f000 f9fe 	bl	8000934 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000538:	f000 f810 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800053c:	f000 f890 	bl	8000660 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000540:	f000 f85e 	bl	8000600 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &rx_data, 1);
 8000544:	2201      	movs	r2, #1
 8000546:	4903      	ldr	r1, [pc, #12]	@ (8000554 <main+0x24>)
 8000548:	4803      	ldr	r0, [pc, #12]	@ (8000558 <main+0x28>)
 800054a:	f002 f9b9 	bl	80028c0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054e:	bf00      	nop
 8000550:	e7fd      	b.n	800054e <main+0x1e>
 8000552:	bf00      	nop
 8000554:	20000028 	.word	0x20000028
 8000558:	2000002c 	.word	0x2000002c

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b096      	sub	sp, #88	@ 0x58
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	2244      	movs	r2, #68	@ 0x44
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 fcba 	bl	8003ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	463b      	mov	r3, r7
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800057e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000582:	f000 fdb3 	bl	80010ec <HAL_PWREx_ControlVoltageScaling>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800058c:	f000 f8ce 	bl	800072c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000598:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059a:	2310      	movs	r3, #16
 800059c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059e:	2302      	movs	r3, #2
 80005a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a2:	2302      	movs	r3, #2
 80005a4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80005aa:	230a      	movs	r3, #10
 80005ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80005ae:	2307      	movs	r3, #7
 80005b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005b2:	2302      	movs	r3, #2
 80005b4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005b6:	2302      	movs	r3, #2
 80005b8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	4618      	mov	r0, r3
 80005c0:	f000 fdea 	bl	8001198 <HAL_RCC_OscConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0x72>
  {
    Error_Handler();
 80005ca:	f000 f8af 	bl	800072c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ce:	230f      	movs	r3, #15
 80005d0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005d2:	2303      	movs	r3, #3
 80005d4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2104      	movs	r1, #4
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 f9b2 	bl	8001950 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80005f2:	f000 f89b 	bl	800072c <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3758      	adds	r7, #88	@ 0x58
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
	...

08000600 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000604:	4b14      	ldr	r3, [pc, #80]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 8000606:	4a15      	ldr	r2, [pc, #84]	@ (800065c <MX_USART2_UART_Init+0x5c>)
 8000608:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800060a:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 800060c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000610:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000612:	4b11      	ldr	r3, [pc, #68]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 8000614:	2200      	movs	r2, #0
 8000616:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000618:	4b0f      	ldr	r3, [pc, #60]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 800061a:	2200      	movs	r2, #0
 800061c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061e:	4b0e      	ldr	r3, [pc, #56]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 8000620:	2200      	movs	r2, #0
 8000622:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000624:	4b0c      	ldr	r3, [pc, #48]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 8000626:	220c      	movs	r2, #12
 8000628:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800062a:	4b0b      	ldr	r3, [pc, #44]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000630:	4b09      	ldr	r3, [pc, #36]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 8000638:	2200      	movs	r2, #0
 800063a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800063c:	4b06      	ldr	r3, [pc, #24]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 800063e:	2200      	movs	r2, #0
 8000640:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000642:	4805      	ldr	r0, [pc, #20]	@ (8000658 <MX_USART2_UART_Init+0x58>)
 8000644:	f002 f864 	bl	8002710 <HAL_UART_Init>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800064e:	f000 f86d 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	2000002c 	.word	0x2000002c
 800065c:	40004400 	.word	0x40004400

08000660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b08a      	sub	sp, #40	@ 0x28
 8000664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000676:	4b2b      	ldr	r3, [pc, #172]	@ (8000724 <MX_GPIO_Init+0xc4>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800067a:	4a2a      	ldr	r2, [pc, #168]	@ (8000724 <MX_GPIO_Init+0xc4>)
 800067c:	f043 0304 	orr.w	r3, r3, #4
 8000680:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000682:	4b28      	ldr	r3, [pc, #160]	@ (8000724 <MX_GPIO_Init+0xc4>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000686:	f003 0304 	and.w	r3, r3, #4
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800068e:	4b25      	ldr	r3, [pc, #148]	@ (8000724 <MX_GPIO_Init+0xc4>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000692:	4a24      	ldr	r2, [pc, #144]	@ (8000724 <MX_GPIO_Init+0xc4>)
 8000694:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000698:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800069a:	4b22      	ldr	r3, [pc, #136]	@ (8000724 <MX_GPIO_Init+0xc4>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800069e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006a2:	60fb      	str	r3, [r7, #12]
 80006a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a6:	4b1f      	ldr	r3, [pc, #124]	@ (8000724 <MX_GPIO_Init+0xc4>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006aa:	4a1e      	ldr	r2, [pc, #120]	@ (8000724 <MX_GPIO_Init+0xc4>)
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000724 <MX_GPIO_Init+0xc4>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006be:	4b19      	ldr	r3, [pc, #100]	@ (8000724 <MX_GPIO_Init+0xc4>)
 80006c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c2:	4a18      	ldr	r2, [pc, #96]	@ (8000724 <MX_GPIO_Init+0xc4>)
 80006c4:	f043 0302 	orr.w	r3, r3, #2
 80006c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ca:	4b16      	ldr	r3, [pc, #88]	@ (8000724 <MX_GPIO_Init+0xc4>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ce:	f003 0302 	and.w	r3, r3, #2
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006d6:	2200      	movs	r2, #0
 80006d8:	2120      	movs	r1, #32
 80006da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80006de:	f000 fcdf 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80006e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006e8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80006ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006f2:	f107 0314 	add.w	r3, r7, #20
 80006f6:	4619      	mov	r1, r3
 80006f8:	480b      	ldr	r0, [pc, #44]	@ (8000728 <MX_GPIO_Init+0xc8>)
 80006fa:	f000 fb27 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006fe:	2320      	movs	r3, #32
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000702:	2301      	movs	r3, #1
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000706:	2300      	movs	r3, #0
 8000708:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070a:	2300      	movs	r3, #0
 800070c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800070e:	f107 0314 	add.w	r3, r7, #20
 8000712:	4619      	mov	r1, r3
 8000714:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000718:	f000 fb18 	bl	8000d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800071c:	bf00      	nop
 800071e:	3728      	adds	r7, #40	@ 0x28
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	40021000 	.word	0x40021000
 8000728:	48000800 	.word	0x48000800

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <Error_Handler+0x8>

08000738 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800073e:	4b0f      	ldr	r3, [pc, #60]	@ (800077c <HAL_MspInit+0x44>)
 8000740:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000742:	4a0e      	ldr	r2, [pc, #56]	@ (800077c <HAL_MspInit+0x44>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	6613      	str	r3, [r2, #96]	@ 0x60
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <HAL_MspInit+0x44>)
 800074c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	607b      	str	r3, [r7, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <HAL_MspInit+0x44>)
 8000758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800075a:	4a08      	ldr	r2, [pc, #32]	@ (800077c <HAL_MspInit+0x44>)
 800075c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000760:	6593      	str	r3, [r2, #88]	@ 0x58
 8000762:	4b06      	ldr	r3, [pc, #24]	@ (800077c <HAL_MspInit+0x44>)
 8000764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800076e:	bf00      	nop
 8000770:	370c      	adds	r7, #12
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b0ac      	sub	sp, #176	@ 0xb0
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000798:	f107 0314 	add.w	r3, r7, #20
 800079c:	2288      	movs	r2, #136	@ 0x88
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f003 fb9f 	bl	8003ee4 <memset>
  if(huart->Instance==USART2)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4a25      	ldr	r2, [pc, #148]	@ (8000840 <HAL_UART_MspInit+0xc0>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d143      	bne.n	8000838 <HAL_UART_MspInit+0xb8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007b0:	2302      	movs	r3, #2
 80007b2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007b4:	2300      	movs	r3, #0
 80007b6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4618      	mov	r0, r3
 80007be:	f001 faeb 	bl	8001d98 <HAL_RCCEx_PeriphCLKConfig>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007c8:	f7ff ffb0 	bl	800072c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <HAL_UART_MspInit+0xc4>)
 80007ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007d0:	4a1c      	ldr	r2, [pc, #112]	@ (8000844 <HAL_UART_MspInit+0xc4>)
 80007d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80007d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <HAL_UART_MspInit+0xc4>)
 80007da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80007e0:	613b      	str	r3, [r7, #16]
 80007e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e4:	4b17      	ldr	r3, [pc, #92]	@ (8000844 <HAL_UART_MspInit+0xc4>)
 80007e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e8:	4a16      	ldr	r2, [pc, #88]	@ (8000844 <HAL_UART_MspInit+0xc4>)
 80007ea:	f043 0301 	orr.w	r3, r3, #1
 80007ee:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007f0:	4b14      	ldr	r3, [pc, #80]	@ (8000844 <HAL_UART_MspInit+0xc4>)
 80007f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f4:	f003 0301 	and.w	r3, r3, #1
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007fc:	230c      	movs	r3, #12
 80007fe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000802:	2302      	movs	r3, #2
 8000804:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000814:	2307      	movs	r3, #7
 8000816:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800081e:	4619      	mov	r1, r3
 8000820:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000824:	f000 fa92 	bl	8000d4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000828:	2200      	movs	r2, #0
 800082a:	2100      	movs	r1, #0
 800082c:	2026      	movs	r0, #38	@ 0x26
 800082e:	f000 f9d8 	bl	8000be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000832:	2026      	movs	r0, #38	@ 0x26
 8000834:	f000 f9f1 	bl	8000c1a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000838:	bf00      	nop
 800083a:	37b0      	adds	r7, #176	@ 0xb0
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40004400 	.word	0x40004400
 8000844:	40021000 	.word	0x40021000

08000848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800084c:	bf00      	nop
 800084e:	e7fd      	b.n	800084c <NMI_Handler+0x4>

08000850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000850:	b480      	push	{r7}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000854:	bf00      	nop
 8000856:	e7fd      	b.n	8000854 <HardFault_Handler+0x4>

08000858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800085c:	bf00      	nop
 800085e:	e7fd      	b.n	800085c <MemManage_Handler+0x4>

08000860 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000864:	bf00      	nop
 8000866:	e7fd      	b.n	8000864 <BusFault_Handler+0x4>

08000868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800086c:	bf00      	nop
 800086e:	e7fd      	b.n	800086c <UsageFault_Handler+0x4>

08000870 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000874:	bf00      	nop
 8000876:	46bd      	mov	sp, r7
 8000878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089e:	f000 f8a5 	bl	80009ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
	...

080008a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008ac:	4802      	ldr	r0, [pc, #8]	@ (80008b8 <USART2_IRQHandler+0x10>)
 80008ae:	f002 f853 	bl	8002958 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000002c 	.word	0x2000002c

080008bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <SystemInit+0x20>)
 80008c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008c6:	4a05      	ldr	r2, [pc, #20]	@ (80008dc <SystemInit+0x20>)
 80008c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80008cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80008d0:	bf00      	nop
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000ed00 	.word	0xe000ed00

080008e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000918 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e4:	f7ff ffea 	bl	80008bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480c      	ldr	r0, [pc, #48]	@ (800091c <LoopForever+0x6>)
  ldr r1, =_edata
 80008ea:	490d      	ldr	r1, [pc, #52]	@ (8000920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000924 <LoopForever+0xe>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000900:	4c0a      	ldr	r4, [pc, #40]	@ (800092c <LoopForever+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090e:	f003 faf1 	bl	8003ef4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000912:	f7ff fe0d 	bl	8000530 <main>

08000916 <LoopForever>:

LoopForever:
    b LoopForever
 8000916:	e7fe      	b.n	8000916 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000918:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000924:	08003fac 	.word	0x08003fac
  ldr r2, =_sbss
 8000928:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800092c:	200000b8 	.word	0x200000b8

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800093a:	2300      	movs	r3, #0
 800093c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_Init+0x3c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a0b      	ldr	r2, [pc, #44]	@ (8000970 <HAL_Init+0x3c>)
 8000944:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000948:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094a:	2003      	movs	r0, #3
 800094c:	f000 f93e 	bl	8000bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000950:	2000      	movs	r0, #0
 8000952:	f000 f80f 	bl	8000974 <HAL_InitTick>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d002      	beq.n	8000962 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800095c:	2301      	movs	r3, #1
 800095e:	71fb      	strb	r3, [r7, #7]
 8000960:	e001      	b.n	8000966 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000962:	f7ff fee9 	bl	8000738 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000966:	79fb      	ldrb	r3, [r7, #7]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800097c:	2300      	movs	r3, #0
 800097e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000980:	4b17      	ldr	r3, [pc, #92]	@ (80009e0 <HAL_InitTick+0x6c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d023      	beq.n	80009d0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000988:	4b16      	ldr	r3, [pc, #88]	@ (80009e4 <HAL_InitTick+0x70>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b14      	ldr	r3, [pc, #80]	@ (80009e0 <HAL_InitTick+0x6c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	4619      	mov	r1, r3
 8000992:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000996:	fbb3 f3f1 	udiv	r3, r3, r1
 800099a:	fbb2 f3f3 	udiv	r3, r2, r3
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f949 	bl	8000c36 <HAL_SYSTICK_Config>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d10f      	bne.n	80009ca <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	2b0f      	cmp	r3, #15
 80009ae:	d809      	bhi.n	80009c4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009b0:	2200      	movs	r2, #0
 80009b2:	6879      	ldr	r1, [r7, #4]
 80009b4:	f04f 30ff 	mov.w	r0, #4294967295
 80009b8:	f000 f913 	bl	8000be2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009bc:	4a0a      	ldr	r2, [pc, #40]	@ (80009e8 <HAL_InitTick+0x74>)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	6013      	str	r3, [r2, #0]
 80009c2:	e007      	b.n	80009d4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80009c4:	2301      	movs	r3, #1
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	e004      	b.n	80009d4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e001      	b.n	80009d4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009d0:	2301      	movs	r3, #1
 80009d2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3710      	adds	r7, #16
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000008 	.word	0x20000008
 80009e4:	20000000 	.word	0x20000000
 80009e8:	20000004 	.word	0x20000004

080009ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f0:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_IncTick+0x20>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	461a      	mov	r2, r3
 80009f6:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_IncTick+0x24>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4413      	add	r3, r2
 80009fc:	4a04      	ldr	r2, [pc, #16]	@ (8000a10 <HAL_IncTick+0x24>)
 80009fe:	6013      	str	r3, [r2, #0]
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	200000b4 	.word	0x200000b4

08000a14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  return uwTick;
 8000a18:	4b03      	ldr	r3, [pc, #12]	@ (8000a28 <HAL_GetTick+0x14>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
}
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	200000b4 	.word	0x200000b4

08000a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b085      	sub	sp, #20
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	f003 0307 	and.w	r3, r3, #7
 8000a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a3e:	68db      	ldr	r3, [r3, #12]
 8000a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a48:	4013      	ands	r3, r2
 8000a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a50:	68bb      	ldr	r3, [r7, #8]
 8000a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5e:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <__NVIC_SetPriorityGrouping+0x44>)
 8000a60:	68bb      	ldr	r3, [r7, #8]
 8000a62:	60d3      	str	r3, [r2, #12]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a78:	4b04      	ldr	r3, [pc, #16]	@ (8000a8c <__NVIC_GetPriorityGrouping+0x18>)
 8000a7a:	68db      	ldr	r3, [r3, #12]
 8000a7c:	0a1b      	lsrs	r3, r3, #8
 8000a7e:	f003 0307 	and.w	r3, r3, #7
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	4603      	mov	r3, r0
 8000a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	db0b      	blt.n	8000aba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa2:	79fb      	ldrb	r3, [r7, #7]
 8000aa4:	f003 021f 	and.w	r2, r3, #31
 8000aa8:	4907      	ldr	r1, [pc, #28]	@ (8000ac8 <__NVIC_EnableIRQ+0x38>)
 8000aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	2001      	movs	r0, #1
 8000ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000aba:	bf00      	nop
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	e000e100 	.word	0xe000e100

08000acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	6039      	str	r1, [r7, #0]
 8000ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	db0a      	blt.n	8000af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	b2da      	uxtb	r2, r3
 8000ae4:	490c      	ldr	r1, [pc, #48]	@ (8000b18 <__NVIC_SetPriority+0x4c>)
 8000ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aea:	0112      	lsls	r2, r2, #4
 8000aec:	b2d2      	uxtb	r2, r2
 8000aee:	440b      	add	r3, r1
 8000af0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af4:	e00a      	b.n	8000b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	4908      	ldr	r1, [pc, #32]	@ (8000b1c <__NVIC_SetPriority+0x50>)
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	f003 030f 	and.w	r3, r3, #15
 8000b02:	3b04      	subs	r3, #4
 8000b04:	0112      	lsls	r2, r2, #4
 8000b06:	b2d2      	uxtb	r2, r2
 8000b08:	440b      	add	r3, r1
 8000b0a:	761a      	strb	r2, [r3, #24]
}
 8000b0c:	bf00      	nop
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	e000e100 	.word	0xe000e100
 8000b1c:	e000ed00 	.word	0xe000ed00

08000b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b089      	sub	sp, #36	@ 0x24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f1c3 0307 	rsb	r3, r3, #7
 8000b3a:	2b04      	cmp	r3, #4
 8000b3c:	bf28      	it	cs
 8000b3e:	2304      	movcs	r3, #4
 8000b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3304      	adds	r3, #4
 8000b46:	2b06      	cmp	r3, #6
 8000b48:	d902      	bls.n	8000b50 <NVIC_EncodePriority+0x30>
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3b03      	subs	r3, #3
 8000b4e:	e000      	b.n	8000b52 <NVIC_EncodePriority+0x32>
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b54:	f04f 32ff 	mov.w	r2, #4294967295
 8000b58:	69bb      	ldr	r3, [r7, #24]
 8000b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5e:	43da      	mvns	r2, r3
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	401a      	ands	r2, r3
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b68:	f04f 31ff 	mov.w	r1, #4294967295
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b72:	43d9      	mvns	r1, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	4313      	orrs	r3, r2
         );
}
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	3724      	adds	r7, #36	@ 0x24
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	3b01      	subs	r3, #1
 8000b94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b98:	d301      	bcc.n	8000b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	e00f      	b.n	8000bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc8 <SysTick_Config+0x40>)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	3b01      	subs	r3, #1
 8000ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ba6:	210f      	movs	r1, #15
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f7ff ff8e 	bl	8000acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bb0:	4b05      	ldr	r3, [pc, #20]	@ (8000bc8 <SysTick_Config+0x40>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bb6:	4b04      	ldr	r3, [pc, #16]	@ (8000bc8 <SysTick_Config+0x40>)
 8000bb8:	2207      	movs	r2, #7
 8000bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bbc:	2300      	movs	r3, #0
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	e000e010 	.word	0xe000e010

08000bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f7ff ff29 	bl	8000a2c <__NVIC_SetPriorityGrouping>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b086      	sub	sp, #24
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	60b9      	str	r1, [r7, #8]
 8000bec:	607a      	str	r2, [r7, #4]
 8000bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bf4:	f7ff ff3e 	bl	8000a74 <__NVIC_GetPriorityGrouping>
 8000bf8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bfa:	687a      	ldr	r2, [r7, #4]
 8000bfc:	68b9      	ldr	r1, [r7, #8]
 8000bfe:	6978      	ldr	r0, [r7, #20]
 8000c00:	f7ff ff8e 	bl	8000b20 <NVIC_EncodePriority>
 8000c04:	4602      	mov	r2, r0
 8000c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c0a:	4611      	mov	r1, r2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff ff5d 	bl	8000acc <__NVIC_SetPriority>
}
 8000c12:	bf00      	nop
 8000c14:	3718      	adds	r7, #24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}

08000c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	b082      	sub	sp, #8
 8000c1e:	af00      	add	r7, sp, #0
 8000c20:	4603      	mov	r3, r0
 8000c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff31 	bl	8000a90 <__NVIC_EnableIRQ>
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	6878      	ldr	r0, [r7, #4]
 8000c40:	f7ff ffa2 	bl	8000b88 <SysTick_Config>
 8000c44:	4603      	mov	r3, r0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b085      	sub	sp, #20
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d008      	beq.n	8000c78 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	2204      	movs	r2, #4
 8000c6a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8000c74:	2301      	movs	r3, #1
 8000c76:	e022      	b.n	8000cbe <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f022 020e 	bic.w	r2, r2, #14
 8000c86:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	f022 0201 	bic.w	r2, r2, #1
 8000c96:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c9c:	f003 021c 	and.w	r2, r3, #28
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8000caa:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2201      	movs	r2, #1
 8000cb0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8000cbc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	3714      	adds	r7, #20
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr

08000cca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cca:	b580      	push	{r7, lr}
 8000ccc:	b084      	sub	sp, #16
 8000cce:	af00      	add	r7, sp, #0
 8000cd0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	2b02      	cmp	r3, #2
 8000ce0:	d005      	beq.n	8000cee <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2204      	movs	r2, #4
 8000ce6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000ce8:	2301      	movs	r3, #1
 8000cea:	73fb      	strb	r3, [r7, #15]
 8000cec:	e029      	b.n	8000d42 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f022 020e 	bic.w	r2, r2, #14
 8000cfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f022 0201 	bic.w	r2, r2, #1
 8000d0c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d12:	f003 021c 	and.w	r2, r3, #28
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2201      	movs	r2, #1
 8000d26:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d003      	beq.n	8000d42 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	4798      	blx	r3
    }
  }
  return status;
 8000d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b087      	sub	sp, #28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	e17f      	b.n	800105c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f000 8171 	beq.w	8001056 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f003 0303 	and.w	r3, r3, #3
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d005      	beq.n	8000d8c <HAL_GPIO_Init+0x40>
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	f003 0303 	and.w	r3, r3, #3
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d130      	bne.n	8000dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	f003 0201 	and.w	r2, r3, #1
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa02 f303 	lsl.w	r3, r2, r3
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f003 0303 	and.w	r3, r3, #3
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d118      	bne.n	8000e2c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000e00:	2201      	movs	r2, #1
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	08db      	lsrs	r3, r3, #3
 8000e16:	f003 0201 	and.w	r2, r3, #1
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b03      	cmp	r3, #3
 8000e36:	d017      	beq.n	8000e68 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	2203      	movs	r2, #3
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	693a      	ldr	r2, [r7, #16]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f003 0303 	and.w	r3, r3, #3
 8000e70:	2b02      	cmp	r3, #2
 8000e72:	d123      	bne.n	8000ebc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	08da      	lsrs	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	3208      	adds	r2, #8
 8000e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	f003 0307 	and.w	r3, r3, #7
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	220f      	movs	r2, #15
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	691a      	ldr	r2, [r3, #16]
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	08da      	lsrs	r2, r3, #3
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3208      	adds	r2, #8
 8000eb6:	6939      	ldr	r1, [r7, #16]
 8000eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f003 0203 	and.w	r2, r3, #3
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee4:	693a      	ldr	r2, [r7, #16]
 8000ee6:	4313      	orrs	r3, r2
 8000ee8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	693a      	ldr	r2, [r7, #16]
 8000eee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	685b      	ldr	r3, [r3, #4]
 8000ef4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f000 80ac 	beq.w	8001056 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000efe:	4b5f      	ldr	r3, [pc, #380]	@ (800107c <HAL_GPIO_Init+0x330>)
 8000f00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f02:	4a5e      	ldr	r2, [pc, #376]	@ (800107c <HAL_GPIO_Init+0x330>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f0a:	4b5c      	ldr	r3, [pc, #368]	@ (800107c <HAL_GPIO_Init+0x330>)
 8000f0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f16:	4a5a      	ldr	r2, [pc, #360]	@ (8001080 <HAL_GPIO_Init+0x334>)
 8000f18:	697b      	ldr	r3, [r7, #20]
 8000f1a:	089b      	lsrs	r3, r3, #2
 8000f1c:	3302      	adds	r3, #2
 8000f1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f22:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	220f      	movs	r2, #15
 8000f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f32:	43db      	mvns	r3, r3
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	4013      	ands	r3, r2
 8000f38:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f40:	d025      	beq.n	8000f8e <HAL_GPIO_Init+0x242>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4f      	ldr	r2, [pc, #316]	@ (8001084 <HAL_GPIO_Init+0x338>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d01f      	beq.n	8000f8a <HAL_GPIO_Init+0x23e>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001088 <HAL_GPIO_Init+0x33c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d019      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4d      	ldr	r2, [pc, #308]	@ (800108c <HAL_GPIO_Init+0x340>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d013      	beq.n	8000f82 <HAL_GPIO_Init+0x236>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001090 <HAL_GPIO_Init+0x344>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d00d      	beq.n	8000f7e <HAL_GPIO_Init+0x232>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4b      	ldr	r2, [pc, #300]	@ (8001094 <HAL_GPIO_Init+0x348>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d007      	beq.n	8000f7a <HAL_GPIO_Init+0x22e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001098 <HAL_GPIO_Init+0x34c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d101      	bne.n	8000f76 <HAL_GPIO_Init+0x22a>
 8000f72:	2306      	movs	r3, #6
 8000f74:	e00c      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f76:	2307      	movs	r3, #7
 8000f78:	e00a      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f7a:	2305      	movs	r3, #5
 8000f7c:	e008      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f7e:	2304      	movs	r3, #4
 8000f80:	e006      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f82:	2303      	movs	r3, #3
 8000f84:	e004      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f86:	2302      	movs	r3, #2
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e000      	b.n	8000f90 <HAL_GPIO_Init+0x244>
 8000f8e:	2300      	movs	r3, #0
 8000f90:	697a      	ldr	r2, [r7, #20]
 8000f92:	f002 0203 	and.w	r2, r2, #3
 8000f96:	0092      	lsls	r2, r2, #2
 8000f98:	4093      	lsls	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fa0:	4937      	ldr	r1, [pc, #220]	@ (8001080 <HAL_GPIO_Init+0x334>)
 8000fa2:	697b      	ldr	r3, [r7, #20]
 8000fa4:	089b      	lsrs	r3, r3, #2
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000fae:	4b3b      	ldr	r3, [pc, #236]	@ (800109c <HAL_GPIO_Init+0x350>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fd2:	4a32      	ldr	r2, [pc, #200]	@ (800109c <HAL_GPIO_Init+0x350>)
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fd8:	4b30      	ldr	r3, [pc, #192]	@ (800109c <HAL_GPIO_Init+0x350>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ffc:	4a27      	ldr	r2, [pc, #156]	@ (800109c <HAL_GPIO_Init+0x350>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001002:	4b26      	ldr	r3, [pc, #152]	@ (800109c <HAL_GPIO_Init+0x350>)
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	43db      	mvns	r3, r3
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	4013      	ands	r3, r2
 8001010:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	4313      	orrs	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001026:	4a1d      	ldr	r2, [pc, #116]	@ (800109c <HAL_GPIO_Init+0x350>)
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800102c:	4b1b      	ldr	r3, [pc, #108]	@ (800109c <HAL_GPIO_Init+0x350>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001050:	4a12      	ldr	r2, [pc, #72]	@ (800109c <HAL_GPIO_Init+0x350>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	3301      	adds	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	fa22 f303 	lsr.w	r3, r2, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	f47f ae78 	bne.w	8000d5c <HAL_GPIO_Init+0x10>
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	371c      	adds	r7, #28
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40021000 	.word	0x40021000
 8001080:	40010000 	.word	0x40010000
 8001084:	48000400 	.word	0x48000400
 8001088:	48000800 	.word	0x48000800
 800108c:	48000c00 	.word	0x48000c00
 8001090:	48001000 	.word	0x48001000
 8001094:	48001400 	.word	0x48001400
 8001098:	48001800 	.word	0x48001800
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	460b      	mov	r3, r1
 80010aa:	807b      	strh	r3, [r7, #2]
 80010ac:	4613      	mov	r3, r2
 80010ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010b0:	787b      	ldrb	r3, [r7, #1]
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010b6:	887a      	ldrh	r2, [r7, #2]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010bc:	e002      	b.n	80010c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010be:	887a      	ldrh	r2, [r7, #2]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010dc:	4618      	mov	r0, r3
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	40007000 	.word	0x40007000

080010ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010fa:	d130      	bne.n	800115e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010fc:	4b23      	ldr	r3, [pc, #140]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001104:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001108:	d038      	beq.n	800117c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800110a:	4b20      	ldr	r3, [pc, #128]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001112:	4a1e      	ldr	r2, [pc, #120]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001114:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001118:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2232      	movs	r2, #50	@ 0x32
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	4a1b      	ldr	r2, [pc, #108]	@ (8001194 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001126:	fba2 2303 	umull	r2, r3, r2, r3
 800112a:	0c9b      	lsrs	r3, r3, #18
 800112c:	3301      	adds	r3, #1
 800112e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001130:	e002      	b.n	8001138 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3b01      	subs	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001138:	4b14      	ldr	r3, [pc, #80]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001140:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001144:	d102      	bne.n	800114c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d1f2      	bne.n	8001132 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800114c:	4b0f      	ldr	r3, [pc, #60]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114e:	695b      	ldr	r3, [r3, #20]
 8001150:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001158:	d110      	bne.n	800117c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800115a:	2303      	movs	r3, #3
 800115c:	e00f      	b.n	800117e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800115e:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001166:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800116a:	d007      	beq.n	800117c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800116c:	4b07      	ldr	r3, [pc, #28]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001174:	4a05      	ldr	r2, [pc, #20]	@ (800118c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800117a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40007000 	.word	0x40007000
 8001190:	20000000 	.word	0x20000000
 8001194:	431bde83 	.word	0x431bde83

08001198 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b088      	sub	sp, #32
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d101      	bne.n	80011aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80011a6:	2301      	movs	r3, #1
 80011a8:	e3ca      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011aa:	4b97      	ldr	r3, [pc, #604]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	f003 030c 	and.w	r3, r3, #12
 80011b2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80011b4:	4b94      	ldr	r3, [pc, #592]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	f003 0303 	and.w	r3, r3, #3
 80011bc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f003 0310 	and.w	r3, r3, #16
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	f000 80e4 	beq.w	8001394 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011cc:	69bb      	ldr	r3, [r7, #24]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d007      	beq.n	80011e2 <HAL_RCC_OscConfig+0x4a>
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	2b0c      	cmp	r3, #12
 80011d6:	f040 808b 	bne.w	80012f0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	f040 8087 	bne.w	80012f0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011e2:	4b89      	ldr	r3, [pc, #548]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d005      	beq.n	80011fa <HAL_RCC_OscConfig+0x62>
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	699b      	ldr	r3, [r3, #24]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e3a2      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6a1a      	ldr	r2, [r3, #32]
 80011fe:	4b82      	ldr	r3, [pc, #520]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0308 	and.w	r3, r3, #8
 8001206:	2b00      	cmp	r3, #0
 8001208:	d004      	beq.n	8001214 <HAL_RCC_OscConfig+0x7c>
 800120a:	4b7f      	ldr	r3, [pc, #508]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001212:	e005      	b.n	8001220 <HAL_RCC_OscConfig+0x88>
 8001214:	4b7c      	ldr	r3, [pc, #496]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800121a:	091b      	lsrs	r3, r3, #4
 800121c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001220:	4293      	cmp	r3, r2
 8001222:	d223      	bcs.n	800126c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6a1b      	ldr	r3, [r3, #32]
 8001228:	4618      	mov	r0, r3
 800122a:	f000 fd55 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e383      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001238:	4b73      	ldr	r3, [pc, #460]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a72      	ldr	r2, [pc, #456]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	4b70      	ldr	r3, [pc, #448]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6a1b      	ldr	r3, [r3, #32]
 8001250:	496d      	ldr	r1, [pc, #436]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001252:	4313      	orrs	r3, r2
 8001254:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001256:	4b6c      	ldr	r3, [pc, #432]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	021b      	lsls	r3, r3, #8
 8001264:	4968      	ldr	r1, [pc, #416]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001266:	4313      	orrs	r3, r2
 8001268:	604b      	str	r3, [r1, #4]
 800126a:	e025      	b.n	80012b8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800126c:	4b66      	ldr	r3, [pc, #408]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a65      	ldr	r2, [pc, #404]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001272:	f043 0308 	orr.w	r3, r3, #8
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b63      	ldr	r3, [pc, #396]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4960      	ldr	r1, [pc, #384]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001286:	4313      	orrs	r3, r2
 8001288:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800128a:	4b5f      	ldr	r3, [pc, #380]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	021b      	lsls	r3, r3, #8
 8001298:	495b      	ldr	r1, [pc, #364]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d109      	bne.n	80012b8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f000 fd15 	bl	8001cd8 <RCC_SetFlashLatencyFromMSIRange>
 80012ae:	4603      	mov	r3, r0
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d001      	beq.n	80012b8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	e343      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012b8:	f000 fc4a 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b52      	ldr	r3, [pc, #328]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	091b      	lsrs	r3, r3, #4
 80012c4:	f003 030f 	and.w	r3, r3, #15
 80012c8:	4950      	ldr	r1, [pc, #320]	@ (800140c <HAL_RCC_OscConfig+0x274>)
 80012ca:	5ccb      	ldrb	r3, [r1, r3]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	fa22 f303 	lsr.w	r3, r2, r3
 80012d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001410 <HAL_RCC_OscConfig+0x278>)
 80012d6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012d8:	4b4e      	ldr	r3, [pc, #312]	@ (8001414 <HAL_RCC_OscConfig+0x27c>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fb49 	bl	8000974 <HAL_InitTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d052      	beq.n	8001392 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
 80012ee:	e327      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	699b      	ldr	r3, [r3, #24]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d032      	beq.n	800135e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012f8:	4b43      	ldr	r3, [pc, #268]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a42      	ldr	r2, [pc, #264]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001304:	f7ff fb86 	bl	8000a14 <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800130c:	f7ff fb82 	bl	8000a14 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b02      	cmp	r3, #2
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e310      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800131e:	4b3a      	ldr	r3, [pc, #232]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800132a:	4b37      	ldr	r3, [pc, #220]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a36      	ldr	r2, [pc, #216]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001330:	f043 0308 	orr.w	r3, r3, #8
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	4b34      	ldr	r3, [pc, #208]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	4931      	ldr	r1, [pc, #196]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001344:	4313      	orrs	r3, r2
 8001346:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001348:	4b2f      	ldr	r3, [pc, #188]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	492c      	ldr	r1, [pc, #176]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001358:	4313      	orrs	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
 800135c:	e01a      	b.n	8001394 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800135e:	4b2a      	ldr	r3, [pc, #168]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a29      	ldr	r2, [pc, #164]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001364:	f023 0301 	bic.w	r3, r3, #1
 8001368:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800136a:	f7ff fb53 	bl	8000a14 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001370:	e008      	b.n	8001384 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001372:	f7ff fb4f 	bl	8000a14 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b02      	cmp	r3, #2
 800137e:	d901      	bls.n	8001384 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001380:	2303      	movs	r3, #3
 8001382:	e2dd      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001384:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f003 0302 	and.w	r3, r3, #2
 800138c:	2b00      	cmp	r3, #0
 800138e:	d1f0      	bne.n	8001372 <HAL_RCC_OscConfig+0x1da>
 8001390:	e000      	b.n	8001394 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001392:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d074      	beq.n	800148a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80013a0:	69bb      	ldr	r3, [r7, #24]
 80013a2:	2b08      	cmp	r3, #8
 80013a4:	d005      	beq.n	80013b2 <HAL_RCC_OscConfig+0x21a>
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b0c      	cmp	r3, #12
 80013aa:	d10e      	bne.n	80013ca <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	2b03      	cmp	r3, #3
 80013b0:	d10b      	bne.n	80013ca <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d064      	beq.n	8001488 <HAL_RCC_OscConfig+0x2f0>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d160      	bne.n	8001488 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e2ba      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013d2:	d106      	bne.n	80013e2 <HAL_RCC_OscConfig+0x24a>
 80013d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013de:	6013      	str	r3, [r2, #0]
 80013e0:	e026      	b.n	8001430 <HAL_RCC_OscConfig+0x298>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ea:	d115      	bne.n	8001418 <HAL_RCC_OscConfig+0x280>
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013f6:	6013      	str	r3, [r2, #0]
 80013f8:	4b03      	ldr	r3, [pc, #12]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a02      	ldr	r2, [pc, #8]	@ (8001408 <HAL_RCC_OscConfig+0x270>)
 80013fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001402:	6013      	str	r3, [r2, #0]
 8001404:	e014      	b.n	8001430 <HAL_RCC_OscConfig+0x298>
 8001406:	bf00      	nop
 8001408:	40021000 	.word	0x40021000
 800140c:	08003f54 	.word	0x08003f54
 8001410:	20000000 	.word	0x20000000
 8001414:	20000004 	.word	0x20000004
 8001418:	4ba0      	ldr	r3, [pc, #640]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a9f      	ldr	r2, [pc, #636]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800141e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001422:	6013      	str	r3, [r2, #0]
 8001424:	4b9d      	ldr	r3, [pc, #628]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a9c      	ldr	r2, [pc, #624]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800142a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800142e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d013      	beq.n	8001460 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff faec 	bl	8000a14 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fae8 	bl	8000a14 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e276      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001452:	4b92      	ldr	r3, [pc, #584]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d0f0      	beq.n	8001440 <HAL_RCC_OscConfig+0x2a8>
 800145e:	e014      	b.n	800148a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001460:	f7ff fad8 	bl	8000a14 <HAL_GetTick>
 8001464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001466:	e008      	b.n	800147a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001468:	f7ff fad4 	bl	8000a14 <HAL_GetTick>
 800146c:	4602      	mov	r2, r0
 800146e:	693b      	ldr	r3, [r7, #16]
 8001470:	1ad3      	subs	r3, r2, r3
 8001472:	2b64      	cmp	r3, #100	@ 0x64
 8001474:	d901      	bls.n	800147a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e262      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800147a:	4b88      	ldr	r3, [pc, #544]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1f0      	bne.n	8001468 <HAL_RCC_OscConfig+0x2d0>
 8001486:	e000      	b.n	800148a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d060      	beq.n	8001558 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d005      	beq.n	80014a8 <HAL_RCC_OscConfig+0x310>
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	2b0c      	cmp	r3, #12
 80014a0:	d119      	bne.n	80014d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	2b02      	cmp	r3, #2
 80014a6:	d116      	bne.n	80014d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a8:	4b7c      	ldr	r3, [pc, #496]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x328>
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d101      	bne.n	80014c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e23f      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014c0:	4b76      	ldr	r3, [pc, #472]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	061b      	lsls	r3, r3, #24
 80014ce:	4973      	ldr	r1, [pc, #460]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014d0:	4313      	orrs	r3, r2
 80014d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014d4:	e040      	b.n	8001558 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	68db      	ldr	r3, [r3, #12]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d023      	beq.n	8001526 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014de:	4b6f      	ldr	r3, [pc, #444]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a6e      	ldr	r2, [pc, #440]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80014e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ea:	f7ff fa93 	bl	8000a14 <HAL_GetTick>
 80014ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014f0:	e008      	b.n	8001504 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014f2:	f7ff fa8f 	bl	8000a14 <HAL_GetTick>
 80014f6:	4602      	mov	r2, r0
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d901      	bls.n	8001504 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001500:	2303      	movs	r3, #3
 8001502:	e21d      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001504:	4b65      	ldr	r3, [pc, #404]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150c:	2b00      	cmp	r3, #0
 800150e:	d0f0      	beq.n	80014f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001510:	4b62      	ldr	r3, [pc, #392]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	691b      	ldr	r3, [r3, #16]
 800151c:	061b      	lsls	r3, r3, #24
 800151e:	495f      	ldr	r1, [pc, #380]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001520:	4313      	orrs	r3, r2
 8001522:	604b      	str	r3, [r1, #4]
 8001524:	e018      	b.n	8001558 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001526:	4b5d      	ldr	r3, [pc, #372]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a5c      	ldr	r2, [pc, #368]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800152c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001530:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001532:	f7ff fa6f 	bl	8000a14 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153a:	f7ff fa6b 	bl	8000a14 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1f9      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800154c:	4b53      	ldr	r3, [pc, #332]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0308 	and.w	r3, r3, #8
 8001560:	2b00      	cmp	r3, #0
 8001562:	d03c      	beq.n	80015de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	695b      	ldr	r3, [r3, #20]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d01c      	beq.n	80015a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800156c:	4b4b      	ldr	r3, [pc, #300]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800156e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001572:	4a4a      	ldr	r2, [pc, #296]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157c:	f7ff fa4a 	bl	8000a14 <HAL_GetTick>
 8001580:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001582:	e008      	b.n	8001596 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001584:	f7ff fa46 	bl	8000a14 <HAL_GetTick>
 8001588:	4602      	mov	r2, r0
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d901      	bls.n	8001596 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001592:	2303      	movs	r3, #3
 8001594:	e1d4      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001596:	4b41      	ldr	r3, [pc, #260]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001598:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d0ef      	beq.n	8001584 <HAL_RCC_OscConfig+0x3ec>
 80015a4:	e01b      	b.n	80015de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015a6:	4b3d      	ldr	r3, [pc, #244]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015ac:	4a3b      	ldr	r2, [pc, #236]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015b6:	f7ff fa2d 	bl	8000a14 <HAL_GetTick>
 80015ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015bc:	e008      	b.n	80015d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015be:	f7ff fa29 	bl	8000a14 <HAL_GetTick>
 80015c2:	4602      	mov	r2, r0
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	1ad3      	subs	r3, r2, r3
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	d901      	bls.n	80015d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015cc:	2303      	movs	r3, #3
 80015ce:	e1b7      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015d0:	4b32      	ldr	r3, [pc, #200]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80015d6:	f003 0302 	and.w	r3, r3, #2
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1ef      	bne.n	80015be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0304 	and.w	r3, r3, #4
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80a6 	beq.w	8001738 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015f0:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d10d      	bne.n	8001618 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	4b27      	ldr	r3, [pc, #156]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 80015fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001600:	4a26      	ldr	r2, [pc, #152]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001606:	6593      	str	r3, [r2, #88]	@ 0x58
 8001608:	4b24      	ldr	r3, [pc, #144]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800160a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800160c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001610:	60bb      	str	r3, [r7, #8]
 8001612:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001614:	2301      	movs	r3, #1
 8001616:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001618:	4b21      	ldr	r3, [pc, #132]	@ (80016a0 <HAL_RCC_OscConfig+0x508>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001620:	2b00      	cmp	r3, #0
 8001622:	d118      	bne.n	8001656 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001624:	4b1e      	ldr	r3, [pc, #120]	@ (80016a0 <HAL_RCC_OscConfig+0x508>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a1d      	ldr	r2, [pc, #116]	@ (80016a0 <HAL_RCC_OscConfig+0x508>)
 800162a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800162e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001630:	f7ff f9f0 	bl	8000a14 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001638:	f7ff f9ec 	bl	8000a14 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b02      	cmp	r3, #2
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e17a      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800164a:	4b15      	ldr	r3, [pc, #84]	@ (80016a0 <HAL_RCC_OscConfig+0x508>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d108      	bne.n	8001670 <HAL_RCC_OscConfig+0x4d8>
 800165e:	4b0f      	ldr	r3, [pc, #60]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001660:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001664:	4a0d      	ldr	r2, [pc, #52]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001666:	f043 0301 	orr.w	r3, r3, #1
 800166a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800166e:	e029      	b.n	80016c4 <HAL_RCC_OscConfig+0x52c>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b05      	cmp	r3, #5
 8001676:	d115      	bne.n	80016a4 <HAL_RCC_OscConfig+0x50c>
 8001678:	4b08      	ldr	r3, [pc, #32]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167e:	4a07      	ldr	r2, [pc, #28]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001680:	f043 0304 	orr.w	r3, r3, #4
 8001684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001688:	4b04      	ldr	r3, [pc, #16]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 800168a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800168e:	4a03      	ldr	r2, [pc, #12]	@ (800169c <HAL_RCC_OscConfig+0x504>)
 8001690:	f043 0301 	orr.w	r3, r3, #1
 8001694:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001698:	e014      	b.n	80016c4 <HAL_RCC_OscConfig+0x52c>
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000
 80016a0:	40007000 	.word	0x40007000
 80016a4:	4b9c      	ldr	r3, [pc, #624]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80016a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016aa:	4a9b      	ldr	r2, [pc, #620]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80016ac:	f023 0301 	bic.w	r3, r3, #1
 80016b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80016b4:	4b98      	ldr	r3, [pc, #608]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80016b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016ba:	4a97      	ldr	r2, [pc, #604]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80016bc:	f023 0304 	bic.w	r3, r3, #4
 80016c0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d016      	beq.n	80016fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016cc:	f7ff f9a2 	bl	8000a14 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016d2:	e00a      	b.n	80016ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016d4:	f7ff f99e 	bl	8000a14 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016e2:	4293      	cmp	r3, r2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e12a      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ea:	4b8b      	ldr	r3, [pc, #556]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80016ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d0ed      	beq.n	80016d4 <HAL_RCC_OscConfig+0x53c>
 80016f8:	e015      	b.n	8001726 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016fa:	f7ff f98b 	bl	8000a14 <HAL_GetTick>
 80016fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001700:	e00a      	b.n	8001718 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001702:	f7ff f987 	bl	8000a14 <HAL_GetTick>
 8001706:	4602      	mov	r2, r0
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001710:	4293      	cmp	r3, r2
 8001712:	d901      	bls.n	8001718 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001714:	2303      	movs	r3, #3
 8001716:	e113      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001718:	4b7f      	ldr	r3, [pc, #508]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 800171a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	2b00      	cmp	r3, #0
 8001724:	d1ed      	bne.n	8001702 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001726:	7ffb      	ldrb	r3, [r7, #31]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d105      	bne.n	8001738 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800172c:	4b7a      	ldr	r3, [pc, #488]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001730:	4a79      	ldr	r2, [pc, #484]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 8001732:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001736:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173c:	2b00      	cmp	r3, #0
 800173e:	f000 80fe 	beq.w	800193e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001746:	2b02      	cmp	r3, #2
 8001748:	f040 80d0 	bne.w	80018ec <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800174c:	4b72      	ldr	r3, [pc, #456]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	f003 0203 	and.w	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800175c:	429a      	cmp	r2, r3
 800175e:	d130      	bne.n	80017c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	3b01      	subs	r3, #1
 800176c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d127      	bne.n	80017c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800177c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800177e:	429a      	cmp	r2, r3
 8001780:	d11f      	bne.n	80017c2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800178c:	2a07      	cmp	r2, #7
 800178e:	bf14      	ite	ne
 8001790:	2201      	movne	r2, #1
 8001792:	2200      	moveq	r2, #0
 8001794:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001796:	4293      	cmp	r3, r2
 8001798:	d113      	bne.n	80017c2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017a4:	085b      	lsrs	r3, r3, #1
 80017a6:	3b01      	subs	r3, #1
 80017a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d109      	bne.n	80017c2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b8:	085b      	lsrs	r3, r3, #1
 80017ba:	3b01      	subs	r3, #1
 80017bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017be:	429a      	cmp	r2, r3
 80017c0:	d06e      	beq.n	80018a0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	2b0c      	cmp	r3, #12
 80017c6:	d069      	beq.n	800189c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80017c8:	4b53      	ldr	r3, [pc, #332]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d105      	bne.n	80017e0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80017d4:	4b50      	ldr	r3, [pc, #320]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0ad      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017e4:	4b4c      	ldr	r3, [pc, #304]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a4b      	ldr	r2, [pc, #300]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80017ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017ee:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017f0:	f7ff f910 	bl	8000a14 <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f8:	f7ff f90c 	bl	8000a14 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e09a      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180a:	4b43      	ldr	r3, [pc, #268]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1f0      	bne.n	80017f8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001816:	4b40      	ldr	r3, [pc, #256]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	4b40      	ldr	r3, [pc, #256]	@ (800191c <HAL_RCC_OscConfig+0x784>)
 800181c:	4013      	ands	r3, r2
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001822:	687a      	ldr	r2, [r7, #4]
 8001824:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001826:	3a01      	subs	r2, #1
 8001828:	0112      	lsls	r2, r2, #4
 800182a:	4311      	orrs	r1, r2
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001830:	0212      	lsls	r2, r2, #8
 8001832:	4311      	orrs	r1, r2
 8001834:	687a      	ldr	r2, [r7, #4]
 8001836:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001838:	0852      	lsrs	r2, r2, #1
 800183a:	3a01      	subs	r2, #1
 800183c:	0552      	lsls	r2, r2, #21
 800183e:	4311      	orrs	r1, r2
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001844:	0852      	lsrs	r2, r2, #1
 8001846:	3a01      	subs	r2, #1
 8001848:	0652      	lsls	r2, r2, #25
 800184a:	4311      	orrs	r1, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001850:	0912      	lsrs	r2, r2, #4
 8001852:	0452      	lsls	r2, r2, #17
 8001854:	430a      	orrs	r2, r1
 8001856:	4930      	ldr	r1, [pc, #192]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 8001858:	4313      	orrs	r3, r2
 800185a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800185c:	4b2e      	ldr	r3, [pc, #184]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a2d      	ldr	r2, [pc, #180]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 8001862:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001866:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001868:	4b2b      	ldr	r3, [pc, #172]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	4a2a      	ldr	r2, [pc, #168]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 800186e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001872:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001874:	f7ff f8ce 	bl	8000a14 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff f8ca 	bl	8000a14 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e058      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188e:	4b22      	ldr	r3, [pc, #136]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d0f0      	beq.n	800187c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800189a:	e050      	b.n	800193e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e04f      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d148      	bne.n	800193e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a19      	ldr	r2, [pc, #100]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80018b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b8:	4b17      	ldr	r3, [pc, #92]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	4a16      	ldr	r2, [pc, #88]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80018be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80018c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80018c4:	f7ff f8a6 	bl	8000a14 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018cc:	f7ff f8a2 	bl	8000a14 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e030      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018de:	4b0e      	ldr	r3, [pc, #56]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x734>
 80018ea:	e028      	b.n	800193e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b0c      	cmp	r3, #12
 80018f0:	d023      	beq.n	800193a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018f2:	4b09      	ldr	r3, [pc, #36]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a08      	ldr	r2, [pc, #32]	@ (8001918 <HAL_RCC_OscConfig+0x780>)
 80018f8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018fe:	f7ff f889 	bl	8000a14 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001904:	e00c      	b.n	8001920 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001906:	f7ff f885 	bl	8000a14 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d905      	bls.n	8001920 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e013      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
 8001918:	40021000 	.word	0x40021000
 800191c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001920:	4b09      	ldr	r3, [pc, #36]	@ (8001948 <HAL_RCC_OscConfig+0x7b0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d1ec      	bne.n	8001906 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800192c:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_RCC_OscConfig+0x7b0>)
 800192e:	68da      	ldr	r2, [r3, #12]
 8001930:	4905      	ldr	r1, [pc, #20]	@ (8001948 <HAL_RCC_OscConfig+0x7b0>)
 8001932:	4b06      	ldr	r3, [pc, #24]	@ (800194c <HAL_RCC_OscConfig+0x7b4>)
 8001934:	4013      	ands	r3, r2
 8001936:	60cb      	str	r3, [r1, #12]
 8001938:	e001      	b.n	800193e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	3720      	adds	r7, #32
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40021000 	.word	0x40021000
 800194c:	feeefffc 	.word	0xfeeefffc

08001950 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b084      	sub	sp, #16
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d101      	bne.n	8001964 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e0e7      	b.n	8001b34 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001964:	4b75      	ldr	r3, [pc, #468]	@ (8001b3c <HAL_RCC_ClockConfig+0x1ec>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0307 	and.w	r3, r3, #7
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d910      	bls.n	8001994 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001972:	4b72      	ldr	r3, [pc, #456]	@ (8001b3c <HAL_RCC_ClockConfig+0x1ec>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f023 0207 	bic.w	r2, r3, #7
 800197a:	4970      	ldr	r1, [pc, #448]	@ (8001b3c <HAL_RCC_ClockConfig+0x1ec>)
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001982:	4b6e      	ldr	r3, [pc, #440]	@ (8001b3c <HAL_RCC_ClockConfig+0x1ec>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d001      	beq.n	8001994 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e0cf      	b.n	8001b34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d010      	beq.n	80019c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	4b66      	ldr	r3, [pc, #408]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d908      	bls.n	80019c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b0:	4b63      	ldr	r3, [pc, #396]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	4960      	ldr	r1, [pc, #384]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 80019be:	4313      	orrs	r3, r2
 80019c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d04c      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	2b03      	cmp	r3, #3
 80019d4:	d107      	bne.n	80019e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d6:	4b5a      	ldr	r3, [pc, #360]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d121      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	e0a6      	b.n	8001b34 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d107      	bne.n	80019fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ee:	4b54      	ldr	r3, [pc, #336]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d115      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	e09a      	b.n	8001b34 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d107      	bne.n	8001a16 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a06:	4b4e      	ldr	r3, [pc, #312]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d109      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e08e      	b.n	8001b34 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a16:	4b4a      	ldr	r3, [pc, #296]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e086      	b.n	8001b34 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a26:	4b46      	ldr	r3, [pc, #280]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f023 0203 	bic.w	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	4943      	ldr	r1, [pc, #268]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a38:	f7fe ffec 	bl	8000a14 <HAL_GetTick>
 8001a3c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a3e:	e00a      	b.n	8001a56 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a40:	f7fe ffe8 	bl	8000a14 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e06e      	b.n	8001b34 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a56:	4b3a      	ldr	r3, [pc, #232]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 020c 	and.w	r2, r3, #12
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d1eb      	bne.n	8001a40 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0302 	and.w	r3, r3, #2
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d010      	beq.n	8001a96 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	689a      	ldr	r2, [r3, #8]
 8001a78:	4b31      	ldr	r3, [pc, #196]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7a:	689b      	ldr	r3, [r3, #8]
 8001a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d208      	bcs.n	8001a96 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a84:	4b2e      	ldr	r3, [pc, #184]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	492b      	ldr	r1, [pc, #172]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001a92:	4313      	orrs	r3, r2
 8001a94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a96:	4b29      	ldr	r3, [pc, #164]	@ (8001b3c <HAL_RCC_ClockConfig+0x1ec>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	683a      	ldr	r2, [r7, #0]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d210      	bcs.n	8001ac6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa4:	4b25      	ldr	r3, [pc, #148]	@ (8001b3c <HAL_RCC_ClockConfig+0x1ec>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f023 0207 	bic.w	r2, r3, #7
 8001aac:	4923      	ldr	r1, [pc, #140]	@ (8001b3c <HAL_RCC_ClockConfig+0x1ec>)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab4:	4b21      	ldr	r3, [pc, #132]	@ (8001b3c <HAL_RCC_ClockConfig+0x1ec>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0307 	and.w	r3, r3, #7
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	429a      	cmp	r2, r3
 8001ac0:	d001      	beq.n	8001ac6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e036      	b.n	8001b34 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0304 	and.w	r3, r3, #4
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d008      	beq.n	8001ae4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	4918      	ldr	r1, [pc, #96]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d009      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	691b      	ldr	r3, [r3, #16]
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4910      	ldr	r1, [pc, #64]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b00:	4313      	orrs	r3, r2
 8001b02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b04:	f000 f824 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001b40 <HAL_RCC_ClockConfig+0x1f0>)
 8001b0c:	689b      	ldr	r3, [r3, #8]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f003 030f 	and.w	r3, r3, #15
 8001b14:	490b      	ldr	r1, [pc, #44]	@ (8001b44 <HAL_RCC_ClockConfig+0x1f4>)
 8001b16:	5ccb      	ldrb	r3, [r1, r3]
 8001b18:	f003 031f 	and.w	r3, r3, #31
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b20:	4a09      	ldr	r2, [pc, #36]	@ (8001b48 <HAL_RCC_ClockConfig+0x1f8>)
 8001b22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b24:	4b09      	ldr	r3, [pc, #36]	@ (8001b4c <HAL_RCC_ClockConfig+0x1fc>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe ff23 	bl	8000974 <HAL_InitTick>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b32:	7afb      	ldrb	r3, [r7, #11]
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3710      	adds	r7, #16
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40022000 	.word	0x40022000
 8001b40:	40021000 	.word	0x40021000
 8001b44:	08003f54 	.word	0x08003f54
 8001b48:	20000000 	.word	0x20000000
 8001b4c:	20000004 	.word	0x20000004

08001b50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b089      	sub	sp, #36	@ 0x24
 8001b54:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61fb      	str	r3, [r7, #28]
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b5e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	f003 030c 	and.w	r3, r3, #12
 8001b66:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b68:	4b3b      	ldr	r3, [pc, #236]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b6a:	68db      	ldr	r3, [r3, #12]
 8001b6c:	f003 0303 	and.w	r3, r3, #3
 8001b70:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d005      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x34>
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	2b0c      	cmp	r3, #12
 8001b7c:	d121      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d11e      	bne.n	8001bc2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b84:	4b34      	ldr	r3, [pc, #208]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b90:	4b31      	ldr	r3, [pc, #196]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e005      	b.n	8001bac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	091b      	lsrs	r3, r3, #4
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bac:	4a2b      	ldr	r2, [pc, #172]	@ (8001c5c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10d      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc0:	e00a      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d102      	bne.n	8001bce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001bc8:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bca:	61bb      	str	r3, [r7, #24]
 8001bcc:	e004      	b.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	2b08      	cmp	r3, #8
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001bd4:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bd6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d134      	bne.n	8001c48 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001bde:	4b1e      	ldr	r3, [pc, #120]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d003      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001bee:	68bb      	ldr	r3, [r7, #8]
 8001bf0:	2b03      	cmp	r3, #3
 8001bf2:	d003      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0xac>
 8001bf4:	e005      	b.n	8001c02 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bf6:	4b1a      	ldr	r3, [pc, #104]	@ (8001c60 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bf8:	617b      	str	r3, [r7, #20]
      break;
 8001bfa:	e005      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bfc:	4b19      	ldr	r3, [pc, #100]	@ (8001c64 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bfe:	617b      	str	r3, [r7, #20]
      break;
 8001c00:	e002      	b.n	8001c08 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	617b      	str	r3, [r7, #20]
      break;
 8001c06:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c08:	4b13      	ldr	r3, [pc, #76]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	3301      	adds	r3, #1
 8001c14:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c16:	4b10      	ldr	r3, [pc, #64]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c18:	68db      	ldr	r3, [r3, #12]
 8001c1a:	0a1b      	lsrs	r3, r3, #8
 8001c1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c20:	697a      	ldr	r2, [r7, #20]
 8001c22:	fb03 f202 	mul.w	r2, r3, r2
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	0e5b      	lsrs	r3, r3, #25
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	3301      	adds	r3, #1
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c46:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c48:	69bb      	ldr	r3, [r7, #24]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3724      	adds	r7, #36	@ 0x24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	08003f6c 	.word	0x08003f6c
 8001c60:	00f42400 	.word	0x00f42400
 8001c64:	007a1200 	.word	0x007a1200

08001c68 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c6c:	4b03      	ldr	r3, [pc, #12]	@ (8001c7c <HAL_RCC_GetHCLKFreq+0x14>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	20000000 	.word	0x20000000

08001c80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c84:	f7ff fff0 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	4b06      	ldr	r3, [pc, #24]	@ (8001ca4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	0a1b      	lsrs	r3, r3, #8
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	4904      	ldr	r1, [pc, #16]	@ (8001ca8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c96:	5ccb      	ldrb	r3, [r1, r3]
 8001c98:	f003 031f 	and.w	r3, r3, #31
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	08003f64 	.word	0x08003f64

08001cac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cb0:	f7ff ffda 	bl	8001c68 <HAL_RCC_GetHCLKFreq>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	4b06      	ldr	r3, [pc, #24]	@ (8001cd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	0adb      	lsrs	r3, r3, #11
 8001cbc:	f003 0307 	and.w	r3, r3, #7
 8001cc0:	4904      	ldr	r1, [pc, #16]	@ (8001cd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001cc2:	5ccb      	ldrb	r3, [r1, r3]
 8001cc4:	f003 031f 	and.w	r3, r3, #31
 8001cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	08003f64 	.word	0x08003f64

08001cd8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ce4:	4b2a      	ldr	r3, [pc, #168]	@ (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001cf0:	f7ff f9ee 	bl	80010d0 <HAL_PWREx_GetVoltageRange>
 8001cf4:	6178      	str	r0, [r7, #20]
 8001cf6:	e014      	b.n	8001d22 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cf8:	4b25      	ldr	r3, [pc, #148]	@ (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfc:	4a24      	ldr	r2, [pc, #144]	@ (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001cfe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d02:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d04:	4b22      	ldr	r3, [pc, #136]	@ (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d0c:	60fb      	str	r3, [r7, #12]
 8001d0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d10:	f7ff f9de 	bl	80010d0 <HAL_PWREx_GetVoltageRange>
 8001d14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001d90 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d20:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d28:	d10b      	bne.n	8001d42 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2b80      	cmp	r3, #128	@ 0x80
 8001d2e:	d919      	bls.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d34:	d902      	bls.n	8001d3c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d36:	2302      	movs	r3, #2
 8001d38:	613b      	str	r3, [r7, #16]
 8001d3a:	e013      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	613b      	str	r3, [r7, #16]
 8001d40:	e010      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2b80      	cmp	r3, #128	@ 0x80
 8001d46:	d902      	bls.n	8001d4e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d48:	2303      	movs	r3, #3
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	e00a      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b80      	cmp	r3, #128	@ 0x80
 8001d52:	d102      	bne.n	8001d5a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d54:	2302      	movs	r3, #2
 8001d56:	613b      	str	r3, [r7, #16]
 8001d58:	e004      	b.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b70      	cmp	r3, #112	@ 0x70
 8001d5e:	d101      	bne.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d60:	2301      	movs	r3, #1
 8001d62:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d64:	4b0b      	ldr	r3, [pc, #44]	@ (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f023 0207 	bic.w	r2, r3, #7
 8001d6c:	4909      	ldr	r1, [pc, #36]	@ (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d74:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	693a      	ldr	r2, [r7, #16]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d001      	beq.n	8001d86 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40022000 	.word	0x40022000

08001d98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b086      	sub	sp, #24
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001da0:	2300      	movs	r3, #0
 8001da2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001da4:	2300      	movs	r3, #0
 8001da6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d041      	beq.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001db8:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dbc:	d02a      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001dbe:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dc2:	d824      	bhi.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dc8:	d008      	beq.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001dca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001dce:	d81e      	bhi.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d00a      	beq.n	8001dea <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dd4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001dda:	e018      	b.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ddc:	4b86      	ldr	r3, [pc, #536]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4a85      	ldr	r2, [pc, #532]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001de8:	e015      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	3304      	adds	r3, #4
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f000 fabb 	bl	800236c <RCCEx_PLLSAI1_Config>
 8001df6:	4603      	mov	r3, r0
 8001df8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001dfa:	e00c      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	3320      	adds	r3, #32
 8001e00:	2100      	movs	r1, #0
 8001e02:	4618      	mov	r0, r3
 8001e04:	f000 fba6 	bl	8002554 <RCCEx_PLLSAI2_Config>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e0c:	e003      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	74fb      	strb	r3, [r7, #19]
      break;
 8001e12:	e000      	b.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e14:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e16:	7cfb      	ldrb	r3, [r7, #19]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d10b      	bne.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e1c:	4b76      	ldr	r3, [pc, #472]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e22:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e2a:	4973      	ldr	r1, [pc, #460]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e32:	e001      	b.n	8001e38 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e34:	7cfb      	ldrb	r3, [r7, #19]
 8001e36:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d041      	beq.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e4c:	d02a      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e52:	d824      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e54:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e58:	d008      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e5e:	d81e      	bhi.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d00a      	beq.n	8001e7a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e68:	d010      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e6a:	e018      	b.n	8001e9e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e6c:	4b62      	ldr	r3, [pc, #392]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	4a61      	ldr	r2, [pc, #388]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e76:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e78:	e015      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2100      	movs	r1, #0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f000 fa73 	bl	800236c <RCCEx_PLLSAI1_Config>
 8001e86:	4603      	mov	r3, r0
 8001e88:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e8a:	e00c      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3320      	adds	r3, #32
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 fb5e 	bl	8002554 <RCCEx_PLLSAI2_Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001e9c:	e003      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	74fb      	strb	r3, [r7, #19]
      break;
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ea4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea6:	7cfb      	ldrb	r3, [r7, #19]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d10b      	bne.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001eac:	4b52      	ldr	r3, [pc, #328]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eb2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001eba:	494f      	ldr	r1, [pc, #316]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001ec2:	e001      	b.n	8001ec8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec4:	7cfb      	ldrb	r3, [r7, #19]
 8001ec6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	f000 80a0 	beq.w	8002016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001eda:	4b47      	ldr	r3, [pc, #284]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001edc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e000      	b.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001eea:	2300      	movs	r3, #0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ef0:	4b41      	ldr	r3, [pc, #260]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ef4:	4a40      	ldr	r2, [pc, #256]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	6593      	str	r3, [r2, #88]	@ 0x58
 8001efc:	4b3e      	ldr	r3, [pc, #248]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001efe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f04:	60bb      	str	r3, [r7, #8]
 8001f06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3a      	ldr	r2, [pc, #232]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f16:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f18:	f7fe fd7c 	bl	8000a14 <HAL_GetTick>
 8001f1c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f1e:	e009      	b.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f20:	f7fe fd78 	bl	8000a14 <HAL_GetTick>
 8001f24:	4602      	mov	r2, r0
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d902      	bls.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f2e:	2303      	movs	r3, #3
 8001f30:	74fb      	strb	r3, [r7, #19]
        break;
 8001f32:	e005      	b.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f34:	4b31      	ldr	r3, [pc, #196]	@ (8001ffc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0ef      	beq.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f40:	7cfb      	ldrb	r3, [r7, #19]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d15c      	bne.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f50:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d01f      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d019      	beq.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f64:	4b24      	ldr	r3, [pc, #144]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f70:	4b21      	ldr	r3, [pc, #132]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f76:	4a20      	ldr	r2, [pc, #128]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f80:	4b1d      	ldr	r3, [pc, #116]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f86:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f88:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f90:	4a19      	ldr	r2, [pc, #100]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d016      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fd37 	bl	8000a14 <HAL_GetTick>
 8001fa6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fd33 	bl	8000a14 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d902      	bls.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fbc:	2303      	movs	r3, #3
 8001fbe:	74fb      	strb	r3, [r7, #19]
            break;
 8001fc0:	e006      	b.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d0ec      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001fd0:	7cfb      	ldrb	r3, [r7, #19]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d10c      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd6:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fdc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001fe6:	4904      	ldr	r1, [pc, #16]	@ (8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001fee:	e009      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	74bb      	strb	r3, [r7, #18]
 8001ff4:	e006      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002000:	7cfb      	ldrb	r3, [r7, #19]
 8002002:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002004:	7c7b      	ldrb	r3, [r7, #17]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b9e      	ldr	r3, [pc, #632]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800200e:	4a9d      	ldr	r2, [pc, #628]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002010:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002014:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d00a      	beq.n	8002038 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002022:	4b98      	ldr	r3, [pc, #608]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002028:	f023 0203 	bic.w	r2, r3, #3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002030:	4994      	ldr	r1, [pc, #592]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002032:	4313      	orrs	r3, r2
 8002034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0302 	and.w	r3, r3, #2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d00a      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002044:	4b8f      	ldr	r3, [pc, #572]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800204a:	f023 020c 	bic.w	r2, r3, #12
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002052:	498c      	ldr	r1, [pc, #560]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002054:	4313      	orrs	r3, r2
 8002056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00a      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002066:	4b87      	ldr	r3, [pc, #540]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800206c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002074:	4983      	ldr	r1, [pc, #524]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0308 	and.w	r3, r3, #8
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00a      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002088:	4b7e      	ldr	r3, [pc, #504]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002096:	497b      	ldr	r1, [pc, #492]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0310 	and.w	r3, r3, #16
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d00a      	beq.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020aa:	4b76      	ldr	r3, [pc, #472]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020b8:	4972      	ldr	r1, [pc, #456]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0320 	and.w	r3, r3, #32
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d00a      	beq.n	80020e2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020cc:	4b6d      	ldr	r3, [pc, #436]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020da:	496a      	ldr	r1, [pc, #424]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020dc:	4313      	orrs	r3, r2
 80020de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d00a      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80020ee:	4b65      	ldr	r3, [pc, #404]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020f4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fc:	4961      	ldr	r1, [pc, #388]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002110:	4b5c      	ldr	r3, [pc, #368]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002116:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211e:	4959      	ldr	r1, [pc, #356]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002132:	4b54      	ldr	r3, [pc, #336]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002134:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002138:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002140:	4950      	ldr	r1, [pc, #320]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002142:	4313      	orrs	r3, r2
 8002144:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d00a      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002154:	4b4b      	ldr	r3, [pc, #300]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002156:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002162:	4948      	ldr	r1, [pc, #288]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002164:	4313      	orrs	r3, r2
 8002166:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d00a      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002176:	4b43      	ldr	r3, [pc, #268]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002178:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800217c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002184:	493f      	ldr	r1, [pc, #252]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	4313      	orrs	r3, r2
 8002188:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d028      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002198:	4b3a      	ldr	r3, [pc, #232]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800219e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021a6:	4937      	ldr	r1, [pc, #220]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021b6:	d106      	bne.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021b8:	4b32      	ldr	r3, [pc, #200]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4a31      	ldr	r2, [pc, #196]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021c2:	60d3      	str	r3, [r2, #12]
 80021c4:	e011      	b.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021ce:	d10c      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3304      	adds	r3, #4
 80021d4:	2101      	movs	r1, #1
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 f8c8 	bl	800236c <RCCEx_PLLSAI1_Config>
 80021dc:	4603      	mov	r3, r0
 80021de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80021e0:	7cfb      	ldrb	r3, [r7, #19]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d001      	beq.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80021e6:	7cfb      	ldrb	r3, [r7, #19]
 80021e8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d028      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80021f6:	4b23      	ldr	r3, [pc, #140]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021fc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002204:	491f      	ldr	r1, [pc, #124]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002206:	4313      	orrs	r3, r2
 8002208:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002210:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002214:	d106      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002216:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	4a1a      	ldr	r2, [pc, #104]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800221c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002220:	60d3      	str	r3, [r2, #12]
 8002222:	e011      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002228:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800222c:	d10c      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	3304      	adds	r3, #4
 8002232:	2101      	movs	r1, #1
 8002234:	4618      	mov	r0, r3
 8002236:	f000 f899 	bl	800236c <RCCEx_PLLSAI1_Config>
 800223a:	4603      	mov	r3, r0
 800223c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800223e:	7cfb      	ldrb	r3, [r7, #19]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d02b      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002254:	4b0b      	ldr	r3, [pc, #44]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002256:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800225a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002262:	4908      	ldr	r1, [pc, #32]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800226e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002272:	d109      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002274:	4b03      	ldr	r3, [pc, #12]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4a02      	ldr	r2, [pc, #8]	@ (8002284 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800227e:	60d3      	str	r3, [r2, #12]
 8002280:	e014      	b.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002282:	bf00      	nop
 8002284:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002290:	d10c      	bne.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2101      	movs	r1, #1
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f867 	bl	800236c <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d02f      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022b8:	4b2b      	ldr	r3, [pc, #172]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022be:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022c6:	4928      	ldr	r1, [pc, #160]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022d2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022d6:	d10d      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	3304      	adds	r3, #4
 80022dc:	2102      	movs	r1, #2
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 f844 	bl	800236c <RCCEx_PLLSAI1_Config>
 80022e4:	4603      	mov	r3, r0
 80022e6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d014      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80022ee:	7cfb      	ldrb	r3, [r7, #19]
 80022f0:	74bb      	strb	r3, [r7, #18]
 80022f2:	e011      	b.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80022fc:	d10c      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	3320      	adds	r3, #32
 8002302:	2102      	movs	r1, #2
 8002304:	4618      	mov	r0, r3
 8002306:	f000 f925 	bl	8002554 <RCCEx_PLLSAI2_Config>
 800230a:	4603      	mov	r3, r0
 800230c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d001      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00a      	beq.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002324:	4b10      	ldr	r3, [pc, #64]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800232a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002332:	490d      	ldr	r1, [pc, #52]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002334:	4313      	orrs	r3, r2
 8002336:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00b      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002346:	4b08      	ldr	r3, [pc, #32]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002356:	4904      	ldr	r1, [pc, #16]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800235e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40021000 	.word	0x40021000

0800236c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002376:	2300      	movs	r3, #0
 8002378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800237a:	4b75      	ldr	r3, [pc, #468]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	f003 0303 	and.w	r3, r3, #3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d018      	beq.n	80023b8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002386:	4b72      	ldr	r3, [pc, #456]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	f003 0203 	and.w	r2, r3, #3
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	429a      	cmp	r2, r3
 8002394:	d10d      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
       ||
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800239e:	4b6c      	ldr	r3, [pc, #432]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	091b      	lsrs	r3, r3, #4
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	1c5a      	adds	r2, r3, #1
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	685b      	ldr	r3, [r3, #4]
       ||
 80023ae:	429a      	cmp	r2, r3
 80023b0:	d047      	beq.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	73fb      	strb	r3, [r7, #15]
 80023b6:	e044      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2b03      	cmp	r3, #3
 80023be:	d018      	beq.n	80023f2 <RCCEx_PLLSAI1_Config+0x86>
 80023c0:	2b03      	cmp	r3, #3
 80023c2:	d825      	bhi.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d002      	beq.n	80023ce <RCCEx_PLLSAI1_Config+0x62>
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d009      	beq.n	80023e0 <RCCEx_PLLSAI1_Config+0x74>
 80023cc:	e020      	b.n	8002410 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023ce:	4b60      	ldr	r3, [pc, #384]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d11d      	bne.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023de:	e01a      	b.n	8002416 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e0:	4b5b      	ldr	r3, [pc, #364]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d116      	bne.n	800241a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f0:	e013      	b.n	800241a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023f2:	4b57      	ldr	r3, [pc, #348]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10f      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80023fe:	4b54      	ldr	r3, [pc, #336]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002406:	2b00      	cmp	r3, #0
 8002408:	d109      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800240e:	e006      	b.n	800241e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	73fb      	strb	r3, [r7, #15]
      break;
 8002414:	e004      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002416:	bf00      	nop
 8002418:	e002      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241a:	bf00      	nop
 800241c:	e000      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002420:	7bfb      	ldrb	r3, [r7, #15]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10d      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002426:	4b4a      	ldr	r3, [pc, #296]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	430b      	orrs	r3, r1
 800243c:	4944      	ldr	r1, [pc, #272]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800243e:	4313      	orrs	r3, r2
 8002440:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002442:	7bfb      	ldrb	r3, [r7, #15]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d17d      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002448:	4b41      	ldr	r3, [pc, #260]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a40      	ldr	r2, [pc, #256]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800244e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002452:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002454:	f7fe fade 	bl	8000a14 <HAL_GetTick>
 8002458:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800245a:	e009      	b.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800245c:	f7fe fada 	bl	8000a14 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d902      	bls.n	8002470 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	73fb      	strb	r3, [r7, #15]
        break;
 800246e:	e005      	b.n	800247c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002470:	4b37      	ldr	r3, [pc, #220]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d1ef      	bne.n	800245c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800247c:	7bfb      	ldrb	r3, [r7, #15]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d160      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d111      	bne.n	80024ac <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002488:	4b31      	ldr	r3, [pc, #196]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002490:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	6892      	ldr	r2, [r2, #8]
 8002498:	0211      	lsls	r1, r2, #8
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	68d2      	ldr	r2, [r2, #12]
 800249e:	0912      	lsrs	r2, r2, #4
 80024a0:	0452      	lsls	r2, r2, #17
 80024a2:	430a      	orrs	r2, r1
 80024a4:	492a      	ldr	r1, [pc, #168]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	610b      	str	r3, [r1, #16]
 80024aa:	e027      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d112      	bne.n	80024d8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b2:	4b27      	ldr	r3, [pc, #156]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80024ba:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	6892      	ldr	r2, [r2, #8]
 80024c2:	0211      	lsls	r1, r2, #8
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6912      	ldr	r2, [r2, #16]
 80024c8:	0852      	lsrs	r2, r2, #1
 80024ca:	3a01      	subs	r2, #1
 80024cc:	0552      	lsls	r2, r2, #21
 80024ce:	430a      	orrs	r2, r1
 80024d0:	491f      	ldr	r1, [pc, #124]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	610b      	str	r3, [r1, #16]
 80024d6:	e011      	b.n	80024fc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024d8:	4b1d      	ldr	r3, [pc, #116]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024da:	691b      	ldr	r3, [r3, #16]
 80024dc:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80024e0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6892      	ldr	r2, [r2, #8]
 80024e8:	0211      	lsls	r1, r2, #8
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6952      	ldr	r2, [r2, #20]
 80024ee:	0852      	lsrs	r2, r2, #1
 80024f0:	3a01      	subs	r2, #1
 80024f2:	0652      	lsls	r2, r2, #25
 80024f4:	430a      	orrs	r2, r1
 80024f6:	4916      	ldr	r1, [pc, #88]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80024fc:	4b14      	ldr	r3, [pc, #80]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a13      	ldr	r2, [pc, #76]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002506:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe fa84 	bl	8000a14 <HAL_GetTick>
 800250c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800250e:	e009      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002510:	f7fe fa80 	bl	8000a14 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d902      	bls.n	8002524 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	73fb      	strb	r3, [r7, #15]
          break;
 8002522:	e005      	b.n	8002530 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002524:	4b0a      	ldr	r3, [pc, #40]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0ef      	beq.n	8002510 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002536:	4b06      	ldr	r3, [pc, #24]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002538:	691a      	ldr	r2, [r3, #16]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	699b      	ldr	r3, [r3, #24]
 800253e:	4904      	ldr	r1, [pc, #16]	@ (8002550 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002540:	4313      	orrs	r3, r2
 8002542:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
}
 8002546:	4618      	mov	r0, r3
 8002548:	3710      	adds	r7, #16
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000

08002554 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002562:	4b6a      	ldr	r3, [pc, #424]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	f003 0303 	and.w	r3, r3, #3
 800256a:	2b00      	cmp	r3, #0
 800256c:	d018      	beq.n	80025a0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800256e:	4b67      	ldr	r3, [pc, #412]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0203 	and.w	r2, r3, #3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	429a      	cmp	r2, r3
 800257c:	d10d      	bne.n	800259a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
       ||
 8002582:	2b00      	cmp	r3, #0
 8002584:	d009      	beq.n	800259a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002586:	4b61      	ldr	r3, [pc, #388]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002588:	68db      	ldr	r3, [r3, #12]
 800258a:	091b      	lsrs	r3, r3, #4
 800258c:	f003 0307 	and.w	r3, r3, #7
 8002590:	1c5a      	adds	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685b      	ldr	r3, [r3, #4]
       ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d047      	beq.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
 800259e:	e044      	b.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2b03      	cmp	r3, #3
 80025a6:	d018      	beq.n	80025da <RCCEx_PLLSAI2_Config+0x86>
 80025a8:	2b03      	cmp	r3, #3
 80025aa:	d825      	bhi.n	80025f8 <RCCEx_PLLSAI2_Config+0xa4>
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d002      	beq.n	80025b6 <RCCEx_PLLSAI2_Config+0x62>
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d009      	beq.n	80025c8 <RCCEx_PLLSAI2_Config+0x74>
 80025b4:	e020      	b.n	80025f8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025b6:	4b55      	ldr	r3, [pc, #340]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d11d      	bne.n	80025fe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025c6:	e01a      	b.n	80025fe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025c8:	4b50      	ldr	r3, [pc, #320]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d116      	bne.n	8002602 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025d8:	e013      	b.n	8002602 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80025da:	4b4c      	ldr	r3, [pc, #304]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10f      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80025e6:	4b49      	ldr	r3, [pc, #292]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d109      	bne.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80025f6:	e006      	b.n	8002606 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
      break;
 80025fc:	e004      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80025fe:	bf00      	nop
 8002600:	e002      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002602:	bf00      	nop
 8002604:	e000      	b.n	8002608 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002606:	bf00      	nop
    }

    if(status == HAL_OK)
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10d      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800260e:	4b3f      	ldr	r3, [pc, #252]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6819      	ldr	r1, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	3b01      	subs	r3, #1
 8002620:	011b      	lsls	r3, r3, #4
 8002622:	430b      	orrs	r3, r1
 8002624:	4939      	ldr	r1, [pc, #228]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002626:	4313      	orrs	r3, r2
 8002628:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d167      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002630:	4b36      	ldr	r3, [pc, #216]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a35      	ldr	r2, [pc, #212]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800263a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800263c:	f7fe f9ea 	bl	8000a14 <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002642:	e009      	b.n	8002658 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002644:	f7fe f9e6 	bl	8000a14 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	73fb      	strb	r3, [r7, #15]
        break;
 8002656:	e005      	b.n	8002664 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002658:	4b2c      	ldr	r3, [pc, #176]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ef      	bne.n	8002644 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d14a      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d111      	bne.n	8002694 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002670:	4b26      	ldr	r3, [pc, #152]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002672:	695b      	ldr	r3, [r3, #20]
 8002674:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002678:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6892      	ldr	r2, [r2, #8]
 8002680:	0211      	lsls	r1, r2, #8
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	68d2      	ldr	r2, [r2, #12]
 8002686:	0912      	lsrs	r2, r2, #4
 8002688:	0452      	lsls	r2, r2, #17
 800268a:	430a      	orrs	r2, r1
 800268c:	491f      	ldr	r1, [pc, #124]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 800268e:	4313      	orrs	r3, r2
 8002690:	614b      	str	r3, [r1, #20]
 8002692:	e011      	b.n	80026b8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002694:	4b1d      	ldr	r3, [pc, #116]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002696:	695b      	ldr	r3, [r3, #20]
 8002698:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800269c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	6892      	ldr	r2, [r2, #8]
 80026a4:	0211      	lsls	r1, r2, #8
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6912      	ldr	r2, [r2, #16]
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0652      	lsls	r2, r2, #25
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4916      	ldr	r1, [pc, #88]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026b8:	4b14      	ldr	r3, [pc, #80]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a13      	ldr	r2, [pc, #76]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026c2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c4:	f7fe f9a6 	bl	8000a14 <HAL_GetTick>
 80026c8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026ca:	e009      	b.n	80026e0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026cc:	f7fe f9a2 	bl	8000a14 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d902      	bls.n	80026e0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80026da:	2303      	movs	r3, #3
 80026dc:	73fb      	strb	r3, [r7, #15]
          break;
 80026de:	e005      	b.n	80026ec <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026e0:	4b0a      	ldr	r3, [pc, #40]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d0ef      	beq.n	80026cc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80026ec:	7bfb      	ldrb	r3, [r7, #15]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d106      	bne.n	8002700 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80026f2:	4b06      	ldr	r3, [pc, #24]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026f4:	695a      	ldr	r2, [r3, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4904      	ldr	r1, [pc, #16]	@ (800270c <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002700:	7bfb      	ldrb	r3, [r7, #15]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40021000 	.word	0x40021000

08002710 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e040      	b.n	80027a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d106      	bne.n	8002738 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7fe f824 	bl	8000780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2224      	movs	r2, #36	@ 0x24
 800273c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	681a      	ldr	r2, [r3, #0]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0201 	bic.w	r2, r2, #1
 800274c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 fedc 	bl	8003514 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f000 fc21 	bl	8002fa4 <UART_SetConfig>
 8002762:	4603      	mov	r3, r0
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e01b      	b.n	80027a4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800277a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800278a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f042 0201 	orr.w	r2, r2, #1
 800279a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800279c:	6878      	ldr	r0, [r7, #4]
 800279e:	f000 ff5b 	bl	8003658 <UART_CheckIdleState>
 80027a2:	4603      	mov	r3, r0
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	@ 0x28
 80027b0:	af02      	add	r7, sp, #8
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	603b      	str	r3, [r7, #0]
 80027b8:	4613      	mov	r3, r2
 80027ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027c0:	2b20      	cmp	r3, #32
 80027c2:	d177      	bne.n	80028b4 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d002      	beq.n	80027d0 <HAL_UART_Transmit+0x24>
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d101      	bne.n	80027d4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80027d0:	2301      	movs	r3, #1
 80027d2:	e070      	b.n	80028b6 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	2221      	movs	r2, #33	@ 0x21
 80027e0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027e2:	f7fe f917 	bl	8000a14 <HAL_GetTick>
 80027e6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	88fa      	ldrh	r2, [r7, #6]
 80027ec:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	88fa      	ldrh	r2, [r7, #6]
 80027f4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002800:	d108      	bne.n	8002814 <HAL_UART_Transmit+0x68>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d104      	bne.n	8002814 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800280a:	2300      	movs	r3, #0
 800280c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	61bb      	str	r3, [r7, #24]
 8002812:	e003      	b.n	800281c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002818:	2300      	movs	r3, #0
 800281a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800281c:	e02f      	b.n	800287e <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	9300      	str	r3, [sp, #0]
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	2200      	movs	r2, #0
 8002826:	2180      	movs	r1, #128	@ 0x80
 8002828:	68f8      	ldr	r0, [r7, #12]
 800282a:	f000 ffbd 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d004      	beq.n	800283e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e03b      	b.n	80028b6 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d10b      	bne.n	800285c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002844:	69bb      	ldr	r3, [r7, #24]
 8002846:	881a      	ldrh	r2, [r3, #0]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002850:	b292      	uxth	r2, r2
 8002852:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	3302      	adds	r3, #2
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	e007      	b.n	800286c <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	781a      	ldrb	r2, [r3, #0]
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	3301      	adds	r3, #1
 800286a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002872:	b29b      	uxth	r3, r3
 8002874:	3b01      	subs	r3, #1
 8002876:	b29a      	uxth	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002884:	b29b      	uxth	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1c9      	bne.n	800281e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2200      	movs	r2, #0
 8002892:	2140      	movs	r1, #64	@ 0x40
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f000 ff87 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d004      	beq.n	80028aa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2220      	movs	r2, #32
 80028a4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e005      	b.n	80028b6 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2220      	movs	r2, #32
 80028ae:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	e000      	b.n	80028b6 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 80028b4:	2302      	movs	r3, #2
  }
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3720      	adds	r7, #32
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
	...

080028c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	@ 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	60f8      	str	r0, [r7, #12]
 80028c8:	60b9      	str	r1, [r7, #8]
 80028ca:	4613      	mov	r3, r2
 80028cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80028d4:	2b20      	cmp	r3, #32
 80028d6:	d137      	bne.n	8002948 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d002      	beq.n	80028e4 <HAL_UART_Receive_IT+0x24>
 80028de:	88fb      	ldrh	r3, [r7, #6]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e030      	b.n	800294a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a18      	ldr	r2, [pc, #96]	@ (8002954 <HAL_UART_Receive_IT+0x94>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d01f      	beq.n	8002938 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d018      	beq.n	8002938 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	613b      	str	r3, [r7, #16]
   return(result);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800291a:	627b      	str	r3, [r7, #36]	@ 0x24
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	461a      	mov	r2, r3
 8002922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002924:	623b      	str	r3, [r7, #32]
 8002926:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002928:	69f9      	ldr	r1, [r7, #28]
 800292a:	6a3a      	ldr	r2, [r7, #32]
 800292c:	e841 2300 	strex	r3, r2, [r1]
 8002930:	61bb      	str	r3, [r7, #24]
   return(result);
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e6      	bne.n	8002906 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002938:	88fb      	ldrh	r3, [r7, #6]
 800293a:	461a      	mov	r2, r3
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	68f8      	ldr	r0, [r7, #12]
 8002940:	f000 ffa0 	bl	8003884 <UART_Start_Receive_IT>
 8002944:	4603      	mov	r3, r0
 8002946:	e000      	b.n	800294a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002948:	2302      	movs	r3, #2
  }
}
 800294a:	4618      	mov	r0, r3
 800294c:	3728      	adds	r7, #40	@ 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40008000 	.word	0x40008000

08002958 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b0ba      	sub	sp, #232	@ 0xe8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800297e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002982:	f640 030f 	movw	r3, #2063	@ 0x80f
 8002986:	4013      	ands	r3, r2
 8002988:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800298c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002990:	2b00      	cmp	r3, #0
 8002992:	d115      	bne.n	80029c0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00f      	beq.n	80029c0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d009      	beq.n	80029c0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 82ca 	beq.w	8002f4a <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	4798      	blx	r3
      }
      return;
 80029be:	e2c4      	b.n	8002f4a <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80029c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 8117 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80029ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d106      	bne.n	80029e4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80029d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80029da:	4b85      	ldr	r3, [pc, #532]	@ (8002bf0 <HAL_UART_IRQHandler+0x298>)
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	f000 810a 	beq.w	8002bf8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80029e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029e8:	f003 0301 	and.w	r3, r3, #1
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d011      	beq.n	8002a14 <HAL_UART_IRQHandler+0xbc>
 80029f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d011      	beq.n	8002a44 <HAL_UART_IRQHandler+0xec>
 8002a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d00b      	beq.n	8002a44 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2202      	movs	r2, #2
 8002a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a3a:	f043 0204 	orr.w	r2, r3, #4
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a48:	f003 0304 	and.w	r3, r3, #4
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d011      	beq.n	8002a74 <HAL_UART_IRQHandler+0x11c>
 8002a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a54:	f003 0301 	and.w	r3, r3, #1
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00b      	beq.n	8002a74 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2204      	movs	r2, #4
 8002a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002a6a:	f043 0202 	orr.w	r2, r3, #2
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a78:	f003 0308 	and.w	r3, r3, #8
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d017      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d105      	bne.n	8002a98 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a90:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002aa6:	f043 0208 	orr.w	r2, r3, #8
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d012      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x18a>
 8002abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ac0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ad8:	f043 0220 	orr.w	r2, r3, #32
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	f000 8230 	beq.w	8002f4e <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00d      	beq.n	8002b16 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d007      	beq.n	8002b16 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d003      	beq.n	8002b16 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002b1c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b2a:	2b40      	cmp	r3, #64	@ 0x40
 8002b2c:	d005      	beq.n	8002b3a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002b32:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d04f      	beq.n	8002bda <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	f000 ff68 	bl	8003a10 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b4a:	2b40      	cmp	r3, #64	@ 0x40
 8002b4c:	d141      	bne.n	8002bd2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	3308      	adds	r3, #8
 8002b54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b58:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b5c:	e853 3f00 	ldrex	r3, [r3]
 8002b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b68:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	3308      	adds	r3, #8
 8002b76:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b7a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b7e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b86:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b8a:	e841 2300 	strex	r3, r2, [r1]
 8002b8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1d9      	bne.n	8002b4e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d013      	beq.n	8002bca <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ba6:	4a13      	ldr	r2, [pc, #76]	@ (8002bf4 <HAL_UART_IRQHandler+0x29c>)
 8002ba8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7fe f88b 	bl	8000cca <HAL_DMA_Abort_IT>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d017      	beq.n	8002bea <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002bbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002bc4:	4610      	mov	r0, r2
 8002bc6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bc8:	e00f      	b.n	8002bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 f9d4 	bl	8002f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	e00b      	b.n	8002bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f000 f9d0 	bl	8002f78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd8:	e007      	b.n	8002bea <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 f9cc 	bl	8002f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8002be8:	e1b1      	b.n	8002f4e <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bea:	bf00      	nop
    return;
 8002bec:	e1af      	b.n	8002f4e <HAL_UART_IRQHandler+0x5f6>
 8002bee:	bf00      	nop
 8002bf0:	04000120 	.word	0x04000120
 8002bf4:	08003ad9 	.word	0x08003ad9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	f040 816a 	bne.w	8002ed6 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002c06:	f003 0310 	and.w	r3, r3, #16
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f000 8163 	beq.w	8002ed6 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002c14:	f003 0310 	and.w	r3, r3, #16
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 815c 	beq.w	8002ed6 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2210      	movs	r2, #16
 8002c24:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c30:	2b40      	cmp	r3, #64	@ 0x40
 8002c32:	f040 80d4 	bne.w	8002dde <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c42:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 80ad 	beq.w	8002da6 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002c52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c56:	429a      	cmp	r2, r3
 8002c58:	f080 80a5 	bcs.w	8002da6 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c62:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0320 	and.w	r3, r3, #32
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f040 8086 	bne.w	8002d84 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c84:	e853 3f00 	ldrex	r3, [r3]
 8002c88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002ca2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002ca6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002caa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002cae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002cb2:	e841 2300 	strex	r3, r2, [r1]
 8002cb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002cba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d1da      	bne.n	8002c78 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	3308      	adds	r3, #8
 8002cc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002ccc:	e853 3f00 	ldrex	r3, [r3]
 8002cd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002cd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002cd4:	f023 0301 	bic.w	r3, r3, #1
 8002cd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	3308      	adds	r3, #8
 8002ce2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002ce6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002cea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002cee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002cf2:	e841 2300 	strex	r3, r2, [r1]
 8002cf6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002cf8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d1e1      	bne.n	8002cc2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	3308      	adds	r3, #8
 8002d04:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d06:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002d08:	e853 3f00 	ldrex	r3, [r3]
 8002d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002d0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002d10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002d14:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3308      	adds	r3, #8
 8002d1e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002d22:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d24:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d26:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002d28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002d2a:	e841 2300 	strex	r3, r2, [r1]
 8002d2e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002d30:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e3      	bne.n	8002cfe <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2220      	movs	r2, #32
 8002d3a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002d4c:	e853 3f00 	ldrex	r3, [r3]
 8002d50:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002d52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d54:	f023 0310 	bic.w	r3, r3, #16
 8002d58:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	461a      	mov	r2, r3
 8002d62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d66:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d68:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d6a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d6c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d6e:	e841 2300 	strex	r3, r2, [r1]
 8002d72:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d1e4      	bne.n	8002d44 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd ff65 	bl	8000c4e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2202      	movs	r2, #2
 8002d88:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f8f4 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002da4:	e0d5      	b.n	8002f52 <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002dac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002db0:	429a      	cmp	r2, r3
 8002db2:	f040 80ce 	bne.w	8002f52 <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	2b20      	cmp	r3, #32
 8002dc4:	f040 80c5 	bne.w	8002f52 <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2202      	movs	r2, #2
 8002dcc:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f8d8 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
      return;
 8002ddc:	e0b9      	b.n	8002f52 <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 80ab 	beq.w	8002f56 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 8002e00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	f000 80a6 	beq.w	8002f56 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e12:	e853 3f00 	ldrex	r3, [r3]
 8002e16:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e1e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	461a      	mov	r2, r3
 8002e28:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e2c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e2e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e30:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002e32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e34:	e841 2300 	strex	r3, r2, [r1]
 8002e38:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1e4      	bne.n	8002e0a <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	3308      	adds	r3, #8
 8002e46:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e4a:	e853 3f00 	ldrex	r3, [r3]
 8002e4e:	623b      	str	r3, [r7, #32]
   return(result);
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	f023 0301 	bic.w	r3, r3, #1
 8002e56:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	3308      	adds	r3, #8
 8002e60:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e64:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e66:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e68:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e6c:	e841 2300 	strex	r3, r2, [r1]
 8002e70:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d1e3      	bne.n	8002e40 <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2220      	movs	r2, #32
 8002e7c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	e853 3f00 	ldrex	r3, [r3]
 8002e98:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	f023 0310 	bic.w	r3, r3, #16
 8002ea0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002eae:	61fb      	str	r3, [r7, #28]
 8002eb0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb2:	69b9      	ldr	r1, [r7, #24]
 8002eb4:	69fa      	ldr	r2, [r7, #28]
 8002eb6:	e841 2300 	strex	r3, r2, [r1]
 8002eba:	617b      	str	r3, [r7, #20]
   return(result);
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d1e4      	bne.n	8002e8c <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ec8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002ecc:	4619      	mov	r1, r3
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f85c 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ed4:	e03f      	b.n	8002f56 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00e      	beq.n	8002f00 <HAL_UART_IRQHandler+0x5a8>
 8002ee2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d008      	beq.n	8002f00 <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002ef6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 ffe9 	bl	8003ed0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002efe:	e02d      	b.n	8002f5c <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00e      	beq.n	8002f2a <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d008      	beq.n	8002f2a <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d01c      	beq.n	8002f5a <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	4798      	blx	r3
    }
    return;
 8002f28:	e017      	b.n	8002f5a <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d012      	beq.n	8002f5c <HAL_UART_IRQHandler+0x604>
 8002f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00c      	beq.n	8002f5c <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fdde 	bl	8003b04 <UART_EndTransmit_IT>
    return;
 8002f48:	e008      	b.n	8002f5c <HAL_UART_IRQHandler+0x604>
      return;
 8002f4a:	bf00      	nop
 8002f4c:	e006      	b.n	8002f5c <HAL_UART_IRQHandler+0x604>
    return;
 8002f4e:	bf00      	nop
 8002f50:	e004      	b.n	8002f5c <HAL_UART_IRQHandler+0x604>
      return;
 8002f52:	bf00      	nop
 8002f54:	e002      	b.n	8002f5c <HAL_UART_IRQHandler+0x604>
      return;
 8002f56:	bf00      	nop
 8002f58:	e000      	b.n	8002f5c <HAL_UART_IRQHandler+0x604>
    return;
 8002f5a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f5c:	37e8      	adds	r7, #232	@ 0xe8
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop

08002f64 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr

08002f78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f80:	bf00      	nop
 8002f82:	370c      	adds	r7, #12
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f98:	bf00      	nop
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa8:	b08a      	sub	sp, #40	@ 0x28
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	431a      	orrs	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	695b      	ldr	r3, [r3, #20]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	4ba4      	ldr	r3, [pc, #656]	@ (8003264 <UART_SetConfig+0x2c0>)
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	6812      	ldr	r2, [r2, #0]
 8002fda:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002fdc:	430b      	orrs	r3, r1
 8002fde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a99      	ldr	r2, [pc, #612]	@ (8003268 <UART_SetConfig+0x2c4>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d004      	beq.n	8003010 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800300c:	4313      	orrs	r3, r2
 800300e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a90      	ldr	r2, [pc, #576]	@ (800326c <UART_SetConfig+0x2c8>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d126      	bne.n	800307c <UART_SetConfig+0xd8>
 800302e:	4b90      	ldr	r3, [pc, #576]	@ (8003270 <UART_SetConfig+0x2cc>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	f003 0303 	and.w	r3, r3, #3
 8003038:	2b03      	cmp	r3, #3
 800303a:	d81b      	bhi.n	8003074 <UART_SetConfig+0xd0>
 800303c:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0xa0>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003055 	.word	0x08003055
 8003048:	08003065 	.word	0x08003065
 800304c:	0800305d 	.word	0x0800305d
 8003050:	0800306d 	.word	0x0800306d
 8003054:	2301      	movs	r3, #1
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800305a:	e116      	b.n	800328a <UART_SetConfig+0x2e6>
 800305c:	2302      	movs	r3, #2
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003062:	e112      	b.n	800328a <UART_SetConfig+0x2e6>
 8003064:	2304      	movs	r3, #4
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800306a:	e10e      	b.n	800328a <UART_SetConfig+0x2e6>
 800306c:	2308      	movs	r3, #8
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003072:	e10a      	b.n	800328a <UART_SetConfig+0x2e6>
 8003074:	2310      	movs	r3, #16
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307a:	e106      	b.n	800328a <UART_SetConfig+0x2e6>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7c      	ldr	r2, [pc, #496]	@ (8003274 <UART_SetConfig+0x2d0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d138      	bne.n	80030f8 <UART_SetConfig+0x154>
 8003086:	4b7a      	ldr	r3, [pc, #488]	@ (8003270 <UART_SetConfig+0x2cc>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d82d      	bhi.n	80030f0 <UART_SetConfig+0x14c>
 8003094:	a201      	add	r2, pc, #4	@ (adr r2, 800309c <UART_SetConfig+0xf8>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030d1 	.word	0x080030d1
 80030a0:	080030f1 	.word	0x080030f1
 80030a4:	080030f1 	.word	0x080030f1
 80030a8:	080030f1 	.word	0x080030f1
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	080030f1 	.word	0x080030f1
 80030b4:	080030f1 	.word	0x080030f1
 80030b8:	080030f1 	.word	0x080030f1
 80030bc:	080030d9 	.word	0x080030d9
 80030c0:	080030f1 	.word	0x080030f1
 80030c4:	080030f1 	.word	0x080030f1
 80030c8:	080030f1 	.word	0x080030f1
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d6:	e0d8      	b.n	800328a <UART_SetConfig+0x2e6>
 80030d8:	2302      	movs	r3, #2
 80030da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030de:	e0d4      	b.n	800328a <UART_SetConfig+0x2e6>
 80030e0:	2304      	movs	r3, #4
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e6:	e0d0      	b.n	800328a <UART_SetConfig+0x2e6>
 80030e8:	2308      	movs	r3, #8
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ee:	e0cc      	b.n	800328a <UART_SetConfig+0x2e6>
 80030f0:	2310      	movs	r3, #16
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f6:	e0c8      	b.n	800328a <UART_SetConfig+0x2e6>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5e      	ldr	r2, [pc, #376]	@ (8003278 <UART_SetConfig+0x2d4>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d125      	bne.n	800314e <UART_SetConfig+0x1aa>
 8003102:	4b5b      	ldr	r3, [pc, #364]	@ (8003270 <UART_SetConfig+0x2cc>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003108:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800310c:	2b30      	cmp	r3, #48	@ 0x30
 800310e:	d016      	beq.n	800313e <UART_SetConfig+0x19a>
 8003110:	2b30      	cmp	r3, #48	@ 0x30
 8003112:	d818      	bhi.n	8003146 <UART_SetConfig+0x1a2>
 8003114:	2b20      	cmp	r3, #32
 8003116:	d00a      	beq.n	800312e <UART_SetConfig+0x18a>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d814      	bhi.n	8003146 <UART_SetConfig+0x1a2>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <UART_SetConfig+0x182>
 8003120:	2b10      	cmp	r3, #16
 8003122:	d008      	beq.n	8003136 <UART_SetConfig+0x192>
 8003124:	e00f      	b.n	8003146 <UART_SetConfig+0x1a2>
 8003126:	2300      	movs	r3, #0
 8003128:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312c:	e0ad      	b.n	800328a <UART_SetConfig+0x2e6>
 800312e:	2302      	movs	r3, #2
 8003130:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003134:	e0a9      	b.n	800328a <UART_SetConfig+0x2e6>
 8003136:	2304      	movs	r3, #4
 8003138:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313c:	e0a5      	b.n	800328a <UART_SetConfig+0x2e6>
 800313e:	2308      	movs	r3, #8
 8003140:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003144:	e0a1      	b.n	800328a <UART_SetConfig+0x2e6>
 8003146:	2310      	movs	r3, #16
 8003148:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800314c:	e09d      	b.n	800328a <UART_SetConfig+0x2e6>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a4a      	ldr	r2, [pc, #296]	@ (800327c <UART_SetConfig+0x2d8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d125      	bne.n	80031a4 <UART_SetConfig+0x200>
 8003158:	4b45      	ldr	r3, [pc, #276]	@ (8003270 <UART_SetConfig+0x2cc>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003162:	2bc0      	cmp	r3, #192	@ 0xc0
 8003164:	d016      	beq.n	8003194 <UART_SetConfig+0x1f0>
 8003166:	2bc0      	cmp	r3, #192	@ 0xc0
 8003168:	d818      	bhi.n	800319c <UART_SetConfig+0x1f8>
 800316a:	2b80      	cmp	r3, #128	@ 0x80
 800316c:	d00a      	beq.n	8003184 <UART_SetConfig+0x1e0>
 800316e:	2b80      	cmp	r3, #128	@ 0x80
 8003170:	d814      	bhi.n	800319c <UART_SetConfig+0x1f8>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <UART_SetConfig+0x1d8>
 8003176:	2b40      	cmp	r3, #64	@ 0x40
 8003178:	d008      	beq.n	800318c <UART_SetConfig+0x1e8>
 800317a:	e00f      	b.n	800319c <UART_SetConfig+0x1f8>
 800317c:	2300      	movs	r3, #0
 800317e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003182:	e082      	b.n	800328a <UART_SetConfig+0x2e6>
 8003184:	2302      	movs	r3, #2
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318a:	e07e      	b.n	800328a <UART_SetConfig+0x2e6>
 800318c:	2304      	movs	r3, #4
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003192:	e07a      	b.n	800328a <UART_SetConfig+0x2e6>
 8003194:	2308      	movs	r3, #8
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319a:	e076      	b.n	800328a <UART_SetConfig+0x2e6>
 800319c:	2310      	movs	r3, #16
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a2:	e072      	b.n	800328a <UART_SetConfig+0x2e6>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a35      	ldr	r2, [pc, #212]	@ (8003280 <UART_SetConfig+0x2dc>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d12a      	bne.n	8003204 <UART_SetConfig+0x260>
 80031ae:	4b30      	ldr	r3, [pc, #192]	@ (8003270 <UART_SetConfig+0x2cc>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031bc:	d01a      	beq.n	80031f4 <UART_SetConfig+0x250>
 80031be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031c2:	d81b      	bhi.n	80031fc <UART_SetConfig+0x258>
 80031c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031c8:	d00c      	beq.n	80031e4 <UART_SetConfig+0x240>
 80031ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ce:	d815      	bhi.n	80031fc <UART_SetConfig+0x258>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <UART_SetConfig+0x238>
 80031d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031d8:	d008      	beq.n	80031ec <UART_SetConfig+0x248>
 80031da:	e00f      	b.n	80031fc <UART_SetConfig+0x258>
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031e2:	e052      	b.n	800328a <UART_SetConfig+0x2e6>
 80031e4:	2302      	movs	r3, #2
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ea:	e04e      	b.n	800328a <UART_SetConfig+0x2e6>
 80031ec:	2304      	movs	r3, #4
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f2:	e04a      	b.n	800328a <UART_SetConfig+0x2e6>
 80031f4:	2308      	movs	r3, #8
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fa:	e046      	b.n	800328a <UART_SetConfig+0x2e6>
 80031fc:	2310      	movs	r3, #16
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003202:	e042      	b.n	800328a <UART_SetConfig+0x2e6>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a17      	ldr	r2, [pc, #92]	@ (8003268 <UART_SetConfig+0x2c4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d13a      	bne.n	8003284 <UART_SetConfig+0x2e0>
 800320e:	4b18      	ldr	r3, [pc, #96]	@ (8003270 <UART_SetConfig+0x2cc>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003214:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003218:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800321c:	d01a      	beq.n	8003254 <UART_SetConfig+0x2b0>
 800321e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003222:	d81b      	bhi.n	800325c <UART_SetConfig+0x2b8>
 8003224:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003228:	d00c      	beq.n	8003244 <UART_SetConfig+0x2a0>
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800322e:	d815      	bhi.n	800325c <UART_SetConfig+0x2b8>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <UART_SetConfig+0x298>
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003238:	d008      	beq.n	800324c <UART_SetConfig+0x2a8>
 800323a:	e00f      	b.n	800325c <UART_SetConfig+0x2b8>
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003242:	e022      	b.n	800328a <UART_SetConfig+0x2e6>
 8003244:	2302      	movs	r3, #2
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324a:	e01e      	b.n	800328a <UART_SetConfig+0x2e6>
 800324c:	2304      	movs	r3, #4
 800324e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003252:	e01a      	b.n	800328a <UART_SetConfig+0x2e6>
 8003254:	2308      	movs	r3, #8
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800325a:	e016      	b.n	800328a <UART_SetConfig+0x2e6>
 800325c:	2310      	movs	r3, #16
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003262:	e012      	b.n	800328a <UART_SetConfig+0x2e6>
 8003264:	efff69f3 	.word	0xefff69f3
 8003268:	40008000 	.word	0x40008000
 800326c:	40013800 	.word	0x40013800
 8003270:	40021000 	.word	0x40021000
 8003274:	40004400 	.word	0x40004400
 8003278:	40004800 	.word	0x40004800
 800327c:	40004c00 	.word	0x40004c00
 8003280:	40005000 	.word	0x40005000
 8003284:	2310      	movs	r3, #16
 8003286:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a9f      	ldr	r2, [pc, #636]	@ (800350c <UART_SetConfig+0x568>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d17a      	bne.n	800338a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003294:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003298:	2b08      	cmp	r3, #8
 800329a:	d824      	bhi.n	80032e6 <UART_SetConfig+0x342>
 800329c:	a201      	add	r2, pc, #4	@ (adr r2, 80032a4 <UART_SetConfig+0x300>)
 800329e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a2:	bf00      	nop
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032e7 	.word	0x080032e7
 80032ac:	080032d1 	.word	0x080032d1
 80032b0:	080032e7 	.word	0x080032e7
 80032b4:	080032d7 	.word	0x080032d7
 80032b8:	080032e7 	.word	0x080032e7
 80032bc:	080032e7 	.word	0x080032e7
 80032c0:	080032e7 	.word	0x080032e7
 80032c4:	080032df 	.word	0x080032df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe fcda 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 80032cc:	61f8      	str	r0, [r7, #28]
        break;
 80032ce:	e010      	b.n	80032f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d0:	4b8f      	ldr	r3, [pc, #572]	@ (8003510 <UART_SetConfig+0x56c>)
 80032d2:	61fb      	str	r3, [r7, #28]
        break;
 80032d4:	e00d      	b.n	80032f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032d6:	f7fe fc3b 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 80032da:	61f8      	str	r0, [r7, #28]
        break;
 80032dc:	e009      	b.n	80032f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032e2:	61fb      	str	r3, [r7, #28]
        break;
 80032e4:	e005      	b.n	80032f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80032e6:	2300      	movs	r3, #0
 80032e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80032f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80fb 	beq.w	80034f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	005b      	lsls	r3, r3, #1
 8003302:	4413      	add	r3, r2
 8003304:	69fa      	ldr	r2, [r7, #28]
 8003306:	429a      	cmp	r2, r3
 8003308:	d305      	bcc.n	8003316 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003310:	69fa      	ldr	r2, [r7, #28]
 8003312:	429a      	cmp	r2, r3
 8003314:	d903      	bls.n	800331e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800331c:	e0e8      	b.n	80034f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2200      	movs	r2, #0
 8003322:	461c      	mov	r4, r3
 8003324:	4615      	mov	r5, r2
 8003326:	f04f 0200 	mov.w	r2, #0
 800332a:	f04f 0300 	mov.w	r3, #0
 800332e:	022b      	lsls	r3, r5, #8
 8003330:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003334:	0222      	lsls	r2, r4, #8
 8003336:	68f9      	ldr	r1, [r7, #12]
 8003338:	6849      	ldr	r1, [r1, #4]
 800333a:	0849      	lsrs	r1, r1, #1
 800333c:	2000      	movs	r0, #0
 800333e:	4688      	mov	r8, r1
 8003340:	4681      	mov	r9, r0
 8003342:	eb12 0a08 	adds.w	sl, r2, r8
 8003346:	eb43 0b09 	adc.w	fp, r3, r9
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003358:	4650      	mov	r0, sl
 800335a:	4659      	mov	r1, fp
 800335c:	f7fc ff34 	bl	80001c8 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4613      	mov	r3, r2
 8003366:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800336e:	d308      	bcc.n	8003382 <UART_SetConfig+0x3de>
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003376:	d204      	bcs.n	8003382 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69ba      	ldr	r2, [r7, #24]
 800337e:	60da      	str	r2, [r3, #12]
 8003380:	e0b6      	b.n	80034f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003388:	e0b2      	b.n	80034f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	69db      	ldr	r3, [r3, #28]
 800338e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003392:	d15e      	bne.n	8003452 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003394:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003398:	2b08      	cmp	r3, #8
 800339a:	d828      	bhi.n	80033ee <UART_SetConfig+0x44a>
 800339c:	a201      	add	r2, pc, #4	@ (adr r2, 80033a4 <UART_SetConfig+0x400>)
 800339e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033a2:	bf00      	nop
 80033a4:	080033c9 	.word	0x080033c9
 80033a8:	080033d1 	.word	0x080033d1
 80033ac:	080033d9 	.word	0x080033d9
 80033b0:	080033ef 	.word	0x080033ef
 80033b4:	080033df 	.word	0x080033df
 80033b8:	080033ef 	.word	0x080033ef
 80033bc:	080033ef 	.word	0x080033ef
 80033c0:	080033ef 	.word	0x080033ef
 80033c4:	080033e7 	.word	0x080033e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033c8:	f7fe fc5a 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 80033cc:	61f8      	str	r0, [r7, #28]
        break;
 80033ce:	e014      	b.n	80033fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033d0:	f7fe fc6c 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 80033d4:	61f8      	str	r0, [r7, #28]
        break;
 80033d6:	e010      	b.n	80033fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033d8:	4b4d      	ldr	r3, [pc, #308]	@ (8003510 <UART_SetConfig+0x56c>)
 80033da:	61fb      	str	r3, [r7, #28]
        break;
 80033dc:	e00d      	b.n	80033fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033de:	f7fe fbb7 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 80033e2:	61f8      	str	r0, [r7, #28]
        break;
 80033e4:	e009      	b.n	80033fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033ea:	61fb      	str	r3, [r7, #28]
        break;
 80033ec:	e005      	b.n	80033fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d077      	beq.n	80034f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005a      	lsls	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	085b      	lsrs	r3, r3, #1
 800340a:	441a      	add	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	2b0f      	cmp	r3, #15
 800341a:	d916      	bls.n	800344a <UART_SetConfig+0x4a6>
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003422:	d212      	bcs.n	800344a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003424:	69bb      	ldr	r3, [r7, #24]
 8003426:	b29b      	uxth	r3, r3
 8003428:	f023 030f 	bic.w	r3, r3, #15
 800342c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	085b      	lsrs	r3, r3, #1
 8003432:	b29b      	uxth	r3, r3
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	b29a      	uxth	r2, r3
 800343a:	8afb      	ldrh	r3, [r7, #22]
 800343c:	4313      	orrs	r3, r2
 800343e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	8afa      	ldrh	r2, [r7, #22]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	e052      	b.n	80034f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003450:	e04e      	b.n	80034f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003452:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003456:	2b08      	cmp	r3, #8
 8003458:	d827      	bhi.n	80034aa <UART_SetConfig+0x506>
 800345a:	a201      	add	r2, pc, #4	@ (adr r2, 8003460 <UART_SetConfig+0x4bc>)
 800345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003460:	08003485 	.word	0x08003485
 8003464:	0800348d 	.word	0x0800348d
 8003468:	08003495 	.word	0x08003495
 800346c:	080034ab 	.word	0x080034ab
 8003470:	0800349b 	.word	0x0800349b
 8003474:	080034ab 	.word	0x080034ab
 8003478:	080034ab 	.word	0x080034ab
 800347c:	080034ab 	.word	0x080034ab
 8003480:	080034a3 	.word	0x080034a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003484:	f7fe fbfc 	bl	8001c80 <HAL_RCC_GetPCLK1Freq>
 8003488:	61f8      	str	r0, [r7, #28]
        break;
 800348a:	e014      	b.n	80034b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800348c:	f7fe fc0e 	bl	8001cac <HAL_RCC_GetPCLK2Freq>
 8003490:	61f8      	str	r0, [r7, #28]
        break;
 8003492:	e010      	b.n	80034b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003494:	4b1e      	ldr	r3, [pc, #120]	@ (8003510 <UART_SetConfig+0x56c>)
 8003496:	61fb      	str	r3, [r7, #28]
        break;
 8003498:	e00d      	b.n	80034b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349a:	f7fe fb59 	bl	8001b50 <HAL_RCC_GetSysClockFreq>
 800349e:	61f8      	str	r0, [r7, #28]
        break;
 80034a0:	e009      	b.n	80034b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034a6:	61fb      	str	r3, [r7, #28]
        break;
 80034a8:	e005      	b.n	80034b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034b4:	bf00      	nop
    }

    if (pclk != 0U)
 80034b6:	69fb      	ldr	r3, [r7, #28]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d019      	beq.n	80034f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	085a      	lsrs	r2, r3, #1
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	441a      	add	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	2b0f      	cmp	r3, #15
 80034d4:	d909      	bls.n	80034ea <UART_SetConfig+0x546>
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80034dc:	d205      	bcs.n	80034ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	b29a      	uxth	r2, r3
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60da      	str	r2, [r3, #12]
 80034e8:	e002      	b.n	80034f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2200      	movs	r2, #0
 80034f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003500:	4618      	mov	r0, r3
 8003502:	3728      	adds	r7, #40	@ 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800350a:	bf00      	nop
 800350c:	40008000 	.word	0x40008000
 8003510:	00f42400 	.word	0x00f42400

08003514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	f003 0308 	and.w	r3, r3, #8
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00a      	beq.n	800353e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	430a      	orrs	r2, r1
 800353c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00a      	beq.n	8003560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	430a      	orrs	r2, r1
 800355e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00a      	beq.n	8003582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	430a      	orrs	r2, r1
 8003580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003586:	f003 0304 	and.w	r3, r3, #4
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00a      	beq.n	80035a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	430a      	orrs	r2, r1
 80035a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035a8:	f003 0310 	and.w	r3, r3, #16
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d00a      	beq.n	80035c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ca:	f003 0320 	and.w	r3, r3, #32
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	430a      	orrs	r2, r1
 80035e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d01a      	beq.n	800362a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	430a      	orrs	r2, r1
 8003608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003612:	d10a      	bne.n	800362a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	430a      	orrs	r2, r1
 8003628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800362e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00a      	beq.n	800364c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	430a      	orrs	r2, r1
 800364a:	605a      	str	r2, [r3, #4]
  }
}
 800364c:	bf00      	nop
 800364e:	370c      	adds	r7, #12
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr

08003658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b098      	sub	sp, #96	@ 0x60
 800365c:	af02      	add	r7, sp, #8
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003668:	f7fd f9d4 	bl	8000a14 <HAL_GetTick>
 800366c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0308 	and.w	r3, r3, #8
 8003678:	2b08      	cmp	r3, #8
 800367a:	d12e      	bne.n	80036da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800367c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003684:	2200      	movs	r2, #0
 8003686:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f88c 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d021      	beq.n	80036da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800369e:	e853 3f00 	ldrex	r3, [r3]
 80036a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80036a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80036b6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80036ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80036bc:	e841 2300 	strex	r3, r2, [r1]
 80036c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d1e6      	bne.n	8003696 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2220      	movs	r2, #32
 80036cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e062      	b.n	80037a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f003 0304 	and.w	r3, r3, #4
 80036e4:	2b04      	cmp	r3, #4
 80036e6:	d149      	bne.n	800377c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036f0:	2200      	movs	r2, #0
 80036f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f856 	bl	80037a8 <UART_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d03c      	beq.n	800377c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	623b      	str	r3, [r7, #32]
   return(result);
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003716:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	461a      	mov	r2, r3
 800371e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003720:	633b      	str	r3, [r7, #48]	@ 0x30
 8003722:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003726:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800372e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e6      	bne.n	8003702 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3308      	adds	r3, #8
 800373a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	e853 3f00 	ldrex	r3, [r3]
 8003742:	60fb      	str	r3, [r7, #12]
   return(result);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f023 0301 	bic.w	r3, r3, #1
 800374a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3308      	adds	r3, #8
 8003752:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003754:	61fa      	str	r2, [r7, #28]
 8003756:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	69b9      	ldr	r1, [r7, #24]
 800375a:	69fa      	ldr	r2, [r7, #28]
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	617b      	str	r3, [r7, #20]
   return(result);
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e5      	bne.n	8003734 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e011      	b.n	80037a0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800379e:	2300      	movs	r3, #0
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	3758      	adds	r7, #88	@ 0x58
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd80      	pop	{r7, pc}

080037a8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	60f8      	str	r0, [r7, #12]
 80037b0:	60b9      	str	r1, [r7, #8]
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	4613      	mov	r3, r2
 80037b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037b8:	e04f      	b.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037ba:	69bb      	ldr	r3, [r7, #24]
 80037bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037c0:	d04b      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c2:	f7fd f927 	bl	8000a14 <HAL_GetTick>
 80037c6:	4602      	mov	r2, r0
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	1ad3      	subs	r3, r2, r3
 80037cc:	69ba      	ldr	r2, [r7, #24]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d302      	bcc.n	80037d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d101      	bne.n	80037dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e04e      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d037      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b80      	cmp	r3, #128	@ 0x80
 80037ee:	d034      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	2b40      	cmp	r3, #64	@ 0x40
 80037f4:	d031      	beq.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	f003 0308 	and.w	r3, r3, #8
 8003800:	2b08      	cmp	r3, #8
 8003802:	d110      	bne.n	8003826 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2208      	movs	r2, #8
 800380a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f8ff 	bl	8003a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	2208      	movs	r2, #8
 8003816:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e029      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69db      	ldr	r3, [r3, #28]
 800382c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003830:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003834:	d111      	bne.n	800385a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800383e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f8e5 	bl	8003a10 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e00f      	b.n	800387a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	69da      	ldr	r2, [r3, #28]
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4013      	ands	r3, r2
 8003864:	68ba      	ldr	r2, [r7, #8]
 8003866:	429a      	cmp	r2, r3
 8003868:	bf0c      	ite	eq
 800386a:	2301      	moveq	r3, #1
 800386c:	2300      	movne	r3, #0
 800386e:	b2db      	uxtb	r3, r3
 8003870:	461a      	mov	r2, r3
 8003872:	79fb      	ldrb	r3, [r7, #7]
 8003874:	429a      	cmp	r2, r3
 8003876:	d0a0      	beq.n	80037ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3710      	adds	r7, #16
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
	...

08003884 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003884:	b480      	push	{r7}
 8003886:	b097      	sub	sp, #92	@ 0x5c
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	4613      	mov	r3, r2
 8003890:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	88fa      	ldrh	r2, [r7, #6]
 800389c:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b6:	d10e      	bne.n	80038d6 <UART_Start_Receive_IT+0x52>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <UART_Start_Receive_IT+0x48>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80038c6:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038ca:	e02d      	b.n	8003928 <UART_Start_Receive_IT+0xa4>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	22ff      	movs	r2, #255	@ 0xff
 80038d0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038d4:	e028      	b.n	8003928 <UART_Start_Receive_IT+0xa4>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10d      	bne.n	80038fa <UART_Start_Receive_IT+0x76>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	691b      	ldr	r3, [r3, #16]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d104      	bne.n	80038f0 <UART_Start_Receive_IT+0x6c>
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	22ff      	movs	r2, #255	@ 0xff
 80038ea:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038ee:	e01b      	b.n	8003928 <UART_Start_Receive_IT+0xa4>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	227f      	movs	r2, #127	@ 0x7f
 80038f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80038f8:	e016      	b.n	8003928 <UART_Start_Receive_IT+0xa4>
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003902:	d10d      	bne.n	8003920 <UART_Start_Receive_IT+0x9c>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d104      	bne.n	8003916 <UART_Start_Receive_IT+0x92>
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	227f      	movs	r2, #127	@ 0x7f
 8003910:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003914:	e008      	b.n	8003928 <UART_Start_Receive_IT+0xa4>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	223f      	movs	r2, #63	@ 0x3f
 800391a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800391e:	e003      	b.n	8003928 <UART_Start_Receive_IT+0xa4>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2222      	movs	r2, #34	@ 0x22
 8003934:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003942:	e853 3f00 	ldrex	r3, [r3]
 8003946:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800394a:	f043 0301 	orr.w	r3, r3, #1
 800394e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	3308      	adds	r3, #8
 8003956:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003958:	64ba      	str	r2, [r7, #72]	@ 0x48
 800395a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800395c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800395e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003960:	e841 2300 	strex	r3, r2, [r1]
 8003964:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8003966:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1e5      	bne.n	8003938 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003974:	d107      	bne.n	8003986 <UART_Start_Receive_IT+0x102>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d103      	bne.n	8003986 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a21      	ldr	r2, [pc, #132]	@ (8003a08 <UART_Start_Receive_IT+0x184>)
 8003982:	669a      	str	r2, [r3, #104]	@ 0x68
 8003984:	e002      	b.n	800398c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	4a20      	ldr	r2, [pc, #128]	@ (8003a0c <UART_Start_Receive_IT+0x188>)
 800398a:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d019      	beq.n	80039c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80039a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a4:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80039a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80039b4:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80039b8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80039c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e6      	bne.n	8003994 <UART_Start_Receive_IT+0x110>
 80039c6:	e018      	b.n	80039fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	e853 3f00 	ldrex	r3, [r3]
 80039d4:	613b      	str	r3, [r7, #16]
   return(result);
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f043 0320 	orr.w	r3, r3, #32
 80039dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461a      	mov	r2, r3
 80039e4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80039e6:	623b      	str	r3, [r7, #32]
 80039e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ea:	69f9      	ldr	r1, [r7, #28]
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	e841 2300 	strex	r3, r2, [r1]
 80039f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d1e6      	bne.n	80039c8 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	375c      	adds	r7, #92	@ 0x5c
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr
 8003a08:	08003d15 	.word	0x08003d15
 8003a0c:	08003b59 	.word	0x08003b59

08003a10 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b095      	sub	sp, #84	@ 0x54
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a20:	e853 3f00 	ldrex	r3, [r3]
 8003a24:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	461a      	mov	r2, r3
 8003a34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a38:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a3a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a3e:	e841 2300 	strex	r3, r2, [r1]
 8003a42:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d1e6      	bne.n	8003a18 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3308      	adds	r3, #8
 8003a50:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	e853 3f00 	ldrex	r3, [r3]
 8003a58:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	f023 0301 	bic.w	r3, r3, #1
 8003a60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	3308      	adds	r3, #8
 8003a68:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a72:	e841 2300 	strex	r3, r2, [r1]
 8003a76:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1e5      	bne.n	8003a4a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d118      	bne.n	8003ab8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	f023 0310 	bic.w	r3, r3, #16
 8003a9a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aa4:	61bb      	str	r3, [r7, #24]
 8003aa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	6979      	ldr	r1, [r7, #20]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e6      	bne.n	8003a86 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003acc:	bf00      	nop
 8003ace:	3754      	adds	r7, #84	@ 0x54
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ae4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003af6:	68f8      	ldr	r0, [r7, #12]
 8003af8:	f7ff fa3e 	bl	8002f78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003afc:	bf00      	nop
 8003afe:	3710      	adds	r7, #16
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b088      	sub	sp, #32
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b20:	61fb      	str	r3, [r7, #28]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	461a      	mov	r2, r3
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	61bb      	str	r3, [r7, #24]
 8003b2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6979      	ldr	r1, [r7, #20]
 8003b30:	69ba      	ldr	r2, [r7, #24]
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	613b      	str	r3, [r7, #16]
   return(result);
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e6      	bne.n	8003b0c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2220      	movs	r2, #32
 8003b42:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f7ff fa0a 	bl	8002f64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b50:	bf00      	nop
 8003b52:	3720      	adds	r7, #32
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}

08003b58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b09c      	sub	sp, #112	@ 0x70
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003b66:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b70:	2b22      	cmp	r3, #34	@ 0x22
 8003b72:	f040 80be 	bne.w	8003cf2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003b7c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003b80:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8003b84:	b2d9      	uxtb	r1, r3
 8003b86:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003b8a:	b2da      	uxtb	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b90:	400a      	ands	r2, r1
 8003b92:	b2d2      	uxtb	r2, r2
 8003b94:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9a:	1c5a      	adds	r2, r3, #1
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	f040 80a3 	bne.w	8003d06 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003bce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	461a      	mov	r2, r3
 8003bdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003bde:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003be0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003be4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003be6:	e841 2300 	strex	r3, r2, [r1]
 8003bea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003bec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1e6      	bne.n	8003bc0 <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	3308      	adds	r3, #8
 8003bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c04:	f023 0301 	bic.w	r3, r3, #1
 8003c08:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	3308      	adds	r3, #8
 8003c10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c12:	647a      	str	r2, [r7, #68]	@ 0x44
 8003c14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003c18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003c20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1e5      	bne.n	8003bf2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	4a34      	ldr	r2, [pc, #208]	@ (8003d10 <UART_RxISR_8BIT+0x1b8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d01f      	beq.n	8003c84 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d018      	beq.n	8003c84 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5a:	e853 3f00 	ldrex	r3, [r3]
 8003c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8003c60:	6a3b      	ldr	r3, [r7, #32]
 8003c62:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003c66:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c70:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c72:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003c76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c78:	e841 2300 	strex	r3, r2, [r1]
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d1e6      	bne.n	8003c52 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d12e      	bne.n	8003cea <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	e853 3f00 	ldrex	r3, [r3]
 8003c9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0310 	bic.w	r3, r3, #16
 8003ca6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	461a      	mov	r2, r3
 8003cae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003cb0:	61fb      	str	r3, [r7, #28]
 8003cb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb4:	69b9      	ldr	r1, [r7, #24]
 8003cb6:	69fa      	ldr	r2, [r7, #28]
 8003cb8:	e841 2300 	strex	r3, r2, [r1]
 8003cbc:	617b      	str	r3, [r7, #20]
   return(result);
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e6      	bne.n	8003c92 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	2b10      	cmp	r3, #16
 8003cd0:	d103      	bne.n	8003cda <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2210      	movs	r2, #16
 8003cd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f7ff f952 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ce8:	e00d      	b.n	8003d06 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f7fc fc02 	bl	80004f4 <HAL_UART_RxCpltCallback>
}
 8003cf0:	e009      	b.n	8003d06 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	8b1b      	ldrh	r3, [r3, #24]
 8003cf8:	b29a      	uxth	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0208 	orr.w	r2, r2, #8
 8003d02:	b292      	uxth	r2, r2
 8003d04:	831a      	strh	r2, [r3, #24]
}
 8003d06:	bf00      	nop
 8003d08:	3770      	adds	r7, #112	@ 0x70
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	40008000 	.word	0x40008000

08003d14 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b09c      	sub	sp, #112	@ 0x70
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003d22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d2c:	2b22      	cmp	r3, #34	@ 0x22
 8003d2e:	f040 80be 	bne.w	8003eae <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8003d38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d40:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8003d42:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8003d46:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8003d4a:	4013      	ands	r3, r2
 8003d4c:	b29a      	uxth	r2, r3
 8003d4e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003d50:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d56:	1c9a      	adds	r2, r3, #2
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	3b01      	subs	r3, #1
 8003d66:	b29a      	uxth	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003d74:	b29b      	uxth	r3, r3
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f040 80a3 	bne.w	8003ec2 <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d84:	e853 3f00 	ldrex	r3, [r3]
 8003d88:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003d8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d90:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	461a      	mov	r2, r3
 8003d98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003d9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d9c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003da0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003da2:	e841 2300 	strex	r3, r2, [r1]
 8003da6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003da8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d1e6      	bne.n	8003d7c <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3308      	adds	r3, #8
 8003db4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003db8:	e853 3f00 	ldrex	r3, [r3]
 8003dbc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dc0:	f023 0301 	bic.w	r3, r3, #1
 8003dc4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3308      	adds	r3, #8
 8003dcc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003dce:	643a      	str	r2, [r7, #64]	@ 0x40
 8003dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003dd4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003dd6:	e841 2300 	strex	r3, r2, [r1]
 8003dda:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003ddc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1e5      	bne.n	8003dae <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2220      	movs	r2, #32
 8003de6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a34      	ldr	r2, [pc, #208]	@ (8003ecc <UART_RxISR_16BIT+0x1b8>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d01f      	beq.n	8003e40 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d018      	beq.n	8003e40 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e14:	6a3b      	ldr	r3, [r7, #32]
 8003e16:	e853 3f00 	ldrex	r3, [r3]
 8003e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	461a      	mov	r2, r3
 8003e2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e2e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003e34:	e841 2300 	strex	r3, r2, [r1]
 8003e38:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d1e6      	bne.n	8003e0e <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d12e      	bne.n	8003ea6 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	e853 3f00 	ldrex	r3, [r3]
 8003e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f023 0310 	bic.w	r3, r3, #16
 8003e62:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	461a      	mov	r2, r3
 8003e6a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e70:	6979      	ldr	r1, [r7, #20]
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	e841 2300 	strex	r3, r2, [r1]
 8003e78:	613b      	str	r3, [r7, #16]
   return(result);
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1e6      	bne.n	8003e4e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	69db      	ldr	r3, [r3, #28]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d103      	bne.n	8003e96 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2210      	movs	r2, #16
 8003e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003e9c:	4619      	mov	r1, r3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7ff f874 	bl	8002f8c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ea4:	e00d      	b.n	8003ec2 <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fc fb24 	bl	80004f4 <HAL_UART_RxCpltCallback>
}
 8003eac:	e009      	b.n	8003ec2 <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	8b1b      	ldrh	r3, [r3, #24]
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0208 	orr.w	r2, r2, #8
 8003ebe:	b292      	uxth	r2, r2
 8003ec0:	831a      	strh	r2, [r3, #24]
}
 8003ec2:	bf00      	nop
 8003ec4:	3770      	adds	r7, #112	@ 0x70
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40008000 	.word	0x40008000

08003ed0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003ed8:	bf00      	nop
 8003eda:	370c      	adds	r7, #12
 8003edc:	46bd      	mov	sp, r7
 8003ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee2:	4770      	bx	lr

08003ee4 <memset>:
 8003ee4:	4402      	add	r2, r0
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d100      	bne.n	8003eee <memset+0xa>
 8003eec:	4770      	bx	lr
 8003eee:	f803 1b01 	strb.w	r1, [r3], #1
 8003ef2:	e7f9      	b.n	8003ee8 <memset+0x4>

08003ef4 <__libc_init_array>:
 8003ef4:	b570      	push	{r4, r5, r6, lr}
 8003ef6:	4d0d      	ldr	r5, [pc, #52]	@ (8003f2c <__libc_init_array+0x38>)
 8003ef8:	4c0d      	ldr	r4, [pc, #52]	@ (8003f30 <__libc_init_array+0x3c>)
 8003efa:	1b64      	subs	r4, r4, r5
 8003efc:	10a4      	asrs	r4, r4, #2
 8003efe:	2600      	movs	r6, #0
 8003f00:	42a6      	cmp	r6, r4
 8003f02:	d109      	bne.n	8003f18 <__libc_init_array+0x24>
 8003f04:	4d0b      	ldr	r5, [pc, #44]	@ (8003f34 <__libc_init_array+0x40>)
 8003f06:	4c0c      	ldr	r4, [pc, #48]	@ (8003f38 <__libc_init_array+0x44>)
 8003f08:	f000 f818 	bl	8003f3c <_init>
 8003f0c:	1b64      	subs	r4, r4, r5
 8003f0e:	10a4      	asrs	r4, r4, #2
 8003f10:	2600      	movs	r6, #0
 8003f12:	42a6      	cmp	r6, r4
 8003f14:	d105      	bne.n	8003f22 <__libc_init_array+0x2e>
 8003f16:	bd70      	pop	{r4, r5, r6, pc}
 8003f18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f1c:	4798      	blx	r3
 8003f1e:	3601      	adds	r6, #1
 8003f20:	e7ee      	b.n	8003f00 <__libc_init_array+0xc>
 8003f22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f26:	4798      	blx	r3
 8003f28:	3601      	adds	r6, #1
 8003f2a:	e7f2      	b.n	8003f12 <__libc_init_array+0x1e>
 8003f2c:	08003fa4 	.word	0x08003fa4
 8003f30:	08003fa4 	.word	0x08003fa4
 8003f34:	08003fa4 	.word	0x08003fa4
 8003f38:	08003fa8 	.word	0x08003fa8

08003f3c <_init>:
 8003f3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f3e:	bf00      	nop
 8003f40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f42:	bc08      	pop	{r3}
 8003f44:	469e      	mov	lr, r3
 8003f46:	4770      	bx	lr

08003f48 <_fini>:
 8003f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4a:	bf00      	nop
 8003f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f4e:	bc08      	pop	{r3}
 8003f50:	469e      	mov	lr, r3
 8003f52:	4770      	bx	lr
