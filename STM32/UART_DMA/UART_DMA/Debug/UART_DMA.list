
UART_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c08  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003d90  08003d90  00004d90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dd8  08003dd8  00005020  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003dd8  08003dd8  00004dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003de0  08003de0  00005020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003de0  08003de0  00004de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003de4  08003de4  00004de4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000020  20000000  08003de8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000020  08003e08  00005020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000016c  08003e08  0000516c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000aeeb  00000000  00000000  00005050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a6a  00000000  00000000  0000ff3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000950  00000000  00000000  000119a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000724  00000000  00000000  000122f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258d3  00000000  00000000  00012a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b210  00000000  00000000  000382ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e76e0  00000000  00000000  000434ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012abdf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002538  00000000  00000000  0012ac24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012d15c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000020 	.word	0x20000020
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003d78 	.word	0x08003d78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000024 	.word	0x20000024
 80001c4:	08003d78 	.word	0x08003d78

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_UART_TxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a05      	ldr	r2, [pc, #20]	@ (8000528 <HAL_UART_TxCpltCallback+0x24>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d104      	bne.n	8000520 <HAL_UART_TxCpltCallback+0x1c>
    {
        // Transmission complete
        HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // Indicate with LED
 8000516:	2120      	movs	r1, #32
 8000518:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800051c:	f001 f812 	bl	8001544 <HAL_GPIO_TogglePin>
    }
}
 8000520:	bf00      	nop
 8000522:	3708      	adds	r7, #8
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	40004400 	.word	0x40004400

0800052c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a09      	ldr	r2, [pc, #36]	@ (8000560 <HAL_UART_RxCpltCallback+0x34>)
 800053a:	4293      	cmp	r3, r2
 800053c:	d10b      	bne.n	8000556 <HAL_UART_RxCpltCallback+0x2a>
    {
        // Reception complete
        HAL_UART_Transmit(&huart2, rx_buf, sizeof(rx_buf), 2000); // Echo back
 800053e:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000542:	2214      	movs	r2, #20
 8000544:	4907      	ldr	r1, [pc, #28]	@ (8000564 <HAL_UART_RxCpltCallback+0x38>)
 8000546:	4808      	ldr	r0, [pc, #32]	@ (8000568 <HAL_UART_RxCpltCallback+0x3c>)
 8000548:	f002 fb84 	bl	8002c54 <HAL_UART_Transmit>
        // Restart DMA reception
        HAL_UART_Receive_DMA(&huart2, rx_buf, sizeof(rx_buf));
 800054c:	2214      	movs	r2, #20
 800054e:	4905      	ldr	r1, [pc, #20]	@ (8000564 <HAL_UART_RxCpltCallback+0x38>)
 8000550:	4805      	ldr	r0, [pc, #20]	@ (8000568 <HAL_UART_RxCpltCallback+0x3c>)
 8000552:	f002 fc85 	bl	8002e60 <HAL_UART_Receive_DMA>
    }
}
 8000556:	bf00      	nop
 8000558:	3708      	adds	r7, #8
 800055a:	46bd      	mov	sp, r7
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40004400 	.word	0x40004400
 8000564:	2000003c 	.word	0x2000003c
 8000568:	20000050 	.word	0x20000050

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 faa0 	bl	8000ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f81e 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8d4 	bl	8000724 <MX_GPIO_Init>
  MX_DMA_Init();
 800057c:	f000 f8ac 	bl	80006d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000580:	f000 f86a 	bl	8000658 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit_DMA(&huart2, tx_data, strlen((char*)tx_data));
 8000584:	4808      	ldr	r0, [pc, #32]	@ (80005a8 <main+0x3c>)
 8000586:	f7ff fe1f 	bl	80001c8 <strlen>
 800058a:	4603      	mov	r3, r0
 800058c:	b29b      	uxth	r3, r3
 800058e:	461a      	mov	r2, r3
 8000590:	4905      	ldr	r1, [pc, #20]	@ (80005a8 <main+0x3c>)
 8000592:	4806      	ldr	r0, [pc, #24]	@ (80005ac <main+0x40>)
 8000594:	f002 fbe8 	bl	8002d68 <HAL_UART_Transmit_DMA>

  HAL_UART_Receive_DMA(&huart2, rx_buf, sizeof(rx_buf));
 8000598:	2214      	movs	r2, #20
 800059a:	4905      	ldr	r1, [pc, #20]	@ (80005b0 <main+0x44>)
 800059c:	4803      	ldr	r0, [pc, #12]	@ (80005ac <main+0x40>)
 800059e:	f002 fc5f 	bl	8002e60 <HAL_UART_Receive_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a2:	bf00      	nop
 80005a4:	e7fd      	b.n	80005a2 <main+0x36>
 80005a6:	bf00      	nop
 80005a8:	20000000 	.word	0x20000000
 80005ac:	20000050 	.word	0x20000050
 80005b0:	2000003c 	.word	0x2000003c

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	@ 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	@ 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f003 fbab 	bl	8003d1e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005da:	f000 ffdb 	bl	8001594 <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f904 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	2310      	movs	r3, #16
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fa:	2302      	movs	r3, #2
 80005fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000602:	230a      	movs	r3, #10
 8000604:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000606:	2307      	movs	r3, #7
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4618      	mov	r0, r3
 8000618:	f001 f812 	bl	8001640 <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000622:	f000 f8e5 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	2104      	movs	r1, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f001 fbda 	bl	8001df8 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064a:	f000 f8d1 	bl	80007f0 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3758      	adds	r7, #88	@ 0x58
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b1a      	ldr	r3, [pc, #104]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800065e:	4a1b      	ldr	r2, [pc, #108]	@ (80006cc <MX_USART2_UART_Init+0x74>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000662:	4b19      	ldr	r3, [pc, #100]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b12      	ldr	r3, [pc, #72]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b11      	ldr	r3, [pc, #68]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b0e      	ldr	r3, [pc, #56]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b0c      	ldr	r3, [pc, #48]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
  __HAL_LINKDMA(&huart2, hdmatx, hdma_usart2_tx);
 800069a:	4b0b      	ldr	r3, [pc, #44]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 800069c:	4a0c      	ldr	r2, [pc, #48]	@ (80006d0 <MX_USART2_UART_Init+0x78>)
 800069e:	671a      	str	r2, [r3, #112]	@ 0x70
 80006a0:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <MX_USART2_UART_Init+0x78>)
 80006a2:	4a09      	ldr	r2, [pc, #36]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
  __HAL_LINKDMA(&huart2, hdmarx, hdma_usart2_rx);
 80006a6:	4b08      	ldr	r3, [pc, #32]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 80006a8:	4a0a      	ldr	r2, [pc, #40]	@ (80006d4 <MX_USART2_UART_Init+0x7c>)
 80006aa:	675a      	str	r2, [r3, #116]	@ 0x74
 80006ac:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_USART2_UART_Init+0x7c>)
 80006ae:	4a06      	ldr	r2, [pc, #24]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 80006b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b2:	4805      	ldr	r0, [pc, #20]	@ (80006c8 <MX_USART2_UART_Init+0x70>)
 80006b4:	f002 fa80 	bl	8002bb8 <HAL_UART_Init>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006be:	f000 f897 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	20000050 	.word	0x20000050
 80006cc:	40004400 	.word	0x40004400
 80006d0:	200000d8 	.word	0x200000d8
 80006d4:	20000120 	.word	0x20000120

080006d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006de:	4b10      	ldr	r3, [pc, #64]	@ (8000720 <MX_DMA_Init+0x48>)
 80006e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006e2:	4a0f      	ldr	r2, [pc, #60]	@ (8000720 <MX_DMA_Init+0x48>)
 80006e4:	f043 0301 	orr.w	r3, r3, #1
 80006e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80006ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000720 <MX_DMA_Init+0x48>)
 80006ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80006ee:	f003 0301 	and.w	r3, r3, #1
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2010      	movs	r0, #16
 80006fc:	f000 fb31 	bl	8000d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000700:	2010      	movs	r0, #16
 8000702:	f000 fb4a 	bl	8000d9a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2011      	movs	r0, #17
 800070c:	f000 fb29 	bl	8000d62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000710:	2011      	movs	r0, #17
 8000712:	f000 fb42 	bl	8000d9a <HAL_NVIC_EnableIRQ>

}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40021000 	.word	0x40021000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	@ 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073a:	4b2b      	ldr	r3, [pc, #172]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a2a      	ldr	r2, [pc, #168]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000740:	f043 0304 	orr.w	r3, r3, #4
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b28      	ldr	r3, [pc, #160]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0304 	and.w	r3, r3, #4
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000752:	4b25      	ldr	r3, [pc, #148]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a24      	ldr	r2, [pc, #144]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000758:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800076a:	4b1f      	ldr	r3, [pc, #124]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800076e:	4a1e      	ldr	r2, [pc, #120]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000776:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800077a:	f003 0301 	and.w	r3, r3, #1
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	4b19      	ldr	r3, [pc, #100]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000786:	4a18      	ldr	r2, [pc, #96]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000788:	f043 0302 	orr.w	r3, r3, #2
 800078c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800078e:	4b16      	ldr	r3, [pc, #88]	@ (80007e8 <MX_GPIO_Init+0xc4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000792:	f003 0302 	and.w	r3, r3, #2
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2120      	movs	r1, #32
 800079e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007a2:	f000 feb7 	bl	8001514 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007ac:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b2:	2300      	movs	r3, #0
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	480b      	ldr	r0, [pc, #44]	@ (80007ec <MX_GPIO_Init+0xc8>)
 80007be:	f000 fcff 	bl	80011c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007c2:	2320      	movs	r3, #32
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007dc:	f000 fcf0 	bl	80011c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	@ 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40021000 	.word	0x40021000
 80007ec:	48000800 	.word	0x48000800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	bf00      	nop
 80007fa:	e7fd      	b.n	80007f8 <Error_Handler+0x8>

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	4b0f      	ldr	r3, [pc, #60]	@ (8000840 <HAL_MspInit+0x44>)
 8000804:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000806:	4a0e      	ldr	r2, [pc, #56]	@ (8000840 <HAL_MspInit+0x44>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6613      	str	r3, [r2, #96]	@ 0x60
 800080e:	4b0c      	ldr	r3, [pc, #48]	@ (8000840 <HAL_MspInit+0x44>)
 8000810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b09      	ldr	r3, [pc, #36]	@ (8000840 <HAL_MspInit+0x44>)
 800081c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800081e:	4a08      	ldr	r2, [pc, #32]	@ (8000840 <HAL_MspInit+0x44>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000824:	6593      	str	r3, [r2, #88]	@ 0x58
 8000826:	4b06      	ldr	r3, [pc, #24]	@ (8000840 <HAL_MspInit+0x44>)
 8000828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800082e:	603b      	str	r3, [r7, #0]
 8000830:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000832:	bf00      	nop
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b0ac      	sub	sp, #176	@ 0xb0
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800085c:	f107 0314 	add.w	r3, r7, #20
 8000860:	2288      	movs	r2, #136	@ 0x88
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fa5a 	bl	8003d1e <memset>
  if(huart->Instance==USART2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a4b      	ldr	r2, [pc, #300]	@ (800099c <HAL_UART_MspInit+0x158>)
 8000870:	4293      	cmp	r3, r2
 8000872:	f040 808e 	bne.w	8000992 <HAL_UART_MspInit+0x14e>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000876:	2302      	movs	r3, #2
 8000878:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800087a:	2300      	movs	r3, #0
 800087c:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fcdc 	bl	8002240 <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800088e:	f7ff ffaf 	bl	80007f0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	4b43      	ldr	r3, [pc, #268]	@ (80009a0 <HAL_UART_MspInit+0x15c>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000896:	4a42      	ldr	r2, [pc, #264]	@ (80009a0 <HAL_UART_MspInit+0x15c>)
 8000898:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800089c:	6593      	str	r3, [r2, #88]	@ 0x58
 800089e:	4b40      	ldr	r3, [pc, #256]	@ (80009a0 <HAL_UART_MspInit+0x15c>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	4b3d      	ldr	r3, [pc, #244]	@ (80009a0 <HAL_UART_MspInit+0x15c>)
 80008ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ae:	4a3c      	ldr	r2, [pc, #240]	@ (80009a0 <HAL_UART_MspInit+0x15c>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008b6:	4b3a      	ldr	r3, [pc, #232]	@ (80009a0 <HAL_UART_MspInit+0x15c>)
 80008b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008c2:	230c      	movs	r3, #12
 80008c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c8:	2302      	movs	r3, #2
 80008ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d4:	2303      	movs	r3, #3
 80008d6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008da:	2307      	movs	r3, #7
 80008dc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008e4:	4619      	mov	r1, r3
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ea:	f000 fc69 	bl	80011c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80008ee:	4b2d      	ldr	r3, [pc, #180]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 80008f0:	4a2d      	ldr	r2, [pc, #180]	@ (80009a8 <HAL_UART_MspInit+0x164>)
 80008f2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 80008f4:	4b2b      	ldr	r3, [pc, #172]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 80008f6:	2202      	movs	r2, #2
 80008f8:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008fa:	4b2a      	ldr	r3, [pc, #168]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 80008fc:	2210      	movs	r2, #16
 80008fe:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000900:	4b28      	ldr	r3, [pc, #160]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000906:	4b27      	ldr	r3, [pc, #156]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 8000908:	2280      	movs	r2, #128	@ 0x80
 800090a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800090c:	4b25      	ldr	r3, [pc, #148]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 800090e:	2200      	movs	r2, #0
 8000910:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000912:	4b24      	ldr	r3, [pc, #144]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 8000918:	4b22      	ldr	r3, [pc, #136]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 800091a:	2220      	movs	r2, #32
 800091c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800091e:	4b21      	ldr	r3, [pc, #132]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000924:	481f      	ldr	r0, [pc, #124]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 8000926:	f000 fa53 	bl	8000dd0 <HAL_DMA_Init>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000930:	f7ff ff5e 	bl	80007f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a1b      	ldr	r2, [pc, #108]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 8000938:	671a      	str	r2, [r3, #112]	@ 0x70
 800093a:	4a1a      	ldr	r2, [pc, #104]	@ (80009a4 <HAL_UART_MspInit+0x160>)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000940:	4b1a      	ldr	r3, [pc, #104]	@ (80009ac <HAL_UART_MspInit+0x168>)
 8000942:	4a1b      	ldr	r2, [pc, #108]	@ (80009b0 <HAL_UART_MspInit+0x16c>)
 8000944:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 8000946:	4b19      	ldr	r3, [pc, #100]	@ (80009ac <HAL_UART_MspInit+0x168>)
 8000948:	2202      	movs	r2, #2
 800094a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800094c:	4b17      	ldr	r3, [pc, #92]	@ (80009ac <HAL_UART_MspInit+0x168>)
 800094e:	2200      	movs	r2, #0
 8000950:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000952:	4b16      	ldr	r3, [pc, #88]	@ (80009ac <HAL_UART_MspInit+0x168>)
 8000954:	2200      	movs	r2, #0
 8000956:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000958:	4b14      	ldr	r3, [pc, #80]	@ (80009ac <HAL_UART_MspInit+0x168>)
 800095a:	2280      	movs	r2, #128	@ 0x80
 800095c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800095e:	4b13      	ldr	r3, [pc, #76]	@ (80009ac <HAL_UART_MspInit+0x168>)
 8000960:	2200      	movs	r2, #0
 8000962:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000964:	4b11      	ldr	r3, [pc, #68]	@ (80009ac <HAL_UART_MspInit+0x168>)
 8000966:	2200      	movs	r2, #0
 8000968:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800096a:	4b10      	ldr	r3, [pc, #64]	@ (80009ac <HAL_UART_MspInit+0x168>)
 800096c:	2200      	movs	r2, #0
 800096e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000970:	4b0e      	ldr	r3, [pc, #56]	@ (80009ac <HAL_UART_MspInit+0x168>)
 8000972:	2200      	movs	r2, #0
 8000974:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000976:	480d      	ldr	r0, [pc, #52]	@ (80009ac <HAL_UART_MspInit+0x168>)
 8000978:	f000 fa2a 	bl	8000dd0 <HAL_DMA_Init>
 800097c:	4603      	mov	r3, r0
 800097e:	2b00      	cmp	r3, #0
 8000980:	d001      	beq.n	8000986 <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000982:	f7ff ff35 	bl	80007f0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a08      	ldr	r2, [pc, #32]	@ (80009ac <HAL_UART_MspInit+0x168>)
 800098a:	675a      	str	r2, [r3, #116]	@ 0x74
 800098c:	4a07      	ldr	r2, [pc, #28]	@ (80009ac <HAL_UART_MspInit+0x168>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000992:	bf00      	nop
 8000994:	37b0      	adds	r7, #176	@ 0xb0
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40004400 	.word	0x40004400
 80009a0:	40021000 	.word	0x40021000
 80009a4:	200000d8 	.word	0x200000d8
 80009a8:	40020080 	.word	0x40020080
 80009ac:	20000120 	.word	0x20000120
 80009b0:	4002006c 	.word	0x4002006c

080009b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b8:	bf00      	nop
 80009ba:	e7fd      	b.n	80009b8 <NMI_Handler+0x4>

080009bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009c0:	bf00      	nop
 80009c2:	e7fd      	b.n	80009c0 <HardFault_Handler+0x4>

080009c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c8:	bf00      	nop
 80009ca:	e7fd      	b.n	80009c8 <MemManage_Handler+0x4>

080009cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d0:	bf00      	nop
 80009d2:	e7fd      	b.n	80009d0 <BusFault_Handler+0x4>

080009d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d8:	bf00      	nop
 80009da:	e7fd      	b.n	80009d8 <UsageFault_Handler+0x4>

080009dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009e0:	bf00      	nop
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr

08000a06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a0a:	f000 f8af 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	bd80      	pop	{r7, pc}
	...

08000a14 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000a18:	4802      	ldr	r0, [pc, #8]	@ (8000a24 <DMA1_Channel6_IRQHandler+0x10>)
 8000a1a:	f000 faf1 	bl	8001000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000120 	.word	0x20000120

08000a28 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a2c:	4802      	ldr	r0, [pc, #8]	@ (8000a38 <DMA1_Channel7_IRQHandler+0x10>)
 8000a2e:	f000 fae7 	bl	8001000 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	200000d8 	.word	0x200000d8

08000a3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a40:	4b06      	ldr	r3, [pc, #24]	@ (8000a5c <SystemInit+0x20>)
 8000a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a46:	4a05      	ldr	r2, [pc, #20]	@ (8000a5c <SystemInit+0x20>)
 8000a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00

08000a60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000a98 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a64:	f7ff ffea 	bl	8000a3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a68:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <LoopForever+0x6>)
  ldr r1, =_edata
 8000a6a:	490d      	ldr	r1, [pc, #52]	@ (8000aa0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a6c:	4a0d      	ldr	r2, [pc, #52]	@ (8000aa4 <LoopForever+0xe>)
  movs r3, #0
 8000a6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a70:	e002      	b.n	8000a78 <LoopCopyDataInit>

08000a72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a76:	3304      	adds	r3, #4

08000a78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a7c:	d3f9      	bcc.n	8000a72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a80:	4c0a      	ldr	r4, [pc, #40]	@ (8000aac <LoopForever+0x16>)
  movs r3, #0
 8000a82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a84:	e001      	b.n	8000a8a <LoopFillZerobss>

08000a86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a88:	3204      	adds	r2, #4

08000a8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a8c:	d3fb      	bcc.n	8000a86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a8e:	f003 f94f 	bl	8003d30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a92:	f7ff fd6b 	bl	800056c <main>

08000a96 <LoopForever>:

LoopForever:
    b LoopForever
 8000a96:	e7fe      	b.n	8000a96 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a98:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aa0:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000aa4:	08003de8 	.word	0x08003de8
  ldr r2, =_sbss
 8000aa8:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000aac:	2000016c 	.word	0x2000016c

08000ab0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab0:	e7fe      	b.n	8000ab0 <ADC1_2_IRQHandler>
	...

08000ab4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aba:	2300      	movs	r3, #0
 8000abc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000abe:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <HAL_Init+0x3c>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a0b      	ldr	r2, [pc, #44]	@ (8000af0 <HAL_Init+0x3c>)
 8000ac4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ac8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aca:	2003      	movs	r0, #3
 8000acc:	f000 f93e 	bl	8000d4c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 f80f 	bl	8000af4 <HAL_InitTick>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000adc:	2301      	movs	r3, #1
 8000ade:	71fb      	strb	r3, [r7, #7]
 8000ae0:	e001      	b.n	8000ae6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ae2:	f7ff fe8b 	bl	80007fc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	40022000 	.word	0x40022000

08000af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <HAL_InitTick+0x6c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d023      	beq.n	8000b50 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b08:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <HAL_InitTick+0x70>)
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <HAL_InitTick+0x6c>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	4619      	mov	r1, r3
 8000b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b16:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f000 f949 	bl	8000db6 <HAL_SYSTICK_Config>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d10f      	bne.n	8000b4a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d809      	bhi.n	8000b44 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b30:	2200      	movs	r2, #0
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	f04f 30ff 	mov.w	r0, #4294967295
 8000b38:	f000 f913 	bl	8000d62 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3c:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_InitTick+0x74>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	6013      	str	r3, [r2, #0]
 8000b42:	e007      	b.n	8000b54 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b44:	2301      	movs	r3, #1
 8000b46:	73fb      	strb	r3, [r7, #15]
 8000b48:	e004      	b.n	8000b54 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	73fb      	strb	r3, [r7, #15]
 8000b4e:	e001      	b.n	8000b54 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b50:	2301      	movs	r3, #1
 8000b52:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000001c 	.word	0x2000001c
 8000b64:	20000014 	.word	0x20000014
 8000b68:	20000018 	.word	0x20000018

08000b6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b70:	4b06      	ldr	r3, [pc, #24]	@ (8000b8c <HAL_IncTick+0x20>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	4b06      	ldr	r3, [pc, #24]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <HAL_IncTick+0x24>)
 8000b7e:	6013      	str	r3, [r2, #0]
}
 8000b80:	bf00      	nop
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	2000001c 	.word	0x2000001c
 8000b90:	20000168 	.word	0x20000168

08000b94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return uwTick;
 8000b98:	4b03      	ldr	r3, [pc, #12]	@ (8000ba8 <HAL_GetTick+0x14>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
}
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	20000168 	.word	0x20000168

08000bac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bc2:	68ba      	ldr	r2, [r7, #8]
 8000bc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000bc8:	4013      	ands	r3, r2
 8000bca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000bd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bde:	4a04      	ldr	r2, [pc, #16]	@ (8000bf0 <__NVIC_SetPriorityGrouping+0x44>)
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	60d3      	str	r3, [r2, #12]
}
 8000be4:	bf00      	nop
 8000be6:	3714      	adds	r7, #20
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bf8:	4b04      	ldr	r3, [pc, #16]	@ (8000c0c <__NVIC_GetPriorityGrouping+0x18>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	f003 0307 	and.w	r3, r3, #7
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	db0b      	blt.n	8000c3a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	f003 021f 	and.w	r2, r3, #31
 8000c28:	4907      	ldr	r1, [pc, #28]	@ (8000c48 <__NVIC_EnableIRQ+0x38>)
 8000c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2e:	095b      	lsrs	r3, r3, #5
 8000c30:	2001      	movs	r0, #1
 8000c32:	fa00 f202 	lsl.w	r2, r0, r2
 8000c36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	e000e100 	.word	0xe000e100

08000c4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	6039      	str	r1, [r7, #0]
 8000c56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	db0a      	blt.n	8000c76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	b2da      	uxtb	r2, r3
 8000c64:	490c      	ldr	r1, [pc, #48]	@ (8000c98 <__NVIC_SetPriority+0x4c>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	0112      	lsls	r2, r2, #4
 8000c6c:	b2d2      	uxtb	r2, r2
 8000c6e:	440b      	add	r3, r1
 8000c70:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c74:	e00a      	b.n	8000c8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	4908      	ldr	r1, [pc, #32]	@ (8000c9c <__NVIC_SetPriority+0x50>)
 8000c7c:	79fb      	ldrb	r3, [r7, #7]
 8000c7e:	f003 030f 	and.w	r3, r3, #15
 8000c82:	3b04      	subs	r3, #4
 8000c84:	0112      	lsls	r2, r2, #4
 8000c86:	b2d2      	uxtb	r2, r2
 8000c88:	440b      	add	r3, r1
 8000c8a:	761a      	strb	r2, [r3, #24]
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c96:	4770      	bx	lr
 8000c98:	e000e100 	.word	0xe000e100
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b089      	sub	sp, #36	@ 0x24
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	60f8      	str	r0, [r7, #12]
 8000ca8:	60b9      	str	r1, [r7, #8]
 8000caa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	f003 0307 	and.w	r3, r3, #7
 8000cb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb4:	69fb      	ldr	r3, [r7, #28]
 8000cb6:	f1c3 0307 	rsb	r3, r3, #7
 8000cba:	2b04      	cmp	r3, #4
 8000cbc:	bf28      	it	cs
 8000cbe:	2304      	movcs	r3, #4
 8000cc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	3304      	adds	r3, #4
 8000cc6:	2b06      	cmp	r3, #6
 8000cc8:	d902      	bls.n	8000cd0 <NVIC_EncodePriority+0x30>
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	3b03      	subs	r3, #3
 8000cce:	e000      	b.n	8000cd2 <NVIC_EncodePriority+0x32>
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cd8:	69bb      	ldr	r3, [r7, #24]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	43da      	mvns	r2, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	401a      	ands	r2, r3
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ce8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf2:	43d9      	mvns	r1, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	4313      	orrs	r3, r2
         );
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3724      	adds	r7, #36	@ 0x24
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr
	...

08000d08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3b01      	subs	r3, #1
 8000d14:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000d18:	d301      	bcc.n	8000d1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00f      	b.n	8000d3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000d48 <SysTick_Config+0x40>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3b01      	subs	r3, #1
 8000d24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d26:	210f      	movs	r1, #15
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f7ff ff8e 	bl	8000c4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d30:	4b05      	ldr	r3, [pc, #20]	@ (8000d48 <SysTick_Config+0x40>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d36:	4b04      	ldr	r3, [pc, #16]	@ (8000d48 <SysTick_Config+0x40>)
 8000d38:	2207      	movs	r2, #7
 8000d3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d3c:	2300      	movs	r3, #0
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	e000e010 	.word	0xe000e010

08000d4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d54:	6878      	ldr	r0, [r7, #4]
 8000d56:	f7ff ff29 	bl	8000bac <__NVIC_SetPriorityGrouping>
}
 8000d5a:	bf00      	nop
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}

08000d62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d62:	b580      	push	{r7, lr}
 8000d64:	b086      	sub	sp, #24
 8000d66:	af00      	add	r7, sp, #0
 8000d68:	4603      	mov	r3, r0
 8000d6a:	60b9      	str	r1, [r7, #8]
 8000d6c:	607a      	str	r2, [r7, #4]
 8000d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d74:	f7ff ff3e 	bl	8000bf4 <__NVIC_GetPriorityGrouping>
 8000d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	6978      	ldr	r0, [r7, #20]
 8000d80:	f7ff ff8e 	bl	8000ca0 <NVIC_EncodePriority>
 8000d84:	4602      	mov	r2, r0
 8000d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f7ff ff5d 	bl	8000c4c <__NVIC_SetPriority>
}
 8000d92:	bf00      	nop
 8000d94:	3718      	adds	r7, #24
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	b082      	sub	sp, #8
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	4603      	mov	r3, r0
 8000da2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff31 	bl	8000c10 <__NVIC_EnableIRQ>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff ffa2 	bl	8000d08 <SysTick_Config>
 8000dc4:	4603      	mov	r3, r0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
	...

08000dd0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e098      	b.n	8000f14 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	4b4d      	ldr	r3, [pc, #308]	@ (8000f20 <HAL_DMA_Init+0x150>)
 8000dea:	429a      	cmp	r2, r3
 8000dec:	d80f      	bhi.n	8000e0e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b4b      	ldr	r3, [pc, #300]	@ (8000f24 <HAL_DMA_Init+0x154>)
 8000df6:	4413      	add	r3, r2
 8000df8:	4a4b      	ldr	r2, [pc, #300]	@ (8000f28 <HAL_DMA_Init+0x158>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	009a      	lsls	r2, r3, #2
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a48      	ldr	r2, [pc, #288]	@ (8000f2c <HAL_DMA_Init+0x15c>)
 8000e0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e0c:	e00e      	b.n	8000e2c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	4b46      	ldr	r3, [pc, #280]	@ (8000f30 <HAL_DMA_Init+0x160>)
 8000e16:	4413      	add	r3, r2
 8000e18:	4a43      	ldr	r2, [pc, #268]	@ (8000f28 <HAL_DMA_Init+0x158>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	091b      	lsrs	r3, r3, #4
 8000e20:	009a      	lsls	r2, r3, #2
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a42      	ldr	r2, [pc, #264]	@ (8000f34 <HAL_DMA_Init+0x164>)
 8000e2a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2202      	movs	r2, #2
 8000e30:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000e42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000e46:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	691b      	ldr	r3, [r3, #16]
 8000e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6a1b      	ldr	r3, [r3, #32]
 8000e6e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	68fa      	ldr	r2, [r7, #12]
 8000e7c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	689b      	ldr	r3, [r3, #8]
 8000e82:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000e86:	d039      	beq.n	8000efc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8c:	4a27      	ldr	r2, [pc, #156]	@ (8000f2c <HAL_DMA_Init+0x15c>)
 8000e8e:	4293      	cmp	r3, r2
 8000e90:	d11a      	bne.n	8000ec8 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e92:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <HAL_DMA_Init+0x168>)
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f003 031c 	and.w	r3, r3, #28
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	4924      	ldr	r1, [pc, #144]	@ (8000f38 <HAL_DMA_Init+0x168>)
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000eac:	4b22      	ldr	r3, [pc, #136]	@ (8000f38 <HAL_DMA_Init+0x168>)
 8000eae:	681a      	ldr	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6859      	ldr	r1, [r3, #4]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb8:	f003 031c 	and.w	r3, r3, #28
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	491d      	ldr	r1, [pc, #116]	@ (8000f38 <HAL_DMA_Init+0x168>)
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	600b      	str	r3, [r1, #0]
 8000ec6:	e019      	b.n	8000efc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000ec8:	4b1c      	ldr	r3, [pc, #112]	@ (8000f3c <HAL_DMA_Init+0x16c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ed0:	f003 031c 	and.w	r3, r3, #28
 8000ed4:	210f      	movs	r1, #15
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	4917      	ldr	r1, [pc, #92]	@ (8000f3c <HAL_DMA_Init+0x16c>)
 8000ede:	4013      	ands	r3, r2
 8000ee0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ee2:	4b16      	ldr	r3, [pc, #88]	@ (8000f3c <HAL_DMA_Init+0x16c>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6859      	ldr	r1, [r3, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eee:	f003 031c 	and.w	r3, r3, #28
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	4911      	ldr	r1, [pc, #68]	@ (8000f3c <HAL_DMA_Init+0x16c>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8000f12:	2300      	movs	r3, #0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	40020407 	.word	0x40020407
 8000f24:	bffdfff8 	.word	0xbffdfff8
 8000f28:	cccccccd 	.word	0xcccccccd
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	bffdfbf8 	.word	0xbffdfbf8
 8000f34:	40020400 	.word	0x40020400
 8000f38:	400200a8 	.word	0x400200a8
 8000f3c:	400204a8 	.word	0x400204a8

08000f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_DMA_Start_IT+0x20>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e04b      	b.n	8000ff8 <HAL_DMA_Start_IT+0xb8>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000f6e:	b2db      	uxtb	r3, r3
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d13a      	bne.n	8000fea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	2202      	movs	r2, #2
 8000f78:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681a      	ldr	r2, [r3, #0]
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f022 0201 	bic.w	r2, r2, #1
 8000f90:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	68b9      	ldr	r1, [r7, #8]
 8000f98:	68f8      	ldr	r0, [r7, #12]
 8000f9a:	f000 f8e0 	bl	800115e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d008      	beq.n	8000fb8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f042 020e 	orr.w	r2, r2, #14
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	e00f      	b.n	8000fd8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 0204 	bic.w	r2, r2, #4
 8000fc6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f042 020a 	orr.w	r2, r2, #10
 8000fd6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f042 0201 	orr.w	r2, r2, #1
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e005      	b.n	8000ff6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000ff6:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3718      	adds	r7, #24
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101c:	f003 031c 	and.w	r3, r3, #28
 8001020:	2204      	movs	r2, #4
 8001022:	409a      	lsls	r2, r3
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4013      	ands	r3, r2
 8001028:	2b00      	cmp	r3, #0
 800102a:	d026      	beq.n	800107a <HAL_DMA_IRQHandler+0x7a>
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	f003 0304 	and.w	r3, r3, #4
 8001032:	2b00      	cmp	r3, #0
 8001034:	d021      	beq.n	800107a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f003 0320 	and.w	r3, r3, #32
 8001040:	2b00      	cmp	r3, #0
 8001042:	d107      	bne.n	8001054 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f022 0204 	bic.w	r2, r2, #4
 8001052:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001058:	f003 021c 	and.w	r2, r3, #28
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001060:	2104      	movs	r1, #4
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106c:	2b00      	cmp	r3, #0
 800106e:	d071      	beq.n	8001154 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001078:	e06c      	b.n	8001154 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107e:	f003 031c 	and.w	r3, r3, #28
 8001082:	2202      	movs	r2, #2
 8001084:	409a      	lsls	r2, r3
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	4013      	ands	r3, r2
 800108a:	2b00      	cmp	r3, #0
 800108c:	d02e      	beq.n	80010ec <HAL_DMA_IRQHandler+0xec>
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d029      	beq.n	80010ec <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0320 	and.w	r3, r3, #32
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d10b      	bne.n	80010be <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 020a 	bic.w	r2, r2, #10
 80010b4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	2201      	movs	r2, #1
 80010ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c2:	f003 021c 	and.w	r2, r3, #28
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ca:	2102      	movs	r1, #2
 80010cc:	fa01 f202 	lsl.w	r2, r1, r2
 80010d0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2200      	movs	r2, #0
 80010d6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d038      	beq.n	8001154 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80010ea:	e033      	b.n	8001154 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010f0:	f003 031c 	and.w	r3, r3, #28
 80010f4:	2208      	movs	r2, #8
 80010f6:	409a      	lsls	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4013      	ands	r3, r2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d02a      	beq.n	8001156 <HAL_DMA_IRQHandler+0x156>
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f003 0308 	and.w	r3, r3, #8
 8001106:	2b00      	cmp	r3, #0
 8001108:	d025      	beq.n	8001156 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f022 020e 	bic.w	r2, r2, #14
 8001118:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111e:	f003 021c 	and.w	r2, r3, #28
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001126:	2101      	movs	r1, #1
 8001128:	fa01 f202 	lsl.w	r2, r1, r2
 800112c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001148:	2b00      	cmp	r3, #0
 800114a:	d004      	beq.n	8001156 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001154:	bf00      	nop
 8001156:	bf00      	nop
}
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800115e:	b480      	push	{r7}
 8001160:	b085      	sub	sp, #20
 8001162:	af00      	add	r7, sp, #0
 8001164:	60f8      	str	r0, [r7, #12]
 8001166:	60b9      	str	r1, [r7, #8]
 8001168:	607a      	str	r2, [r7, #4]
 800116a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001170:	f003 021c 	and.w	r2, r3, #28
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	2b10      	cmp	r3, #16
 800118e:	d108      	bne.n	80011a2 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	687a      	ldr	r2, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	68ba      	ldr	r2, [r7, #8]
 800119e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80011a0:	e007      	b.n	80011b2 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	68ba      	ldr	r2, [r7, #8]
 80011a8:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	687a      	ldr	r2, [r7, #4]
 80011b0:	60da      	str	r2, [r3, #12]
}
 80011b2:	bf00      	nop
 80011b4:	3714      	adds	r7, #20
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
	...

080011c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011ca:	2300      	movs	r3, #0
 80011cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ce:	e17f      	b.n	80014d0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	2101      	movs	r1, #1
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	4013      	ands	r3, r2
 80011de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 8171 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f003 0303 	and.w	r3, r3, #3
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d005      	beq.n	8001200 <HAL_GPIO_Init+0x40>
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f003 0303 	and.w	r3, r3, #3
 80011fc:	2b02      	cmp	r3, #2
 80011fe:	d130      	bne.n	8001262 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	2203      	movs	r2, #3
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	43db      	mvns	r3, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4013      	ands	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	68da      	ldr	r2, [r3, #12]
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4313      	orrs	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001236:	2201      	movs	r2, #1
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4013      	ands	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	091b      	lsrs	r3, r3, #4
 800124c:	f003 0201 	and.w	r2, r3, #1
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4313      	orrs	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	f003 0303 	and.w	r3, r3, #3
 800126a:	2b03      	cmp	r3, #3
 800126c:	d118      	bne.n	80012a0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001274:	2201      	movs	r2, #1
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	f003 0201 	and.w	r2, r3, #1
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	693a      	ldr	r2, [r7, #16]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 0303 	and.w	r3, r3, #3
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	d017      	beq.n	80012dc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	68db      	ldr	r3, [r3, #12]
 80012b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	2203      	movs	r2, #3
 80012b8:	fa02 f303 	lsl.w	r3, r2, r3
 80012bc:	43db      	mvns	r3, r3
 80012be:	693a      	ldr	r2, [r7, #16]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f003 0303 	and.w	r3, r3, #3
 80012e4:	2b02      	cmp	r3, #2
 80012e6:	d123      	bne.n	8001330 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	08da      	lsrs	r2, r3, #3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3208      	adds	r2, #8
 80012f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012f6:	697b      	ldr	r3, [r7, #20]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	220f      	movs	r2, #15
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	08da      	lsrs	r2, r3, #3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	3208      	adds	r2, #8
 800132a:	6939      	ldr	r1, [r7, #16]
 800132c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	005b      	lsls	r3, r3, #1
 800133a:	2203      	movs	r2, #3
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	43db      	mvns	r3, r3
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	4013      	ands	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0203 	and.w	r2, r3, #3
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 80ac 	beq.w	80014ca <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001372:	4b5f      	ldr	r3, [pc, #380]	@ (80014f0 <HAL_GPIO_Init+0x330>)
 8001374:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001376:	4a5e      	ldr	r2, [pc, #376]	@ (80014f0 <HAL_GPIO_Init+0x330>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6613      	str	r3, [r2, #96]	@ 0x60
 800137e:	4b5c      	ldr	r3, [pc, #368]	@ (80014f0 <HAL_GPIO_Init+0x330>)
 8001380:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800138a:	4a5a      	ldr	r2, [pc, #360]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	3302      	adds	r3, #2
 8001392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0303 	and.w	r3, r3, #3
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	220f      	movs	r2, #15
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80013b4:	d025      	beq.n	8001402 <HAL_GPIO_Init+0x242>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4a4f      	ldr	r2, [pc, #316]	@ (80014f8 <HAL_GPIO_Init+0x338>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d01f      	beq.n	80013fe <HAL_GPIO_Init+0x23e>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a4e      	ldr	r2, [pc, #312]	@ (80014fc <HAL_GPIO_Init+0x33c>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x23a>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4d      	ldr	r2, [pc, #308]	@ (8001500 <HAL_GPIO_Init+0x340>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x236>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4c      	ldr	r2, [pc, #304]	@ (8001504 <HAL_GPIO_Init+0x344>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x232>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4b      	ldr	r2, [pc, #300]	@ (8001508 <HAL_GPIO_Init+0x348>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x22e>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4a      	ldr	r2, [pc, #296]	@ (800150c <HAL_GPIO_Init+0x34c>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x22a>
 80013e6:	2306      	movs	r3, #6
 80013e8:	e00c      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e00a      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013ee:	2305      	movs	r3, #5
 80013f0:	e008      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f2:	2304      	movs	r3, #4
 80013f4:	e006      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013f6:	2303      	movs	r3, #3
 80013f8:	e004      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fa:	2302      	movs	r3, #2
 80013fc:	e002      	b.n	8001404 <HAL_GPIO_Init+0x244>
 80013fe:	2301      	movs	r3, #1
 8001400:	e000      	b.n	8001404 <HAL_GPIO_Init+0x244>
 8001402:	2300      	movs	r3, #0
 8001404:	697a      	ldr	r2, [r7, #20]
 8001406:	f002 0203 	and.w	r2, r2, #3
 800140a:	0092      	lsls	r2, r2, #2
 800140c:	4093      	lsls	r3, r2
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	4313      	orrs	r3, r2
 8001412:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001414:	4937      	ldr	r1, [pc, #220]	@ (80014f4 <HAL_GPIO_Init+0x334>)
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	089b      	lsrs	r3, r3, #2
 800141a:	3302      	adds	r3, #2
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001422:	4b3b      	ldr	r3, [pc, #236]	@ (8001510 <HAL_GPIO_Init+0x350>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001446:	4a32      	ldr	r2, [pc, #200]	@ (8001510 <HAL_GPIO_Init+0x350>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800144c:	4b30      	ldr	r3, [pc, #192]	@ (8001510 <HAL_GPIO_Init+0x350>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001470:	4a27      	ldr	r2, [pc, #156]	@ (8001510 <HAL_GPIO_Init+0x350>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001476:	4b26      	ldr	r3, [pc, #152]	@ (8001510 <HAL_GPIO_Init+0x350>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	43db      	mvns	r3, r3
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	4013      	ands	r3, r2
 8001484:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4313      	orrs	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800149a:	4a1d      	ldr	r2, [pc, #116]	@ (8001510 <HAL_GPIO_Init+0x350>)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001510 <HAL_GPIO_Init+0x350>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014a6:	68fb      	ldr	r3, [r7, #12]
 80014a8:	43db      	mvns	r3, r3
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014bc:	693a      	ldr	r2, [r7, #16]
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014c4:	4a12      	ldr	r2, [pc, #72]	@ (8001510 <HAL_GPIO_Init+0x350>)
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	3301      	adds	r3, #1
 80014ce:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa22 f303 	lsr.w	r3, r2, r3
 80014da:	2b00      	cmp	r3, #0
 80014dc:	f47f ae78 	bne.w	80011d0 <HAL_GPIO_Init+0x10>
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	371c      	adds	r7, #28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40021000 	.word	0x40021000
 80014f4:	40010000 	.word	0x40010000
 80014f8:	48000400 	.word	0x48000400
 80014fc:	48000800 	.word	0x48000800
 8001500:	48000c00 	.word	0x48000c00
 8001504:	48001000 	.word	0x48001000
 8001508:	48001400 	.word	0x48001400
 800150c:	48001800 	.word	0x48001800
 8001510:	40010400 	.word	0x40010400

08001514 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
 8001520:	4613      	mov	r3, r2
 8001522:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001524:	787b      	ldrb	r3, [r7, #1]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800152a:	887a      	ldrh	r2, [r7, #2]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001530:	e002      	b.n	8001538 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001532:	887a      	ldrh	r2, [r7, #2]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001544:	b480      	push	{r7}
 8001546:	b085      	sub	sp, #20
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
 800154c:	460b      	mov	r3, r1
 800154e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	695b      	ldr	r3, [r3, #20]
 8001554:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001556:	887a      	ldrh	r2, [r7, #2]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	041a      	lsls	r2, r3, #16
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43d9      	mvns	r1, r3
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	400b      	ands	r3, r1
 8001566:	431a      	orrs	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	619a      	str	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001578:	b480      	push	{r7}
 800157a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800157c:	4b04      	ldr	r3, [pc, #16]	@ (8001590 <HAL_PWREx_GetVoltageRange+0x18>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001584:	4618      	mov	r0, r3
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40007000 	.word	0x40007000

08001594 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015a2:	d130      	bne.n	8001606 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015a4:	4b23      	ldr	r3, [pc, #140]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80015ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80015b0:	d038      	beq.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015ba:	4a1e      	ldr	r2, [pc, #120]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015bc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80015c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001638 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2232      	movs	r2, #50	@ 0x32
 80015c8:	fb02 f303 	mul.w	r3, r2, r3
 80015cc:	4a1b      	ldr	r2, [pc, #108]	@ (800163c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015ce:	fba2 2303 	umull	r2, r3, r2, r3
 80015d2:	0c9b      	lsrs	r3, r3, #18
 80015d4:	3301      	adds	r3, #1
 80015d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015d8:	e002      	b.n	80015e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	3b01      	subs	r3, #1
 80015de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015e0:	4b14      	ldr	r3, [pc, #80]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ec:	d102      	bne.n	80015f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f2      	bne.n	80015da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001600:	d110      	bne.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e00f      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001606:	4b0b      	ldr	r3, [pc, #44]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800160e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001612:	d007      	beq.n	8001624 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001614:	4b07      	ldr	r3, [pc, #28]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800161c:	4a05      	ldr	r2, [pc, #20]	@ (8001634 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001622:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	40007000 	.word	0x40007000
 8001638:	20000014 	.word	0x20000014
 800163c:	431bde83 	.word	0x431bde83

08001640 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b088      	sub	sp, #32
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e3ca      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001652:	4b97      	ldr	r3, [pc, #604]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
 800165a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800165c:	4b94      	ldr	r3, [pc, #592]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0310 	and.w	r3, r3, #16
 800166e:	2b00      	cmp	r3, #0
 8001670:	f000 80e4 	beq.w	800183c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d007      	beq.n	800168a <HAL_RCC_OscConfig+0x4a>
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	2b0c      	cmp	r3, #12
 800167e:	f040 808b 	bne.w	8001798 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	2b01      	cmp	r3, #1
 8001686:	f040 8087 	bne.w	8001798 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800168a:	4b89      	ldr	r3, [pc, #548]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d005      	beq.n	80016a2 <HAL_RCC_OscConfig+0x62>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e3a2      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1a      	ldr	r2, [r3, #32]
 80016a6:	4b82      	ldr	r3, [pc, #520]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d004      	beq.n	80016bc <HAL_RCC_OscConfig+0x7c>
 80016b2:	4b7f      	ldr	r3, [pc, #508]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016ba:	e005      	b.n	80016c8 <HAL_RCC_OscConfig+0x88>
 80016bc:	4b7c      	ldr	r3, [pc, #496]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d223      	bcs.n	8001714 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fd55 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e383      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016e0:	4b73      	ldr	r3, [pc, #460]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a72      	ldr	r2, [pc, #456]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016e6:	f043 0308 	orr.w	r3, r3, #8
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b70      	ldr	r3, [pc, #448]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	496d      	ldr	r1, [pc, #436]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016fe:	4b6c      	ldr	r3, [pc, #432]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	021b      	lsls	r3, r3, #8
 800170c:	4968      	ldr	r1, [pc, #416]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800170e:	4313      	orrs	r3, r2
 8001710:	604b      	str	r3, [r1, #4]
 8001712:	e025      	b.n	8001760 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001714:	4b66      	ldr	r3, [pc, #408]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a65      	ldr	r2, [pc, #404]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800171a:	f043 0308 	orr.w	r3, r3, #8
 800171e:	6013      	str	r3, [r2, #0]
 8001720:	4b63      	ldr	r3, [pc, #396]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4960      	ldr	r1, [pc, #384]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800172e:	4313      	orrs	r3, r2
 8001730:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001732:	4b5f      	ldr	r3, [pc, #380]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	021b      	lsls	r3, r3, #8
 8001740:	495b      	ldr	r1, [pc, #364]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4618      	mov	r0, r3
 8001752:	f000 fd15 	bl	8002180 <RCC_SetFlashLatencyFromMSIRange>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e343      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001760:	f000 fc4a 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001764:	4602      	mov	r2, r0
 8001766:	4b52      	ldr	r3, [pc, #328]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	091b      	lsrs	r3, r3, #4
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	4950      	ldr	r1, [pc, #320]	@ (80018b4 <HAL_RCC_OscConfig+0x274>)
 8001772:	5ccb      	ldrb	r3, [r1, r3]
 8001774:	f003 031f 	and.w	r3, r3, #31
 8001778:	fa22 f303 	lsr.w	r3, r2, r3
 800177c:	4a4e      	ldr	r2, [pc, #312]	@ (80018b8 <HAL_RCC_OscConfig+0x278>)
 800177e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001780:	4b4e      	ldr	r3, [pc, #312]	@ (80018bc <HAL_RCC_OscConfig+0x27c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff f9b5 	bl	8000af4 <HAL_InitTick>
 800178a:	4603      	mov	r3, r0
 800178c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d052      	beq.n	800183a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	e327      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	699b      	ldr	r3, [r3, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d032      	beq.n	8001806 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017a0:	4b43      	ldr	r3, [pc, #268]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a42      	ldr	r2, [pc, #264]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017a6:	f043 0301 	orr.w	r3, r3, #1
 80017aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ac:	f7ff f9f2 	bl	8000b94 <HAL_GetTick>
 80017b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017b4:	f7ff f9ee 	bl	8000b94 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e310      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017c6:	4b3a      	ldr	r3, [pc, #232]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d0f0      	beq.n	80017b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017d2:	4b37      	ldr	r3, [pc, #220]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a36      	ldr	r2, [pc, #216]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	6013      	str	r3, [r2, #0]
 80017de:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a1b      	ldr	r3, [r3, #32]
 80017ea:	4931      	ldr	r1, [pc, #196]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017f0:	4b2f      	ldr	r3, [pc, #188]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	69db      	ldr	r3, [r3, #28]
 80017fc:	021b      	lsls	r3, r3, #8
 80017fe:	492c      	ldr	r1, [pc, #176]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001800:	4313      	orrs	r3, r2
 8001802:	604b      	str	r3, [r1, #4]
 8001804:	e01a      	b.n	800183c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001806:	4b2a      	ldr	r3, [pc, #168]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a29      	ldr	r2, [pc, #164]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800180c:	f023 0301 	bic.w	r3, r3, #1
 8001810:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001812:	f7ff f9bf 	bl	8000b94 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800181a:	f7ff f9bb 	bl	8000b94 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e2dd      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800182c:	4b20      	ldr	r3, [pc, #128]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0302 	and.w	r3, r3, #2
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x1da>
 8001838:	e000      	b.n	800183c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800183a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	2b00      	cmp	r3, #0
 8001846:	d074      	beq.n	8001932 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b08      	cmp	r3, #8
 800184c:	d005      	beq.n	800185a <HAL_RCC_OscConfig+0x21a>
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	2b0c      	cmp	r3, #12
 8001852:	d10e      	bne.n	8001872 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b03      	cmp	r3, #3
 8001858:	d10b      	bne.n	8001872 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800185a:	4b15      	ldr	r3, [pc, #84]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d064      	beq.n	8001930 <HAL_RCC_OscConfig+0x2f0>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d160      	bne.n	8001930 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e2ba      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800187a:	d106      	bne.n	800188a <HAL_RCC_OscConfig+0x24a>
 800187c:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001882:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e026      	b.n	80018d8 <HAL_RCC_OscConfig+0x298>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001892:	d115      	bne.n	80018c0 <HAL_RCC_OscConfig+0x280>
 8001894:	4b06      	ldr	r3, [pc, #24]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a05      	ldr	r2, [pc, #20]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 800189a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b03      	ldr	r3, [pc, #12]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a02      	ldr	r2, [pc, #8]	@ (80018b0 <HAL_RCC_OscConfig+0x270>)
 80018a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	e014      	b.n	80018d8 <HAL_RCC_OscConfig+0x298>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	08003d90 	.word	0x08003d90
 80018b8:	20000014 	.word	0x20000014
 80018bc:	20000018 	.word	0x20000018
 80018c0:	4ba0      	ldr	r3, [pc, #640]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a9f      	ldr	r2, [pc, #636]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b9d      	ldr	r3, [pc, #628]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a9c      	ldr	r2, [pc, #624]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d013      	beq.n	8001908 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f958 	bl	8000b94 <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e8:	f7ff f954 	bl	8000b94 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b64      	cmp	r3, #100	@ 0x64
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e276      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018fa:	4b92      	ldr	r3, [pc, #584]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d0f0      	beq.n	80018e8 <HAL_RCC_OscConfig+0x2a8>
 8001906:	e014      	b.n	8001932 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001908:	f7ff f944 	bl	8000b94 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800190e:	e008      	b.n	8001922 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001910:	f7ff f940 	bl	8000b94 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b64      	cmp	r3, #100	@ 0x64
 800191c:	d901      	bls.n	8001922 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e262      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001922:	4b88      	ldr	r3, [pc, #544]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1f0      	bne.n	8001910 <HAL_RCC_OscConfig+0x2d0>
 800192e:	e000      	b.n	8001932 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d060      	beq.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800193e:	69bb      	ldr	r3, [r7, #24]
 8001940:	2b04      	cmp	r3, #4
 8001942:	d005      	beq.n	8001950 <HAL_RCC_OscConfig+0x310>
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d119      	bne.n	800197e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	2b02      	cmp	r3, #2
 800194e:	d116      	bne.n	800197e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001950:	4b7c      	ldr	r3, [pc, #496]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <HAL_RCC_OscConfig+0x328>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d101      	bne.n	8001968 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e23f      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001968:	4b76      	ldr	r3, [pc, #472]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	691b      	ldr	r3, [r3, #16]
 8001974:	061b      	lsls	r3, r3, #24
 8001976:	4973      	ldr	r1, [pc, #460]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001978:	4313      	orrs	r3, r2
 800197a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800197c:	e040      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d023      	beq.n	80019ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001986:	4b6f      	ldr	r3, [pc, #444]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001990:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001992:	f7ff f8ff 	bl	8000b94 <HAL_GetTick>
 8001996:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001998:	e008      	b.n	80019ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800199a:	f7ff f8fb 	bl	8000b94 <HAL_GetTick>
 800199e:	4602      	mov	r2, r0
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	1ad3      	subs	r3, r2, r3
 80019a4:	2b02      	cmp	r3, #2
 80019a6:	d901      	bls.n	80019ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019a8:	2303      	movs	r3, #3
 80019aa:	e21d      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ac:	4b65      	ldr	r3, [pc, #404]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0f0      	beq.n	800199a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019b8:	4b62      	ldr	r3, [pc, #392]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	061b      	lsls	r3, r3, #24
 80019c6:	495f      	ldr	r1, [pc, #380]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019c8:	4313      	orrs	r3, r2
 80019ca:	604b      	str	r3, [r1, #4]
 80019cc:	e018      	b.n	8001a00 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019da:	f7ff f8db 	bl	8000b94 <HAL_GetTick>
 80019de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019e0:	e008      	b.n	80019f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e2:	f7ff f8d7 	bl	8000b94 <HAL_GetTick>
 80019e6:	4602      	mov	r2, r0
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	1ad3      	subs	r3, r2, r3
 80019ec:	2b02      	cmp	r3, #2
 80019ee:	d901      	bls.n	80019f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019f0:	2303      	movs	r3, #3
 80019f2:	e1f9      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019f4:	4b53      	ldr	r3, [pc, #332]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d1f0      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f003 0308 	and.w	r3, r3, #8
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d03c      	beq.n	8001a86 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	695b      	ldr	r3, [r3, #20]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d01c      	beq.n	8001a4e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a14:	4b4b      	ldr	r3, [pc, #300]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a24:	f7ff f8b6 	bl	8000b94 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f8b2 	bl	8000b94 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e1d4      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a3e:	4b41      	ldr	r3, [pc, #260]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a40:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d0ef      	beq.n	8001a2c <HAL_RCC_OscConfig+0x3ec>
 8001a4c:	e01b      	b.n	8001a86 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a4e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a54:	4a3b      	ldr	r2, [pc, #236]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a5e:	f7ff f899 	bl	8000b94 <HAL_GetTick>
 8001a62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a64:	e008      	b.n	8001a78 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a66:	f7ff f895 	bl	8000b94 <HAL_GetTick>
 8001a6a:	4602      	mov	r2, r0
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e1b7      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a78:	4b32      	ldr	r3, [pc, #200]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d1ef      	bne.n	8001a66 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0304 	and.w	r3, r3, #4
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 80a6 	beq.w	8001be0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a98:	4b2a      	ldr	r3, [pc, #168]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001a9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d10d      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aa4:	4b27      	ldr	r3, [pc, #156]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001aa6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa8:	4a26      	ldr	r2, [pc, #152]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ab0:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ab4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ab8:	60bb      	str	r3, [r7, #8]
 8001aba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001abc:	2301      	movs	r3, #1
 8001abe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	4b21      	ldr	r3, [pc, #132]	@ (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d118      	bne.n	8001afe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001acc:	4b1e      	ldr	r3, [pc, #120]	@ (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a1d      	ldr	r2, [pc, #116]	@ (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001ad2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ad6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ad8:	f7ff f85c 	bl	8000b94 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae0:	f7ff f858 	bl	8000b94 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e17a      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_RCC_OscConfig+0x508>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d108      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4d8>
 8001b06:	4b0f      	ldr	r3, [pc, #60]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b0e:	f043 0301 	orr.w	r3, r3, #1
 8001b12:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b16:	e029      	b.n	8001b6c <HAL_RCC_OscConfig+0x52c>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d115      	bne.n	8001b4c <HAL_RCC_OscConfig+0x50c>
 8001b20:	4b08      	ldr	r3, [pc, #32]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b26:	4a07      	ldr	r2, [pc, #28]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b28:	f043 0304 	orr.w	r3, r3, #4
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b36:	4a03      	ldr	r2, [pc, #12]	@ (8001b44 <HAL_RCC_OscConfig+0x504>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b40:	e014      	b.n	8001b6c <HAL_RCC_OscConfig+0x52c>
 8001b42:	bf00      	nop
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40007000 	.word	0x40007000
 8001b4c:	4b9c      	ldr	r3, [pc, #624]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b52:	4a9b      	ldr	r2, [pc, #620]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b54:	f023 0301 	bic.w	r3, r3, #1
 8001b58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b5c:	4b98      	ldr	r3, [pc, #608]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b62:	4a97      	ldr	r2, [pc, #604]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b64:	f023 0304 	bic.w	r3, r3, #4
 8001b68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d016      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff f80e 	bl	8000b94 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b7a:	e00a      	b.n	8001b92 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f80a 	bl	8000b94 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e12a      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b92:	4b8b      	ldr	r3, [pc, #556]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b98:	f003 0302 	and.w	r3, r3, #2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0ed      	beq.n	8001b7c <HAL_RCC_OscConfig+0x53c>
 8001ba0:	e015      	b.n	8001bce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba2:	f7fe fff7 	bl	8000b94 <HAL_GetTick>
 8001ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ba8:	e00a      	b.n	8001bc0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe fff3 	bl	8000b94 <HAL_GetTick>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	1ad3      	subs	r3, r2, r3
 8001bb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e113      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bc0:	4b7f      	ldr	r3, [pc, #508]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d1ed      	bne.n	8001baa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bce:	7ffb      	ldrb	r3, [r7, #31]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d105      	bne.n	8001be0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd4:	4b7a      	ldr	r3, [pc, #488]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001bd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bd8:	4a79      	ldr	r2, [pc, #484]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001bda:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bde:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	f000 80fe 	beq.w	8001de6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	f040 80d0 	bne.w	8001d94 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bf4:	4b72      	ldr	r3, [pc, #456]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	f003 0203 	and.w	r2, r3, #3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d130      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c12:	3b01      	subs	r3, #1
 8001c14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d127      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c24:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d11f      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001c34:	2a07      	cmp	r2, #7
 8001c36:	bf14      	ite	ne
 8001c38:	2201      	movne	r2, #1
 8001c3a:	2200      	moveq	r2, #0
 8001c3c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d113      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d109      	bne.n	8001c6a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c60:	085b      	lsrs	r3, r3, #1
 8001c62:	3b01      	subs	r3, #1
 8001c64:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d06e      	beq.n	8001d48 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	d069      	beq.n	8001d44 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c70:	4b53      	ldr	r3, [pc, #332]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d105      	bne.n	8001c88 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c7c:	4b50      	ldr	r3, [pc, #320]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e0ad      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c8c:	4b4c      	ldr	r3, [pc, #304]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a4b      	ldr	r2, [pc, #300]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001c92:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c96:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c98:	f7fe ff7c 	bl	8000b94 <HAL_GetTick>
 8001c9c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c9e:	e008      	b.n	8001cb2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca0:	f7fe ff78 	bl	8000b94 <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b02      	cmp	r3, #2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e09a      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cb2:	4b43      	ldr	r3, [pc, #268]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1f0      	bne.n	8001ca0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cbe:	4b40      	ldr	r3, [pc, #256]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	4b40      	ldr	r3, [pc, #256]	@ (8001dc4 <HAL_RCC_OscConfig+0x784>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001cce:	3a01      	subs	r2, #1
 8001cd0:	0112      	lsls	r2, r2, #4
 8001cd2:	4311      	orrs	r1, r2
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001cd8:	0212      	lsls	r2, r2, #8
 8001cda:	4311      	orrs	r1, r2
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001ce0:	0852      	lsrs	r2, r2, #1
 8001ce2:	3a01      	subs	r2, #1
 8001ce4:	0552      	lsls	r2, r2, #21
 8001ce6:	4311      	orrs	r1, r2
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001cec:	0852      	lsrs	r2, r2, #1
 8001cee:	3a01      	subs	r2, #1
 8001cf0:	0652      	lsls	r2, r2, #25
 8001cf2:	4311      	orrs	r1, r2
 8001cf4:	687a      	ldr	r2, [r7, #4]
 8001cf6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001cf8:	0912      	lsrs	r2, r2, #4
 8001cfa:	0452      	lsls	r2, r2, #17
 8001cfc:	430a      	orrs	r2, r1
 8001cfe:	4930      	ldr	r1, [pc, #192]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d04:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d10:	4b2b      	ldr	r3, [pc, #172]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	4a2a      	ldr	r2, [pc, #168]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d16:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d1a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d1c:	f7fe ff3a 	bl	8000b94 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d24:	f7fe ff36 	bl	8000b94 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e058      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d36:	4b22      	ldr	r3, [pc, #136]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0f0      	beq.n	8001d24 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d42:	e050      	b.n	8001de6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d44:	2301      	movs	r3, #1
 8001d46:	e04f      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d48:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d148      	bne.n	8001de6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d54:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a19      	ldr	r2, [pc, #100]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d5e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d60:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4a16      	ldr	r2, [pc, #88]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d6a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d6c:	f7fe ff12 	bl	8000b94 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7fe ff0e 	bl	8000b94 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e030      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x734>
 8001d92:	e028      	b.n	8001de6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	2b0c      	cmp	r3, #12
 8001d98:	d023      	beq.n	8001de2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9a:	4b09      	ldr	r3, [pc, #36]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a08      	ldr	r2, [pc, #32]	@ (8001dc0 <HAL_RCC_OscConfig+0x780>)
 8001da0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001da4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da6:	f7fe fef5 	bl	8000b94 <HAL_GetTick>
 8001daa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dac:	e00c      	b.n	8001dc8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dae:	f7fe fef1 	bl	8000b94 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d905      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e013      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
 8001dc0:	40021000 	.word	0x40021000
 8001dc4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc8:	4b09      	ldr	r3, [pc, #36]	@ (8001df0 <HAL_RCC_OscConfig+0x7b0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1ec      	bne.n	8001dae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dd4:	4b06      	ldr	r3, [pc, #24]	@ (8001df0 <HAL_RCC_OscConfig+0x7b0>)
 8001dd6:	68da      	ldr	r2, [r3, #12]
 8001dd8:	4905      	ldr	r1, [pc, #20]	@ (8001df0 <HAL_RCC_OscConfig+0x7b0>)
 8001dda:	4b06      	ldr	r3, [pc, #24]	@ (8001df4 <HAL_RCC_OscConfig+0x7b4>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	60cb      	str	r3, [r1, #12]
 8001de0:	e001      	b.n	8001de6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3720      	adds	r7, #32
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	feeefffc 	.word	0xfeeefffc

08001df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b084      	sub	sp, #16
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d101      	bne.n	8001e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0e7      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e0c:	4b75      	ldr	r3, [pc, #468]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0307 	and.w	r3, r3, #7
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d910      	bls.n	8001e3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1a:	4b72      	ldr	r3, [pc, #456]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f023 0207 	bic.w	r2, r3, #7
 8001e22:	4970      	ldr	r1, [pc, #448]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e2a:	4b6e      	ldr	r3, [pc, #440]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	683a      	ldr	r2, [r7, #0]
 8001e34:	429a      	cmp	r2, r3
 8001e36:	d001      	beq.n	8001e3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0cf      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d010      	beq.n	8001e6a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689a      	ldr	r2, [r3, #8]
 8001e4c:	4b66      	ldr	r3, [pc, #408]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d908      	bls.n	8001e6a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e58:	4b63      	ldr	r3, [pc, #396]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e5a:	689b      	ldr	r3, [r3, #8]
 8001e5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	4960      	ldr	r1, [pc, #384]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d04c      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b03      	cmp	r3, #3
 8001e7c:	d107      	bne.n	8001e8e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e7e:	4b5a      	ldr	r3, [pc, #360]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d121      	bne.n	8001ece <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e0a6      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e96:	4b54      	ldr	r3, [pc, #336]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d115      	bne.n	8001ece <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e09a      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001eae:	4b4e      	ldr	r3, [pc, #312]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e08e      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e086      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b46      	ldr	r3, [pc, #280]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4943      	ldr	r1, [pc, #268]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fe58 	bl	8000b94 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7fe fe54 	bl	8000b94 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e06e      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b3a      	ldr	r3, [pc, #232]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d010      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	689a      	ldr	r2, [r3, #8]
 8001f20:	4b31      	ldr	r3, [pc, #196]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d208      	bcs.n	8001f3e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	492b      	ldr	r1, [pc, #172]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f3e:	4b29      	ldr	r3, [pc, #164]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	683a      	ldr	r2, [r7, #0]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d210      	bcs.n	8001f6e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f4c:	4b25      	ldr	r3, [pc, #148]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f023 0207 	bic.w	r2, r3, #7
 8001f54:	4923      	ldr	r1, [pc, #140]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f5c:	4b21      	ldr	r3, [pc, #132]	@ (8001fe4 <HAL_RCC_ClockConfig+0x1ec>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 0307 	and.w	r3, r3, #7
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d001      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e036      	b.n	8001fdc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	4918      	ldr	r1, [pc, #96]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0308 	and.w	r3, r3, #8
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f98:	4b13      	ldr	r3, [pc, #76]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	00db      	lsls	r3, r3, #3
 8001fa6:	4910      	ldr	r1, [pc, #64]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fac:	f000 f824 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe8 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	091b      	lsrs	r3, r3, #4
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	490b      	ldr	r1, [pc, #44]	@ (8001fec <HAL_RCC_ClockConfig+0x1f4>)
 8001fbe:	5ccb      	ldrb	r3, [r1, r3]
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc8:	4a09      	ldr	r2, [pc, #36]	@ (8001ff0 <HAL_RCC_ClockConfig+0x1f8>)
 8001fca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001fcc:	4b09      	ldr	r3, [pc, #36]	@ (8001ff4 <HAL_RCC_ClockConfig+0x1fc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7fe fd8f 	bl	8000af4 <HAL_InitTick>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fda:	7afb      	ldrb	r3, [r7, #11]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3710      	adds	r7, #16
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40022000 	.word	0x40022000
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	08003d90 	.word	0x08003d90
 8001ff0:	20000014 	.word	0x20000014
 8001ff4:	20000018 	.word	0x20000018

08001ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b089      	sub	sp, #36	@ 0x24
 8001ffc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002006:	4b3e      	ldr	r3, [pc, #248]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f003 030c 	and.w	r3, r3, #12
 800200e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002010:	4b3b      	ldr	r3, [pc, #236]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	f003 0303 	and.w	r3, r3, #3
 8002018:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d005      	beq.n	800202c <HAL_RCC_GetSysClockFreq+0x34>
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	2b0c      	cmp	r3, #12
 8002024:	d121      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d11e      	bne.n	800206a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800202c:	4b34      	ldr	r3, [pc, #208]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0308 	and.w	r3, r3, #8
 8002034:	2b00      	cmp	r3, #0
 8002036:	d107      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002038:	4b31      	ldr	r3, [pc, #196]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800203a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 030f 	and.w	r3, r3, #15
 8002044:	61fb      	str	r3, [r7, #28]
 8002046:	e005      	b.n	8002054 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002048:	4b2d      	ldr	r3, [pc, #180]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	091b      	lsrs	r3, r3, #4
 800204e:	f003 030f 	and.w	r3, r3, #15
 8002052:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002054:	4a2b      	ldr	r2, [pc, #172]	@ (8002104 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800205c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10d      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002068:	e00a      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	2b04      	cmp	r3, #4
 800206e:	d102      	bne.n	8002076 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002070:	4b25      	ldr	r3, [pc, #148]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 8002072:	61bb      	str	r3, [r7, #24]
 8002074:	e004      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b08      	cmp	r3, #8
 800207a:	d101      	bne.n	8002080 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800207c:	4b23      	ldr	r3, [pc, #140]	@ (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 800207e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002080:	693b      	ldr	r3, [r7, #16]
 8002082:	2b0c      	cmp	r3, #12
 8002084:	d134      	bne.n	80020f0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002086:	4b1e      	ldr	r3, [pc, #120]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	f003 0303 	and.w	r3, r3, #3
 800208e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0xa6>
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	2b03      	cmp	r3, #3
 800209a:	d003      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0xac>
 800209c:	e005      	b.n	80020aa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800209e:	4b1a      	ldr	r3, [pc, #104]	@ (8002108 <HAL_RCC_GetSysClockFreq+0x110>)
 80020a0:	617b      	str	r3, [r7, #20]
      break;
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020a4:	4b19      	ldr	r3, [pc, #100]	@ (800210c <HAL_RCC_GetSysClockFreq+0x114>)
 80020a6:	617b      	str	r3, [r7, #20]
      break;
 80020a8:	e002      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	617b      	str	r3, [r7, #20]
      break;
 80020ae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	68db      	ldr	r3, [r3, #12]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	3301      	adds	r3, #1
 80020bc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020c0:	68db      	ldr	r3, [r3, #12]
 80020c2:	0a1b      	lsrs	r3, r3, #8
 80020c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	fb03 f202 	mul.w	r2, r3, r2
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80020d6:	4b0a      	ldr	r3, [pc, #40]	@ (8002100 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	0e5b      	lsrs	r3, r3, #25
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	3301      	adds	r3, #1
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020e6:	697a      	ldr	r2, [r7, #20]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020f0:	69bb      	ldr	r3, [r7, #24]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	@ 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	08003da8 	.word	0x08003da8
 8002108:	00f42400 	.word	0x00f42400
 800210c:	007a1200 	.word	0x007a1200

08002110 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b03      	ldr	r3, [pc, #12]	@ (8002124 <HAL_RCC_GetHCLKFreq+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20000014 	.word	0x20000014

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800212c:	f7ff fff0 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4904      	ldr	r1, [pc, #16]	@ (8002150 <HAL_RCC_GetPCLK1Freq+0x28>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002148:	4618      	mov	r0, r3
 800214a:	bd80      	pop	{r7, pc}
 800214c:	40021000 	.word	0x40021000
 8002150:	08003da0 	.word	0x08003da0

08002154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002158:	f7ff ffda 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b06      	ldr	r3, [pc, #24]	@ (8002178 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0adb      	lsrs	r3, r3, #11
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4904      	ldr	r1, [pc, #16]	@ (800217c <HAL_RCC_GetPCLK2Freq+0x28>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08003da0 	.word	0x08003da0

08002180 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002188:	2300      	movs	r3, #0
 800218a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800218c:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800218e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002190:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002198:	f7ff f9ee 	bl	8001578 <HAL_PWREx_GetVoltageRange>
 800219c:	6178      	str	r0, [r7, #20]
 800219e:	e014      	b.n	80021ca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021a0:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a4:	4a24      	ldr	r2, [pc, #144]	@ (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ac:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021b8:	f7ff f9de 	bl	8001578 <HAL_PWREx_GetVoltageRange>
 80021bc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021be:	4b1e      	ldr	r3, [pc, #120]	@ (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c2:	4a1d      	ldr	r2, [pc, #116]	@ (8002238 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d0:	d10b      	bne.n	80021ea <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b80      	cmp	r3, #128	@ 0x80
 80021d6:	d919      	bls.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2ba0      	cmp	r3, #160	@ 0xa0
 80021dc:	d902      	bls.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021de:	2302      	movs	r3, #2
 80021e0:	613b      	str	r3, [r7, #16]
 80021e2:	e013      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021e4:	2301      	movs	r3, #1
 80021e6:	613b      	str	r3, [r7, #16]
 80021e8:	e010      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b80      	cmp	r3, #128	@ 0x80
 80021ee:	d902      	bls.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021f0:	2303      	movs	r3, #3
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	e00a      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b80      	cmp	r3, #128	@ 0x80
 80021fa:	d102      	bne.n	8002202 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021fc:	2302      	movs	r3, #2
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e004      	b.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b70      	cmp	r3, #112	@ 0x70
 8002206:	d101      	bne.n	800220c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002208:	2301      	movs	r3, #1
 800220a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800220c:	4b0b      	ldr	r3, [pc, #44]	@ (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f023 0207 	bic.w	r2, r3, #7
 8002214:	4909      	ldr	r1, [pc, #36]	@ (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800221c:	4b07      	ldr	r3, [pc, #28]	@ (800223c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 0307 	and.w	r3, r3, #7
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	429a      	cmp	r2, r3
 8002228:	d001      	beq.n	800222e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	3718      	adds	r7, #24
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	40021000 	.word	0x40021000
 800223c:	40022000 	.word	0x40022000

08002240 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b086      	sub	sp, #24
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002248:	2300      	movs	r3, #0
 800224a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800224c:	2300      	movs	r3, #0
 800224e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002258:	2b00      	cmp	r3, #0
 800225a:	d041      	beq.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002260:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002264:	d02a      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002266:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800226a:	d824      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800226c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002270:	d008      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002272:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002276:	d81e      	bhi.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002278:	2b00      	cmp	r3, #0
 800227a:	d00a      	beq.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800227c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002280:	d010      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002282:	e018      	b.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002284:	4b86      	ldr	r3, [pc, #536]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002286:	68db      	ldr	r3, [r3, #12]
 8002288:	4a85      	ldr	r2, [pc, #532]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002290:	e015      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3304      	adds	r3, #4
 8002296:	2100      	movs	r1, #0
 8002298:	4618      	mov	r0, r3
 800229a:	f000 fabb 	bl	8002814 <RCCEx_PLLSAI1_Config>
 800229e:	4603      	mov	r3, r0
 80022a0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022a2:	e00c      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3320      	adds	r3, #32
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f000 fba6 	bl	80029fc <RCCEx_PLLSAI2_Config>
 80022b0:	4603      	mov	r3, r0
 80022b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022b4:	e003      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022b6:	2301      	movs	r3, #1
 80022b8:	74fb      	strb	r3, [r7, #19]
      break;
 80022ba:	e000      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022be:	7cfb      	ldrb	r3, [r7, #19]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10b      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022c4:	4b76      	ldr	r3, [pc, #472]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022ca:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80022d2:	4973      	ldr	r1, [pc, #460]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80022da:	e001      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d041      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80022f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022f4:	d02a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022f6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80022fa:	d824      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002300:	d008      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002302:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002306:	d81e      	bhi.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002308:	2b00      	cmp	r3, #0
 800230a:	d00a      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800230c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002310:	d010      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002312:	e018      	b.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002314:	4b62      	ldr	r3, [pc, #392]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a61      	ldr	r2, [pc, #388]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800231a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800231e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002320:	e015      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	3304      	adds	r3, #4
 8002326:	2100      	movs	r1, #0
 8002328:	4618      	mov	r0, r3
 800232a:	f000 fa73 	bl	8002814 <RCCEx_PLLSAI1_Config>
 800232e:	4603      	mov	r3, r0
 8002330:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002332:	e00c      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	3320      	adds	r3, #32
 8002338:	2100      	movs	r1, #0
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fb5e 	bl	80029fc <RCCEx_PLLSAI2_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002344:	e003      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	74fb      	strb	r3, [r7, #19]
      break;
 800234a:	e000      	b.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800234c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800234e:	7cfb      	ldrb	r3, [r7, #19]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d10b      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002354:	4b52      	ldr	r3, [pc, #328]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800235a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002362:	494f      	ldr	r1, [pc, #316]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002364:	4313      	orrs	r3, r2
 8002366:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800236a:	e001      	b.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800236c:	7cfb      	ldrb	r3, [r7, #19]
 800236e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a0 	beq.w	80024be <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002382:	4b47      	ldr	r3, [pc, #284]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800238e:	2301      	movs	r3, #1
 8002390:	e000      	b.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002392:	2300      	movs	r3, #0
 8002394:	2b00      	cmp	r3, #0
 8002396:	d00d      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002398:	4b41      	ldr	r3, [pc, #260]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239c:	4a40      	ldr	r2, [pc, #256]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a4:	4b3e      	ldr	r3, [pc, #248]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ac:	60bb      	str	r3, [r7, #8]
 80023ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023b0:	2301      	movs	r3, #1
 80023b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b4:	4b3b      	ldr	r3, [pc, #236]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a3a      	ldr	r2, [pc, #232]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c0:	f7fe fbe8 	bl	8000b94 <HAL_GetTick>
 80023c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c6:	e009      	b.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe fbe4 	bl	8000b94 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b02      	cmp	r3, #2
 80023d4:	d902      	bls.n	80023dc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	74fb      	strb	r3, [r7, #19]
        break;
 80023da:	e005      	b.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023dc:	4b31      	ldr	r3, [pc, #196]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ef      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d15c      	bne.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023ee:	4b2c      	ldr	r3, [pc, #176]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80023f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d01f      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	429a      	cmp	r2, r3
 800240a:	d019      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800240c:	4b24      	ldr	r3, [pc, #144]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002412:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002416:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002418:	4b21      	ldr	r3, [pc, #132]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800241e:	4a20      	ldr	r2, [pc, #128]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002424:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002428:	4b1d      	ldr	r3, [pc, #116]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800242e:	4a1c      	ldr	r2, [pc, #112]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002430:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002434:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002438:	4a19      	ldr	r2, [pc, #100]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	f003 0301 	and.w	r3, r3, #1
 8002446:	2b00      	cmp	r3, #0
 8002448:	d016      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244a:	f7fe fba3 	bl	8000b94 <HAL_GetTick>
 800244e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002450:	e00b      	b.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7fe fb9f 	bl	8000b94 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d902      	bls.n	800246a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	74fb      	strb	r3, [r7, #19]
            break;
 8002468:	e006      	b.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800246a:	4b0d      	ldr	r3, [pc, #52]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002470:	f003 0302 	and.w	r3, r3, #2
 8002474:	2b00      	cmp	r3, #0
 8002476:	d0ec      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d10c      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800247e:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002480:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002484:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800248e:	4904      	ldr	r1, [pc, #16]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002496:	e009      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002498:	7cfb      	ldrb	r3, [r7, #19]
 800249a:	74bb      	strb	r3, [r7, #18]
 800249c:	e006      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000
 80024a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a8:	7cfb      	ldrb	r3, [r7, #19]
 80024aa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024ac:	7c7b      	ldrb	r3, [r7, #17]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d105      	bne.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b2:	4b9e      	ldr	r3, [pc, #632]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	4a9d      	ldr	r2, [pc, #628]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024ca:	4b98      	ldr	r3, [pc, #608]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d0:	f023 0203 	bic.w	r2, r3, #3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024d8:	4994      	ldr	r1, [pc, #592]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024ec:	4b8f      	ldr	r3, [pc, #572]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	f023 020c 	bic.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024fa:	498c      	ldr	r1, [pc, #560]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800250e:	4b87      	ldr	r3, [pc, #540]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002514:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800251c:	4983      	ldr	r1, [pc, #524]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002530:	4b7e      	ldr	r3, [pc, #504]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002536:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253e:	497b      	ldr	r1, [pc, #492]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0310 	and.w	r3, r3, #16
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002552:	4b76      	ldr	r3, [pc, #472]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002554:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002558:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002560:	4972      	ldr	r1, [pc, #456]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0320 	and.w	r3, r3, #32
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002574:	4b6d      	ldr	r3, [pc, #436]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800257a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002582:	496a      	ldr	r1, [pc, #424]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002596:	4b65      	ldr	r3, [pc, #404]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002598:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800259c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a4:	4961      	ldr	r1, [pc, #388]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025b8:	4b5c      	ldr	r3, [pc, #368]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c6:	4959      	ldr	r1, [pc, #356]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025da:	4b54      	ldr	r3, [pc, #336]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025e8:	4950      	ldr	r1, [pc, #320]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025fc:	4b4b      	ldr	r3, [pc, #300]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002602:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260a:	4948      	ldr	r1, [pc, #288]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800261e:	4b43      	ldr	r3, [pc, #268]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002620:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002624:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800262c:	493f      	ldr	r1, [pc, #252]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d028      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002640:	4b3a      	ldr	r3, [pc, #232]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002642:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002646:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800264e:	4937      	ldr	r1, [pc, #220]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800265a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800265e:	d106      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002660:	4b32      	ldr	r3, [pc, #200]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	4a31      	ldr	r2, [pc, #196]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800266a:	60d3      	str	r3, [r2, #12]
 800266c:	e011      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002672:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002676:	d10c      	bne.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3304      	adds	r3, #4
 800267c:	2101      	movs	r1, #1
 800267e:	4618      	mov	r0, r3
 8002680:	f000 f8c8 	bl	8002814 <RCCEx_PLLSAI1_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002688:	7cfb      	ldrb	r3, [r7, #19]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800268e:	7cfb      	ldrb	r3, [r7, #19]
 8002690:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d028      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800269e:	4b23      	ldr	r3, [pc, #140]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ac:	491f      	ldr	r1, [pc, #124]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ae:	4313      	orrs	r3, r2
 80026b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026bc:	d106      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026be:	4b1b      	ldr	r3, [pc, #108]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	4a1a      	ldr	r2, [pc, #104]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80026c8:	60d3      	str	r3, [r2, #12]
 80026ca:	e011      	b.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80026d4:	d10c      	bne.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	3304      	adds	r3, #4
 80026da:	2101      	movs	r1, #1
 80026dc:	4618      	mov	r0, r3
 80026de:	f000 f899 	bl	8002814 <RCCEx_PLLSAI1_Config>
 80026e2:	4603      	mov	r3, r0
 80026e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026ec:	7cfb      	ldrb	r3, [r7, #19]
 80026ee:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d02b      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026fc:	4b0b      	ldr	r3, [pc, #44]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002702:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800270a:	4908      	ldr	r1, [pc, #32]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800270c:	4313      	orrs	r3, r2
 800270e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002716:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800271a:	d109      	bne.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800271c:	4b03      	ldr	r3, [pc, #12]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	4a02      	ldr	r2, [pc, #8]	@ (800272c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002726:	60d3      	str	r3, [r2, #12]
 8002728:	e014      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800272a:	bf00      	nop
 800272c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002734:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002738:	d10c      	bne.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3304      	adds	r3, #4
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f000 f867 	bl	8002814 <RCCEx_PLLSAI1_Config>
 8002746:	4603      	mov	r3, r0
 8002748:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d001      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002750:	7cfb      	ldrb	r3, [r7, #19]
 8002752:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d02f      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002760:	4b2b      	ldr	r3, [pc, #172]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002766:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800276e:	4928      	ldr	r1, [pc, #160]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002770:	4313      	orrs	r3, r2
 8002772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800277a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800277e:	d10d      	bne.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	2102      	movs	r1, #2
 8002786:	4618      	mov	r0, r3
 8002788:	f000 f844 	bl	8002814 <RCCEx_PLLSAI1_Config>
 800278c:	4603      	mov	r3, r0
 800278e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d014      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	74bb      	strb	r3, [r7, #18]
 800279a:	e011      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80027a0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80027a4:	d10c      	bne.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	3320      	adds	r3, #32
 80027aa:	2102      	movs	r1, #2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 f925 	bl	80029fc <RCCEx_PLLSAI2_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b6:	7cfb      	ldrb	r3, [r7, #19]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027cc:	4b10      	ldr	r3, [pc, #64]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d2:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80027da:	490d      	ldr	r1, [pc, #52]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00b      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027ee:	4b08      	ldr	r3, [pc, #32]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80027fe:	4904      	ldr	r1, [pc, #16]	@ (8002810 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002806:	7cbb      	ldrb	r3, [r7, #18]
}
 8002808:	4618      	mov	r0, r3
 800280a:	3718      	adds	r7, #24
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40021000 	.word	0x40021000

08002814 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b084      	sub	sp, #16
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800281e:	2300      	movs	r3, #0
 8002820:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002822:	4b75      	ldr	r3, [pc, #468]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	f003 0303 	and.w	r3, r3, #3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d018      	beq.n	8002860 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800282e:	4b72      	ldr	r3, [pc, #456]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002830:	68db      	ldr	r3, [r3, #12]
 8002832:	f003 0203 	and.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d10d      	bne.n	800285a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
       ||
 8002842:	2b00      	cmp	r3, #0
 8002844:	d009      	beq.n	800285a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002846:	4b6c      	ldr	r3, [pc, #432]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	091b      	lsrs	r3, r3, #4
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	1c5a      	adds	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
       ||
 8002856:	429a      	cmp	r2, r3
 8002858:	d047      	beq.n	80028ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	73fb      	strb	r3, [r7, #15]
 800285e:	e044      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b03      	cmp	r3, #3
 8002866:	d018      	beq.n	800289a <RCCEx_PLLSAI1_Config+0x86>
 8002868:	2b03      	cmp	r3, #3
 800286a:	d825      	bhi.n	80028b8 <RCCEx_PLLSAI1_Config+0xa4>
 800286c:	2b01      	cmp	r3, #1
 800286e:	d002      	beq.n	8002876 <RCCEx_PLLSAI1_Config+0x62>
 8002870:	2b02      	cmp	r3, #2
 8002872:	d009      	beq.n	8002888 <RCCEx_PLLSAI1_Config+0x74>
 8002874:	e020      	b.n	80028b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002876:	4b60      	ldr	r3, [pc, #384]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d11d      	bne.n	80028be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002886:	e01a      	b.n	80028be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002888:	4b5b      	ldr	r3, [pc, #364]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d116      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002898:	e013      	b.n	80028c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800289a:	4b57      	ldr	r3, [pc, #348]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10f      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028a6:	4b54      	ldr	r3, [pc, #336]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d109      	bne.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028b6:	e006      	b.n	80028c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      break;
 80028bc:	e004      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028be:	bf00      	nop
 80028c0:	e002      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c2:	bf00      	nop
 80028c4:	e000      	b.n	80028c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10d      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ce:	4b4a      	ldr	r3, [pc, #296]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6819      	ldr	r1, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	011b      	lsls	r3, r3, #4
 80028e2:	430b      	orrs	r3, r1
 80028e4:	4944      	ldr	r1, [pc, #272]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	4313      	orrs	r3, r2
 80028e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028ea:	7bfb      	ldrb	r3, [r7, #15]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d17d      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028f0:	4b41      	ldr	r3, [pc, #260]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a40      	ldr	r2, [pc, #256]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80028fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fc:	f7fe f94a 	bl	8000b94 <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002902:	e009      	b.n	8002918 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002904:	f7fe f946 	bl	8000b94 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d902      	bls.n	8002918 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	73fb      	strb	r3, [r7, #15]
        break;
 8002916:	e005      	b.n	8002924 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002918:	4b37      	ldr	r3, [pc, #220]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ef      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d160      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d111      	bne.n	8002954 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002930:	4b31      	ldr	r3, [pc, #196]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800293c:	687a      	ldr	r2, [r7, #4]
 800293e:	6892      	ldr	r2, [r2, #8]
 8002940:	0211      	lsls	r1, r2, #8
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	68d2      	ldr	r2, [r2, #12]
 8002946:	0912      	lsrs	r2, r2, #4
 8002948:	0452      	lsls	r2, r2, #17
 800294a:	430a      	orrs	r2, r1
 800294c:	492a      	ldr	r1, [pc, #168]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	610b      	str	r3, [r1, #16]
 8002952:	e027      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b01      	cmp	r3, #1
 8002958:	d112      	bne.n	8002980 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800295a:	4b27      	ldr	r3, [pc, #156]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002962:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6892      	ldr	r2, [r2, #8]
 800296a:	0211      	lsls	r1, r2, #8
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6912      	ldr	r2, [r2, #16]
 8002970:	0852      	lsrs	r2, r2, #1
 8002972:	3a01      	subs	r2, #1
 8002974:	0552      	lsls	r2, r2, #21
 8002976:	430a      	orrs	r2, r1
 8002978:	491f      	ldr	r1, [pc, #124]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	610b      	str	r3, [r1, #16]
 800297e:	e011      	b.n	80029a4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002980:	4b1d      	ldr	r3, [pc, #116]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002988:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6892      	ldr	r2, [r2, #8]
 8002990:	0211      	lsls	r1, r2, #8
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6952      	ldr	r2, [r2, #20]
 8002996:	0852      	lsrs	r2, r2, #1
 8002998:	3a01      	subs	r2, #1
 800299a:	0652      	lsls	r2, r2, #25
 800299c:	430a      	orrs	r2, r1
 800299e:	4916      	ldr	r1, [pc, #88]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a0:	4313      	orrs	r3, r2
 80029a2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029a4:	4b14      	ldr	r3, [pc, #80]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a13      	ldr	r2, [pc, #76]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029aa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80029ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7fe f8f0 	bl	8000b94 <HAL_GetTick>
 80029b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029b6:	e009      	b.n	80029cc <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b8:	f7fe f8ec 	bl	8000b94 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	d902      	bls.n	80029cc <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029c6:	2303      	movs	r3, #3
 80029c8:	73fb      	strb	r3, [r7, #15]
          break;
 80029ca:	e005      	b.n	80029d8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029cc:	4b0a      	ldr	r3, [pc, #40]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d0ef      	beq.n	80029b8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029de:	4b06      	ldr	r3, [pc, #24]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e0:	691a      	ldr	r2, [r3, #16]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	4904      	ldr	r1, [pc, #16]	@ (80029f8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	bf00      	nop
 80029f8:	40021000 	.word	0x40021000

080029fc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b084      	sub	sp, #16
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a06:	2300      	movs	r3, #0
 8002a08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a16:	4b67      	ldr	r3, [pc, #412]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f003 0203 	and.w	r2, r3, #3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d10d      	bne.n	8002a42 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
       ||
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d009      	beq.n	8002a42 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a2e:	4b61      	ldr	r3, [pc, #388]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	091b      	lsrs	r3, r3, #4
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	1c5a      	adds	r2, r3, #1
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
       ||
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d047      	beq.n	8002ad2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
 8002a46:	e044      	b.n	8002ad2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d018      	beq.n	8002a82 <RCCEx_PLLSAI2_Config+0x86>
 8002a50:	2b03      	cmp	r3, #3
 8002a52:	d825      	bhi.n	8002aa0 <RCCEx_PLLSAI2_Config+0xa4>
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d002      	beq.n	8002a5e <RCCEx_PLLSAI2_Config+0x62>
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d009      	beq.n	8002a70 <RCCEx_PLLSAI2_Config+0x74>
 8002a5c:	e020      	b.n	8002aa0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a5e:	4b55      	ldr	r3, [pc, #340]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d11d      	bne.n	8002aa6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a6e:	e01a      	b.n	8002aa6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a70:	4b50      	ldr	r3, [pc, #320]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d116      	bne.n	8002aaa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a80:	e013      	b.n	8002aaa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a82:	4b4c      	ldr	r3, [pc, #304]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10f      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a8e:	4b49      	ldr	r3, [pc, #292]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a9e:	e006      	b.n	8002aae <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8002aa4:	e004      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aa6:	bf00      	nop
 8002aa8:	e002      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aaa:	bf00      	nop
 8002aac:	e000      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002aae:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d10d      	bne.n	8002ad2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ab6:	4b3f      	ldr	r3, [pc, #252]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6819      	ldr	r1, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	430b      	orrs	r3, r1
 8002acc:	4939      	ldr	r1, [pc, #228]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002ad2:	7bfb      	ldrb	r3, [r7, #15]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d167      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ad8:	4b36      	ldr	r3, [pc, #216]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a35      	ldr	r2, [pc, #212]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ade:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ae2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ae4:	f7fe f856 	bl	8000b94 <HAL_GetTick>
 8002ae8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002aea:	e009      	b.n	8002b00 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aec:	f7fe f852 	bl	8000b94 <HAL_GetTick>
 8002af0:	4602      	mov	r2, r0
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	1ad3      	subs	r3, r2, r3
 8002af6:	2b02      	cmp	r3, #2
 8002af8:	d902      	bls.n	8002b00 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002afa:	2303      	movs	r3, #3
 8002afc:	73fb      	strb	r3, [r7, #15]
        break;
 8002afe:	e005      	b.n	8002b0c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b00:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1ef      	bne.n	8002aec <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d14a      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b18:	4b26      	ldr	r3, [pc, #152]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1a:	695b      	ldr	r3, [r3, #20]
 8002b1c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002b20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	6892      	ldr	r2, [r2, #8]
 8002b28:	0211      	lsls	r1, r2, #8
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68d2      	ldr	r2, [r2, #12]
 8002b2e:	0912      	lsrs	r2, r2, #4
 8002b30:	0452      	lsls	r2, r2, #17
 8002b32:	430a      	orrs	r2, r1
 8002b34:	491f      	ldr	r1, [pc, #124]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	614b      	str	r3, [r1, #20]
 8002b3a:	e011      	b.n	8002b60 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3e:	695b      	ldr	r3, [r3, #20]
 8002b40:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002b44:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
 8002b4c:	0211      	lsls	r1, r2, #8
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6912      	ldr	r2, [r2, #16]
 8002b52:	0852      	lsrs	r2, r2, #1
 8002b54:	3a01      	subs	r2, #1
 8002b56:	0652      	lsls	r2, r2, #25
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	4916      	ldr	r1, [pc, #88]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b60:	4b14      	ldr	r3, [pc, #80]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a13      	ldr	r2, [pc, #76]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b6a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7fe f812 	bl	8000b94 <HAL_GetTick>
 8002b70:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b72:	e009      	b.n	8002b88 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b74:	f7fe f80e 	bl	8000b94 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d902      	bls.n	8002b88 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b82:	2303      	movs	r3, #3
 8002b84:	73fb      	strb	r3, [r7, #15]
          break;
 8002b86:	e005      	b.n	8002b94 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b88:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0ef      	beq.n	8002b74 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b94:	7bfb      	ldrb	r3, [r7, #15]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d106      	bne.n	8002ba8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b9a:	4b06      	ldr	r3, [pc, #24]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	4904      	ldr	r1, [pc, #16]	@ (8002bb4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40021000 	.word	0x40021000

08002bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e040      	b.n	8002c4c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d106      	bne.n	8002be0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f7fd fe32 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2224      	movs	r2, #36	@ 0x24
 8002be4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f022 0201 	bic.w	r2, r2, #1
 8002bf4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d002      	beq.n	8002c04 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 fc5c 	bl	80034bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f9a1 	bl	8002f4c <UART_SetConfig>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e01b      	b.n	8002c4c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	685a      	ldr	r2, [r3, #4]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c22:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c32:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f042 0201 	orr.w	r2, r2, #1
 8002c42:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 fcdb 	bl	8003600 <UART_CheckIdleState>
 8002c4a:	4603      	mov	r3, r0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}

08002c54 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b08a      	sub	sp, #40	@ 0x28
 8002c58:	af02      	add	r7, sp, #8
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	603b      	str	r3, [r7, #0]
 8002c60:	4613      	mov	r3, r2
 8002c62:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d177      	bne.n	8002d5c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d002      	beq.n	8002c78 <HAL_UART_Transmit+0x24>
 8002c72:	88fb      	ldrh	r3, [r7, #6]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e070      	b.n	8002d5e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2221      	movs	r2, #33	@ 0x21
 8002c88:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c8a:	f7fd ff83 	bl	8000b94 <HAL_GetTick>
 8002c8e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	88fa      	ldrh	r2, [r7, #6]
 8002c94:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	88fa      	ldrh	r2, [r7, #6]
 8002c9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ca8:	d108      	bne.n	8002cbc <HAL_UART_Transmit+0x68>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d104      	bne.n	8002cbc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	e003      	b.n	8002cc4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002cc4:	e02f      	b.n	8002d26 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2180      	movs	r1, #128	@ 0x80
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fd3d 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d004      	beq.n	8002ce6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2220      	movs	r2, #32
 8002ce0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e03b      	b.n	8002d5e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d10b      	bne.n	8002d04 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	881a      	ldrh	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cf8:	b292      	uxth	r2, r2
 8002cfa:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	3302      	adds	r3, #2
 8002d00:	61bb      	str	r3, [r7, #24]
 8002d02:	e007      	b.n	8002d14 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	781a      	ldrb	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3301      	adds	r3, #1
 8002d12:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1c9      	bne.n	8002cc6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2140      	movs	r1, #64	@ 0x40
 8002d3c:	68f8      	ldr	r0, [r7, #12]
 8002d3e:	f000 fd07 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d004      	beq.n	8002d52 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2220      	movs	r2, #32
 8002d4c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e005      	b.n	8002d5e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	e000      	b.n	8002d5e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d5c:	2302      	movs	r3, #2
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3720      	adds	r7, #32
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b08a      	sub	sp, #40	@ 0x28
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002d7a:	2b20      	cmp	r3, #32
 8002d7c:	d165      	bne.n	8002e4a <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d002      	beq.n	8002d8a <HAL_UART_Transmit_DMA+0x22>
 8002d84:	88fb      	ldrh	r3, [r7, #6]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e05e      	b.n	8002e4c <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	68ba      	ldr	r2, [r7, #8]
 8002d92:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	88fa      	ldrh	r2, [r7, #6]
 8002d98:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2221      	movs	r2, #33	@ 0x21
 8002db0:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d027      	beq.n	8002e0a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dbe:	4a25      	ldr	r2, [pc, #148]	@ (8002e54 <HAL_UART_Transmit_DMA+0xec>)
 8002dc0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc6:	4a24      	ldr	r2, [pc, #144]	@ (8002e58 <HAL_UART_Transmit_DMA+0xf0>)
 8002dc8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dce:	4a23      	ldr	r2, [pc, #140]	@ (8002e5c <HAL_UART_Transmit_DMA+0xf4>)
 8002dd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002de2:	4619      	mov	r1, r3
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	3328      	adds	r3, #40	@ 0x28
 8002dea:	461a      	mov	r2, r3
 8002dec:	88fb      	ldrh	r3, [r7, #6]
 8002dee:	f7fe f8a7 	bl	8000f40 <HAL_DMA_Start_IT>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d008      	beq.n	8002e0a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2220      	movs	r2, #32
 8002e04:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e020      	b.n	8002e4c <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2240      	movs	r2, #64	@ 0x40
 8002e10:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3308      	adds	r3, #8
 8002e18:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	e853 3f00 	ldrex	r3, [r3]
 8002e20:	613b      	str	r3, [r7, #16]
   return(result);
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	3308      	adds	r3, #8
 8002e30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e32:	623a      	str	r2, [r7, #32]
 8002e34:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	69f9      	ldr	r1, [r7, #28]
 8002e38:	6a3a      	ldr	r2, [r7, #32]
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e5      	bne.n	8002e12 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8002e46:	2300      	movs	r3, #0
 8002e48:	e000      	b.n	8002e4c <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8002e4a:	2302      	movs	r3, #2
  }
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3728      	adds	r7, #40	@ 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	08003a81 	.word	0x08003a81
 8002e58:	08003b1b 	.word	0x08003b1b
 8002e5c:	08003ca1 	.word	0x08003ca1

08002e60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b08a      	sub	sp, #40	@ 0x28
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002e74:	2b20      	cmp	r3, #32
 8002e76:	d137      	bne.n	8002ee8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d002      	beq.n	8002e84 <HAL_UART_Receive_DMA+0x24>
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e030      	b.n	8002eea <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a18      	ldr	r2, [pc, #96]	@ (8002ef4 <HAL_UART_Receive_DMA+0x94>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d01f      	beq.n	8002ed8 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d018      	beq.n	8002ed8 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	e853 3f00 	ldrex	r3, [r3]
 8002eb2:	613b      	str	r3, [r7, #16]
   return(result);
 8002eb4:	693b      	ldr	r3, [r7, #16]
 8002eb6:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002eba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ec4:	623b      	str	r3, [r7, #32]
 8002ec6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	69f9      	ldr	r1, [r7, #28]
 8002eca:	6a3a      	ldr	r2, [r7, #32]
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e6      	bne.n	8002ea6 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002ed8:	88fb      	ldrh	r3, [r7, #6]
 8002eda:	461a      	mov	r2, r3
 8002edc:	68b9      	ldr	r1, [r7, #8]
 8002ede:	68f8      	ldr	r0, [r7, #12]
 8002ee0:	f000 fca4 	bl	800382c <UART_Start_Receive_DMA>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	e000      	b.n	8002eea <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002ee8:	2302      	movs	r3, #2
  }
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3728      	adds	r7, #40	@ 0x28
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40008000 	.word	0x40008000

08002ef8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f00:	bf00      	nop
 8002f02:	370c      	adds	r7, #12
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr

08002f0c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr

08002f20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b083      	sub	sp, #12
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f28:	bf00      	nop
 8002f2a:	370c      	adds	r7, #12
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr

08002f34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f40:	bf00      	nop
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f50:	b08a      	sub	sp, #40	@ 0x28
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	689a      	ldr	r2, [r3, #8]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	431a      	orrs	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	69db      	ldr	r3, [r3, #28]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	4ba4      	ldr	r3, [pc, #656]	@ (800320c <UART_SetConfig+0x2c0>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	6812      	ldr	r2, [r2, #0]
 8002f82:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002f84:	430b      	orrs	r3, r1
 8002f86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	68da      	ldr	r2, [r3, #12]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	699b      	ldr	r3, [r3, #24]
 8002fa2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a99      	ldr	r2, [pc, #612]	@ (8003210 <UART_SetConfig+0x2c4>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d004      	beq.n	8002fb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a1b      	ldr	r3, [r3, #32]
 8002fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a90      	ldr	r2, [pc, #576]	@ (8003214 <UART_SetConfig+0x2c8>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d126      	bne.n	8003024 <UART_SetConfig+0xd8>
 8002fd6:	4b90      	ldr	r3, [pc, #576]	@ (8003218 <UART_SetConfig+0x2cc>)
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	f003 0303 	and.w	r3, r3, #3
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d81b      	bhi.n	800301c <UART_SetConfig+0xd0>
 8002fe4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fec <UART_SetConfig+0xa0>)
 8002fe6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fea:	bf00      	nop
 8002fec:	08002ffd 	.word	0x08002ffd
 8002ff0:	0800300d 	.word	0x0800300d
 8002ff4:	08003005 	.word	0x08003005
 8002ff8:	08003015 	.word	0x08003015
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003002:	e116      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003004:	2302      	movs	r3, #2
 8003006:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300a:	e112      	b.n	8003232 <UART_SetConfig+0x2e6>
 800300c:	2304      	movs	r3, #4
 800300e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003012:	e10e      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003014:	2308      	movs	r3, #8
 8003016:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301a:	e10a      	b.n	8003232 <UART_SetConfig+0x2e6>
 800301c:	2310      	movs	r3, #16
 800301e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003022:	e106      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a7c      	ldr	r2, [pc, #496]	@ (800321c <UART_SetConfig+0x2d0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d138      	bne.n	80030a0 <UART_SetConfig+0x154>
 800302e:	4b7a      	ldr	r3, [pc, #488]	@ (8003218 <UART_SetConfig+0x2cc>)
 8003030:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	2b0c      	cmp	r3, #12
 800303a:	d82d      	bhi.n	8003098 <UART_SetConfig+0x14c>
 800303c:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0xf8>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003079 	.word	0x08003079
 8003048:	08003099 	.word	0x08003099
 800304c:	08003099 	.word	0x08003099
 8003050:	08003099 	.word	0x08003099
 8003054:	08003089 	.word	0x08003089
 8003058:	08003099 	.word	0x08003099
 800305c:	08003099 	.word	0x08003099
 8003060:	08003099 	.word	0x08003099
 8003064:	08003081 	.word	0x08003081
 8003068:	08003099 	.word	0x08003099
 800306c:	08003099 	.word	0x08003099
 8003070:	08003099 	.word	0x08003099
 8003074:	08003091 	.word	0x08003091
 8003078:	2300      	movs	r3, #0
 800307a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800307e:	e0d8      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003080:	2302      	movs	r3, #2
 8003082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003086:	e0d4      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003088:	2304      	movs	r3, #4
 800308a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800308e:	e0d0      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003090:	2308      	movs	r3, #8
 8003092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003096:	e0cc      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003098:	2310      	movs	r3, #16
 800309a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800309e:	e0c8      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003220 <UART_SetConfig+0x2d4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d125      	bne.n	80030f6 <UART_SetConfig+0x1aa>
 80030aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003218 <UART_SetConfig+0x2cc>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80030b4:	2b30      	cmp	r3, #48	@ 0x30
 80030b6:	d016      	beq.n	80030e6 <UART_SetConfig+0x19a>
 80030b8:	2b30      	cmp	r3, #48	@ 0x30
 80030ba:	d818      	bhi.n	80030ee <UART_SetConfig+0x1a2>
 80030bc:	2b20      	cmp	r3, #32
 80030be:	d00a      	beq.n	80030d6 <UART_SetConfig+0x18a>
 80030c0:	2b20      	cmp	r3, #32
 80030c2:	d814      	bhi.n	80030ee <UART_SetConfig+0x1a2>
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d002      	beq.n	80030ce <UART_SetConfig+0x182>
 80030c8:	2b10      	cmp	r3, #16
 80030ca:	d008      	beq.n	80030de <UART_SetConfig+0x192>
 80030cc:	e00f      	b.n	80030ee <UART_SetConfig+0x1a2>
 80030ce:	2300      	movs	r3, #0
 80030d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030d4:	e0ad      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030d6:	2302      	movs	r3, #2
 80030d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030dc:	e0a9      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030de:	2304      	movs	r3, #4
 80030e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030e4:	e0a5      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030e6:	2308      	movs	r3, #8
 80030e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030ec:	e0a1      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030ee:	2310      	movs	r3, #16
 80030f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80030f4:	e09d      	b.n	8003232 <UART_SetConfig+0x2e6>
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003224 <UART_SetConfig+0x2d8>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d125      	bne.n	800314c <UART_SetConfig+0x200>
 8003100:	4b45      	ldr	r3, [pc, #276]	@ (8003218 <UART_SetConfig+0x2cc>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800310a:	2bc0      	cmp	r3, #192	@ 0xc0
 800310c:	d016      	beq.n	800313c <UART_SetConfig+0x1f0>
 800310e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003110:	d818      	bhi.n	8003144 <UART_SetConfig+0x1f8>
 8003112:	2b80      	cmp	r3, #128	@ 0x80
 8003114:	d00a      	beq.n	800312c <UART_SetConfig+0x1e0>
 8003116:	2b80      	cmp	r3, #128	@ 0x80
 8003118:	d814      	bhi.n	8003144 <UART_SetConfig+0x1f8>
 800311a:	2b00      	cmp	r3, #0
 800311c:	d002      	beq.n	8003124 <UART_SetConfig+0x1d8>
 800311e:	2b40      	cmp	r3, #64	@ 0x40
 8003120:	d008      	beq.n	8003134 <UART_SetConfig+0x1e8>
 8003122:	e00f      	b.n	8003144 <UART_SetConfig+0x1f8>
 8003124:	2300      	movs	r3, #0
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800312a:	e082      	b.n	8003232 <UART_SetConfig+0x2e6>
 800312c:	2302      	movs	r3, #2
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003132:	e07e      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003134:	2304      	movs	r3, #4
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800313a:	e07a      	b.n	8003232 <UART_SetConfig+0x2e6>
 800313c:	2308      	movs	r3, #8
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003142:	e076      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003144:	2310      	movs	r3, #16
 8003146:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800314a:	e072      	b.n	8003232 <UART_SetConfig+0x2e6>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a35      	ldr	r2, [pc, #212]	@ (8003228 <UART_SetConfig+0x2dc>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d12a      	bne.n	80031ac <UART_SetConfig+0x260>
 8003156:	4b30      	ldr	r3, [pc, #192]	@ (8003218 <UART_SetConfig+0x2cc>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003160:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003164:	d01a      	beq.n	800319c <UART_SetConfig+0x250>
 8003166:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800316a:	d81b      	bhi.n	80031a4 <UART_SetConfig+0x258>
 800316c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003170:	d00c      	beq.n	800318c <UART_SetConfig+0x240>
 8003172:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003176:	d815      	bhi.n	80031a4 <UART_SetConfig+0x258>
 8003178:	2b00      	cmp	r3, #0
 800317a:	d003      	beq.n	8003184 <UART_SetConfig+0x238>
 800317c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003180:	d008      	beq.n	8003194 <UART_SetConfig+0x248>
 8003182:	e00f      	b.n	80031a4 <UART_SetConfig+0x258>
 8003184:	2300      	movs	r3, #0
 8003186:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800318a:	e052      	b.n	8003232 <UART_SetConfig+0x2e6>
 800318c:	2302      	movs	r3, #2
 800318e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003192:	e04e      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003194:	2304      	movs	r3, #4
 8003196:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800319a:	e04a      	b.n	8003232 <UART_SetConfig+0x2e6>
 800319c:	2308      	movs	r3, #8
 800319e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031a2:	e046      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031a4:	2310      	movs	r3, #16
 80031a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031aa:	e042      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a17      	ldr	r2, [pc, #92]	@ (8003210 <UART_SetConfig+0x2c4>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d13a      	bne.n	800322c <UART_SetConfig+0x2e0>
 80031b6:	4b18      	ldr	r3, [pc, #96]	@ (8003218 <UART_SetConfig+0x2cc>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80031c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031c4:	d01a      	beq.n	80031fc <UART_SetConfig+0x2b0>
 80031c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80031ca:	d81b      	bhi.n	8003204 <UART_SetConfig+0x2b8>
 80031cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031d0:	d00c      	beq.n	80031ec <UART_SetConfig+0x2a0>
 80031d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031d6:	d815      	bhi.n	8003204 <UART_SetConfig+0x2b8>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d003      	beq.n	80031e4 <UART_SetConfig+0x298>
 80031dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031e0:	d008      	beq.n	80031f4 <UART_SetConfig+0x2a8>
 80031e2:	e00f      	b.n	8003204 <UART_SetConfig+0x2b8>
 80031e4:	2300      	movs	r3, #0
 80031e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031ea:	e022      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031ec:	2302      	movs	r3, #2
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031f2:	e01e      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031f4:	2304      	movs	r3, #4
 80031f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80031fa:	e01a      	b.n	8003232 <UART_SetConfig+0x2e6>
 80031fc:	2308      	movs	r3, #8
 80031fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003202:	e016      	b.n	8003232 <UART_SetConfig+0x2e6>
 8003204:	2310      	movs	r3, #16
 8003206:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800320a:	e012      	b.n	8003232 <UART_SetConfig+0x2e6>
 800320c:	efff69f3 	.word	0xefff69f3
 8003210:	40008000 	.word	0x40008000
 8003214:	40013800 	.word	0x40013800
 8003218:	40021000 	.word	0x40021000
 800321c:	40004400 	.word	0x40004400
 8003220:	40004800 	.word	0x40004800
 8003224:	40004c00 	.word	0x40004c00
 8003228:	40005000 	.word	0x40005000
 800322c:	2310      	movs	r3, #16
 800322e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a9f      	ldr	r2, [pc, #636]	@ (80034b4 <UART_SetConfig+0x568>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d17a      	bne.n	8003332 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800323c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003240:	2b08      	cmp	r3, #8
 8003242:	d824      	bhi.n	800328e <UART_SetConfig+0x342>
 8003244:	a201      	add	r2, pc, #4	@ (adr r2, 800324c <UART_SetConfig+0x300>)
 8003246:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800324a:	bf00      	nop
 800324c:	08003271 	.word	0x08003271
 8003250:	0800328f 	.word	0x0800328f
 8003254:	08003279 	.word	0x08003279
 8003258:	0800328f 	.word	0x0800328f
 800325c:	0800327f 	.word	0x0800327f
 8003260:	0800328f 	.word	0x0800328f
 8003264:	0800328f 	.word	0x0800328f
 8003268:	0800328f 	.word	0x0800328f
 800326c:	08003287 	.word	0x08003287
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003270:	f7fe ff5a 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003274:	61f8      	str	r0, [r7, #28]
        break;
 8003276:	e010      	b.n	800329a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003278:	4b8f      	ldr	r3, [pc, #572]	@ (80034b8 <UART_SetConfig+0x56c>)
 800327a:	61fb      	str	r3, [r7, #28]
        break;
 800327c:	e00d      	b.n	800329a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800327e:	f7fe febb 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8003282:	61f8      	str	r0, [r7, #28]
        break;
 8003284:	e009      	b.n	800329a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003286:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800328a:	61fb      	str	r3, [r7, #28]
        break;
 800328c:	e005      	b.n	800329a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 800328e:	2300      	movs	r3, #0
 8003290:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003298:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	f000 80fb 	beq.w	8003498 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	005b      	lsls	r3, r3, #1
 80032aa:	4413      	add	r3, r2
 80032ac:	69fa      	ldr	r2, [r7, #28]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d305      	bcc.n	80032be <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80032b8:	69fa      	ldr	r2, [r7, #28]
 80032ba:	429a      	cmp	r2, r3
 80032bc:	d903      	bls.n	80032c6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80032c4:	e0e8      	b.n	8003498 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	2200      	movs	r2, #0
 80032ca:	461c      	mov	r4, r3
 80032cc:	4615      	mov	r5, r2
 80032ce:	f04f 0200 	mov.w	r2, #0
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	022b      	lsls	r3, r5, #8
 80032d8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80032dc:	0222      	lsls	r2, r4, #8
 80032de:	68f9      	ldr	r1, [r7, #12]
 80032e0:	6849      	ldr	r1, [r1, #4]
 80032e2:	0849      	lsrs	r1, r1, #1
 80032e4:	2000      	movs	r0, #0
 80032e6:	4688      	mov	r8, r1
 80032e8:	4681      	mov	r9, r0
 80032ea:	eb12 0a08 	adds.w	sl, r2, r8
 80032ee:	eb43 0b09 	adc.w	fp, r3, r9
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	603b      	str	r3, [r7, #0]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003300:	4650      	mov	r0, sl
 8003302:	4659      	mov	r1, fp
 8003304:	f7fc ff68 	bl	80001d8 <__aeabi_uldivmod>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4613      	mov	r3, r2
 800330e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003316:	d308      	bcc.n	800332a <UART_SetConfig+0x3de>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800331e:	d204      	bcs.n	800332a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	60da      	str	r2, [r3, #12]
 8003328:	e0b6      	b.n	8003498 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003330:	e0b2      	b.n	8003498 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	69db      	ldr	r3, [r3, #28]
 8003336:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800333a:	d15e      	bne.n	80033fa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800333c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003340:	2b08      	cmp	r3, #8
 8003342:	d828      	bhi.n	8003396 <UART_SetConfig+0x44a>
 8003344:	a201      	add	r2, pc, #4	@ (adr r2, 800334c <UART_SetConfig+0x400>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	08003371 	.word	0x08003371
 8003350:	08003379 	.word	0x08003379
 8003354:	08003381 	.word	0x08003381
 8003358:	08003397 	.word	0x08003397
 800335c:	08003387 	.word	0x08003387
 8003360:	08003397 	.word	0x08003397
 8003364:	08003397 	.word	0x08003397
 8003368:	08003397 	.word	0x08003397
 800336c:	0800338f 	.word	0x0800338f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003370:	f7fe feda 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003374:	61f8      	str	r0, [r7, #28]
        break;
 8003376:	e014      	b.n	80033a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003378:	f7fe feec 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 800337c:	61f8      	str	r0, [r7, #28]
        break;
 800337e:	e010      	b.n	80033a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003380:	4b4d      	ldr	r3, [pc, #308]	@ (80034b8 <UART_SetConfig+0x56c>)
 8003382:	61fb      	str	r3, [r7, #28]
        break;
 8003384:	e00d      	b.n	80033a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003386:	f7fe fe37 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 800338a:	61f8      	str	r0, [r7, #28]
        break;
 800338c:	e009      	b.n	80033a2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800338e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003392:	61fb      	str	r3, [r7, #28]
        break;
 8003394:	e005      	b.n	80033a2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003396:	2300      	movs	r3, #0
 8003398:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80033a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d077      	beq.n	8003498 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	005a      	lsls	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	085b      	lsrs	r3, r3, #1
 80033b2:	441a      	add	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80033bc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b0f      	cmp	r3, #15
 80033c2:	d916      	bls.n	80033f2 <UART_SetConfig+0x4a6>
 80033c4:	69bb      	ldr	r3, [r7, #24]
 80033c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033ca:	d212      	bcs.n	80033f2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	b29b      	uxth	r3, r3
 80033d0:	f023 030f 	bic.w	r3, r3, #15
 80033d4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	b29b      	uxth	r3, r3
 80033dc:	f003 0307 	and.w	r3, r3, #7
 80033e0:	b29a      	uxth	r2, r3
 80033e2:	8afb      	ldrh	r3, [r7, #22]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	8afa      	ldrh	r2, [r7, #22]
 80033ee:	60da      	str	r2, [r3, #12]
 80033f0:	e052      	b.n	8003498 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80033f8:	e04e      	b.n	8003498 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033fa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d827      	bhi.n	8003452 <UART_SetConfig+0x506>
 8003402:	a201      	add	r2, pc, #4	@ (adr r2, 8003408 <UART_SetConfig+0x4bc>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	0800342d 	.word	0x0800342d
 800340c:	08003435 	.word	0x08003435
 8003410:	0800343d 	.word	0x0800343d
 8003414:	08003453 	.word	0x08003453
 8003418:	08003443 	.word	0x08003443
 800341c:	08003453 	.word	0x08003453
 8003420:	08003453 	.word	0x08003453
 8003424:	08003453 	.word	0x08003453
 8003428:	0800344b 	.word	0x0800344b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800342c:	f7fe fe7c 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8003430:	61f8      	str	r0, [r7, #28]
        break;
 8003432:	e014      	b.n	800345e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003434:	f7fe fe8e 	bl	8002154 <HAL_RCC_GetPCLK2Freq>
 8003438:	61f8      	str	r0, [r7, #28]
        break;
 800343a:	e010      	b.n	800345e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800343c:	4b1e      	ldr	r3, [pc, #120]	@ (80034b8 <UART_SetConfig+0x56c>)
 800343e:	61fb      	str	r3, [r7, #28]
        break;
 8003440:	e00d      	b.n	800345e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003442:	f7fe fdd9 	bl	8001ff8 <HAL_RCC_GetSysClockFreq>
 8003446:	61f8      	str	r0, [r7, #28]
        break;
 8003448:	e009      	b.n	800345e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800344a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800344e:	61fb      	str	r3, [r7, #28]
        break;
 8003450:	e005      	b.n	800345e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800345c:	bf00      	nop
    }

    if (pclk != 0U)
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d019      	beq.n	8003498 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	085a      	lsrs	r2, r3, #1
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	441a      	add	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	fbb2 f3f3 	udiv	r3, r2, r3
 8003476:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b0f      	cmp	r3, #15
 800347c:	d909      	bls.n	8003492 <UART_SetConfig+0x546>
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003484:	d205      	bcs.n	8003492 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	60da      	str	r2, [r3, #12]
 8003490:	e002      	b.n	8003498 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2200      	movs	r2, #0
 800349c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2200      	movs	r2, #0
 80034a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80034a4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3728      	adds	r7, #40	@ 0x28
 80034ac:	46bd      	mov	sp, r7
 80034ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034b2:	bf00      	nop
 80034b4:	40008000 	.word	0x40008000
 80034b8:	00f42400 	.word	0x00f42400

080034bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d00a      	beq.n	80034e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00a      	beq.n	8003508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800352e:	f003 0304 	and.w	r3, r3, #4
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00a      	beq.n	800354c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003550:	f003 0310 	and.w	r3, r3, #16
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00a      	beq.n	800356e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003572:	f003 0320 	and.w	r3, r3, #32
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00a      	beq.n	8003590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d01a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	430a      	orrs	r2, r1
 80035b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035b6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ba:	d10a      	bne.n	80035d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b098      	sub	sp, #96	@ 0x60
 8003604:	af02      	add	r7, sp, #8
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003610:	f7fd fac0 	bl	8000b94 <HAL_GetTick>
 8003614:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b08      	cmp	r3, #8
 8003622:	d12e      	bne.n	8003682 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003624:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f88c 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d021      	beq.n	8003682 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003652:	653b      	str	r3, [r7, #80]	@ 0x50
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800365c:	647b      	str	r3, [r7, #68]	@ 0x44
 800365e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003662:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800366a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e6      	bne.n	800363e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2220      	movs	r2, #32
 8003674:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800367e:	2303      	movs	r3, #3
 8003680:	e062      	b.n	8003748 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f003 0304 	and.w	r3, r3, #4
 800368c:	2b04      	cmp	r3, #4
 800368e:	d149      	bne.n	8003724 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003690:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003694:	9300      	str	r3, [sp, #0]
 8003696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003698:	2200      	movs	r2, #0
 800369a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f856 	bl	8003750 <UART_WaitOnFlagUntilTimeout>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d03c      	beq.n	8003724 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b2:	e853 3f00 	ldrex	r3, [r3]
 80036b6:	623b      	str	r3, [r7, #32]
   return(result);
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	461a      	mov	r2, r3
 80036c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036ca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036cc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80036ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036d0:	e841 2300 	strex	r3, r2, [r1]
 80036d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80036d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d1e6      	bne.n	80036aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	3308      	adds	r3, #8
 80036e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f023 0301 	bic.w	r3, r3, #1
 80036f2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	3308      	adds	r3, #8
 80036fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036fc:	61fa      	str	r2, [r7, #28]
 80036fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003700:	69b9      	ldr	r1, [r7, #24]
 8003702:	69fa      	ldr	r2, [r7, #28]
 8003704:	e841 2300 	strex	r3, r2, [r1]
 8003708:	617b      	str	r3, [r7, #20]
   return(result);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1e5      	bne.n	80036dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2220      	movs	r2, #32
 8003714:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e011      	b.n	8003748 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2220      	movs	r2, #32
 8003728:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2220      	movs	r2, #32
 800372e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3758      	adds	r7, #88	@ 0x58
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	4613      	mov	r3, r2
 800375e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003760:	e04f      	b.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d04b      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376a:	f7fd fa13 	bl	8000b94 <HAL_GetTick>
 800376e:	4602      	mov	r2, r0
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	429a      	cmp	r2, r3
 8003778:	d302      	bcc.n	8003780 <UART_WaitOnFlagUntilTimeout+0x30>
 800377a:	69bb      	ldr	r3, [r7, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e04e      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0304 	and.w	r3, r3, #4
 800378e:	2b00      	cmp	r3, #0
 8003790:	d037      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	2b80      	cmp	r3, #128	@ 0x80
 8003796:	d034      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b40      	cmp	r3, #64	@ 0x40
 800379c:	d031      	beq.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	f003 0308 	and.w	r3, r3, #8
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	d110      	bne.n	80037ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2208      	movs	r2, #8
 80037b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 f8ff 	bl	80039b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2208      	movs	r2, #8
 80037be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e029      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80037d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80037dc:	d111      	bne.n	8003802 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80037e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80037e8:	68f8      	ldr	r0, [r7, #12]
 80037ea:	f000 f8e5 	bl	80039b8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e00f      	b.n	8003822 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	4013      	ands	r3, r2
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	bf0c      	ite	eq
 8003812:	2301      	moveq	r3, #1
 8003814:	2300      	movne	r3, #0
 8003816:	b2db      	uxtb	r3, r3
 8003818:	461a      	mov	r2, r3
 800381a:	79fb      	ldrb	r3, [r7, #7]
 800381c:	429a      	cmp	r2, r3
 800381e:	d0a0      	beq.n	8003762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3710      	adds	r7, #16
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b096      	sub	sp, #88	@ 0x58
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	4613      	mov	r3, r2
 8003838:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2200      	movs	r2, #0
 800384c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2222      	movs	r2, #34	@ 0x22
 8003854:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800385c:	2b00      	cmp	r3, #0
 800385e:	d028      	beq.n	80038b2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003864:	4a3e      	ldr	r2, [pc, #248]	@ (8003960 <UART_Start_Receive_DMA+0x134>)
 8003866:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800386c:	4a3d      	ldr	r2, [pc, #244]	@ (8003964 <UART_Start_Receive_DMA+0x138>)
 800386e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003874:	4a3c      	ldr	r2, [pc, #240]	@ (8003968 <UART_Start_Receive_DMA+0x13c>)
 8003876:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800387c:	2200      	movs	r2, #0
 800387e:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3324      	adds	r3, #36	@ 0x24
 800388a:	4619      	mov	r1, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003890:	461a      	mov	r2, r3
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	f7fd fb54 	bl	8000f40 <HAL_DMA_Start_IT>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2210      	movs	r2, #16
 80038a2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2220      	movs	r2, #32
 80038aa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e051      	b.n	8003956 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d018      	beq.n	80038ec <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80038c2:	e853 3f00 	ldrex	r3, [r3]
 80038c6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80038c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80038ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	461a      	mov	r2, r3
 80038d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80038da:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038dc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80038de:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80038e0:	e841 2300 	strex	r3, r2, [r1]
 80038e4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80038e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1e6      	bne.n	80038ba <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	3308      	adds	r3, #8
 80038f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80038fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038fe:	f043 0301 	orr.w	r3, r3, #1
 8003902:	653b      	str	r3, [r7, #80]	@ 0x50
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	3308      	adds	r3, #8
 800390a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800390c:	637a      	str	r2, [r7, #52]	@ 0x34
 800390e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003910:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003912:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003914:	e841 2300 	strex	r3, r2, [r1]
 8003918:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800391a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e5      	bne.n	80038ec <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3308      	adds	r3, #8
 8003926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	613b      	str	r3, [r7, #16]
   return(result);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	3308      	adds	r3, #8
 800393e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003940:	623a      	str	r2, [r7, #32]
 8003942:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	69f9      	ldr	r1, [r7, #28]
 8003946:	6a3a      	ldr	r2, [r7, #32]
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	61bb      	str	r3, [r7, #24]
   return(result);
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e5      	bne.n	8003920 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3758      	adds	r7, #88	@ 0x58
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	08003b37 	.word	0x08003b37
 8003964:	08003c63 	.word	0x08003c63
 8003968:	08003ca1 	.word	0x08003ca1

0800396c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800396c:	b480      	push	{r7}
 800396e:	b089      	sub	sp, #36	@ 0x24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	e853 3f00 	ldrex	r3, [r3]
 8003980:	60bb      	str	r3, [r7, #8]
   return(result);
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003988:	61fb      	str	r3, [r7, #28]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	461a      	mov	r2, r3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	61bb      	str	r3, [r7, #24]
 8003994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003996:	6979      	ldr	r1, [r7, #20]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	613b      	str	r3, [r7, #16]
   return(result);
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e6      	bne.n	8003974 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 80039ac:	bf00      	nop
 80039ae:	3724      	adds	r7, #36	@ 0x24
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b095      	sub	sp, #84	@ 0x54
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039c8:	e853 3f00 	ldrex	r3, [r3]
 80039cc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80039ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	461a      	mov	r2, r3
 80039dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039de:	643b      	str	r3, [r7, #64]	@ 0x40
 80039e0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039e2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80039e4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80039ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1e6      	bne.n	80039c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	3308      	adds	r3, #8
 80039f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fa:	6a3b      	ldr	r3, [r7, #32]
 80039fc:	e853 3f00 	ldrex	r3, [r3]
 8003a00:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	f023 0301 	bic.w	r3, r3, #1
 8003a08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	3308      	adds	r3, #8
 8003a10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a1a:	e841 2300 	strex	r3, r2, [r1]
 8003a1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d1e5      	bne.n	80039f2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d118      	bne.n	8003a60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f023 0310 	bic.w	r3, r3, #16
 8003a42:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	461a      	mov	r2, r3
 8003a4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a50:	6979      	ldr	r1, [r7, #20]
 8003a52:	69ba      	ldr	r2, [r7, #24]
 8003a54:	e841 2300 	strex	r3, r2, [r1]
 8003a58:	613b      	str	r3, [r7, #16]
   return(result);
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d1e6      	bne.n	8003a2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003a74:	bf00      	nop
 8003a76:	3754      	adds	r7, #84	@ 0x54
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b090      	sub	sp, #64	@ 0x40
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d137      	bne.n	8003b0c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003aa4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3308      	adds	r3, #8
 8003aaa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	e853 3f00 	ldrex	r3, [r3]
 8003ab2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab4:	6a3b      	ldr	r3, [r7, #32]
 8003ab6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003aba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003abc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ac4:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ac8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003aca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003acc:	e841 2300 	strex	r3, r2, [r1]
 8003ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ad2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1e5      	bne.n	8003aa4 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003ad8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003aec:	637b      	str	r3, [r7, #52]	@ 0x34
 8003aee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003af6:	61fb      	str	r3, [r7, #28]
 8003af8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	69b9      	ldr	r1, [r7, #24]
 8003afc:	69fa      	ldr	r2, [r7, #28]
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	617b      	str	r3, [r7, #20]
   return(result);
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e6      	bne.n	8003ad8 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003b0a:	e002      	b.n	8003b12 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8003b0c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8003b0e:	f7fc fcf9 	bl	8000504 <HAL_UART_TxCpltCallback>
}
 8003b12:	bf00      	nop
 8003b14:	3740      	adds	r7, #64	@ 0x40
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b084      	sub	sp, #16
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b26:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003b28:	68f8      	ldr	r0, [r7, #12]
 8003b2a:	f7ff f9e5 	bl	8002ef8 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b2e:	bf00      	nop
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b09c      	sub	sp, #112	@ 0x70
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b42:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d171      	bne.n	8003c36 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8003b52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003b5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b62:	e853 3f00 	ldrex	r3, [r3]
 8003b66:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003b68:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003b6a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	461a      	mov	r2, r3
 8003b76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003b78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b7a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b7c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003b7e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b80:	e841 2300 	strex	r3, r2, [r1]
 8003b84:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003b86:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d1e6      	bne.n	8003b5a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	3308      	adds	r3, #8
 8003b92:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b96:	e853 3f00 	ldrex	r3, [r3]
 8003b9a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b9e:	f023 0301 	bic.w	r3, r3, #1
 8003ba2:	667b      	str	r3, [r7, #100]	@ 0x64
 8003ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	3308      	adds	r3, #8
 8003baa:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003bac:	647a      	str	r2, [r7, #68]	@ 0x44
 8003bae:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bb0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003bb2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003bb4:	e841 2300 	strex	r3, r2, [r1]
 8003bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003bba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1e5      	bne.n	8003b8c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3308      	adds	r3, #8
 8003bc6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bca:	e853 3f00 	ldrex	r3, [r3]
 8003bce:	623b      	str	r3, [r7, #32]
   return(result);
 8003bd0:	6a3b      	ldr	r3, [r7, #32]
 8003bd2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bd6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bd8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3308      	adds	r3, #8
 8003bde:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003be0:	633a      	str	r2, [r7, #48]	@ 0x30
 8003be2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003be4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003be6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003be8:	e841 2300 	strex	r3, r2, [r1]
 8003bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1e5      	bne.n	8003bc0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003bfe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d118      	bne.n	8003c36 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	e853 3f00 	ldrex	r3, [r3]
 8003c10:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f023 0310 	bic.w	r3, r3, #16
 8003c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	461a      	mov	r2, r3
 8003c20:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c22:	61fb      	str	r3, [r7, #28]
 8003c24:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c26:	69b9      	ldr	r1, [r7, #24]
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	e841 2300 	strex	r3, r2, [r1]
 8003c2e:	617b      	str	r3, [r7, #20]
   return(result);
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1e6      	bne.n	8003c04 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c38:	2200      	movs	r2, #0
 8003c3a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c3c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d107      	bne.n	8003c54 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003c46:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c4e:	f7ff f971 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c52:	e002      	b.n	8003c5a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8003c54:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003c56:	f7fc fc69 	bl	800052c <HAL_UART_RxCpltCallback>
}
 8003c5a:	bf00      	nop
 8003c5c:	3770      	adds	r7, #112	@ 0x70
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}

08003c62 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003c62:	b580      	push	{r7, lr}
 8003c64:	b084      	sub	sp, #16
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c6e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2201      	movs	r2, #1
 8003c74:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c7a:	2b01      	cmp	r3, #1
 8003c7c:	d109      	bne.n	8003c92 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003c84:	085b      	lsrs	r3, r3, #1
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	4619      	mov	r1, r3
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f7ff f952 	bl	8002f34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003c90:	e002      	b.n	8003c98 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f7ff f93a 	bl	8002f0c <HAL_UART_RxHalfCpltCallback>
}
 8003c98:	bf00      	nop
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}

08003ca0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b086      	sub	sp, #24
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003cb2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cc6:	2b80      	cmp	r3, #128	@ 0x80
 8003cc8:	d109      	bne.n	8003cde <UART_DMAError+0x3e>
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b21      	cmp	r3, #33	@ 0x21
 8003cce:	d106      	bne.n	8003cde <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8003cd8:	6978      	ldr	r0, [r7, #20]
 8003cda:	f7ff fe47 	bl	800396c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ce8:	2b40      	cmp	r3, #64	@ 0x40
 8003cea:	d109      	bne.n	8003d00 <UART_DMAError+0x60>
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2b22      	cmp	r3, #34	@ 0x22
 8003cf0:	d106      	bne.n	8003d00 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	f7ff fe5c 	bl	80039b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d06:	f043 0210 	orr.w	r2, r3, #16
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d10:	6978      	ldr	r0, [r7, #20]
 8003d12:	f7ff f905 	bl	8002f20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d16:	bf00      	nop
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <memset>:
 8003d1e:	4402      	add	r2, r0
 8003d20:	4603      	mov	r3, r0
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d100      	bne.n	8003d28 <memset+0xa>
 8003d26:	4770      	bx	lr
 8003d28:	f803 1b01 	strb.w	r1, [r3], #1
 8003d2c:	e7f9      	b.n	8003d22 <memset+0x4>
	...

08003d30 <__libc_init_array>:
 8003d30:	b570      	push	{r4, r5, r6, lr}
 8003d32:	4d0d      	ldr	r5, [pc, #52]	@ (8003d68 <__libc_init_array+0x38>)
 8003d34:	4c0d      	ldr	r4, [pc, #52]	@ (8003d6c <__libc_init_array+0x3c>)
 8003d36:	1b64      	subs	r4, r4, r5
 8003d38:	10a4      	asrs	r4, r4, #2
 8003d3a:	2600      	movs	r6, #0
 8003d3c:	42a6      	cmp	r6, r4
 8003d3e:	d109      	bne.n	8003d54 <__libc_init_array+0x24>
 8003d40:	4d0b      	ldr	r5, [pc, #44]	@ (8003d70 <__libc_init_array+0x40>)
 8003d42:	4c0c      	ldr	r4, [pc, #48]	@ (8003d74 <__libc_init_array+0x44>)
 8003d44:	f000 f818 	bl	8003d78 <_init>
 8003d48:	1b64      	subs	r4, r4, r5
 8003d4a:	10a4      	asrs	r4, r4, #2
 8003d4c:	2600      	movs	r6, #0
 8003d4e:	42a6      	cmp	r6, r4
 8003d50:	d105      	bne.n	8003d5e <__libc_init_array+0x2e>
 8003d52:	bd70      	pop	{r4, r5, r6, pc}
 8003d54:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d58:	4798      	blx	r3
 8003d5a:	3601      	adds	r6, #1
 8003d5c:	e7ee      	b.n	8003d3c <__libc_init_array+0xc>
 8003d5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d62:	4798      	blx	r3
 8003d64:	3601      	adds	r6, #1
 8003d66:	e7f2      	b.n	8003d4e <__libc_init_array+0x1e>
 8003d68:	08003de0 	.word	0x08003de0
 8003d6c:	08003de0 	.word	0x08003de0
 8003d70:	08003de0 	.word	0x08003de0
 8003d74:	08003de4 	.word	0x08003de4

08003d78 <_init>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	bf00      	nop
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr

08003d84 <_fini>:
 8003d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d86:	bf00      	nop
 8003d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d8a:	bc08      	pop	{r3}
 8003d8c:	469e      	mov	lr, r3
 8003d8e:	4770      	bx	lr
