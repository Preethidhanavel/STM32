
spi_sd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a100  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  0800a290  0800a290  0000b290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a86c  0800a86c  0000c088  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a86c  0800a86c  0000b86c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a874  0800a874  0000c088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a874  0800a874  0000b874  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a878  0800a878  0000b878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  20000000  0800a87c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bb0  20000088  0800a904  0000c088  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002c38  0800a904  0000cc38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c088  2**0
                  CONTENTS, READONLY
 12 .debug_info   000118e5  00000000  00000000  0000c0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000298b  00000000  00000000  0001d99d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f40  00000000  00000000  00020328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bdb  00000000  00000000  00021268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000281f8  00000000  00000000  00021e43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168d6  00000000  00000000  0004a03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebc4f  00000000  00000000  00060911  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014c560  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044a8  00000000  00000000  0014c5a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  00150a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a278 	.word	0x0800a278

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	0800a278 	.word	0x0800a278

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_dmul>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000286:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800028a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800028e:	bf1d      	ittte	ne
 8000290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000294:	ea94 0f0c 	teqne	r4, ip
 8000298:	ea95 0f0c 	teqne	r5, ip
 800029c:	f000 f8de 	bleq	800045c <__aeabi_dmul+0x1dc>
 80002a0:	442c      	add	r4, r5
 80002a2:	ea81 0603 	eor.w	r6, r1, r3
 80002a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002b2:	bf18      	it	ne
 80002b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002c0:	d038      	beq.n	8000334 <__aeabi_dmul+0xb4>
 80002c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002c6:	f04f 0500 	mov.w	r5, #0
 80002ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002d6:	f04f 0600 	mov.w	r6, #0
 80002da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002de:	f09c 0f00 	teq	ip, #0
 80002e2:	bf18      	it	ne
 80002e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002f4:	d204      	bcs.n	8000300 <__aeabi_dmul+0x80>
 80002f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002fa:	416d      	adcs	r5, r5
 80002fc:	eb46 0606 	adc.w	r6, r6, r6
 8000300:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000304:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000308:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800030c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000310:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000314:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000318:	bf88      	it	hi
 800031a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800031e:	d81e      	bhi.n	800035e <__aeabi_dmul+0xde>
 8000320:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000338:	ea46 0101 	orr.w	r1, r6, r1
 800033c:	ea40 0002 	orr.w	r0, r0, r2
 8000340:	ea81 0103 	eor.w	r1, r1, r3
 8000344:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000348:	bfc2      	ittt	gt
 800034a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800034e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000352:	bd70      	popgt	{r4, r5, r6, pc}
 8000354:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000358:	f04f 0e00 	mov.w	lr, #0
 800035c:	3c01      	subs	r4, #1
 800035e:	f300 80ab 	bgt.w	80004b8 <__aeabi_dmul+0x238>
 8000362:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000366:	bfde      	ittt	le
 8000368:	2000      	movle	r0, #0
 800036a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800036e:	bd70      	pople	{r4, r5, r6, pc}
 8000370:	f1c4 0400 	rsb	r4, r4, #0
 8000374:	3c20      	subs	r4, #32
 8000376:	da35      	bge.n	80003e4 <__aeabi_dmul+0x164>
 8000378:	340c      	adds	r4, #12
 800037a:	dc1b      	bgt.n	80003b4 <__aeabi_dmul+0x134>
 800037c:	f104 0414 	add.w	r4, r4, #20
 8000380:	f1c4 0520 	rsb	r5, r4, #32
 8000384:	fa00 f305 	lsl.w	r3, r0, r5
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f205 	lsl.w	r2, r1, r5
 8000390:	ea40 0002 	orr.w	r0, r0, r2
 8000394:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000398:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003a0:	fa21 f604 	lsr.w	r6, r1, r4
 80003a4:	eb42 0106 	adc.w	r1, r2, r6
 80003a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ac:	bf08      	it	eq
 80003ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f1c4 040c 	rsb	r4, r4, #12
 80003b8:	f1c4 0520 	rsb	r5, r4, #32
 80003bc:	fa00 f304 	lsl.w	r3, r0, r4
 80003c0:	fa20 f005 	lsr.w	r0, r0, r5
 80003c4:	fa01 f204 	lsl.w	r2, r1, r4
 80003c8:	ea40 0002 	orr.w	r0, r0, r2
 80003cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d4:	f141 0100 	adc.w	r1, r1, #0
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 0520 	rsb	r5, r4, #32
 80003e8:	fa00 f205 	lsl.w	r2, r0, r5
 80003ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80003f0:	fa20 f304 	lsr.w	r3, r0, r4
 80003f4:	fa01 f205 	lsl.w	r2, r1, r5
 80003f8:	ea43 0302 	orr.w	r3, r3, r2
 80003fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000404:	fa21 f204 	lsr.w	r2, r1, r4
 8000408:	ea20 0002 	bic.w	r0, r0, r2
 800040c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000410:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000414:	bf08      	it	eq
 8000416:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800041a:	bd70      	pop	{r4, r5, r6, pc}
 800041c:	f094 0f00 	teq	r4, #0
 8000420:	d10f      	bne.n	8000442 <__aeabi_dmul+0x1c2>
 8000422:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000426:	0040      	lsls	r0, r0, #1
 8000428:	eb41 0101 	adc.w	r1, r1, r1
 800042c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000430:	bf08      	it	eq
 8000432:	3c01      	subeq	r4, #1
 8000434:	d0f7      	beq.n	8000426 <__aeabi_dmul+0x1a6>
 8000436:	ea41 0106 	orr.w	r1, r1, r6
 800043a:	f095 0f00 	teq	r5, #0
 800043e:	bf18      	it	ne
 8000440:	4770      	bxne	lr
 8000442:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000446:	0052      	lsls	r2, r2, #1
 8000448:	eb43 0303 	adc.w	r3, r3, r3
 800044c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000450:	bf08      	it	eq
 8000452:	3d01      	subeq	r5, #1
 8000454:	d0f7      	beq.n	8000446 <__aeabi_dmul+0x1c6>
 8000456:	ea43 0306 	orr.w	r3, r3, r6
 800045a:	4770      	bx	lr
 800045c:	ea94 0f0c 	teq	r4, ip
 8000460:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000464:	bf18      	it	ne
 8000466:	ea95 0f0c 	teqne	r5, ip
 800046a:	d00c      	beq.n	8000486 <__aeabi_dmul+0x206>
 800046c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000470:	bf18      	it	ne
 8000472:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000476:	d1d1      	bne.n	800041c <__aeabi_dmul+0x19c>
 8000478:	ea81 0103 	eor.w	r1, r1, r3
 800047c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000480:	f04f 0000 	mov.w	r0, #0
 8000484:	bd70      	pop	{r4, r5, r6, pc}
 8000486:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800048a:	bf06      	itte	eq
 800048c:	4610      	moveq	r0, r2
 800048e:	4619      	moveq	r1, r3
 8000490:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000494:	d019      	beq.n	80004ca <__aeabi_dmul+0x24a>
 8000496:	ea94 0f0c 	teq	r4, ip
 800049a:	d102      	bne.n	80004a2 <__aeabi_dmul+0x222>
 800049c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004a0:	d113      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004a2:	ea95 0f0c 	teq	r5, ip
 80004a6:	d105      	bne.n	80004b4 <__aeabi_dmul+0x234>
 80004a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ac:	bf1c      	itt	ne
 80004ae:	4610      	movne	r0, r2
 80004b0:	4619      	movne	r1, r3
 80004b2:	d10a      	bne.n	80004ca <__aeabi_dmul+0x24a>
 80004b4:	ea81 0103 	eor.w	r1, r1, r3
 80004b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd70      	pop	{r4, r5, r6, pc}
 80004ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004d2:	bd70      	pop	{r4, r5, r6, pc}

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	@ 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_d2uiz>:
 800084c:	004a      	lsls	r2, r1, #1
 800084e:	d211      	bcs.n	8000874 <__aeabi_d2uiz+0x28>
 8000850:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000854:	d211      	bcs.n	800087a <__aeabi_d2uiz+0x2e>
 8000856:	d50d      	bpl.n	8000874 <__aeabi_d2uiz+0x28>
 8000858:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800085c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000860:	d40e      	bmi.n	8000880 <__aeabi_d2uiz+0x34>
 8000862:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000866:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800086a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800086e:	fa23 f002 	lsr.w	r0, r3, r2
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800087e:	d102      	bne.n	8000886 <__aeabi_d2uiz+0x3a>
 8000880:	f04f 30ff 	mov.w	r0, #4294967295
 8000884:	4770      	bx	lr
 8000886:	f04f 0000 	mov.w	r0, #0
 800088a:	4770      	bx	lr

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b988 	b.w	8000bb4 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	468e      	mov	lr, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	4688      	mov	r8, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4617      	mov	r7, r2
 80008d0:	d962      	bls.n	8000998 <__udivmoddi4+0xdc>
 80008d2:	fab2 f682 	clz	r6, r2
 80008d6:	b14e      	cbz	r6, 80008ec <__udivmoddi4+0x30>
 80008d8:	f1c6 0320 	rsb	r3, r6, #32
 80008dc:	fa01 f806 	lsl.w	r8, r1, r6
 80008e0:	fa20 f303 	lsr.w	r3, r0, r3
 80008e4:	40b7      	lsls	r7, r6
 80008e6:	ea43 0808 	orr.w	r8, r3, r8
 80008ea:	40b4      	lsls	r4, r6
 80008ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008f0:	fa1f fc87 	uxth.w	ip, r7
 80008f4:	fbb8 f1fe 	udiv	r1, r8, lr
 80008f8:	0c23      	lsrs	r3, r4, #16
 80008fa:	fb0e 8811 	mls	r8, lr, r1, r8
 80008fe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000902:	fb01 f20c 	mul.w	r2, r1, ip
 8000906:	429a      	cmp	r2, r3
 8000908:	d909      	bls.n	800091e <__udivmoddi4+0x62>
 800090a:	18fb      	adds	r3, r7, r3
 800090c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000910:	f080 80ea 	bcs.w	8000ae8 <__udivmoddi4+0x22c>
 8000914:	429a      	cmp	r2, r3
 8000916:	f240 80e7 	bls.w	8000ae8 <__udivmoddi4+0x22c>
 800091a:	3902      	subs	r1, #2
 800091c:	443b      	add	r3, r7
 800091e:	1a9a      	subs	r2, r3, r2
 8000920:	b2a3      	uxth	r3, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800092e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000932:	459c      	cmp	ip, r3
 8000934:	d909      	bls.n	800094a <__udivmoddi4+0x8e>
 8000936:	18fb      	adds	r3, r7, r3
 8000938:	f100 32ff 	add.w	r2, r0, #4294967295
 800093c:	f080 80d6 	bcs.w	8000aec <__udivmoddi4+0x230>
 8000940:	459c      	cmp	ip, r3
 8000942:	f240 80d3 	bls.w	8000aec <__udivmoddi4+0x230>
 8000946:	443b      	add	r3, r7
 8000948:	3802      	subs	r0, #2
 800094a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800094e:	eba3 030c 	sub.w	r3, r3, ip
 8000952:	2100      	movs	r1, #0
 8000954:	b11d      	cbz	r5, 800095e <__udivmoddi4+0xa2>
 8000956:	40f3      	lsrs	r3, r6
 8000958:	2200      	movs	r2, #0
 800095a:	e9c5 3200 	strd	r3, r2, [r5]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d905      	bls.n	8000972 <__udivmoddi4+0xb6>
 8000966:	b10d      	cbz	r5, 800096c <__udivmoddi4+0xb0>
 8000968:	e9c5 0100 	strd	r0, r1, [r5]
 800096c:	2100      	movs	r1, #0
 800096e:	4608      	mov	r0, r1
 8000970:	e7f5      	b.n	800095e <__udivmoddi4+0xa2>
 8000972:	fab3 f183 	clz	r1, r3
 8000976:	2900      	cmp	r1, #0
 8000978:	d146      	bne.n	8000a08 <__udivmoddi4+0x14c>
 800097a:	4573      	cmp	r3, lr
 800097c:	d302      	bcc.n	8000984 <__udivmoddi4+0xc8>
 800097e:	4282      	cmp	r2, r0
 8000980:	f200 8105 	bhi.w	8000b8e <__udivmoddi4+0x2d2>
 8000984:	1a84      	subs	r4, r0, r2
 8000986:	eb6e 0203 	sbc.w	r2, lr, r3
 800098a:	2001      	movs	r0, #1
 800098c:	4690      	mov	r8, r2
 800098e:	2d00      	cmp	r5, #0
 8000990:	d0e5      	beq.n	800095e <__udivmoddi4+0xa2>
 8000992:	e9c5 4800 	strd	r4, r8, [r5]
 8000996:	e7e2      	b.n	800095e <__udivmoddi4+0xa2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	f000 8090 	beq.w	8000abe <__udivmoddi4+0x202>
 800099e:	fab2 f682 	clz	r6, r2
 80009a2:	2e00      	cmp	r6, #0
 80009a4:	f040 80a4 	bne.w	8000af0 <__udivmoddi4+0x234>
 80009a8:	1a8a      	subs	r2, r1, r2
 80009aa:	0c03      	lsrs	r3, r0, #16
 80009ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009b0:	b280      	uxth	r0, r0
 80009b2:	b2bc      	uxth	r4, r7
 80009b4:	2101      	movs	r1, #1
 80009b6:	fbb2 fcfe 	udiv	ip, r2, lr
 80009ba:	fb0e 221c 	mls	r2, lr, ip, r2
 80009be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80009c2:	fb04 f20c 	mul.w	r2, r4, ip
 80009c6:	429a      	cmp	r2, r3
 80009c8:	d907      	bls.n	80009da <__udivmoddi4+0x11e>
 80009ca:	18fb      	adds	r3, r7, r3
 80009cc:	f10c 38ff 	add.w	r8, ip, #4294967295
 80009d0:	d202      	bcs.n	80009d8 <__udivmoddi4+0x11c>
 80009d2:	429a      	cmp	r2, r3
 80009d4:	f200 80e0 	bhi.w	8000b98 <__udivmoddi4+0x2dc>
 80009d8:	46c4      	mov	ip, r8
 80009da:	1a9b      	subs	r3, r3, r2
 80009dc:	fbb3 f2fe 	udiv	r2, r3, lr
 80009e0:	fb0e 3312 	mls	r3, lr, r2, r3
 80009e4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80009e8:	fb02 f404 	mul.w	r4, r2, r4
 80009ec:	429c      	cmp	r4, r3
 80009ee:	d907      	bls.n	8000a00 <__udivmoddi4+0x144>
 80009f0:	18fb      	adds	r3, r7, r3
 80009f2:	f102 30ff 	add.w	r0, r2, #4294967295
 80009f6:	d202      	bcs.n	80009fe <__udivmoddi4+0x142>
 80009f8:	429c      	cmp	r4, r3
 80009fa:	f200 80ca 	bhi.w	8000b92 <__udivmoddi4+0x2d6>
 80009fe:	4602      	mov	r2, r0
 8000a00:	1b1b      	subs	r3, r3, r4
 8000a02:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000a06:	e7a5      	b.n	8000954 <__udivmoddi4+0x98>
 8000a08:	f1c1 0620 	rsb	r6, r1, #32
 8000a0c:	408b      	lsls	r3, r1
 8000a0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000a12:	431f      	orrs	r7, r3
 8000a14:	fa0e f401 	lsl.w	r4, lr, r1
 8000a18:	fa20 f306 	lsr.w	r3, r0, r6
 8000a1c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000a20:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000a24:	4323      	orrs	r3, r4
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	fa1f fc87 	uxth.w	ip, r7
 8000a2e:	fbbe f0f9 	udiv	r0, lr, r9
 8000a32:	0c1c      	lsrs	r4, r3, #16
 8000a34:	fb09 ee10 	mls	lr, r9, r0, lr
 8000a38:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000a3c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	d909      	bls.n	8000a5c <__udivmoddi4+0x1a0>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 3aff 	add.w	sl, r0, #4294967295
 8000a4e:	f080 809c 	bcs.w	8000b8a <__udivmoddi4+0x2ce>
 8000a52:	45a6      	cmp	lr, r4
 8000a54:	f240 8099 	bls.w	8000b8a <__udivmoddi4+0x2ce>
 8000a58:	3802      	subs	r0, #2
 8000a5a:	443c      	add	r4, r7
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	fa1f fe83 	uxth.w	lr, r3
 8000a64:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a68:	fb09 4413 	mls	r4, r9, r3, r4
 8000a6c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000a70:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a74:	45a4      	cmp	ip, r4
 8000a76:	d908      	bls.n	8000a8a <__udivmoddi4+0x1ce>
 8000a78:	193c      	adds	r4, r7, r4
 8000a7a:	f103 3eff 	add.w	lr, r3, #4294967295
 8000a7e:	f080 8082 	bcs.w	8000b86 <__udivmoddi4+0x2ca>
 8000a82:	45a4      	cmp	ip, r4
 8000a84:	d97f      	bls.n	8000b86 <__udivmoddi4+0x2ca>
 8000a86:	3b02      	subs	r3, #2
 8000a88:	443c      	add	r4, r7
 8000a8a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000a8e:	eba4 040c 	sub.w	r4, r4, ip
 8000a92:	fba0 ec02 	umull	lr, ip, r0, r2
 8000a96:	4564      	cmp	r4, ip
 8000a98:	4673      	mov	r3, lr
 8000a9a:	46e1      	mov	r9, ip
 8000a9c:	d362      	bcc.n	8000b64 <__udivmoddi4+0x2a8>
 8000a9e:	d05f      	beq.n	8000b60 <__udivmoddi4+0x2a4>
 8000aa0:	b15d      	cbz	r5, 8000aba <__udivmoddi4+0x1fe>
 8000aa2:	ebb8 0203 	subs.w	r2, r8, r3
 8000aa6:	eb64 0409 	sbc.w	r4, r4, r9
 8000aaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000aae:	fa22 f301 	lsr.w	r3, r2, r1
 8000ab2:	431e      	orrs	r6, r3
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	e9c5 6400 	strd	r6, r4, [r5]
 8000aba:	2100      	movs	r1, #0
 8000abc:	e74f      	b.n	800095e <__udivmoddi4+0xa2>
 8000abe:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ac2:	0c01      	lsrs	r1, r0, #16
 8000ac4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ac8:	b280      	uxth	r0, r0
 8000aca:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000ace:	463b      	mov	r3, r7
 8000ad0:	4638      	mov	r0, r7
 8000ad2:	463c      	mov	r4, r7
 8000ad4:	46b8      	mov	r8, r7
 8000ad6:	46be      	mov	lr, r7
 8000ad8:	2620      	movs	r6, #32
 8000ada:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ade:	eba2 0208 	sub.w	r2, r2, r8
 8000ae2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ae6:	e766      	b.n	80009b6 <__udivmoddi4+0xfa>
 8000ae8:	4601      	mov	r1, r0
 8000aea:	e718      	b.n	800091e <__udivmoddi4+0x62>
 8000aec:	4610      	mov	r0, r2
 8000aee:	e72c      	b.n	800094a <__udivmoddi4+0x8e>
 8000af0:	f1c6 0220 	rsb	r2, r6, #32
 8000af4:	fa2e f302 	lsr.w	r3, lr, r2
 8000af8:	40b7      	lsls	r7, r6
 8000afa:	40b1      	lsls	r1, r6
 8000afc:	fa20 f202 	lsr.w	r2, r0, r2
 8000b00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b04:	430a      	orrs	r2, r1
 8000b06:	fbb3 f8fe 	udiv	r8, r3, lr
 8000b0a:	b2bc      	uxth	r4, r7
 8000b0c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000b10:	0c11      	lsrs	r1, r2, #16
 8000b12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b16:	fb08 f904 	mul.w	r9, r8, r4
 8000b1a:	40b0      	lsls	r0, r6
 8000b1c:	4589      	cmp	r9, r1
 8000b1e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000b22:	b280      	uxth	r0, r0
 8000b24:	d93e      	bls.n	8000ba4 <__udivmoddi4+0x2e8>
 8000b26:	1879      	adds	r1, r7, r1
 8000b28:	f108 3cff 	add.w	ip, r8, #4294967295
 8000b2c:	d201      	bcs.n	8000b32 <__udivmoddi4+0x276>
 8000b2e:	4589      	cmp	r9, r1
 8000b30:	d81f      	bhi.n	8000b72 <__udivmoddi4+0x2b6>
 8000b32:	eba1 0109 	sub.w	r1, r1, r9
 8000b36:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3a:	fb09 f804 	mul.w	r8, r9, r4
 8000b3e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b42:	b292      	uxth	r2, r2
 8000b44:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b48:	4542      	cmp	r2, r8
 8000b4a:	d229      	bcs.n	8000ba0 <__udivmoddi4+0x2e4>
 8000b4c:	18ba      	adds	r2, r7, r2
 8000b4e:	f109 31ff 	add.w	r1, r9, #4294967295
 8000b52:	d2c4      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b54:	4542      	cmp	r2, r8
 8000b56:	d2c2      	bcs.n	8000ade <__udivmoddi4+0x222>
 8000b58:	f1a9 0102 	sub.w	r1, r9, #2
 8000b5c:	443a      	add	r2, r7
 8000b5e:	e7be      	b.n	8000ade <__udivmoddi4+0x222>
 8000b60:	45f0      	cmp	r8, lr
 8000b62:	d29d      	bcs.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b64:	ebbe 0302 	subs.w	r3, lr, r2
 8000b68:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000b6c:	3801      	subs	r0, #1
 8000b6e:	46e1      	mov	r9, ip
 8000b70:	e796      	b.n	8000aa0 <__udivmoddi4+0x1e4>
 8000b72:	eba7 0909 	sub.w	r9, r7, r9
 8000b76:	4449      	add	r1, r9
 8000b78:	f1a8 0c02 	sub.w	ip, r8, #2
 8000b7c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b80:	fb09 f804 	mul.w	r8, r9, r4
 8000b84:	e7db      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b86:	4673      	mov	r3, lr
 8000b88:	e77f      	b.n	8000a8a <__udivmoddi4+0x1ce>
 8000b8a:	4650      	mov	r0, sl
 8000b8c:	e766      	b.n	8000a5c <__udivmoddi4+0x1a0>
 8000b8e:	4608      	mov	r0, r1
 8000b90:	e6fd      	b.n	800098e <__udivmoddi4+0xd2>
 8000b92:	443b      	add	r3, r7
 8000b94:	3a02      	subs	r2, #2
 8000b96:	e733      	b.n	8000a00 <__udivmoddi4+0x144>
 8000b98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000b9c:	443b      	add	r3, r7
 8000b9e:	e71c      	b.n	80009da <__udivmoddi4+0x11e>
 8000ba0:	4649      	mov	r1, r9
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x222>
 8000ba4:	eba1 0109 	sub.w	r1, r1, r9
 8000ba8:	46c4      	mov	ip, r8
 8000baa:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bae:	fb09 f804 	mul.w	r8, r9, r4
 8000bb2:	e7c4      	b.n	8000b3e <__udivmoddi4+0x282>

08000bb4 <__aeabi_idiv0>:
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <SD_SPI_Transmit>:
#define CMD58 (0x40+58)
#define ACMD41 (0x40+41)

extern SPI_HandleTypeDef SD_SPI_HANDLE;

static uint8_t SD_SPI_Transmit(uint8_t data) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af02      	add	r7, sp, #8
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	71fb      	strb	r3, [r7, #7]
    uint8_t received;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &data, &received, 1, HAL_MAX_DELAY);
 8000bc2:	f107 020f 	add.w	r2, r7, #15
 8000bc6:	1df9      	adds	r1, r7, #7
 8000bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bcc:	9300      	str	r3, [sp, #0]
 8000bce:	2301      	movs	r3, #1
 8000bd0:	4803      	ldr	r0, [pc, #12]	@ (8000be0 <SD_SPI_Transmit+0x28>)
 8000bd2:	f002 ff0c 	bl	80039ee <HAL_SPI_TransmitReceive>
    return received;
 8000bd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	3710      	adds	r7, #16
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	200000a4 	.word	0x200000a4

08000be4 <SD_SPI_SendCommand>:

static void SD_SPI_SendCommand(uint8_t cmd, uint32_t arg, uint8_t crc) {
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b084      	sub	sp, #16
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	6039      	str	r1, [r7, #0]
 8000bee:	71fb      	strb	r3, [r7, #7]
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = cmd;
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)(arg >> 24);
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	0e1b      	lsrs	r3, r3, #24
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	727b      	strb	r3, [r7, #9]
    buf[2] = (uint8_t)(arg >> 16);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	0c1b      	lsrs	r3, r3, #16
 8000c04:	b2db      	uxtb	r3, r3
 8000c06:	72bb      	strb	r3, [r7, #10]
    buf[3] = (uint8_t)(arg >> 8);
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	0a1b      	lsrs	r3, r3, #8
 8000c0c:	b2db      	uxtb	r3, r3
 8000c0e:	72fb      	strb	r3, [r7, #11]
    buf[4] = (uint8_t)(arg);
 8000c10:	683b      	ldr	r3, [r7, #0]
 8000c12:	b2db      	uxtb	r3, r3
 8000c14:	733b      	strb	r3, [r7, #12]
    buf[5] = crc;
 8000c16:	79bb      	ldrb	r3, [r7, #6]
 8000c18:	737b      	strb	r3, [r7, #13]

    SD_CS_LOW();
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2110      	movs	r1, #16
 8000c1e:	480c      	ldr	r0, [pc, #48]	@ (8000c50 <SD_SPI_SendCommand+0x6c>)
 8000c20:	f001 f994 	bl	8001f4c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 6; i++) {
 8000c24:	2300      	movs	r3, #0
 8000c26:	73fb      	strb	r3, [r7, #15]
 8000c28:	e00a      	b.n	8000c40 <SD_SPI_SendCommand+0x5c>
        SD_SPI_Transmit(buf[i]);
 8000c2a:	7bfb      	ldrb	r3, [r7, #15]
 8000c2c:	3310      	adds	r3, #16
 8000c2e:	443b      	add	r3, r7
 8000c30:	f813 3c08 	ldrb.w	r3, [r3, #-8]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ffbf 	bl	8000bb8 <SD_SPI_Transmit>
    for (uint8_t i = 0; i < 6; i++) {
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	3301      	adds	r3, #1
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	7bfb      	ldrb	r3, [r7, #15]
 8000c42:	2b05      	cmp	r3, #5
 8000c44:	d9f1      	bls.n	8000c2a <SD_SPI_SendCommand+0x46>
    }
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	3710      	adds	r7, #16
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	48000800 	.word	0x48000800

08000c54 <SD_disk_initialize>:

DSTATUS SD_disk_initialize(BYTE pdrv) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
    HAL_Delay(1);
 8000c5e:	2001      	movs	r0, #1
 8000c60:	f000 fec0 	bl	80019e4 <HAL_Delay>
    SD_CS_HIGH();
 8000c64:	2201      	movs	r2, #1
 8000c66:	2110      	movs	r1, #16
 8000c68:	4818      	ldr	r0, [pc, #96]	@ (8000ccc <SD_disk_initialize+0x78>)
 8000c6a:	f001 f96f 	bl	8001f4c <HAL_GPIO_WritePin>
    for (uint8_t i = 0; i < 10; i++) SD_SPI_Transmit(0xFF);
 8000c6e:	2300      	movs	r3, #0
 8000c70:	73fb      	strb	r3, [r7, #15]
 8000c72:	e005      	b.n	8000c80 <SD_disk_initialize+0x2c>
 8000c74:	20ff      	movs	r0, #255	@ 0xff
 8000c76:	f7ff ff9f 	bl	8000bb8 <SD_SPI_Transmit>
 8000c7a:	7bfb      	ldrb	r3, [r7, #15]
 8000c7c:	3301      	adds	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	7bfb      	ldrb	r3, [r7, #15]
 8000c82:	2b09      	cmp	r3, #9
 8000c84:	d9f6      	bls.n	8000c74 <SD_disk_initialize+0x20>

    SD_SPI_SendCommand(CMD0, 0, 0x95);
 8000c86:	2295      	movs	r2, #149	@ 0x95
 8000c88:	2100      	movs	r1, #0
 8000c8a:	2040      	movs	r0, #64	@ 0x40
 8000c8c:	f7ff ffaa 	bl	8000be4 <SD_SPI_SendCommand>
    for (uint8_t i = 0; i < 10; i++) {
 8000c90:	2300      	movs	r3, #0
 8000c92:	73bb      	strb	r3, [r7, #14]
 8000c94:	e008      	b.n	8000ca8 <SD_disk_initialize+0x54>
        if (SD_SPI_Transmit(0xFF) == 0x01) break;
 8000c96:	20ff      	movs	r0, #255	@ 0xff
 8000c98:	f7ff ff8e 	bl	8000bb8 <SD_SPI_Transmit>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d006      	beq.n	8000cb0 <SD_disk_initialize+0x5c>
    for (uint8_t i = 0; i < 10; i++) {
 8000ca2:	7bbb      	ldrb	r3, [r7, #14]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	73bb      	strb	r3, [r7, #14]
 8000ca8:	7bbb      	ldrb	r3, [r7, #14]
 8000caa:	2b09      	cmp	r3, #9
 8000cac:	d9f3      	bls.n	8000c96 <SD_disk_initialize+0x42>
 8000cae:	e000      	b.n	8000cb2 <SD_disk_initialize+0x5e>
        if (SD_SPI_Transmit(0xFF) == 0x01) break;
 8000cb0:	bf00      	nop
    }
    SD_CS_HIGH();
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	4805      	ldr	r0, [pc, #20]	@ (8000ccc <SD_disk_initialize+0x78>)
 8000cb8:	f001 f948 	bl	8001f4c <HAL_GPIO_WritePin>
    SD_SPI_Transmit(0xFF);
 8000cbc:	20ff      	movs	r0, #255	@ 0xff
 8000cbe:	f7ff ff7b 	bl	8000bb8 <SD_SPI_Transmit>
    return 0;
 8000cc2:	2300      	movs	r3, #0
}
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	48000800 	.word	0x48000800

08000cd0 <SD_disk_status>:

DSTATUS SD_disk_status(BYTE pdrv) {
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	71fb      	strb	r3, [r7, #7]
    return 0;
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <SD_disk_read>:

DRESULT SD_disk_read(BYTE *buff, BYTE sector, UINT count) {
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	607a      	str	r2, [r7, #4]
 8000cf4:	72fb      	strb	r3, [r7, #11]
    return RES_OK; // Stubbed
 8000cf6:	2300      	movs	r3, #0
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3714      	adds	r7, #20
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <SD_disk_write>:

DRESULT SD_disk_write(const BYTE *buff, BYTE sector, UINT count) {
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	607a      	str	r2, [r7, #4]
 8000d10:	72fb      	strb	r3, [r7, #11]
    return RES_OK; // Stubbed
 8000d12:	2300      	movs	r3, #0
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <SD_disk_ioctl>:

DRESULT SD_disk_ioctl(BYTE cmd, void *buff) {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	6039      	str	r1, [r7, #0]
 8000d2a:	71fb      	strb	r3, [r7, #7]
    return RES_OK; // Stubbed
 8000d2c:	2300      	movs	r3, #0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <send_uart>:
FATFS *pfs;
DWORD fre_clust;
uint32_t total, free_space;

void send_uart(char *string)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	uint8_t len=strlen(string);
 8000d44:	6878      	ldr	r0, [r7, #4]
 8000d46:	f7ff fa43 	bl	80001d0 <strlen>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart2,(uint8_t*)string,len,2000);
 8000d4e:	7bfb      	ldrb	r3, [r7, #15]
 8000d50:	b29a      	uxth	r2, r3
 8000d52:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8000d56:	6879      	ldr	r1, [r7, #4]
 8000d58:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <send_uart+0x2c>)
 8000d5a:	f003 fa19 	bl	8004190 <HAL_UART_Transmit>
}
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000108 	.word	0x20000108

08000d6c <bufclear>:
	while(*buf++!='\0')
		i++;
	return i;
}
void bufclear(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
	for(int i=0;i<1024;i++)
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
 8000d76:	e007      	b.n	8000d88 <bufclear+0x1c>
		buffer[i]='\0';
 8000d78:	4a09      	ldr	r2, [pc, #36]	@ (8000da0 <bufclear+0x34>)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4413      	add	r3, r2
 8000d7e:	2200      	movs	r2, #0
 8000d80:	701a      	strb	r2, [r3, #0]
	for(int i=0;i<1024;i++)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	3301      	adds	r3, #1
 8000d86:	607b      	str	r3, [r7, #4]
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000d8e:	dbf3      	blt.n	8000d78 <bufclear+0xc>
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	370c      	adds	r7, #12
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	2000222c 	.word	0x2000222c

08000da4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000daa:	f000 fda6 	bl	80018fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dae:	f000 f911 	bl	8000fd4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000db2:	f000 f9cf 	bl	8001154 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000db6:	f000 f99d 	bl	80010f4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000dba:	f000 f95d 	bl	8001078 <MX_SPI1_Init>
  extern Diskio_drvTypeDef SD_Driver;
  FATFS_LinkDriver(&SD_Driver, "");
 8000dbe:	496d      	ldr	r1, [pc, #436]	@ (8000f74 <main+0x1d0>)
 8000dc0:	486d      	ldr	r0, [pc, #436]	@ (8000f78 <main+0x1d4>)
 8000dc2:	f008 fce3 	bl	800978c <FATFS_LinkDriver>
  MX_FATFS_Init();
 8000dc6:	f003 ff41 	bl	8004c4c <MX_FATFS_Init>

  /* USER CODE BEGIN 2 */
  uint8_t tx = 0xFF, rx;
 8000dca:	23ff      	movs	r3, #255	@ 0xff
 8000dcc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET); // CS LOW
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2110      	movs	r1, #16
 8000dd2:	486a      	ldr	r0, [pc, #424]	@ (8000f7c <main+0x1d8>)
 8000dd4:	f001 f8ba 	bl	8001f4c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(&hspi1, &tx, &rx, 1, HAL_MAX_DELAY); // should not hang
 8000dd8:	1dba      	adds	r2, r7, #6
 8000dda:	1df9      	adds	r1, r7, #7
 8000ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	2301      	movs	r3, #1
 8000de4:	4866      	ldr	r0, [pc, #408]	@ (8000f80 <main+0x1dc>)
 8000de6:	f002 fe02 	bl	80039ee <HAL_SPI_TransmitReceive>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET); // CS HIGH
 8000dea:	2201      	movs	r2, #1
 8000dec:	2110      	movs	r1, #16
 8000dee:	4863      	ldr	r0, [pc, #396]	@ (8000f7c <main+0x1d8>)
 8000df0:	f001 f8ac 	bl	8001f4c <HAL_GPIO_WritePin>


  HAL_Delay(10);
 8000df4:	200a      	movs	r0, #10
 8000df6:	f000 fdf5 	bl	80019e4 <HAL_Delay>
  fresult = f_mount(&fs, "", 1);
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	495d      	ldr	r1, [pc, #372]	@ (8000f74 <main+0x1d0>)
 8000dfe:	4861      	ldr	r0, [pc, #388]	@ (8000f84 <main+0x1e0>)
 8000e00:	f007 fb66 	bl	80084d0 <f_mount>
 8000e04:	4603      	mov	r3, r0
 8000e06:	461a      	mov	r2, r3
 8000e08:	4b5f      	ldr	r3, [pc, #380]	@ (8000f88 <main+0x1e4>)
 8000e0a:	701a      	strb	r2, [r3, #0]

if (fresult != FR_OK) {
 8000e0c:	4b5e      	ldr	r3, [pc, #376]	@ (8000f88 <main+0x1e4>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00a      	beq.n	8000e2a <main+0x86>
    sprintf(buffer, "Mount error: %d\r\n", fresult);
 8000e14:	4b5c      	ldr	r3, [pc, #368]	@ (8000f88 <main+0x1e4>)
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	495c      	ldr	r1, [pc, #368]	@ (8000f8c <main+0x1e8>)
 8000e1c:	485c      	ldr	r0, [pc, #368]	@ (8000f90 <main+0x1ec>)
 8000e1e:	f008 fd8b 	bl	8009938 <siprintf>
    send_uart(buffer);
 8000e22:	485b      	ldr	r0, [pc, #364]	@ (8000f90 <main+0x1ec>)
 8000e24:	f7ff ff8a 	bl	8000d3c <send_uart>
 8000e28:	e002      	b.n	8000e30 <main+0x8c>
}


else send_uart("SD_CARD mount success\r\n");
 8000e2a:	485a      	ldr	r0, [pc, #360]	@ (8000f94 <main+0x1f0>)
 8000e2c:	f7ff ff86 	bl	8000d3c <send_uart>

f_getfree("", &fre_clust, &pfs);
 8000e30:	4a59      	ldr	r2, [pc, #356]	@ (8000f98 <main+0x1f4>)
 8000e32:	495a      	ldr	r1, [pc, #360]	@ (8000f9c <main+0x1f8>)
 8000e34:	484f      	ldr	r0, [pc, #316]	@ (8000f74 <main+0x1d0>)
 8000e36:	f008 fb17 	bl	8009468 <f_getfree>
total=(uint32_t)((pfs->n_fatent-2)*pfs->csize*0.5);
 8000e3a:	4b57      	ldr	r3, [pc, #348]	@ (8000f98 <main+0x1f4>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6a1b      	ldr	r3, [r3, #32]
 8000e40:	3b02      	subs	r3, #2
 8000e42:	4a55      	ldr	r2, [pc, #340]	@ (8000f98 <main+0x1f4>)
 8000e44:	6812      	ldr	r2, [r2, #0]
 8000e46:	8952      	ldrh	r2, [r2, #10]
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fc83 	bl	8000758 <__aeabi_ui2d>
 8000e52:	f04f 0200 	mov.w	r2, #0
 8000e56:	4b52      	ldr	r3, [pc, #328]	@ (8000fa0 <main+0x1fc>)
 8000e58:	f7ff fa12 	bl	8000280 <__aeabi_dmul>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	460b      	mov	r3, r1
 8000e60:	4610      	mov	r0, r2
 8000e62:	4619      	mov	r1, r3
 8000e64:	f7ff fcf2 	bl	800084c <__aeabi_d2uiz>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	4a4e      	ldr	r2, [pc, #312]	@ (8000fa4 <main+0x200>)
 8000e6c:	6013      	str	r3, [r2, #0]
sprintf(buffer,"SD CARD Total Size: |t%lu\r\n",total);
 8000e6e:	4b4d      	ldr	r3, [pc, #308]	@ (8000fa4 <main+0x200>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	494c      	ldr	r1, [pc, #304]	@ (8000fa8 <main+0x204>)
 8000e76:	4846      	ldr	r0, [pc, #280]	@ (8000f90 <main+0x1ec>)
 8000e78:	f008 fd5e 	bl	8009938 <siprintf>
send_uart(buffer);
 8000e7c:	4844      	ldr	r0, [pc, #272]	@ (8000f90 <main+0x1ec>)
 8000e7e:	f7ff ff5d 	bl	8000d3c <send_uart>
bufclear();
 8000e82:	f7ff ff73 	bl	8000d6c <bufclear>

free_space=(uint32_t)(fre_clust*pfs->csize*0.5);
 8000e86:	4b44      	ldr	r3, [pc, #272]	@ (8000f98 <main+0x1f4>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	895b      	ldrh	r3, [r3, #10]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b43      	ldr	r3, [pc, #268]	@ (8000f9c <main+0x1f8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	fb02 f303 	mul.w	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff fc5e 	bl	8000758 <__aeabi_ui2d>
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	4b3f      	ldr	r3, [pc, #252]	@ (8000fa0 <main+0x1fc>)
 8000ea2:	f7ff f9ed 	bl	8000280 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff fccd 	bl	800084c <__aeabi_d2uiz>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	4a3d      	ldr	r2, [pc, #244]	@ (8000fac <main+0x208>)
 8000eb6:	6013      	str	r3, [r2, #0]
sprintf(buffer,"SD CARD Free space: \t%lu\r\n",free_space);
 8000eb8:	4b3c      	ldr	r3, [pc, #240]	@ (8000fac <main+0x208>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	493c      	ldr	r1, [pc, #240]	@ (8000fb0 <main+0x20c>)
 8000ec0:	4833      	ldr	r0, [pc, #204]	@ (8000f90 <main+0x1ec>)
 8000ec2:	f008 fd39 	bl	8009938 <siprintf>
send_uart(buffer);
 8000ec6:	4832      	ldr	r0, [pc, #200]	@ (8000f90 <main+0x1ec>)
 8000ec8:	f7ff ff38 	bl	8000d3c <send_uart>
fresult = f_open(&fil, "file1.txt", FA_OPEN_ALWAYS | FA_WRITE);
 8000ecc:	2212      	movs	r2, #18
 8000ece:	4939      	ldr	r1, [pc, #228]	@ (8000fb4 <main+0x210>)
 8000ed0:	4839      	ldr	r0, [pc, #228]	@ (8000fb8 <main+0x214>)
 8000ed2:	f007 fb43 	bl	800855c <f_open>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <main+0x1e4>)
 8000edc:	701a      	strb	r2, [r3, #0]
//f_lseek(&fil, f_size(&fil));  // Move to end for append

if (fresult == FR_OK) {
 8000ede:	4b2a      	ldr	r3, [pc, #168]	@ (8000f88 <main+0x1e4>)
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d114      	bne.n	8000f10 <main+0x16c>
    sprintf(buffer, "Log: Time %lu\r\n", HAL_GetTick());
 8000ee6:	f000 fd71 	bl	80019cc <HAL_GetTick>
 8000eea:	4603      	mov	r3, r0
 8000eec:	461a      	mov	r2, r3
 8000eee:	4933      	ldr	r1, [pc, #204]	@ (8000fbc <main+0x218>)
 8000ef0:	4827      	ldr	r0, [pc, #156]	@ (8000f90 <main+0x1ec>)
 8000ef2:	f008 fd21 	bl	8009938 <siprintf>
    f_write(&fil, buffer, strlen(buffer), &bw);
 8000ef6:	4826      	ldr	r0, [pc, #152]	@ (8000f90 <main+0x1ec>)
 8000ef8:	f7ff f96a 	bl	80001d0 <strlen>
 8000efc:	4602      	mov	r2, r0
 8000efe:	4b30      	ldr	r3, [pc, #192]	@ (8000fc0 <main+0x21c>)
 8000f00:	4923      	ldr	r1, [pc, #140]	@ (8000f90 <main+0x1ec>)
 8000f02:	482d      	ldr	r0, [pc, #180]	@ (8000fb8 <main+0x214>)
 8000f04:	f007 ff91 	bl	8008e2a <f_write>
    f_close(&fil);
 8000f08:	482b      	ldr	r0, [pc, #172]	@ (8000fb8 <main+0x214>)
 8000f0a:	f008 fa83 	bl	8009414 <f_close>
 8000f0e:	e002      	b.n	8000f16 <main+0x172>
} else {
    send_uart("File open error\r\n");
 8000f10:	482c      	ldr	r0, [pc, #176]	@ (8000fc4 <main+0x220>)
 8000f12:	f7ff ff13 	bl	8000d3c <send_uart>
}


if (fresult == 0) send_uart("Write success\r\n");
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <main+0x1e4>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d103      	bne.n	8000f26 <main+0x182>
 8000f1e:	482a      	ldr	r0, [pc, #168]	@ (8000fc8 <main+0x224>)
 8000f20:	f7ff ff0c 	bl	8000d3c <send_uart>
 8000f24:	e002      	b.n	8000f2c <main+0x188>
else send_uart("Write failed\r\n");
 8000f26:	4829      	ldr	r0, [pc, #164]	@ (8000fcc <main+0x228>)
 8000f28:	f7ff ff08 	bl	8000d3c <send_uart>



fresult=f_close(&fil);
 8000f2c:	4822      	ldr	r0, [pc, #136]	@ (8000fb8 <main+0x214>)
 8000f2e:	f008 fa71 	bl	8009414 <f_close>
 8000f32:	4603      	mov	r3, r0
 8000f34:	461a      	mov	r2, r3
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <main+0x1e4>)
 8000f38:	701a      	strb	r2, [r3, #0]
send_uart("file1.txt created\r\n");
 8000f3a:	4825      	ldr	r0, [pc, #148]	@ (8000fd0 <main+0x22c>)
 8000f3c:	f7ff fefe 	bl	8000d3c <send_uart>
fresult=f_open(&fil,"file1.txt",FA_READ);
 8000f40:	2201      	movs	r2, #1
 8000f42:	491c      	ldr	r1, [pc, #112]	@ (8000fb4 <main+0x210>)
 8000f44:	481c      	ldr	r0, [pc, #112]	@ (8000fb8 <main+0x214>)
 8000f46:	f007 fb09 	bl	800855c <f_open>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <main+0x1e4>)
 8000f50:	701a      	strb	r2, [r3, #0]
f_gets(buffer,sizeof(buffer),&fil);
 8000f52:	4a19      	ldr	r2, [pc, #100]	@ (8000fb8 <main+0x214>)
 8000f54:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <main+0x1ec>)
 8000f5a:	f008 fb8c 	bl	8009676 <f_gets>
send_uart(buffer);
 8000f5e:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <main+0x1ec>)
 8000f60:	f7ff feec 	bl	8000d3c <send_uart>
f_close(&fil);
 8000f64:	4814      	ldr	r0, [pc, #80]	@ (8000fb8 <main+0x214>)
 8000f66:	f008 fa55 	bl	8009414 <f_close>
bufclear();
 8000f6a:	f7ff feff 	bl	8000d6c <bufclear>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f6e:	bf00      	nop
 8000f70:	e7fd      	b.n	8000f6e <main+0x1ca>
 8000f72:	bf00      	nop
 8000f74:	0800a290 	.word	0x0800a290
 8000f78:	20000004 	.word	0x20000004
 8000f7c:	48000800 	.word	0x48000800
 8000f80:	200000a4 	.word	0x200000a4
 8000f84:	20000190 	.word	0x20000190
 8000f88:	20002228 	.word	0x20002228
 8000f8c:	0800a294 	.word	0x0800a294
 8000f90:	2000222c 	.word	0x2000222c
 8000f94:	0800a2a8 	.word	0x0800a2a8
 8000f98:	20002630 	.word	0x20002630
 8000f9c:	20002634 	.word	0x20002634
 8000fa0:	3fe00000 	.word	0x3fe00000
 8000fa4:	20002638 	.word	0x20002638
 8000fa8:	0800a2c0 	.word	0x0800a2c0
 8000fac:	2000263c 	.word	0x2000263c
 8000fb0:	0800a2dc 	.word	0x0800a2dc
 8000fb4:	0800a2f8 	.word	0x0800a2f8
 8000fb8:	200011d0 	.word	0x200011d0
 8000fbc:	0800a304 	.word	0x0800a304
 8000fc0:	2000262c 	.word	0x2000262c
 8000fc4:	0800a314 	.word	0x0800a314
 8000fc8:	0800a328 	.word	0x0800a328
 8000fcc:	0800a338 	.word	0x0800a338
 8000fd0:	0800a348 	.word	0x0800a348

08000fd4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b096      	sub	sp, #88	@ 0x58
 8000fd8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fda:	f107 0314 	add.w	r3, r7, #20
 8000fde:	2244      	movs	r2, #68	@ 0x44
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f008 fcca 	bl	800997c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe8:	463b      	mov	r3, r7
 8000fea:	2200      	movs	r2, #0
 8000fec:	601a      	str	r2, [r3, #0]
 8000fee:	605a      	str	r2, [r3, #4]
 8000ff0:	609a      	str	r2, [r3, #8]
 8000ff2:	60da      	str	r2, [r3, #12]
 8000ff4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000ff6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ffa:	f000 ffcd 	bl	8001f98 <HAL_PWREx_ControlVoltageScaling>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001004:	f000 f90a 	bl	800121c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001008:	2302      	movs	r3, #2
 800100a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800100c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001010:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001012:	2310      	movs	r3, #16
 8001014:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001016:	2302      	movs	r3, #2
 8001018:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800101a:	2302      	movs	r3, #2
 800101c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800101e:	2301      	movs	r3, #1
 8001020:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001022:	230a      	movs	r3, #10
 8001024:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001026:	2307      	movs	r3, #7
 8001028:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800102a:	2302      	movs	r3, #2
 800102c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800102e:	2302      	movs	r3, #2
 8001030:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001032:	f107 0314 	add.w	r3, r7, #20
 8001036:	4618      	mov	r0, r3
 8001038:	f001 f804 	bl	8002044 <HAL_RCC_OscConfig>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001042:	f000 f8eb 	bl	800121c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001046:	230f      	movs	r3, #15
 8001048:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800104a:	2303      	movs	r3, #3
 800104c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800104e:	2300      	movs	r3, #0
 8001050:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001052:	2300      	movs	r3, #0
 8001054:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800105a:	463b      	mov	r3, r7
 800105c:	2104      	movs	r1, #4
 800105e:	4618      	mov	r0, r3
 8001060:	f001 fbcc 	bl	80027fc <HAL_RCC_ClockConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800106a:	f000 f8d7 	bl	800121c <Error_Handler>
  }
}
 800106e:	bf00      	nop
 8001070:	3758      	adds	r7, #88	@ 0x58
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800107c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ec <MX_SPI1_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	@ (80010f0 <MX_SPI1_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001082:	4b1a      	ldr	r3, [pc, #104]	@ (80010ec <MX_SPI1_Init+0x74>)
 8001084:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001088:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800108a:	4b18      	ldr	r3, [pc, #96]	@ (80010ec <MX_SPI1_Init+0x74>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001090:	4b16      	ldr	r3, [pc, #88]	@ (80010ec <MX_SPI1_Init+0x74>)
 8001092:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001096:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001098:	4b14      	ldr	r3, [pc, #80]	@ (80010ec <MX_SPI1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800109e:	4b13      	ldr	r3, [pc, #76]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80010a4:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010a6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010ae:	2238      	movs	r2, #56	@ 0x38
 80010b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010c4:	4b09      	ldr	r3, [pc, #36]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010c6:	2207      	movs	r2, #7
 80010c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ca:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010d0:	4b06      	ldr	r3, [pc, #24]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010d2:	2208      	movs	r2, #8
 80010d4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <MX_SPI1_Init+0x74>)
 80010d8:	f002 fa70 	bl	80035bc <HAL_SPI_Init>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010e2:	f000 f89b 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200000a4 	.word	0x200000a4
 80010f0:	40013000 	.word	0x40013000

080010f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80010f8:	4b14      	ldr	r3, [pc, #80]	@ (800114c <MX_USART2_UART_Init+0x58>)
 80010fa:	4a15      	ldr	r2, [pc, #84]	@ (8001150 <MX_USART2_UART_Init+0x5c>)
 80010fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80010fe:	4b13      	ldr	r3, [pc, #76]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001100:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001104:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001106:	4b11      	ldr	r3, [pc, #68]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001108:	2200      	movs	r2, #0
 800110a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800110c:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <MX_USART2_UART_Init+0x58>)
 800110e:	2200      	movs	r2, #0
 8001110:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001114:	2200      	movs	r2, #0
 8001116:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001118:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <MX_USART2_UART_Init+0x58>)
 800111a:	220c      	movs	r2, #12
 800111c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111e:	4b0b      	ldr	r3, [pc, #44]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001120:	2200      	movs	r2, #0
 8001122:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001124:	4b09      	ldr	r3, [pc, #36]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001126:	2200      	movs	r2, #0
 8001128:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800112a:	4b08      	ldr	r3, [pc, #32]	@ (800114c <MX_USART2_UART_Init+0x58>)
 800112c:	2200      	movs	r2, #0
 800112e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001132:	2200      	movs	r2, #0
 8001134:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001136:	4805      	ldr	r0, [pc, #20]	@ (800114c <MX_USART2_UART_Init+0x58>)
 8001138:	f002 ffdc 	bl	80040f4 <HAL_UART_Init>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001142:	f000 f86b 	bl	800121c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000108 	.word	0x20000108
 8001150:	40004400 	.word	0x40004400

08001154 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	@ 0x28
 8001158:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115a:	f107 0314 	add.w	r3, r7, #20
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]
 8001168:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800116a:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <MX_GPIO_Init+0xc0>)
 800116c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800116e:	4a29      	ldr	r2, [pc, #164]	@ (8001214 <MX_GPIO_Init+0xc0>)
 8001170:	f043 0304 	orr.w	r3, r3, #4
 8001174:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001176:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <MX_GPIO_Init+0xc0>)
 8001178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	613b      	str	r3, [r7, #16]
 8001180:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001182:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <MX_GPIO_Init+0xc0>)
 8001184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001186:	4a23      	ldr	r2, [pc, #140]	@ (8001214 <MX_GPIO_Init+0xc0>)
 8001188:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800118c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800118e:	4b21      	ldr	r3, [pc, #132]	@ (8001214 <MX_GPIO_Init+0xc0>)
 8001190:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001196:	60fb      	str	r3, [r7, #12]
 8001198:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800119a:	4b1e      	ldr	r3, [pc, #120]	@ (8001214 <MX_GPIO_Init+0xc0>)
 800119c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119e:	4a1d      	ldr	r2, [pc, #116]	@ (8001214 <MX_GPIO_Init+0xc0>)
 80011a0:	f043 0301 	orr.w	r3, r3, #1
 80011a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001214 <MX_GPIO_Init+0xc0>)
 80011a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011aa:	f003 0301 	and.w	r3, r3, #1
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011b2:	4b18      	ldr	r3, [pc, #96]	@ (8001214 <MX_GPIO_Init+0xc0>)
 80011b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011b6:	4a17      	ldr	r2, [pc, #92]	@ (8001214 <MX_GPIO_Init+0xc0>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011be:	4b15      	ldr	r3, [pc, #84]	@ (8001214 <MX_GPIO_Init+0xc0>)
 80011c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011c2:	f003 0302 	and.w	r3, r3, #2
 80011c6:	607b      	str	r3, [r7, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2110      	movs	r1, #16
 80011ce:	4812      	ldr	r0, [pc, #72]	@ (8001218 <MX_GPIO_Init+0xc4>)
 80011d0:	f000 febc 	bl	8001f4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011da:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80011de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	4619      	mov	r1, r3
 80011ea:	480b      	ldr	r0, [pc, #44]	@ (8001218 <MX_GPIO_Init+0xc4>)
 80011ec:	f000 fd04 	bl	8001bf8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SD_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 80011f0:	2310      	movs	r3, #16
 80011f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f4:	2301      	movs	r3, #1
 80011f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f8:	2300      	movs	r3, #0
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 0314 	add.w	r3, r7, #20
 8001204:	4619      	mov	r1, r3
 8001206:	4804      	ldr	r0, [pc, #16]	@ (8001218 <MX_GPIO_Init+0xc4>)
 8001208:	f000 fcf6 	bl	8001bf8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800120c:	bf00      	nop
 800120e:	3728      	adds	r7, #40	@ 0x28
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	40021000 	.word	0x40021000
 8001218:	48000800 	.word	0x48000800

0800121c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001220:	b672      	cpsid	i
}
 8001222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <Error_Handler+0x8>

08001228 <send_dummy_clocks>:
#define ACMD41  41  // SD_SEND_OP_COND
#define CMD58   58  // READ_OCR

static volatile DSTATUS Stat = STA_NOINIT;

static void send_dummy_clocks(void) {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
    CS_HIGH();
 800122e:	2201      	movs	r2, #1
 8001230:	2110      	movs	r1, #16
 8001232:	480d      	ldr	r0, [pc, #52]	@ (8001268 <send_dummy_clocks+0x40>)
 8001234:	f000 fe8a 	bl	8001f4c <HAL_GPIO_WritePin>
    uint8_t dummy = 0xFF;
 8001238:	23ff      	movs	r3, #255	@ 0xff
 800123a:	70fb      	strb	r3, [r7, #3]
    for (int i = 0; i < 10; i++) {
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	e009      	b.n	8001256 <send_dummy_clocks+0x2e>
        HAL_SPI_Transmit(&hspi1, &dummy, 1, HAL_MAX_DELAY); // 80 clock cycles
 8001242:	1cf9      	adds	r1, r7, #3
 8001244:	f04f 33ff 	mov.w	r3, #4294967295
 8001248:	2201      	movs	r2, #1
 800124a:	4808      	ldr	r0, [pc, #32]	@ (800126c <send_dummy_clocks+0x44>)
 800124c:	f002 fa59 	bl	8003702 <HAL_SPI_Transmit>
    for (int i = 0; i < 10; i++) {
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3301      	adds	r3, #1
 8001254:	607b      	str	r3, [r7, #4]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b09      	cmp	r3, #9
 800125a:	ddf2      	ble.n	8001242 <send_dummy_clocks+0x1a>
    }
}
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	48000800 	.word	0x48000800
 800126c:	200000a4 	.word	0x200000a4

08001270 <spi_txrx>:

static uint8_t spi_txrx(uint8_t data) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af02      	add	r7, sp, #8
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
    uint8_t rx;
    HAL_SPI_TransmitReceive(&hspi1, &data, &rx, 1, HAL_MAX_DELAY);
 800127a:	f107 020f 	add.w	r2, r7, #15
 800127e:	1df9      	adds	r1, r7, #7
 8001280:	f04f 33ff 	mov.w	r3, #4294967295
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2301      	movs	r3, #1
 8001288:	4803      	ldr	r0, [pc, #12]	@ (8001298 <spi_txrx+0x28>)
 800128a:	f002 fbb0 	bl	80039ee <HAL_SPI_TransmitReceive>
    return rx;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	200000a4 	.word	0x200000a4

0800129c <send_command>:

static void send_command(uint8_t cmd, uint32_t arg, uint8_t crc) {
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	6039      	str	r1, [r7, #0]
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4613      	mov	r3, r2
 80012aa:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[6];
    buf[0] = 0x40 | cmd;
 80012ac:	79fb      	ldrb	r3, [r7, #7]
 80012ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	733b      	strb	r3, [r7, #12]
    buf[1] = (arg >> 24) & 0xFF;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	0e1b      	lsrs	r3, r3, #24
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	737b      	strb	r3, [r7, #13]
    buf[2] = (arg >> 16) & 0xFF;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	0c1b      	lsrs	r3, r3, #16
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	73bb      	strb	r3, [r7, #14]
    buf[3] = (arg >> 8) & 0xFF;
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	0a1b      	lsrs	r3, r3, #8
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	73fb      	strb	r3, [r7, #15]
    buf[4] = arg & 0xFF;
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	b2db      	uxtb	r3, r3
 80012d2:	743b      	strb	r3, [r7, #16]
    buf[5] = crc;
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	747b      	strb	r3, [r7, #17]
    for (int i = 0; i < 6; i++) {
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00a      	b.n	80012f4 <send_command+0x58>
        spi_txrx(buf[i]);
 80012de:	f107 020c 	add.w	r2, r7, #12
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	4413      	add	r3, r2
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff ffc1 	bl	8001270 <spi_txrx>
    for (int i = 0; i < 6; i++) {
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	2b05      	cmp	r3, #5
 80012f8:	ddf1      	ble.n	80012de <send_command+0x42>
    }
}
 80012fa:	bf00      	nop
 80012fc:	bf00      	nop
 80012fe:	3718      	adds	r7, #24
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}

08001304 <wait_response>:

static uint8_t wait_response(uint8_t expected, uint32_t timeout) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	6039      	str	r1, [r7, #0]
 800130e:	71fb      	strb	r3, [r7, #7]
    uint8_t res;
    do {
        res = spi_txrx(0xFF);
 8001310:	20ff      	movs	r0, #255	@ 0xff
 8001312:	f7ff ffad 	bl	8001270 <spi_txrx>
 8001316:	4603      	mov	r3, r0
 8001318:	73fb      	strb	r3, [r7, #15]
        timeout--;
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	603b      	str	r3, [r7, #0]
    } while ((res != expected) && timeout);
 8001320:	7bfa      	ldrb	r2, [r7, #15]
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	429a      	cmp	r2, r3
 8001326:	d002      	beq.n	800132e <wait_response+0x2a>
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <wait_response+0xc>
    return res;
 800132e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3710      	adds	r7, #16
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}

08001338 <SD_initialize>:

DSTATUS SD_initialize(BYTE drv) {
 8001338:	b580      	push	{r7, lr}
 800133a:	b088      	sub	sp, #32
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	71fb      	strb	r3, [r7, #7]
    if (drv != 0) return STA_NOINIT;
 8001342:	79fb      	ldrb	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <SD_initialize+0x14>
 8001348:	2301      	movs	r3, #1
 800134a:	e0d5      	b.n	80014f8 <SD_initialize+0x1c0>

    CS_HIGH();
 800134c:	2201      	movs	r2, #1
 800134e:	2110      	movs	r1, #16
 8001350:	486b      	ldr	r0, [pc, #428]	@ (8001500 <SD_initialize+0x1c8>)
 8001352:	f000 fdfb 	bl	8001f4c <HAL_GPIO_WritePin>
    send_dummy_clocks(); // 80 dummy clocks
 8001356:	f7ff ff67 	bl	8001228 <send_dummy_clocks>

    CS_LOW();
 800135a:	2200      	movs	r2, #0
 800135c:	2110      	movs	r1, #16
 800135e:	4868      	ldr	r0, [pc, #416]	@ (8001500 <SD_initialize+0x1c8>)
 8001360:	f000 fdf4 	bl	8001f4c <HAL_GPIO_WritePin>

    send_command(CMD0, 0x00000000, 0x95); // GO_IDLE_STATE
 8001364:	2295      	movs	r2, #149	@ 0x95
 8001366:	2100      	movs	r1, #0
 8001368:	2000      	movs	r0, #0
 800136a:	f7ff ff97 	bl	800129c <send_command>
    if (wait_response(0x01, 1000) != 0x01) {
 800136e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001372:	2001      	movs	r0, #1
 8001374:	f7ff ffc6 	bl	8001304 <wait_response>
 8001378:	4603      	mov	r3, r0
 800137a:	2b01      	cmp	r3, #1
 800137c:	d006      	beq.n	800138c <SD_initialize+0x54>
        CS_HIGH();
 800137e:	2201      	movs	r2, #1
 8001380:	2110      	movs	r1, #16
 8001382:	485f      	ldr	r0, [pc, #380]	@ (8001500 <SD_initialize+0x1c8>)
 8001384:	f000 fde2 	bl	8001f4c <HAL_GPIO_WritePin>
        return STA_NOINIT;
 8001388:	2301      	movs	r3, #1
 800138a:	e0b5      	b.n	80014f8 <SD_initialize+0x1c0>
    }

    CS_HIGH();
 800138c:	2201      	movs	r2, #1
 800138e:	2110      	movs	r1, #16
 8001390:	485b      	ldr	r0, [pc, #364]	@ (8001500 <SD_initialize+0x1c8>)
 8001392:	f000 fddb 	bl	8001f4c <HAL_GPIO_WritePin>
    spi_txrx(0xFF);
 8001396:	20ff      	movs	r0, #255	@ 0xff
 8001398:	f7ff ff6a 	bl	8001270 <spi_txrx>

    CS_LOW();
 800139c:	2200      	movs	r2, #0
 800139e:	2110      	movs	r1, #16
 80013a0:	4857      	ldr	r0, [pc, #348]	@ (8001500 <SD_initialize+0x1c8>)
 80013a2:	f000 fdd3 	bl	8001f4c <HAL_GPIO_WritePin>
    send_command(CMD8, 0x000001AA, 0x87); // SEND_IF_COND
 80013a6:	2287      	movs	r2, #135	@ 0x87
 80013a8:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80013ac:	2008      	movs	r0, #8
 80013ae:	f7ff ff75 	bl	800129c <send_command>
    uint8_t r7[5];
    if (wait_response(0x01, 1000) != 0x01) {
 80013b2:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80013b6:	2001      	movs	r0, #1
 80013b8:	f7ff ffa4 	bl	8001304 <wait_response>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d006      	beq.n	80013d0 <SD_initialize+0x98>
        CS_HIGH();
 80013c2:	2201      	movs	r2, #1
 80013c4:	2110      	movs	r1, #16
 80013c6:	484e      	ldr	r0, [pc, #312]	@ (8001500 <SD_initialize+0x1c8>)
 80013c8:	f000 fdc0 	bl	8001f4c <HAL_GPIO_WritePin>
        return STA_NOINIT;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e093      	b.n	80014f8 <SD_initialize+0x1c0>
    }
    for (int i = 0; i < 4; i++) r7[i] = spi_txrx(0xFF);
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
 80013d4:	e00d      	b.n	80013f2 <SD_initialize+0xba>
 80013d6:	20ff      	movs	r0, #255	@ 0xff
 80013d8:	f7ff ff4a 	bl	8001270 <spi_txrx>
 80013dc:	4603      	mov	r3, r0
 80013de:	4619      	mov	r1, r3
 80013e0:	f107 020c 	add.w	r2, r7, #12
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	460a      	mov	r2, r1
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	3301      	adds	r3, #1
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	ddee      	ble.n	80013d6 <SD_initialize+0x9e>
    CS_HIGH();
 80013f8:	2201      	movs	r2, #1
 80013fa:	2110      	movs	r1, #16
 80013fc:	4840      	ldr	r0, [pc, #256]	@ (8001500 <SD_initialize+0x1c8>)
 80013fe:	f000 fda5 	bl	8001f4c <HAL_GPIO_WritePin>
    spi_txrx(0xFF);
 8001402:	20ff      	movs	r0, #255	@ 0xff
 8001404:	f7ff ff34 	bl	8001270 <spi_txrx>

    uint32_t retry = 0xFFFF;
 8001408:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800140c:	61bb      	str	r3, [r7, #24]
    do {
        CS_LOW();
 800140e:	2200      	movs	r2, #0
 8001410:	2110      	movs	r1, #16
 8001412:	483b      	ldr	r0, [pc, #236]	@ (8001500 <SD_initialize+0x1c8>)
 8001414:	f000 fd9a 	bl	8001f4c <HAL_GPIO_WritePin>
        send_command(CMD55, 0, 0x65);
 8001418:	2265      	movs	r2, #101	@ 0x65
 800141a:	2100      	movs	r1, #0
 800141c:	2037      	movs	r0, #55	@ 0x37
 800141e:	f7ff ff3d 	bl	800129c <send_command>
        if (wait_response(0x01, 500) != 0x01) {
 8001422:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8001426:	2001      	movs	r0, #1
 8001428:	f7ff ff6c 	bl	8001304 <wait_response>
 800142c:	4603      	mov	r3, r0
 800142e:	2b01      	cmp	r3, #1
 8001430:	d006      	beq.n	8001440 <SD_initialize+0x108>
            CS_HIGH();
 8001432:	2201      	movs	r2, #1
 8001434:	2110      	movs	r1, #16
 8001436:	4832      	ldr	r0, [pc, #200]	@ (8001500 <SD_initialize+0x1c8>)
 8001438:	f000 fd88 	bl	8001f4c <HAL_GPIO_WritePin>
            return STA_NOINIT;
 800143c:	2301      	movs	r3, #1
 800143e:	e05b      	b.n	80014f8 <SD_initialize+0x1c0>
        }

        send_command(ACMD41, 0x40000000, 0x77); // HCS
 8001440:	2277      	movs	r2, #119	@ 0x77
 8001442:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001446:	2029      	movs	r0, #41	@ 0x29
 8001448:	f7ff ff28 	bl	800129c <send_command>
        uint8_t resp = wait_response(0x00, 1000);
 800144c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001450:	2000      	movs	r0, #0
 8001452:	f7ff ff57 	bl	8001304 <wait_response>
 8001456:	4603      	mov	r3, r0
 8001458:	74fb      	strb	r3, [r7, #19]
        CS_HIGH();
 800145a:	2201      	movs	r2, #1
 800145c:	2110      	movs	r1, #16
 800145e:	4828      	ldr	r0, [pc, #160]	@ (8001500 <SD_initialize+0x1c8>)
 8001460:	f000 fd74 	bl	8001f4c <HAL_GPIO_WritePin>
        spi_txrx(0xFF);
 8001464:	20ff      	movs	r0, #255	@ 0xff
 8001466:	f7ff ff03 	bl	8001270 <spi_txrx>
        if (resp == 0x00) break;
 800146a:	7cfb      	ldrb	r3, [r7, #19]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <SD_initialize+0x144>
    } while (retry--);
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	1e5a      	subs	r2, r3, #1
 8001474:	61ba      	str	r2, [r7, #24]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d1c9      	bne.n	800140e <SD_initialize+0xd6>
 800147a:	e000      	b.n	800147e <SD_initialize+0x146>
        if (resp == 0x00) break;
 800147c:	bf00      	nop

    if (retry == 0) return STA_NOINIT;
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d101      	bne.n	8001488 <SD_initialize+0x150>
 8001484:	2301      	movs	r3, #1
 8001486:	e037      	b.n	80014f8 <SD_initialize+0x1c0>

    // CMD58 to read OCR
    CS_LOW();
 8001488:	2200      	movs	r2, #0
 800148a:	2110      	movs	r1, #16
 800148c:	481c      	ldr	r0, [pc, #112]	@ (8001500 <SD_initialize+0x1c8>)
 800148e:	f000 fd5d 	bl	8001f4c <HAL_GPIO_WritePin>
    send_command(CMD58, 0, 0xFD);
 8001492:	22fd      	movs	r2, #253	@ 0xfd
 8001494:	2100      	movs	r1, #0
 8001496:	203a      	movs	r0, #58	@ 0x3a
 8001498:	f7ff ff00 	bl	800129c <send_command>
    if (wait_response(0x00, 1000) != 0x00) {
 800149c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80014a0:	2000      	movs	r0, #0
 80014a2:	f7ff ff2f 	bl	8001304 <wait_response>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <SD_initialize+0x182>
        CS_HIGH();
 80014ac:	2201      	movs	r2, #1
 80014ae:	2110      	movs	r1, #16
 80014b0:	4813      	ldr	r0, [pc, #76]	@ (8001500 <SD_initialize+0x1c8>)
 80014b2:	f000 fd4b 	bl	8001f4c <HAL_GPIO_WritePin>
        return STA_NOINIT;
 80014b6:	2301      	movs	r3, #1
 80014b8:	e01e      	b.n	80014f8 <SD_initialize+0x1c0>
    }
    for (int i = 0; i < 4; i++) spi_txrx(0xFF);
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	e005      	b.n	80014cc <SD_initialize+0x194>
 80014c0:	20ff      	movs	r0, #255	@ 0xff
 80014c2:	f7ff fed5 	bl	8001270 <spi_txrx>
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b03      	cmp	r3, #3
 80014d0:	ddf6      	ble.n	80014c0 <SD_initialize+0x188>
    CS_HIGH();
 80014d2:	2201      	movs	r2, #1
 80014d4:	2110      	movs	r1, #16
 80014d6:	480a      	ldr	r0, [pc, #40]	@ (8001500 <SD_initialize+0x1c8>)
 80014d8:	f000 fd38 	bl	8001f4c <HAL_GPIO_WritePin>
    spi_txrx(0xFF);
 80014dc:	20ff      	movs	r0, #255	@ 0xff
 80014de:	f7ff fec7 	bl	8001270 <spi_txrx>

    Stat &= ~STA_NOINIT;
 80014e2:	4b08      	ldr	r3, [pc, #32]	@ (8001504 <SD_initialize+0x1cc>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	f023 0301 	bic.w	r3, r3, #1
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b05      	ldr	r3, [pc, #20]	@ (8001504 <SD_initialize+0x1cc>)
 80014f0:	701a      	strb	r2, [r3, #0]
    return Stat;
 80014f2:	4b04      	ldr	r3, [pc, #16]	@ (8001504 <SD_initialize+0x1cc>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	b2db      	uxtb	r3, r3
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3720      	adds	r7, #32
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	48000800 	.word	0x48000800
 8001504:	20000000 	.word	0x20000000

08001508 <SD_status>:

DSTATUS SD_status(BYTE drv) {
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
    return Stat;
 8001512:	4b04      	ldr	r3, [pc, #16]	@ (8001524 <SD_status+0x1c>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b2db      	uxtb	r3, r3
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	20000000 	.word	0x20000000

08001528 <SD_read>:

DRESULT SD_read(BYTE drv, BYTE *buff, DWORD sector, UINT count) {
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	60b9      	str	r1, [r7, #8]
 8001530:	607a      	str	r2, [r7, #4]
 8001532:	603b      	str	r3, [r7, #0]
 8001534:	4603      	mov	r3, r0
 8001536:	73fb      	strb	r3, [r7, #15]
    return RES_OK; // Add actual read logic
 8001538:	2300      	movs	r3, #0
}
 800153a:	4618      	mov	r0, r3
 800153c:	3714      	adds	r7, #20
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr

08001546 <SD_write>:

DRESULT SD_write(BYTE drv, const BYTE *buff, DWORD sector, UINT count) {
 8001546:	b480      	push	{r7}
 8001548:	b085      	sub	sp, #20
 800154a:	af00      	add	r7, sp, #0
 800154c:	60b9      	str	r1, [r7, #8]
 800154e:	607a      	str	r2, [r7, #4]
 8001550:	603b      	str	r3, [r7, #0]
 8001552:	4603      	mov	r3, r0
 8001554:	73fb      	strb	r3, [r7, #15]
#if _USE_WRITE == 0
    return RES_PARERR;
#else
    return RES_OK; // Add actual write logic
 8001556:	2300      	movs	r3, #0
#endif
}
 8001558:	4618      	mov	r0, r3
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <SD_ioctl>:

DRESULT SD_ioctl(BYTE drv, BYTE cmd, void *buff) {
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	603a      	str	r2, [r7, #0]
 800156e:	71fb      	strb	r3, [r7, #7]
 8001570:	460b      	mov	r3, r1
 8001572:	71bb      	strb	r3, [r7, #6]
    switch (cmd) {
 8001574:	79bb      	ldrb	r3, [r7, #6]
 8001576:	2b03      	cmp	r3, #3
 8001578:	d81d      	bhi.n	80015b6 <SD_ioctl+0x52>
 800157a:	a201      	add	r2, pc, #4	@ (adr r2, 8001580 <SD_ioctl+0x1c>)
 800157c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001580:	08001591 	.word	0x08001591
 8001584:	08001595 	.word	0x08001595
 8001588:	080015a1 	.word	0x080015a1
 800158c:	080015ad 	.word	0x080015ad
    case CTRL_SYNC:
        return RES_OK;
 8001590:	2300      	movs	r3, #0
 8001592:	e011      	b.n	80015b8 <SD_ioctl+0x54>
    case GET_SECTOR_COUNT:
        *(DWORD*)buff = 1024;
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800159a:	601a      	str	r2, [r3, #0]
        return RES_OK;
 800159c:	2300      	movs	r3, #0
 800159e:	e00b      	b.n	80015b8 <SD_ioctl+0x54>
    case GET_SECTOR_SIZE:
        *(WORD*)buff = 512;
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80015a6:	801a      	strh	r2, [r3, #0]
        return RES_OK;
 80015a8:	2300      	movs	r3, #0
 80015aa:	e005      	b.n	80015b8 <SD_ioctl+0x54>
    case GET_BLOCK_SIZE:
        *(DWORD*)buff = 1;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
        return RES_OK;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e000      	b.n	80015b8 <SD_ioctl+0x54>
    default:
        return RES_PARERR;
 80015b6:	2304      	movs	r3, #4
    }
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001608 <HAL_MspInit+0x44>)
 80015cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001608 <HAL_MspInit+0x44>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80015d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001608 <HAL_MspInit+0x44>)
 80015d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	4b09      	ldr	r3, [pc, #36]	@ (8001608 <HAL_MspInit+0x44>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015e6:	4a08      	ldr	r2, [pc, #32]	@ (8001608 <HAL_MspInit+0x44>)
 80015e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80015ee:	4b06      	ldr	r3, [pc, #24]	@ (8001608 <HAL_MspInit+0x44>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f6:	603b      	str	r3, [r7, #0]
 80015f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	40021000 	.word	0x40021000

0800160c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	@ 0x28
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001614:	f107 0314 	add.w	r3, r7, #20
 8001618:	2200      	movs	r2, #0
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	605a      	str	r2, [r3, #4]
 800161e:	609a      	str	r2, [r3, #8]
 8001620:	60da      	str	r2, [r3, #12]
 8001622:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a17      	ldr	r2, [pc, #92]	@ (8001688 <HAL_SPI_MspInit+0x7c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d128      	bne.n	8001680 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800162e:	4b17      	ldr	r3, [pc, #92]	@ (800168c <HAL_SPI_MspInit+0x80>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001632:	4a16      	ldr	r2, [pc, #88]	@ (800168c <HAL_SPI_MspInit+0x80>)
 8001634:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001638:	6613      	str	r3, [r2, #96]	@ 0x60
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <HAL_SPI_MspInit+0x80>)
 800163c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800163e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001642:	613b      	str	r3, [r7, #16]
 8001644:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <HAL_SPI_MspInit+0x80>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	4a10      	ldr	r2, [pc, #64]	@ (800168c <HAL_SPI_MspInit+0x80>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <HAL_SPI_MspInit+0x80>)
 8001654:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800165e:	23e0      	movs	r3, #224	@ 0xe0
 8001660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166a:	2303      	movs	r3, #3
 800166c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800166e:	2305      	movs	r3, #5
 8001670:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800167c:	f000 fabc 	bl	8001bf8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001680:	bf00      	nop
 8001682:	3728      	adds	r7, #40	@ 0x28
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	40013000 	.word	0x40013000
 800168c:	40021000 	.word	0x40021000

08001690 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b0ac      	sub	sp, #176	@ 0xb0
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001698:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]
 80016a0:	605a      	str	r2, [r3, #4]
 80016a2:	609a      	str	r2, [r3, #8]
 80016a4:	60da      	str	r2, [r3, #12]
 80016a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	2288      	movs	r2, #136	@ 0x88
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f008 f963 	bl	800997c <memset>
  if(huart->Instance==USART2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a21      	ldr	r2, [pc, #132]	@ (8001740 <HAL_UART_MspInit+0xb0>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d13b      	bne.n	8001738 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80016c4:	2300      	movs	r3, #0
 80016c6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4618      	mov	r0, r3
 80016ce:	f001 fab9 	bl	8002c44 <HAL_RCCEx_PeriphCLKConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80016d8:	f7ff fda0 	bl	800121c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016dc:	4b19      	ldr	r3, [pc, #100]	@ (8001744 <HAL_UART_MspInit+0xb4>)
 80016de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016e0:	4a18      	ldr	r2, [pc, #96]	@ (8001744 <HAL_UART_MspInit+0xb4>)
 80016e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e6:	6593      	str	r3, [r2, #88]	@ 0x58
 80016e8:	4b16      	ldr	r3, [pc, #88]	@ (8001744 <HAL_UART_MspInit+0xb4>)
 80016ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <HAL_UART_MspInit+0xb4>)
 80016f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f8:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <HAL_UART_MspInit+0xb4>)
 80016fa:	f043 0301 	orr.w	r3, r3, #1
 80016fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001700:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <HAL_UART_MspInit+0xb4>)
 8001702:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001704:	f003 0301 	and.w	r3, r3, #1
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800170c:	230c      	movs	r3, #12
 800170e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	2302      	movs	r3, #2
 8001714:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001724:	2307      	movs	r3, #7
 8001726:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800172a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800172e:	4619      	mov	r1, r3
 8001730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001734:	f000 fa60 	bl	8001bf8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001738:	bf00      	nop
 800173a:	37b0      	adds	r7, #176	@ 0xb0
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	40004400 	.word	0x40004400
 8001744:	40021000 	.word	0x40021000

08001748 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt=0;
volatile uint8_t Timer1,Timer2;

void SDTimer_Handler(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
	if(Timer1>0)
 800174c:	4b0e      	ldr	r3, [pc, #56]	@ (8001788 <SDTimer_Handler+0x40>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	b2db      	uxtb	r3, r3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d006      	beq.n	8001764 <SDTimer_Handler+0x1c>
		Timer1--;
 8001756:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <SDTimer_Handler+0x40>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	b2db      	uxtb	r3, r3
 800175c:	3b01      	subs	r3, #1
 800175e:	b2da      	uxtb	r2, r3
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <SDTimer_Handler+0x40>)
 8001762:	701a      	strb	r2, [r3, #0]
	if(Timer2>0)
 8001764:	4b09      	ldr	r3, [pc, #36]	@ (800178c <SDTimer_Handler+0x44>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b00      	cmp	r3, #0
 800176c:	d006      	beq.n	800177c <SDTimer_Handler+0x34>
		Timer2--;
 800176e:	4b07      	ldr	r3, [pc, #28]	@ (800178c <SDTimer_Handler+0x44>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	3b01      	subs	r3, #1
 8001776:	b2da      	uxtb	r2, r3
 8001778:	4b04      	ldr	r3, [pc, #16]	@ (800178c <SDTimer_Handler+0x44>)
 800177a:	701a      	strb	r2, [r3, #0]
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	20002641 	.word	0x20002641
 800178c:	20002642 	.word	0x20002642

08001790 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001794:	bf00      	nop
 8001796:	e7fd      	b.n	8001794 <NMI_Handler+0x4>

08001798 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <HardFault_Handler+0x4>

080017a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <MemManage_Handler+0x4>

080017a8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <BusFault_Handler+0x4>

080017b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <UsageFault_Handler+0x4>

080017b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c4:	4770      	bx	lr

080017c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017ca:	bf00      	nop
 80017cc:	46bd      	mov	sp, r7
 80017ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d2:	4770      	bx	lr

080017d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <SysTick_Handler+0x30>)
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	3301      	adds	r3, #1
 80017f0:	b2da      	uxtb	r2, r3
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <SysTick_Handler+0x30>)
 80017f4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt>=10)
 80017f6:	4b07      	ldr	r3, [pc, #28]	@ (8001814 <SysTick_Handler+0x30>)
 80017f8:	781b      	ldrb	r3, [r3, #0]
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	2b09      	cmp	r3, #9
 80017fe:	d904      	bls.n	800180a <SysTick_Handler+0x26>
	{
		FatFsCnt=0;
 8001800:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Handler+0x30>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001806:	f7ff ff9f 	bl	8001748 <SDTimer_Handler>
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800180a:	f000 f8cb 	bl	80019a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800180e:	bf00      	nop
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20002640 	.word	0x20002640

08001818 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001820:	4a14      	ldr	r2, [pc, #80]	@ (8001874 <_sbrk+0x5c>)
 8001822:	4b15      	ldr	r3, [pc, #84]	@ (8001878 <_sbrk+0x60>)
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800182c:	4b13      	ldr	r3, [pc, #76]	@ (800187c <_sbrk+0x64>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d102      	bne.n	800183a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001834:	4b11      	ldr	r3, [pc, #68]	@ (800187c <_sbrk+0x64>)
 8001836:	4a12      	ldr	r2, [pc, #72]	@ (8001880 <_sbrk+0x68>)
 8001838:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800183a:	4b10      	ldr	r3, [pc, #64]	@ (800187c <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	429a      	cmp	r2, r3
 8001846:	d207      	bcs.n	8001858 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001848:	f008 f8a0 	bl	800998c <__errno>
 800184c:	4603      	mov	r3, r0
 800184e:	220c      	movs	r2, #12
 8001850:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001852:	f04f 33ff 	mov.w	r3, #4294967295
 8001856:	e009      	b.n	800186c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001858:	4b08      	ldr	r3, [pc, #32]	@ (800187c <_sbrk+0x64>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800185e:	4b07      	ldr	r3, [pc, #28]	@ (800187c <_sbrk+0x64>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	4a05      	ldr	r2, [pc, #20]	@ (800187c <_sbrk+0x64>)
 8001868:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800186a:	68fb      	ldr	r3, [r7, #12]
}
 800186c:	4618      	mov	r0, r3
 800186e:	3718      	adds	r7, #24
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20018000 	.word	0x20018000
 8001878:	00000400 	.word	0x00000400
 800187c:	20002644 	.word	0x20002644
 8001880:	20002c38 	.word	0x20002c38

08001884 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001884:	b480      	push	{r7}
 8001886:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001888:	4b06      	ldr	r3, [pc, #24]	@ (80018a4 <SystemInit+0x20>)
 800188a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800188e:	4a05      	ldr	r2, [pc, #20]	@ (80018a4 <SystemInit+0x20>)
 8001890:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001894:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001898:	bf00      	nop
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
 80018a2:	bf00      	nop
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80018a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80018ac:	f7ff ffea 	bl	8001884 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018b0:	480c      	ldr	r0, [pc, #48]	@ (80018e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80018b2:	490d      	ldr	r1, [pc, #52]	@ (80018e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018b4:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <LoopForever+0xe>)
  movs r3, #0
 80018b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b8:	e002      	b.n	80018c0 <LoopCopyDataInit>

080018ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018be:	3304      	adds	r3, #4

080018c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c4:	d3f9      	bcc.n	80018ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018c6:	4a0a      	ldr	r2, [pc, #40]	@ (80018f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018c8:	4c0a      	ldr	r4, [pc, #40]	@ (80018f4 <LoopForever+0x16>)
  movs r3, #0
 80018ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018cc:	e001      	b.n	80018d2 <LoopFillZerobss>

080018ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d0:	3204      	adds	r2, #4

080018d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d4:	d3fb      	bcc.n	80018ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018d6:	f008 f85f 	bl	8009998 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018da:	f7ff fa63 	bl	8000da4 <main>

080018de <LoopForever>:

LoopForever:
    b LoopForever
 80018de:	e7fe      	b.n	80018de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80018e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80018e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80018ec:	0800a87c 	.word	0x0800a87c
  ldr r2, =_sbss
 80018f0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80018f4:	20002c38 	.word	0x20002c38

080018f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018f8:	e7fe      	b.n	80018f8 <ADC1_2_IRQHandler>

080018fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001900:	2300      	movs	r3, #0
 8001902:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001904:	2003      	movs	r0, #3
 8001906:	f000 f943 	bl	8001b90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800190a:	2000      	movs	r0, #0
 800190c:	f000 f80e 	bl	800192c <HAL_InitTick>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	71fb      	strb	r3, [r7, #7]
 800191a:	e001      	b.n	8001920 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800191c:	f7ff fe52 	bl	80015c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001920:	79fb      	ldrb	r3, [r7, #7]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
	...

0800192c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001934:	2300      	movs	r3, #0
 8001936:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001938:	4b17      	ldr	r3, [pc, #92]	@ (8001998 <HAL_InitTick+0x6c>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d023      	beq.n	8001988 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001940:	4b16      	ldr	r3, [pc, #88]	@ (800199c <HAL_InitTick+0x70>)
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	4b14      	ldr	r3, [pc, #80]	@ (8001998 <HAL_InitTick+0x6c>)
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	4619      	mov	r1, r3
 800194a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800194e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001952:	fbb2 f3f3 	udiv	r3, r2, r3
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f941 	bl	8001bde <HAL_SYSTICK_Config>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10f      	bne.n	8001982 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2b0f      	cmp	r3, #15
 8001966:	d809      	bhi.n	800197c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001968:	2200      	movs	r2, #0
 800196a:	6879      	ldr	r1, [r7, #4]
 800196c:	f04f 30ff 	mov.w	r0, #4294967295
 8001970:	f000 f919 	bl	8001ba6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001974:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_InitTick+0x74>)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6013      	str	r3, [r2, #0]
 800197a:	e007      	b.n	800198c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e004      	b.n	800198c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	73fb      	strb	r3, [r7, #15]
 8001986:	e001      	b.n	800198c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800198c:	7bfb      	ldrb	r3, [r7, #15]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	20000020 	.word	0x20000020
 800199c:	20000018 	.word	0x20000018
 80019a0:	2000001c 	.word	0x2000001c

080019a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80019a8:	4b06      	ldr	r3, [pc, #24]	@ (80019c4 <HAL_IncTick+0x20>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_IncTick+0x24>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	4a04      	ldr	r2, [pc, #16]	@ (80019c8 <HAL_IncTick+0x24>)
 80019b6:	6013      	str	r3, [r2, #0]
}
 80019b8:	bf00      	nop
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000020 	.word	0x20000020
 80019c8:	20002648 	.word	0x20002648

080019cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return uwTick;
 80019d0:	4b03      	ldr	r3, [pc, #12]	@ (80019e0 <HAL_GetTick+0x14>)
 80019d2:	681b      	ldr	r3, [r3, #0]
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
 80019de:	bf00      	nop
 80019e0:	20002648 	.word	0x20002648

080019e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b084      	sub	sp, #16
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ec:	f7ff ffee 	bl	80019cc <HAL_GetTick>
 80019f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fc:	d005      	beq.n	8001a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80019fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001a28 <HAL_Delay+0x44>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4413      	add	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a0a:	bf00      	nop
 8001a0c:	f7ff ffde 	bl	80019cc <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	68fa      	ldr	r2, [r7, #12]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d8f7      	bhi.n	8001a0c <HAL_Delay+0x28>
  {
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000020 	.word	0x20000020

08001a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a3e:	68db      	ldr	r3, [r3, #12]
 8001a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a48:	4013      	ands	r3, r2
 8001a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a5e:	4a04      	ldr	r2, [pc, #16]	@ (8001a70 <__NVIC_SetPriorityGrouping+0x44>)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	60d3      	str	r3, [r2, #12]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr
 8001a70:	e000ed00 	.word	0xe000ed00

08001a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <__NVIC_GetPriorityGrouping+0x18>)
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	f003 0307 	and.w	r3, r3, #7
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	db0a      	blt.n	8001aba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	490c      	ldr	r1, [pc, #48]	@ (8001adc <__NVIC_SetPriority+0x4c>)
 8001aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aae:	0112      	lsls	r2, r2, #4
 8001ab0:	b2d2      	uxtb	r2, r2
 8001ab2:	440b      	add	r3, r1
 8001ab4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab8:	e00a      	b.n	8001ad0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	b2da      	uxtb	r2, r3
 8001abe:	4908      	ldr	r1, [pc, #32]	@ (8001ae0 <__NVIC_SetPriority+0x50>)
 8001ac0:	79fb      	ldrb	r3, [r7, #7]
 8001ac2:	f003 030f 	and.w	r3, r3, #15
 8001ac6:	3b04      	subs	r3, #4
 8001ac8:	0112      	lsls	r2, r2, #4
 8001aca:	b2d2      	uxtb	r2, r2
 8001acc:	440b      	add	r3, r1
 8001ace:	761a      	strb	r2, [r3, #24]
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	@ 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f1c3 0307 	rsb	r3, r3, #7
 8001afe:	2b04      	cmp	r3, #4
 8001b00:	bf28      	it	cs
 8001b02:	2304      	movcs	r3, #4
 8001b04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3304      	adds	r3, #4
 8001b0a:	2b06      	cmp	r3, #6
 8001b0c:	d902      	bls.n	8001b14 <NVIC_EncodePriority+0x30>
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	3b03      	subs	r3, #3
 8001b12:	e000      	b.n	8001b16 <NVIC_EncodePriority+0x32>
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	f04f 32ff 	mov.w	r2, #4294967295
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43da      	mvns	r2, r3
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	401a      	ands	r2, r3
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	fa01 f303 	lsl.w	r3, r1, r3
 8001b36:	43d9      	mvns	r1, r3
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	4313      	orrs	r3, r2
         );
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3724      	adds	r7, #36	@ 0x24
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b5c:	d301      	bcc.n	8001b62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e00f      	b.n	8001b82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b62:	4a0a      	ldr	r2, [pc, #40]	@ (8001b8c <SysTick_Config+0x40>)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3b01      	subs	r3, #1
 8001b68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b6a:	210f      	movs	r1, #15
 8001b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b70:	f7ff ff8e 	bl	8001a90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b74:	4b05      	ldr	r3, [pc, #20]	@ (8001b8c <SysTick_Config+0x40>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b7a:	4b04      	ldr	r3, [pc, #16]	@ (8001b8c <SysTick_Config+0x40>)
 8001b7c:	2207      	movs	r2, #7
 8001b7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	e000e010 	.word	0xe000e010

08001b90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b98:	6878      	ldr	r0, [r7, #4]
 8001b9a:	f7ff ff47 	bl	8001a2c <__NVIC_SetPriorityGrouping>
}
 8001b9e:	bf00      	nop
 8001ba0:	3708      	adds	r7, #8
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b086      	sub	sp, #24
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	60b9      	str	r1, [r7, #8]
 8001bb0:	607a      	str	r2, [r7, #4]
 8001bb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb8:	f7ff ff5c 	bl	8001a74 <__NVIC_GetPriorityGrouping>
 8001bbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68b9      	ldr	r1, [r7, #8]
 8001bc2:	6978      	ldr	r0, [r7, #20]
 8001bc4:	f7ff ff8e 	bl	8001ae4 <NVIC_EncodePriority>
 8001bc8:	4602      	mov	r2, r0
 8001bca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bce:	4611      	mov	r1, r2
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7ff ff5d 	bl	8001a90 <__NVIC_SetPriority>
}
 8001bd6:	bf00      	nop
 8001bd8:	3718      	adds	r7, #24
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b082      	sub	sp, #8
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f7ff ffb0 	bl	8001b4c <SysTick_Config>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c06:	e17f      	b.n	8001f08 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	4013      	ands	r3, r2
 8001c16:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8171 	beq.w	8001f02 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d005      	beq.n	8001c38 <HAL_GPIO_Init+0x40>
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f003 0303 	and.w	r3, r3, #3
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	d130      	bne.n	8001c9a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	005b      	lsls	r3, r3, #1
 8001c42:	2203      	movs	r2, #3
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	43db      	mvns	r3, r3
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6e:	2201      	movs	r2, #1
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	fa02 f303 	lsl.w	r3, r2, r3
 8001c76:	43db      	mvns	r3, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	f003 0201 	and.w	r2, r3, #1
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d118      	bne.n	8001cd8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001caa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001cac:	2201      	movs	r2, #1
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43db      	mvns	r3, r3
 8001cb6:	693a      	ldr	r2, [r7, #16]
 8001cb8:	4013      	ands	r3, r2
 8001cba:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	08db      	lsrs	r3, r3, #3
 8001cc2:	f003 0201 	and.w	r2, r3, #1
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f003 0303 	and.w	r3, r3, #3
 8001ce0:	2b03      	cmp	r3, #3
 8001ce2:	d017      	beq.n	8001d14 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cea:	697b      	ldr	r3, [r7, #20]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	2203      	movs	r2, #3
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43db      	mvns	r3, r3
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	689a      	ldr	r2, [r3, #8]
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	693a      	ldr	r2, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	693a      	ldr	r2, [r7, #16]
 8001d12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0303 	and.w	r3, r3, #3
 8001d1c:	2b02      	cmp	r3, #2
 8001d1e:	d123      	bne.n	8001d68 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	08da      	lsrs	r2, r3, #3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	3208      	adds	r2, #8
 8001d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f003 0307 	and.w	r3, r3, #7
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	220f      	movs	r2, #15
 8001d38:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	693a      	ldr	r2, [r7, #16]
 8001d40:	4013      	ands	r3, r2
 8001d42:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	009b      	lsls	r3, r3, #2
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	08da      	lsrs	r2, r3, #3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	3208      	adds	r2, #8
 8001d62:	6939      	ldr	r1, [r7, #16]
 8001d64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	2203      	movs	r2, #3
 8001d74:	fa02 f303 	lsl.w	r3, r2, r3
 8001d78:	43db      	mvns	r3, r3
 8001d7a:	693a      	ldr	r2, [r7, #16]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 0203 	and.w	r2, r3, #3
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	005b      	lsls	r3, r3, #1
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	693a      	ldr	r2, [r7, #16]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	f000 80ac 	beq.w	8001f02 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001daa:	4b5f      	ldr	r3, [pc, #380]	@ (8001f28 <HAL_GPIO_Init+0x330>)
 8001dac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dae:	4a5e      	ldr	r2, [pc, #376]	@ (8001f28 <HAL_GPIO_Init+0x330>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db6:	4b5c      	ldr	r3, [pc, #368]	@ (8001f28 <HAL_GPIO_Init+0x330>)
 8001db8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc2:	4a5a      	ldr	r2, [pc, #360]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	220f      	movs	r2, #15
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	4013      	ands	r3, r2
 8001de4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001dec:	d025      	beq.n	8001e3a <HAL_GPIO_Init+0x242>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4f      	ldr	r2, [pc, #316]	@ (8001f30 <HAL_GPIO_Init+0x338>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x23e>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4e      	ldr	r2, [pc, #312]	@ (8001f34 <HAL_GPIO_Init+0x33c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x23a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4d      	ldr	r2, [pc, #308]	@ (8001f38 <HAL_GPIO_Init+0x340>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x236>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4c      	ldr	r2, [pc, #304]	@ (8001f3c <HAL_GPIO_Init+0x344>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x232>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a4b      	ldr	r2, [pc, #300]	@ (8001f40 <HAL_GPIO_Init+0x348>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x22e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a4a      	ldr	r2, [pc, #296]	@ (8001f44 <HAL_GPIO_Init+0x34c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x22a>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e00c      	b.n	8001e3c <HAL_GPIO_Init+0x244>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e00a      	b.n	8001e3c <HAL_GPIO_Init+0x244>
 8001e26:	2305      	movs	r3, #5
 8001e28:	e008      	b.n	8001e3c <HAL_GPIO_Init+0x244>
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x244>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e004      	b.n	8001e3c <HAL_GPIO_Init+0x244>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e002      	b.n	8001e3c <HAL_GPIO_Init+0x244>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_GPIO_Init+0x244>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	697a      	ldr	r2, [r7, #20]
 8001e3e:	f002 0203 	and.w	r2, r2, #3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4093      	lsls	r3, r2
 8001e46:	693a      	ldr	r2, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e4c:	4937      	ldr	r1, [pc, #220]	@ (8001f2c <HAL_GPIO_Init+0x334>)
 8001e4e:	697b      	ldr	r3, [r7, #20]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	693a      	ldr	r2, [r7, #16]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001f48 <HAL_GPIO_Init+0x350>)
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4013      	ands	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e7e:	4a32      	ldr	r2, [pc, #200]	@ (8001f48 <HAL_GPIO_Init+0x350>)
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e84:	4b30      	ldr	r3, [pc, #192]	@ (8001f48 <HAL_GPIO_Init+0x350>)
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea8:	4a27      	ldr	r2, [pc, #156]	@ (8001f48 <HAL_GPIO_Init+0x350>)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eae:	4b26      	ldr	r3, [pc, #152]	@ (8001f48 <HAL_GPIO_Init+0x350>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	693a      	ldr	r2, [r7, #16]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ed2:	4a1d      	ldr	r2, [pc, #116]	@ (8001f48 <HAL_GPIO_Init+0x350>)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f48 <HAL_GPIO_Init+0x350>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001efc:	4a12      	ldr	r2, [pc, #72]	@ (8001f48 <HAL_GPIO_Init+0x350>)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	3301      	adds	r3, #1
 8001f06:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f47f ae78 	bne.w	8001c08 <HAL_GPIO_Init+0x10>
  }
}
 8001f18:	bf00      	nop
 8001f1a:	bf00      	nop
 8001f1c:	371c      	adds	r7, #28
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	40021000 	.word	0x40021000
 8001f2c:	40010000 	.word	0x40010000
 8001f30:	48000400 	.word	0x48000400
 8001f34:	48000800 	.word	0x48000800
 8001f38:	48000c00 	.word	0x48000c00
 8001f3c:	48001000 	.word	0x48001000
 8001f40:	48001400 	.word	0x48001400
 8001f44:	48001800 	.word	0x48001800
 8001f48:	40010400 	.word	0x40010400

08001f4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f5c:	787b      	ldrb	r3, [r7, #1]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f62:	887a      	ldrh	r2, [r7, #2]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f68:	e002      	b.n	8001f70 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <HAL_PWREx_GetVoltageRange+0x18>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40007000 	.word	0x40007000

08001f98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fa6:	d130      	bne.n	800200a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa8:	4b23      	ldr	r3, [pc, #140]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001fb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001fb4:	d038      	beq.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fb6:	4b20      	ldr	r3, [pc, #128]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fc0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fc4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	@ (800203c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2232      	movs	r2, #50	@ 0x32
 8001fcc:	fb02 f303 	mul.w	r3, r2, r3
 8001fd0:	4a1b      	ldr	r2, [pc, #108]	@ (8002040 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd6:	0c9b      	lsrs	r3, r3, #18
 8001fd8:	3301      	adds	r3, #1
 8001fda:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fdc:	e002      	b.n	8001fe4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3b01      	subs	r3, #1
 8001fe2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fe4:	4b14      	ldr	r3, [pc, #80]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe6:	695b      	ldr	r3, [r3, #20]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ff0:	d102      	bne.n	8001ff8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f2      	bne.n	8001fde <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffa:	695b      	ldr	r3, [r3, #20]
 8001ffc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002000:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002004:	d110      	bne.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e00f      	b.n	800202a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800200a:	4b0b      	ldr	r3, [pc, #44]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002016:	d007      	beq.n	8002028 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002018:	4b07      	ldr	r3, [pc, #28]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002020:	4a05      	ldr	r2, [pc, #20]	@ (8002038 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002022:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002026:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40007000 	.word	0x40007000
 800203c:	20000018 	.word	0x20000018
 8002040:	431bde83 	.word	0x431bde83

08002044 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b088      	sub	sp, #32
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e3ca      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002056:	4b97      	ldr	r3, [pc, #604]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 030c 	and.w	r3, r3, #12
 800205e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002060:	4b94      	ldr	r3, [pc, #592]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	f003 0303 	and.w	r3, r3, #3
 8002068:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0310 	and.w	r3, r3, #16
 8002072:	2b00      	cmp	r3, #0
 8002074:	f000 80e4 	beq.w	8002240 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_RCC_OscConfig+0x4a>
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	2b0c      	cmp	r3, #12
 8002082:	f040 808b 	bne.w	800219c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b01      	cmp	r3, #1
 800208a:	f040 8087 	bne.w	800219c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800208e:	4b89      	ldr	r3, [pc, #548]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d005      	beq.n	80020a6 <HAL_RCC_OscConfig+0x62>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e3a2      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1a      	ldr	r2, [r3, #32]
 80020aa:	4b82      	ldr	r3, [pc, #520]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <HAL_RCC_OscConfig+0x7c>
 80020b6:	4b7f      	ldr	r3, [pc, #508]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020be:	e005      	b.n	80020cc <HAL_RCC_OscConfig+0x88>
 80020c0:	4b7c      	ldr	r3, [pc, #496]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80020c6:	091b      	lsrs	r3, r3, #4
 80020c8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d223      	bcs.n	8002118 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6a1b      	ldr	r3, [r3, #32]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fd55 	bl	8002b84 <RCC_SetFlashLatencyFromMSIRange>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e383      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020e4:	4b73      	ldr	r3, [pc, #460]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a72      	ldr	r2, [pc, #456]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020ea:	f043 0308 	orr.w	r3, r3, #8
 80020ee:	6013      	str	r3, [r2, #0]
 80020f0:	4b70      	ldr	r3, [pc, #448]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	496d      	ldr	r1, [pc, #436]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80020fe:	4313      	orrs	r3, r2
 8002100:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002102:	4b6c      	ldr	r3, [pc, #432]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	69db      	ldr	r3, [r3, #28]
 800210e:	021b      	lsls	r3, r3, #8
 8002110:	4968      	ldr	r1, [pc, #416]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002112:	4313      	orrs	r3, r2
 8002114:	604b      	str	r3, [r1, #4]
 8002116:	e025      	b.n	8002164 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002118:	4b66      	ldr	r3, [pc, #408]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a65      	ldr	r2, [pc, #404]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800211e:	f043 0308 	orr.w	r3, r3, #8
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b63      	ldr	r3, [pc, #396]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4960      	ldr	r1, [pc, #384]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002132:	4313      	orrs	r3, r2
 8002134:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002136:	4b5f      	ldr	r3, [pc, #380]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	021b      	lsls	r3, r3, #8
 8002144:	495b      	ldr	r1, [pc, #364]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002146:	4313      	orrs	r3, r2
 8002148:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d109      	bne.n	8002164 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4618      	mov	r0, r3
 8002156:	f000 fd15 	bl	8002b84 <RCC_SetFlashLatencyFromMSIRange>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002160:	2301      	movs	r3, #1
 8002162:	e343      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002164:	f000 fc4a 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 8002168:	4602      	mov	r2, r0
 800216a:	4b52      	ldr	r3, [pc, #328]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	f003 030f 	and.w	r3, r3, #15
 8002174:	4950      	ldr	r1, [pc, #320]	@ (80022b8 <HAL_RCC_OscConfig+0x274>)
 8002176:	5ccb      	ldrb	r3, [r1, r3]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa22 f303 	lsr.w	r3, r2, r3
 8002180:	4a4e      	ldr	r2, [pc, #312]	@ (80022bc <HAL_RCC_OscConfig+0x278>)
 8002182:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002184:	4b4e      	ldr	r3, [pc, #312]	@ (80022c0 <HAL_RCC_OscConfig+0x27c>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4618      	mov	r0, r3
 800218a:	f7ff fbcf 	bl	800192c <HAL_InitTick>
 800218e:	4603      	mov	r3, r0
 8002190:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002192:	7bfb      	ldrb	r3, [r7, #15]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d052      	beq.n	800223e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002198:	7bfb      	ldrb	r3, [r7, #15]
 800219a:	e327      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	699b      	ldr	r3, [r3, #24]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d032      	beq.n	800220a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80021a4:	4b43      	ldr	r3, [pc, #268]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4a42      	ldr	r2, [pc, #264]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021aa:	f043 0301 	orr.w	r3, r3, #1
 80021ae:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021b0:	f7ff fc0c 	bl	80019cc <HAL_GetTick>
 80021b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021b6:	e008      	b.n	80021ca <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021b8:	f7ff fc08 	bl	80019cc <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	2b02      	cmp	r3, #2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e310      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021ca:	4b3a      	ldr	r3, [pc, #232]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0f0      	beq.n	80021b8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021d6:	4b37      	ldr	r3, [pc, #220]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a36      	ldr	r2, [pc, #216]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021dc:	f043 0308 	orr.w	r3, r3, #8
 80021e0:	6013      	str	r3, [r2, #0]
 80021e2:	4b34      	ldr	r3, [pc, #208]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4931      	ldr	r1, [pc, #196]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021f4:	4b2f      	ldr	r3, [pc, #188]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	69db      	ldr	r3, [r3, #28]
 8002200:	021b      	lsls	r3, r3, #8
 8002202:	492c      	ldr	r1, [pc, #176]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]
 8002208:	e01a      	b.n	8002240 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800220a:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a29      	ldr	r2, [pc, #164]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002210:	f023 0301 	bic.w	r3, r3, #1
 8002214:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002216:	f7ff fbd9 	bl	80019cc <HAL_GetTick>
 800221a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800221c:	e008      	b.n	8002230 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800221e:	f7ff fbd5 	bl	80019cc <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d901      	bls.n	8002230 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800222c:	2303      	movs	r3, #3
 800222e:	e2dd      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002230:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d1f0      	bne.n	800221e <HAL_RCC_OscConfig+0x1da>
 800223c:	e000      	b.n	8002240 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800223e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 0301 	and.w	r3, r3, #1
 8002248:	2b00      	cmp	r3, #0
 800224a:	d074      	beq.n	8002336 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b08      	cmp	r3, #8
 8002250:	d005      	beq.n	800225e <HAL_RCC_OscConfig+0x21a>
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	2b0c      	cmp	r3, #12
 8002256:	d10e      	bne.n	8002276 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d10b      	bne.n	8002276 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800225e:	4b15      	ldr	r3, [pc, #84]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d064      	beq.n	8002334 <HAL_RCC_OscConfig+0x2f0>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d160      	bne.n	8002334 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e2ba      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800227e:	d106      	bne.n	800228e <HAL_RCC_OscConfig+0x24a>
 8002280:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a0b      	ldr	r2, [pc, #44]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 8002286:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	e026      	b.n	80022dc <HAL_RCC_OscConfig+0x298>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002296:	d115      	bne.n	80022c4 <HAL_RCC_OscConfig+0x280>
 8002298:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a05      	ldr	r2, [pc, #20]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 800229e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022a2:	6013      	str	r3, [r2, #0]
 80022a4:	4b03      	ldr	r3, [pc, #12]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a02      	ldr	r2, [pc, #8]	@ (80022b4 <HAL_RCC_OscConfig+0x270>)
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022ae:	6013      	str	r3, [r2, #0]
 80022b0:	e014      	b.n	80022dc <HAL_RCC_OscConfig+0x298>
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	0800a3b0 	.word	0x0800a3b0
 80022bc:	20000018 	.word	0x20000018
 80022c0:	2000001c 	.word	0x2000001c
 80022c4:	4ba0      	ldr	r3, [pc, #640]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a9f      	ldr	r2, [pc, #636]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80022ce:	6013      	str	r3, [r2, #0]
 80022d0:	4b9d      	ldr	r3, [pc, #628]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a9c      	ldr	r2, [pc, #624]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80022d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80022da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d013      	beq.n	800230c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff fb72 	bl	80019cc <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff fb6e 	bl	80019cc <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	@ 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e276      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022fe:	4b92      	ldr	r3, [pc, #584]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d0f0      	beq.n	80022ec <HAL_RCC_OscConfig+0x2a8>
 800230a:	e014      	b.n	8002336 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7ff fb5e 	bl	80019cc <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002314:	f7ff fb5a 	bl	80019cc <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b64      	cmp	r3, #100	@ 0x64
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e262      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002326:	4b88      	ldr	r3, [pc, #544]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f0      	bne.n	8002314 <HAL_RCC_OscConfig+0x2d0>
 8002332:	e000      	b.n	8002336 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0302 	and.w	r3, r3, #2
 800233e:	2b00      	cmp	r3, #0
 8002340:	d060      	beq.n	8002404 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002342:	69bb      	ldr	r3, [r7, #24]
 8002344:	2b04      	cmp	r3, #4
 8002346:	d005      	beq.n	8002354 <HAL_RCC_OscConfig+0x310>
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d119      	bne.n	8002382 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d116      	bne.n	8002382 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002354:	4b7c      	ldr	r3, [pc, #496]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800235c:	2b00      	cmp	r3, #0
 800235e:	d005      	beq.n	800236c <HAL_RCC_OscConfig+0x328>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002368:	2301      	movs	r3, #1
 800236a:	e23f      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236c:	4b76      	ldr	r3, [pc, #472]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	061b      	lsls	r3, r3, #24
 800237a:	4973      	ldr	r1, [pc, #460]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800237c:	4313      	orrs	r3, r2
 800237e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002380:	e040      	b.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d023      	beq.n	80023d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800238a:	4b6f      	ldr	r3, [pc, #444]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a6e      	ldr	r2, [pc, #440]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff fb19 	bl	80019cc <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800239c:	e008      	b.n	80023b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800239e:	f7ff fb15 	bl	80019cc <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e21d      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b65      	ldr	r3, [pc, #404]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f0      	beq.n	800239e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023bc:	4b62      	ldr	r3, [pc, #392]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	061b      	lsls	r3, r3, #24
 80023ca:	495f      	ldr	r1, [pc, #380]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	604b      	str	r3, [r1, #4]
 80023d0:	e018      	b.n	8002404 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a5c      	ldr	r2, [pc, #368]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023de:	f7ff faf5 	bl	80019cc <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023e6:	f7ff faf1 	bl	80019cc <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1f9      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023f8:	4b53      	ldr	r3, [pc, #332]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002400:	2b00      	cmp	r3, #0
 8002402:	d1f0      	bne.n	80023e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0308 	and.w	r3, r3, #8
 800240c:	2b00      	cmp	r3, #0
 800240e:	d03c      	beq.n	800248a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	695b      	ldr	r3, [r3, #20]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d01c      	beq.n	8002452 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002418:	4b4b      	ldr	r3, [pc, #300]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800241e:	4a4a      	ldr	r2, [pc, #296]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7ff fad0 	bl	80019cc <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800242e:	e008      	b.n	8002442 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002430:	f7ff facc 	bl	80019cc <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e1d4      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002442:	4b41      	ldr	r3, [pc, #260]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002444:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ef      	beq.n	8002430 <HAL_RCC_OscConfig+0x3ec>
 8002450:	e01b      	b.n	800248a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002452:	4b3d      	ldr	r3, [pc, #244]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002454:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002458:	4a3b      	ldr	r2, [pc, #236]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800245a:	f023 0301 	bic.w	r3, r3, #1
 800245e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002462:	f7ff fab3 	bl	80019cc <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800246a:	f7ff faaf 	bl	80019cc <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1b7      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800247c:	4b32      	ldr	r3, [pc, #200]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800247e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d1ef      	bne.n	800246a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0304 	and.w	r3, r3, #4
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 80a6 	beq.w	80025e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002498:	2300      	movs	r3, #0
 800249a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800249c:	4b2a      	ldr	r3, [pc, #168]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d10d      	bne.n	80024c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024a8:	4b27      	ldr	r3, [pc, #156]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80024aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024ac:	4a26      	ldr	r2, [pc, #152]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80024ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80024b4:	4b24      	ldr	r3, [pc, #144]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c0:	2301      	movs	r3, #1
 80024c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c4:	4b21      	ldr	r3, [pc, #132]	@ (800254c <HAL_RCC_OscConfig+0x508>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d118      	bne.n	8002502 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024d0:	4b1e      	ldr	r3, [pc, #120]	@ (800254c <HAL_RCC_OscConfig+0x508>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a1d      	ldr	r2, [pc, #116]	@ (800254c <HAL_RCC_OscConfig+0x508>)
 80024d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024dc:	f7ff fa76 	bl	80019cc <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e4:	f7ff fa72 	bl	80019cc <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e17a      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024f6:	4b15      	ldr	r3, [pc, #84]	@ (800254c <HAL_RCC_OscConfig+0x508>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d0f0      	beq.n	80024e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d108      	bne.n	800251c <HAL_RCC_OscConfig+0x4d8>
 800250a:	4b0f      	ldr	r3, [pc, #60]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800250c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002510:	4a0d      	ldr	r2, [pc, #52]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800251a:	e029      	b.n	8002570 <HAL_RCC_OscConfig+0x52c>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2b05      	cmp	r3, #5
 8002522:	d115      	bne.n	8002550 <HAL_RCC_OscConfig+0x50c>
 8002524:	4b08      	ldr	r3, [pc, #32]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252a:	4a07      	ldr	r2, [pc, #28]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800252c:	f043 0304 	orr.w	r3, r3, #4
 8002530:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002534:	4b04      	ldr	r3, [pc, #16]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 8002536:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800253a:	4a03      	ldr	r2, [pc, #12]	@ (8002548 <HAL_RCC_OscConfig+0x504>)
 800253c:	f043 0301 	orr.w	r3, r3, #1
 8002540:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002544:	e014      	b.n	8002570 <HAL_RCC_OscConfig+0x52c>
 8002546:	bf00      	nop
 8002548:	40021000 	.word	0x40021000
 800254c:	40007000 	.word	0x40007000
 8002550:	4b9c      	ldr	r3, [pc, #624]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002556:	4a9b      	ldr	r2, [pc, #620]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002560:	4b98      	ldr	r3, [pc, #608]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002562:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002566:	4a97      	ldr	r2, [pc, #604]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002568:	f023 0304 	bic.w	r3, r3, #4
 800256c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d016      	beq.n	80025a6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002578:	f7ff fa28 	bl	80019cc <HAL_GetTick>
 800257c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800257e:	e00a      	b.n	8002596 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002580:	f7ff fa24 	bl	80019cc <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258e:	4293      	cmp	r3, r2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e12a      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002596:	4b8b      	ldr	r3, [pc, #556]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d0ed      	beq.n	8002580 <HAL_RCC_OscConfig+0x53c>
 80025a4:	e015      	b.n	80025d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025a6:	f7ff fa11 	bl	80019cc <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025ac:	e00a      	b.n	80025c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ae:	f7ff fa0d 	bl	80019cc <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025bc:	4293      	cmp	r3, r2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e113      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80025c4:	4b7f      	ldr	r3, [pc, #508]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80025c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ed      	bne.n	80025ae <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4b7a      	ldr	r3, [pc, #488]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025dc:	4a79      	ldr	r2, [pc, #484]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80fe 	beq.w	80027ea <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	f040 80d0 	bne.w	8002798 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80025f8:	4b72      	ldr	r3, [pc, #456]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	f003 0203 	and.w	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002608:	429a      	cmp	r2, r3
 800260a:	d130      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002616:	3b01      	subs	r3, #1
 8002618:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d127      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002628:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800262a:	429a      	cmp	r2, r3
 800262c:	d11f      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002638:	2a07      	cmp	r2, #7
 800263a:	bf14      	ite	ne
 800263c:	2201      	movne	r2, #1
 800263e:	2200      	moveq	r2, #0
 8002640:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002642:	4293      	cmp	r3, r2
 8002644:	d113      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	085b      	lsrs	r3, r3, #1
 8002652:	3b01      	subs	r3, #1
 8002654:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002656:	429a      	cmp	r2, r3
 8002658:	d109      	bne.n	800266e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002664:	085b      	lsrs	r3, r3, #1
 8002666:	3b01      	subs	r3, #1
 8002668:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800266a:	429a      	cmp	r2, r3
 800266c:	d06e      	beq.n	800274c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800266e:	69bb      	ldr	r3, [r7, #24]
 8002670:	2b0c      	cmp	r3, #12
 8002672:	d069      	beq.n	8002748 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002674:	4b53      	ldr	r3, [pc, #332]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800267c:	2b00      	cmp	r3, #0
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002680:	4b50      	ldr	r3, [pc, #320]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d001      	beq.n	8002690 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e0ad      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002690:	4b4c      	ldr	r3, [pc, #304]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a4b      	ldr	r2, [pc, #300]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800269a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800269c:	f7ff f996 	bl	80019cc <HAL_GetTick>
 80026a0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026a2:	e008      	b.n	80026b6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a4:	f7ff f992 	bl	80019cc <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d901      	bls.n	80026b6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	e09a      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026b6:	4b43      	ldr	r3, [pc, #268]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1f0      	bne.n	80026a4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026c2:	4b40      	ldr	r3, [pc, #256]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80026c4:	68da      	ldr	r2, [r3, #12]
 80026c6:	4b40      	ldr	r3, [pc, #256]	@ (80027c8 <HAL_RCC_OscConfig+0x784>)
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80026d2:	3a01      	subs	r2, #1
 80026d4:	0112      	lsls	r2, r2, #4
 80026d6:	4311      	orrs	r1, r2
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80026dc:	0212      	lsls	r2, r2, #8
 80026de:	4311      	orrs	r1, r2
 80026e0:	687a      	ldr	r2, [r7, #4]
 80026e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80026e4:	0852      	lsrs	r2, r2, #1
 80026e6:	3a01      	subs	r2, #1
 80026e8:	0552      	lsls	r2, r2, #21
 80026ea:	4311      	orrs	r1, r2
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80026f0:	0852      	lsrs	r2, r2, #1
 80026f2:	3a01      	subs	r2, #1
 80026f4:	0652      	lsls	r2, r2, #25
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80026fc:	0912      	lsrs	r2, r2, #4
 80026fe:	0452      	lsls	r2, r2, #17
 8002700:	430a      	orrs	r2, r1
 8002702:	4930      	ldr	r1, [pc, #192]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002704:	4313      	orrs	r3, r2
 8002706:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002708:	4b2e      	ldr	r3, [pc, #184]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a2d      	ldr	r2, [pc, #180]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800270e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002712:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002714:	4b2b      	ldr	r3, [pc, #172]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	4a2a      	ldr	r2, [pc, #168]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800271a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800271e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002720:	f7ff f954 	bl	80019cc <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002728:	f7ff f950 	bl	80019cc <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e058      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800273a:	4b22      	ldr	r3, [pc, #136]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d0f0      	beq.n	8002728 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002746:	e050      	b.n	80027ea <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e04f      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800274c:	4b1d      	ldr	r3, [pc, #116]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d148      	bne.n	80027ea <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002758:	4b1a      	ldr	r3, [pc, #104]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a19      	ldr	r2, [pc, #100]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800275e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002762:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002764:	4b17      	ldr	r3, [pc, #92]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	4a16      	ldr	r2, [pc, #88]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800276a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800276e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002770:	f7ff f92c 	bl	80019cc <HAL_GetTick>
 8002774:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002776:	e008      	b.n	800278a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002778:	f7ff f928 	bl	80019cc <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e030      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278a:	4b0e      	ldr	r3, [pc, #56]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002792:	2b00      	cmp	r3, #0
 8002794:	d0f0      	beq.n	8002778 <HAL_RCC_OscConfig+0x734>
 8002796:	e028      	b.n	80027ea <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	2b0c      	cmp	r3, #12
 800279c:	d023      	beq.n	80027e6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800279e:	4b09      	ldr	r3, [pc, #36]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a08      	ldr	r2, [pc, #32]	@ (80027c4 <HAL_RCC_OscConfig+0x780>)
 80027a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80027a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027aa:	f7ff f90f 	bl	80019cc <HAL_GetTick>
 80027ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027b0:	e00c      	b.n	80027cc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b2:	f7ff f90b 	bl	80019cc <HAL_GetTick>
 80027b6:	4602      	mov	r2, r0
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	1ad3      	subs	r3, r2, r3
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d905      	bls.n	80027cc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80027c0:	2303      	movs	r3, #3
 80027c2:	e013      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027cc:	4b09      	ldr	r3, [pc, #36]	@ (80027f4 <HAL_RCC_OscConfig+0x7b0>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1ec      	bne.n	80027b2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80027d8:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_OscConfig+0x7b0>)
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	4905      	ldr	r1, [pc, #20]	@ (80027f4 <HAL_RCC_OscConfig+0x7b0>)
 80027de:	4b06      	ldr	r3, [pc, #24]	@ (80027f8 <HAL_RCC_OscConfig+0x7b4>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	60cb      	str	r3, [r1, #12]
 80027e4:	e001      	b.n	80027ea <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e000      	b.n	80027ec <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3720      	adds	r7, #32
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	feeefffc 	.word	0xfeeefffc

080027fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0e7      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002810:	4b75      	ldr	r3, [pc, #468]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	683a      	ldr	r2, [r7, #0]
 800281a:	429a      	cmp	r2, r3
 800281c:	d910      	bls.n	8002840 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281e:	4b72      	ldr	r3, [pc, #456]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0207 	bic.w	r2, r3, #7
 8002826:	4970      	ldr	r1, [pc, #448]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	4313      	orrs	r3, r2
 800282c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800282e:	4b6e      	ldr	r3, [pc, #440]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0307 	and.w	r3, r3, #7
 8002836:	683a      	ldr	r2, [r7, #0]
 8002838:	429a      	cmp	r2, r3
 800283a:	d001      	beq.n	8002840 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0cf      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d010      	beq.n	800286e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	4b66      	ldr	r3, [pc, #408]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002858:	429a      	cmp	r2, r3
 800285a:	d908      	bls.n	800286e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800285c:	4b63      	ldr	r3, [pc, #396]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4960      	ldr	r1, [pc, #384]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800286a:	4313      	orrs	r3, r2
 800286c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b00      	cmp	r3, #0
 8002878:	d04c      	beq.n	8002914 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d107      	bne.n	8002892 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002882:	4b5a      	ldr	r3, [pc, #360]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d121      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e0a6      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800289a:	4b54      	ldr	r3, [pc, #336]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d115      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e09a      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d107      	bne.n	80028c2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028b2:	4b4e      	ldr	r3, [pc, #312]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0302 	and.w	r3, r3, #2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d109      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e08e      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028c2:	4b4a      	ldr	r3, [pc, #296]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e086      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028d2:	4b46      	ldr	r3, [pc, #280]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f023 0203 	bic.w	r2, r3, #3
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	4943      	ldr	r1, [pc, #268]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e4:	f7ff f872 	bl	80019cc <HAL_GetTick>
 80028e8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	e00a      	b.n	8002902 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ec:	f7ff f86e 	bl	80019cc <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e06e      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002902:	4b3a      	ldr	r3, [pc, #232]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	f003 020c 	and.w	r2, r3, #12
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	429a      	cmp	r2, r3
 8002912:	d1eb      	bne.n	80028ec <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d010      	beq.n	8002942 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	4b31      	ldr	r3, [pc, #196]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800292c:	429a      	cmp	r2, r3
 800292e:	d208      	bcs.n	8002942 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002930:	4b2e      	ldr	r3, [pc, #184]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	689b      	ldr	r3, [r3, #8]
 800293c:	492b      	ldr	r1, [pc, #172]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002942:	4b29      	ldr	r3, [pc, #164]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	683a      	ldr	r2, [r7, #0]
 800294c:	429a      	cmp	r2, r3
 800294e:	d210      	bcs.n	8002972 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002950:	4b25      	ldr	r3, [pc, #148]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f023 0207 	bic.w	r2, r3, #7
 8002958:	4923      	ldr	r1, [pc, #140]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002960:	4b21      	ldr	r3, [pc, #132]	@ (80029e8 <HAL_RCC_ClockConfig+0x1ec>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	429a      	cmp	r2, r3
 800296c:	d001      	beq.n	8002972 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e036      	b.n	80029e0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0304 	and.w	r3, r3, #4
 800297a:	2b00      	cmp	r3, #0
 800297c:	d008      	beq.n	8002990 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800297e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	68db      	ldr	r3, [r3, #12]
 800298a:	4918      	ldr	r1, [pc, #96]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800298c:	4313      	orrs	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0308 	and.w	r3, r3, #8
 8002998:	2b00      	cmp	r3, #0
 800299a:	d009      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800299c:	4b13      	ldr	r3, [pc, #76]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	00db      	lsls	r3, r3, #3
 80029aa:	4910      	ldr	r1, [pc, #64]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029b0:	f000 f824 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b0d      	ldr	r3, [pc, #52]	@ (80029ec <HAL_RCC_ClockConfig+0x1f0>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	490b      	ldr	r1, [pc, #44]	@ (80029f0 <HAL_RCC_ClockConfig+0x1f4>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	4a09      	ldr	r2, [pc, #36]	@ (80029f4 <HAL_RCC_ClockConfig+0x1f8>)
 80029ce:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80029d0:	4b09      	ldr	r3, [pc, #36]	@ (80029f8 <HAL_RCC_ClockConfig+0x1fc>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4618      	mov	r0, r3
 80029d6:	f7fe ffa9 	bl	800192c <HAL_InitTick>
 80029da:	4603      	mov	r3, r0
 80029dc:	72fb      	strb	r3, [r7, #11]

  return status;
 80029de:	7afb      	ldrb	r3, [r7, #11]
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3710      	adds	r7, #16
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	40022000 	.word	0x40022000
 80029ec:	40021000 	.word	0x40021000
 80029f0:	0800a3b0 	.word	0x0800a3b0
 80029f4:	20000018 	.word	0x20000018
 80029f8:	2000001c 	.word	0x2000001c

080029fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b089      	sub	sp, #36	@ 0x24
 8002a00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a02:	2300      	movs	r3, #0
 8002a04:	61fb      	str	r3, [r7, #28]
 8002a06:	2300      	movs	r3, #0
 8002a08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a0a:	4b3e      	ldr	r3, [pc, #248]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 030c 	and.w	r3, r3, #12
 8002a12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a14:	4b3b      	ldr	r3, [pc, #236]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_RCC_GetSysClockFreq+0x34>
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d121      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	2b01      	cmp	r3, #1
 8002a2e:	d11e      	bne.n	8002a6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a30:	4b34      	ldr	r3, [pc, #208]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0308 	and.w	r3, r3, #8
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d107      	bne.n	8002a4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a3c:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	f003 030f 	and.w	r3, r3, #15
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e005      	b.n	8002a58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	091b      	lsrs	r3, r3, #4
 8002a52:	f003 030f 	and.w	r3, r3, #15
 8002a56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002a58:	4a2b      	ldr	r2, [pc, #172]	@ (8002b08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d10d      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d102      	bne.n	8002a7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a74:	4b25      	ldr	r3, [pc, #148]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002a76:	61bb      	str	r3, [r7, #24]
 8002a78:	e004      	b.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d101      	bne.n	8002a84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a80:	4b23      	ldr	r3, [pc, #140]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002a82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	2b0c      	cmp	r3, #12
 8002a88:	d134      	bne.n	8002af4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b02      	cmp	r3, #2
 8002a98:	d003      	beq.n	8002aa2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2b03      	cmp	r3, #3
 8002a9e:	d003      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0xac>
 8002aa0:	e005      	b.n	8002aae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aa2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002aa4:	617b      	str	r3, [r7, #20]
      break;
 8002aa6:	e005      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002aa8:	4b19      	ldr	r3, [pc, #100]	@ (8002b10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aaa:	617b      	str	r3, [r7, #20]
      break;
 8002aac:	e002      	b.n	8002ab4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	617b      	str	r3, [r7, #20]
      break;
 8002ab2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab4:	4b13      	ldr	r3, [pc, #76]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 0307 	and.w	r3, r3, #7
 8002abe:	3301      	adds	r3, #1
 8002ac0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	0a1b      	lsrs	r3, r3, #8
 8002ac8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002acc:	697a      	ldr	r2, [r7, #20]
 8002ace:	fb03 f202 	mul.w	r2, r3, r2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ada:	4b0a      	ldr	r3, [pc, #40]	@ (8002b04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	0e5b      	lsrs	r3, r3, #25
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002af4:	69bb      	ldr	r3, [r7, #24]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3724      	adds	r7, #36	@ 0x24
 8002afa:	46bd      	mov	sp, r7
 8002afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b00:	4770      	bx	lr
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000
 8002b08:	0800a3c8 	.word	0x0800a3c8
 8002b0c:	00f42400 	.word	0x00f42400
 8002b10:	007a1200 	.word	0x007a1200

08002b14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b14:	b480      	push	{r7}
 8002b16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b18:	4b03      	ldr	r3, [pc, #12]	@ (8002b28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000018 	.word	0x20000018

08002b2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b30:	f7ff fff0 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b34:	4602      	mov	r2, r0
 8002b36:	4b06      	ldr	r3, [pc, #24]	@ (8002b50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	4904      	ldr	r1, [pc, #16]	@ (8002b54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b42:	5ccb      	ldrb	r3, [r1, r3]
 8002b44:	f003 031f 	and.w	r3, r3, #31
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40021000 	.word	0x40021000
 8002b54:	0800a3c0 	.word	0x0800a3c0

08002b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b5c:	f7ff ffda 	bl	8002b14 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b06      	ldr	r3, [pc, #24]	@ (8002b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0adb      	lsrs	r3, r3, #11
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4904      	ldr	r1, [pc, #16]	@ (8002b80 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	40021000 	.word	0x40021000
 8002b80:	0800a3c0 	.word	0x0800a3c0

08002b84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002b90:	4b2a      	ldr	r3, [pc, #168]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002b92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b94:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002b9c:	f7ff f9ee 	bl	8001f7c <HAL_PWREx_GetVoltageRange>
 8002ba0:	6178      	str	r0, [r7, #20]
 8002ba2:	e014      	b.n	8002bce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ba4:	4b25      	ldr	r3, [pc, #148]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	4a24      	ldr	r2, [pc, #144]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002baa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bae:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bb0:	4b22      	ldr	r3, [pc, #136]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002bbc:	f7ff f9de 	bl	8001f7c <HAL_PWREx_GetVoltageRange>
 8002bc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002bc2:	4b1e      	ldr	r3, [pc, #120]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc6:	4a1d      	ldr	r2, [pc, #116]	@ (8002c3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002bc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002bd4:	d10b      	bne.n	8002bee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b80      	cmp	r3, #128	@ 0x80
 8002bda:	d919      	bls.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2ba0      	cmp	r3, #160	@ 0xa0
 8002be0:	d902      	bls.n	8002be8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002be2:	2302      	movs	r3, #2
 8002be4:	613b      	str	r3, [r7, #16]
 8002be6:	e013      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002be8:	2301      	movs	r3, #1
 8002bea:	613b      	str	r3, [r7, #16]
 8002bec:	e010      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2b80      	cmp	r3, #128	@ 0x80
 8002bf2:	d902      	bls.n	8002bfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002bf4:	2303      	movs	r3, #3
 8002bf6:	613b      	str	r3, [r7, #16]
 8002bf8:	e00a      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2b80      	cmp	r3, #128	@ 0x80
 8002bfe:	d102      	bne.n	8002c06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c00:	2302      	movs	r3, #2
 8002c02:	613b      	str	r3, [r7, #16]
 8002c04:	e004      	b.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2b70      	cmp	r3, #112	@ 0x70
 8002c0a:	d101      	bne.n	8002c10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002c10:	4b0b      	ldr	r3, [pc, #44]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f023 0207 	bic.w	r2, r3, #7
 8002c18:	4909      	ldr	r1, [pc, #36]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002c20:	4b07      	ldr	r3, [pc, #28]	@ (8002c40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40022000 	.word	0x40022000

08002c44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b086      	sub	sp, #24
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c50:	2300      	movs	r3, #0
 8002c52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d041      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c64:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c68:	d02a      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002c6a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002c6e:	d824      	bhi.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c70:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c74:	d008      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002c76:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002c7a:	d81e      	bhi.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d00a      	beq.n	8002c96 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002c80:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c84:	d010      	beq.n	8002ca8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002c86:	e018      	b.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002c88:	4b86      	ldr	r3, [pc, #536]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	4a85      	ldr	r2, [pc, #532]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002c8e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c92:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002c94:	e015      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	3304      	adds	r3, #4
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 fabb 	bl	8003218 <RCCEx_PLLSAI1_Config>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002ca6:	e00c      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3320      	adds	r3, #32
 8002cac:	2100      	movs	r1, #0
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fba6 	bl	8003400 <RCCEx_PLLSAI2_Config>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002cb8:	e003      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	74fb      	strb	r3, [r7, #19]
      break;
 8002cbe:	e000      	b.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002cc0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002cc2:	7cfb      	ldrb	r3, [r7, #19]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d10b      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cc8:	4b76      	ldr	r3, [pc, #472]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002cd6:	4973      	ldr	r1, [pc, #460]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002cde:	e001      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d041      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002cf4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cf8:	d02a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002cfa:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002cfe:	d824      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d00:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d04:	d008      	beq.n	8002d18 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002d06:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002d0a:	d81e      	bhi.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002d10:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d14:	d010      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002d16:	e018      	b.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d18:	4b62      	ldr	r3, [pc, #392]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	4a61      	ldr	r2, [pc, #388]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d22:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d24:	e015      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	3304      	adds	r3, #4
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fa73 	bl	8003218 <RCCEx_PLLSAI1_Config>
 8002d32:	4603      	mov	r3, r0
 8002d34:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d36:	e00c      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	3320      	adds	r3, #32
 8002d3c:	2100      	movs	r1, #0
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f000 fb5e 	bl	8003400 <RCCEx_PLLSAI2_Config>
 8002d44:	4603      	mov	r3, r0
 8002d46:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002d48:	e003      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	74fb      	strb	r3, [r7, #19]
      break;
 8002d4e:	e000      	b.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002d50:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d52:	7cfb      	ldrb	r3, [r7, #19]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d10b      	bne.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002d58:	4b52      	ldr	r3, [pc, #328]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d66:	494f      	ldr	r1, [pc, #316]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002d6e:	e001      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	f000 80a0 	beq.w	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d82:	2300      	movs	r3, #0
 8002d84:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d86:	4b47      	ldr	r3, [pc, #284]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002d96:	2300      	movs	r3, #0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00d      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d9c:	4b41      	ldr	r3, [pc, #260]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da0:	4a40      	ldr	r2, [pc, #256]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002da2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002da6:	6593      	str	r3, [r2, #88]	@ 0x58
 8002da8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	60bb      	str	r3, [r7, #8]
 8002db2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db4:	2301      	movs	r3, #1
 8002db6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db8:	4b3b      	ldr	r3, [pc, #236]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a3a      	ldr	r2, [pc, #232]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002dbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dc2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc4:	f7fe fe02 	bl	80019cc <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dca:	e009      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dcc:	f7fe fdfe 	bl	80019cc <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d902      	bls.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	74fb      	strb	r3, [r7, #19]
        break;
 8002dde:	e005      	b.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002de0:	4b31      	ldr	r3, [pc, #196]	@ (8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d0ef      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002dec:	7cfb      	ldrb	r3, [r7, #19]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d15c      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002df2:	4b2c      	ldr	r3, [pc, #176]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002df8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dfc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d01f      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e0a:	697a      	ldr	r2, [r7, #20]
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d019      	beq.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e10:	4b24      	ldr	r3, [pc, #144]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e1c:	4b21      	ldr	r3, [pc, #132]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e22:	4a20      	ldr	r2, [pc, #128]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e24:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e3c:	4a19      	ldr	r2, [pc, #100]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d016      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e4e:	f7fe fdbd 	bl	80019cc <HAL_GetTick>
 8002e52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e54:	e00b      	b.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e56:	f7fe fdb9 	bl	80019cc <HAL_GetTick>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	1ad3      	subs	r3, r2, r3
 8002e60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d902      	bls.n	8002e6e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	74fb      	strb	r3, [r7, #19]
            break;
 8002e6c:	e006      	b.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d0ec      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10c      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e82:	4b08      	ldr	r3, [pc, #32]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002e88:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002e92:	4904      	ldr	r1, [pc, #16]	@ (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002e9a:	e009      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e9c:	7cfb      	ldrb	r3, [r7, #19]
 8002e9e:	74bb      	strb	r3, [r7, #18]
 8002ea0:	e006      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ea2:	bf00      	nop
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb0:	7c7b      	ldrb	r3, [r7, #17]
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	d105      	bne.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb6:	4b9e      	ldr	r3, [pc, #632]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eba:	4a9d      	ldr	r2, [pc, #628]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ebc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ec0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ece:	4b98      	ldr	r3, [pc, #608]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ed4:	f023 0203 	bic.w	r2, r3, #3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002edc:	4994      	ldr	r1, [pc, #592]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0302 	and.w	r3, r3, #2
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ef0:	4b8f      	ldr	r3, [pc, #572]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ef6:	f023 020c 	bic.w	r2, r3, #12
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002efe:	498c      	ldr	r1, [pc, #560]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0304 	and.w	r3, r3, #4
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f12:	4b87      	ldr	r3, [pc, #540]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f18:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f20:	4983      	ldr	r1, [pc, #524]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f003 0308 	and.w	r3, r3, #8
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f34:	4b7e      	ldr	r3, [pc, #504]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f42:	497b      	ldr	r1, [pc, #492]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 0310 	and.w	r3, r3, #16
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d00a      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f56:	4b76      	ldr	r3, [pc, #472]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f64:	4972      	ldr	r1, [pc, #456]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0320 	and.w	r3, r3, #32
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d00a      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f78:	4b6d      	ldr	r3, [pc, #436]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f7e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f86:	496a      	ldr	r1, [pc, #424]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00a      	beq.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f9a:	4b65      	ldr	r3, [pc, #404]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002f9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fa0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fa8:	4961      	ldr	r1, [pc, #388]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fc2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002fca:	4959      	ldr	r1, [pc, #356]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fde:	4b54      	ldr	r3, [pc, #336]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fec:	4950      	ldr	r1, [pc, #320]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003000:	4b4b      	ldr	r3, [pc, #300]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003006:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800300e:	4948      	ldr	r1, [pc, #288]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003010:	4313      	orrs	r3, r2
 8003012:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003022:	4b43      	ldr	r3, [pc, #268]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003028:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003030:	493f      	ldr	r1, [pc, #252]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d028      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003044:	4b3a      	ldr	r3, [pc, #232]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003052:	4937      	ldr	r1, [pc, #220]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003054:	4313      	orrs	r3, r2
 8003056:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800305e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003062:	d106      	bne.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003064:	4b32      	ldr	r3, [pc, #200]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	4a31      	ldr	r2, [pc, #196]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800306a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800306e:	60d3      	str	r3, [r2, #12]
 8003070:	e011      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003076:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800307a:	d10c      	bne.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	3304      	adds	r3, #4
 8003080:	2101      	movs	r1, #1
 8003082:	4618      	mov	r0, r3
 8003084:	f000 f8c8 	bl	8003218 <RCCEx_PLLSAI1_Config>
 8003088:	4603      	mov	r3, r0
 800308a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800308c:	7cfb      	ldrb	r3, [r7, #19]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d001      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d028      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80030a2:	4b23      	ldr	r3, [pc, #140]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	491f      	ldr	r1, [pc, #124]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030bc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030c0:	d106      	bne.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80030c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030cc:	60d3      	str	r3, [r2, #12]
 80030ce:	e011      	b.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80030d8:	d10c      	bne.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	3304      	adds	r3, #4
 80030de:	2101      	movs	r1, #1
 80030e0:	4618      	mov	r0, r3
 80030e2:	f000 f899 	bl	8003218 <RCCEx_PLLSAI1_Config>
 80030e6:	4603      	mov	r3, r0
 80030e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030ea:	7cfb      	ldrb	r3, [r7, #19]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d02b      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003100:	4b0b      	ldr	r3, [pc, #44]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003106:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800310e:	4908      	ldr	r1, [pc, #32]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800311a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800311e:	d109      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003120:	4b03      	ldr	r3, [pc, #12]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4a02      	ldr	r2, [pc, #8]	@ (8003130 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003126:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800312a:	60d3      	str	r3, [r2, #12]
 800312c:	e014      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800312e:	bf00      	nop
 8003130:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003138:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800313c:	d10c      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f867 	bl	8003218 <RCCEx_PLLSAI1_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d02f      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003164:	4b2b      	ldr	r3, [pc, #172]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800316a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003172:	4928      	ldr	r1, [pc, #160]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800317e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003182:	d10d      	bne.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f844 	bl	8003218 <RCCEx_PLLSAI1_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d014      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	74bb      	strb	r3, [r7, #18]
 800319e:	e011      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80031a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031a8:	d10c      	bne.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	3320      	adds	r3, #32
 80031ae:	2102      	movs	r1, #2
 80031b0:	4618      	mov	r0, r3
 80031b2:	f000 f925 	bl	8003400 <RCCEx_PLLSAI2_Config>
 80031b6:	4603      	mov	r3, r0
 80031b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d001      	beq.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80031c0:	7cfb      	ldrb	r3, [r7, #19]
 80031c2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00a      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031d0:	4b10      	ldr	r3, [pc, #64]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80031de:	490d      	ldr	r1, [pc, #52]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d00b      	beq.n	800320a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80031f2:	4b08      	ldr	r3, [pc, #32]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80031f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031f8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003202:	4904      	ldr	r1, [pc, #16]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003204:	4313      	orrs	r3, r2
 8003206:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800320a:	7cbb      	ldrb	r3, [r7, #18]
}
 800320c:	4618      	mov	r0, r3
 800320e:	3718      	adds	r7, #24
 8003210:	46bd      	mov	sp, r7
 8003212:	bd80      	pop	{r7, pc}
 8003214:	40021000 	.word	0x40021000

08003218 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b084      	sub	sp, #16
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003222:	2300      	movs	r3, #0
 8003224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003226:	4b75      	ldr	r3, [pc, #468]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003232:	4b72      	ldr	r3, [pc, #456]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	f003 0203 	and.w	r2, r3, #3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d10d      	bne.n	800325e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
       ||
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800324a:	4b6c      	ldr	r3, [pc, #432]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	091b      	lsrs	r3, r3, #4
 8003250:	f003 0307 	and.w	r3, r3, #7
 8003254:	1c5a      	adds	r2, r3, #1
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	685b      	ldr	r3, [r3, #4]
       ||
 800325a:	429a      	cmp	r2, r3
 800325c:	d047      	beq.n	80032ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
 8003262:	e044      	b.n	80032ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2b03      	cmp	r3, #3
 800326a:	d018      	beq.n	800329e <RCCEx_PLLSAI1_Config+0x86>
 800326c:	2b03      	cmp	r3, #3
 800326e:	d825      	bhi.n	80032bc <RCCEx_PLLSAI1_Config+0xa4>
 8003270:	2b01      	cmp	r3, #1
 8003272:	d002      	beq.n	800327a <RCCEx_PLLSAI1_Config+0x62>
 8003274:	2b02      	cmp	r3, #2
 8003276:	d009      	beq.n	800328c <RCCEx_PLLSAI1_Config+0x74>
 8003278:	e020      	b.n	80032bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800327a:	4b60      	ldr	r3, [pc, #384]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0302 	and.w	r3, r3, #2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d11d      	bne.n	80032c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800328a:	e01a      	b.n	80032c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800328c:	4b5b      	ldr	r3, [pc, #364]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003294:	2b00      	cmp	r3, #0
 8003296:	d116      	bne.n	80032c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800329c:	e013      	b.n	80032c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800329e:	4b57      	ldr	r3, [pc, #348]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10f      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032aa:	4b54      	ldr	r3, [pc, #336]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d109      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032ba:	e006      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	73fb      	strb	r3, [r7, #15]
      break;
 80032c0:	e004      	b.n	80032cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032c2:	bf00      	nop
 80032c4:	e002      	b.n	80032cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032c6:	bf00      	nop
 80032c8:	e000      	b.n	80032cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10d      	bne.n	80032ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032d2:	4b4a      	ldr	r3, [pc, #296]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6819      	ldr	r1, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	3b01      	subs	r3, #1
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	430b      	orrs	r3, r1
 80032e8:	4944      	ldr	r1, [pc, #272]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032ea:	4313      	orrs	r3, r2
 80032ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032ee:	7bfb      	ldrb	r3, [r7, #15]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d17d      	bne.n	80033f0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032f4:	4b41      	ldr	r3, [pc, #260]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a40      	ldr	r2, [pc, #256]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80032fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80032fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003300:	f7fe fb64 	bl	80019cc <HAL_GetTick>
 8003304:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003306:	e009      	b.n	800331c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003308:	f7fe fb60 	bl	80019cc <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d902      	bls.n	800331c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	73fb      	strb	r3, [r7, #15]
        break;
 800331a:	e005      	b.n	8003328 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800331c:	4b37      	ldr	r3, [pc, #220]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1ef      	bne.n	8003308 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003328:	7bfb      	ldrb	r3, [r7, #15]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d160      	bne.n	80033f0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d111      	bne.n	8003358 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003334:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800333c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6892      	ldr	r2, [r2, #8]
 8003344:	0211      	lsls	r1, r2, #8
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	68d2      	ldr	r2, [r2, #12]
 800334a:	0912      	lsrs	r2, r2, #4
 800334c:	0452      	lsls	r2, r2, #17
 800334e:	430a      	orrs	r2, r1
 8003350:	492a      	ldr	r1, [pc, #168]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003352:	4313      	orrs	r3, r2
 8003354:	610b      	str	r3, [r1, #16]
 8003356:	e027      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d112      	bne.n	8003384 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800335e:	4b27      	ldr	r3, [pc, #156]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003366:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	6892      	ldr	r2, [r2, #8]
 800336e:	0211      	lsls	r1, r2, #8
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6912      	ldr	r2, [r2, #16]
 8003374:	0852      	lsrs	r2, r2, #1
 8003376:	3a01      	subs	r2, #1
 8003378:	0552      	lsls	r2, r2, #21
 800337a:	430a      	orrs	r2, r1
 800337c:	491f      	ldr	r1, [pc, #124]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 800337e:	4313      	orrs	r3, r2
 8003380:	610b      	str	r3, [r1, #16]
 8003382:	e011      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003384:	4b1d      	ldr	r3, [pc, #116]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003386:	691b      	ldr	r3, [r3, #16]
 8003388:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800338c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6892      	ldr	r2, [r2, #8]
 8003394:	0211      	lsls	r1, r2, #8
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6952      	ldr	r2, [r2, #20]
 800339a:	0852      	lsrs	r2, r2, #1
 800339c:	3a01      	subs	r2, #1
 800339e:	0652      	lsls	r2, r2, #25
 80033a0:	430a      	orrs	r2, r1
 80033a2:	4916      	ldr	r1, [pc, #88]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033a8:	4b14      	ldr	r3, [pc, #80]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a13      	ldr	r2, [pc, #76]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80033b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe fb0a 	bl	80019cc <HAL_GetTick>
 80033b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033ba:	e009      	b.n	80033d0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033bc:	f7fe fb06 	bl	80019cc <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d902      	bls.n	80033d0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	73fb      	strb	r3, [r7, #15]
          break;
 80033ce:	e005      	b.n	80033dc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033d0:	4b0a      	ldr	r3, [pc, #40]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d0ef      	beq.n	80033bc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d106      	bne.n	80033f0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033e2:	4b06      	ldr	r3, [pc, #24]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033e4:	691a      	ldr	r2, [r3, #16]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	699b      	ldr	r3, [r3, #24]
 80033ea:	4904      	ldr	r1, [pc, #16]	@ (80033fc <RCCEx_PLLSAI1_Config+0x1e4>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40021000 	.word	0x40021000

08003400 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800340a:	2300      	movs	r3, #0
 800340c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800340e:	4b6a      	ldr	r3, [pc, #424]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d018      	beq.n	800344c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800341a:	4b67      	ldr	r3, [pc, #412]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f003 0203 	and.w	r2, r3, #3
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d10d      	bne.n	8003446 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
       ||
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003432:	4b61      	ldr	r3, [pc, #388]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003434:	68db      	ldr	r3, [r3, #12]
 8003436:	091b      	lsrs	r3, r3, #4
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
       ||
 8003442:	429a      	cmp	r2, r3
 8003444:	d047      	beq.n	80034d6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	73fb      	strb	r3, [r7, #15]
 800344a:	e044      	b.n	80034d6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b03      	cmp	r3, #3
 8003452:	d018      	beq.n	8003486 <RCCEx_PLLSAI2_Config+0x86>
 8003454:	2b03      	cmp	r3, #3
 8003456:	d825      	bhi.n	80034a4 <RCCEx_PLLSAI2_Config+0xa4>
 8003458:	2b01      	cmp	r3, #1
 800345a:	d002      	beq.n	8003462 <RCCEx_PLLSAI2_Config+0x62>
 800345c:	2b02      	cmp	r3, #2
 800345e:	d009      	beq.n	8003474 <RCCEx_PLLSAI2_Config+0x74>
 8003460:	e020      	b.n	80034a4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003462:	4b55      	ldr	r3, [pc, #340]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0302 	and.w	r3, r3, #2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d11d      	bne.n	80034aa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003472:	e01a      	b.n	80034aa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003474:	4b50      	ldr	r3, [pc, #320]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800347c:	2b00      	cmp	r3, #0
 800347e:	d116      	bne.n	80034ae <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003484:	e013      	b.n	80034ae <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003486:	4b4c      	ldr	r3, [pc, #304]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10f      	bne.n	80034b2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003492:	4b49      	ldr	r3, [pc, #292]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034a2:	e006      	b.n	80034b2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	73fb      	strb	r3, [r7, #15]
      break;
 80034a8:	e004      	b.n	80034b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034aa:	bf00      	nop
 80034ac:	e002      	b.n	80034b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034ae:	bf00      	nop
 80034b0:	e000      	b.n	80034b4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80034b2:	bf00      	nop
    }

    if(status == HAL_OK)
 80034b4:	7bfb      	ldrb	r3, [r7, #15]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10d      	bne.n	80034d6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034ba:	4b3f      	ldr	r3, [pc, #252]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034bc:	68db      	ldr	r3, [r3, #12]
 80034be:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6819      	ldr	r1, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	3b01      	subs	r3, #1
 80034cc:	011b      	lsls	r3, r3, #4
 80034ce:	430b      	orrs	r3, r1
 80034d0:	4939      	ldr	r1, [pc, #228]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d167      	bne.n	80035ac <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80034dc:	4b36      	ldr	r3, [pc, #216]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a35      	ldr	r2, [pc, #212]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80034e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034e8:	f7fe fa70 	bl	80019cc <HAL_GetTick>
 80034ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80034ee:	e009      	b.n	8003504 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80034f0:	f7fe fa6c 	bl	80019cc <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d902      	bls.n	8003504 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	73fb      	strb	r3, [r7, #15]
        break;
 8003502:	e005      	b.n	8003510 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003504:	4b2c      	ldr	r3, [pc, #176]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1ef      	bne.n	80034f0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d14a      	bne.n	80035ac <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d111      	bne.n	8003540 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800351c:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800351e:	695b      	ldr	r3, [r3, #20]
 8003520:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8003524:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	6892      	ldr	r2, [r2, #8]
 800352c:	0211      	lsls	r1, r2, #8
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	68d2      	ldr	r2, [r2, #12]
 8003532:	0912      	lsrs	r2, r2, #4
 8003534:	0452      	lsls	r2, r2, #17
 8003536:	430a      	orrs	r2, r1
 8003538:	491f      	ldr	r1, [pc, #124]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800353a:	4313      	orrs	r3, r2
 800353c:	614b      	str	r3, [r1, #20]
 800353e:	e011      	b.n	8003564 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003540:	4b1d      	ldr	r3, [pc, #116]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003548:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	6892      	ldr	r2, [r2, #8]
 8003550:	0211      	lsls	r1, r2, #8
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6912      	ldr	r2, [r2, #16]
 8003556:	0852      	lsrs	r2, r2, #1
 8003558:	3a01      	subs	r2, #1
 800355a:	0652      	lsls	r2, r2, #25
 800355c:	430a      	orrs	r2, r1
 800355e:	4916      	ldr	r1, [pc, #88]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003560:	4313      	orrs	r3, r2
 8003562:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003564:	4b14      	ldr	r3, [pc, #80]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a13      	ldr	r2, [pc, #76]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800356a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800356e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fe fa2c 	bl	80019cc <HAL_GetTick>
 8003574:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003576:	e009      	b.n	800358c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003578:	f7fe fa28 	bl	80019cc <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d902      	bls.n	800358c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	73fb      	strb	r3, [r7, #15]
          break;
 800358a:	e005      	b.n	8003598 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800358c:	4b0a      	ldr	r3, [pc, #40]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003594:	2b00      	cmp	r3, #0
 8003596:	d0ef      	beq.n	8003578 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003598:	7bfb      	ldrb	r3, [r7, #15]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d106      	bne.n	80035ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800359e:	4b06      	ldr	r3, [pc, #24]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a0:	695a      	ldr	r2, [r3, #20]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	4904      	ldr	r1, [pc, #16]	@ (80035b8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80035a8:	4313      	orrs	r3, r2
 80035aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80035ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3710      	adds	r7, #16
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
 80035b6:	bf00      	nop
 80035b8:	40021000 	.word	0x40021000

080035bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b084      	sub	sp, #16
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e095      	b.n	80036fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d108      	bne.n	80035e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035de:	d009      	beq.n	80035f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	61da      	str	r2, [r3, #28]
 80035e6:	e005      	b.n	80035f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7fd fffc 	bl	800160c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800362a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003634:	d902      	bls.n	800363c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	e002      	b.n	8003642 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800363c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003640:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800364a:	d007      	beq.n	800365c <HAL_SPI_Init+0xa0>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003654:	d002      	beq.n	800365c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	691b      	ldr	r3, [r3, #16]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	699b      	ldr	r3, [r3, #24]
 8003686:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800369e:	ea42 0103 	orr.w	r1, r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	0c1b      	lsrs	r3, r3, #16
 80036b8:	f003 0204 	and.w	r2, r3, #4
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c0:	f003 0310 	and.w	r3, r3, #16
 80036c4:	431a      	orrs	r2, r3
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036ca:	f003 0308 	and.w	r3, r3, #8
 80036ce:	431a      	orrs	r2, r3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80036d8:	ea42 0103 	orr.w	r1, r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b088      	sub	sp, #32
 8003706:	af00      	add	r7, sp, #0
 8003708:	60f8      	str	r0, [r7, #12]
 800370a:	60b9      	str	r1, [r7, #8]
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003712:	f7fe f95b 	bl	80019cc <HAL_GetTick>
 8003716:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003718:	88fb      	ldrh	r3, [r7, #6]
 800371a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	d001      	beq.n	800372c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003728:	2302      	movs	r3, #2
 800372a:	e15c      	b.n	80039e6 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_SPI_Transmit+0x36>
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d101      	bne.n	800373c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e154      	b.n	80039e6 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003742:	2b01      	cmp	r3, #1
 8003744:	d101      	bne.n	800374a <HAL_SPI_Transmit+0x48>
 8003746:	2302      	movs	r3, #2
 8003748:	e14d      	b.n	80039e6 <HAL_SPI_Transmit+0x2e4>
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2203      	movs	r2, #3
 8003756:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	88fa      	ldrh	r2, [r7, #6]
 8003770:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	2200      	movs	r2, #0
 800378c:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800379c:	d10f      	bne.n	80037be <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037ac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037bc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c8:	2b40      	cmp	r3, #64	@ 0x40
 80037ca:	d007      	beq.n	80037dc <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80037da:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80037e4:	d952      	bls.n	800388c <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Transmit+0xf2>
 80037ee:	8b7b      	ldrh	r3, [r7, #26]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d145      	bne.n	8003880 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037f8:	881a      	ldrh	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003804:	1c9a      	adds	r2, r3, #2
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800380e:	b29b      	uxth	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b29a      	uxth	r2, r3
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003818:	e032      	b.n	8003880 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b02      	cmp	r3, #2
 8003826:	d112      	bne.n	800384e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003838:	1c9a      	adds	r2, r3, #2
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800384c:	e018      	b.n	8003880 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800384e:	f7fe f8bd 	bl	80019cc <HAL_GetTick>
 8003852:	4602      	mov	r2, r0
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	1ad3      	subs	r3, r2, r3
 8003858:	683a      	ldr	r2, [r7, #0]
 800385a:	429a      	cmp	r2, r3
 800385c:	d803      	bhi.n	8003866 <HAL_SPI_Transmit+0x164>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003864:	d102      	bne.n	800386c <HAL_SPI_Transmit+0x16a>
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d109      	bne.n	8003880 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e0b2      	b.n	80039e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1c7      	bne.n	800381a <HAL_SPI_Transmit+0x118>
 800388a:	e083      	b.n	8003994 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_SPI_Transmit+0x198>
 8003894:	8b7b      	ldrh	r3, [r7, #26]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d177      	bne.n	800398a <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d912      	bls.n	80038ca <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b02      	subs	r3, #2
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80038c8:	e05f      	b.n	800398a <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	330c      	adds	r3, #12
 80038d4:	7812      	ldrb	r2, [r2, #0]
 80038d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	3b01      	subs	r3, #1
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038f0:	e04b      	b.n	800398a <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d12b      	bne.n	8003958 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003904:	b29b      	uxth	r3, r3
 8003906:	2b01      	cmp	r3, #1
 8003908:	d912      	bls.n	8003930 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800390e:	881a      	ldrh	r2, [r3, #0]
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800391a:	1c9a      	adds	r2, r3, #2
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003924:	b29b      	uxth	r3, r3
 8003926:	3b02      	subs	r3, #2
 8003928:	b29a      	uxth	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800392e:	e02c      	b.n	800398a <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	7812      	ldrb	r2, [r2, #0]
 800393c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003942:	1c5a      	adds	r2, r3, #1
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394c:	b29b      	uxth	r3, r3
 800394e:	3b01      	subs	r3, #1
 8003950:	b29a      	uxth	r2, r3
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003956:	e018      	b.n	800398a <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003958:	f7fe f838 	bl	80019cc <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	69fb      	ldr	r3, [r7, #28]
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d803      	bhi.n	8003970 <HAL_SPI_Transmit+0x26e>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800396e:	d102      	bne.n	8003976 <HAL_SPI_Transmit+0x274>
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d109      	bne.n	800398a <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e02d      	b.n	80039e6 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800398e:	b29b      	uxth	r3, r3
 8003990:	2b00      	cmp	r3, #0
 8003992:	d1ae      	bne.n	80038f2 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003994:	69fa      	ldr	r2, [r7, #28]
 8003996:	6839      	ldr	r1, [r7, #0]
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f000 fb65 	bl	8004068 <SPI_EndRxTxTransaction>
 800399e:	4603      	mov	r3, r0
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d002      	beq.n	80039aa <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2220      	movs	r2, #32
 80039a8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10a      	bne.n	80039c8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	617b      	str	r3, [r7, #20]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2200      	movs	r2, #0
 80039d4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d001      	beq.n	80039e4 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80039e0:	2301      	movs	r3, #1
 80039e2:	e000      	b.n	80039e6 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80039e4:	2300      	movs	r3, #0
  }
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3720      	adds	r7, #32
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}

080039ee <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	b08a      	sub	sp, #40	@ 0x28
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	60f8      	str	r0, [r7, #12]
 80039f6:	60b9      	str	r1, [r7, #8]
 80039f8:	607a      	str	r2, [r7, #4]
 80039fa:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80039fc:	2301      	movs	r3, #1
 80039fe:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a00:	f7fd ffe4 	bl	80019cc <HAL_GetTick>
 8003a04:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a0c:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003a14:	887b      	ldrh	r3, [r7, #2]
 8003a16:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003a18:	887b      	ldrh	r3, [r7, #2]
 8003a1a:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a1c:	7ffb      	ldrb	r3, [r7, #31]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d00c      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x4e>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a28:	d106      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d102      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x4a>
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d001      	beq.n	8003a3c <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e1f3      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x60>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_SPI_TransmitReceive+0x60>
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e1e8      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_SPI_TransmitReceive+0x72>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e1e1      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x436>
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	2b04      	cmp	r3, #4
 8003a72:	d003      	beq.n	8003a7c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2205      	movs	r2, #5
 8003a78:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	68ba      	ldr	r2, [r7, #8]
 8003a9c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	887a      	ldrh	r2, [r7, #2]
 8003aa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	887a      	ldrh	r2, [r7, #2]
 8003aa8:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003abe:	d802      	bhi.n	8003ac6 <HAL_SPI_TransmitReceive+0xd8>
 8003ac0:	8abb      	ldrh	r3, [r7, #20]
 8003ac2:	2b01      	cmp	r3, #1
 8003ac4:	d908      	bls.n	8003ad8 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003ad4:	605a      	str	r2, [r3, #4]
 8003ad6:	e007      	b.n	8003ae8 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ae6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af2:	2b40      	cmp	r3, #64	@ 0x40
 8003af4:	d007      	beq.n	8003b06 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b04:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003b0e:	f240 8083 	bls.w	8003c18 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_SPI_TransmitReceive+0x132>
 8003b1a:	8afb      	ldrh	r3, [r7, #22]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d16f      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b24:	881a      	ldrh	r2, [r3, #0]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b30:	1c9a      	adds	r2, r3, #2
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3a:	b29b      	uxth	r3, r3
 8003b3c:	3b01      	subs	r3, #1
 8003b3e:	b29a      	uxth	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b44:	e05c      	b.n	8003c00 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d11b      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x19e>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b58:	b29b      	uxth	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_SPI_TransmitReceive+0x19e>
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d113      	bne.n	8003b8c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b68:	881a      	ldrh	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b74:	1c9a      	adds	r2, r3, #2
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	3b01      	subs	r3, #1
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 0301 	and.w	r3, r3, #1
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d11c      	bne.n	8003bd4 <HAL_SPI_TransmitReceive+0x1e6>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d016      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68da      	ldr	r2, [r3, #12]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb0:	b292      	uxth	r2, r2
 8003bb2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bb8:	1c9a      	adds	r2, r3, #2
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003bc4:	b29b      	uxth	r3, r3
 8003bc6:	3b01      	subs	r3, #1
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bd4:	f7fd fefa 	bl	80019cc <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	6a3b      	ldr	r3, [r7, #32]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d80d      	bhi.n	8003c00 <HAL_SPI_TransmitReceive+0x212>
 8003be4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bea:	d009      	beq.n	8003c00 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003bfc:	2303      	movs	r3, #3
 8003bfe:	e111      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d19d      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x158>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d197      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x158>
 8003c16:	e0e5      	b.n	8003de4 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0x23a>
 8003c20:	8afb      	ldrh	r3, [r7, #22]
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	f040 80d1 	bne.w	8003dca <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c2c:	b29b      	uxth	r3, r3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d912      	bls.n	8003c58 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c36:	881a      	ldrh	r2, [r3, #0]
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c42:	1c9a      	adds	r2, r3, #2
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c4c:	b29b      	uxth	r3, r3
 8003c4e:	3b02      	subs	r3, #2
 8003c50:	b29a      	uxth	r2, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003c56:	e0b8      	b.n	8003dca <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	330c      	adds	r3, #12
 8003c62:	7812      	ldrb	r2, [r2, #0]
 8003c64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c6a:	1c5a      	adds	r2, r3, #1
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	3b01      	subs	r3, #1
 8003c78:	b29a      	uxth	r2, r3
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c7e:	e0a4      	b.n	8003dca <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d134      	bne.n	8003cf8 <HAL_SPI_TransmitReceive+0x30a>
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d02f      	beq.n	8003cf8 <HAL_SPI_TransmitReceive+0x30a>
 8003c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d12c      	bne.n	8003cf8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d912      	bls.n	8003cce <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cac:	881a      	ldrh	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb8:	1c9a      	adds	r2, r3, #2
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b02      	subs	r3, #2
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003ccc:	e012      	b.n	8003cf4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	330c      	adds	r3, #12
 8003cd8:	7812      	ldrb	r2, [r2, #0]
 8003cda:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	3b01      	subs	r3, #1
 8003cee:	b29a      	uxth	r2, r3
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 0301 	and.w	r3, r3, #1
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d148      	bne.n	8003d98 <HAL_SPI_TransmitReceive+0x3aa>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d042      	beq.n	8003d98 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d923      	bls.n	8003d66 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68da      	ldr	r2, [r3, #12]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d28:	b292      	uxth	r2, r2
 8003d2a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d30:	1c9a      	adds	r2, r3, #2
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d3c:	b29b      	uxth	r3, r3
 8003d3e:	3b02      	subs	r3, #2
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d81f      	bhi.n	8003d94 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	685a      	ldr	r2, [r3, #4]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003d62:	605a      	str	r2, [r3, #4]
 8003d64:	e016      	b.n	8003d94 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f103 020c 	add.w	r2, r3, #12
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d72:	7812      	ldrb	r2, [r2, #0]
 8003d74:	b2d2      	uxtb	r2, r2
 8003d76:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7c:	1c5a      	adds	r2, r3, #1
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d94:	2301      	movs	r3, #1
 8003d96:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003d98:	f7fd fe18 	bl	80019cc <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d803      	bhi.n	8003db0 <HAL_SPI_TransmitReceive+0x3c2>
 8003da8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d102      	bne.n	8003db6 <HAL_SPI_TransmitReceive+0x3c8>
 8003db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d109      	bne.n	8003dca <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e02c      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dce:	b29b      	uxth	r3, r3
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	f47f af55 	bne.w	8003c80 <HAL_SPI_TransmitReceive+0x292>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	f47f af4e 	bne.w	8003c80 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003de8:	68f8      	ldr	r0, [r7, #12]
 8003dea:	f000 f93d 	bl	8004068 <SPI_EndRxTxTransaction>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d008      	beq.n	8003e06 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2220      	movs	r2, #32
 8003df8:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e00e      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2201      	movs	r2, #1
 8003e0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003e22:	2300      	movs	r3, #0
  }
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3728      	adds	r7, #40	@ 0x28
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	603b      	str	r3, [r7, #0]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e3c:	f7fd fdc6 	bl	80019cc <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e44:	1a9b      	subs	r3, r3, r2
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	4413      	add	r3, r2
 8003e4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003e4c:	f7fd fdbe 	bl	80019cc <HAL_GetTick>
 8003e50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e52:	4b39      	ldr	r3, [pc, #228]	@ (8003f38 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	015b      	lsls	r3, r3, #5
 8003e58:	0d1b      	lsrs	r3, r3, #20
 8003e5a:	69fa      	ldr	r2, [r7, #28]
 8003e5c:	fb02 f303 	mul.w	r3, r2, r3
 8003e60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e62:	e054      	b.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6a:	d050      	beq.n	8003f0e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e6c:	f7fd fdae 	bl	80019cc <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	69fa      	ldr	r2, [r7, #28]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d902      	bls.n	8003e82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d13d      	bne.n	8003efe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685a      	ldr	r2, [r3, #4]
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003e90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003e9a:	d111      	bne.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ea4:	d004      	beq.n	8003eb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eae:	d107      	bne.n	8003ec0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ebe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec8:	d10f      	bne.n	8003eea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ed8:	601a      	str	r2, [r3, #0]
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ee8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e017      	b.n	8003f2e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	689a      	ldr	r2, [r3, #8]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	4013      	ands	r3, r2
 8003f18:	68ba      	ldr	r2, [r7, #8]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	bf0c      	ite	eq
 8003f1e:	2301      	moveq	r3, #1
 8003f20:	2300      	movne	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	461a      	mov	r2, r3
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d19b      	bne.n	8003e64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3720      	adds	r7, #32
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}
 8003f36:	bf00      	nop
 8003f38:	20000018 	.word	0x20000018

08003f3c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b08a      	sub	sp, #40	@ 0x28
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003f4e:	f7fd fd3d 	bl	80019cc <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	683a      	ldr	r2, [r7, #0]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003f5e:	f7fd fd35 	bl	80019cc <HAL_GetTick>
 8003f62:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	330c      	adds	r3, #12
 8003f6a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f6c:	4b3d      	ldr	r3, [pc, #244]	@ (8004064 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	00da      	lsls	r2, r3, #3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	0d1b      	lsrs	r3, r3, #20
 8003f7c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f7e:	fb02 f303 	mul.w	r3, r2, r3
 8003f82:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003f84:	e060      	b.n	8004048 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003f8c:	d107      	bne.n	8003f9e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003f9c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d050      	beq.n	8004048 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003fa6:	f7fd fd11 	bl	80019cc <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	6a3b      	ldr	r3, [r7, #32]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d902      	bls.n	8003fbc <SPI_WaitFifoStateUntilTimeout+0x80>
 8003fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d13d      	bne.n	8004038 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	685a      	ldr	r2, [r3, #4]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003fca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fd4:	d111      	bne.n	8003ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003fde:	d004      	beq.n	8003fea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fe8:	d107      	bne.n	8003ffa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004002:	d10f      	bne.n	8004024 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004022:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8004034:	2303      	movs	r3, #3
 8004036:	e010      	b.n	800405a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004038:	69bb      	ldr	r3, [r7, #24]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800403e:	2300      	movs	r3, #0
 8004040:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	3b01      	subs	r3, #1
 8004046:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	4013      	ands	r3, r2
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	429a      	cmp	r2, r3
 8004056:	d196      	bne.n	8003f86 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3728      	adds	r7, #40	@ 0x28
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	20000018 	.word	0x20000018

08004068 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	2200      	movs	r2, #0
 800407c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8004080:	68f8      	ldr	r0, [r7, #12]
 8004082:	f7ff ff5b 	bl	8003f3c <SPI_WaitFifoStateUntilTimeout>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004090:	f043 0220 	orr.w	r2, r3, #32
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004098:	2303      	movs	r3, #3
 800409a:	e027      	b.n	80040ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	9300      	str	r3, [sp, #0]
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	2200      	movs	r2, #0
 80040a4:	2180      	movs	r1, #128	@ 0x80
 80040a6:	68f8      	ldr	r0, [r7, #12]
 80040a8:	f7ff fec0 	bl	8003e2c <SPI_WaitFlagStateUntilTimeout>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d007      	beq.n	80040c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040b6:	f043 0220 	orr.w	r2, r3, #32
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e014      	b.n	80040ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff ff34 	bl	8003f3c <SPI_WaitFifoStateUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d007      	beq.n	80040ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040de:	f043 0220 	orr.w	r2, r3, #32
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80040e6:	2303      	movs	r3, #3
 80040e8:	e000      	b.n	80040ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b082      	sub	sp, #8
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e040      	b.n	8004188 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d106      	bne.n	800411c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7fd faba 	bl	8001690 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2224      	movs	r2, #36	@ 0x24
 8004120:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004136:	2b00      	cmp	r3, #0
 8004138:	d002      	beq.n	8004140 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 fb6a 	bl	8004814 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004140:	6878      	ldr	r0, [r7, #4]
 8004142:	f000 f8af 	bl	80042a4 <UART_SetConfig>
 8004146:	4603      	mov	r3, r0
 8004148:	2b01      	cmp	r3, #1
 800414a:	d101      	bne.n	8004150 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e01b      	b.n	8004188 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	685a      	ldr	r2, [r3, #4]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800415e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	689a      	ldr	r2, [r3, #8]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800416e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0201 	orr.w	r2, r2, #1
 800417e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004180:	6878      	ldr	r0, [r7, #4]
 8004182:	f000 fbe9 	bl	8004958 <UART_CheckIdleState>
 8004186:	4603      	mov	r3, r0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3708      	adds	r7, #8
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	@ 0x28
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80041a4:	2b20      	cmp	r3, #32
 80041a6:	d177      	bne.n	8004298 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d002      	beq.n	80041b4 <HAL_UART_Transmit+0x24>
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d101      	bne.n	80041b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	e070      	b.n	800429a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2221      	movs	r2, #33	@ 0x21
 80041c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041c6:	f7fd fc01 	bl	80019cc <HAL_GetTick>
 80041ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	88fa      	ldrh	r2, [r7, #6]
 80041d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	88fa      	ldrh	r2, [r7, #6]
 80041d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e4:	d108      	bne.n	80041f8 <HAL_UART_Transmit+0x68>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	691b      	ldr	r3, [r3, #16]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d104      	bne.n	80041f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80041ee:	2300      	movs	r3, #0
 80041f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	61bb      	str	r3, [r7, #24]
 80041f6:	e003      	b.n	8004200 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80041fc:	2300      	movs	r3, #0
 80041fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004200:	e02f      	b.n	8004262 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	9300      	str	r3, [sp, #0]
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2200      	movs	r2, #0
 800420a:	2180      	movs	r1, #128	@ 0x80
 800420c:	68f8      	ldr	r0, [r7, #12]
 800420e:	f000 fc4b 	bl	8004aa8 <UART_WaitOnFlagUntilTimeout>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d004      	beq.n	8004222 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2220      	movs	r2, #32
 800421c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e03b      	b.n	800429a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10b      	bne.n	8004240 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	881a      	ldrh	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004234:	b292      	uxth	r2, r2
 8004236:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	3302      	adds	r3, #2
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e007      	b.n	8004250 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	781a      	ldrb	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3301      	adds	r3, #1
 800424e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004268:	b29b      	uxth	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1c9      	bne.n	8004202 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	2200      	movs	r2, #0
 8004276:	2140      	movs	r1, #64	@ 0x40
 8004278:	68f8      	ldr	r0, [r7, #12]
 800427a:	f000 fc15 	bl	8004aa8 <UART_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d004      	beq.n	800428e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800428a:	2303      	movs	r3, #3
 800428c:	e005      	b.n	800429a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2220      	movs	r2, #32
 8004292:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004294:	2300      	movs	r3, #0
 8004296:	e000      	b.n	800429a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004298:	2302      	movs	r3, #2
  }
}
 800429a:	4618      	mov	r0, r3
 800429c:	3720      	adds	r7, #32
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042a8:	b08a      	sub	sp, #40	@ 0x28
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042ae:	2300      	movs	r3, #0
 80042b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	689a      	ldr	r2, [r3, #8]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	431a      	orrs	r2, r3
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	4313      	orrs	r3, r2
 80042ca:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4ba4      	ldr	r3, [pc, #656]	@ (8004564 <UART_SetConfig+0x2c0>)
 80042d4:	4013      	ands	r3, r2
 80042d6:	68fa      	ldr	r2, [r7, #12]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80042dc:	430b      	orrs	r3, r1
 80042de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	699b      	ldr	r3, [r3, #24]
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a99      	ldr	r2, [pc, #612]	@ (8004568 <UART_SetConfig+0x2c4>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d004      	beq.n	8004310 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	6a1b      	ldr	r3, [r3, #32]
 800430a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800430c:	4313      	orrs	r3, r2
 800430e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004320:	430a      	orrs	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a90      	ldr	r2, [pc, #576]	@ (800456c <UART_SetConfig+0x2c8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d126      	bne.n	800437c <UART_SetConfig+0xd8>
 800432e:	4b90      	ldr	r3, [pc, #576]	@ (8004570 <UART_SetConfig+0x2cc>)
 8004330:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004334:	f003 0303 	and.w	r3, r3, #3
 8004338:	2b03      	cmp	r3, #3
 800433a:	d81b      	bhi.n	8004374 <UART_SetConfig+0xd0>
 800433c:	a201      	add	r2, pc, #4	@ (adr r2, 8004344 <UART_SetConfig+0xa0>)
 800433e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004342:	bf00      	nop
 8004344:	08004355 	.word	0x08004355
 8004348:	08004365 	.word	0x08004365
 800434c:	0800435d 	.word	0x0800435d
 8004350:	0800436d 	.word	0x0800436d
 8004354:	2301      	movs	r3, #1
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435a:	e116      	b.n	800458a <UART_SetConfig+0x2e6>
 800435c:	2302      	movs	r3, #2
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004362:	e112      	b.n	800458a <UART_SetConfig+0x2e6>
 8004364:	2304      	movs	r3, #4
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436a:	e10e      	b.n	800458a <UART_SetConfig+0x2e6>
 800436c:	2308      	movs	r3, #8
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004372:	e10a      	b.n	800458a <UART_SetConfig+0x2e6>
 8004374:	2310      	movs	r3, #16
 8004376:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800437a:	e106      	b.n	800458a <UART_SetConfig+0x2e6>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a7c      	ldr	r2, [pc, #496]	@ (8004574 <UART_SetConfig+0x2d0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d138      	bne.n	80043f8 <UART_SetConfig+0x154>
 8004386:	4b7a      	ldr	r3, [pc, #488]	@ (8004570 <UART_SetConfig+0x2cc>)
 8004388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800438c:	f003 030c 	and.w	r3, r3, #12
 8004390:	2b0c      	cmp	r3, #12
 8004392:	d82d      	bhi.n	80043f0 <UART_SetConfig+0x14c>
 8004394:	a201      	add	r2, pc, #4	@ (adr r2, 800439c <UART_SetConfig+0xf8>)
 8004396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439a:	bf00      	nop
 800439c:	080043d1 	.word	0x080043d1
 80043a0:	080043f1 	.word	0x080043f1
 80043a4:	080043f1 	.word	0x080043f1
 80043a8:	080043f1 	.word	0x080043f1
 80043ac:	080043e1 	.word	0x080043e1
 80043b0:	080043f1 	.word	0x080043f1
 80043b4:	080043f1 	.word	0x080043f1
 80043b8:	080043f1 	.word	0x080043f1
 80043bc:	080043d9 	.word	0x080043d9
 80043c0:	080043f1 	.word	0x080043f1
 80043c4:	080043f1 	.word	0x080043f1
 80043c8:	080043f1 	.word	0x080043f1
 80043cc:	080043e9 	.word	0x080043e9
 80043d0:	2300      	movs	r3, #0
 80043d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043d6:	e0d8      	b.n	800458a <UART_SetConfig+0x2e6>
 80043d8:	2302      	movs	r3, #2
 80043da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043de:	e0d4      	b.n	800458a <UART_SetConfig+0x2e6>
 80043e0:	2304      	movs	r3, #4
 80043e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043e6:	e0d0      	b.n	800458a <UART_SetConfig+0x2e6>
 80043e8:	2308      	movs	r3, #8
 80043ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043ee:	e0cc      	b.n	800458a <UART_SetConfig+0x2e6>
 80043f0:	2310      	movs	r3, #16
 80043f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043f6:	e0c8      	b.n	800458a <UART_SetConfig+0x2e6>
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a5e      	ldr	r2, [pc, #376]	@ (8004578 <UART_SetConfig+0x2d4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d125      	bne.n	800444e <UART_SetConfig+0x1aa>
 8004402:	4b5b      	ldr	r3, [pc, #364]	@ (8004570 <UART_SetConfig+0x2cc>)
 8004404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004408:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800440c:	2b30      	cmp	r3, #48	@ 0x30
 800440e:	d016      	beq.n	800443e <UART_SetConfig+0x19a>
 8004410:	2b30      	cmp	r3, #48	@ 0x30
 8004412:	d818      	bhi.n	8004446 <UART_SetConfig+0x1a2>
 8004414:	2b20      	cmp	r3, #32
 8004416:	d00a      	beq.n	800442e <UART_SetConfig+0x18a>
 8004418:	2b20      	cmp	r3, #32
 800441a:	d814      	bhi.n	8004446 <UART_SetConfig+0x1a2>
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <UART_SetConfig+0x182>
 8004420:	2b10      	cmp	r3, #16
 8004422:	d008      	beq.n	8004436 <UART_SetConfig+0x192>
 8004424:	e00f      	b.n	8004446 <UART_SetConfig+0x1a2>
 8004426:	2300      	movs	r3, #0
 8004428:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800442c:	e0ad      	b.n	800458a <UART_SetConfig+0x2e6>
 800442e:	2302      	movs	r3, #2
 8004430:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004434:	e0a9      	b.n	800458a <UART_SetConfig+0x2e6>
 8004436:	2304      	movs	r3, #4
 8004438:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800443c:	e0a5      	b.n	800458a <UART_SetConfig+0x2e6>
 800443e:	2308      	movs	r3, #8
 8004440:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004444:	e0a1      	b.n	800458a <UART_SetConfig+0x2e6>
 8004446:	2310      	movs	r3, #16
 8004448:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800444c:	e09d      	b.n	800458a <UART_SetConfig+0x2e6>
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a4a      	ldr	r2, [pc, #296]	@ (800457c <UART_SetConfig+0x2d8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d125      	bne.n	80044a4 <UART_SetConfig+0x200>
 8004458:	4b45      	ldr	r3, [pc, #276]	@ (8004570 <UART_SetConfig+0x2cc>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004462:	2bc0      	cmp	r3, #192	@ 0xc0
 8004464:	d016      	beq.n	8004494 <UART_SetConfig+0x1f0>
 8004466:	2bc0      	cmp	r3, #192	@ 0xc0
 8004468:	d818      	bhi.n	800449c <UART_SetConfig+0x1f8>
 800446a:	2b80      	cmp	r3, #128	@ 0x80
 800446c:	d00a      	beq.n	8004484 <UART_SetConfig+0x1e0>
 800446e:	2b80      	cmp	r3, #128	@ 0x80
 8004470:	d814      	bhi.n	800449c <UART_SetConfig+0x1f8>
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <UART_SetConfig+0x1d8>
 8004476:	2b40      	cmp	r3, #64	@ 0x40
 8004478:	d008      	beq.n	800448c <UART_SetConfig+0x1e8>
 800447a:	e00f      	b.n	800449c <UART_SetConfig+0x1f8>
 800447c:	2300      	movs	r3, #0
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004482:	e082      	b.n	800458a <UART_SetConfig+0x2e6>
 8004484:	2302      	movs	r3, #2
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800448a:	e07e      	b.n	800458a <UART_SetConfig+0x2e6>
 800448c:	2304      	movs	r3, #4
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004492:	e07a      	b.n	800458a <UART_SetConfig+0x2e6>
 8004494:	2308      	movs	r3, #8
 8004496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800449a:	e076      	b.n	800458a <UART_SetConfig+0x2e6>
 800449c:	2310      	movs	r3, #16
 800449e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044a2:	e072      	b.n	800458a <UART_SetConfig+0x2e6>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a35      	ldr	r2, [pc, #212]	@ (8004580 <UART_SetConfig+0x2dc>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d12a      	bne.n	8004504 <UART_SetConfig+0x260>
 80044ae:	4b30      	ldr	r3, [pc, #192]	@ (8004570 <UART_SetConfig+0x2cc>)
 80044b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044bc:	d01a      	beq.n	80044f4 <UART_SetConfig+0x250>
 80044be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80044c2:	d81b      	bhi.n	80044fc <UART_SetConfig+0x258>
 80044c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044c8:	d00c      	beq.n	80044e4 <UART_SetConfig+0x240>
 80044ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044ce:	d815      	bhi.n	80044fc <UART_SetConfig+0x258>
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d003      	beq.n	80044dc <UART_SetConfig+0x238>
 80044d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044d8:	d008      	beq.n	80044ec <UART_SetConfig+0x248>
 80044da:	e00f      	b.n	80044fc <UART_SetConfig+0x258>
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044e2:	e052      	b.n	800458a <UART_SetConfig+0x2e6>
 80044e4:	2302      	movs	r3, #2
 80044e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ea:	e04e      	b.n	800458a <UART_SetConfig+0x2e6>
 80044ec:	2304      	movs	r3, #4
 80044ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044f2:	e04a      	b.n	800458a <UART_SetConfig+0x2e6>
 80044f4:	2308      	movs	r3, #8
 80044f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044fa:	e046      	b.n	800458a <UART_SetConfig+0x2e6>
 80044fc:	2310      	movs	r3, #16
 80044fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004502:	e042      	b.n	800458a <UART_SetConfig+0x2e6>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a17      	ldr	r2, [pc, #92]	@ (8004568 <UART_SetConfig+0x2c4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d13a      	bne.n	8004584 <UART_SetConfig+0x2e0>
 800450e:	4b18      	ldr	r3, [pc, #96]	@ (8004570 <UART_SetConfig+0x2cc>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004518:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800451c:	d01a      	beq.n	8004554 <UART_SetConfig+0x2b0>
 800451e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004522:	d81b      	bhi.n	800455c <UART_SetConfig+0x2b8>
 8004524:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004528:	d00c      	beq.n	8004544 <UART_SetConfig+0x2a0>
 800452a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800452e:	d815      	bhi.n	800455c <UART_SetConfig+0x2b8>
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <UART_SetConfig+0x298>
 8004534:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004538:	d008      	beq.n	800454c <UART_SetConfig+0x2a8>
 800453a:	e00f      	b.n	800455c <UART_SetConfig+0x2b8>
 800453c:	2300      	movs	r3, #0
 800453e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004542:	e022      	b.n	800458a <UART_SetConfig+0x2e6>
 8004544:	2302      	movs	r3, #2
 8004546:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800454a:	e01e      	b.n	800458a <UART_SetConfig+0x2e6>
 800454c:	2304      	movs	r3, #4
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004552:	e01a      	b.n	800458a <UART_SetConfig+0x2e6>
 8004554:	2308      	movs	r3, #8
 8004556:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800455a:	e016      	b.n	800458a <UART_SetConfig+0x2e6>
 800455c:	2310      	movs	r3, #16
 800455e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004562:	e012      	b.n	800458a <UART_SetConfig+0x2e6>
 8004564:	efff69f3 	.word	0xefff69f3
 8004568:	40008000 	.word	0x40008000
 800456c:	40013800 	.word	0x40013800
 8004570:	40021000 	.word	0x40021000
 8004574:	40004400 	.word	0x40004400
 8004578:	40004800 	.word	0x40004800
 800457c:	40004c00 	.word	0x40004c00
 8004580:	40005000 	.word	0x40005000
 8004584:	2310      	movs	r3, #16
 8004586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a9f      	ldr	r2, [pc, #636]	@ (800480c <UART_SetConfig+0x568>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d17a      	bne.n	800468a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004594:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004598:	2b08      	cmp	r3, #8
 800459a:	d824      	bhi.n	80045e6 <UART_SetConfig+0x342>
 800459c:	a201      	add	r2, pc, #4	@ (adr r2, 80045a4 <UART_SetConfig+0x300>)
 800459e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a2:	bf00      	nop
 80045a4:	080045c9 	.word	0x080045c9
 80045a8:	080045e7 	.word	0x080045e7
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045e7 	.word	0x080045e7
 80045b4:	080045d7 	.word	0x080045d7
 80045b8:	080045e7 	.word	0x080045e7
 80045bc:	080045e7 	.word	0x080045e7
 80045c0:	080045e7 	.word	0x080045e7
 80045c4:	080045df 	.word	0x080045df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c8:	f7fe fab0 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 80045cc:	61f8      	str	r0, [r7, #28]
        break;
 80045ce:	e010      	b.n	80045f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d0:	4b8f      	ldr	r3, [pc, #572]	@ (8004810 <UART_SetConfig+0x56c>)
 80045d2:	61fb      	str	r3, [r7, #28]
        break;
 80045d4:	e00d      	b.n	80045f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045d6:	f7fe fa11 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80045da:	61f8      	str	r0, [r7, #28]
        break;
 80045dc:	e009      	b.n	80045f2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80045e2:	61fb      	str	r3, [r7, #28]
        break;
 80045e4:	e005      	b.n	80045f2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80045f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80fb 	beq.w	80047f0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	4613      	mov	r3, r2
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	4413      	add	r3, r2
 8004604:	69fa      	ldr	r2, [r7, #28]
 8004606:	429a      	cmp	r2, r3
 8004608:	d305      	bcc.n	8004616 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004610:	69fa      	ldr	r2, [r7, #28]
 8004612:	429a      	cmp	r2, r3
 8004614:	d903      	bls.n	800461e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800461c:	e0e8      	b.n	80047f0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	2200      	movs	r2, #0
 8004622:	461c      	mov	r4, r3
 8004624:	4615      	mov	r5, r2
 8004626:	f04f 0200 	mov.w	r2, #0
 800462a:	f04f 0300 	mov.w	r3, #0
 800462e:	022b      	lsls	r3, r5, #8
 8004630:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004634:	0222      	lsls	r2, r4, #8
 8004636:	68f9      	ldr	r1, [r7, #12]
 8004638:	6849      	ldr	r1, [r1, #4]
 800463a:	0849      	lsrs	r1, r1, #1
 800463c:	2000      	movs	r0, #0
 800463e:	4688      	mov	r8, r1
 8004640:	4681      	mov	r9, r0
 8004642:	eb12 0a08 	adds.w	sl, r2, r8
 8004646:	eb43 0b09 	adc.w	fp, r3, r9
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	603b      	str	r3, [r7, #0]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004658:	4650      	mov	r0, sl
 800465a:	4659      	mov	r1, fp
 800465c:	f7fc f916 	bl	800088c <__aeabi_uldivmod>
 8004660:	4602      	mov	r2, r0
 8004662:	460b      	mov	r3, r1
 8004664:	4613      	mov	r3, r2
 8004666:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800466e:	d308      	bcc.n	8004682 <UART_SetConfig+0x3de>
 8004670:	69bb      	ldr	r3, [r7, #24]
 8004672:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004676:	d204      	bcs.n	8004682 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	60da      	str	r2, [r3, #12]
 8004680:	e0b6      	b.n	80047f0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004688:	e0b2      	b.n	80047f0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	69db      	ldr	r3, [r3, #28]
 800468e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004692:	d15e      	bne.n	8004752 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004694:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004698:	2b08      	cmp	r3, #8
 800469a:	d828      	bhi.n	80046ee <UART_SetConfig+0x44a>
 800469c:	a201      	add	r2, pc, #4	@ (adr r2, 80046a4 <UART_SetConfig+0x400>)
 800469e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046a2:	bf00      	nop
 80046a4:	080046c9 	.word	0x080046c9
 80046a8:	080046d1 	.word	0x080046d1
 80046ac:	080046d9 	.word	0x080046d9
 80046b0:	080046ef 	.word	0x080046ef
 80046b4:	080046df 	.word	0x080046df
 80046b8:	080046ef 	.word	0x080046ef
 80046bc:	080046ef 	.word	0x080046ef
 80046c0:	080046ef 	.word	0x080046ef
 80046c4:	080046e7 	.word	0x080046e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046c8:	f7fe fa30 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 80046cc:	61f8      	str	r0, [r7, #28]
        break;
 80046ce:	e014      	b.n	80046fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046d0:	f7fe fa42 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 80046d4:	61f8      	str	r0, [r7, #28]
        break;
 80046d6:	e010      	b.n	80046fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046d8:	4b4d      	ldr	r3, [pc, #308]	@ (8004810 <UART_SetConfig+0x56c>)
 80046da:	61fb      	str	r3, [r7, #28]
        break;
 80046dc:	e00d      	b.n	80046fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046de:	f7fe f98d 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 80046e2:	61f8      	str	r0, [r7, #28]
        break;
 80046e4:	e009      	b.n	80046fa <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046ea:	61fb      	str	r3, [r7, #28]
        break;
 80046ec:	e005      	b.n	80046fa <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80046f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d077      	beq.n	80047f0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	005a      	lsls	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	085b      	lsrs	r3, r3, #1
 800470a:	441a      	add	r2, r3
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	fbb2 f3f3 	udiv	r3, r2, r3
 8004714:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b0f      	cmp	r3, #15
 800471a:	d916      	bls.n	800474a <UART_SetConfig+0x4a6>
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004722:	d212      	bcs.n	800474a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	b29b      	uxth	r3, r3
 8004728:	f023 030f 	bic.w	r3, r3, #15
 800472c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	085b      	lsrs	r3, r3, #1
 8004732:	b29b      	uxth	r3, r3
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	b29a      	uxth	r2, r3
 800473a:	8afb      	ldrh	r3, [r7, #22]
 800473c:	4313      	orrs	r3, r2
 800473e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	8afa      	ldrh	r2, [r7, #22]
 8004746:	60da      	str	r2, [r3, #12]
 8004748:	e052      	b.n	80047f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004750:	e04e      	b.n	80047f0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004752:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004756:	2b08      	cmp	r3, #8
 8004758:	d827      	bhi.n	80047aa <UART_SetConfig+0x506>
 800475a:	a201      	add	r2, pc, #4	@ (adr r2, 8004760 <UART_SetConfig+0x4bc>)
 800475c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004760:	08004785 	.word	0x08004785
 8004764:	0800478d 	.word	0x0800478d
 8004768:	08004795 	.word	0x08004795
 800476c:	080047ab 	.word	0x080047ab
 8004770:	0800479b 	.word	0x0800479b
 8004774:	080047ab 	.word	0x080047ab
 8004778:	080047ab 	.word	0x080047ab
 800477c:	080047ab 	.word	0x080047ab
 8004780:	080047a3 	.word	0x080047a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004784:	f7fe f9d2 	bl	8002b2c <HAL_RCC_GetPCLK1Freq>
 8004788:	61f8      	str	r0, [r7, #28]
        break;
 800478a:	e014      	b.n	80047b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800478c:	f7fe f9e4 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8004790:	61f8      	str	r0, [r7, #28]
        break;
 8004792:	e010      	b.n	80047b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004794:	4b1e      	ldr	r3, [pc, #120]	@ (8004810 <UART_SetConfig+0x56c>)
 8004796:	61fb      	str	r3, [r7, #28]
        break;
 8004798:	e00d      	b.n	80047b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800479a:	f7fe f92f 	bl	80029fc <HAL_RCC_GetSysClockFreq>
 800479e:	61f8      	str	r0, [r7, #28]
        break;
 80047a0:	e009      	b.n	80047b6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047a6:	61fb      	str	r3, [r7, #28]
        break;
 80047a8:	e005      	b.n	80047b6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 80047aa:	2300      	movs	r3, #0
 80047ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80047b4:	bf00      	nop
    }

    if (pclk != 0U)
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d019      	beq.n	80047f0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	085a      	lsrs	r2, r3, #1
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	441a      	add	r2, r3
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ce:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b0f      	cmp	r3, #15
 80047d4:	d909      	bls.n	80047ea <UART_SetConfig+0x546>
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047dc:	d205      	bcs.n	80047ea <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60da      	str	r2, [r3, #12]
 80047e8:	e002      	b.n	80047f0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2200      	movs	r2, #0
 80047f4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80047fc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8004800:	4618      	mov	r0, r3
 8004802:	3728      	adds	r7, #40	@ 0x28
 8004804:	46bd      	mov	sp, r7
 8004806:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800480a:	bf00      	nop
 800480c:	40008000 	.word	0x40008000
 8004810:	00f42400 	.word	0x00f42400

08004814 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004820:	f003 0308 	and.w	r3, r3, #8
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00a      	beq.n	800483e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	430a      	orrs	r2, r1
 800483c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	2b00      	cmp	r3, #0
 8004848:	d00a      	beq.n	8004860 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	430a      	orrs	r2, r1
 800485e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b00      	cmp	r3, #0
 800486a:	d00a      	beq.n	8004882 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	430a      	orrs	r2, r1
 8004880:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004886:	f003 0304 	and.w	r3, r3, #4
 800488a:	2b00      	cmp	r3, #0
 800488c:	d00a      	beq.n	80048a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	430a      	orrs	r2, r1
 80048a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d00a      	beq.n	80048c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ca:	f003 0320 	and.w	r3, r3, #32
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00a      	beq.n	80048e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	430a      	orrs	r2, r1
 80048e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d01a      	beq.n	800492a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	430a      	orrs	r2, r1
 8004908:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800490e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004912:	d10a      	bne.n	800492a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	430a      	orrs	r2, r1
 8004928:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00a      	beq.n	800494c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	430a      	orrs	r2, r1
 800494a:	605a      	str	r2, [r3, #4]
  }
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b098      	sub	sp, #96	@ 0x60
 800495c:	af02      	add	r7, sp, #8
 800495e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004968:	f7fd f830 	bl	80019cc <HAL_GetTick>
 800496c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0308 	and.w	r3, r3, #8
 8004978:	2b08      	cmp	r3, #8
 800497a:	d12e      	bne.n	80049da <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800497c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004980:	9300      	str	r3, [sp, #0]
 8004982:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004984:	2200      	movs	r2, #0
 8004986:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f88c 	bl	8004aa8 <UART_WaitOnFlagUntilTimeout>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d021      	beq.n	80049da <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800499e:	e853 3f00 	ldrex	r3, [r3]
 80049a2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80049aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	461a      	mov	r2, r3
 80049b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80049b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80049b6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049b8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049bc:	e841 2300 	strex	r3, r2, [r1]
 80049c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1e6      	bne.n	8004996 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2220      	movs	r2, #32
 80049cc:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e062      	b.n	8004aa0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b04      	cmp	r3, #4
 80049e6:	d149      	bne.n	8004a7c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80049ec:	9300      	str	r3, [sp, #0]
 80049ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80049f0:	2200      	movs	r2, #0
 80049f2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f000 f856 	bl	8004aa8 <UART_WaitOnFlagUntilTimeout>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d03c      	beq.n	8004a7c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a0a:	e853 3f00 	ldrex	r3, [r3]
 8004a0e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a20:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a24:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a26:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a28:	e841 2300 	strex	r3, r2, [r1]
 8004a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d1e6      	bne.n	8004a02 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	3308      	adds	r3, #8
 8004a3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0301 	bic.w	r3, r3, #1
 8004a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	3308      	adds	r3, #8
 8004a52:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a54:	61fa      	str	r2, [r7, #28]
 8004a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	69b9      	ldr	r1, [r7, #24]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	617b      	str	r3, [r7, #20]
   return(result);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e5      	bne.n	8004a34 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a78:	2303      	movs	r3, #3
 8004a7a:	e011      	b.n	8004aa0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a9e:	2300      	movs	r3, #0
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3758      	adds	r7, #88	@ 0x58
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60f8      	str	r0, [r7, #12]
 8004ab0:	60b9      	str	r1, [r7, #8]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4613      	mov	r3, r2
 8004ab6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ab8:	e04f      	b.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aba:	69bb      	ldr	r3, [r7, #24]
 8004abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ac0:	d04b      	beq.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac2:	f7fc ff83 	bl	80019cc <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	69ba      	ldr	r2, [r7, #24]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d101      	bne.n	8004adc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ad8:	2303      	movs	r3, #3
 8004ada:	e04e      	b.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f003 0304 	and.w	r3, r3, #4
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d037      	beq.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b80      	cmp	r3, #128	@ 0x80
 8004aee:	d034      	beq.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	2b40      	cmp	r3, #64	@ 0x40
 8004af4:	d031      	beq.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	69db      	ldr	r3, [r3, #28]
 8004afc:	f003 0308 	and.w	r3, r3, #8
 8004b00:	2b08      	cmp	r3, #8
 8004b02:	d110      	bne.n	8004b26 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2208      	movs	r2, #8
 8004b0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b0c:	68f8      	ldr	r0, [r7, #12]
 8004b0e:	f000 f838 	bl	8004b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2208      	movs	r2, #8
 8004b16:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e029      	b.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	69db      	ldr	r3, [r3, #28]
 8004b2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b30:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004b34:	d111      	bne.n	8004b5a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004b3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f000 f81e 	bl	8004b82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2220      	movs	r2, #32
 8004b4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e00f      	b.n	8004b7a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	4013      	ands	r3, r2
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	bf0c      	ite	eq
 8004b6a:	2301      	moveq	r3, #1
 8004b6c:	2300      	movne	r3, #0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	461a      	mov	r2, r3
 8004b72:	79fb      	ldrb	r3, [r7, #7]
 8004b74:	429a      	cmp	r2, r3
 8004b76:	d0a0      	beq.n	8004aba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b78:	2300      	movs	r3, #0
}
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	3710      	adds	r7, #16
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	bd80      	pop	{r7, pc}

08004b82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b82:	b480      	push	{r7}
 8004b84:	b095      	sub	sp, #84	@ 0x54
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b92:	e853 3f00 	ldrex	r3, [r3]
 8004b96:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	461a      	mov	r2, r3
 8004ba6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004ba8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004baa:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004bae:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e6      	bne.n	8004b8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc4:	6a3b      	ldr	r3, [r7, #32]
 8004bc6:	e853 3f00 	ldrex	r3, [r3]
 8004bca:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	f023 0301 	bic.w	r3, r3, #1
 8004bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	3308      	adds	r3, #8
 8004bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bdc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bde:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004be2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d1e5      	bne.n	8004bbc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d118      	bne.n	8004c2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f023 0310 	bic.w	r3, r3, #16
 8004c0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	461a      	mov	r2, r3
 8004c14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004c16:	61bb      	str	r3, [r7, #24]
 8004c18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1a:	6979      	ldr	r1, [r7, #20]
 8004c1c:	69ba      	ldr	r2, [r7, #24]
 8004c1e:	e841 2300 	strex	r3, r2, [r1]
 8004c22:	613b      	str	r3, [r7, #16]
   return(result);
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1e6      	bne.n	8004bf8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004c3e:	bf00      	nop
 8004c40:	3754      	adds	r7, #84	@ 0x54
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
	...

08004c4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004c50:	4904      	ldr	r1, [pc, #16]	@ (8004c64 <MX_FATFS_Init+0x18>)
 8004c52:	4805      	ldr	r0, [pc, #20]	@ (8004c68 <MX_FATFS_Init+0x1c>)
 8004c54:	f004 fd9a 	bl	800978c <FATFS_LinkDriver>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	461a      	mov	r2, r3
 8004c5c:	4b03      	ldr	r3, [pc, #12]	@ (8004c6c <MX_FATFS_Init+0x20>)
 8004c5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004c60:	bf00      	nop
 8004c62:	bd80      	pop	{r7, pc}
 8004c64:	20002650 	.word	0x20002650
 8004c68:	20000024 	.word	0x20000024
 8004c6c:	2000264c 	.word	0x2000264c

08004c70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8004c74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	4603      	mov	r3, r0
 8004c88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8004c8a:	79fb      	ldrb	r3, [r7, #7]
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f7fb ffe1 	bl	8000c54 <SD_disk_initialize>
 8004c92:	4603      	mov	r3, r0
 8004c94:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b082      	sub	sp, #8
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */

    return SD_disk_status(pdrv);
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fc f810 	bl	8000cd0 <SD_disk_status>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	3708      	adds	r7, #8
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	4603      	mov	r3, r0
 8004cca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(buff, sector, count);
 8004ccc:	683a      	ldr	r2, [r7, #0]
 8004cce:	6879      	ldr	r1, [r7, #4]
 8004cd0:	68b8      	ldr	r0, [r7, #8]
 8004cd2:	f7fc f809 	bl	8000ce8 <SD_disk_read>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}

08004ce2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8004ce2:	b580      	push	{r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60b9      	str	r1, [r7, #8]
 8004cea:	607a      	str	r2, [r7, #4]
 8004cec:	603b      	str	r3, [r7, #0]
 8004cee:	4603      	mov	r3, r0
 8004cf0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(buff, sector, count);
 8004cf2:	683a      	ldr	r2, [r7, #0]
 8004cf4:	6879      	ldr	r1, [r7, #4]
 8004cf6:	68b8      	ldr	r0, [r7, #8]
 8004cf8:	f7fc f804 	bl	8000d04 <SD_disk_write>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	4603      	mov	r3, r0
 8004d10:	603a      	str	r2, [r7, #0]
 8004d12:	71fb      	strb	r3, [r7, #7]
 8004d14:	460b      	mov	r3, r1
 8004d16:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */

    return SD_disk_ioctl(cmd, buff);
 8004d18:	79bb      	ldrb	r3, [r7, #6]
 8004d1a:	6839      	ldr	r1, [r7, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f7fb ffff 	bl	8000d20 <SD_disk_ioctl>
 8004d22:	4603      	mov	r3, r0
 8004d24:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3708      	adds	r7, #8
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	4a08      	ldr	r2, [pc, #32]	@ (8004d60 <disk_status+0x30>)
 8004d3e:	009b      	lsls	r3, r3, #2
 8004d40:	4413      	add	r3, r2
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	79fa      	ldrb	r2, [r7, #7]
 8004d48:	4905      	ldr	r1, [pc, #20]	@ (8004d60 <disk_status+0x30>)
 8004d4a:	440a      	add	r2, r1
 8004d4c:	7b12      	ldrb	r2, [r2, #12]
 8004d4e:	4610      	mov	r0, r2
 8004d50:	4798      	blx	r3
 8004d52:	4603      	mov	r3, r0
 8004d54:	73fb      	strb	r3, [r7, #15]
  return stat;
 8004d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3710      	adds	r7, #16
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}
 8004d60:	20002ae0 	.word	0x20002ae0

08004d64 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8004d6e:	2300      	movs	r3, #0
 8004d70:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	4a0d      	ldr	r2, [pc, #52]	@ (8004dac <disk_initialize+0x48>)
 8004d76:	5cd3      	ldrb	r3, [r2, r3]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d111      	bne.n	8004da0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8004d7c:	79fb      	ldrb	r3, [r7, #7]
 8004d7e:	4a0b      	ldr	r2, [pc, #44]	@ (8004dac <disk_initialize+0x48>)
 8004d80:	2101      	movs	r1, #1
 8004d82:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8004d84:	79fb      	ldrb	r3, [r7, #7]
 8004d86:	4a09      	ldr	r2, [pc, #36]	@ (8004dac <disk_initialize+0x48>)
 8004d88:	009b      	lsls	r3, r3, #2
 8004d8a:	4413      	add	r3, r2
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	79fa      	ldrb	r2, [r7, #7]
 8004d92:	4906      	ldr	r1, [pc, #24]	@ (8004dac <disk_initialize+0x48>)
 8004d94:	440a      	add	r2, r1
 8004d96:	7b12      	ldrb	r2, [r2, #12]
 8004d98:	4610      	mov	r0, r2
 8004d9a:	4798      	blx	r3
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	20002ae0 	.word	0x20002ae0

08004db0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8004db0:	b590      	push	{r4, r7, lr}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
 8004dba:	603b      	str	r3, [r7, #0]
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8004dc0:	7bfb      	ldrb	r3, [r7, #15]
 8004dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004dec <disk_read+0x3c>)
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4413      	add	r3, r2
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	689c      	ldr	r4, [r3, #8]
 8004dcc:	7bfb      	ldrb	r3, [r7, #15]
 8004dce:	4a07      	ldr	r2, [pc, #28]	@ (8004dec <disk_read+0x3c>)
 8004dd0:	4413      	add	r3, r2
 8004dd2:	7b18      	ldrb	r0, [r3, #12]
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	68b9      	ldr	r1, [r7, #8]
 8004dda:	47a0      	blx	r4
 8004ddc:	4603      	mov	r3, r0
 8004dde:	75fb      	strb	r3, [r7, #23]
  return res;
 8004de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	371c      	adds	r7, #28
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd90      	pop	{r4, r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20002ae0 	.word	0x20002ae0

08004df0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8004df0:	b590      	push	{r4, r7, lr}
 8004df2:	b087      	sub	sp, #28
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	607a      	str	r2, [r7, #4]
 8004dfa:	603b      	str	r3, [r7, #0]
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8004e00:	7bfb      	ldrb	r3, [r7, #15]
 8004e02:	4a0a      	ldr	r2, [pc, #40]	@ (8004e2c <disk_write+0x3c>)
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68dc      	ldr	r4, [r3, #12]
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	4a07      	ldr	r2, [pc, #28]	@ (8004e2c <disk_write+0x3c>)
 8004e10:	4413      	add	r3, r2
 8004e12:	7b18      	ldrb	r0, [r3, #12]
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	687a      	ldr	r2, [r7, #4]
 8004e18:	68b9      	ldr	r1, [r7, #8]
 8004e1a:	47a0      	blx	r4
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8004e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	371c      	adds	r7, #28
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd90      	pop	{r4, r7, pc}
 8004e2a:	bf00      	nop
 8004e2c:	20002ae0 	.word	0x20002ae0

08004e30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	4603      	mov	r3, r0
 8004e38:	603a      	str	r2, [r7, #0]
 8004e3a:	71fb      	strb	r3, [r7, #7]
 8004e3c:	460b      	mov	r3, r1
 8004e3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8004e40:	79fb      	ldrb	r3, [r7, #7]
 8004e42:	4a09      	ldr	r2, [pc, #36]	@ (8004e68 <disk_ioctl+0x38>)
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	691b      	ldr	r3, [r3, #16]
 8004e4c:	79fa      	ldrb	r2, [r7, #7]
 8004e4e:	4906      	ldr	r1, [pc, #24]	@ (8004e68 <disk_ioctl+0x38>)
 8004e50:	440a      	add	r2, r1
 8004e52:	7b10      	ldrb	r0, [r2, #12]
 8004e54:	79b9      	ldrb	r1, [r7, #6]
 8004e56:	683a      	ldr	r2, [r7, #0]
 8004e58:	4798      	blx	r3
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8004e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20002ae0 	.word	0x20002ae0

08004e6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3301      	adds	r3, #1
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8004e7c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004e80:	021b      	lsls	r3, r3, #8
 8004e82:	b21a      	sxth	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	781b      	ldrb	r3, [r3, #0]
 8004e88:	b21b      	sxth	r3, r3
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	b21b      	sxth	r3, r3
 8004e8e:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004e90:	89fb      	ldrh	r3, [r7, #14]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b085      	sub	sp, #20
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	3303      	adds	r3, #3
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	3202      	adds	r2, #2
 8004eb6:	7812      	ldrb	r2, [r2, #0]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	021b      	lsls	r3, r3, #8
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	3201      	adds	r2, #1
 8004ec4:	7812      	ldrb	r2, [r2, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	021b      	lsls	r3, r3, #8
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	7812      	ldrb	r2, [r2, #0]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	60fb      	str	r3, [r7, #12]
	return rv;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <ld_qword>:

#if _FS_EXFAT
static
QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 8004ee4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8004ee8:	b09d      	sub	sp, #116	@ 0x74
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8004eee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ef0:	3307      	adds	r3, #7
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	469a      	mov	sl, r3
 8004efa:	4693      	mov	fp, r2
 8004efc:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8004f00:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004f04:	f04f 0000 	mov.w	r0, #0
 8004f08:	f04f 0100 	mov.w	r1, #0
 8004f0c:	0219      	lsls	r1, r3, #8
 8004f0e:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004f12:	0210      	lsls	r0, r2, #8
 8004f14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f16:	3306      	adds	r3, #6
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	461c      	mov	r4, r3
 8004f20:	4615      	mov	r5, r2
 8004f22:	ea40 0804 	orr.w	r8, r0, r4
 8004f26:	ea41 0905 	orr.w	r9, r1, r5
 8004f2a:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8004f2e:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004f32:	f04f 0000 	mov.w	r0, #0
 8004f36:	f04f 0100 	mov.w	r1, #0
 8004f3a:	0219      	lsls	r1, r3, #8
 8004f3c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004f40:	0210      	lsls	r0, r2, #8
 8004f42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f44:	3305      	adds	r3, #5
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	b2db      	uxtb	r3, r3
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004f4e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8004f50:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8004f54:	4623      	mov	r3, r4
 8004f56:	4303      	orrs	r3, r0
 8004f58:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f60:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8004f64:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 8004f68:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004f6c:	f04f 0000 	mov.w	r0, #0
 8004f70:	f04f 0100 	mov.w	r1, #0
 8004f74:	0219      	lsls	r1, r3, #8
 8004f76:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004f7a:	0210      	lsls	r0, r2, #8
 8004f7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f7e:	3304      	adds	r3, #4
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	b2db      	uxtb	r3, r3
 8004f84:	2200      	movs	r2, #0
 8004f86:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f88:	657a      	str	r2, [r7, #84]	@ 0x54
 8004f8a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8004f8e:	4623      	mov	r3, r4
 8004f90:	4303      	orrs	r3, r0
 8004f92:	623b      	str	r3, [r7, #32]
 8004f94:	462b      	mov	r3, r5
 8004f96:	430b      	orrs	r3, r1
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f9a:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004f9e:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 8004fa2:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004fa6:	f04f 0000 	mov.w	r0, #0
 8004faa:	f04f 0100 	mov.w	r1, #0
 8004fae:	0219      	lsls	r1, r3, #8
 8004fb0:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004fb4:	0210      	lsls	r0, r2, #8
 8004fb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fb8:	3303      	adds	r3, #3
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fc2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8004fc4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8004fc8:	4623      	mov	r3, r4
 8004fca:	4303      	orrs	r3, r0
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	462b      	mov	r3, r5
 8004fd0:	430b      	orrs	r3, r1
 8004fd2:	61fb      	str	r3, [r7, #28]
 8004fd4:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8004fd8:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8004fdc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004fe0:	f04f 0000 	mov.w	r0, #0
 8004fe4:	f04f 0100 	mov.w	r1, #0
 8004fe8:	0219      	lsls	r1, r3, #8
 8004fea:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8004fee:	0210      	lsls	r0, r2, #8
 8004ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	643b      	str	r3, [r7, #64]	@ 0x40
 8004ffc:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ffe:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8005002:	4623      	mov	r3, r4
 8005004:	4303      	orrs	r3, r0
 8005006:	613b      	str	r3, [r7, #16]
 8005008:	462b      	mov	r3, r5
 800500a:	430b      	orrs	r3, r1
 800500c:	617b      	str	r3, [r7, #20]
 800500e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005012:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 8005016:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800501a:	f04f 0200 	mov.w	r2, #0
 800501e:	f04f 0300 	mov.w	r3, #0
 8005022:	020b      	lsls	r3, r1, #8
 8005024:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005028:	0202      	lsls	r2, r0, #8
 800502a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800502c:	3101      	adds	r1, #1
 800502e:	7809      	ldrb	r1, [r1, #0]
 8005030:	b2c9      	uxtb	r1, r1
 8005032:	2000      	movs	r0, #0
 8005034:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005036:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8005038:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 800503c:	4621      	mov	r1, r4
 800503e:	4311      	orrs	r1, r2
 8005040:	60b9      	str	r1, [r7, #8]
 8005042:	4629      	mov	r1, r5
 8005044:	4319      	orrs	r1, r3
 8005046:	60f9      	str	r1, [r7, #12]
 8005048:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800504c:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 8005050:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005054:	f04f 0200 	mov.w	r2, #0
 8005058:	f04f 0300 	mov.w	r3, #0
 800505c:	020b      	lsls	r3, r1, #8
 800505e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005062:	0202      	lsls	r2, r0, #8
 8005064:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8005066:	7809      	ldrb	r1, [r1, #0]
 8005068:	b2c9      	uxtb	r1, r1
 800506a:	2000      	movs	r0, #0
 800506c:	6339      	str	r1, [r7, #48]	@ 0x30
 800506e:	6378      	str	r0, [r7, #52]	@ 0x34
 8005070:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005074:	4621      	mov	r1, r4
 8005076:	4311      	orrs	r1, r2
 8005078:	6039      	str	r1, [r7, #0]
 800507a:	4629      	mov	r1, r5
 800507c:	4319      	orrs	r1, r3
 800507e:	6079      	str	r1, [r7, #4]
 8005080:	e9d7 3400 	ldrd	r3, r4, [r7]
 8005084:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 8005088:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 800508c:	4610      	mov	r0, r2
 800508e:	4619      	mov	r1, r3
 8005090:	3774      	adds	r7, #116	@ 0x74
 8005092:	46bd      	mov	sp, r7
 8005094:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8005098:	4770      	bx	lr

0800509a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800509a:	b480      	push	{r7}
 800509c:	b083      	sub	sp, #12
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	1c5a      	adds	r2, r3, #1
 80050aa:	607a      	str	r2, [r7, #4]
 80050ac:	887a      	ldrh	r2, [r7, #2]
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	701a      	strb	r2, [r3, #0]
 80050b2:	887b      	ldrh	r3, [r7, #2]
 80050b4:	0a1b      	lsrs	r3, r3, #8
 80050b6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	607a      	str	r2, [r7, #4]
 80050be:	887a      	ldrh	r2, [r7, #2]
 80050c0:	b2d2      	uxtb	r2, r2
 80050c2:	701a      	strb	r2, [r3, #0]
}
 80050c4:	bf00      	nop
 80050c6:	370c      	adds	r7, #12
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	607a      	str	r2, [r7, #4]
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	b2d2      	uxtb	r2, r2
 80050e4:	701a      	strb	r2, [r3, #0]
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	0a1b      	lsrs	r3, r3, #8
 80050ea:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	1c5a      	adds	r2, r3, #1
 80050f0:	607a      	str	r2, [r7, #4]
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	701a      	strb	r2, [r3, #0]
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	0a1b      	lsrs	r3, r3, #8
 80050fc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	1c5a      	adds	r2, r3, #1
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	683a      	ldr	r2, [r7, #0]
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	0a1b      	lsrs	r3, r3, #8
 800510e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	1c5a      	adds	r2, r3, #1
 8005114:	607a      	str	r2, [r7, #4]
 8005116:	683a      	ldr	r2, [r7, #0]
 8005118:	b2d2      	uxtb	r2, r2
 800511a:	701a      	strb	r2, [r3, #0]
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <st_qword>:

#if _FS_EXFAT
static
void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	60fa      	str	r2, [r7, #12]
 800513a:	783a      	ldrb	r2, [r7, #0]
 800513c:	701a      	strb	r2, [r3, #0]
 800513e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005142:	f04f 0200 	mov.w	r2, #0
 8005146:	f04f 0300 	mov.w	r3, #0
 800514a:	0a02      	lsrs	r2, r0, #8
 800514c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005150:	0a0b      	lsrs	r3, r1, #8
 8005152:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	60fa      	str	r2, [r7, #12]
 800515c:	783a      	ldrb	r2, [r7, #0]
 800515e:	701a      	strb	r2, [r3, #0]
 8005160:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005164:	f04f 0200 	mov.w	r2, #0
 8005168:	f04f 0300 	mov.w	r3, #0
 800516c:	0a02      	lsrs	r2, r0, #8
 800516e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005172:	0a0b      	lsrs	r3, r1, #8
 8005174:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	60fa      	str	r2, [r7, #12]
 800517e:	783a      	ldrb	r2, [r7, #0]
 8005180:	701a      	strb	r2, [r3, #0]
 8005182:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005186:	f04f 0200 	mov.w	r2, #0
 800518a:	f04f 0300 	mov.w	r3, #0
 800518e:	0a02      	lsrs	r2, r0, #8
 8005190:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8005194:	0a0b      	lsrs	r3, r1, #8
 8005196:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	1c5a      	adds	r2, r3, #1
 800519e:	60fa      	str	r2, [r7, #12]
 80051a0:	783a      	ldrb	r2, [r7, #0]
 80051a2:	701a      	strb	r2, [r3, #0]
 80051a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	0a02      	lsrs	r2, r0, #8
 80051b2:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80051b6:	0a0b      	lsrs	r3, r1, #8
 80051b8:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	1c5a      	adds	r2, r3, #1
 80051c0:	60fa      	str	r2, [r7, #12]
 80051c2:	783a      	ldrb	r2, [r7, #0]
 80051c4:	701a      	strb	r2, [r3, #0]
 80051c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ca:	f04f 0200 	mov.w	r2, #0
 80051ce:	f04f 0300 	mov.w	r3, #0
 80051d2:	0a02      	lsrs	r2, r0, #8
 80051d4:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80051d8:	0a0b      	lsrs	r3, r1, #8
 80051da:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	60fa      	str	r2, [r7, #12]
 80051e4:	783a      	ldrb	r2, [r7, #0]
 80051e6:	701a      	strb	r2, [r3, #0]
 80051e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80051ec:	f04f 0200 	mov.w	r2, #0
 80051f0:	f04f 0300 	mov.w	r3, #0
 80051f4:	0a02      	lsrs	r2, r0, #8
 80051f6:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80051fa:	0a0b      	lsrs	r3, r1, #8
 80051fc:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	60fa      	str	r2, [r7, #12]
 8005206:	783a      	ldrb	r2, [r7, #0]
 8005208:	701a      	strb	r2, [r3, #0]
 800520a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800520e:	f04f 0200 	mov.w	r2, #0
 8005212:	f04f 0300 	mov.w	r3, #0
 8005216:	0a02      	lsrs	r2, r0, #8
 8005218:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800521c:	0a0b      	lsrs	r3, r1, #8
 800521e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	1c5a      	adds	r2, r3, #1
 8005226:	60fa      	str	r2, [r7, #12]
 8005228:	783a      	ldrb	r2, [r7, #0]
 800522a:	701a      	strb	r2, [r3, #0]
}
 800522c:	bf00      	nop
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00d      	beq.n	800526e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	1c53      	adds	r3, r2, #1
 8005256:	613b      	str	r3, [r7, #16]
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	1c59      	adds	r1, r3, #1
 800525c:	6179      	str	r1, [r7, #20]
 800525e:	7812      	ldrb	r2, [r2, #0]
 8005260:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	3b01      	subs	r3, #1
 8005266:	607b      	str	r3, [r7, #4]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1f1      	bne.n	8005252 <mem_cpy+0x1a>
	}
}
 800526e:	bf00      	nop
 8005270:	371c      	adds	r7, #28
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800527a:	b480      	push	{r7}
 800527c:	b087      	sub	sp, #28
 800527e:	af00      	add	r7, sp, #0
 8005280:	60f8      	str	r0, [r7, #12]
 8005282:	60b9      	str	r1, [r7, #8]
 8005284:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	617a      	str	r2, [r7, #20]
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	b2d2      	uxtb	r2, r2
 8005294:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	3b01      	subs	r3, #1
 800529a:	607b      	str	r3, [r7, #4]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d1f3      	bne.n	800528a <mem_set+0x10>
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	@ 0x24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	60f8      	str	r0, [r7, #12]
 80052b8:	60b9      	str	r1, [r7, #8]
 80052ba:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	61fb      	str	r3, [r7, #28]
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80052c4:	2300      	movs	r3, #0
 80052c6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	1c5a      	adds	r2, r3, #1
 80052cc:	61fa      	str	r2, [r7, #28]
 80052ce:	781b      	ldrb	r3, [r3, #0]
 80052d0:	4619      	mov	r1, r3
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	1c5a      	adds	r2, r3, #1
 80052d6:	61ba      	str	r2, [r7, #24]
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	1acb      	subs	r3, r1, r3
 80052dc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	3b01      	subs	r3, #1
 80052e2:	607b      	str	r3, [r7, #4]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d002      	beq.n	80052f0 <mem_cmp+0x40>
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0eb      	beq.n	80052c8 <mem_cmp+0x18>

	return r;
 80052f0:	697b      	ldr	r3, [r7, #20]
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3724      	adds	r7, #36	@ 0x24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80052fe:	b480      	push	{r7}
 8005300:	b083      	sub	sp, #12
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
 8005306:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005308:	e002      	b.n	8005310 <chk_chr+0x12>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	3301      	adds	r3, #1
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	781b      	ldrb	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d005      	beq.n	8005324 <chk_chr+0x26>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	4293      	cmp	r3, r2
 8005322:	d1f2      	bne.n	800530a <chk_chr+0xc>
	return *str;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	781b      	ldrb	r3, [r3, #0]
}
 8005328:	4618      	mov	r0, r3
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005334:	b480      	push	{r7}
 8005336:	b085      	sub	sp, #20
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800533e:	2300      	movs	r3, #0
 8005340:	60bb      	str	r3, [r7, #8]
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e029      	b.n	800539c <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005348:	4a27      	ldr	r2, [pc, #156]	@ (80053e8 <chk_lock+0xb4>)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	4413      	add	r3, r2
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d01d      	beq.n	8005392 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005356:	4a24      	ldr	r2, [pc, #144]	@ (80053e8 <chk_lock+0xb4>)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	011b      	lsls	r3, r3, #4
 800535c:	4413      	add	r3, r2
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	429a      	cmp	r2, r3
 8005366:	d116      	bne.n	8005396 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005368:	4a1f      	ldr	r2, [pc, #124]	@ (80053e8 <chk_lock+0xb4>)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	011b      	lsls	r3, r3, #4
 800536e:	4413      	add	r3, r2
 8005370:	3304      	adds	r3, #4
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005378:	429a      	cmp	r2, r3
 800537a:	d10c      	bne.n	8005396 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800537c:	4a1a      	ldr	r2, [pc, #104]	@ (80053e8 <chk_lock+0xb4>)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	011b      	lsls	r3, r3, #4
 8005382:	4413      	add	r3, r2
 8005384:	3308      	adds	r3, #8
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
				Files[i].clu == dp->obj.sclust &&
 800538c:	429a      	cmp	r2, r3
 800538e:	d102      	bne.n	8005396 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005390:	e007      	b.n	80053a2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005392:	2301      	movs	r3, #1
 8005394:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	3301      	adds	r3, #1
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d9d2      	bls.n	8005348 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	2b02      	cmp	r3, #2
 80053a6:	d109      	bne.n	80053bc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d102      	bne.n	80053b4 <chk_lock+0x80>
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	d101      	bne.n	80053b8 <chk_lock+0x84>
 80053b4:	2300      	movs	r3, #0
 80053b6:	e010      	b.n	80053da <chk_lock+0xa6>
 80053b8:	2312      	movs	r3, #18
 80053ba:	e00e      	b.n	80053da <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d108      	bne.n	80053d4 <chk_lock+0xa0>
 80053c2:	4a09      	ldr	r2, [pc, #36]	@ (80053e8 <chk_lock+0xb4>)
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	011b      	lsls	r3, r3, #4
 80053c8:	4413      	add	r3, r2
 80053ca:	330c      	adds	r3, #12
 80053cc:	881b      	ldrh	r3, [r3, #0]
 80053ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053d2:	d101      	bne.n	80053d8 <chk_lock+0xa4>
 80053d4:	2310      	movs	r3, #16
 80053d6:	e000      	b.n	80053da <chk_lock+0xa6>
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3714      	adds	r7, #20
 80053de:	46bd      	mov	sp, r7
 80053e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e4:	4770      	bx	lr
 80053e6:	bf00      	nop
 80053e8:	20002660 	.word	0x20002660

080053ec <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80053f2:	2300      	movs	r3, #0
 80053f4:	607b      	str	r3, [r7, #4]
 80053f6:	e002      	b.n	80053fe <enq_lock+0x12>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3301      	adds	r3, #1
 80053fc:	607b      	str	r3, [r7, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2b01      	cmp	r3, #1
 8005402:	d806      	bhi.n	8005412 <enq_lock+0x26>
 8005404:	4a09      	ldr	r2, [pc, #36]	@ (800542c <enq_lock+0x40>)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	011b      	lsls	r3, r3, #4
 800540a:	4413      	add	r3, r2
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1f2      	bne.n	80053f8 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b02      	cmp	r3, #2
 8005416:	bf14      	ite	ne
 8005418:	2301      	movne	r3, #1
 800541a:	2300      	moveq	r3, #0
 800541c:	b2db      	uxtb	r3, r3
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	20002660 	.word	0x20002660

08005430 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005430:	b480      	push	{r7}
 8005432:	b085      	sub	sp, #20
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]
 800543e:	e01f      	b.n	8005480 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005440:	4a41      	ldr	r2, [pc, #260]	@ (8005548 <inc_lock+0x118>)
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	4413      	add	r3, r2
 8005448:	681a      	ldr	r2, [r3, #0]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	429a      	cmp	r2, r3
 8005450:	d113      	bne.n	800547a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005452:	4a3d      	ldr	r2, [pc, #244]	@ (8005548 <inc_lock+0x118>)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	4413      	add	r3, r2
 800545a:	3304      	adds	r3, #4
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005462:	429a      	cmp	r2, r3
 8005464:	d109      	bne.n	800547a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005466:	4a38      	ldr	r2, [pc, #224]	@ (8005548 <inc_lock+0x118>)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	011b      	lsls	r3, r3, #4
 800546c:	4413      	add	r3, r2
 800546e:	3308      	adds	r3, #8
 8005470:	681a      	ldr	r2, [r3, #0]
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
			Files[i].clu == dp->obj.sclust &&
 8005476:	429a      	cmp	r2, r3
 8005478:	d006      	beq.n	8005488 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	3301      	adds	r3, #1
 800547e:	60fb      	str	r3, [r7, #12]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d9dc      	bls.n	8005440 <inc_lock+0x10>
 8005486:	e000      	b.n	800548a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005488:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2b02      	cmp	r3, #2
 800548e:	d132      	bne.n	80054f6 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005490:	2300      	movs	r3, #0
 8005492:	60fb      	str	r3, [r7, #12]
 8005494:	e002      	b.n	800549c <inc_lock+0x6c>
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3301      	adds	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d806      	bhi.n	80054b0 <inc_lock+0x80>
 80054a2:	4a29      	ldr	r2, [pc, #164]	@ (8005548 <inc_lock+0x118>)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	011b      	lsls	r3, r3, #4
 80054a8:	4413      	add	r3, r2
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d1f2      	bne.n	8005496 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d101      	bne.n	80054ba <inc_lock+0x8a>
 80054b6:	2300      	movs	r3, #0
 80054b8:	e040      	b.n	800553c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681a      	ldr	r2, [r3, #0]
 80054be:	4922      	ldr	r1, [pc, #136]	@ (8005548 <inc_lock+0x118>)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	011b      	lsls	r3, r3, #4
 80054c4:	440b      	add	r3, r1
 80054c6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	491e      	ldr	r1, [pc, #120]	@ (8005548 <inc_lock+0x118>)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	011b      	lsls	r3, r3, #4
 80054d2:	440b      	add	r3, r1
 80054d4:	3304      	adds	r3, #4
 80054d6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054dc:	491a      	ldr	r1, [pc, #104]	@ (8005548 <inc_lock+0x118>)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	011b      	lsls	r3, r3, #4
 80054e2:	440b      	add	r3, r1
 80054e4:	3308      	adds	r3, #8
 80054e6:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80054e8:	4a17      	ldr	r2, [pc, #92]	@ (8005548 <inc_lock+0x118>)
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	4413      	add	r3, r2
 80054f0:	330c      	adds	r3, #12
 80054f2:	2200      	movs	r2, #0
 80054f4:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d009      	beq.n	8005510 <inc_lock+0xe0>
 80054fc:	4a12      	ldr	r2, [pc, #72]	@ (8005548 <inc_lock+0x118>)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	4413      	add	r3, r2
 8005504:	330c      	adds	r3, #12
 8005506:	881b      	ldrh	r3, [r3, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d001      	beq.n	8005510 <inc_lock+0xe0>
 800550c:	2300      	movs	r3, #0
 800550e:	e015      	b.n	800553c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d108      	bne.n	8005528 <inc_lock+0xf8>
 8005516:	4a0c      	ldr	r2, [pc, #48]	@ (8005548 <inc_lock+0x118>)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	011b      	lsls	r3, r3, #4
 800551c:	4413      	add	r3, r2
 800551e:	330c      	adds	r3, #12
 8005520:	881b      	ldrh	r3, [r3, #0]
 8005522:	3301      	adds	r3, #1
 8005524:	b29a      	uxth	r2, r3
 8005526:	e001      	b.n	800552c <inc_lock+0xfc>
 8005528:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800552c:	4906      	ldr	r1, [pc, #24]	@ (8005548 <inc_lock+0x118>)
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	440b      	add	r3, r1
 8005534:	330c      	adds	r3, #12
 8005536:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	3301      	adds	r3, #1
}
 800553c:	4618      	mov	r0, r3
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr
 8005548:	20002660 	.word	0x20002660

0800554c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800554c:	b480      	push	{r7}
 800554e:	b085      	sub	sp, #20
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	3b01      	subs	r3, #1
 8005558:	607b      	str	r3, [r7, #4]
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d825      	bhi.n	80055ac <dec_lock+0x60>
		n = Files[i].ctr;
 8005560:	4a17      	ldr	r2, [pc, #92]	@ (80055c0 <dec_lock+0x74>)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	011b      	lsls	r3, r3, #4
 8005566:	4413      	add	r3, r2
 8005568:	330c      	adds	r3, #12
 800556a:	881b      	ldrh	r3, [r3, #0]
 800556c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800556e:	89fb      	ldrh	r3, [r7, #14]
 8005570:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005574:	d101      	bne.n	800557a <dec_lock+0x2e>
 8005576:	2300      	movs	r3, #0
 8005578:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800557a:	89fb      	ldrh	r3, [r7, #14]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d002      	beq.n	8005586 <dec_lock+0x3a>
 8005580:	89fb      	ldrh	r3, [r7, #14]
 8005582:	3b01      	subs	r3, #1
 8005584:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005586:	4a0e      	ldr	r2, [pc, #56]	@ (80055c0 <dec_lock+0x74>)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	011b      	lsls	r3, r3, #4
 800558c:	4413      	add	r3, r2
 800558e:	330c      	adds	r3, #12
 8005590:	89fa      	ldrh	r2, [r7, #14]
 8005592:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005594:	89fb      	ldrh	r3, [r7, #14]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <dec_lock+0x5a>
 800559a:	4a09      	ldr	r2, [pc, #36]	@ (80055c0 <dec_lock+0x74>)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	011b      	lsls	r3, r3, #4
 80055a0:	4413      	add	r3, r2
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	737b      	strb	r3, [r7, #13]
 80055aa:	e001      	b.n	80055b0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80055ac:	2302      	movs	r3, #2
 80055ae:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80055b0:	7b7b      	ldrb	r3, [r7, #13]
}
 80055b2:	4618      	mov	r0, r3
 80055b4:	3714      	adds	r7, #20
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20002660 	.word	0x20002660

080055c4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b085      	sub	sp, #20
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80055cc:	2300      	movs	r3, #0
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	e010      	b.n	80055f4 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80055d2:	4a0d      	ldr	r2, [pc, #52]	@ (8005608 <clear_lock+0x44>)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	011b      	lsls	r3, r3, #4
 80055d8:	4413      	add	r3, r2
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d105      	bne.n	80055ee <clear_lock+0x2a>
 80055e2:	4a09      	ldr	r2, [pc, #36]	@ (8005608 <clear_lock+0x44>)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	011b      	lsls	r3, r3, #4
 80055e8:	4413      	add	r3, r2
 80055ea:	2200      	movs	r2, #0
 80055ec:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	3301      	adds	r3, #1
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d9eb      	bls.n	80055d2 <clear_lock+0xe>
	}
}
 80055fa:	bf00      	nop
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	20002660 	.word	0x20002660

0800560c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b086      	sub	sp, #24
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	78db      	ldrb	r3, [r3, #3]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d034      	beq.n	800568a <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005624:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	7858      	ldrb	r0, [r3, #1]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005630:	2301      	movs	r3, #1
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	f7ff fbdc 	bl	8004df0 <disk_write>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d002      	beq.n	8005644 <sync_window+0x38>
			res = FR_DISK_ERR;
 800563e:	2301      	movs	r3, #1
 8005640:	73fb      	strb	r3, [r7, #15]
 8005642:	e022      	b.n	800568a <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005656:	429a      	cmp	r2, r3
 8005658:	d217      	bcs.n	800568a <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	789b      	ldrb	r3, [r3, #2]
 800565e:	613b      	str	r3, [r7, #16]
 8005660:	e010      	b.n	8005684 <sync_window+0x78>
					wsect += fs->fsize;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4413      	add	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	7858      	ldrb	r0, [r3, #1]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005676:	2301      	movs	r3, #1
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	f7ff fbb9 	bl	8004df0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	3b01      	subs	r3, #1
 8005682:	613b      	str	r3, [r7, #16]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d8eb      	bhi.n	8005662 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
}
 800568c:	4618      	mov	r0, r3
 800568e:	3718      	adds	r7, #24
 8005690:	46bd      	mov	sp, r7
 8005692:	bd80      	pop	{r7, pc}

08005694 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b084      	sub	sp, #16
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800569e:	2300      	movs	r3, #0
 80056a0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d01b      	beq.n	80056e4 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80056ac:	6878      	ldr	r0, [r7, #4]
 80056ae:	f7ff ffad 	bl	800560c <sync_window>
 80056b2:	4603      	mov	r3, r0
 80056b4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80056b6:	7bfb      	ldrb	r3, [r7, #15]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d113      	bne.n	80056e4 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	7858      	ldrb	r0, [r3, #1]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80056c6:	2301      	movs	r3, #1
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	f7ff fb71 	bl	8004db0 <disk_read>
 80056ce:	4603      	mov	r3, r0
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d004      	beq.n	80056de <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80056d4:	f04f 33ff 	mov.w	r3, #4294967295
 80056d8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	683a      	ldr	r2, [r7, #0]
 80056e2:	639a      	str	r2, [r3, #56]	@ 0x38
		}
	}
	return res;
 80056e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3710      	adds	r7, #16
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
	...

080056f0 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f7ff ff87 	bl	800560c <sync_window>
 80056fe:	4603      	mov	r3, r0
 8005700:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005702:	7bfb      	ldrb	r3, [r7, #15]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d159      	bne.n	80057bc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	781b      	ldrb	r3, [r3, #0]
 800570c:	2b03      	cmp	r3, #3
 800570e:	d149      	bne.n	80057a4 <sync_fs+0xb4>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	791b      	ldrb	r3, [r3, #4]
 8005714:	2b01      	cmp	r3, #1
 8005716:	d145      	bne.n	80057a4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	899b      	ldrh	r3, [r3, #12]
 8005722:	461a      	mov	r2, r3
 8005724:	2100      	movs	r1, #0
 8005726:	f7ff fda8 	bl	800527a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	333c      	adds	r3, #60	@ 0x3c
 800572e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005732:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8005736:	4618      	mov	r0, r3
 8005738:	f7ff fcaf 	bl	800509a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	333c      	adds	r3, #60	@ 0x3c
 8005740:	4921      	ldr	r1, [pc, #132]	@ (80057c8 <sync_fs+0xd8>)
 8005742:	4618      	mov	r0, r3
 8005744:	f7ff fcc4 	bl	80050d0 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	333c      	adds	r3, #60	@ 0x3c
 800574c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005750:	491e      	ldr	r1, [pc, #120]	@ (80057cc <sync_fs+0xdc>)
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff fcbc 	bl	80050d0 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	333c      	adds	r3, #60	@ 0x3c
 800575c:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	69db      	ldr	r3, [r3, #28]
 8005764:	4619      	mov	r1, r3
 8005766:	4610      	mov	r0, r2
 8005768:	f7ff fcb2 	bl	80050d0 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	333c      	adds	r3, #60	@ 0x3c
 8005770:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	699b      	ldr	r3, [r3, #24]
 8005778:	4619      	mov	r1, r3
 800577a:	4610      	mov	r0, r2
 800577c:	f7ff fca8 	bl	80050d0 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005784:	1c5a      	adds	r2, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	7858      	ldrb	r0, [r3, #1]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005798:	2301      	movs	r3, #1
 800579a:	f7ff fb29 	bl	8004df0 <disk_write>
			fs->fsi_flag = 0;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	785b      	ldrb	r3, [r3, #1]
 80057a8:	2200      	movs	r2, #0
 80057aa:	2100      	movs	r1, #0
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7ff fb3f 	bl	8004e30 <disk_ioctl>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <sync_fs+0xcc>
 80057b8:	2301      	movs	r3, #1
 80057ba:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80057bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	41615252 	.word	0x41615252
 80057cc:	61417272 	.word	0x61417272

080057d0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
 80057d8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	3b02      	subs	r3, #2
 80057de:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a1b      	ldr	r3, [r3, #32]
 80057e4:	3b02      	subs	r3, #2
 80057e6:	683a      	ldr	r2, [r7, #0]
 80057e8:	429a      	cmp	r2, r3
 80057ea:	d301      	bcc.n	80057f0 <clust2sect+0x20>
 80057ec:	2300      	movs	r3, #0
 80057ee:	e008      	b.n	8005802 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	895b      	ldrh	r3, [r3, #10]
 80057f4:	461a      	mov	r2, r3
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	fb03 f202 	mul.w	r2, r3, r2
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005800:	4413      	add	r3, r2
}
 8005802:	4618      	mov	r0, r3
 8005804:	370c      	adds	r7, #12
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr
	...

08005810 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005810:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005814:	b088      	sub	sp, #32
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
 800581a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d904      	bls.n	8005832 <get_fat+0x22>
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	6a1b      	ldr	r3, [r3, #32]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	429a      	cmp	r2, r3
 8005830:	d302      	bcc.n	8005838 <get_fat+0x28>
		val = 1;	/* Internal error */
 8005832:	2301      	movs	r3, #1
 8005834:	61fb      	str	r3, [r7, #28]
 8005836:	e139      	b.n	8005aac <get_fat+0x29c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005838:	f04f 33ff 	mov.w	r3, #4294967295
 800583c:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 800583e:	69bb      	ldr	r3, [r7, #24]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	3b01      	subs	r3, #1
 8005844:	2b03      	cmp	r3, #3
 8005846:	f200 8125 	bhi.w	8005a94 <get_fat+0x284>
 800584a:	a201      	add	r2, pc, #4	@ (adr r2, 8005850 <get_fat+0x40>)
 800584c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005850:	08005861 	.word	0x08005861
 8005854:	0800590d 	.word	0x0800590d
 8005858:	08005959 	.word	0x08005959
 800585c:	080059a9 	.word	0x080059a9
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	085b      	lsrs	r3, r3, #1
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4413      	add	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	899b      	ldrh	r3, [r3, #12]
 8005876:	4619      	mov	r1, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	fbb3 f3f1 	udiv	r3, r3, r1
 800587e:	4413      	add	r3, r2
 8005880:	4619      	mov	r1, r3
 8005882:	69b8      	ldr	r0, [r7, #24]
 8005884:	f7ff ff06 	bl	8005694 <move_window>
 8005888:	4603      	mov	r3, r0
 800588a:	2b00      	cmp	r3, #0
 800588c:	f040 8105 	bne.w	8005a9a <get_fat+0x28a>
			wc = fs->win[bc++ % SS(fs)];
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	60fa      	str	r2, [r7, #12]
 8005896:	69ba      	ldr	r2, [r7, #24]
 8005898:	8992      	ldrh	r2, [r2, #12]
 800589a:	fbb3 f1f2 	udiv	r1, r3, r2
 800589e:	fb01 f202 	mul.w	r2, r1, r2
 80058a2:	1a9b      	subs	r3, r3, r2
 80058a4:	69ba      	ldr	r2, [r7, #24]
 80058a6:	4413      	add	r3, r2
 80058a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ac:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80058ae:	69bb      	ldr	r3, [r7, #24]
 80058b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	899b      	ldrh	r3, [r3, #12]
 80058b6:	4619      	mov	r1, r3
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80058be:	4413      	add	r3, r2
 80058c0:	4619      	mov	r1, r3
 80058c2:	69b8      	ldr	r0, [r7, #24]
 80058c4:	f7ff fee6 	bl	8005694 <move_window>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f040 80e7 	bne.w	8005a9e <get_fat+0x28e>
			wc |= fs->win[bc % SS(fs)] << 8;
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	899b      	ldrh	r3, [r3, #12]
 80058d4:	461a      	mov	r2, r3
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80058dc:	fb01 f202 	mul.w	r2, r1, r2
 80058e0:	1a9b      	subs	r3, r3, r2
 80058e2:	69ba      	ldr	r2, [r7, #24]
 80058e4:	4413      	add	r3, r2
 80058e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	68ba      	ldr	r2, [r7, #8]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	f003 0301 	and.w	r3, r3, #1
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d002      	beq.n	8005902 <get_fat+0xf2>
 80058fc:	68bb      	ldr	r3, [r7, #8]
 80058fe:	091b      	lsrs	r3, r3, #4
 8005900:	e002      	b.n	8005908 <get_fat+0xf8>
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005908:	61fb      	str	r3, [r7, #28]
			break;
 800590a:	e0cf      	b.n	8005aac <get_fat+0x29c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800590c:	69bb      	ldr	r3, [r7, #24]
 800590e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	899b      	ldrh	r3, [r3, #12]
 8005914:	085b      	lsrs	r3, r3, #1
 8005916:	b29b      	uxth	r3, r3
 8005918:	4619      	mov	r1, r3
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005920:	4413      	add	r3, r2
 8005922:	4619      	mov	r1, r3
 8005924:	69b8      	ldr	r0, [r7, #24]
 8005926:	f7ff feb5 	bl	8005694 <move_window>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	f040 80b8 	bne.w	8005aa2 <get_fat+0x292>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	005b      	lsls	r3, r3, #1
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	8992      	ldrh	r2, [r2, #12]
 8005940:	fbb3 f0f2 	udiv	r0, r3, r2
 8005944:	fb00 f202 	mul.w	r2, r0, r2
 8005948:	1a9b      	subs	r3, r3, r2
 800594a:	440b      	add	r3, r1
 800594c:	4618      	mov	r0, r3
 800594e:	f7ff fa8d 	bl	8004e6c <ld_word>
 8005952:	4603      	mov	r3, r0
 8005954:	61fb      	str	r3, [r7, #28]
			break;
 8005956:	e0a9      	b.n	8005aac <get_fat+0x29c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	899b      	ldrh	r3, [r3, #12]
 8005960:	089b      	lsrs	r3, r3, #2
 8005962:	b29b      	uxth	r3, r3
 8005964:	4619      	mov	r1, r3
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	fbb3 f3f1 	udiv	r3, r3, r1
 800596c:	4413      	add	r3, r2
 800596e:	4619      	mov	r1, r3
 8005970:	69b8      	ldr	r0, [r7, #24]
 8005972:	f7ff fe8f 	bl	8005694 <move_window>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	f040 8094 	bne.w	8005aa6 <get_fat+0x296>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	69ba      	ldr	r2, [r7, #24]
 800598a:	8992      	ldrh	r2, [r2, #12]
 800598c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005990:	fb00 f202 	mul.w	r2, r0, r2
 8005994:	1a9b      	subs	r3, r3, r2
 8005996:	440b      	add	r3, r1
 8005998:	4618      	mov	r0, r3
 800599a:	f7ff fa80 	bl	8004e9e <ld_dword>
 800599e:	4603      	mov	r3, r0
 80059a0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80059a4:	61fb      	str	r3, [r7, #28]
			break;
 80059a6:	e081      	b.n	8005aac <get_fat+0x29c>
#if _FS_EXFAT
		case FS_EXFAT :
			if (obj->objsize) {
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	d070      	beq.n	8005a94 <get_fat+0x284>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	1ad3      	subs	r3, r2, r3
 80059ba:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((obj->objsize - 1) / SS(fs)) / fs->csize;	/* Number of clusters - 1 */
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80059c2:	1e54      	subs	r4, r2, #1
 80059c4:	f143 35ff 	adc.w	r5, r3, #4294967295
 80059c8:	69bb      	ldr	r3, [r7, #24]
 80059ca:	899b      	ldrh	r3, [r3, #12]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	2200      	movs	r2, #0
 80059d0:	4698      	mov	r8, r3
 80059d2:	4691      	mov	r9, r2
 80059d4:	4642      	mov	r2, r8
 80059d6:	464b      	mov	r3, r9
 80059d8:	4620      	mov	r0, r4
 80059da:	4629      	mov	r1, r5
 80059dc:	f7fa ff56 	bl	800088c <__aeabi_uldivmod>
 80059e0:	4602      	mov	r2, r0
 80059e2:	460b      	mov	r3, r1
 80059e4:	69bb      	ldr	r3, [r7, #24]
 80059e6:	895b      	ldrh	r3, [r3, #10]
 80059e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ec:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2) {	/* Is there no valid chain on the FAT? */
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	79db      	ldrb	r3, [r3, #7]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d10e      	bne.n	8005a14 <get_fat+0x204>
					if (cofs <= clen) {
 80059f6:	697a      	ldr	r2, [r7, #20]
 80059f8:	693b      	ldr	r3, [r7, #16]
 80059fa:	429a      	cmp	r2, r3
 80059fc:	d80a      	bhi.n	8005a14 <get_fat+0x204>
						val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* Generate the value */
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	429a      	cmp	r2, r3
 8005a04:	d002      	beq.n	8005a0c <get_fat+0x1fc>
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	3301      	adds	r3, #1
 8005a0a:	e001      	b.n	8005a10 <get_fat+0x200>
 8005a0c:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005a10:	61fb      	str	r3, [r7, #28]
						break;
 8005a12:	e04b      	b.n	8005aac <get_fat+0x29c>
					}
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	79db      	ldrb	r3, [r3, #7]
 8005a18:	2b03      	cmp	r3, #3
 8005a1a:	d108      	bne.n	8005a2e <get_fat+0x21e>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	699b      	ldr	r3, [r3, #24]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	429a      	cmp	r2, r3
 8005a24:	d203      	bcs.n	8005a2e <get_fat+0x21e>
					val = clst + 1; 	/* Generate the value */
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	3301      	adds	r3, #1
 8005a2a:	61fb      	str	r3, [r7, #28]
					break;
 8005a2c:	e03e      	b.n	8005aac <get_fat+0x29c>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	79db      	ldrb	r3, [r3, #7]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d02e      	beq.n	8005a94 <get_fat+0x284>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <get_fat+0x236>
						val = 0x7FFFFFFF;	/* Generate EOC */
 8005a3e:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8005a42:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 8005a44:	e032      	b.n	8005aac <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	899b      	ldrh	r3, [r3, #12]
 8005a4e:	089b      	lsrs	r3, r3, #2
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	4619      	mov	r1, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	fbb3 f3f1 	udiv	r3, r3, r1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	4619      	mov	r1, r3
 8005a5e:	69b8      	ldr	r0, [r7, #24]
 8005a60:	f7ff fe18 	bl	8005694 <move_window>
 8005a64:	4603      	mov	r3, r0
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d11f      	bne.n	8005aaa <get_fat+0x29a>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	69ba      	ldr	r2, [r7, #24]
 8005a76:	8992      	ldrh	r2, [r2, #12]
 8005a78:	fbb3 f0f2 	udiv	r0, r3, r2
 8005a7c:	fb00 f202 	mul.w	r2, r0, r2
 8005a80:	1a9b      	subs	r3, r3, r2
 8005a82:	440b      	add	r3, r1
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fa0a 	bl	8004e9e <ld_dword>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005a90:	61fb      	str	r3, [r7, #28]
					break;
 8005a92:	e00b      	b.n	8005aac <get_fat+0x29c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8005a94:	2301      	movs	r3, #1
 8005a96:	61fb      	str	r3, [r7, #28]
 8005a98:	e008      	b.n	8005aac <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a9a:	bf00      	nop
 8005a9c:	e006      	b.n	8005aac <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005a9e:	bf00      	nop
 8005aa0:	e004      	b.n	8005aac <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005aa2:	bf00      	nop
 8005aa4:	e002      	b.n	8005aac <get_fat+0x29c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005aa6:	bf00      	nop
 8005aa8:	e000      	b.n	8005aac <get_fat+0x29c>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005aaa:	bf00      	nop
		}
	}

	return val;
 8005aac:	69fb      	ldr	r3, [r7, #28]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3720      	adds	r7, #32
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005ab8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8005ab8:	b590      	push	{r4, r7, lr}
 8005aba:	b089      	sub	sp, #36	@ 0x24
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	f240 810d 	bls.w	8005cea <put_fat+0x232>
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	6a1b      	ldr	r3, [r3, #32]
 8005ad4:	68ba      	ldr	r2, [r7, #8]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	f080 8107 	bcs.w	8005cea <put_fat+0x232>
		switch (fs->fs_type) {
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b04      	cmp	r3, #4
 8005ae2:	f300 8102 	bgt.w	8005cea <put_fat+0x232>
 8005ae6:	2b03      	cmp	r3, #3
 8005ae8:	f280 80b3 	bge.w	8005c52 <put_fat+0x19a>
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d003      	beq.n	8005af8 <put_fat+0x40>
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	f000 8083 	beq.w	8005bfc <put_fat+0x144>
 8005af6:	e0f8      	b.n	8005cea <put_fat+0x232>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	61bb      	str	r3, [r7, #24]
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	085b      	lsrs	r3, r3, #1
 8005b00:	69ba      	ldr	r2, [r7, #24]
 8005b02:	4413      	add	r3, r2
 8005b04:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	899b      	ldrh	r3, [r3, #12]
 8005b0e:	4619      	mov	r1, r3
 8005b10:	69bb      	ldr	r3, [r7, #24]
 8005b12:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b16:	4413      	add	r3, r2
 8005b18:	4619      	mov	r1, r3
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff fdba 	bl	8005694 <move_window>
 8005b20:	4603      	mov	r3, r0
 8005b22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b24:	7ffb      	ldrb	r3, [r7, #31]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f040 80d8 	bne.w	8005cdc <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	1c5a      	adds	r2, r3, #1
 8005b36:	61ba      	str	r2, [r7, #24]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	8992      	ldrh	r2, [r2, #12]
 8005b3c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b40:	fb00 f202 	mul.w	r2, r0, r2
 8005b44:	1a9b      	subs	r3, r3, r2
 8005b46:	440b      	add	r3, r1
 8005b48:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005b4a:	68bb      	ldr	r3, [r7, #8]
 8005b4c:	f003 0301 	and.w	r3, r3, #1
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00d      	beq.n	8005b70 <put_fat+0xb8>
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	f003 030f 	and.w	r3, r3, #15
 8005b5e:	b25a      	sxtb	r2, r3
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	b25b      	sxtb	r3, r3
 8005b64:	011b      	lsls	r3, r3, #4
 8005b66:	b25b      	sxtb	r3, r3
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	b25b      	sxtb	r3, r3
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	e001      	b.n	8005b74 <put_fat+0xbc>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	b2db      	uxtb	r3, r3
 8005b74:	697a      	ldr	r2, [r7, #20]
 8005b76:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	899b      	ldrh	r3, [r3, #12]
 8005b86:	4619      	mov	r1, r3
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8005b8e:	4413      	add	r3, r2
 8005b90:	4619      	mov	r1, r3
 8005b92:	68f8      	ldr	r0, [r7, #12]
 8005b94:	f7ff fd7e 	bl	8005694 <move_window>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005b9c:	7ffb      	ldrb	r3, [r7, #31]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	f040 809e 	bne.w	8005ce0 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	899b      	ldrh	r3, [r3, #12]
 8005bae:	461a      	mov	r2, r3
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	fbb3 f0f2 	udiv	r0, r3, r2
 8005bb6:	fb00 f202 	mul.w	r2, r0, r2
 8005bba:	1a9b      	subs	r3, r3, r2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	f003 0301 	and.w	r3, r3, #1
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d003      	beq.n	8005bd2 <put_fat+0x11a>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	091b      	lsrs	r3, r3, #4
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	e00e      	b.n	8005bf0 <put_fat+0x138>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	b25b      	sxtb	r3, r3
 8005bd8:	f023 030f 	bic.w	r3, r3, #15
 8005bdc:	b25a      	sxtb	r2, r3
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	0a1b      	lsrs	r3, r3, #8
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	f003 030f 	and.w	r3, r3, #15
 8005be8:	b25b      	sxtb	r3, r3
 8005bea:	4313      	orrs	r3, r2
 8005bec:	b25b      	sxtb	r3, r3
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	70da      	strb	r2, [r3, #3]
			break;
 8005bfa:	e076      	b.n	8005cea <put_fat+0x232>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	899b      	ldrh	r3, [r3, #12]
 8005c04:	085b      	lsrs	r3, r3, #1
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	4619      	mov	r1, r3
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c10:	4413      	add	r3, r2
 8005c12:	4619      	mov	r1, r3
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f7ff fd3d 	bl	8005694 <move_window>
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c1e:	7ffb      	ldrb	r3, [r7, #31]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d15f      	bne.n	8005ce4 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005c2a:	68bb      	ldr	r3, [r7, #8]
 8005c2c:	005b      	lsls	r3, r3, #1
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	8992      	ldrh	r2, [r2, #12]
 8005c32:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c36:	fb00 f202 	mul.w	r2, r0, r2
 8005c3a:	1a9b      	subs	r3, r3, r2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	b292      	uxth	r2, r2
 8005c42:	4611      	mov	r1, r2
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff fa28 	bl	800509a <st_word>
			fs->wflag = 1;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	70da      	strb	r2, [r3, #3]
			break;
 8005c50:	e04b      	b.n	8005cea <put_fat+0x232>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	899b      	ldrh	r3, [r3, #12]
 8005c5a:	089b      	lsrs	r3, r3, #2
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	4619      	mov	r1, r3
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8005c66:	4413      	add	r3, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f7ff fd12 	bl	8005694 <move_window>
 8005c70:	4603      	mov	r3, r0
 8005c72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005c74:	7ffb      	ldrb	r3, [r7, #31]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d136      	bne.n	8005ce8 <put_fat+0x230>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	2b04      	cmp	r3, #4
 8005c80:	d017      	beq.n	8005cb2 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	8992      	ldrh	r2, [r2, #12]
 8005c96:	fbb3 f0f2 	udiv	r0, r3, r2
 8005c9a:	fb00 f202 	mul.w	r2, r0, r2
 8005c9e:	1a9b      	subs	r3, r3, r2
 8005ca0:	440b      	add	r3, r1
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f7ff f8fb 	bl	8004e9e <ld_dword>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8005cae:	4323      	orrs	r3, r4
 8005cb0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	8992      	ldrh	r2, [r2, #12]
 8005cc0:	fbb3 f0f2 	udiv	r0, r3, r2
 8005cc4:	fb00 f202 	mul.w	r2, r0, r2
 8005cc8:	1a9b      	subs	r3, r3, r2
 8005cca:	440b      	add	r3, r1
 8005ccc:	6879      	ldr	r1, [r7, #4]
 8005cce:	4618      	mov	r0, r3
 8005cd0:	f7ff f9fe 	bl	80050d0 <st_dword>
			fs->wflag = 1;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	70da      	strb	r2, [r3, #3]
			break;
 8005cda:	e006      	b.n	8005cea <put_fat+0x232>
			if (res != FR_OK) break;
 8005cdc:	bf00      	nop
 8005cde:	e004      	b.n	8005cea <put_fat+0x232>
			if (res != FR_OK) break;
 8005ce0:	bf00      	nop
 8005ce2:	e002      	b.n	8005cea <put_fat+0x232>
			if (res != FR_OK) break;
 8005ce4:	bf00      	nop
 8005ce6:	e000      	b.n	8005cea <put_fat+0x232>
			if (res != FR_OK) break;
 8005ce8:	bf00      	nop
		}
	}
	return res;
 8005cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	3724      	adds	r7, #36	@ 0x24
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	bd90      	pop	{r4, r7, pc}

08005cf4 <find_bitmap>:
DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b08a      	sub	sp, #40	@ 0x28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	60b9      	str	r1, [r7, #8]
 8005cfe:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	3b02      	subs	r3, #2
 8005d04:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6a1b      	ldr	r3, [r3, #32]
 8005d0a:	3b02      	subs	r3, #2
 8005d0c:	68ba      	ldr	r2, [r7, #8]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d301      	bcc.n	8005d16 <find_bitmap+0x22>
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8005d16:	68bb      	ldr	r3, [r7, #8]
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	61bb      	str	r3, [r7, #24]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	08db      	lsrs	r3, r3, #3
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	8989      	ldrh	r1, [r1, #12]
 8005d2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8005d32:	4413      	add	r3, r2
 8005d34:	4619      	mov	r1, r3
 8005d36:	68f8      	ldr	r0, [r7, #12]
 8005d38:	f7ff fcac 	bl	8005694 <move_window>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <find_bitmap+0x54>
 8005d42:	f04f 33ff 	mov.w	r3, #4294967295
 8005d46:	e058      	b.n	8005dfa <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	08db      	lsrs	r3, r3, #3
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	8992      	ldrh	r2, [r2, #12]
 8005d50:	fbb3 f1f2 	udiv	r1, r3, r2
 8005d54:	fb01 f202 	mul.w	r2, r1, r2
 8005d58:	1a9b      	subs	r3, r3, r2
 8005d5a:	623b      	str	r3, [r7, #32]
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f003 0307 	and.w	r3, r3, #7
 8005d62:	2201      	movs	r2, #1
 8005d64:	fa02 f303 	lsl.w	r3, r2, r3
 8005d68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	6a3b      	ldr	r3, [r7, #32]
 8005d70:	4413      	add	r3, r2
 8005d72:	333c      	adds	r3, #60	@ 0x3c
 8005d74:	781a      	ldrb	r2, [r3, #0]
 8005d76:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d7a:	4013      	ands	r3, r2
 8005d7c:	74fb      	strb	r3, [r7, #19]
 8005d7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005d82:	005b      	lsls	r3, r3, #1
 8005d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	3b02      	subs	r3, #2
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d307      	bcc.n	8005daa <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	899b      	ldrh	r3, [r3, #12]
 8005da8:	623b      	str	r3, [r7, #32]
				}
				if (!bv) {	/* Is it a free cluster? */
 8005daa:	7cfb      	ldrb	r3, [r7, #19]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d109      	bne.n	8005dc4 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	3301      	adds	r3, #1
 8005db4:	617b      	str	r3, [r7, #20]
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d106      	bne.n	8005dcc <find_bitmap+0xd8>
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	3302      	adds	r3, #2
 8005dc2:	e01a      	b.n	8005dfa <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d101      	bne.n	8005dd8 <find_bitmap+0xe4>
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	e010      	b.n	8005dfa <find_bitmap+0x106>
			} while (bm);
 8005dd8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1c5      	bne.n	8005d6c <find_bitmap+0x78>
			bm = 1;
 8005de0:	2301      	movs	r3, #1
 8005de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8005de6:	6a3b      	ldr	r3, [r7, #32]
 8005de8:	3301      	adds	r3, #1
 8005dea:	623b      	str	r3, [r7, #32]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	899b      	ldrh	r3, [r3, #12]
 8005df0:	461a      	mov	r2, r3
 8005df2:	6a3b      	ldr	r3, [r7, #32]
 8005df4:	4293      	cmp	r3, r2
 8005df6:	d3b9      	bcc.n	8005d6c <find_bitmap+0x78>
		if (move_window(fs, fs->database + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;	/* (assuming bitmap is located top of the cluster heap) */
 8005df8:	e793      	b.n	8005d22 <find_bitmap+0x2e>
	}
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3728      	adds	r7, #40	@ 0x28
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <change_bitmap>:
	FATFS* fs,	/* File system object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b088      	sub	sp, #32
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	60f8      	str	r0, [r7, #12]
 8005e0a:	60b9      	str	r1, [r7, #8]
 8005e0c:	607a      	str	r2, [r7, #4]
 8005e0e:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	DWORD sect;

	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3b02      	subs	r3, #2
 8005e14:	60bb      	str	r3, [r7, #8]
	sect = fs->database + clst / 8 / SS(fs);	/* Sector address (assuming bitmap is located top of the cluster heap) */
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	08db      	lsrs	r3, r3, #3
 8005e1e:	68f9      	ldr	r1, [r7, #12]
 8005e20:	8989      	ldrh	r1, [r1, #12]
 8005e22:	fbb3 f3f1 	udiv	r3, r3, r1
 8005e26:	4413      	add	r3, r2
 8005e28:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);						/* Byte offset in the sector */
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	08db      	lsrs	r3, r3, #3
 8005e2e:	68fa      	ldr	r2, [r7, #12]
 8005e30:	8992      	ldrh	r2, [r2, #12]
 8005e32:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e36:	fb01 f202 	mul.w	r2, r1, r2
 8005e3a:	1a9b      	subs	r3, r3, r2
 8005e3c:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);						/* Bit mask in the byte */
 8005e3e:	68bb      	ldr	r3, [r7, #8]
 8005e40:	f003 0307 	and.w	r3, r3, #7
 8005e44:	2201      	movs	r2, #1
 8005e46:	fa02 f303 	lsl.w	r3, r2, r3
 8005e4a:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005e4c:	697b      	ldr	r3, [r7, #20]
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	617a      	str	r2, [r7, #20]
 8005e52:	4619      	mov	r1, r3
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f7ff fc1d 	bl	8005694 <move_window>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d001      	beq.n	8005e64 <change_bitmap+0x62>
 8005e60:	2301      	movs	r3, #1
 8005e62:	e03f      	b.n	8005ee4 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	69bb      	ldr	r3, [r7, #24]
 8005e68:	4413      	add	r3, r2
 8005e6a:	333c      	adds	r3, #60	@ 0x3c
 8005e6c:	781a      	ldrb	r2, [r3, #0]
 8005e6e:	7ffb      	ldrb	r3, [r7, #31]
 8005e70:	4013      	ands	r3, r2
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	bf14      	ite	ne
 8005e78:	2301      	movne	r3, #1
 8005e7a:	2300      	moveq	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d101      	bne.n	8005e8a <change_bitmap+0x88>
 8005e86:	2302      	movs	r3, #2
 8005e88:	e02c      	b.n	8005ee4 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	69bb      	ldr	r3, [r7, #24]
 8005e8e:	4413      	add	r3, r2
 8005e90:	333c      	adds	r3, #60	@ 0x3c
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	7ffb      	ldrb	r3, [r7, #31]
 8005e96:	4053      	eors	r3, r2
 8005e98:	b2d9      	uxtb	r1, r3
 8005e9a:	68fa      	ldr	r2, [r7, #12]
 8005e9c:	69bb      	ldr	r3, [r7, #24]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	333c      	adds	r3, #60	@ 0x3c
 8005ea2:	460a      	mov	r2, r1
 8005ea4:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	70da      	strb	r2, [r3, #3]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	3b01      	subs	r3, #1
 8005eb0:	607b      	str	r3, [r7, #4]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d101      	bne.n	8005ebc <change_bitmap+0xba>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	e013      	b.n	8005ee4 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8005ebc:	7ffb      	ldrb	r3, [r7, #31]
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	7ffb      	ldrb	r3, [r7, #31]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d1cd      	bne.n	8005e64 <change_bitmap+0x62>
			bm = 1;
 8005ec8:	2301      	movs	r3, #1
 8005eca:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8005ecc:	69bb      	ldr	r3, [r7, #24]
 8005ece:	3301      	adds	r3, #1
 8005ed0:	61bb      	str	r3, [r7, #24]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	899b      	ldrh	r3, [r3, #12]
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d3c2      	bcc.n	8005e64 <change_bitmap+0x62>
		i = 0;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8005ee2:	e7b3      	b.n	8005e4c <change_bitmap+0x4a>
	}
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3720      	adds	r7, #32
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <fill_first_frag>:

static
FRESULT fill_first_frag (
	_FDID* obj	/* Pointer to the corresponding object */
)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;

	if (obj->stat == 3) {	/* Has the object been changed 'fragmented'? */
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	79db      	ldrb	r3, [r3, #7]
 8005ef8:	2b03      	cmp	r3, #3
 8005efa:	d121      	bne.n	8005f40 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	617b      	str	r3, [r7, #20]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	613b      	str	r3, [r7, #16]
 8005f08:	e014      	b.n	8005f34 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6818      	ldr	r0, [r3, #0]
 8005f0e:	697b      	ldr	r3, [r7, #20]
 8005f10:	3301      	adds	r3, #1
 8005f12:	461a      	mov	r2, r3
 8005f14:	6979      	ldr	r1, [r7, #20]
 8005f16:	f7ff fdcf 	bl	8005ab8 <put_fat>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8005f1e:	7bfb      	ldrb	r3, [r7, #15]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <fill_first_frag+0x3c>
 8005f24:	7bfb      	ldrb	r3, [r7, #15]
 8005f26:	e00c      	b.n	8005f42 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	617b      	str	r3, [r7, #20]
 8005f2e:	693b      	ldr	r3, [r7, #16]
 8005f30:	3b01      	subs	r3, #1
 8005f32:	613b      	str	r3, [r7, #16]
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d1e7      	bne.n	8005f0a <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <fill_last_frag>:
FRESULT fill_last_frag (
	_FDID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,	/* Last cluster of the fragment */
	DWORD term	/* Value to set the last FAT entry */
)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b086      	sub	sp, #24
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	60f8      	str	r0, [r7, #12]
 8005f52:	60b9      	str	r1, [r7, #8]
 8005f54:	607a      	str	r2, [r7, #4]
	FRESULT res;

	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005f56:	e020      	b.n	8005f9a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6818      	ldr	r0, [r3, #0]
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	69db      	ldr	r3, [r3, #28]
 8005f60:	68ba      	ldr	r2, [r7, #8]
 8005f62:	1ad3      	subs	r3, r2, r3
 8005f64:	1c59      	adds	r1, r3, #1
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	69db      	ldr	r3, [r3, #28]
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d905      	bls.n	8005f7a <fill_last_frag+0x30>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	69db      	ldr	r3, [r3, #28]
 8005f72:	68ba      	ldr	r2, [r7, #8]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	3302      	adds	r3, #2
 8005f78:	e000      	b.n	8005f7c <fill_last_frag+0x32>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	f7ff fd9b 	bl	8005ab8 <put_fat>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d001      	beq.n	8005f90 <fill_last_frag+0x46>
 8005f8c:	7dfb      	ldrb	r3, [r7, #23]
 8005f8e:	e009      	b.n	8005fa4 <fill_last_frag+0x5a>
		obj->n_frag--;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	1e5a      	subs	r2, r3, #1
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the last chain on the FAT */
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1da      	bne.n	8005f58 <fill_last_frag+0xe>
	}
	return FR_OK;
 8005fa2:	2300      	movs	r3, #0
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3718      	adds	r7, #24
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}

08005fac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b08a      	sub	sp, #40	@ 0x28
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	61bb      	str	r3, [r7, #24]
#if _FS_EXFAT || _USE_TRIM
	DWORD scl = clst, ecl = clst;
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	623b      	str	r3, [r7, #32]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d904      	bls.n	8005fda <remove_chain+0x2e>
 8005fd0:	69bb      	ldr	r3, [r7, #24]
 8005fd2:	6a1b      	ldr	r3, [r3, #32]
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d301      	bcc.n	8005fde <remove_chain+0x32>
 8005fda:	2302      	movs	r3, #2
 8005fdc:	e096      	b.n	800610c <remove_chain+0x160>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d014      	beq.n	800600e <remove_chain+0x62>
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b04      	cmp	r3, #4
 8005fea:	d103      	bne.n	8005ff4 <remove_chain+0x48>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	79db      	ldrb	r3, [r3, #7]
 8005ff0:	2b02      	cmp	r3, #2
 8005ff2:	d00c      	beq.n	800600e <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8005ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	69b8      	ldr	r0, [r7, #24]
 8005ffc:	f7ff fd5c 	bl	8005ab8 <put_fat>
 8006000:	4603      	mov	r3, r0
 8006002:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006004:	7ffb      	ldrb	r3, [r7, #31]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d001      	beq.n	800600e <remove_chain+0x62>
 800600a:	7ffb      	ldrb	r3, [r7, #31]
 800600c:	e07e      	b.n	800610c <remove_chain+0x160>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800600e:	68b9      	ldr	r1, [r7, #8]
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fbfd 	bl	8005810 <get_fat>
 8006016:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d055      	beq.n	80060ca <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <remove_chain+0x7c>
 8006024:	2302      	movs	r3, #2
 8006026:	e071      	b.n	800610c <remove_chain+0x160>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602e:	d101      	bne.n	8006034 <remove_chain+0x88>
 8006030:	2301      	movs	r3, #1
 8006032:	e06b      	b.n	800610c <remove_chain+0x160>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8006034:	69bb      	ldr	r3, [r7, #24]
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	2b04      	cmp	r3, #4
 800603a:	d00b      	beq.n	8006054 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800603c:	2200      	movs	r2, #0
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	69b8      	ldr	r0, [r7, #24]
 8006042:	f7ff fd39 	bl	8005ab8 <put_fat>
 8006046:	4603      	mov	r3, r0
 8006048:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800604a:	7ffb      	ldrb	r3, [r7, #31]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d001      	beq.n	8006054 <remove_chain+0xa8>
 8006050:	7ffb      	ldrb	r3, [r7, #31]
 8006052:	e05b      	b.n	800610c <remove_chain+0x160>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8006054:	69bb      	ldr	r3, [r7, #24]
 8006056:	69da      	ldr	r2, [r3, #28]
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	6a1b      	ldr	r3, [r3, #32]
 800605c:	3b02      	subs	r3, #2
 800605e:	429a      	cmp	r2, r3
 8006060:	d20b      	bcs.n	800607a <remove_chain+0xce>
			fs->free_clst++;
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	69bb      	ldr	r3, [r7, #24]
 800606a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	791b      	ldrb	r3, [r3, #4]
 8006070:	f043 0301 	orr.w	r3, r3, #1
 8006074:	b2da      	uxtb	r2, r3
 8006076:	69bb      	ldr	r3, [r7, #24]
 8006078:	711a      	strb	r2, [r3, #4]
		}
#if _FS_EXFAT || _USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	3301      	adds	r3, #1
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	429a      	cmp	r2, r3
 8006082:	d102      	bne.n	800608a <remove_chain+0xde>
			ecl = nxt;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	623b      	str	r3, [r7, #32]
 8006088:	e017      	b.n	80060ba <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	2b04      	cmp	r3, #4
 8006090:	d10f      	bne.n	80060b2 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8006092:	6a3a      	ldr	r2, [r7, #32]
 8006094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	1c5a      	adds	r2, r3, #1
 800609a:	2300      	movs	r3, #0
 800609c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800609e:	69b8      	ldr	r0, [r7, #24]
 80060a0:	f7ff feaf 	bl	8005e02 <change_bitmap>
 80060a4:	4603      	mov	r3, r0
 80060a6:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 80060a8:	7ffb      	ldrb	r3, [r7, #31]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d001      	beq.n	80060b2 <remove_chain+0x106>
 80060ae:	7ffb      	ldrb	r3, [r7, #31]
 80060b0:	e02c      	b.n	800610c <remove_chain+0x160>
#if _USE_TRIM
			rt[0] = clust2sect(fs, scl);					/* Start sector */
			rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	623b      	str	r3, [r7, #32]
 80060b6:	6a3b      	ldr	r3, [r7, #32]
 80060b8:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 80060ba:	697b      	ldr	r3, [r7, #20]
 80060bc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	6a1b      	ldr	r3, [r3, #32]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d3a2      	bcc.n	800600e <remove_chain+0x62>
 80060c8:	e000      	b.n	80060cc <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 80060ca:	bf00      	nop

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {
 80060cc:	69bb      	ldr	r3, [r7, #24]
 80060ce:	781b      	ldrb	r3, [r3, #0]
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d11a      	bne.n	800610a <remove_chain+0x15e>
		if (pclst == 0) {	/* Does the object have no chain? */
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d103      	bne.n	80060e2 <remove_chain+0x136>
			obj->stat = 0;		/* Change the object status 'initial' */
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	71da      	strb	r2, [r3, #7]
 80060e0:	e013      	b.n	800610a <remove_chain+0x15e>
		} else {
			if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Did the chain get contiguous? */
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	79db      	ldrb	r3, [r3, #7]
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d10f      	bne.n	800610a <remove_chain+0x15e>
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d30a      	bcc.n	800610a <remove_chain+0x15e>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	689a      	ldr	r2, [r3, #8]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	4413      	add	r3, r2
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	429a      	cmp	r2, r3
 8006102:	d802      	bhi.n	800610a <remove_chain+0x15e>
				obj->stat = 2;	/* Change the object status 'contiguous' */
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2202      	movs	r2, #2
 8006108:	71da      	strb	r2, [r3, #7]
			}
		}
	}
#endif
	return FR_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3728      	adds	r7, #40	@ 0x28
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10d      	bne.n	8006146 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006130:	69bb      	ldr	r3, [r7, #24]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d004      	beq.n	8006140 <create_chain+0x2c>
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	69ba      	ldr	r2, [r7, #24]
 800613c:	429a      	cmp	r2, r3
 800613e:	d31b      	bcc.n	8006178 <create_chain+0x64>
 8006140:	2301      	movs	r3, #1
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	e018      	b.n	8006178 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f7ff fb61 	bl	8005810 <get_fat>
 800614e:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2b01      	cmp	r3, #1
 8006154:	d801      	bhi.n	800615a <create_chain+0x46>
 8006156:	2301      	movs	r3, #1
 8006158:	e0d9      	b.n	800630e <create_chain+0x1fa>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006160:	d101      	bne.n	8006166 <create_chain+0x52>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	e0d3      	b.n	800630e <create_chain+0x1fa>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	6a1b      	ldr	r3, [r3, #32]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	429a      	cmp	r2, r3
 800616e:	d201      	bcs.n	8006174 <create_chain+0x60>
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	e0cc      	b.n	800630e <create_chain+0x1fa>
		scl = clst;
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	61bb      	str	r3, [r7, #24]
	}

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b04      	cmp	r3, #4
 800617e:	d164      	bne.n	800624a <create_chain+0x136>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8006180:	2201      	movs	r2, #1
 8006182:	69b9      	ldr	r1, [r7, #24]
 8006184:	6938      	ldr	r0, [r7, #16]
 8006186:	f7ff fdb5 	bl	8005cf4 <find_bitmap>
 800618a:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <create_chain+0x86>
 8006192:	69fb      	ldr	r3, [r7, #28]
 8006194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006198:	d101      	bne.n	800619e <create_chain+0x8a>
 800619a:	69fb      	ldr	r3, [r7, #28]
 800619c:	e0b7      	b.n	800630e <create_chain+0x1fa>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 800619e:	2301      	movs	r3, #1
 80061a0:	2201      	movs	r2, #1
 80061a2:	69f9      	ldr	r1, [r7, #28]
 80061a4:	6938      	ldr	r0, [r7, #16]
 80061a6:	f7ff fe2c 	bl	8005e02 <change_bitmap>
 80061aa:	4603      	mov	r3, r0
 80061ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80061ae:	7dfb      	ldrb	r3, [r7, #23]
 80061b0:	2b02      	cmp	r3, #2
 80061b2:	d101      	bne.n	80061b8 <create_chain+0xa4>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e0aa      	b.n	800630e <create_chain+0x1fa>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80061b8:	7dfb      	ldrb	r3, [r7, #23]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d102      	bne.n	80061c4 <create_chain+0xb0>
 80061be:	f04f 33ff 	mov.w	r3, #4294967295
 80061c2:	e0a4      	b.n	800630e <create_chain+0x1fa>
		if (clst == 0) {							/* Is it a new chain? */
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <create_chain+0xbe>
			obj->stat = 2;							/* Set status 'contiguous' */
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2202      	movs	r2, #2
 80061ce:	71da      	strb	r2, [r3, #7]
 80061d0:	e011      	b.n	80061f6 <create_chain+0xe2>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	79db      	ldrb	r3, [r3, #7]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d10d      	bne.n	80061f6 <create_chain+0xe2>
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	3301      	adds	r3, #1
 80061de:	69fa      	ldr	r2, [r7, #28]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d008      	beq.n	80061f6 <create_chain+0xe2>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	689b      	ldr	r3, [r3, #8]
 80061e8:	69ba      	ldr	r2, [r7, #24]
 80061ea:	1ad2      	subs	r2, r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2203      	movs	r2, #3
 80061f4:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	79db      	ldrb	r3, [r3, #7]
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d064      	beq.n	80062c8 <create_chain+0x1b4>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	3301      	adds	r3, #1
 8006202:	69fa      	ldr	r2, [r7, #28]
 8006204:	429a      	cmp	r2, r3
 8006206:	d10b      	bne.n	8006220 <create_chain+0x10c>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	69db      	ldr	r3, [r3, #28]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d003      	beq.n	8006218 <create_chain+0x104>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	69db      	ldr	r3, [r3, #28]
 8006214:	3301      	adds	r3, #1
 8006216:	e000      	b.n	800621a <create_chain+0x106>
 8006218:	2302      	movs	r3, #2
 800621a:	687a      	ldr	r2, [r7, #4]
 800621c:	61d3      	str	r3, [r2, #28]
 800621e:	e053      	b.n	80062c8 <create_chain+0x1b4>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	69db      	ldr	r3, [r3, #28]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <create_chain+0x11a>
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 800622e:	69fa      	ldr	r2, [r7, #28]
 8006230:	6839      	ldr	r1, [r7, #0]
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f7ff fe89 	bl	8005f4a <fill_last_frag>
 8006238:	4603      	mov	r3, r0
 800623a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 800623c:	7dfb      	ldrb	r3, [r7, #23]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d142      	bne.n	80062c8 <create_chain+0x1b4>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	61da      	str	r2, [r3, #28]
 8006248:	e03e      	b.n	80062c8 <create_chain+0x1b4>
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	3301      	adds	r3, #1
 8006252:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	69fa      	ldr	r2, [r7, #28]
 800625a:	429a      	cmp	r2, r3
 800625c:	d307      	bcc.n	800626e <create_chain+0x15a>
				ncl = 2;
 800625e:	2302      	movs	r3, #2
 8006260:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006262:	69fa      	ldr	r2, [r7, #28]
 8006264:	69bb      	ldr	r3, [r7, #24]
 8006266:	429a      	cmp	r2, r3
 8006268:	d901      	bls.n	800626e <create_chain+0x15a>
 800626a:	2300      	movs	r3, #0
 800626c:	e04f      	b.n	800630e <create_chain+0x1fa>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800626e:	69f9      	ldr	r1, [r7, #28]
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f7ff facd 	bl	8005810 <get_fat>
 8006276:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <create_chain+0x188>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2b01      	cmp	r3, #1
 8006282:	d003      	beq.n	800628c <create_chain+0x178>
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628a:	d101      	bne.n	8006290 <create_chain+0x17c>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	e03e      	b.n	800630e <create_chain+0x1fa>
			if (ncl == scl) return 0;		/* No free cluster */
 8006290:	69fa      	ldr	r2, [r7, #28]
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	429a      	cmp	r2, r3
 8006296:	d1da      	bne.n	800624e <create_chain+0x13a>
 8006298:	2300      	movs	r3, #0
 800629a:	e038      	b.n	800630e <create_chain+0x1fa>
			if (cs == 0) break;				/* Found a free cluster */
 800629c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	69f9      	ldr	r1, [r7, #28]
 80062a4:	6938      	ldr	r0, [r7, #16]
 80062a6:	f7ff fc07 	bl	8005ab8 <put_fat>
 80062aa:	4603      	mov	r3, r0
 80062ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d109      	bne.n	80062c8 <create_chain+0x1b4>
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d006      	beq.n	80062c8 <create_chain+0x1b4>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	6839      	ldr	r1, [r7, #0]
 80062be:	6938      	ldr	r0, [r7, #16]
 80062c0:	f7ff fbfa 	bl	8005ab8 <put_fat>
 80062c4:	4603      	mov	r3, r0
 80062c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80062c8:	7dfb      	ldrb	r3, [r7, #23]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d116      	bne.n	80062fc <create_chain+0x1e8>
		fs->last_clst = ncl;
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	69fa      	ldr	r2, [r7, #28]
 80062d2:	619a      	str	r2, [r3, #24]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	69da      	ldr	r2, [r3, #28]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	6a1b      	ldr	r3, [r3, #32]
 80062dc:	3b02      	subs	r3, #2
 80062de:	429a      	cmp	r2, r3
 80062e0:	d804      	bhi.n	80062ec <create_chain+0x1d8>
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	1e5a      	subs	r2, r3, #1
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	61da      	str	r2, [r3, #28]
		fs->fsi_flag |= 1;
 80062ec:	693b      	ldr	r3, [r7, #16]
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	f043 0301 	orr.w	r3, r3, #1
 80062f4:	b2da      	uxtb	r2, r3
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	711a      	strb	r2, [r3, #4]
 80062fa:	e007      	b.n	800630c <create_chain+0x1f8>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80062fc:	7dfb      	ldrb	r3, [r7, #23]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d102      	bne.n	8006308 <create_chain+0x1f4>
 8006302:	f04f 33ff 	mov.w	r3, #4294967295
 8006306:	e000      	b.n	800630a <create_chain+0x1f6>
 8006308:	2301      	movs	r3, #1
 800630a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800630c:	69fb      	ldr	r3, [r7, #28]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3720      	adds	r7, #32
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}

08006316 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006316:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	e9c7 2300 	strd	r2, r3, [r7]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	617b      	str	r3, [r7, #20]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800632e:	3304      	adds	r3, #4
 8006330:	61bb      	str	r3, [r7, #24]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	899b      	ldrh	r3, [r3, #12]
 8006336:	b29b      	uxth	r3, r3
 8006338:	2200      	movs	r2, #0
 800633a:	4698      	mov	r8, r3
 800633c:	4691      	mov	r9, r2
 800633e:	4642      	mov	r2, r8
 8006340:	464b      	mov	r3, r9
 8006342:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006346:	f7fa faa1 	bl	800088c <__aeabi_uldivmod>
 800634a:	4602      	mov	r2, r0
 800634c:	460b      	mov	r3, r1
 800634e:	4610      	mov	r0, r2
 8006350:	4619      	mov	r1, r3
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	895b      	ldrh	r3, [r3, #10]
 8006356:	b29b      	uxth	r3, r3
 8006358:	2200      	movs	r2, #0
 800635a:	461c      	mov	r4, r3
 800635c:	4615      	mov	r5, r2
 800635e:	4622      	mov	r2, r4
 8006360:	462b      	mov	r3, r5
 8006362:	f7fa fa93 	bl	800088c <__aeabi_uldivmod>
 8006366:	4602      	mov	r2, r0
 8006368:	460b      	mov	r3, r1
 800636a:	4613      	mov	r3, r2
 800636c:	61fb      	str	r3, [r7, #28]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	1d1a      	adds	r2, r3, #4
 8006372:	61ba      	str	r2, [r7, #24]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	613b      	str	r3, [r7, #16]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <clmt_clust+0x6c>
 800637e:	2300      	movs	r3, #0
 8006380:	e010      	b.n	80063a4 <clmt_clust+0x8e>
		if (cl < ncl) break;	/* In this fragment? */
 8006382:	69fa      	ldr	r2, [r7, #28]
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	429a      	cmp	r2, r3
 8006388:	d307      	bcc.n	800639a <clmt_clust+0x84>
		cl -= ncl; tbl++;		/* Next fragment */
 800638a:	69fa      	ldr	r2, [r7, #28]
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	61fb      	str	r3, [r7, #28]
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	3304      	adds	r3, #4
 8006396:	61bb      	str	r3, [r7, #24]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006398:	e7e9      	b.n	800636e <clmt_clust+0x58>
		if (cl < ncl) break;	/* In this fragment? */
 800639a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800639c:	69bb      	ldr	r3, [r7, #24]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	69fb      	ldr	r3, [r7, #28]
 80063a2:	4413      	add	r3, r2
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

080063ae <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80063ae:	b580      	push	{r7, lr}
 80063b0:	b086      	sub	sp, #24
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
 80063b6:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	781b      	ldrb	r3, [r3, #0]
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	d102      	bne.n	80063cc <dir_sdi+0x1e>
 80063c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063ca:	e001      	b.n	80063d0 <dir_sdi+0x22>
 80063cc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d904      	bls.n	80063e0 <dir_sdi+0x32>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	f003 031f 	and.w	r3, r3, #31
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d001      	beq.n	80063e4 <dir_sdi+0x36>
		return FR_INT_ERR;
 80063e0:	2302      	movs	r3, #2
 80063e2:	e074      	b.n	80064ce <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d109      	bne.n	800640a <dir_sdi+0x5c>
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	781b      	ldrb	r3, [r3, #0]
 80063fa:	2b02      	cmp	r3, #2
 80063fc:	d905      	bls.n	800640a <dir_sdi+0x5c>
		clst = fs->dirbase;
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006402:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d10c      	bne.n	800642a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	095b      	lsrs	r3, r3, #5
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	8912      	ldrh	r2, [r2, #8]
 8006418:	4293      	cmp	r3, r2
 800641a:	d301      	bcc.n	8006420 <dir_sdi+0x72>
 800641c:	2302      	movs	r3, #2
 800641e:	e056      	b.n	80064ce <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	639a      	str	r2, [r3, #56]	@ 0x38
 8006428:	e02d      	b.n	8006486 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	895b      	ldrh	r3, [r3, #10]
 800642e:	461a      	mov	r2, r3
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	899b      	ldrh	r3, [r3, #12]
 8006434:	fb02 f303 	mul.w	r3, r2, r3
 8006438:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800643a:	e019      	b.n	8006470 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6979      	ldr	r1, [r7, #20]
 8006440:	4618      	mov	r0, r3
 8006442:	f7ff f9e5 	bl	8005810 <get_fat>
 8006446:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644e:	d101      	bne.n	8006454 <dir_sdi+0xa6>
 8006450:	2301      	movs	r3, #1
 8006452:	e03c      	b.n	80064ce <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	2b01      	cmp	r3, #1
 8006458:	d904      	bls.n	8006464 <dir_sdi+0xb6>
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	429a      	cmp	r2, r3
 8006462:	d301      	bcc.n	8006468 <dir_sdi+0xba>
 8006464:	2302      	movs	r3, #2
 8006466:	e032      	b.n	80064ce <dir_sdi+0x120>
			ofs -= csz;
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006470:	683a      	ldr	r2, [r7, #0]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	429a      	cmp	r2, r3
 8006476:	d2e1      	bcs.n	800643c <dir_sdi+0x8e>
		}
		dp->sect = clust2sect(fs, clst);
 8006478:	6979      	ldr	r1, [r7, #20]
 800647a:	6938      	ldr	r0, [r7, #16]
 800647c:	f7ff f9a8 	bl	80057d0 <clust2sect>
 8006480:	4602      	mov	r2, r0
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (!dp->sect) return FR_INT_ERR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	2b00      	cmp	r3, #0
 8006492:	d101      	bne.n	8006498 <dir_sdi+0xea>
 8006494:	2302      	movs	r3, #2
 8006496:	e01a      	b.n	80064ce <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	899b      	ldrh	r3, [r3, #12]
 80064a0:	4619      	mov	r1, r3
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80064a8:	441a      	add	r2, r3
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	899b      	ldrh	r3, [r3, #12]
 80064b8:	461a      	mov	r2, r3
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	fbb3 f0f2 	udiv	r0, r3, r2
 80064c0:	fb00 f202 	mul.w	r2, r0, r2
 80064c4:	1a9b      	subs	r3, r3, r2
 80064c6:	18ca      	adds	r2, r1, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80064d6:	b580      	push	{r7, lr}
 80064d8:	b086      	sub	sp, #24
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ea:	3320      	adds	r3, #32
 80064ec:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00b      	beq.n	800650e <dir_next+0x38>
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d102      	bne.n	8006504 <dir_next+0x2e>
 80064fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006502:	e001      	b.n	8006508 <dir_next+0x32>
 8006504:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	429a      	cmp	r2, r3
 800650c:	d801      	bhi.n	8006512 <dir_next+0x3c>
 800650e:	2304      	movs	r3, #4
 8006510:	e0c3      	b.n	800669a <dir_next+0x1c4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	899b      	ldrh	r3, [r3, #12]
 8006516:	461a      	mov	r2, r3
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	fbb3 f1f2 	udiv	r1, r3, r2
 800651e:	fb01 f202 	mul.w	r2, r1, r2
 8006522:	1a9b      	subs	r3, r3, r2
 8006524:	2b00      	cmp	r3, #0
 8006526:	f040 80a5 	bne.w	8006674 <dir_next+0x19e>
		dp->sect++;				/* Next sector */
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800652e:	1c5a      	adds	r2, r3, #1
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	639a      	str	r2, [r3, #56]	@ 0x38

		if (!dp->clust) {		/* Static table */
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006538:	2b00      	cmp	r3, #0
 800653a:	d10b      	bne.n	8006554 <dir_next+0x7e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	095b      	lsrs	r3, r3, #5
 8006540:	68fa      	ldr	r2, [r7, #12]
 8006542:	8912      	ldrh	r2, [r2, #8]
 8006544:	4293      	cmp	r3, r2
 8006546:	f0c0 8095 	bcc.w	8006674 <dir_next+0x19e>
				dp->sect = 0; return FR_NO_FILE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006550:	2304      	movs	r3, #4
 8006552:	e0a2      	b.n	800669a <dir_next+0x1c4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	899b      	ldrh	r3, [r3, #12]
 8006558:	461a      	mov	r2, r3
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006560:	68fa      	ldr	r2, [r7, #12]
 8006562:	8952      	ldrh	r2, [r2, #10]
 8006564:	3a01      	subs	r2, #1
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	f040 8083 	bne.w	8006674 <dir_next+0x19e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800656e:	687a      	ldr	r2, [r7, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006574:	4619      	mov	r1, r3
 8006576:	4610      	mov	r0, r2
 8006578:	f7ff f94a 	bl	8005810 <get_fat>
 800657c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d801      	bhi.n	8006588 <dir_next+0xb2>
 8006584:	2302      	movs	r3, #2
 8006586:	e088      	b.n	800669a <dir_next+0x1c4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800658e:	d101      	bne.n	8006594 <dir_next+0xbe>
 8006590:	2301      	movs	r3, #1
 8006592:	e082      	b.n	800669a <dir_next+0x1c4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	429a      	cmp	r2, r3
 800659c:	d360      	bcc.n	8006660 <dir_next+0x18a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d104      	bne.n	80065ae <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	639a      	str	r2, [r3, #56]	@ 0x38
 80065aa:	2304      	movs	r3, #4
 80065ac:	e075      	b.n	800669a <dir_next+0x1c4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80065ae:	687a      	ldr	r2, [r7, #4]
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80065b4:	4619      	mov	r1, r3
 80065b6:	4610      	mov	r0, r2
 80065b8:	f7ff fdac 	bl	8006114 <create_chain>
 80065bc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d101      	bne.n	80065c8 <dir_next+0xf2>
 80065c4:	2307      	movs	r3, #7
 80065c6:	e068      	b.n	800669a <dir_next+0x1c4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	2b01      	cmp	r3, #1
 80065cc:	d101      	bne.n	80065d2 <dir_next+0xfc>
 80065ce:	2302      	movs	r3, #2
 80065d0:	e063      	b.n	800669a <dir_next+0x1c4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065d8:	d101      	bne.n	80065de <dir_next+0x108>
 80065da:	2301      	movs	r3, #1
 80065dc:	e05d      	b.n	800669a <dir_next+0x1c4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	79db      	ldrb	r3, [r3, #7]
 80065e2:	f043 0304 	orr.w	r3, r3, #4
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	71da      	strb	r2, [r3, #7]
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f7ff f80d 	bl	800560c <sync_window>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d001      	beq.n	80065fc <dir_next+0x126>
 80065f8:	2301      	movs	r3, #1
 80065fa:	e04e      	b.n	800669a <dir_next+0x1c4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f103 003c 	add.w	r0, r3, #60	@ 0x3c
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	899b      	ldrh	r3, [r3, #12]
 8006606:	461a      	mov	r2, r3
 8006608:	2100      	movs	r1, #0
 800660a:	f7fe fe36 	bl	800527a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800660e:	2300      	movs	r3, #0
 8006610:	613b      	str	r3, [r7, #16]
 8006612:	6979      	ldr	r1, [r7, #20]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f7ff f8db 	bl	80057d0 <clust2sect>
 800661a:	4602      	mov	r2, r0
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006620:	e012      	b.n	8006648 <dir_next+0x172>
						fs->wflag = 1;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7fe ffef 	bl	800560c <sync_window>
 800662e:	4603      	mov	r3, r0
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <dir_next+0x162>
 8006634:	2301      	movs	r3, #1
 8006636:	e030      	b.n	800669a <dir_next+0x1c4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	3301      	adds	r3, #1
 800663c:	613b      	str	r3, [r7, #16]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006642:	1c5a      	adds	r2, r3, #1
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	639a      	str	r2, [r3, #56]	@ 0x38
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	895b      	ldrh	r3, [r3, #10]
 800664c:	461a      	mov	r2, r3
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	4293      	cmp	r3, r2
 8006652:	d3e6      	bcc.n	8006622 <dir_next+0x14c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	1ad2      	subs	r2, r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	639a      	str	r2, [r3, #56]	@ 0x38
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clust2sect(fs, clst);
 8006666:	6979      	ldr	r1, [r7, #20]
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f7ff f8b1 	bl	80057d0 <clust2sect>
 800666e:	4602      	mov	r2, r0
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	68ba      	ldr	r2, [r7, #8]
 8006678:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	899b      	ldrh	r3, [r3, #12]
 8006684:	461a      	mov	r2, r3
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	fbb3 f0f2 	udiv	r0, r3, r2
 800668c:	fb00 f202 	mul.w	r2, r0, r2
 8006690:	1a9b      	subs	r3, r3, r2
 8006692:	18ca      	adds	r2, r1, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	3718      	adds	r7, #24
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b086      	sub	sp, #24
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
 80066aa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80066b2:	2100      	movs	r1, #0
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f7ff fe7a 	bl	80063ae <dir_sdi>
 80066ba:	4603      	mov	r3, r0
 80066bc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d140      	bne.n	8006746 <dir_alloc+0xa4>
		n = 0;
 80066c4:	2300      	movs	r3, #0
 80066c6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066cc:	4619      	mov	r1, r3
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7fe ffe0 	bl	8005694 <move_window>
 80066d4:	4603      	mov	r3, r0
 80066d6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80066d8:	7dfb      	ldrb	r3, [r7, #23]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d132      	bne.n	8006744 <dir_alloc+0xa2>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d108      	bne.n	80066f8 <dir_alloc+0x56>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ea:	781b      	ldrb	r3, [r3, #0]
 80066ec:	b25b      	sxtb	r3, r3
 80066ee:	43db      	mvns	r3, r3
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	09db      	lsrs	r3, r3, #7
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	e00f      	b.n	8006718 <dir_alloc+0x76>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2be5      	cmp	r3, #229	@ 0xe5
 8006700:	d004      	beq.n	800670c <dir_alloc+0x6a>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d101      	bne.n	8006710 <dir_alloc+0x6e>
 800670c:	2301      	movs	r3, #1
 800670e:	e000      	b.n	8006712 <dir_alloc+0x70>
 8006710:	2300      	movs	r3, #0
 8006712:	f003 0301 	and.w	r3, r3, #1
 8006716:	b2db      	uxtb	r3, r3
 8006718:	2b00      	cmp	r3, #0
 800671a:	d007      	beq.n	800672c <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800671c:	693b      	ldr	r3, [r7, #16]
 800671e:	3301      	adds	r3, #1
 8006720:	613b      	str	r3, [r7, #16]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	429a      	cmp	r2, r3
 8006728:	d102      	bne.n	8006730 <dir_alloc+0x8e>
 800672a:	e00c      	b.n	8006746 <dir_alloc+0xa4>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800672c:	2300      	movs	r3, #0
 800672e:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006730:	2101      	movs	r1, #1
 8006732:	6878      	ldr	r0, [r7, #4]
 8006734:	f7ff fecf 	bl	80064d6 <dir_next>
 8006738:	4603      	mov	r3, r0
 800673a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	2b00      	cmp	r3, #0
 8006740:	d0c2      	beq.n	80066c8 <dir_alloc+0x26>
 8006742:	e000      	b.n	8006746 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8006744:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006746:	7dfb      	ldrb	r3, [r7, #23]
 8006748:	2b04      	cmp	r3, #4
 800674a:	d101      	bne.n	8006750 <dir_alloc+0xae>
 800674c:	2307      	movs	r3, #7
 800674e:	75fb      	strb	r3, [r7, #23]
	return res;
 8006750:	7dfb      	ldrb	r3, [r7, #23]
}
 8006752:	4618      	mov	r0, r3
 8006754:	3718      	adds	r7, #24
 8006756:	46bd      	mov	sp, r7
 8006758:	bd80      	pop	{r7, pc}

0800675a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800675a:	b580      	push	{r7, lr}
 800675c:	b084      	sub	sp, #16
 800675e:	af00      	add	r7, sp, #0
 8006760:	6078      	str	r0, [r7, #4]
 8006762:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	331a      	adds	r3, #26
 8006768:	4618      	mov	r0, r3
 800676a:	f7fe fb7f 	bl	8004e6c <ld_word>
 800676e:	4603      	mov	r3, r0
 8006770:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	2b03      	cmp	r3, #3
 8006778:	d109      	bne.n	800678e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	3314      	adds	r3, #20
 800677e:	4618      	mov	r0, r3
 8006780:	f7fe fb74 	bl	8004e6c <ld_word>
 8006784:	4603      	mov	r3, r0
 8006786:	041b      	lsls	r3, r3, #16
 8006788:	68fa      	ldr	r2, [r7, #12]
 800678a:	4313      	orrs	r3, r2
 800678c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800678e:	68fb      	ldr	r3, [r7, #12]
}
 8006790:	4618      	mov	r0, r3
 8006792:	3710      	adds	r7, #16
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	331a      	adds	r3, #26
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	b292      	uxth	r2, r2
 80067ac:	4611      	mov	r1, r2
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe fc73 	bl	800509a <st_word>
	if (fs->fs_type == FS_FAT32) {
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	2b03      	cmp	r3, #3
 80067ba:	d109      	bne.n	80067d0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	f103 0214 	add.w	r2, r3, #20
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	0c1b      	lsrs	r3, r3, #16
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	4619      	mov	r1, r3
 80067ca:	4610      	mov	r0, r2
 80067cc:	f7fe fc65 	bl	800509a <st_word>
	}
}
 80067d0:	bf00      	nop
 80067d2:	3710      	adds	r7, #16
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80067d8:	b590      	push	{r4, r7, lr}
 80067da:	b087      	sub	sp, #28
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	331a      	adds	r3, #26
 80067e6:	4618      	mov	r0, r3
 80067e8:	f7fe fb40 	bl	8004e6c <ld_word>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <cmp_lfn+0x1e>
 80067f2:	2300      	movs	r3, #0
 80067f4:	e059      	b.n	80068aa <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80067fe:	1e5a      	subs	r2, r3, #1
 8006800:	4613      	mov	r3, r2
 8006802:	005b      	lsls	r3, r3, #1
 8006804:	4413      	add	r3, r2
 8006806:	009b      	lsls	r3, r3, #2
 8006808:	4413      	add	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800680c:	2301      	movs	r3, #1
 800680e:	81fb      	strh	r3, [r7, #14]
 8006810:	2300      	movs	r3, #0
 8006812:	613b      	str	r3, [r7, #16]
 8006814:	e033      	b.n	800687e <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006816:	4a27      	ldr	r2, [pc, #156]	@ (80068b4 <cmp_lfn+0xdc>)
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	4413      	add	r3, r2
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	461a      	mov	r2, r3
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	4413      	add	r3, r2
 8006824:	4618      	mov	r0, r3
 8006826:	f7fe fb21 	bl	8004e6c <ld_word>
 800682a:	4603      	mov	r3, r0
 800682c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800682e:	89fb      	ldrh	r3, [r7, #14]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d01a      	beq.n	800686a <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	2bfe      	cmp	r3, #254	@ 0xfe
 8006838:	d812      	bhi.n	8006860 <cmp_lfn+0x88>
 800683a:	89bb      	ldrh	r3, [r7, #12]
 800683c:	4618      	mov	r0, r3
 800683e:	f002 fff1 	bl	8009824 <ff_wtoupper>
 8006842:	4603      	mov	r3, r0
 8006844:	461c      	mov	r4, r3
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	617a      	str	r2, [r7, #20]
 800684c:	005b      	lsls	r3, r3, #1
 800684e:	687a      	ldr	r2, [r7, #4]
 8006850:	4413      	add	r3, r2
 8006852:	881b      	ldrh	r3, [r3, #0]
 8006854:	4618      	mov	r0, r3
 8006856:	f002 ffe5 	bl	8009824 <ff_wtoupper>
 800685a:	4603      	mov	r3, r0
 800685c:	429c      	cmp	r4, r3
 800685e:	d001      	beq.n	8006864 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006860:	2300      	movs	r3, #0
 8006862:	e022      	b.n	80068aa <cmp_lfn+0xd2>
			}
			wc = uc;
 8006864:	89bb      	ldrh	r3, [r7, #12]
 8006866:	81fb      	strh	r3, [r7, #14]
 8006868:	e006      	b.n	8006878 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800686a:	89bb      	ldrh	r3, [r7, #12]
 800686c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006870:	4293      	cmp	r3, r2
 8006872:	d001      	beq.n	8006878 <cmp_lfn+0xa0>
 8006874:	2300      	movs	r3, #0
 8006876:	e018      	b.n	80068aa <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	3301      	adds	r3, #1
 800687c:	613b      	str	r3, [r7, #16]
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	2b0c      	cmp	r3, #12
 8006882:	d9c8      	bls.n	8006816 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <cmp_lfn+0xd0>
 8006890:	89fb      	ldrh	r3, [r7, #14]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d008      	beq.n	80068a8 <cmp_lfn+0xd0>
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	005b      	lsls	r3, r3, #1
 800689a:	687a      	ldr	r2, [r7, #4]
 800689c:	4413      	add	r3, r2
 800689e:	881b      	ldrh	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d001      	beq.n	80068a8 <cmp_lfn+0xd0>
 80068a4:	2300      	movs	r3, #0
 80068a6:	e000      	b.n	80068aa <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80068a8:	2301      	movs	r3, #1
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	371c      	adds	r7, #28
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd90      	pop	{r4, r7, pc}
 80068b2:	bf00      	nop
 80068b4:	0800a478 	.word	0x0800a478

080068b8 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	331a      	adds	r3, #26
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fe fad0 	bl	8004e6c <ld_word>
 80068cc:	4603      	mov	r3, r0
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <pick_lfn+0x1e>
 80068d2:	2300      	movs	r3, #0
 80068d4:	e04d      	b.n	8006972 <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	781b      	ldrb	r3, [r3, #0]
 80068da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068de:	1e5a      	subs	r2, r3, #1
 80068e0:	4613      	mov	r3, r2
 80068e2:	005b      	lsls	r3, r3, #1
 80068e4:	4413      	add	r3, r2
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	4413      	add	r3, r2
 80068ea:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068ec:	2301      	movs	r3, #1
 80068ee:	81fb      	strh	r3, [r7, #14]
 80068f0:	2300      	movs	r3, #0
 80068f2:	613b      	str	r3, [r7, #16]
 80068f4:	e028      	b.n	8006948 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 80068f6:	4a21      	ldr	r2, [pc, #132]	@ (800697c <pick_lfn+0xc4>)
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	4413      	add	r3, r2
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	461a      	mov	r2, r3
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	4413      	add	r3, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f7fe fab1 	bl	8004e6c <ld_word>
 800690a:	4603      	mov	r3, r0
 800690c:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800690e:	89fb      	ldrh	r3, [r7, #14]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00f      	beq.n	8006934 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 8006914:	697b      	ldr	r3, [r7, #20]
 8006916:	2bfe      	cmp	r3, #254	@ 0xfe
 8006918:	d901      	bls.n	800691e <pick_lfn+0x66>
 800691a:	2300      	movs	r3, #0
 800691c:	e029      	b.n	8006972 <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800691e:	89bb      	ldrh	r3, [r7, #12]
 8006920:	81fb      	strh	r3, [r7, #14]
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	617a      	str	r2, [r7, #20]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	89fa      	ldrh	r2, [r7, #14]
 8006930:	801a      	strh	r2, [r3, #0]
 8006932:	e006      	b.n	8006942 <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006934:	89bb      	ldrh	r3, [r7, #12]
 8006936:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800693a:	4293      	cmp	r3, r2
 800693c:	d001      	beq.n	8006942 <pick_lfn+0x8a>
 800693e:	2300      	movs	r3, #0
 8006940:	e017      	b.n	8006972 <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	3301      	adds	r3, #1
 8006946:	613b      	str	r3, [r7, #16]
 8006948:	693b      	ldr	r3, [r7, #16]
 800694a:	2b0c      	cmp	r3, #12
 800694c:	d9d3      	bls.n	80068f6 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	781b      	ldrb	r3, [r3, #0]
 8006952:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006956:	2b00      	cmp	r3, #0
 8006958:	d00a      	beq.n	8006970 <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2bfe      	cmp	r3, #254	@ 0xfe
 800695e:	d901      	bls.n	8006964 <pick_lfn+0xac>
 8006960:	2300      	movs	r3, #0
 8006962:	e006      	b.n	8006972 <pick_lfn+0xba>
		lfnbuf[i] = 0;
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	4413      	add	r3, r2
 800696c:	2200      	movs	r2, #0
 800696e:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8006970:	2301      	movs	r3, #1
}
 8006972:	4618      	mov	r0, r3
 8006974:	3718      	adds	r7, #24
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	0800a478 	.word	0x0800a478

08006980 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b088      	sub	sp, #32
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4611      	mov	r1, r2
 800698c:	461a      	mov	r2, r3
 800698e:	460b      	mov	r3, r1
 8006990:	71fb      	strb	r3, [r7, #7]
 8006992:	4613      	mov	r3, r2
 8006994:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006996:	68bb      	ldr	r3, [r7, #8]
 8006998:	330d      	adds	r3, #13
 800699a:	79ba      	ldrb	r2, [r7, #6]
 800699c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	330b      	adds	r3, #11
 80069a2:	220f      	movs	r2, #15
 80069a4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	330c      	adds	r3, #12
 80069aa:	2200      	movs	r2, #0
 80069ac:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	331a      	adds	r3, #26
 80069b2:	2100      	movs	r1, #0
 80069b4:	4618      	mov	r0, r3
 80069b6:	f7fe fb70 	bl	800509a <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	1e5a      	subs	r2, r3, #1
 80069be:	4613      	mov	r3, r2
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	4413      	add	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80069ca:	2300      	movs	r3, #0
 80069cc:	82fb      	strh	r3, [r7, #22]
 80069ce:	2300      	movs	r3, #0
 80069d0:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 80069d2:	8afb      	ldrh	r3, [r7, #22]
 80069d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80069d8:	4293      	cmp	r3, r2
 80069da:	d007      	beq.n	80069ec <put_lfn+0x6c>
 80069dc:	69fb      	ldr	r3, [r7, #28]
 80069de:	1c5a      	adds	r2, r3, #1
 80069e0:	61fa      	str	r2, [r7, #28]
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	68fa      	ldr	r2, [r7, #12]
 80069e6:	4413      	add	r3, r2
 80069e8:	881b      	ldrh	r3, [r3, #0]
 80069ea:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80069ec:	4a17      	ldr	r2, [pc, #92]	@ (8006a4c <put_lfn+0xcc>)
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	4413      	add	r3, r2
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	461a      	mov	r2, r3
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4413      	add	r3, r2
 80069fa:	8afa      	ldrh	r2, [r7, #22]
 80069fc:	4611      	mov	r1, r2
 80069fe:	4618      	mov	r0, r3
 8006a00:	f7fe fb4b 	bl	800509a <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006a04:	8afb      	ldrh	r3, [r7, #22]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d102      	bne.n	8006a10 <put_lfn+0x90>
 8006a0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006a0e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	3301      	adds	r3, #1
 8006a14:	61bb      	str	r3, [r7, #24]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b0c      	cmp	r3, #12
 8006a1a:	d9da      	bls.n	80069d2 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006a1c:	8afb      	ldrh	r3, [r7, #22]
 8006a1e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006a22:	4293      	cmp	r3, r2
 8006a24:	d006      	beq.n	8006a34 <put_lfn+0xb4>
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	005b      	lsls	r3, r3, #1
 8006a2a:	68fa      	ldr	r2, [r7, #12]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	881b      	ldrh	r3, [r3, #0]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d103      	bne.n	8006a3c <put_lfn+0xbc>
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a3a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	79fa      	ldrb	r2, [r7, #7]
 8006a40:	701a      	strb	r2, [r3, #0]
}
 8006a42:	bf00      	nop
 8006a44:	3720      	adds	r7, #32
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	0800a478 	.word	0x0800a478

08006a50 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08c      	sub	sp, #48	@ 0x30
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	60f8      	str	r0, [r7, #12]
 8006a58:	60b9      	str	r1, [r7, #8]
 8006a5a:	607a      	str	r2, [r7, #4]
 8006a5c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006a5e:	220b      	movs	r2, #11
 8006a60:	68b9      	ldr	r1, [r7, #8]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f7fe fbe8 	bl	8005238 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	2b05      	cmp	r3, #5
 8006a6c:	d92b      	bls.n	8006ac6 <gen_numname+0x76>
		sr = seq;
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006a72:	e022      	b.n	8006aba <gen_numname+0x6a>
			wc = *lfn++;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	1c9a      	adds	r2, r3, #2
 8006a78:	607a      	str	r2, [r7, #4]
 8006a7a:	881b      	ldrh	r3, [r3, #0]
 8006a7c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8006a7e:	2300      	movs	r3, #0
 8006a80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006a82:	e017      	b.n	8006ab4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	005a      	lsls	r2, r3, #1
 8006a88:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a8a:	f003 0301 	and.w	r3, r3, #1
 8006a8e:	4413      	add	r3, r2
 8006a90:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006a92:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d005      	beq.n	8006aae <gen_numname+0x5e>
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8006aa8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8006aac:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab0:	3301      	adds	r3, #1
 8006ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab6:	2b0f      	cmp	r3, #15
 8006ab8:	d9e4      	bls.n	8006a84 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	881b      	ldrh	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1d8      	bne.n	8006a74 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006ac2:	69fb      	ldr	r3, [r7, #28]
 8006ac4:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006ac6:	2307      	movs	r3, #7
 8006ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	f003 030f 	and.w	r3, r3, #15
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	3330      	adds	r3, #48	@ 0x30
 8006ad6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8006ada:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ade:	2b39      	cmp	r3, #57	@ 0x39
 8006ae0:	d904      	bls.n	8006aec <gen_numname+0x9c>
 8006ae2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006ae6:	3307      	adds	r3, #7
 8006ae8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8006aec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aee:	1e5a      	subs	r2, r3, #1
 8006af0:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006af2:	3330      	adds	r3, #48	@ 0x30
 8006af4:	443b      	add	r3, r7
 8006af6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006afa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	091b      	lsrs	r3, r3, #4
 8006b02:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d1df      	bne.n	8006aca <gen_numname+0x7a>
	ns[i] = '~';
 8006b0a:	f107 0214 	add.w	r2, r7, #20
 8006b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b10:	4413      	add	r3, r2
 8006b12:	227e      	movs	r2, #126	@ 0x7e
 8006b14:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006b16:	2300      	movs	r3, #0
 8006b18:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b1a:	e002      	b.n	8006b22 <gen_numname+0xd2>
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b1e:	3301      	adds	r3, #1
 8006b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b22:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d205      	bcs.n	8006b36 <gen_numname+0xe6>
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2e:	4413      	add	r3, r2
 8006b30:	781b      	ldrb	r3, [r3, #0]
 8006b32:	2b20      	cmp	r3, #32
 8006b34:	d1f2      	bne.n	8006b1c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b38:	2b07      	cmp	r3, #7
 8006b3a:	d807      	bhi.n	8006b4c <gen_numname+0xfc>
 8006b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b3e:	1c5a      	adds	r2, r3, #1
 8006b40:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006b42:	3330      	adds	r3, #48	@ 0x30
 8006b44:	443b      	add	r3, r7
 8006b46:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006b4a:	e000      	b.n	8006b4e <gen_numname+0xfe>
 8006b4c:	2120      	movs	r1, #32
 8006b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	627a      	str	r2, [r7, #36]	@ 0x24
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4413      	add	r3, r2
 8006b58:	460a      	mov	r2, r1
 8006b5a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b5e:	2b07      	cmp	r3, #7
 8006b60:	d9e9      	bls.n	8006b36 <gen_numname+0xe6>
}
 8006b62:	bf00      	nop
 8006b64:	bf00      	nop
 8006b66:	3730      	adds	r7, #48	@ 0x30
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}

08006b6c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b085      	sub	sp, #20
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006b74:	2300      	movs	r3, #0
 8006b76:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006b78:	230b      	movs	r3, #11
 8006b7a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006b7c:	7bfb      	ldrb	r3, [r7, #15]
 8006b7e:	b2da      	uxtb	r2, r3
 8006b80:	0852      	lsrs	r2, r2, #1
 8006b82:	01db      	lsls	r3, r3, #7
 8006b84:	4313      	orrs	r3, r2
 8006b86:	b2da      	uxtb	r2, r3
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	1c59      	adds	r1, r3, #1
 8006b8c:	6079      	str	r1, [r7, #4]
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	4413      	add	r3, r2
 8006b92:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	3b01      	subs	r3, #1
 8006b98:	60bb      	str	r3, [r7, #8]
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1ed      	bne.n	8006b7c <sum_sfn+0x10>
	return sum;
 8006ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3714      	adds	r7, #20
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bac:	4770      	bx	lr

08006bae <xdir_sum>:

static
WORD xdir_sum (			/* Get checksum of the directoly block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8006bae:	b480      	push	{r7}
 8006bb0:	b087      	sub	sp, #28
 8006bb2:	af00      	add	r7, sp, #0
 8006bb4:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = (dir[XDIR_NumSec] + 1) * SZDIRE;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	015b      	lsls	r3, r3, #5
 8006bc0:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	827b      	strh	r3, [r7, #18]
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	617b      	str	r3, [r7, #20]
 8006bca:	e015      	b.n	8006bf8 <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip sum field */
 8006bcc:	697b      	ldr	r3, [r7, #20]
 8006bce:	2b02      	cmp	r3, #2
 8006bd0:	d103      	bne.n	8006bda <xdir_sum+0x2c>
			i++;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	617b      	str	r3, [r7, #20]
 8006bd8:	e00b      	b.n	8006bf2 <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8006bda:	8a7b      	ldrh	r3, [r7, #18]
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	0852      	lsrs	r2, r2, #1
 8006be0:	03db      	lsls	r3, r3, #15
 8006be2:	4313      	orrs	r3, r2
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	697a      	ldr	r2, [r7, #20]
 8006bea:	440a      	add	r2, r1
 8006bec:	7812      	ldrb	r2, [r2, #0]
 8006bee:	4413      	add	r3, r2
 8006bf0:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	617b      	str	r3, [r7, #20]
 8006bf8:	697a      	ldr	r2, [r7, #20]
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d3e5      	bcc.n	8006bcc <xdir_sum+0x1e>
		}
	}
	return sum;
 8006c00:	8a7b      	ldrh	r3, [r7, #18]
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	371c      	adds	r7, #28
 8006c06:	46bd      	mov	sp, r7
 8006c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <xname_sum>:

static
WORD xname_sum (		/* Get check sum (to be used as hash) of the name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b084      	sub	sp, #16
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8006c1a:	e01b      	b.n	8006c54 <xname_sum+0x46>
		chr = ff_wtoupper(chr);		/* File name needs to be ignored case */
 8006c1c:	89bb      	ldrh	r3, [r7, #12]
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f002 fe00 	bl	8009824 <ff_wtoupper>
 8006c24:	4603      	mov	r3, r0
 8006c26:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8006c28:	89fb      	ldrh	r3, [r7, #14]
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	0852      	lsrs	r2, r2, #1
 8006c2e:	03db      	lsls	r3, r3, #15
 8006c30:	4313      	orrs	r3, r2
 8006c32:	b29a      	uxth	r2, r3
 8006c34:	89bb      	ldrh	r3, [r7, #12]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	b29b      	uxth	r3, r3
 8006c3a:	4413      	add	r3, r2
 8006c3c:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8006c3e:	89fb      	ldrh	r3, [r7, #14]
 8006c40:	b29a      	uxth	r2, r3
 8006c42:	0852      	lsrs	r2, r2, #1
 8006c44:	03db      	lsls	r3, r3, #15
 8006c46:	4313      	orrs	r3, r2
 8006c48:	b29a      	uxth	r2, r3
 8006c4a:	89bb      	ldrh	r3, [r7, #12]
 8006c4c:	0a1b      	lsrs	r3, r3, #8
 8006c4e:	b29b      	uxth	r3, r3
 8006c50:	4413      	add	r3, r2
 8006c52:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	1c9a      	adds	r2, r3, #2
 8006c58:	607a      	str	r2, [r7, #4]
 8006c5a:	881b      	ldrh	r3, [r3, #0]
 8006c5c:	81bb      	strh	r3, [r7, #12]
 8006c5e:	89bb      	ldrh	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d1db      	bne.n	8006c1c <xname_sum+0xe>
	}
	return sum;
 8006c64:	89fb      	ldrh	r3, [r7, #14]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
	...

08006c70 <load_xdir>:

static
FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp			/* Pointer to the reading direcotry object pointing the 85 entry */
)
{
 8006c70:	b590      	push	{r4, r7, lr}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory direcotry entry block 85+C0+C1s */
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	613b      	str	r3, [r7, #16]


	/* Load 85 entry */
	res = move_window(dp->obj.fs, dp->sect);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c88:	4619      	mov	r1, r3
 8006c8a:	4610      	mov	r0, r2
 8006c8c:	f7fe fd02 	bl	8005694 <move_window>
 8006c90:	4603      	mov	r3, r0
 8006c92:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8006c94:	7bfb      	ldrb	r3, [r7, #15]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <load_xdir+0x2e>
 8006c9a:	7bfb      	ldrb	r3, [r7, #15]
 8006c9c:	e09f      	b.n	8006dde <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	2b85      	cmp	r3, #133	@ 0x85
 8006ca6:	d001      	beq.n	8006cac <load_xdir+0x3c>
 8006ca8:	2302      	movs	r3, #2
 8006caa:	e098      	b.n	8006dde <load_xdir+0x16e>
	mem_cpy(dirb + 0, dp->dir, SZDIRE);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006cb0:	2220      	movs	r2, #32
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	6938      	ldr	r0, [r7, #16]
 8006cb6:	f7fe fabf 	bl	8005238 <mem_cpy>
	sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	781b      	ldrb	r3, [r3, #0]
 8006cc0:	3301      	adds	r3, #1
 8006cc2:	015b      	lsls	r3, r3, #5
 8006cc4:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2b5f      	cmp	r3, #95	@ 0x5f
 8006cca:	d903      	bls.n	8006cd4 <load_xdir+0x64>
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8006cd2:	d901      	bls.n	8006cd8 <load_xdir+0x68>
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	e082      	b.n	8006dde <load_xdir+0x16e>

	/* Load C0 entry */
	res = dir_next(dp, 0);
 8006cd8:	2100      	movs	r1, #0
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f7ff fbfb 	bl	80064d6 <dir_next>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8006ce4:	7bfb      	ldrb	r3, [r7, #15]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <load_xdir+0x7e>
 8006cea:	7bfb      	ldrb	r3, [r7, #15]
 8006cec:	e077      	b.n	8006dde <load_xdir+0x16e>
	res = move_window(dp->obj.fs, dp->sect);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cf6:	4619      	mov	r1, r3
 8006cf8:	4610      	mov	r0, r2
 8006cfa:	f7fe fccb 	bl	8005694 <move_window>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	73fb      	strb	r3, [r7, #15]
	if (res != FR_OK) return res;
 8006d02:	7bfb      	ldrb	r3, [r7, #15]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d001      	beq.n	8006d0c <load_xdir+0x9c>
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
 8006d0a:	e068      	b.n	8006dde <load_xdir+0x16e>
	if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d10:	781b      	ldrb	r3, [r3, #0]
 8006d12:	2bc0      	cmp	r3, #192	@ 0xc0
 8006d14:	d001      	beq.n	8006d1a <load_xdir+0xaa>
 8006d16:	2302      	movs	r3, #2
 8006d18:	e061      	b.n	8006dde <load_xdir+0x16e>
	mem_cpy(dirb + SZDIRE, dp->dir, SZDIRE);
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f103 0020 	add.w	r0, r3, #32
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d24:	2220      	movs	r2, #32
 8006d26:	4619      	mov	r1, r3
 8006d28:	f7fe fa86 	bl	8005238 <mem_cpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	3323      	adds	r3, #35	@ 0x23
 8006d30:	781b      	ldrb	r3, [r3, #0]
 8006d32:	332c      	adds	r3, #44	@ 0x2c
 8006d34:	4a2c      	ldr	r2, [pc, #176]	@ (8006de8 <load_xdir+0x178>)
 8006d36:	fba2 2303 	umull	r2, r3, r2, r3
 8006d3a:	08db      	lsrs	r3, r3, #3
 8006d3c:	015b      	lsls	r3, r3, #5
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d201      	bcs.n	8006d48 <load_xdir+0xd8>
 8006d44:	2302      	movs	r3, #2
 8006d46:	e04a      	b.n	8006dde <load_xdir+0x16e>

	/* Load C1 entries */
	i = SZDIRE * 2;	/* C1 offset */
 8006d48:	2340      	movs	r3, #64	@ 0x40
 8006d4a:	617b      	str	r3, [r7, #20]
	do {
		res = dir_next(dp, 0);
 8006d4c:	2100      	movs	r1, #0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f7ff fbc1 	bl	80064d6 <dir_next>
 8006d54:	4603      	mov	r3, r0
 8006d56:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8006d58:	7bfb      	ldrb	r3, [r7, #15]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <load_xdir+0xf2>
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
 8006d60:	e03d      	b.n	8006dde <load_xdir+0x16e>
		res = move_window(dp->obj.fs, dp->sect);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4610      	mov	r0, r2
 8006d6e:	f7fe fc91 	bl	8005694 <move_window>
 8006d72:	4603      	mov	r3, r0
 8006d74:	73fb      	strb	r3, [r7, #15]
		if (res != FR_OK) return res;
 8006d76:	7bfb      	ldrb	r3, [r7, #15]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <load_xdir+0x110>
 8006d7c:	7bfb      	ldrb	r3, [r7, #15]
 8006d7e:	e02e      	b.n	8006dde <load_xdir+0x16e>
		if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2bc1      	cmp	r3, #193	@ 0xc1
 8006d88:	d001      	beq.n	8006d8e <load_xdir+0x11e>
 8006d8a:	2302      	movs	r3, #2
 8006d8c:	e027      	b.n	8006dde <load_xdir+0x16e>
		if (i < MAXDIRB(_MAX_LFN)) mem_cpy(dirb + i, dp->dir, SZDIRE);
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8006d94:	d208      	bcs.n	8006da8 <load_xdir+0x138>
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	18d0      	adds	r0, r2, r3
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006da0:	2220      	movs	r2, #32
 8006da2:	4619      	mov	r1, r3
 8006da4:	f7fe fa48 	bl	8005238 <mem_cpy>
	} while ((i += SZDIRE) < sz_ent);
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	3320      	adds	r3, #32
 8006dac:	617b      	str	r3, [r7, #20]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d3ca      	bcc.n	8006d4c <load_xdir+0xdc>

	/* Sanity check (do it when accessible object name) */
	if (i <= MAXDIRB(_MAX_LFN)) {
 8006db6:	697b      	ldr	r3, [r7, #20]
 8006db8:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8006dbc:	d80e      	bhi.n	8006ddc <load_xdir+0x16c>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8006dbe:	6938      	ldr	r0, [r7, #16]
 8006dc0:	f7ff fef5 	bl	8006bae <xdir_sum>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	461c      	mov	r4, r3
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	3302      	adds	r3, #2
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f7fe f84d 	bl	8004e6c <ld_word>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	429c      	cmp	r4, r3
 8006dd6:	d001      	beq.n	8006ddc <load_xdir+0x16c>
 8006dd8:	2302      	movs	r3, #2
 8006dda:	e000      	b.n	8006dde <load_xdir+0x16e>
	}
	return FR_OK;
 8006ddc:	2300      	movs	r3, #0
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	bd90      	pop	{r4, r7, pc}
 8006de6:	bf00      	nop
 8006de8:	88888889 	.word	0x88888889

08006dec <load_obj_dir>:
static
FRESULT load_obj_dir (
	DIR* dp,			/* Blank directory object to be used to access containing direcotry */
	const _FDID* obj	/* Object with its containing directory information */
)
{
 8006dec:	b5b0      	push	{r4, r5, r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6808      	ldr	r0, [r1, #0]
 8006dfa:	6879      	ldr	r1, [r7, #4]
 8006dfc:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8006dfe:	6839      	ldr	r1, [r7, #0]
 8006e00:	6a08      	ldr	r0, [r1, #32]
 8006e02:	6879      	ldr	r1, [r7, #4]
 8006e04:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8006e0a:	b2c8      	uxtb	r0, r1
 8006e0c:	6879      	ldr	r1, [r7, #4]
 8006e0e:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8006e14:	2000      	movs	r0, #0
 8006e16:	460c      	mov	r4, r1
 8006e18:	4605      	mov	r5, r0
 8006e1a:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 8006e1e:	2300      	movs	r3, #0
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->blk_ofs = obj->c_ofs;
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e32:	4619      	mov	r1, r3
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f7ff faba 	bl	80063ae <dir_sdi>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006e3e:	7bfb      	ldrb	r3, [r7, #15]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d104      	bne.n	8006e4e <load_obj_dir+0x62>
		res = load_xdir(dp);		/* Load the object's entry block */
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ff13 	bl	8006c70 <load_xdir>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8006e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e50:	4618      	mov	r0, r3
 8006e52:	3710      	adds	r7, #16
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bdb0      	pop	{r4, r5, r7, pc}

08006e58 <store_xdir>:
/*-----------------------------------------------*/
static
FRESULT store_xdir (
	DIR* dp				/* Pointer to the direcotry object */
)
{
 8006e58:	b590      	push	{r4, r7, lr}
 8006e5a:	b087      	sub	sp, #28
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE* dirb = dp->obj.fs->dirbuf;	/* Pointer to the direcotry entry block 85+C0+C1s */
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	60fb      	str	r3, [r7, #12]

	/* Create set sum */
	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	1c9c      	adds	r4, r3, #2
 8006e6c:	68f8      	ldr	r0, [r7, #12]
 8006e6e:	f7ff fe9e 	bl	8006bae <xdir_sum>
 8006e72:	4603      	mov	r3, r0
 8006e74:	4619      	mov	r1, r3
 8006e76:	4620      	mov	r0, r4
 8006e78:	f7fe f90f 	bl	800509a <st_word>
	nent = dirb[XDIR_NumSec] + 1;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	3301      	adds	r3, #1
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	3301      	adds	r3, #1
 8006e84:	613b      	str	r3, [r7, #16]

	/* Store the set of directory to the volume */
	res = dir_sdi(dp, dp->blk_ofs);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f7ff fa8e 	bl	80063ae <dir_sdi>
 8006e92:	4603      	mov	r3, r0
 8006e94:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8006e96:	e026      	b.n	8006ee6 <store_xdir+0x8e>
		res = move_window(dp->obj.fs, dp->sect);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	4610      	mov	r0, r2
 8006ea4:	f7fe fbf6 	bl	8005694 <move_window>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d11d      	bne.n	8006eee <store_xdir+0x96>
		mem_cpy(dp->dir, dirb, SZDIRE);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006eb6:	2220      	movs	r2, #32
 8006eb8:	68f9      	ldr	r1, [r7, #12]
 8006eba:	4618      	mov	r0, r3
 8006ebc:	f7fe f9bc 	bl	8005238 <mem_cpy>
		dp->obj.fs->wflag = 1;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	70da      	strb	r2, [r3, #3]
		if (--nent == 0) break;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	3b01      	subs	r3, #1
 8006ecc:	613b      	str	r3, [r7, #16]
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d00e      	beq.n	8006ef2 <store_xdir+0x9a>
		dirb += SZDIRE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	3320      	adds	r3, #32
 8006ed8:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);
 8006eda:	2100      	movs	r1, #0
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f7ff fafa 	bl	80064d6 <dir_next>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d0d5      	beq.n	8006e98 <store_xdir+0x40>
 8006eec:	e002      	b.n	8006ef4 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8006eee:	bf00      	nop
 8006ef0:	e000      	b.n	8006ef4 <store_xdir+0x9c>
		if (--nent == 0) break;
 8006ef2:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <store_xdir+0xa8>
 8006efa:	7dfb      	ldrb	r3, [r7, #23]
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <store_xdir+0xac>
 8006f00:	7dfb      	ldrb	r3, [r7, #23]
 8006f02:	e000      	b.n	8006f06 <store_xdir+0xae>
 8006f04:	2302      	movs	r3, #2
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	371c      	adds	r7, #28
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	bd90      	pop	{r4, r7, pc}

08006f0e <create_xdir>:
static
void create_xdir (
	BYTE* dirb,			/* Pointer to the direcotry entry block buffer */
	const WCHAR* lfn	/* Pointer to the nul terminated file name */
)
{
 8006f0e:	b590      	push	{r4, r7, lr}
 8006f10:	b085      	sub	sp, #20
 8006f12:	af00      	add	r7, sp, #0
 8006f14:	6078      	str	r0, [r7, #4]
 8006f16:	6039      	str	r1, [r7, #0]
	BYTE nb, nc;
	WCHAR chr;


	/* Create 85+C0 entry */
	mem_set(dirb, 0, 2 * SZDIRE);
 8006f18:	2240      	movs	r2, #64	@ 0x40
 8006f1a:	2100      	movs	r1, #0
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7fe f9ac 	bl	800527a <mem_set>
	dirb[XDIR_Type] = 0x85;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	2285      	movs	r2, #133	@ 0x85
 8006f26:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_Type + SZDIRE] = 0xC0;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	3320      	adds	r3, #32
 8006f2c:	22c0      	movs	r2, #192	@ 0xc0
 8006f2e:	701a      	strb	r2, [r3, #0]

	/* Create C1 entries */
	nc = 0; nb = 1; chr = 1; i = SZDIRE * 2;
 8006f30:	2300      	movs	r3, #0
 8006f32:	72bb      	strb	r3, [r7, #10]
 8006f34:	2301      	movs	r3, #1
 8006f36:	72fb      	strb	r3, [r7, #11]
 8006f38:	2301      	movs	r3, #1
 8006f3a:	813b      	strh	r3, [r7, #8]
 8006f3c:	2340      	movs	r3, #64	@ 0x40
 8006f3e:	60fb      	str	r3, [r7, #12]
	do {
		dirb[i++] = 0xC1; dirb[i++] = 0;	/* Entry type C1 */
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	1c5a      	adds	r2, r3, #1
 8006f44:	60fa      	str	r2, [r7, #12]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	4413      	add	r3, r2
 8006f4a:	22c1      	movs	r2, #193	@ 0xc1
 8006f4c:	701a      	strb	r2, [r3, #0]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	1c5a      	adds	r2, r3, #1
 8006f52:	60fa      	str	r2, [r7, #12]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	4413      	add	r3, r2
 8006f58:	2200      	movs	r2, #0
 8006f5a:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr && (chr = lfn[nc]) != 0) nc++;	/* Get a character if exist */
 8006f5c:	893b      	ldrh	r3, [r7, #8]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d00b      	beq.n	8006f7a <create_xdir+0x6c>
 8006f62:	7abb      	ldrb	r3, [r7, #10]
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	683a      	ldr	r2, [r7, #0]
 8006f68:	4413      	add	r3, r2
 8006f6a:	881b      	ldrh	r3, [r3, #0]
 8006f6c:	813b      	strh	r3, [r7, #8]
 8006f6e:	893b      	ldrh	r3, [r7, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d002      	beq.n	8006f7a <create_xdir+0x6c>
 8006f74:	7abb      	ldrb	r3, [r7, #10]
 8006f76:	3301      	adds	r3, #1
 8006f78:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 		/* Store it */
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	893a      	ldrh	r2, [r7, #8]
 8006f82:	4611      	mov	r1, r2
 8006f84:	4618      	mov	r0, r3
 8006f86:	f7fe f888 	bl	800509a <st_word>
		} while ((i += 2) % SZDIRE != 0);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3302      	adds	r3, #2
 8006f8e:	60fb      	str	r3, [r7, #12]
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	f003 031f 	and.w	r3, r3, #31
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e0      	bne.n	8006f5c <create_xdir+0x4e>
		nb++;
 8006f9a:	7afb      	ldrb	r3, [r7, #11]
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nc]);	/* Fill next entry if any char follows */
 8006fa0:	7abb      	ldrb	r3, [r7, #10]
 8006fa2:	005b      	lsls	r3, r3, #1
 8006fa4:	683a      	ldr	r2, [r7, #0]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	881b      	ldrh	r3, [r3, #0]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1c8      	bne.n	8006f40 <create_xdir+0x32>

	dirb[XDIR_NumName] = nc;	/* Set name length */
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	3323      	adds	r3, #35	@ 0x23
 8006fb2:	7aba      	ldrb	r2, [r7, #10]
 8006fb4:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = nb;		/* Set block length */
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	7afa      	ldrb	r2, [r7, #11]
 8006fbc:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8006fc4:	6838      	ldr	r0, [r7, #0]
 8006fc6:	f7ff fe22 	bl	8006c0e <xname_sum>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4620      	mov	r0, r4
 8006fd0:	f7fe f863 	bl	800509a <st_word>
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd90      	pop	{r4, r7, pc}

08006fdc <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	6078      	str	r0, [r7, #4]
 8006fe4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 8006ff0:	23ff      	movs	r3, #255	@ 0xff
 8006ff2:	757b      	strb	r3, [r7, #21]
 8006ff4:	23ff      	movs	r3, #255	@ 0xff
 8006ff6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 8006ff8:	e09f      	b.n	800713a <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	4619      	mov	r1, r3
 8007000:	6938      	ldr	r0, [r7, #16]
 8007002:	f7fe fb47 	bl	8005694 <move_window>
 8007006:	4603      	mov	r3, r0
 8007008:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800700a:	7dfb      	ldrb	r3, [r7, #23]
 800700c:	2b00      	cmp	r3, #0
 800700e:	f040 809a 	bne.w	8007146 <dir_read+0x16a>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800701a:	7dbb      	ldrb	r3, [r7, #22]
 800701c:	2b00      	cmp	r3, #0
 800701e:	d102      	bne.n	8007026 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 8007020:	2304      	movs	r3, #4
 8007022:	75fb      	strb	r3, [r7, #23]
 8007024:	e096      	b.n	8007154 <dir_read+0x178>
		}
#if _FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8007026:	693b      	ldr	r3, [r7, #16]
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b04      	cmp	r3, #4
 800702c:	d118      	bne.n	8007060 <dir_read+0x84>
			if (_USE_LABEL && vol) {
				if (c == 0x83) break;	/* Volume label entry? */
			} else {
				if (c == 0x85) {		/* Start of the file entry block? */
 800702e:	7dbb      	ldrb	r3, [r7, #22]
 8007030:	2b85      	cmp	r3, #133	@ 0x85
 8007032:	d179      	bne.n	8007128 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7ff fe17 	bl	8006c70 <load_xdir>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 8007046:	7dfb      	ldrb	r3, [r7, #23]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d17e      	bne.n	800714a <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 800704c:	693b      	ldr	r3, [r7, #16]
 800704e:	695b      	ldr	r3, [r3, #20]
 8007050:	3304      	adds	r3, #4
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007058:	b2da      	uxtb	r2, r3
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800705e:	e074      	b.n	800714a <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007064:	330b      	adds	r3, #11
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800706c:	73fb      	strb	r3, [r7, #15]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	7bfa      	ldrb	r2, [r7, #15]
 8007072:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8007074:	7dbb      	ldrb	r3, [r7, #22]
 8007076:	2be5      	cmp	r3, #229	@ 0xe5
 8007078:	d00e      	beq.n	8007098 <dir_read+0xbc>
 800707a:	7dbb      	ldrb	r3, [r7, #22]
 800707c:	2b2e      	cmp	r3, #46	@ 0x2e
 800707e:	d00b      	beq.n	8007098 <dir_read+0xbc>
 8007080:	7bfb      	ldrb	r3, [r7, #15]
 8007082:	f023 0320 	bic.w	r3, r3, #32
 8007086:	2b08      	cmp	r3, #8
 8007088:	bf0c      	ite	eq
 800708a:	2301      	moveq	r3, #1
 800708c:	2300      	movne	r3, #0
 800708e:	b2db      	uxtb	r3, r3
 8007090:	461a      	mov	r2, r3
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	4293      	cmp	r3, r2
 8007096:	d002      	beq.n	800709e <dir_read+0xc2>
				ord = 0xFF;
 8007098:	23ff      	movs	r3, #255	@ 0xff
 800709a:	757b      	strb	r3, [r7, #21]
 800709c:	e044      	b.n	8007128 <dir_read+0x14c>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800709e:	7bfb      	ldrb	r3, [r7, #15]
 80070a0:	2b0f      	cmp	r3, #15
 80070a2:	d12f      	bne.n	8007104 <dir_read+0x128>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 80070a4:	7dbb      	ldrb	r3, [r7, #22]
 80070a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00d      	beq.n	80070ca <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070b2:	7b5b      	ldrb	r3, [r3, #13]
 80070b4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 80070b6:	7dbb      	ldrb	r3, [r7, #22]
 80070b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070bc:	75bb      	strb	r3, [r7, #22]
 80070be:	7dbb      	ldrb	r3, [r7, #22]
 80070c0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80070ca:	7dba      	ldrb	r2, [r7, #22]
 80070cc:	7d7b      	ldrb	r3, [r7, #21]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d115      	bne.n	80070fe <dir_read+0x122>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070d6:	330d      	adds	r3, #13
 80070d8:	781b      	ldrb	r3, [r3, #0]
 80070da:	7d3a      	ldrb	r2, [r7, #20]
 80070dc:	429a      	cmp	r2, r3
 80070de:	d10e      	bne.n	80070fe <dir_read+0x122>
 80070e0:	693b      	ldr	r3, [r7, #16]
 80070e2:	691a      	ldr	r2, [r3, #16]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80070e8:	4619      	mov	r1, r3
 80070ea:	4610      	mov	r0, r2
 80070ec:	f7ff fbe4 	bl	80068b8 <pick_lfn>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d003      	beq.n	80070fe <dir_read+0x122>
 80070f6:	7d7b      	ldrb	r3, [r7, #21]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	e000      	b.n	8007100 <dir_read+0x124>
 80070fe:	23ff      	movs	r3, #255	@ 0xff
 8007100:	757b      	strb	r3, [r7, #21]
 8007102:	e011      	b.n	8007128 <dir_read+0x14c>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 8007104:	7d7b      	ldrb	r3, [r7, #21]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <dir_read+0x142>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800710e:	4618      	mov	r0, r3
 8007110:	f7ff fd2c 	bl	8006b6c <sum_sfn>
 8007114:	4603      	mov	r3, r0
 8007116:	461a      	mov	r2, r3
 8007118:	7d3b      	ldrb	r3, [r7, #20]
 800711a:	4293      	cmp	r3, r2
 800711c:	d017      	beq.n	800714e <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f04f 32ff 	mov.w	r2, #4294967295
 8007124:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 8007126:	e012      	b.n	800714e <dir_read+0x172>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 8007128:	2100      	movs	r1, #0
 800712a:	6878      	ldr	r0, [r7, #4]
 800712c:	f7ff f9d3 	bl	80064d6 <dir_next>
 8007130:	4603      	mov	r3, r0
 8007132:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8007134:	7dfb      	ldrb	r3, [r7, #23]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d10b      	bne.n	8007152 <dir_read+0x176>
	while (dp->sect) {
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800713e:	2b00      	cmp	r3, #0
 8007140:	f47f af5b 	bne.w	8006ffa <dir_read+0x1e>
 8007144:	e006      	b.n	8007154 <dir_read+0x178>
		if (res != FR_OK) break;
 8007146:	bf00      	nop
 8007148:	e004      	b.n	8007154 <dir_read+0x178>
					break;
 800714a:	bf00      	nop
 800714c:	e002      	b.n	8007154 <dir_read+0x178>
					break;
 800714e:	bf00      	nop
 8007150:	e000      	b.n	8007154 <dir_read+0x178>
		if (res != FR_OK) break;
 8007152:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8007154:	7dfb      	ldrb	r3, [r7, #23]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d002      	beq.n	8007160 <dir_read+0x184>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 8007160:	7dfb      	ldrb	r3, [r7, #23]
}
 8007162:	4618      	mov	r0, r3
 8007164:	3718      	adds	r7, #24
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}

0800716a <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800716a:	b590      	push	{r4, r7, lr}
 800716c:	b089      	sub	sp, #36	@ 0x24
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8007178:	2100      	movs	r1, #0
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f7ff f917 	bl	80063ae <dir_sdi>
 8007180:	4603      	mov	r3, r0
 8007182:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8007184:	7ffb      	ldrb	r3, [r7, #31]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d001      	beq.n	800718e <dir_find+0x24>
 800718a:	7ffb      	ldrb	r3, [r7, #31]
 800718c:	e113      	b.n	80073b6 <dir_find+0x24c>
#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	781b      	ldrb	r3, [r3, #0]
 8007192:	2b04      	cmp	r3, #4
 8007194:	d165      	bne.n	8007262 <dir_find+0xf8>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	691b      	ldr	r3, [r3, #16]
 800719a:	4618      	mov	r0, r3
 800719c:	f7ff fd37 	bl	8006c0e <xname_sum>
 80071a0:	4603      	mov	r3, r0
 80071a2:	813b      	strh	r3, [r7, #8]

		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 80071a4:	e050      	b.n	8007248 <dir_find+0xde>
#if _MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > _MAX_LFN) continue;			/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	695b      	ldr	r3, [r3, #20]
 80071aa:	3324      	adds	r3, #36	@ 0x24
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fd fe5d 	bl	8004e6c <ld_word>
 80071b2:	4603      	mov	r3, r0
 80071b4:	461a      	mov	r2, r3
 80071b6:	893b      	ldrh	r3, [r7, #8]
 80071b8:	4293      	cmp	r3, r2
 80071ba:	d144      	bne.n	8007246 <dir_find+0xdc>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	695b      	ldr	r3, [r3, #20]
 80071c0:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 80071c4:	76fb      	strb	r3, [r7, #27]
 80071c6:	2340      	movs	r3, #64	@ 0x40
 80071c8:	617b      	str	r3, [r7, #20]
 80071ca:	2300      	movs	r3, #0
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	e029      	b.n	8007224 <dir_find+0xba>
				if ((di % SZDIRE) == 0) di += 2;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f003 031f 	and.w	r3, r3, #31
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d102      	bne.n	80071e0 <dir_find+0x76>
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	3302      	adds	r3, #2
 80071de:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	695a      	ldr	r2, [r3, #20]
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	4413      	add	r3, r2
 80071e8:	4618      	mov	r0, r3
 80071ea:	f7fd fe3f 	bl	8004e6c <ld_word>
 80071ee:	4603      	mov	r3, r0
 80071f0:	4618      	mov	r0, r3
 80071f2:	f002 fb17 	bl	8009824 <ff_wtoupper>
 80071f6:	4603      	mov	r3, r0
 80071f8:	461c      	mov	r4, r3
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	691a      	ldr	r2, [r3, #16]
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	005b      	lsls	r3, r3, #1
 8007202:	4413      	add	r3, r2
 8007204:	881b      	ldrh	r3, [r3, #0]
 8007206:	4618      	mov	r0, r3
 8007208:	f002 fb0c 	bl	8009824 <ff_wtoupper>
 800720c:	4603      	mov	r3, r0
 800720e:	429c      	cmp	r4, r3
 8007210:	d10c      	bne.n	800722c <dir_find+0xc2>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 8007212:	7efb      	ldrb	r3, [r7, #27]
 8007214:	3b01      	subs	r3, #1
 8007216:	76fb      	strb	r3, [r7, #27]
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	3302      	adds	r3, #2
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	693b      	ldr	r3, [r7, #16]
 8007220:	3301      	adds	r3, #1
 8007222:	613b      	str	r3, [r7, #16]
 8007224:	7efb      	ldrb	r3, [r7, #27]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1d2      	bne.n	80071d0 <dir_find+0x66>
 800722a:	e000      	b.n	800722e <dir_find+0xc4>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 800722c:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800722e:	7efb      	ldrb	r3, [r7, #27]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d109      	bne.n	8007248 <dir_find+0xde>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	691a      	ldr	r2, [r3, #16]
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	005b      	lsls	r3, r3, #1
 800723c:	4413      	add	r3, r2
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00b      	beq.n	800725c <dir_find+0xf2>
 8007244:	e000      	b.n	8007248 <dir_find+0xde>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8007246:	bf00      	nop
		while ((res = dir_read(dp, 0)) == FR_OK) {	/* Read an item */
 8007248:	2100      	movs	r1, #0
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff fec6 	bl	8006fdc <dir_read>
 8007250:	4603      	mov	r3, r0
 8007252:	77fb      	strb	r3, [r7, #31]
 8007254:	7ffb      	ldrb	r3, [r7, #31]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0a5      	beq.n	80071a6 <dir_find+0x3c>
 800725a:	e000      	b.n	800725e <dir_find+0xf4>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800725c:	bf00      	nop
		}
		return res;
 800725e:	7ffb      	ldrb	r3, [r7, #31]
 8007260:	e0a9      	b.n	80073b6 <dir_find+0x24c>
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007262:	23ff      	movs	r3, #255	@ 0xff
 8007264:	773b      	strb	r3, [r7, #28]
 8007266:	7f3b      	ldrb	r3, [r7, #28]
 8007268:	777b      	strb	r3, [r7, #29]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	f04f 32ff 	mov.w	r2, #4294967295
 8007270:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007276:	4619      	mov	r1, r3
 8007278:	68f8      	ldr	r0, [r7, #12]
 800727a:	f7fe fa0b 	bl	8005694 <move_window>
 800727e:	4603      	mov	r3, r0
 8007280:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8007282:	7ffb      	ldrb	r3, [r7, #31]
 8007284:	2b00      	cmp	r3, #0
 8007286:	f040 8090 	bne.w	80073aa <dir_find+0x240>
		c = dp->dir[DIR_Name];
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8007292:	7fbb      	ldrb	r3, [r7, #30]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d102      	bne.n	800729e <dir_find+0x134>
 8007298:	2304      	movs	r3, #4
 800729a:	77fb      	strb	r3, [r7, #31]
 800729c:	e08a      	b.n	80073b4 <dir_find+0x24a>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072a2:	330b      	adds	r3, #11
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072aa:	72fb      	strb	r3, [r7, #11]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	7afa      	ldrb	r2, [r7, #11]
 80072b0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80072b2:	7fbb      	ldrb	r3, [r7, #30]
 80072b4:	2be5      	cmp	r3, #229	@ 0xe5
 80072b6:	d007      	beq.n	80072c8 <dir_find+0x15e>
 80072b8:	7afb      	ldrb	r3, [r7, #11]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d009      	beq.n	80072d6 <dir_find+0x16c>
 80072c2:	7afb      	ldrb	r3, [r7, #11]
 80072c4:	2b0f      	cmp	r3, #15
 80072c6:	d006      	beq.n	80072d6 <dir_find+0x16c>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072c8:	23ff      	movs	r3, #255	@ 0xff
 80072ca:	777b      	strb	r3, [r7, #29]
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f04f 32ff 	mov.w	r2, #4294967295
 80072d2:	64da      	str	r2, [r3, #76]	@ 0x4c
 80072d4:	e05e      	b.n	8007394 <dir_find+0x22a>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80072d6:	7afb      	ldrb	r3, [r7, #11]
 80072d8:	2b0f      	cmp	r3, #15
 80072da:	d136      	bne.n	800734a <dir_find+0x1e0>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80072e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d154      	bne.n	8007394 <dir_find+0x22a>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80072ea:	7fbb      	ldrb	r3, [r7, #30]
 80072ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d00d      	beq.n	8007310 <dir_find+0x1a6>
						sum = dp->dir[LDIR_Chksum];
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f8:	7b5b      	ldrb	r3, [r3, #13]
 80072fa:	773b      	strb	r3, [r7, #28]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 80072fc:	7fbb      	ldrb	r3, [r7, #30]
 80072fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007302:	77bb      	strb	r3, [r7, #30]
 8007304:	7fbb      	ldrb	r3, [r7, #30]
 8007306:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007310:	7fba      	ldrb	r2, [r7, #30]
 8007312:	7f7b      	ldrb	r3, [r7, #29]
 8007314:	429a      	cmp	r2, r3
 8007316:	d115      	bne.n	8007344 <dir_find+0x1da>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	330d      	adds	r3, #13
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	7f3a      	ldrb	r2, [r7, #28]
 8007322:	429a      	cmp	r2, r3
 8007324:	d10e      	bne.n	8007344 <dir_find+0x1da>
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800732e:	4619      	mov	r1, r3
 8007330:	4610      	mov	r0, r2
 8007332:	f7ff fa51 	bl	80067d8 <cmp_lfn>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d003      	beq.n	8007344 <dir_find+0x1da>
 800733c:	7f7b      	ldrb	r3, [r7, #29]
 800733e:	3b01      	subs	r3, #1
 8007340:	b2db      	uxtb	r3, r3
 8007342:	e000      	b.n	8007346 <dir_find+0x1dc>
 8007344:	23ff      	movs	r3, #255	@ 0xff
 8007346:	777b      	strb	r3, [r7, #29]
 8007348:	e024      	b.n	8007394 <dir_find+0x22a>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800734a:	7f7b      	ldrb	r3, [r7, #29]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d109      	bne.n	8007364 <dir_find+0x1fa>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007354:	4618      	mov	r0, r3
 8007356:	f7ff fc09 	bl	8006b6c <sum_sfn>
 800735a:	4603      	mov	r3, r0
 800735c:	461a      	mov	r2, r3
 800735e:	7f3b      	ldrb	r3, [r7, #28]
 8007360:	4293      	cmp	r3, r2
 8007362:	d024      	beq.n	80073ae <dir_find+0x244>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 800736a:	f003 0301 	and.w	r3, r3, #1
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10a      	bne.n	8007388 <dir_find+0x21e>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	3340      	adds	r3, #64	@ 0x40
 800737a:	220b      	movs	r2, #11
 800737c:	4619      	mov	r1, r3
 800737e:	f7fd ff97 	bl	80052b0 <mem_cmp>
 8007382:	4603      	mov	r3, r0
 8007384:	2b00      	cmp	r3, #0
 8007386:	d014      	beq.n	80073b2 <dir_find+0x248>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007388:	23ff      	movs	r3, #255	@ 0xff
 800738a:	777b      	strb	r3, [r7, #29]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f04f 32ff 	mov.w	r2, #4294967295
 8007392:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8007394:	2100      	movs	r1, #0
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f7ff f89d 	bl	80064d6 <dir_next>
 800739c:	4603      	mov	r3, r0
 800739e:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 80073a0:	7ffb      	ldrb	r3, [r7, #31]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f43f af65 	beq.w	8007272 <dir_find+0x108>
 80073a8:	e004      	b.n	80073b4 <dir_find+0x24a>
		if (res != FR_OK) break;
 80073aa:	bf00      	nop
 80073ac:	e002      	b.n	80073b4 <dir_find+0x24a>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80073ae:	bf00      	nop
 80073b0:	e000      	b.n	80073b4 <dir_find+0x24a>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80073b2:	bf00      	nop

	return res;
 80073b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3724      	adds	r7, #36	@ 0x24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd90      	pop	{r4, r7, pc}
	...

080073c0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80073c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80073c4:	b0a0      	sub	sp, #128	@ 0x80
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80073d6:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d001      	beq.n	80073e2 <dir_register+0x22>
 80073de:	2306      	movs	r3, #6
 80073e0:	e192      	b.n	8007708 <dir_register+0x348>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80073e2:	2300      	movs	r3, #0
 80073e4:	677b      	str	r3, [r7, #116]	@ 0x74
 80073e6:	e002      	b.n	80073ee <dir_register+0x2e>
 80073e8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073ea:	3301      	adds	r3, #1
 80073ec:	677b      	str	r3, [r7, #116]	@ 0x74
 80073ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80073f0:	691a      	ldr	r2, [r3, #16]
 80073f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80073f4:	005b      	lsls	r3, r3, #1
 80073f6:	4413      	add	r3, r2
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d1f4      	bne.n	80073e8 <dir_register+0x28>

#if _FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80073fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b04      	cmp	r3, #4
 8007404:	f040 80a3 	bne.w	800754e <dir_register+0x18e>
		DIR dj;

		nent = (nlen + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 8007408:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800740a:	330e      	adds	r3, #14
 800740c:	4aa4      	ldr	r2, [pc, #656]	@ (80076a0 <dir_register+0x2e0>)
 800740e:	fba2 2303 	umull	r2, r3, r2, r3
 8007412:	08db      	lsrs	r3, r3, #3
 8007414:	3302      	adds	r3, #2
 8007416:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, nent);		/* Allocate entries */
 8007418:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7ff f941 	bl	80066a2 <dir_alloc>
 8007420:	4603      	mov	r3, r0
 8007422:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 8007426:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <dir_register+0x74>
 800742e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007432:	e169      	b.n	8007708 <dir_register+0x348>
		dp->blk_ofs = dp->dptr - SZDIRE * (nent - 1);	/* Set the allocated entry block offset */
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007438:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800743a:	3b01      	subs	r3, #1
 800743c:	015b      	lsls	r3, r3, #5
 800743e:	1ad2      	subs	r2, r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.sclust != 0 && (dp->obj.stat & 4)) {	/* Has the sub-directory been stretched? */
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	2b00      	cmp	r3, #0
 800744a:	d076      	beq.n	800753a <dir_register+0x17a>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	79db      	ldrb	r3, [r3, #7]
 8007450:	f003 0304 	and.w	r3, r3, #4
 8007454:	2b00      	cmp	r3, #0
 8007456:	d070      	beq.n	800753a <dir_register+0x17a>
			dp->obj.objsize += (DWORD)fs->csize * SS(fs);	/* Increase the directory size by cluster size */
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800745e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007460:	8949      	ldrh	r1, [r1, #10]
 8007462:	4608      	mov	r0, r1
 8007464:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8007466:	8989      	ldrh	r1, [r1, #12]
 8007468:	fb00 f101 	mul.w	r1, r0, r1
 800746c:	2000      	movs	r0, #0
 800746e:	460c      	mov	r4, r1
 8007470:	4605      	mov	r5, r0
 8007472:	eb12 0804 	adds.w	r8, r2, r4
 8007476:	eb43 0905 	adc.w	r9, r3, r5
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	e9c3 8904 	strd	r8, r9, [r3, #16]
			res = fill_first_frag(&dp->obj);				/* Fill first fragment on the FAT if needed */
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4618      	mov	r0, r3
 8007484:	f7fe fd32 	bl	8005eec <fill_first_frag>
 8007488:	4603      	mov	r3, r0
 800748a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800748e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007492:	2b00      	cmp	r3, #0
 8007494:	d002      	beq.n	800749c <dir_register+0xdc>
 8007496:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800749a:	e135      	b.n	8007708 <dir_register+0x348>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80074a2:	f04f 32ff 	mov.w	r2, #4294967295
 80074a6:	4619      	mov	r1, r3
 80074a8:	f7fe fd4f 	bl	8005f4a <fill_last_frag>
 80074ac:	4603      	mov	r3, r0
 80074ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80074b2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <dir_register+0x100>
 80074ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80074be:	e123      	b.n	8007708 <dir_register+0x348>
			res = load_obj_dir(&dj, &dp->obj);				/* Load the object status */
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	f107 0308 	add.w	r3, r7, #8
 80074c6:	4611      	mov	r1, r2
 80074c8:	4618      	mov	r0, r3
 80074ca:	f7ff fc8f 	bl	8006dec <load_obj_dir>
 80074ce:	4603      	mov	r3, r0
 80074d0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 80074d4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d002      	beq.n	80074e2 <dir_register+0x122>
 80074dc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80074e0:	e112      	b.n	8007708 <dir_register+0x348>
			st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);		/* Update the allocation status */
 80074e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80074f0:	4608      	mov	r0, r1
 80074f2:	f7fd fe19 	bl	8005128 <st_qword>
			st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80074f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80074f8:	695b      	ldr	r3, [r3, #20]
 80074fa:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007504:	4608      	mov	r0, r1
 8007506:	f7fd fe0f 	bl	8005128 <st_qword>
			fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	79da      	ldrb	r2, [r3, #7]
 800750e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	3321      	adds	r3, #33	@ 0x21
 8007514:	f042 0201 	orr.w	r2, r2, #1
 8007518:	b2d2      	uxtb	r2, r2
 800751a:	701a      	strb	r2, [r3, #0]
			res = store_xdir(&dj);							/* Store the object status */
 800751c:	f107 0308 	add.w	r3, r7, #8
 8007520:	4618      	mov	r0, r3
 8007522:	f7ff fc99 	bl	8006e58 <store_xdir>
 8007526:	4603      	mov	r3, r0
 8007528:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800752c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007530:	2b00      	cmp	r3, #0
 8007532:	d002      	beq.n	800753a <dir_register+0x17a>
 8007534:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007538:	e0e6      	b.n	8007708 <dir_register+0x348>
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 800753a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007540:	691b      	ldr	r3, [r3, #16]
 8007542:	4619      	mov	r1, r3
 8007544:	4610      	mov	r0, r2
 8007546:	f7ff fce2 	bl	8006f0e <create_xdir>
		return FR_OK;
 800754a:	2300      	movs	r3, #0
 800754c:	e0dc      	b.n	8007708 <dir_register+0x348>
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007554:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007558:	220c      	movs	r2, #12
 800755a:	4618      	mov	r0, r3
 800755c:	f7fd fe6c 	bl	8005238 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8007560:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	d033      	beq.n	80075d4 <dir_register+0x214>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2240      	movs	r2, #64	@ 0x40
 8007570:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 8007574:	2301      	movs	r3, #1
 8007576:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007578:	e016      	b.n	80075a8 <dir_register+0x1e8>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 8007580:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007582:	691a      	ldr	r2, [r3, #16]
 8007584:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8007588:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800758a:	f7ff fa61 	bl	8006a50 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f7ff fdeb 	bl	800716a <dir_find>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 800759a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d106      	bne.n	80075b0 <dir_register+0x1f0>
		for (n = 1; n < 100; n++) {
 80075a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075a4:	3301      	adds	r3, #1
 80075a6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80075a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075aa:	2b63      	cmp	r3, #99	@ 0x63
 80075ac:	d9e5      	bls.n	800757a <dir_register+0x1ba>
 80075ae:	e000      	b.n	80075b2 <dir_register+0x1f2>
			if (res != FR_OK) break;
 80075b0:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80075b2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80075b4:	2b64      	cmp	r3, #100	@ 0x64
 80075b6:	d101      	bne.n	80075bc <dir_register+0x1fc>
 80075b8:	2307      	movs	r3, #7
 80075ba:	e0a5      	b.n	8007708 <dir_register+0x348>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80075bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80075c0:	2b04      	cmp	r3, #4
 80075c2:	d002      	beq.n	80075ca <dir_register+0x20a>
 80075c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80075c8:	e09e      	b.n	8007708 <dir_register+0x348>
		dp->fn[NSFLAG] = sn[NSFLAG];
 80075ca:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80075d4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d007      	beq.n	80075f0 <dir_register+0x230>
 80075e0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075e2:	330c      	adds	r3, #12
 80075e4:	4a2f      	ldr	r2, [pc, #188]	@ (80076a4 <dir_register+0x2e4>)
 80075e6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ea:	089b      	lsrs	r3, r3, #2
 80075ec:	3301      	adds	r3, #1
 80075ee:	e000      	b.n	80075f2 <dir_register+0x232>
 80075f0:	2301      	movs	r3, #1
 80075f2:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80075f4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff f853 	bl	80066a2 <dir_alloc>
 80075fc:	4603      	mov	r3, r0
 80075fe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8007602:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007606:	2b00      	cmp	r3, #0
 8007608:	d14f      	bne.n	80076aa <dir_register+0x2ea>
 800760a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800760c:	3b01      	subs	r3, #1
 800760e:	673b      	str	r3, [r7, #112]	@ 0x70
 8007610:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007612:	2b00      	cmp	r3, #0
 8007614:	d049      	beq.n	80076aa <dir_register+0x2ea>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800761a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800761c:	015b      	lsls	r3, r3, #5
 800761e:	1ad3      	subs	r3, r2, r3
 8007620:	4619      	mov	r1, r3
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f7fe fec3 	bl	80063ae <dir_sdi>
 8007628:	4603      	mov	r3, r0
 800762a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800762e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8007632:	2b00      	cmp	r3, #0
 8007634:	d139      	bne.n	80076aa <dir_register+0x2ea>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	3340      	adds	r3, #64	@ 0x40
 800763a:	4618      	mov	r0, r3
 800763c:	f7ff fa96 	bl	8006b6c <sum_sfn>
 8007640:	4603      	mov	r3, r0
 8007642:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800764a:	4619      	mov	r1, r3
 800764c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800764e:	f7fe f821 	bl	8005694 <move_window>
 8007652:	4603      	mov	r3, r0
 8007654:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8007658:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800765c:	2b00      	cmp	r3, #0
 800765e:	d123      	bne.n	80076a8 <dir_register+0x2e8>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007660:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007662:	6918      	ldr	r0, [r3, #16]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8007668:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800766a:	b2da      	uxtb	r2, r3
 800766c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8007670:	f7ff f986 	bl	8006980 <put_lfn>
				fs->wflag = 1;
 8007674:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007676:	2201      	movs	r2, #1
 8007678:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800767a:	2100      	movs	r1, #0
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f7fe ff2a 	bl	80064d6 <dir_next>
 8007682:	4603      	mov	r3, r0
 8007684:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --nent);
 8007688:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800768c:	2b00      	cmp	r3, #0
 800768e:	d10c      	bne.n	80076aa <dir_register+0x2ea>
 8007690:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007692:	3b01      	subs	r3, #1
 8007694:	673b      	str	r3, [r7, #112]	@ 0x70
 8007696:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1d4      	bne.n	8007646 <dir_register+0x286>
 800769c:	e005      	b.n	80076aa <dir_register+0x2ea>
 800769e:	bf00      	nop
 80076a0:	88888889 	.word	0x88888889
 80076a4:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 80076a8:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 80076aa:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d128      	bne.n	8007704 <dir_register+0x344>
		res = move_window(fs, dp->sect);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b6:	4619      	mov	r1, r3
 80076b8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80076ba:	f7fd ffeb 	bl	8005694 <move_window>
 80076be:	4603      	mov	r3, r0
 80076c0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 80076c4:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d11b      	bne.n	8007704 <dir_register+0x344>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076d0:	2220      	movs	r2, #32
 80076d2:	2100      	movs	r1, #0
 80076d4:	4618      	mov	r0, r3
 80076d6:	f7fd fdd0 	bl	800527a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	3340      	adds	r3, #64	@ 0x40
 80076e2:	220b      	movs	r2, #11
 80076e4:	4619      	mov	r1, r3
 80076e6:	f7fd fda7 	bl	8005238 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076f4:	330c      	adds	r3, #12
 80076f6:	f002 0218 	and.w	r2, r2, #24
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80076fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007700:	2201      	movs	r2, #1
 8007702:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8007704:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8007708:	4618      	mov	r0, r3
 800770a:	3780      	adds	r7, #128	@ 0x80
 800770c:	46bd      	mov	sp, r7
 800770e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007712:	bf00      	nop

08007714 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b08a      	sub	sp, #40	@ 0x28
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	613b      	str	r3, [r7, #16]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	691b      	ldr	r3, [r3, #16]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	1c5a      	adds	r2, r3, #1
 8007738:	61ba      	str	r2, [r7, #24]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	4413      	add	r3, r2
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8007742:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007744:	2b1f      	cmp	r3, #31
 8007746:	d940      	bls.n	80077ca <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007748:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800774a:	2b2f      	cmp	r3, #47	@ 0x2f
 800774c:	d006      	beq.n	800775c <create_name+0x48>
 800774e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007750:	2b5c      	cmp	r3, #92	@ 0x5c
 8007752:	d110      	bne.n	8007776 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007754:	e002      	b.n	800775c <create_name+0x48>
 8007756:	69bb      	ldr	r3, [r7, #24]
 8007758:	3301      	adds	r3, #1
 800775a:	61bb      	str	r3, [r7, #24]
 800775c:	693a      	ldr	r2, [r7, #16]
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	4413      	add	r3, r2
 8007762:	781b      	ldrb	r3, [r3, #0]
 8007764:	2b2f      	cmp	r3, #47	@ 0x2f
 8007766:	d0f6      	beq.n	8007756 <create_name+0x42>
 8007768:	693a      	ldr	r2, [r7, #16]
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	4413      	add	r3, r2
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2b5c      	cmp	r3, #92	@ 0x5c
 8007772:	d0f0      	beq.n	8007756 <create_name+0x42>
			break;
 8007774:	e02a      	b.n	80077cc <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	2bfe      	cmp	r3, #254	@ 0xfe
 800777a:	d901      	bls.n	8007780 <create_name+0x6c>
 800777c:	2306      	movs	r3, #6
 800777e:	e17d      	b.n	8007a7c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8007780:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007782:	b2db      	uxtb	r3, r3
 8007784:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007786:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007788:	2101      	movs	r1, #1
 800778a:	4618      	mov	r0, r3
 800778c:	f002 f80e 	bl	80097ac <ff_convert>
 8007790:	4603      	mov	r3, r0
 8007792:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007794:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <create_name+0x8a>
 800779a:	2306      	movs	r3, #6
 800779c:	e16e      	b.n	8007a7c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800779e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80077a2:	d809      	bhi.n	80077b8 <create_name+0xa4>
 80077a4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077a6:	4619      	mov	r1, r3
 80077a8:	488d      	ldr	r0, [pc, #564]	@ (80079e0 <create_name+0x2cc>)
 80077aa:	f7fd fda8 	bl	80052fe <chk_chr>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <create_name+0xa4>
 80077b4:	2306      	movs	r3, #6
 80077b6:	e161      	b.n	8007a7c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	1c5a      	adds	r2, r3, #1
 80077bc:	617a      	str	r2, [r7, #20]
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	68fa      	ldr	r2, [r7, #12]
 80077c2:	4413      	add	r3, r2
 80077c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80077c6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80077c8:	e7b4      	b.n	8007734 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 80077ca:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	441a      	add	r2, r3
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80077d6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077d8:	2b1f      	cmp	r3, #31
 80077da:	d801      	bhi.n	80077e0 <create_name+0xcc>
 80077dc:	2304      	movs	r3, #4
 80077de:	e000      	b.n	80077e2 <create_name+0xce>
 80077e0:	2300      	movs	r3, #0
 80077e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80077e6:	e011      	b.n	800780c <create_name+0xf8>
		w = lfn[di - 1];
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80077ee:	3b01      	subs	r3, #1
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	68fa      	ldr	r2, [r7, #12]
 80077f4:	4413      	add	r3, r2
 80077f6:	881b      	ldrh	r3, [r3, #0]
 80077f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80077fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80077fc:	2b20      	cmp	r3, #32
 80077fe:	d002      	beq.n	8007806 <create_name+0xf2>
 8007800:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007802:	2b2e      	cmp	r3, #46	@ 0x2e
 8007804:	d106      	bne.n	8007814 <create_name+0x100>
		di--;
 8007806:	697b      	ldr	r3, [r7, #20]
 8007808:	3b01      	subs	r3, #1
 800780a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800780c:	697b      	ldr	r3, [r7, #20]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1ea      	bne.n	80077e8 <create_name+0xd4>
 8007812:	e000      	b.n	8007816 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8007814:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	005b      	lsls	r3, r3, #1
 800781a:	68fa      	ldr	r2, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	2200      	movs	r2, #0
 8007820:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d101      	bne.n	800782c <create_name+0x118>
 8007828:	2306      	movs	r3, #6
 800782a:	e127      	b.n	8007a7c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	3340      	adds	r3, #64	@ 0x40
 8007830:	220b      	movs	r2, #11
 8007832:	2120      	movs	r1, #32
 8007834:	4618      	mov	r0, r3
 8007836:	f7fd fd20 	bl	800527a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800783a:	2300      	movs	r3, #0
 800783c:	61bb      	str	r3, [r7, #24]
 800783e:	e002      	b.n	8007846 <create_name+0x132>
 8007840:	69bb      	ldr	r3, [r7, #24]
 8007842:	3301      	adds	r3, #1
 8007844:	61bb      	str	r3, [r7, #24]
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	4413      	add	r3, r2
 800784e:	881b      	ldrh	r3, [r3, #0]
 8007850:	2b20      	cmp	r3, #32
 8007852:	d0f5      	beq.n	8007840 <create_name+0x12c>
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4413      	add	r3, r2
 800785c:	881b      	ldrh	r3, [r3, #0]
 800785e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007860:	d0ee      	beq.n	8007840 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8007862:	69bb      	ldr	r3, [r7, #24]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d009      	beq.n	800787c <create_name+0x168>
 8007868:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800786c:	f043 0303 	orr.w	r3, r3, #3
 8007870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007874:	e002      	b.n	800787c <create_name+0x168>
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	3b01      	subs	r3, #1
 800787a:	617b      	str	r3, [r7, #20]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d009      	beq.n	8007896 <create_name+0x182>
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007888:	3b01      	subs	r3, #1
 800788a:	005b      	lsls	r3, r3, #1
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	4413      	add	r3, r2
 8007890:	881b      	ldrh	r3, [r3, #0]
 8007892:	2b2e      	cmp	r3, #46	@ 0x2e
 8007894:	d1ef      	bne.n	8007876 <create_name+0x162>

	i = b = 0; ni = 8;
 8007896:	2300      	movs	r3, #0
 8007898:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800789c:	2300      	movs	r3, #0
 800789e:	623b      	str	r3, [r7, #32]
 80078a0:	2308      	movs	r3, #8
 80078a2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80078a4:	69bb      	ldr	r3, [r7, #24]
 80078a6:	1c5a      	adds	r2, r3, #1
 80078a8:	61ba      	str	r2, [r7, #24]
 80078aa:	005b      	lsls	r3, r3, #1
 80078ac:	68fa      	ldr	r2, [r7, #12]
 80078ae:	4413      	add	r3, r2
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80078b4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	f000 8090 	beq.w	80079dc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80078bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078be:	2b20      	cmp	r3, #32
 80078c0:	d006      	beq.n	80078d0 <create_name+0x1bc>
 80078c2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80078c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80078c6:	d10a      	bne.n	80078de <create_name+0x1ca>
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	429a      	cmp	r2, r3
 80078ce:	d006      	beq.n	80078de <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 80078d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078d4:	f043 0303 	orr.w	r3, r3, #3
 80078d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80078dc:	e07d      	b.n	80079da <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80078de:	6a3a      	ldr	r2, [r7, #32]
 80078e0:	69fb      	ldr	r3, [r7, #28]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d203      	bcs.n	80078ee <create_name+0x1da>
 80078e6:	69ba      	ldr	r2, [r7, #24]
 80078e8:	697b      	ldr	r3, [r7, #20]
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d123      	bne.n	8007936 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80078ee:	69fb      	ldr	r3, [r7, #28]
 80078f0:	2b0b      	cmp	r3, #11
 80078f2:	d106      	bne.n	8007902 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80078f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80078f8:	f043 0303 	orr.w	r3, r3, #3
 80078fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007900:	e075      	b.n	80079ee <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8007902:	69ba      	ldr	r2, [r7, #24]
 8007904:	697b      	ldr	r3, [r7, #20]
 8007906:	429a      	cmp	r2, r3
 8007908:	d005      	beq.n	8007916 <create_name+0x202>
 800790a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800790e:	f043 0303 	orr.w	r3, r3, #3
 8007912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8007916:	69ba      	ldr	r2, [r7, #24]
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	429a      	cmp	r2, r3
 800791c:	d866      	bhi.n	80079ec <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	61bb      	str	r3, [r7, #24]
 8007922:	2308      	movs	r3, #8
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	230b      	movs	r3, #11
 8007928:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800792a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800792e:	009b      	lsls	r3, r3, #2
 8007930:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007934:	e051      	b.n	80079da <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007936:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007938:	2b7f      	cmp	r3, #127	@ 0x7f
 800793a:	d914      	bls.n	8007966 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800793c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800793e:	2100      	movs	r1, #0
 8007940:	4618      	mov	r0, r3
 8007942:	f001 ff33 	bl	80097ac <ff_convert>
 8007946:	4603      	mov	r3, r0
 8007948:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800794a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800794c:	2b00      	cmp	r3, #0
 800794e:	d004      	beq.n	800795a <create_name+0x246>
 8007950:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007952:	3b80      	subs	r3, #128	@ 0x80
 8007954:	4a23      	ldr	r2, [pc, #140]	@ (80079e4 <create_name+0x2d0>)
 8007956:	5cd3      	ldrb	r3, [r2, r3]
 8007958:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800795a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800795e:	f043 0302 	orr.w	r3, r3, #2
 8007962:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007966:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007968:	2b00      	cmp	r3, #0
 800796a:	d007      	beq.n	800797c <create_name+0x268>
 800796c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800796e:	4619      	mov	r1, r3
 8007970:	481d      	ldr	r0, [pc, #116]	@ (80079e8 <create_name+0x2d4>)
 8007972:	f7fd fcc4 	bl	80052fe <chk_chr>
 8007976:	4603      	mov	r3, r0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d008      	beq.n	800798e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800797c:	235f      	movs	r3, #95	@ 0x5f
 800797e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8007980:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007984:	f043 0303 	orr.w	r3, r3, #3
 8007988:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800798c:	e01b      	b.n	80079c6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800798e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007990:	2b40      	cmp	r3, #64	@ 0x40
 8007992:	d909      	bls.n	80079a8 <create_name+0x294>
 8007994:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007996:	2b5a      	cmp	r3, #90	@ 0x5a
 8007998:	d806      	bhi.n	80079a8 <create_name+0x294>
					b |= 2;
 800799a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800799e:	f043 0302 	orr.w	r3, r3, #2
 80079a2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80079a6:	e00e      	b.n	80079c6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80079a8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079aa:	2b60      	cmp	r3, #96	@ 0x60
 80079ac:	d90b      	bls.n	80079c6 <create_name+0x2b2>
 80079ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079b0:	2b7a      	cmp	r3, #122	@ 0x7a
 80079b2:	d808      	bhi.n	80079c6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80079b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80079b8:	f043 0301 	orr.w	r3, r3, #1
 80079bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80079c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80079c2:	3b20      	subs	r3, #32
 80079c4:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80079c6:	6a3b      	ldr	r3, [r7, #32]
 80079c8:	1c5a      	adds	r2, r3, #1
 80079ca:	623a      	str	r2, [r7, #32]
 80079cc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80079ce:	b2d1      	uxtb	r1, r2
 80079d0:	687a      	ldr	r2, [r7, #4]
 80079d2:	4413      	add	r3, r2
 80079d4:	460a      	mov	r2, r1
 80079d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		w = lfn[si++];					/* Get an LFN character */
 80079da:	e763      	b.n	80078a4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80079dc:	bf00      	nop
 80079de:	e006      	b.n	80079ee <create_name+0x2da>
 80079e0:	0800a35c 	.word	0x0800a35c
 80079e4:	0800a3f8 	.word	0x0800a3f8
 80079e8:	0800a368 	.word	0x0800a368
			if (si > di) break;			/* No extension */
 80079ec:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80079f4:	2be5      	cmp	r3, #229	@ 0xe5
 80079f6:	d103      	bne.n	8007a00 <create_name+0x2ec>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2205      	movs	r2, #5
 80079fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	2b08      	cmp	r3, #8
 8007a04:	d104      	bne.n	8007a10 <create_name+0x2fc>
 8007a06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8007a10:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a14:	f003 030c 	and.w	r3, r3, #12
 8007a18:	2b0c      	cmp	r3, #12
 8007a1a:	d005      	beq.n	8007a28 <create_name+0x314>
 8007a1c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a20:	f003 0303 	and.w	r3, r3, #3
 8007a24:	2b03      	cmp	r3, #3
 8007a26:	d105      	bne.n	8007a34 <create_name+0x320>
 8007a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a2c:	f043 0302 	orr.w	r3, r3, #2
 8007a30:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8007a34:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d117      	bne.n	8007a70 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007a40:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a44:	f003 0303 	and.w	r3, r3, #3
 8007a48:	2b01      	cmp	r3, #1
 8007a4a:	d105      	bne.n	8007a58 <create_name+0x344>
 8007a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a50:	f043 0310 	orr.w	r3, r3, #16
 8007a54:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007a58:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007a5c:	f003 030c 	and.w	r3, r3, #12
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d105      	bne.n	8007a70 <create_name+0x35c>
 8007a64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a68:	f043 0308 	orr.w	r3, r3, #8
 8007a6c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007a76:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 8007a7a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3728      	adds	r7, #40	@ 0x28
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007a98:	e002      	b.n	8007aa0 <follow_path+0x1c>
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	3301      	adds	r3, #1
 8007a9e:	603b      	str	r3, [r7, #0]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	2b2f      	cmp	r3, #47	@ 0x2f
 8007aa6:	d0f8      	beq.n	8007a9a <follow_path+0x16>
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b5c      	cmp	r3, #92	@ 0x5c
 8007aae:	d0f4      	beq.n	8007a9a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8007ab0:	693b      	ldr	r3, [r7, #16]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	609a      	str	r2, [r3, #8]
	}
#if _FS_EXFAT
	obj->n_frag = 0;	/* Invalidate last fragment counter of the object */
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	61da      	str	r2, [r3, #28]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b1f      	cmp	r3, #31
 8007ac2:	d80a      	bhi.n	8007ada <follow_path+0x56>
		dp->fn[NSFLAG] = NS_NONAME;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2280      	movs	r2, #128	@ 0x80
 8007ac8:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 8007acc:	2100      	movs	r1, #0
 8007ace:	6878      	ldr	r0, [r7, #4]
 8007ad0:	f7fe fc6d 	bl	80063ae <dir_sdi>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	75fb      	strb	r3, [r7, #23]
 8007ad8:	e07d      	b.n	8007bd6 <follow_path+0x152>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007ada:	463b      	mov	r3, r7
 8007adc:	4619      	mov	r1, r3
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff fe18 	bl	8007714 <create_name>
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007ae8:	7dfb      	ldrb	r3, [r7, #23]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d16e      	bne.n	8007bcc <follow_path+0x148>
			res = dir_find(dp);				/* Find an object with the segment name */
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7ff fb3b 	bl	800716a <dir_find>
 8007af4:	4603      	mov	r3, r0
 8007af6:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8007afe:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8007b00:	7dfb      	ldrb	r3, [r7, #23]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00a      	beq.n	8007b1c <follow_path+0x98>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8007b06:	7dfb      	ldrb	r3, [r7, #23]
 8007b08:	2b04      	cmp	r3, #4
 8007b0a:	d161      	bne.n	8007bd0 <follow_path+0x14c>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8007b0c:	7afb      	ldrb	r3, [r7, #11]
 8007b0e:	f003 0304 	and.w	r3, r3, #4
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d15c      	bne.n	8007bd0 <follow_path+0x14c>
 8007b16:	2305      	movs	r3, #5
 8007b18:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8007b1a:	e059      	b.n	8007bd0 <follow_path+0x14c>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007b1c:	7afb      	ldrb	r3, [r7, #11]
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d156      	bne.n	8007bd4 <follow_path+0x150>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8007b26:	693b      	ldr	r3, [r7, #16]
 8007b28:	799b      	ldrb	r3, [r3, #6]
 8007b2a:	f003 0310 	and.w	r3, r3, #16
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d102      	bne.n	8007b38 <follow_path+0xb4>
				res = FR_NO_PATH; break;
 8007b32:	2305      	movs	r3, #5
 8007b34:	75fb      	strb	r3, [r7, #23]
 8007b36:	e04e      	b.n	8007bd6 <follow_path+0x152>
			}
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {		/* Save containing directory information for next dir */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	781b      	ldrb	r3, [r3, #0]
 8007b3c:	2b04      	cmp	r3, #4
 8007b3e:	d130      	bne.n	8007ba2 <follow_path+0x11e>
				obj->c_scl = obj->sclust;
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	621a      	str	r2, [r3, #32]
				obj->c_size = ((DWORD)obj->objsize & 0xFFFFFF00) | obj->stat;
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007b54:	693a      	ldr	r2, [r7, #16]
 8007b56:	79d2      	ldrb	r2, [r2, #7]
 8007b58:	431a      	orrs	r2, r3
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	625a      	str	r2, [r3, #36]	@ 0x24
				obj->c_ofs = dp->blk_ofs;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	629a      	str	r2, [r3, #40]	@ 0x28
				obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Open next directory */
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	3334      	adds	r3, #52	@ 0x34
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f7fd f996 	bl	8004e9e <ld_dword>
 8007b72:	4602      	mov	r2, r0
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	609a      	str	r2, [r3, #8]
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	695b      	ldr	r3, [r3, #20]
 8007b7c:	3321      	adds	r3, #33	@ 0x21
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	f003 0302 	and.w	r3, r3, #2
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	71da      	strb	r2, [r3, #7]
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	3338      	adds	r3, #56	@ 0x38
 8007b90:	4618      	mov	r0, r3
 8007b92:	f7fd f9a7 	bl	8004ee4 <ld_qword>
 8007b96:	4602      	mov	r2, r0
 8007b98:	460b      	mov	r3, r1
 8007b9a:	6939      	ldr	r1, [r7, #16]
 8007b9c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8007ba0:	e79b      	b.n	8007ada <follow_path+0x56>
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f103 013c 	add.w	r1, r3, #60	@ 0x3c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	8992      	ldrh	r2, [r2, #12]
 8007bb0:	fbb3 f0f2 	udiv	r0, r3, r2
 8007bb4:	fb00 f202 	mul.w	r2, r0, r2
 8007bb8:	1a9b      	subs	r3, r3, r2
 8007bba:	440b      	add	r3, r1
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	68f8      	ldr	r0, [r7, #12]
 8007bc0:	f7fe fdcb 	bl	800675a <ld_clust>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007bca:	e786      	b.n	8007ada <follow_path+0x56>
			if (res != FR_OK) break;
 8007bcc:	bf00      	nop
 8007bce:	e002      	b.n	8007bd6 <follow_path+0x152>
				break;
 8007bd0:	bf00      	nop
 8007bd2:	e000      	b.n	8007bd6 <follow_path+0x152>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007bd4:	bf00      	nop
			}
		}
	}

	return res;
 8007bd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd8:	4618      	mov	r0, r3
 8007bda:	3718      	adds	r7, #24
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}

08007be0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b087      	sub	sp, #28
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007be8:	f04f 33ff 	mov.w	r3, #4294967295
 8007bec:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d031      	beq.n	8007c5a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	617b      	str	r3, [r7, #20]
 8007bfc:	e002      	b.n	8007c04 <get_ldnumber+0x24>
 8007bfe:	697b      	ldr	r3, [r7, #20]
 8007c00:	3301      	adds	r3, #1
 8007c02:	617b      	str	r3, [r7, #20]
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b1f      	cmp	r3, #31
 8007c0a:	d903      	bls.n	8007c14 <get_ldnumber+0x34>
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	2b3a      	cmp	r3, #58	@ 0x3a
 8007c12:	d1f4      	bne.n	8007bfe <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	2b3a      	cmp	r3, #58	@ 0x3a
 8007c1a:	d11c      	bne.n	8007c56 <get_ldnumber+0x76>
			tp = *path;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	1c5a      	adds	r2, r3, #1
 8007c26:	60fa      	str	r2, [r7, #12]
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	3b30      	subs	r3, #48	@ 0x30
 8007c2c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b09      	cmp	r3, #9
 8007c32:	d80e      	bhi.n	8007c52 <get_ldnumber+0x72>
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	697b      	ldr	r3, [r7, #20]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	d10a      	bne.n	8007c52 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	2b01      	cmp	r3, #1
 8007c40:	d807      	bhi.n	8007c52 <get_ldnumber+0x72>
					vol = (int)i;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	3301      	adds	r3, #1
 8007c4a:	617b      	str	r3, [r7, #20]
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8007c52:	693b      	ldr	r3, [r7, #16]
 8007c54:	e002      	b.n	8007c5c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8007c56:	2300      	movs	r3, #0
 8007c58:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8007c5a:	693b      	ldr	r3, [r7, #16]
}
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	371c      	adds	r7, #28
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
 8007c70:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2200      	movs	r2, #0
 8007c76:	70da      	strb	r2, [r3, #3]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	f04f 32ff 	mov.w	r2, #4294967295
 8007c7e:	639a      	str	r2, [r3, #56]	@ 0x38
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8007c80:	6839      	ldr	r1, [r7, #0]
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f7fd fd06 	bl	8005694 <move_window>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d001      	beq.n	8007c92 <check_fs+0x2a>
 8007c8e:	2304      	movs	r3, #4
 8007c90:	e044      	b.n	8007d1c <check_fs+0xb4>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	333c      	adds	r3, #60	@ 0x3c
 8007c96:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fd f8e6 	bl	8004e6c <ld_word>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	461a      	mov	r2, r3
 8007ca4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d001      	beq.n	8007cb0 <check_fs+0x48>
 8007cac:	2303      	movs	r3, #3
 8007cae:	e035      	b.n	8007d1c <check_fs+0xb4>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cb6:	2be9      	cmp	r3, #233	@ 0xe9
 8007cb8:	d009      	beq.n	8007cce <check_fs+0x66>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cc0:	2beb      	cmp	r3, #235	@ 0xeb
 8007cc2:	d11e      	bne.n	8007d02 <check_fs+0x9a>
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007cca:	2b90      	cmp	r3, #144	@ 0x90
 8007ccc:	d119      	bne.n	8007d02 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	333c      	adds	r3, #60	@ 0x3c
 8007cd2:	3336      	adds	r3, #54	@ 0x36
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f7fd f8e2 	bl	8004e9e <ld_dword>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007ce0:	4a10      	ldr	r2, [pc, #64]	@ (8007d24 <check_fs+0xbc>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d101      	bne.n	8007cea <check_fs+0x82>
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	e018      	b.n	8007d1c <check_fs+0xb4>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	333c      	adds	r3, #60	@ 0x3c
 8007cee:	3352      	adds	r3, #82	@ 0x52
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f7fd f8d4 	bl	8004e9e <ld_dword>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8007d28 <check_fs+0xc0>)
 8007cfa:	4293      	cmp	r3, r2
 8007cfc:	d101      	bne.n	8007d02 <check_fs+0x9a>
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e00c      	b.n	8007d1c <check_fs+0xb4>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	333c      	adds	r3, #60	@ 0x3c
 8007d06:	220b      	movs	r2, #11
 8007d08:	4908      	ldr	r1, [pc, #32]	@ (8007d2c <check_fs+0xc4>)
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fd fad0 	bl	80052b0 <mem_cmp>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d101      	bne.n	8007d1a <check_fs+0xb2>
 8007d16:	2301      	movs	r3, #1
 8007d18:	e000      	b.n	8007d1c <check_fs+0xb4>
#endif
	return 2;
 8007d1a:	2302      	movs	r3, #2
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}
 8007d24:	00544146 	.word	0x00544146
 8007d28:	33544146 	.word	0x33544146
 8007d2c:	0800a370 	.word	0x0800a370

08007d30 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d34:	b09c      	sub	sp, #112	@ 0x70
 8007d36:	af00      	add	r7, sp, #0
 8007d38:	61f8      	str	r0, [r7, #28]
 8007d3a:	61b9      	str	r1, [r7, #24]
 8007d3c:	4613      	mov	r3, r2
 8007d3e:	75fb      	strb	r3, [r7, #23]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007d46:	69f8      	ldr	r0, [r7, #28]
 8007d48:	f7ff ff4a 	bl	8007be0 <get_ldnumber>
 8007d4c:	6578      	str	r0, [r7, #84]	@ 0x54
	if (vol < 0) return FR_INVALID_DRIVE;
 8007d4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	da01      	bge.n	8007d58 <find_volume+0x28>
 8007d54:	230b      	movs	r3, #11
 8007d56:	e376      	b.n	8008446 <find_volume+0x716>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007d58:	4aa6      	ldr	r2, [pc, #664]	@ (8007ff4 <find_volume+0x2c4>)
 8007d5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007d5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d60:	653b      	str	r3, [r7, #80]	@ 0x50
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007d62:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d101      	bne.n	8007d6c <find_volume+0x3c>
 8007d68:	230c      	movs	r3, #12
 8007d6a:	e36c      	b.n	8008446 <find_volume+0x716>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007d70:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007d72:	7dfb      	ldrb	r3, [r7, #23]
 8007d74:	f023 0301 	bic.w	r3, r3, #1
 8007d78:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007d7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d01a      	beq.n	8007db8 <find_volume+0x88>
		stat = disk_status(fs->drv);
 8007d82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d84:	785b      	ldrb	r3, [r3, #1]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7fc ffd2 	bl	8004d30 <disk_status>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007d92:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007d96:	f003 0301 	and.w	r3, r3, #1
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10c      	bne.n	8007db8 <find_volume+0x88>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007d9e:	7dfb      	ldrb	r3, [r7, #23]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d007      	beq.n	8007db4 <find_volume+0x84>
 8007da4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007da8:	f003 0304 	and.w	r3, r3, #4
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <find_volume+0x84>
				return FR_WRITE_PROTECTED;
 8007db0:	230a      	movs	r3, #10
 8007db2:	e348      	b.n	8008446 <find_volume+0x716>
			}
			return FR_OK;				/* The file system object is valid */
 8007db4:	2300      	movs	r3, #0
 8007db6:	e346      	b.n	8008446 <find_volume+0x716>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007db8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dba:	2200      	movs	r2, #0
 8007dbc:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dc0:	b2da      	uxtb	r2, r3
 8007dc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc4:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc8:	785b      	ldrb	r3, [r3, #1]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fc ffca 	bl	8004d64 <disk_initialize>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007dd6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007de2:	2303      	movs	r3, #3
 8007de4:	e32f      	b.n	8008446 <find_volume+0x716>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007de6:	7dfb      	ldrb	r3, [r7, #23]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d007      	beq.n	8007dfc <find_volume+0xcc>
 8007dec:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8007df8:	230a      	movs	r3, #10
 8007dfa:	e324      	b.n	8008446 <find_volume+0x716>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007dfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dfe:	7858      	ldrb	r0, [r3, #1]
 8007e00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e02:	330c      	adds	r3, #12
 8007e04:	461a      	mov	r2, r3
 8007e06:	2102      	movs	r1, #2
 8007e08:	f7fd f812 	bl	8004e30 <disk_ioctl>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d001      	beq.n	8007e16 <find_volume+0xe6>
 8007e12:	2301      	movs	r3, #1
 8007e14:	e317      	b.n	8008446 <find_volume+0x716>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e18:	899b      	ldrh	r3, [r3, #12]
 8007e1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007e1e:	d80d      	bhi.n	8007e3c <find_volume+0x10c>
 8007e20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e22:	899b      	ldrh	r3, [r3, #12]
 8007e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e28:	d308      	bcc.n	8007e3c <find_volume+0x10c>
 8007e2a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e2c:	899b      	ldrh	r3, [r3, #12]
 8007e2e:	461a      	mov	r2, r3
 8007e30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e32:	899b      	ldrh	r3, [r3, #12]
 8007e34:	3b01      	subs	r3, #1
 8007e36:	4013      	ands	r3, r2
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d001      	beq.n	8007e40 <find_volume+0x110>
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	e302      	b.n	8008446 <find_volume+0x716>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007e40:	2300      	movs	r3, #0
 8007e42:	66bb      	str	r3, [r7, #104]	@ 0x68
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007e44:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007e46:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007e48:	f7ff ff0e 	bl	8007c68 <check_fs>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007e52:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007e56:	2b02      	cmp	r3, #2
 8007e58:	d14d      	bne.n	8007ef6 <find_volume+0x1c6>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007e5e:	e020      	b.n	8007ea2 <find_volume+0x172>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007e60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e62:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 8007e66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007e6e:	4413      	add	r3, r2
 8007e70:	64bb      	str	r3, [r7, #72]	@ 0x48
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007e72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e74:	3304      	adds	r3, #4
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d006      	beq.n	8007e8a <find_volume+0x15a>
 8007e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e7e:	3308      	adds	r3, #8
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7fd f80c 	bl	8004e9e <ld_dword>
 8007e86:	4602      	mov	r2, r0
 8007e88:	e000      	b.n	8007e8c <find_volume+0x15c>
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	3360      	adds	r3, #96	@ 0x60
 8007e92:	f107 0110 	add.w	r1, r7, #16
 8007e96:	440b      	add	r3, r1
 8007e98:	f843 2c50 	str.w	r2, [r3, #-80]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007e9c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007e9e:	3301      	adds	r3, #1
 8007ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ea2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ea4:	2b03      	cmp	r3, #3
 8007ea6:	d9db      	bls.n	8007e60 <find_volume+0x130>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (i) i--;
 8007eac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d002      	beq.n	8007eb8 <find_volume+0x188>
 8007eb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007eb4:	3b01      	subs	r3, #1
 8007eb6:	65bb      	str	r3, [r7, #88]	@ 0x58
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007eb8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007eba:	009b      	lsls	r3, r3, #2
 8007ebc:	3360      	adds	r3, #96	@ 0x60
 8007ebe:	f107 0210 	add.w	r2, r7, #16
 8007ec2:	4413      	add	r3, r2
 8007ec4:	f853 3c50 	ldr.w	r3, [r3, #-80]
 8007ec8:	66bb      	str	r3, [r7, #104]	@ 0x68
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007eca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d005      	beq.n	8007edc <find_volume+0x1ac>
 8007ed0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ed2:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007ed4:	f7ff fec8 	bl	8007c68 <check_fs>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	e000      	b.n	8007ede <find_volume+0x1ae>
 8007edc:	2303      	movs	r3, #3
 8007ede:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007ee2:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d905      	bls.n	8007ef6 <find_volume+0x1c6>
 8007eea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007eec:	3301      	adds	r3, #1
 8007eee:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ef0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d9e0      	bls.n	8007eb8 <find_volume+0x188>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007ef6:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007efa:	2b04      	cmp	r3, #4
 8007efc:	d101      	bne.n	8007f02 <find_volume+0x1d2>
 8007efe:	2301      	movs	r3, #1
 8007f00:	e2a1      	b.n	8008446 <find_volume+0x716>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007f02:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007f06:	2b01      	cmp	r3, #1
 8007f08:	d901      	bls.n	8007f0e <find_volume+0x1de>
 8007f0a:	230d      	movs	r3, #13
 8007f0c:	e29b      	b.n	8008446 <find_volume+0x716>

	/* An FAT volume is found (bsect). Following code initializes the file system object */

#if _FS_EXFAT
	if (fmt == 1) {
 8007f0e:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	f040 8101 	bne.w	800811a <find_volume+0x3ea>
		QWORD maxlba;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 8007f18:	230b      	movs	r3, #11
 8007f1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f1c:	e002      	b.n	8007f24 <find_volume+0x1f4>
 8007f1e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f20:	3301      	adds	r3, #1
 8007f22:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f24:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f26:	2b3f      	cmp	r3, #63	@ 0x3f
 8007f28:	d806      	bhi.n	8007f38 <find_volume+0x208>
 8007f2a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f2c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f2e:	4413      	add	r3, r2
 8007f30:	333c      	adds	r3, #60	@ 0x3c
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d0f2      	beq.n	8007f1e <find_volume+0x1ee>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 8007f38:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f3a:	2b3f      	cmp	r3, #63	@ 0x3f
 8007f3c:	d801      	bhi.n	8007f42 <find_volume+0x212>
 8007f3e:	230d      	movs	r3, #13
 8007f40:	e281      	b.n	8008446 <find_volume+0x716>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT revision (Must be 1.0) */
 8007f42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f44:	333c      	adds	r3, #60	@ 0x3c
 8007f46:	3368      	adds	r3, #104	@ 0x68
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f7fc ff8f 	bl	8004e6c <ld_word>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007f54:	d001      	beq.n	8007f5a <find_volume+0x22a>
 8007f56:	230d      	movs	r3, #13
 8007f58:	e275      	b.n	8008446 <find_volume+0x716>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 8007f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f5c:	f893 30a8 	ldrb.w	r3, [r3, #168]	@ 0xa8
 8007f60:	461a      	mov	r2, r3
 8007f62:	2301      	movs	r3, #1
 8007f64:	4093      	lsls	r3, r2
 8007f66:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007f68:	8992      	ldrh	r2, [r2, #12]
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d001      	beq.n	8007f72 <find_volume+0x242>
			return FR_NO_FILESYSTEM;
 8007f6e:	230d      	movs	r3, #13
 8007f70:	e269      	b.n	8008446 <find_volume+0x716>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA + 1 of the volume */
 8007f72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007f74:	333c      	adds	r3, #60	@ 0x3c
 8007f76:	3348      	adds	r3, #72	@ 0x48
 8007f78:	4618      	mov	r0, r3
 8007f7a:	f7fc ffb3 	bl	8004ee4 <ld_qword>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007f84:	2000      	movs	r0, #0
 8007f86:	60b9      	str	r1, [r7, #8]
 8007f88:	60f8      	str	r0, [r7, #12]
 8007f8a:	68b9      	ldr	r1, [r7, #8]
 8007f8c:	1851      	adds	r1, r2, r1
 8007f8e:	6039      	str	r1, [r7, #0]
 8007f90:	68f9      	ldr	r1, [r7, #12]
 8007f92:	eb43 0101 	adc.w	r1, r3, r1
 8007f96:	6079      	str	r1, [r7, #4]
 8007f98:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f9c:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
		if (maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be handled in 32-bit LBA) */
 8007fa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d301      	bcc.n	8007fac <find_volume+0x27c>
 8007fa8:	230d      	movs	r3, #13
 8007faa:	e24c      	b.n	8008446 <find_volume+0x716>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8007fac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fae:	333c      	adds	r3, #60	@ 0x3c
 8007fb0:	3354      	adds	r3, #84	@ 0x54
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7fc ff73 	bl	8004e9e <ld_dword>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fbc:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8007fbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fc0:	f893 20aa 	ldrb.w	r2, [r3, #170]	@ 0xaa
 8007fc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fc6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 8007fc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fca:	789b      	ldrb	r3, [r3, #2]
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d001      	beq.n	8007fd4 <find_volume+0x2a4>
 8007fd0:	230d      	movs	r3, #13
 8007fd2:	e238      	b.n	8008446 <find_volume+0x716>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8007fd4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fd6:	f893 30a9 	ldrb.w	r3, [r3, #169]	@ 0xa9
 8007fda:	461a      	mov	r2, r3
 8007fdc:	2301      	movs	r3, #1
 8007fde:	4093      	lsls	r3, r2
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fe4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768) */
 8007fe6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007fe8:	895b      	ldrh	r3, [r3, #10]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d104      	bne.n	8007ff8 <find_volume+0x2c8>
 8007fee:	230d      	movs	r3, #13
 8007ff0:	e229      	b.n	8008446 <find_volume+0x716>
 8007ff2:	bf00      	nop
 8007ff4:	20002654 	.word	0x20002654

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8007ff8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ffa:	333c      	adds	r3, #60	@ 0x3c
 8007ffc:	335c      	adds	r3, #92	@ 0x5c
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7fc ff4d 	bl	8004e9e <ld_dword>
 8008004:	63f8      	str	r0, [r7, #60]	@ 0x3c
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8008006:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008008:	4a99      	ldr	r2, [pc, #612]	@ (8008270 <find_volume+0x540>)
 800800a:	4293      	cmp	r3, r2
 800800c:	d901      	bls.n	8008012 <find_volume+0x2e2>
 800800e:	230d      	movs	r3, #13
 8008010:	e219      	b.n	8008446 <find_volume+0x716>
		fs->n_fatent = nclst + 2;
 8008012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008014:	1c9a      	adds	r2, r3, #2
 8008016:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008018:	621a      	str	r2, [r3, #32]

		/* Boundaries and Limits */
		fs->volbase = bsect;
 800801a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800801c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800801e:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 8008020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008022:	333c      	adds	r3, #60	@ 0x3c
 8008024:	3358      	adds	r3, #88	@ 0x58
 8008026:	4618      	mov	r0, r3
 8008028:	f7fc ff39 	bl	8004e9e <ld_dword>
 800802c:	4602      	mov	r2, r0
 800802e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008030:	441a      	add	r2, r3
 8008032:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008034:	635a      	str	r2, [r3, #52]	@ 0x34
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 8008036:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008038:	333c      	adds	r3, #60	@ 0x3c
 800803a:	3350      	adds	r3, #80	@ 0x50
 800803c:	4618      	mov	r0, r3
 800803e:	f7fc ff2e 	bl	8004e9e <ld_dword>
 8008042:	4602      	mov	r2, r0
 8008044:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008046:	441a      	add	r2, r3
 8008048:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800804a:	62da      	str	r2, [r3, #44]	@ 0x2c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size requiered) */
 800804c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800804e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008050:	2200      	movs	r2, #0
 8008052:	469a      	mov	sl, r3
 8008054:	4693      	mov	fp, r2
 8008056:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008058:	895b      	ldrh	r3, [r3, #10]
 800805a:	461a      	mov	r2, r3
 800805c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800805e:	fb02 f303 	mul.w	r3, r2, r3
 8008062:	2200      	movs	r2, #0
 8008064:	4698      	mov	r8, r3
 8008066:	4691      	mov	r9, r2
 8008068:	eb1a 0408 	adds.w	r4, sl, r8
 800806c:	eb4b 0509 	adc.w	r5, fp, r9
 8008070:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8008074:	42a2      	cmp	r2, r4
 8008076:	41ab      	sbcs	r3, r5
 8008078:	d201      	bcs.n	800807e <find_volume+0x34e>
 800807a:	230d      	movs	r3, #13
 800807c:	e1e3      	b.n	8008446 <find_volume+0x716>
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 800807e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008080:	333c      	adds	r3, #60	@ 0x3c
 8008082:	3360      	adds	r3, #96	@ 0x60
 8008084:	4618      	mov	r0, r3
 8008086:	f7fc ff0a 	bl	8004e9e <ld_dword>
 800808a:	4602      	mov	r2, r0
 800808c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800808e:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Check if bitmap location is in assumption (at the first cluster) */
		if (move_window(fs, clust2sect(fs, fs->dirbase)) != FR_OK) return FR_DISK_ERR;
 8008090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008094:	4619      	mov	r1, r3
 8008096:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008098:	f7fd fb9a 	bl	80057d0 <clust2sect>
 800809c:	4603      	mov	r3, r0
 800809e:	4619      	mov	r1, r3
 80080a0:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80080a2:	f7fd faf7 	bl	8005694 <move_window>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <find_volume+0x380>
 80080ac:	2301      	movs	r3, #1
 80080ae:	e1ca      	b.n	8008446 <find_volume+0x716>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80080b0:	2300      	movs	r3, #0
 80080b2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080b4:	e015      	b.n	80080e2 <find_volume+0x3b2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80080b6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80080b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080ba:	4413      	add	r3, r2
 80080bc:	333c      	adds	r3, #60	@ 0x3c
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	2b81      	cmp	r3, #129	@ 0x81
 80080c2:	d10b      	bne.n	80080dc <find_volume+0x3ac>
 80080c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080c6:	f103 023c 	add.w	r2, r3, #60	@ 0x3c
 80080ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080cc:	3314      	adds	r3, #20
 80080ce:	4413      	add	r3, r2
 80080d0:	4618      	mov	r0, r3
 80080d2:	f7fc fee4 	bl	8004e9e <ld_dword>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b02      	cmp	r3, #2
 80080da:	d009      	beq.n	80080f0 <find_volume+0x3c0>
		for (i = 0; i < SS(fs); i += SZDIRE) {
 80080dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080de:	3320      	adds	r3, #32
 80080e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80080e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080e4:	899b      	ldrh	r3, [r3, #12]
 80080e6:	461a      	mov	r2, r3
 80080e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d3e3      	bcc.n	80080b6 <find_volume+0x386>
 80080ee:	e000      	b.n	80080f2 <find_volume+0x3c2>
			if (fs->win[i] == 0x81 && ld_dword(fs->win + i + 20) == 2) break;	/* 81 entry with cluster #2? */
 80080f0:	bf00      	nop
		}
		if (i == SS(fs)) return FR_NO_FILESYSTEM;
 80080f2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80080f4:	899b      	ldrh	r3, [r3, #12]
 80080f6:	461a      	mov	r2, r3
 80080f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d101      	bne.n	8008102 <find_volume+0x3d2>
 80080fe:	230d      	movs	r3, #13
 8008100:	e1a1      	b.n	8008446 <find_volume+0x716>
#if !_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008102:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008104:	f04f 32ff 	mov.w	r2, #4294967295
 8008108:	61da      	str	r2, [r3, #28]
 800810a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800810c:	69da      	ldr	r2, [r3, #28]
 800810e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008110:	619a      	str	r2, [r3, #24]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8008112:	2304      	movs	r3, #4
 8008114:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
 8008118:	e17d      	b.n	8008416 <find_volume+0x6e6>
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800811a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800811c:	333c      	adds	r3, #60	@ 0x3c
 800811e:	330b      	adds	r3, #11
 8008120:	4618      	mov	r0, r3
 8008122:	f7fc fea3 	bl	8004e6c <ld_word>
 8008126:	4603      	mov	r3, r0
 8008128:	461a      	mov	r2, r3
 800812a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800812c:	899b      	ldrh	r3, [r3, #12]
 800812e:	429a      	cmp	r2, r3
 8008130:	d001      	beq.n	8008136 <find_volume+0x406>
 8008132:	230d      	movs	r3, #13
 8008134:	e187      	b.n	8008446 <find_volume+0x716>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8008136:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008138:	333c      	adds	r3, #60	@ 0x3c
 800813a:	3316      	adds	r3, #22
 800813c:	4618      	mov	r0, r3
 800813e:	f7fc fe95 	bl	8004e6c <ld_word>
 8008142:	4603      	mov	r3, r0
 8008144:	667b      	str	r3, [r7, #100]	@ 0x64
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8008146:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008148:	2b00      	cmp	r3, #0
 800814a:	d106      	bne.n	800815a <find_volume+0x42a>
 800814c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800814e:	333c      	adds	r3, #60	@ 0x3c
 8008150:	3324      	adds	r3, #36	@ 0x24
 8008152:	4618      	mov	r0, r3
 8008154:	f7fc fea3 	bl	8004e9e <ld_dword>
 8008158:	6678      	str	r0, [r7, #100]	@ 0x64
		fs->fsize = fasize;
 800815a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800815c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800815e:	625a      	str	r2, [r3, #36]	@ 0x24

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008160:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008162:	f893 204c 	ldrb.w	r2, [r3, #76]	@ 0x4c
 8008166:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008168:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800816a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800816c:	789b      	ldrb	r3, [r3, #2]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d005      	beq.n	800817e <find_volume+0x44e>
 8008172:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008174:	789b      	ldrb	r3, [r3, #2]
 8008176:	2b02      	cmp	r3, #2
 8008178:	d001      	beq.n	800817e <find_volume+0x44e>
 800817a:	230d      	movs	r3, #13
 800817c:	e163      	b.n	8008446 <find_volume+0x716>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800817e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008180:	789b      	ldrb	r3, [r3, #2]
 8008182:	461a      	mov	r2, r3
 8008184:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008186:	fb02 f303 	mul.w	r3, r2, r3
 800818a:	667b      	str	r3, [r7, #100]	@ 0x64

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800818c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800818e:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8008192:	461a      	mov	r2, r3
 8008194:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008196:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8008198:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800819a:	895b      	ldrh	r3, [r3, #10]
 800819c:	2b00      	cmp	r3, #0
 800819e:	d008      	beq.n	80081b2 <find_volume+0x482>
 80081a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081a2:	895b      	ldrh	r3, [r3, #10]
 80081a4:	461a      	mov	r2, r3
 80081a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081a8:	895b      	ldrh	r3, [r3, #10]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4013      	ands	r3, r2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d001      	beq.n	80081b6 <find_volume+0x486>
 80081b2:	230d      	movs	r3, #13
 80081b4:	e147      	b.n	8008446 <find_volume+0x716>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80081b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081b8:	333c      	adds	r3, #60	@ 0x3c
 80081ba:	3311      	adds	r3, #17
 80081bc:	4618      	mov	r0, r3
 80081be:	f7fc fe55 	bl	8004e6c <ld_word>
 80081c2:	4603      	mov	r3, r0
 80081c4:	461a      	mov	r2, r3
 80081c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081c8:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80081ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081cc:	891b      	ldrh	r3, [r3, #8]
 80081ce:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80081d0:	8992      	ldrh	r2, [r2, #12]
 80081d2:	0952      	lsrs	r2, r2, #5
 80081d4:	b292      	uxth	r2, r2
 80081d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80081da:	fb01 f202 	mul.w	r2, r1, r2
 80081de:	1a9b      	subs	r3, r3, r2
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d001      	beq.n	80081ea <find_volume+0x4ba>
 80081e6:	230d      	movs	r3, #13
 80081e8:	e12d      	b.n	8008446 <find_volume+0x716>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80081ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081ec:	333c      	adds	r3, #60	@ 0x3c
 80081ee:	3313      	adds	r3, #19
 80081f0:	4618      	mov	r0, r3
 80081f2:	f7fc fe3b 	bl	8004e6c <ld_word>
 80081f6:	4603      	mov	r3, r0
 80081f8:	663b      	str	r3, [r7, #96]	@ 0x60
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80081fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d106      	bne.n	800820e <find_volume+0x4de>
 8008200:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008202:	333c      	adds	r3, #60	@ 0x3c
 8008204:	3320      	adds	r3, #32
 8008206:	4618      	mov	r0, r3
 8008208:	f7fc fe49 	bl	8004e9e <ld_dword>
 800820c:	6638      	str	r0, [r7, #96]	@ 0x60

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800820e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008210:	333c      	adds	r3, #60	@ 0x3c
 8008212:	330e      	adds	r3, #14
 8008214:	4618      	mov	r0, r3
 8008216:	f7fc fe29 	bl	8004e6c <ld_word>
 800821a:	4603      	mov	r3, r0
 800821c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008220:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008224:	2b00      	cmp	r3, #0
 8008226:	d101      	bne.n	800822c <find_volume+0x4fc>
 8008228:	230d      	movs	r3, #13
 800822a:	e10c      	b.n	8008446 <find_volume+0x716>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800822c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8008230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008232:	4413      	add	r3, r2
 8008234:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008236:	8911      	ldrh	r1, [r2, #8]
 8008238:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800823a:	8992      	ldrh	r2, [r2, #12]
 800823c:	0952      	lsrs	r2, r2, #5
 800823e:	b292      	uxth	r2, r2
 8008240:	fbb1 f2f2 	udiv	r2, r1, r2
 8008244:	b292      	uxth	r2, r2
 8008246:	4413      	add	r3, r2
 8008248:	643b      	str	r3, [r7, #64]	@ 0x40
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800824a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800824c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800824e:	429a      	cmp	r2, r3
 8008250:	d201      	bcs.n	8008256 <find_volume+0x526>
 8008252:	230d      	movs	r3, #13
 8008254:	e0f7      	b.n	8008446 <find_volume+0x716>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8008256:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008258:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800825a:	1ad3      	subs	r3, r2, r3
 800825c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800825e:	8952      	ldrh	r2, [r2, #10]
 8008260:	fbb3 f3f2 	udiv	r3, r3, r2
 8008264:	63fb      	str	r3, [r7, #60]	@ 0x3c
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8008266:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008268:	2b00      	cmp	r3, #0
 800826a:	d103      	bne.n	8008274 <find_volume+0x544>
 800826c:	230d      	movs	r3, #13
 800826e:	e0ea      	b.n	8008446 <find_volume+0x716>
 8008270:	7ffffffd 	.word	0x7ffffffd
		fmt = FS_FAT32;
 8008274:	2303      	movs	r3, #3
 8008276:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800827a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800827c:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8008280:	4293      	cmp	r3, r2
 8008282:	d802      	bhi.n	800828a <find_volume+0x55a>
 8008284:	2302      	movs	r3, #2
 8008286:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800828a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800828c:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8008290:	4293      	cmp	r3, r2
 8008292:	d802      	bhi.n	800829a <find_volume+0x56a>
 8008294:	2301      	movs	r3, #1
 8008296:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800829a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800829c:	1c9a      	adds	r2, r3, #2
 800829e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082a0:	621a      	str	r2, [r3, #32]
		fs->volbase = bsect;							/* Volume start sector */
 80082a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082a4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80082a6:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80082a8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 80082ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80082ae:	441a      	add	r2, r3
 80082b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082b2:	62da      	str	r2, [r3, #44]	@ 0x2c
		fs->database = bsect + sysect;					/* Data start sector */
 80082b4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80082b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80082b8:	441a      	add	r2, r3
 80082ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082bc:	635a      	str	r2, [r3, #52]	@ 0x34
		if (fmt == FS_FAT32) {
 80082be:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 80082c2:	2b03      	cmp	r3, #3
 80082c4:	d11e      	bne.n	8008304 <find_volume+0x5d4>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80082c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082c8:	333c      	adds	r3, #60	@ 0x3c
 80082ca:	332a      	adds	r3, #42	@ 0x2a
 80082cc:	4618      	mov	r0, r3
 80082ce:	f7fc fdcd 	bl	8004e6c <ld_word>
 80082d2:	4603      	mov	r3, r0
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d001      	beq.n	80082dc <find_volume+0x5ac>
 80082d8:	230d      	movs	r3, #13
 80082da:	e0b4      	b.n	8008446 <find_volume+0x716>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80082dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082de:	891b      	ldrh	r3, [r3, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <find_volume+0x5b8>
 80082e4:	230d      	movs	r3, #13
 80082e6:	e0ae      	b.n	8008446 <find_volume+0x716>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80082e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082ea:	333c      	adds	r3, #60	@ 0x3c
 80082ec:	332c      	adds	r3, #44	@ 0x2c
 80082ee:	4618      	mov	r0, r3
 80082f0:	f7fc fdd5 	bl	8004e9e <ld_dword>
 80082f4:	4602      	mov	r2, r0
 80082f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082f8:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80082fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008302:	e01f      	b.n	8008344 <find_volume+0x614>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8008304:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008306:	891b      	ldrh	r3, [r3, #8]
 8008308:	2b00      	cmp	r3, #0
 800830a:	d101      	bne.n	8008310 <find_volume+0x5e0>
 800830c:	230d      	movs	r3, #13
 800830e:	e09a      	b.n	8008446 <find_volume+0x716>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8008310:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008312:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008314:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008316:	441a      	add	r2, r3
 8008318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800831a:	631a      	str	r2, [r3, #48]	@ 0x30
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800831c:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 8008320:	2b02      	cmp	r3, #2
 8008322:	d103      	bne.n	800832c <find_volume+0x5fc>
 8008324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	005b      	lsls	r3, r3, #1
 800832a:	e00a      	b.n	8008342 <find_volume+0x612>
 800832c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800832e:	6a1a      	ldr	r2, [r3, #32]
 8008330:	4613      	mov	r3, r2
 8008332:	005b      	lsls	r3, r3, #1
 8008334:	4413      	add	r3, r2
 8008336:	085a      	lsrs	r2, r3, #1
 8008338:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800833a:	6a1b      	ldr	r3, [r3, #32]
 800833c:	f003 0301 	and.w	r3, r3, #1
 8008340:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008342:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8008344:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008346:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008348:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800834a:	899b      	ldrh	r3, [r3, #12]
 800834c:	4619      	mov	r1, r3
 800834e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008350:	440b      	add	r3, r1
 8008352:	3b01      	subs	r3, #1
 8008354:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008356:	8989      	ldrh	r1, [r1, #12]
 8008358:	fbb3 f3f1 	udiv	r3, r3, r1
 800835c:	429a      	cmp	r2, r3
 800835e:	d201      	bcs.n	8008364 <find_volume+0x634>
 8008360:	230d      	movs	r3, #13
 8008362:	e070      	b.n	8008446 <find_volume+0x716>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8008364:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008366:	f04f 32ff 	mov.w	r2, #4294967295
 800836a:	61da      	str	r2, [r3, #28]
 800836c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800836e:	69da      	ldr	r2, [r3, #28]
 8008370:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008372:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;
 8008374:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008376:	2280      	movs	r2, #128	@ 0x80
 8008378:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800837a:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800837e:	2b03      	cmp	r3, #3
 8008380:	d149      	bne.n	8008416 <find_volume+0x6e6>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8008382:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008384:	333c      	adds	r3, #60	@ 0x3c
 8008386:	3330      	adds	r3, #48	@ 0x30
 8008388:	4618      	mov	r0, r3
 800838a:	f7fc fd6f 	bl	8004e6c <ld_word>
 800838e:	4603      	mov	r3, r0
 8008390:	2b01      	cmp	r3, #1
 8008392:	d140      	bne.n	8008416 <find_volume+0x6e6>
			&& move_window(fs, bsect + 1) == FR_OK)
 8008394:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008396:	3301      	adds	r3, #1
 8008398:	4619      	mov	r1, r3
 800839a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800839c:	f7fd f97a 	bl	8005694 <move_window>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d137      	bne.n	8008416 <find_volume+0x6e6>
		{
			fs->fsi_flag = 0;
 80083a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083a8:	2200      	movs	r2, #0
 80083aa:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80083ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083ae:	333c      	adds	r3, #60	@ 0x3c
 80083b0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fc fd59 	bl	8004e6c <ld_word>
 80083ba:	4603      	mov	r3, r0
 80083bc:	461a      	mov	r2, r3
 80083be:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d127      	bne.n	8008416 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80083c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083c8:	333c      	adds	r3, #60	@ 0x3c
 80083ca:	4618      	mov	r0, r3
 80083cc:	f7fc fd67 	bl	8004e9e <ld_dword>
 80083d0:	4603      	mov	r3, r0
 80083d2:	4a1f      	ldr	r2, [pc, #124]	@ (8008450 <find_volume+0x720>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d11e      	bne.n	8008416 <find_volume+0x6e6>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80083d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083da:	333c      	adds	r3, #60	@ 0x3c
 80083dc:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fc fd5c 	bl	8004e9e <ld_dword>
 80083e6:	4603      	mov	r3, r0
 80083e8:	4a1a      	ldr	r2, [pc, #104]	@ (8008454 <find_volume+0x724>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d113      	bne.n	8008416 <find_volume+0x6e6>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80083ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083f0:	333c      	adds	r3, #60	@ 0x3c
 80083f2:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 80083f6:	4618      	mov	r0, r3
 80083f8:	f7fc fd51 	bl	8004e9e <ld_dword>
 80083fc:	4602      	mov	r2, r0
 80083fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008400:	61da      	str	r2, [r3, #28]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8008402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008404:	333c      	adds	r3, #60	@ 0x3c
 8008406:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800840a:	4618      	mov	r0, r3
 800840c:	f7fc fd47 	bl	8004e9e <ld_dword>
 8008410:	4602      	mov	r2, r0
 8008412:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008414:	619a      	str	r2, [r3, #24]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8008416:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008418:	f897 206f 	ldrb.w	r2, [r7, #111]	@ 0x6f
 800841c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800841e:	4b0e      	ldr	r3, [pc, #56]	@ (8008458 <find_volume+0x728>)
 8008420:	881b      	ldrh	r3, [r3, #0]
 8008422:	3301      	adds	r3, #1
 8008424:	b29a      	uxth	r2, r3
 8008426:	4b0c      	ldr	r3, [pc, #48]	@ (8008458 <find_volume+0x728>)
 8008428:	801a      	strh	r2, [r3, #0]
 800842a:	4b0b      	ldr	r3, [pc, #44]	@ (8008458 <find_volume+0x728>)
 800842c:	881a      	ldrh	r2, [r3, #0]
 800842e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008430:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8008432:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008434:	4a09      	ldr	r2, [pc, #36]	@ (800845c <find_volume+0x72c>)
 8008436:	611a      	str	r2, [r3, #16]
#if _FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8008438:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800843a:	4a09      	ldr	r2, [pc, #36]	@ (8008460 <find_volume+0x730>)
 800843c:	615a      	str	r2, [r3, #20]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800843e:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008440:	f7fd f8c0 	bl	80055c4 <clear_lock>
#endif
	return FR_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3770      	adds	r7, #112	@ 0x70
 800844a:	46bd      	mov	sp, r7
 800844c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008450:	41615252 	.word	0x41615252
 8008454:	61417272 	.word	0x61417272
 8008458:	2000265c 	.word	0x2000265c
 800845c:	200028e0 	.word	0x200028e0
 8008460:	20002680 	.word	0x20002680

08008464 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008464:	b580      	push	{r7, lr}
 8008466:	b084      	sub	sp, #16
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
 800846c:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800846e:	2309      	movs	r3, #9
 8008470:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01c      	beq.n	80084b2 <validate+0x4e>
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d018      	beq.n	80084b2 <validate+0x4e>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	781b      	ldrb	r3, [r3, #0]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d013      	beq.n	80084b2 <validate+0x4e>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	889a      	ldrh	r2, [r3, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	88db      	ldrh	r3, [r3, #6]
 8008494:	429a      	cmp	r2, r3
 8008496:	d10c      	bne.n	80084b2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	785b      	ldrb	r3, [r3, #1]
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fc fc46 	bl	8004d30 <disk_status>
 80084a4:	4603      	mov	r3, r0
 80084a6:	f003 0301 	and.w	r3, r3, #1
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d101      	bne.n	80084b2 <validate+0x4e>
			res = FR_OK;
 80084ae:	2300      	movs	r3, #0
 80084b0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80084b2:	7bfb      	ldrb	r3, [r7, #15]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d102      	bne.n	80084be <validate+0x5a>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	e000      	b.n	80084c0 <validate+0x5c>
 80084be:	2300      	movs	r3, #0
 80084c0:	683a      	ldr	r2, [r7, #0]
 80084c2:	6013      	str	r3, [r2, #0]
	return res;
 80084c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80084c6:	4618      	mov	r0, r3
 80084c8:	3710      	adds	r7, #16
 80084ca:	46bd      	mov	sp, r7
 80084cc:	bd80      	pop	{r7, pc}
	...

080084d0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80084d0:	b580      	push	{r7, lr}
 80084d2:	b088      	sub	sp, #32
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	60f8      	str	r0, [r7, #12]
 80084d8:	60b9      	str	r1, [r7, #8]
 80084da:	4613      	mov	r3, r2
 80084dc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80084e2:	f107 0310 	add.w	r3, r7, #16
 80084e6:	4618      	mov	r0, r3
 80084e8:	f7ff fb7a 	bl	8007be0 <get_ldnumber>
 80084ec:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80084ee:	69fb      	ldr	r3, [r7, #28]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	da01      	bge.n	80084f8 <f_mount+0x28>
 80084f4:	230b      	movs	r3, #11
 80084f6:	e02b      	b.n	8008550 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80084f8:	4a17      	ldr	r2, [pc, #92]	@ (8008558 <f_mount+0x88>)
 80084fa:	69fb      	ldr	r3, [r7, #28]
 80084fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008500:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d005      	beq.n	8008514 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008508:	69b8      	ldr	r0, [r7, #24]
 800850a:	f7fd f85b 	bl	80055c4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800850e:	69bb      	ldr	r3, [r7, #24]
 8008510:	2200      	movs	r2, #0
 8008512:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	d002      	beq.n	8008520 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2200      	movs	r2, #0
 800851e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	490d      	ldr	r1, [pc, #52]	@ (8008558 <f_mount+0x88>)
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d002      	beq.n	8008536 <f_mount+0x66>
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	2b01      	cmp	r3, #1
 8008534:	d001      	beq.n	800853a <f_mount+0x6a>
 8008536:	2300      	movs	r3, #0
 8008538:	e00a      	b.n	8008550 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800853a:	f107 010c 	add.w	r1, r7, #12
 800853e:	f107 0308 	add.w	r3, r7, #8
 8008542:	2200      	movs	r2, #0
 8008544:	4618      	mov	r0, r3
 8008546:	f7ff fbf3 	bl	8007d30 <find_volume>
 800854a:	4603      	mov	r3, r0
 800854c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800854e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3720      	adds	r7, #32
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}
 8008558:	20002654 	.word	0x20002654

0800855c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800855c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008560:	b0a8      	sub	sp, #160	@ 0xa0
 8008562:	af00      	add	r7, sp, #0
 8008564:	6278      	str	r0, [r7, #36]	@ 0x24
 8008566:	6239      	str	r1, [r7, #32]
 8008568:	4613      	mov	r3, r2
 800856a:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800856c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <f_open+0x1a>
 8008572:	2309      	movs	r3, #9
 8008574:	e2bc      	b.n	8008af0 <f_open+0x594>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008576:	7ffb      	ldrb	r3, [r7, #31]
 8008578:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800857c:	77fb      	strb	r3, [r7, #31]
	res = find_volume(&path, &fs, mode);
 800857e:	7ffb      	ldrb	r3, [r7, #31]
 8008580:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8008584:	f107 0020 	add.w	r0, r7, #32
 8008588:	461a      	mov	r2, r3
 800858a:	f7ff fbd1 	bl	8007d30 <find_volume>
 800858e:	4603      	mov	r3, r0
 8008590:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 8008594:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008598:	2b00      	cmp	r3, #0
 800859a:	f040 82a0 	bne.w	8008ade <f_open+0x582>
		dj.obj.fs = fs;
 800859e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085a0:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80085a2:	6a3b      	ldr	r3, [r7, #32]
 80085a4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80085a8:	4619      	mov	r1, r3
 80085aa:	4610      	mov	r0, r2
 80085ac:	f7ff fa6a 	bl	8007a84 <follow_path>
 80085b0:	4603      	mov	r3, r0
 80085b2:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80085b6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d118      	bne.n	80085f0 <f_open+0x94>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80085be:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 80085c2:	b25b      	sxtb	r3, r3
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	da03      	bge.n	80085d0 <f_open+0x74>
				res = FR_INVALID_NAME;
 80085c8:	2306      	movs	r3, #6
 80085ca:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80085ce:	e00f      	b.n	80085f0 <f_open+0x94>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80085d0:	7ffb      	ldrb	r3, [r7, #31]
 80085d2:	2b01      	cmp	r3, #1
 80085d4:	bf8c      	ite	hi
 80085d6:	2301      	movhi	r3, #1
 80085d8:	2300      	movls	r3, #0
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	461a      	mov	r2, r3
 80085de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80085e2:	4611      	mov	r1, r2
 80085e4:	4618      	mov	r0, r3
 80085e6:	f7fc fea5 	bl	8005334 <chk_lock>
 80085ea:	4603      	mov	r3, r0
 80085ec:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80085f0:	7ffb      	ldrb	r3, [r7, #31]
 80085f2:	f003 031c 	and.w	r3, r3, #28
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	f000 8117 	beq.w	800882a <f_open+0x2ce>
			if (res != FR_OK) {					/* No file, create new */
 80085fc:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008600:	2b00      	cmp	r3, #0
 8008602:	d017      	beq.n	8008634 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008604:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008608:	2b04      	cmp	r3, #4
 800860a:	d10e      	bne.n	800862a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800860c:	f7fc feee 	bl	80053ec <enq_lock>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d006      	beq.n	8008624 <f_open+0xc8>
 8008616:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe fed0 	bl	80073c0 <dir_register>
 8008620:	4603      	mov	r3, r0
 8008622:	e000      	b.n	8008626 <f_open+0xca>
 8008624:	2312      	movs	r3, #18
 8008626:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800862a:	7ffb      	ldrb	r3, [r7, #31]
 800862c:	f043 0308 	orr.w	r3, r3, #8
 8008630:	77fb      	strb	r3, [r7, #31]
 8008632:	e011      	b.n	8008658 <f_open+0xfc>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008634:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008638:	f003 0311 	and.w	r3, r3, #17
 800863c:	2b00      	cmp	r3, #0
 800863e:	d003      	beq.n	8008648 <f_open+0xec>
					res = FR_DENIED;
 8008640:	2307      	movs	r3, #7
 8008642:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8008646:	e007      	b.n	8008658 <f_open+0xfc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008648:	7ffb      	ldrb	r3, [r7, #31]
 800864a:	f003 0304 	and.w	r3, r3, #4
 800864e:	2b00      	cmp	r3, #0
 8008650:	d002      	beq.n	8008658 <f_open+0xfc>
 8008652:	2308      	movs	r3, #8
 8008654:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008658:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800865c:	2b00      	cmp	r3, #0
 800865e:	f040 8100 	bne.w	8008862 <f_open+0x306>
 8008662:	7ffb      	ldrb	r3, [r7, #31]
 8008664:	f003 0308 	and.w	r3, r3, #8
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 80fa 	beq.w	8008862 <f_open+0x306>
				dw = GET_FATTIME();
 800866e:	f7fc faff 	bl	8004c70 <get_fattime>
 8008672:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8008676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	2b04      	cmp	r3, #4
 800867c:	f040 8085 	bne.w	800878a <f_open+0x22e>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8008680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008684:	601a      	str	r2, [r3, #0]
					fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);
 8008686:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008688:	695b      	ldr	r3, [r3, #20]
 800868a:	3334      	adds	r3, #52	@ 0x34
 800868c:	4618      	mov	r0, r3
 800868e:	f7fc fc06 	bl	8004e9e <ld_dword>
 8008692:	4602      	mov	r2, r0
 8008694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008696:	609a      	str	r2, [r3, #8]
					fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 8008698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800869a:	695b      	ldr	r3, [r3, #20]
 800869c:	3338      	adds	r3, #56	@ 0x38
 800869e:	4618      	mov	r0, r3
 80086a0:	f7fc fc20 	bl	8004ee4 <ld_qword>
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	e9c3 0104 	strd	r0, r1, [r3, #16]
					fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 80086aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086ac:	695b      	ldr	r3, [r3, #20]
 80086ae:	3321      	adds	r3, #33	@ 0x21
 80086b0:	781b      	ldrb	r3, [r3, #0]
 80086b2:	f003 0302 	and.w	r3, r3, #2
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086ba:	71d3      	strb	r3, [r2, #7]
					fp->obj.n_frag = 0;
 80086bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086be:	2200      	movs	r2, #0
 80086c0:	61da      	str	r2, [r3, #28]
					/* Initialize directory entry block */
					st_dword(fs->dirbuf + XDIR_CrtTime, dw);	/* Set created time */
 80086c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086c4:	695b      	ldr	r3, [r3, #20]
 80086c6:	3308      	adds	r3, #8
 80086c8:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7fc fcff 	bl	80050d0 <st_dword>
					fs->dirbuf[XDIR_CrtTime10] = 0;
 80086d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f103 0214 	add.w	r2, r3, #20
 80086da:	2300      	movs	r3, #0
 80086dc:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_ModTime, dw);	/* Set modified time */
 80086de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086e0:	695b      	ldr	r3, [r3, #20]
 80086e2:	330c      	adds	r3, #12
 80086e4:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fc fcf1 	bl	80050d0 <st_dword>
					fs->dirbuf[XDIR_ModTime10] = 0;
 80086ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086f0:	695b      	ldr	r3, [r3, #20]
 80086f2:	f103 0215 	add.w	r2, r3, #21
 80086f6:	2300      	movs	r3, #0
 80086f8:	7013      	strb	r3, [r2, #0]
					fs->dirbuf[XDIR_Attr] = AM_ARC;				/* Reset attribute */
 80086fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fc:	695b      	ldr	r3, [r3, #20]
 80086fe:	1d1a      	adds	r2, r3, #4
 8008700:	2320      	movs	r3, #32
 8008702:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_FstClus, 0);		/* Reset file allocation info */
 8008704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008706:	695b      	ldr	r3, [r3, #20]
 8008708:	3334      	adds	r3, #52	@ 0x34
 800870a:	2100      	movs	r1, #0
 800870c:	4618      	mov	r0, r3
 800870e:	f7fc fcdf 	bl	80050d0 <st_dword>
					st_qword(fs->dirbuf + XDIR_FileSize, 0);
 8008712:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800871a:	f04f 0200 	mov.w	r2, #0
 800871e:	f04f 0300 	mov.w	r3, #0
 8008722:	4608      	mov	r0, r1
 8008724:	f7fc fd00 	bl	8005128 <st_qword>
					st_qword(fs->dirbuf + XDIR_ValidFileSize, 0);
 8008728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800872a:	695b      	ldr	r3, [r3, #20]
 800872c:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8008730:	f04f 0200 	mov.w	r2, #0
 8008734:	f04f 0300 	mov.w	r3, #0
 8008738:	4608      	mov	r0, r1
 800873a:	f7fc fcf5 	bl	8005128 <st_qword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 800873e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008740:	695b      	ldr	r3, [r3, #20]
 8008742:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8008746:	2301      	movs	r3, #1
 8008748:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 800874a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800874e:	4618      	mov	r0, r3
 8008750:	f7fe fb82 	bl	8006e58 <store_xdir>
 8008754:	4603      	mov	r3, r0
 8008756:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust) {		/* Remove the cluster chain if exist */
 800875a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800875e:	2b00      	cmp	r3, #0
 8008760:	d17f      	bne.n	8008862 <f_open+0x306>
 8008762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008764:	689b      	ldr	r3, [r3, #8]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d07b      	beq.n	8008862 <f_open+0x306>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 800876a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800876c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	2200      	movs	r2, #0
 8008772:	4619      	mov	r1, r3
 8008774:	f7fd fc1a 	bl	8005fac <remove_chain>
 8008778:	4603      	mov	r3, r0
 800877a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 800877e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008780:	689b      	ldr	r3, [r3, #8]
 8008782:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008784:	3b01      	subs	r3, #1
 8008786:	6193      	str	r3, [r2, #24]
 8008788:	e06b      	b.n	8008862 <f_open+0x306>
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800878a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800878c:	330e      	adds	r3, #14
 800878e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8008792:	4618      	mov	r0, r3
 8008794:	f7fc fc9c 	bl	80050d0 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008798:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800879a:	3316      	adds	r3, #22
 800879c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 80087a0:	4618      	mov	r0, r3
 80087a2:	f7fc fc95 	bl	80050d0 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80087a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087a8:	f103 020b 	add.w	r2, r3, #11
 80087ac:	2320      	movs	r3, #32
 80087ae:	7013      	strb	r3, [r2, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80087b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087b4:	4619      	mov	r1, r3
 80087b6:	4610      	mov	r0, r2
 80087b8:	f7fd ffcf 	bl	800675a <ld_clust>
 80087bc:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80087c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80087c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087c4:	2200      	movs	r2, #0
 80087c6:	4619      	mov	r1, r3
 80087c8:	f7fd ffe6 	bl	8006798 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80087cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80087ce:	331c      	adds	r3, #28
 80087d0:	2100      	movs	r1, #0
 80087d2:	4618      	mov	r0, r3
 80087d4:	f7fc fc7c 	bl	80050d0 <st_dword>
					fs->wflag = 1;
 80087d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80087da:	2301      	movs	r3, #1
 80087dc:	70d3      	strb	r3, [r2, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80087de:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d03d      	beq.n	8008862 <f_open+0x306>
						dw = fs->winsect;
 80087e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087ea:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						res = remove_chain(&dj.obj, cl, 0);
 80087ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80087f2:	2200      	movs	r2, #0
 80087f4:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 80087f8:	4618      	mov	r0, r3
 80087fa:	f7fd fbd7 	bl	8005fac <remove_chain>
 80087fe:	4603      	mov	r3, r0
 8008800:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 8008804:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008808:	2b00      	cmp	r3, #0
 800880a:	d12a      	bne.n	8008862 <f_open+0x306>
							res = move_window(fs, dw);
 800880c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800880e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8008812:	4618      	mov	r0, r3
 8008814:	f7fc ff3e 	bl	8005694 <move_window>
 8008818:	4603      	mov	r3, r0
 800881a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800881e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008820:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008824:	3b01      	subs	r3, #1
 8008826:	6193      	str	r3, [r2, #24]
 8008828:	e01b      	b.n	8008862 <f_open+0x306>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800882a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800882e:	2b00      	cmp	r3, #0
 8008830:	d117      	bne.n	8008862 <f_open+0x306>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008832:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008836:	f003 0310 	and.w	r3, r3, #16
 800883a:	2b00      	cmp	r3, #0
 800883c:	d003      	beq.n	8008846 <f_open+0x2ea>
					res = FR_NO_FILE;
 800883e:	2304      	movs	r3, #4
 8008840:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8008844:	e00d      	b.n	8008862 <f_open+0x306>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008846:	7ffb      	ldrb	r3, [r7, #31]
 8008848:	f003 0302 	and.w	r3, r3, #2
 800884c:	2b00      	cmp	r3, #0
 800884e:	d008      	beq.n	8008862 <f_open+0x306>
 8008850:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008854:	f003 0301 	and.w	r3, r3, #1
 8008858:	2b00      	cmp	r3, #0
 800885a:	d002      	beq.n	8008862 <f_open+0x306>
						res = FR_DENIED;
 800885c:	2307      	movs	r3, #7
 800885e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008862:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008866:	2b00      	cmp	r3, #0
 8008868:	d126      	bne.n	80088b8 <f_open+0x35c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800886a:	7ffb      	ldrb	r3, [r7, #31]
 800886c:	f003 0308 	and.w	r3, r3, #8
 8008870:	2b00      	cmp	r3, #0
 8008872:	d003      	beq.n	800887c <f_open+0x320>
				mode |= FA_MODIFIED;
 8008874:	7ffb      	ldrb	r3, [r7, #31]
 8008876:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887a:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800887c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800887e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008882:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8008884:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008888:	64da      	str	r2, [r3, #76]	@ 0x4c
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800888a:	7ffb      	ldrb	r3, [r7, #31]
 800888c:	2b01      	cmp	r3, #1
 800888e:	bf8c      	ite	hi
 8008890:	2301      	movhi	r3, #1
 8008892:	2300      	movls	r3, #0
 8008894:	b2db      	uxtb	r3, r3
 8008896:	461a      	mov	r2, r3
 8008898:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800889c:	4611      	mov	r1, r2
 800889e:	4618      	mov	r0, r3
 80088a0:	f7fc fdc6 	bl	8005430 <inc_lock>
 80088a4:	4602      	mov	r2, r0
 80088a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088a8:	62da      	str	r2, [r3, #44]	@ 0x2c
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d102      	bne.n	80088b8 <f_open+0x35c>
 80088b2:	2302      	movs	r3, #2
 80088b4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80088b8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 80088bc:	2b00      	cmp	r3, #0
 80088be:	f040 810e 	bne.w	8008ade <f_open+0x582>
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 80088c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088c4:	781b      	ldrb	r3, [r3, #0]
 80088c6:	2b04      	cmp	r3, #4
 80088c8:	d12d      	bne.n	8008926 <f_open+0x3ca>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 80088ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80088cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ce:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 80088d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80088d4:	4613      	mov	r3, r2
 80088d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80088da:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80088de:	431a      	orrs	r2, r3
 80088e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e2:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 80088e4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80088e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088e8:	629a      	str	r2, [r3, #40]	@ 0x28
				fp->obj.sclust = ld_dword(fs->dirbuf + XDIR_FstClus);	/* Get object allocation info */
 80088ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	3334      	adds	r3, #52	@ 0x34
 80088f0:	4618      	mov	r0, r3
 80088f2:	f7fc fad4 	bl	8004e9e <ld_dword>
 80088f6:	4602      	mov	r2, r0
 80088f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088fa:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
 80088fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088fe:	695b      	ldr	r3, [r3, #20]
 8008900:	3338      	adds	r3, #56	@ 0x38
 8008902:	4618      	mov	r0, r3
 8008904:	f7fc faee 	bl	8004ee4 <ld_qword>
 8008908:	4602      	mov	r2, r0
 800890a:	460b      	mov	r3, r1
 800890c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800890e:	e9c1 2304 	strd	r2, r3, [r1, #16]
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8008912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008914:	695b      	ldr	r3, [r3, #20]
 8008916:	3321      	adds	r3, #33	@ 0x21
 8008918:	781b      	ldrb	r3, [r3, #0]
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	b2da      	uxtb	r2, r3
 8008920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008922:	71da      	strb	r2, [r3, #7]
 8008924:	e016      	b.n	8008954 <f_open+0x3f8>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008928:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800892a:	4619      	mov	r1, r3
 800892c:	4610      	mov	r0, r2
 800892e:	f7fd ff14 	bl	800675a <ld_clust>
 8008932:	4602      	mov	r2, r0
 8008934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008936:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008938:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800893a:	331c      	adds	r3, #28
 800893c:	4618      	mov	r0, r3
 800893e:	f7fc faae 	bl	8004e9e <ld_dword>
 8008942:	4603      	mov	r3, r0
 8008944:	2200      	movs	r2, #0
 8008946:	613b      	str	r3, [r7, #16]
 8008948:	617a      	str	r2, [r7, #20]
 800894a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800894c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008950:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008956:	2200      	movs	r2, #0
 8008958:	651a      	str	r2, [r3, #80]	@ 0x50
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800895a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800895c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800895e:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008962:	88da      	ldrh	r2, [r3, #6]
 8008964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008966:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008968:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800896a:	7ffa      	ldrb	r2, [r7, #31]
 800896c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;			/* Clear error flag */
 8008970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008972:	2200      	movs	r2, #0
 8008974:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;			/* Invalidate current data sector */
 8008978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800897a:	2200      	movs	r2, #0
 800897c:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;			/* Set file pointer top of the file */
 800897e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008980:	f04f 0200 	mov.w	r2, #0
 8008984:	f04f 0300 	mov.w	r3, #0
 8008988:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800898c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800898e:	3354      	adds	r3, #84	@ 0x54
 8008990:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008994:	2100      	movs	r1, #0
 8008996:	4618      	mov	r0, r3
 8008998:	f7fc fc6f 	bl	800527a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800899c:	7ffb      	ldrb	r3, [r7, #31]
 800899e:	f003 0320 	and.w	r3, r3, #32
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	f000 809b 	beq.w	8008ade <f_open+0x582>
 80089a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089aa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	f000 8095 	beq.w	8008ade <f_open+0x582>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80089b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089b6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80089ba:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80089bc:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80089c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c2:	895b      	ldrh	r3, [r3, #10]
 80089c4:	461a      	mov	r2, r3
 80089c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089c8:	899b      	ldrh	r3, [r3, #12]
 80089ca:	fb02 f303 	mul.w	r3, r2, r3
 80089ce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80089d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80089da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80089e0:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 80089e4:	e023      	b.n	8008a2e <f_open+0x4d2>
					clst = get_fat(&fp->obj, clst);
 80089e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089e8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80089ec:	4618      	mov	r0, r3
 80089ee:	f7fc ff0f 	bl	8005810 <get_fat>
 80089f2:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 80089f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d802      	bhi.n	8008a04 <f_open+0x4a8>
 80089fe:	2302      	movs	r3, #2
 8008a00:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008a04:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008a08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a0c:	d102      	bne.n	8008a14 <f_open+0x4b8>
 8008a0e:	2301      	movs	r3, #1
 8008a10:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008a14:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a18:	2200      	movs	r2, #0
 8008a1a:	4698      	mov	r8, r3
 8008a1c:	4691      	mov	r9, r2
 8008a1e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8008a22:	ebb2 0a08 	subs.w	sl, r2, r8
 8008a26:	eb63 0b09 	sbc.w	fp, r3, r9
 8008a2a:	e9c7 ab24 	strd	sl, fp, [r7, #144]	@ 0x90
 8008a2e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d10a      	bne.n	8008a4c <f_open+0x4f0>
 8008a36:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	461c      	mov	r4, r3
 8008a3e:	4615      	mov	r5, r2
 8008a40:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8008a44:	4294      	cmp	r4, r2
 8008a46:	eb75 0303 	sbcs.w	r3, r5, r3
 8008a4a:	d3cc      	bcc.n	80089e6 <f_open+0x48a>
				}
				fp->clust = clst;
 8008a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a4e:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8008a52:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008a54:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d140      	bne.n	8008ade <f_open+0x582>
 8008a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a5e:	899b      	ldrh	r3, [r3, #12]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	2200      	movs	r2, #0
 8008a64:	60bb      	str	r3, [r7, #8]
 8008a66:	60fa      	str	r2, [r7, #12]
 8008a68:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8008a6c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a70:	f7f7 ff0c 	bl	800088c <__aeabi_uldivmod>
 8008a74:	4313      	orrs	r3, r2
 8008a76:	d032      	beq.n	8008ade <f_open+0x582>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008a78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a7a:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f7fc fea6 	bl	80057d0 <clust2sect>
 8008a84:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
 8008a88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d103      	bne.n	8008a98 <f_open+0x53c>
						res = FR_INT_ERR;
 8008a90:	2302      	movs	r3, #2
 8008a92:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8008a96:	e022      	b.n	8008ade <f_open+0x582>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a9a:	899b      	ldrh	r3, [r3, #12]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	603b      	str	r3, [r7, #0]
 8008aa2:	607a      	str	r2, [r7, #4]
 8008aa4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008aa8:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8008aac:	f7f7 feee 	bl	800088c <__aeabi_uldivmod>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008ab8:	441a      	add	r2, r3
 8008aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008abc:	645a      	str	r2, [r3, #68]	@ 0x44
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008abe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ac0:	7858      	ldrb	r0, [r3, #1]
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ac4:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008acc:	2301      	movs	r3, #1
 8008ace:	f7fc f96f 	bl	8004db0 <disk_read>
 8008ad2:	4603      	mov	r3, r0
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d002      	beq.n	8008ade <f_open+0x582>
 8008ad8:	2301      	movs	r3, #1
 8008ada:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008ade:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d002      	beq.n	8008aec <f_open+0x590>
 8008ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ae8:	2200      	movs	r2, #0
 8008aea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008aec:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	37a0      	adds	r7, #160	@ 0xa0
 8008af4:	46bd      	mov	sp, r7
 8008af6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008afa <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8008afa:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008afe:	b098      	sub	sp, #96	@ 0x60
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8008b04:	62b9      	str	r1, [r7, #40]	@ 0x28
 8008b06:	627a      	str	r2, [r7, #36]	@ 0x24
 8008b08:	623b      	str	r3, [r7, #32]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8008b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b0c:	64fb      	str	r3, [r7, #76]	@ 0x4c


	*br = 0;	/* Clear read byte counter */
 8008b0e:	6a3a      	ldr	r2, [r7, #32]
 8008b10:	2300      	movs	r3, #0
 8008b12:	6013      	str	r3, [r2, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8008b14:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b16:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	f7ff fca1 	bl	8008464 <validate>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008b28:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d108      	bne.n	8008b42 <f_read+0x48>
 8008b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b32:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008b36:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8008b3a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d002      	beq.n	8008b48 <f_read+0x4e>
 8008b42:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008b46:	e16b      	b.n	8008e20 <f_read+0x326>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8008b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008b4e:	f003 0301 	and.w	r3, r3, #1
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d101      	bne.n	8008b5a <f_read+0x60>
 8008b56:	2307      	movs	r3, #7
 8008b58:	e162      	b.n	8008e20 <f_read+0x326>
	remain = fp->obj.objsize - fp->fptr;
 8008b5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b5c:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8008b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b62:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008b66:	ebb0 0802 	subs.w	r8, r0, r2
 8008b6a:	eb61 0903 	sbc.w	r9, r1, r3
 8008b6e:	e9c7 8910 	strd	r8, r9, [r7, #64]	@ 0x40
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8008b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b74:	2200      	movs	r2, #0
 8008b76:	461c      	mov	r4, r3
 8008b78:	4615      	mov	r5, r2
 8008b7a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008b7e:	42a2      	cmp	r2, r4
 8008b80:	41ab      	sbcs	r3, r5
 8008b82:	f080 8148 	bcs.w	8008e16 <f_read+0x31c>
 8008b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008b88:	627b      	str	r3, [r7, #36]	@ 0x24

	for ( ;  btr;								/* Repeat until all data read */
 8008b8a:	e144      	b.n	8008e16 <f_read+0x31c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8008b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008b8e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008b92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b94:	899b      	ldrh	r3, [r3, #12]
 8008b96:	b29b      	uxth	r3, r3
 8008b98:	2200      	movs	r2, #0
 8008b9a:	61bb      	str	r3, [r7, #24]
 8008b9c:	61fa      	str	r2, [r7, #28]
 8008b9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ba2:	f7f7 fe73 	bl	800088c <__aeabi_uldivmod>
 8008ba6:	4313      	orrs	r3, r2
 8008ba8:	f040 80e9 	bne.w	8008d7e <f_read+0x284>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8008bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bae:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008bb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bb4:	899b      	ldrh	r3, [r3, #12]
 8008bb6:	b29b      	uxth	r3, r3
 8008bb8:	2200      	movs	r2, #0
 8008bba:	613b      	str	r3, [r7, #16]
 8008bbc:	617a      	str	r2, [r7, #20]
 8008bbe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008bc2:	f7f7 fe63 	bl	800088c <__aeabi_uldivmod>
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	460b      	mov	r3, r1
 8008bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bcc:	895b      	ldrh	r3, [r3, #10]
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	4013      	ands	r3, r2
 8008bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
			if (csect == 0) {					/* On the cluster boundary? */
 8008bd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d132      	bne.n	8008c40 <f_read+0x146>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8008bda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bdc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008be0:	4313      	orrs	r3, r2
 8008be2:	d103      	bne.n	8008bec <f_read+0xf2>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8008be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008bea:	e013      	b.n	8008c14 <f_read+0x11a>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d007      	beq.n	8008c04 <f_read+0x10a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008bf6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008bfa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008bfc:	f7fd fb8b 	bl	8006316 <clmt_clust>
 8008c00:	65b8      	str	r0, [r7, #88]	@ 0x58
 8008c02:	e007      	b.n	8008c14 <f_read+0x11a>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8008c04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	4610      	mov	r0, r2
 8008c0e:	f7fc fdff 	bl	8005810 <get_fat>
 8008c12:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8008c14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d805      	bhi.n	8008c26 <f_read+0x12c>
 8008c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1c:	2202      	movs	r2, #2
 8008c1e:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008c22:	2302      	movs	r3, #2
 8008c24:	e0fc      	b.n	8008e20 <f_read+0x326>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008c26:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c2c:	d105      	bne.n	8008c3a <f_read+0x140>
 8008c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c30:	2201      	movs	r2, #1
 8008c32:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008c36:	2301      	movs	r3, #1
 8008c38:	e0f2      	b.n	8008e20 <f_read+0x326>
				fp->clust = clst;				/* Update current cluster */
 8008c3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008c3e:	641a      	str	r2, [r3, #64]	@ 0x40
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008c40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c46:	4619      	mov	r1, r3
 8008c48:	4610      	mov	r0, r2
 8008c4a:	f7fc fdc1 	bl	80057d0 <clust2sect>
 8008c4e:	63b8      	str	r0, [r7, #56]	@ 0x38
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d105      	bne.n	8008c62 <f_read+0x168>
 8008c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c58:	2202      	movs	r2, #2
 8008c5a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008c5e:	2302      	movs	r3, #2
 8008c60:	e0de      	b.n	8008e20 <f_read+0x326>
			sect += csect;
 8008c62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008c64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c66:	4413      	add	r3, r2
 8008c68:	63bb      	str	r3, [r7, #56]	@ 0x38
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c6c:	899b      	ldrh	r3, [r3, #12]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c72:	fbb3 f3f2 	udiv	r3, r3, r2
 8008c76:	653b      	str	r3, [r7, #80]	@ 0x50
			if (cc) {							/* Read maximum contiguous sectors directly */
 8008c78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d043      	beq.n	8008d06 <f_read+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008c7e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8008c80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c82:	4413      	add	r3, r2
 8008c84:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008c86:	8952      	ldrh	r2, [r2, #10]
 8008c88:	4293      	cmp	r3, r2
 8008c8a:	d905      	bls.n	8008c98 <f_read+0x19e>
					cc = fs->csize - csect;
 8008c8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c8e:	895b      	ldrh	r3, [r3, #10]
 8008c90:	461a      	mov	r2, r3
 8008c92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c94:	1ad3      	subs	r3, r2, r3
 8008c96:	653b      	str	r3, [r7, #80]	@ 0x50
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008c98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c9a:	7858      	ldrb	r0, [r3, #1]
 8008c9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008ca0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8008ca2:	f7fc f885 	bl	8004db0 <disk_read>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d005      	beq.n	8008cb8 <f_read+0x1be>
 8008cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cae:	2201      	movs	r2, #1
 8008cb0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e0b3      	b.n	8008e20 <f_read+0x326>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8008cb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008cbe:	b25b      	sxtb	r3, r3
 8008cc0:	2b00      	cmp	r3, #0
 8008cc2:	da18      	bge.n	8008cf6 <f_read+0x1fc>
 8008cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cc6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cca:	1ad3      	subs	r3, r2, r3
 8008ccc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008cce:	429a      	cmp	r2, r3
 8008cd0:	d911      	bls.n	8008cf6 <f_read+0x1fc>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8008cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008cd4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd8:	1ad3      	subs	r3, r2, r3
 8008cda:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008cdc:	8992      	ldrh	r2, [r2, #12]
 8008cde:	fb02 f303 	mul.w	r3, r2, r3
 8008ce2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008ce4:	18d0      	adds	r0, r2, r3
 8008ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ce8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008cec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cee:	899b      	ldrh	r3, [r3, #12]
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	f7fc faa1 	bl	8005238 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8008cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cf8:	899b      	ldrh	r3, [r3, #12]
 8008cfa:	461a      	mov	r2, r3
 8008cfc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cfe:	fb02 f303 	mul.w	r3, r2, r3
 8008d02:	657b      	str	r3, [r7, #84]	@ 0x54
				continue;
 8008d04:	e067      	b.n	8008dd6 <f_read+0x2dc>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8008d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008d0a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d033      	beq.n	8008d78 <f_read+0x27e>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8008d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d16:	b25b      	sxtb	r3, r3
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	da1b      	bge.n	8008d54 <f_read+0x25a>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008d1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d1e:	7858      	ldrb	r0, [r3, #1]
 8008d20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d22:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008d26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008d2a:	2301      	movs	r3, #1
 8008d2c:	f7fc f860 	bl	8004df0 <disk_write>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d005      	beq.n	8008d42 <f_read+0x248>
 8008d36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e06e      	b.n	8008e20 <f_read+0x326>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008d42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008d48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d4c:	b2da      	uxtb	r2, r3
 8008d4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d50:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8008d54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d56:	7858      	ldrb	r0, [r3, #1]
 8008d58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d5a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008d5e:	2301      	movs	r3, #1
 8008d60:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d62:	f7fc f825 	bl	8004db0 <disk_read>
 8008d66:	4603      	mov	r3, r0
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d005      	beq.n	8008d78 <f_read+0x27e>
 8008d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008d74:	2301      	movs	r3, #1
 8008d76:	e053      	b.n	8008e20 <f_read+0x326>
			}
#endif
			fp->sect = sect;
 8008d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d7a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008d7c:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008d7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d80:	899b      	ldrh	r3, [r3, #12]
 8008d82:	4618      	mov	r0, r3
 8008d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008d86:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008d8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d8c:	899b      	ldrh	r3, [r3, #12]
 8008d8e:	fbb2 f1f3 	udiv	r1, r2, r3
 8008d92:	fb01 f303 	mul.w	r3, r1, r3
 8008d96:	1ad3      	subs	r3, r2, r3
 8008d98:	1ac3      	subs	r3, r0, r3
 8008d9a:	657b      	str	r3, [r7, #84]	@ 0x54
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8008d9c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d901      	bls.n	8008da8 <f_read+0x2ae>
 8008da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008da6:	657b      	str	r3, [r7, #84]	@ 0x54
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8008da8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008daa:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 8008dae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008db0:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008db4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008db6:	899b      	ldrh	r3, [r3, #12]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	2200      	movs	r2, #0
 8008dbc:	60bb      	str	r3, [r7, #8]
 8008dbe:	60fa      	str	r2, [r7, #12]
 8008dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008dc4:	f7f7 fd62 	bl	800088c <__aeabi_uldivmod>
 8008dc8:	4613      	mov	r3, r2
 8008dca:	4423      	add	r3, r4
 8008dcc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8008dd2:	f7fc fa31 	bl	8005238 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8008dd6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dd8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dda:	4413      	add	r3, r2
 8008ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008de0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008de4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008de6:	2000      	movs	r0, #0
 8008de8:	468a      	mov	sl, r1
 8008dea:	4683      	mov	fp, r0
 8008dec:	eb12 010a 	adds.w	r1, r2, sl
 8008df0:	6039      	str	r1, [r7, #0]
 8008df2:	eb43 030b 	adc.w	r3, r3, fp
 8008df6:	607b      	str	r3, [r7, #4]
 8008df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dfa:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008dfe:	e9c3 120e 	strd	r1, r2, [r3, #56]	@ 0x38
 8008e02:	6a3b      	ldr	r3, [r7, #32]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e08:	441a      	add	r2, r3
 8008e0a:	6a3b      	ldr	r3, [r7, #32]
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008e12:	1ad3      	subs	r3, r2, r3
 8008e14:	627b      	str	r3, [r7, #36]	@ 0x24
	for ( ;  btr;								/* Repeat until all data read */
 8008e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	f47f aeb7 	bne.w	8008b8c <f_read+0x92>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8008e1e:	2300      	movs	r3, #0
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3760      	adds	r7, #96	@ 0x60
 8008e24:	46bd      	mov	sp, r7
 8008e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008e2a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008e2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e2e:	b091      	sub	sp, #68	@ 0x44
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	61f8      	str	r0, [r7, #28]
 8008e34:	61b9      	str	r1, [r7, #24]
 8008e36:	617a      	str	r2, [r7, #20]
 8008e38:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	2200      	movs	r2, #0
 8008e42:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008e44:	69fb      	ldr	r3, [r7, #28]
 8008e46:	f107 0220 	add.w	r2, r7, #32
 8008e4a:	4611      	mov	r1, r2
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7ff fb09 	bl	8008464 <validate>
 8008e52:	4603      	mov	r3, r0
 8008e54:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008e58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d108      	bne.n	8008e72 <f_write+0x48>
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8008e66:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8008e6a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d002      	beq.n	8008e78 <f_write+0x4e>
 8008e72:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008e76:	e1aa      	b.n	80091ce <f_write+0x3a4>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008e7e:	f003 0302 	and.w	r3, r3, #2
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d101      	bne.n	8008e8a <f_write+0x60>
 8008e86:	2307      	movs	r3, #7
 8008e88:	e1a1      	b.n	80091ce <f_write+0x3a4>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008e8a:	6a3b      	ldr	r3, [r7, #32]
 8008e8c:	781b      	ldrb	r3, [r3, #0]
 8008e8e:	2b04      	cmp	r3, #4
 8008e90:	f000 818d 	beq.w	80091ae <f_write+0x384>
 8008e94:	69fb      	ldr	r3, [r7, #28]
 8008e96:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008e9a:	697b      	ldr	r3, [r7, #20]
 8008e9c:	18d1      	adds	r1, r2, r3
 8008e9e:	69fb      	ldr	r3, [r7, #28]
 8008ea0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008ea4:	4613      	mov	r3, r2
 8008ea6:	4299      	cmp	r1, r3
 8008ea8:	f080 8181 	bcs.w	80091ae <f_write+0x384>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008eac:	69fb      	ldr	r3, [r7, #28]
 8008eae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	43db      	mvns	r3, r3
 8008eb6:	617b      	str	r3, [r7, #20]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008eb8:	e179      	b.n	80091ae <f_write+0x384>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008eba:	69fb      	ldr	r3, [r7, #28]
 8008ebc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008ec0:	6a3b      	ldr	r3, [r7, #32]
 8008ec2:	899b      	ldrh	r3, [r3, #12]
 8008ec4:	b29b      	uxth	r3, r3
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	461d      	mov	r5, r3
 8008eca:	4616      	mov	r6, r2
 8008ecc:	462a      	mov	r2, r5
 8008ece:	4633      	mov	r3, r6
 8008ed0:	f7f7 fcdc 	bl	800088c <__aeabi_uldivmod>
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	f040 810a 	bne.w	80090ee <f_write+0x2c4>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008eda:	69fb      	ldr	r3, [r7, #28]
 8008edc:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8008ee0:	6a3b      	ldr	r3, [r7, #32]
 8008ee2:	899b      	ldrh	r3, [r3, #12]
 8008ee4:	b29b      	uxth	r3, r3
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	60bb      	str	r3, [r7, #8]
 8008eea:	60fa      	str	r2, [r7, #12]
 8008eec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008ef0:	f7f7 fccc 	bl	800088c <__aeabi_uldivmod>
 8008ef4:	4602      	mov	r2, r0
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	6a3b      	ldr	r3, [r7, #32]
 8008efa:	895b      	ldrh	r3, [r3, #10]
 8008efc:	3b01      	subs	r3, #1
 8008efe:	4013      	ands	r3, r2
 8008f00:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 8008f02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d146      	bne.n	8008f96 <f_write+0x16c>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	d10c      	bne.n	8008f2c <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008f12:	69fb      	ldr	r3, [r7, #28]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 8008f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d11a      	bne.n	8008f54 <f_write+0x12a>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008f1e:	69fb      	ldr	r3, [r7, #28]
 8008f20:	2100      	movs	r1, #0
 8008f22:	4618      	mov	r0, r3
 8008f24:	f7fd f8f6 	bl	8006114 <create_chain>
 8008f28:	63b8      	str	r0, [r7, #56]	@ 0x38
 8008f2a:	e013      	b.n	8008f54 <f_write+0x12a>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <f_write+0x11a>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8008f3a:	69f8      	ldr	r0, [r7, #28]
 8008f3c:	f7fd f9eb 	bl	8006316 <clmt_clust>
 8008f40:	63b8      	str	r0, [r7, #56]	@ 0x38
 8008f42:	e007      	b.n	8008f54 <f_write+0x12a>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008f44:	69fa      	ldr	r2, [r7, #28]
 8008f46:	69fb      	ldr	r3, [r7, #28]
 8008f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	4610      	mov	r0, r2
 8008f4e:	f7fd f8e1 	bl	8006114 <create_chain>
 8008f52:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	f000 812e 	beq.w	80091b8 <f_write+0x38e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d105      	bne.n	8008f6e <f_write+0x144>
 8008f62:	69fb      	ldr	r3, [r7, #28]
 8008f64:	2202      	movs	r2, #2
 8008f66:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	e12f      	b.n	80091ce <f_write+0x3a4>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f74:	d105      	bne.n	8008f82 <f_write+0x158>
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	2201      	movs	r2, #1
 8008f7a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e125      	b.n	80091ce <f_write+0x3a4>
				fp->clust = clst;			/* Update current cluster */
 8008f82:	69fb      	ldr	r3, [r7, #28]
 8008f84:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f86:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008f88:	69fb      	ldr	r3, [r7, #28]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d102      	bne.n	8008f96 <f_write+0x16c>
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008f94:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008f96:	69fb      	ldr	r3, [r7, #28]
 8008f98:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008f9c:	b25b      	sxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	da1b      	bge.n	8008fda <f_write+0x1b0>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008fa2:	6a3b      	ldr	r3, [r7, #32]
 8008fa4:	7858      	ldrb	r0, [r3, #1]
 8008fa6:	69fb      	ldr	r3, [r7, #28]
 8008fa8:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8008fac:	69fb      	ldr	r3, [r7, #28]
 8008fae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	f7fb ff1d 	bl	8004df0 <disk_write>
 8008fb6:	4603      	mov	r3, r0
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d005      	beq.n	8008fc8 <f_write+0x19e>
 8008fbc:	69fb      	ldr	r3, [r7, #28]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e102      	b.n	80091ce <f_write+0x3a4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008fc8:	69fb      	ldr	r3, [r7, #28]
 8008fca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8008fce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008fd2:	b2da      	uxtb	r2, r3
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008fda:	6a3a      	ldr	r2, [r7, #32]
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008fe0:	4619      	mov	r1, r3
 8008fe2:	4610      	mov	r0, r2
 8008fe4:	f7fc fbf4 	bl	80057d0 <clust2sect>
 8008fe8:	6278      	str	r0, [r7, #36]	@ 0x24
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d105      	bne.n	8008ffc <f_write+0x1d2>
 8008ff0:	69fb      	ldr	r3, [r7, #28]
 8008ff2:	2202      	movs	r2, #2
 8008ff4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8008ff8:	2302      	movs	r3, #2
 8008ffa:	e0e8      	b.n	80091ce <f_write+0x3a4>
			sect += csect;
 8008ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009000:	4413      	add	r3, r2
 8009002:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8009004:	6a3b      	ldr	r3, [r7, #32]
 8009006:	899b      	ldrh	r3, [r3, #12]
 8009008:	461a      	mov	r2, r3
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009010:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc) {						/* Write maximum contiguous sectors directly */
 8009012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009014:	2b00      	cmp	r3, #0
 8009016:	d046      	beq.n	80090a6 <f_write+0x27c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8009018:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800901a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800901c:	4413      	add	r3, r2
 800901e:	6a3a      	ldr	r2, [r7, #32]
 8009020:	8952      	ldrh	r2, [r2, #10]
 8009022:	4293      	cmp	r3, r2
 8009024:	d905      	bls.n	8009032 <f_write+0x208>
					cc = fs->csize - csect;
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	895b      	ldrh	r3, [r3, #10]
 800902a:	461a      	mov	r2, r3
 800902c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8009032:	6a3b      	ldr	r3, [r7, #32]
 8009034:	7858      	ldrb	r0, [r3, #1]
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800903a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800903c:	f7fb fed8 	bl	8004df0 <disk_write>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d005      	beq.n	8009052 <f_write+0x228>
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	2201      	movs	r2, #1
 800904a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800904e:	2301      	movs	r3, #1
 8009050:	e0bd      	b.n	80091ce <f_write+0x3a4>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8009052:	69fb      	ldr	r3, [r7, #28]
 8009054:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009058:	1ad3      	subs	r3, r2, r3
 800905a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800905c:	429a      	cmp	r2, r3
 800905e:	d91a      	bls.n	8009096 <f_write+0x26c>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8009066:	69fb      	ldr	r3, [r7, #28]
 8009068:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800906a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800906c:	1ad3      	subs	r3, r2, r3
 800906e:	6a3a      	ldr	r2, [r7, #32]
 8009070:	8992      	ldrh	r2, [r2, #12]
 8009072:	fb02 f303 	mul.w	r3, r2, r3
 8009076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009078:	18d1      	adds	r1, r2, r3
 800907a:	6a3b      	ldr	r3, [r7, #32]
 800907c:	899b      	ldrh	r3, [r3, #12]
 800907e:	461a      	mov	r2, r3
 8009080:	f7fc f8da 	bl	8005238 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800908a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800908e:	b2da      	uxtb	r2, r3
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8009096:	6a3b      	ldr	r3, [r7, #32]
 8009098:	899b      	ldrh	r3, [r3, #12]
 800909a:	461a      	mov	r2, r3
 800909c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800909e:	fb02 f303 	mul.w	r3, r2, r3
 80090a2:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 80090a4:	e058      	b.n	8009158 <f_write+0x32e>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090a6:	69fb      	ldr	r3, [r7, #28]
 80090a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d01b      	beq.n	80090e8 <f_write+0x2be>
				fp->fptr < fp->obj.objsize &&
 80090b0:	69fb      	ldr	r3, [r7, #28]
 80090b2:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80090bc:	4290      	cmp	r0, r2
 80090be:	eb71 0303 	sbcs.w	r3, r1, r3
 80090c2:	d211      	bcs.n	80090e8 <f_write+0x2be>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	7858      	ldrb	r0, [r3, #1]
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 80090ce:	2301      	movs	r3, #1
 80090d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090d2:	f7fb fe6d 	bl	8004db0 <disk_read>
 80090d6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d005      	beq.n	80090e8 <f_write+0x2be>
					ABORT(fs, FR_DISK_ERR);
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	2201      	movs	r2, #1
 80090e0:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80090e4:	2301      	movs	r3, #1
 80090e6:	e072      	b.n	80091ce <f_write+0x3a4>
			}
#endif
			fp->sect = sect;
 80090e8:	69fb      	ldr	r3, [r7, #28]
 80090ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80090ec:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	899b      	ldrh	r3, [r3, #12]
 80090f2:	4618      	mov	r0, r3
 80090f4:	69fb      	ldr	r3, [r7, #28]
 80090f6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80090fa:	6a3b      	ldr	r3, [r7, #32]
 80090fc:	899b      	ldrh	r3, [r3, #12]
 80090fe:	fbb2 f1f3 	udiv	r1, r2, r3
 8009102:	fb01 f303 	mul.w	r3, r1, r3
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	1ac3      	subs	r3, r0, r3
 800910a:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800910c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	429a      	cmp	r2, r3
 8009112:	d901      	bls.n	8009118 <f_write+0x2ee>
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	637b      	str	r3, [r7, #52]	@ 0x34
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009118:	69fb      	ldr	r3, [r7, #28]
 800911a:	f103 0454 	add.w	r4, r3, #84	@ 0x54
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8009124:	6a3b      	ldr	r3, [r7, #32]
 8009126:	899b      	ldrh	r3, [r3, #12]
 8009128:	b29b      	uxth	r3, r3
 800912a:	2200      	movs	r2, #0
 800912c:	603b      	str	r3, [r7, #0]
 800912e:	607a      	str	r2, [r7, #4]
 8009130:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009134:	f7f7 fbaa 	bl	800088c <__aeabi_uldivmod>
 8009138:	4613      	mov	r3, r2
 800913a:	4423      	add	r3, r4
 800913c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800913e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009140:	4618      	mov	r0, r3
 8009142:	f7fc f879 	bl	8005238 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8009146:	69fb      	ldr	r3, [r7, #28]
 8009148:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800914c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009150:	b2da      	uxtb	r2, r3
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009158:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800915a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800915c:	4413      	add	r3, r2
 800915e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009160:	69fb      	ldr	r3, [r7, #28]
 8009162:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009166:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009168:	2000      	movs	r0, #0
 800916a:	4688      	mov	r8, r1
 800916c:	4681      	mov	r9, r0
 800916e:	eb12 0a08 	adds.w	sl, r2, r8
 8009172:	eb43 0b09 	adc.w	fp, r3, r9
 8009176:	69fb      	ldr	r3, [r7, #28]
 8009178:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8009182:	69fb      	ldr	r3, [r7, #28]
 8009184:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8009188:	4290      	cmp	r0, r2
 800918a:	eb71 0403 	sbcs.w	r4, r1, r3
 800918e:	d201      	bcs.n	8009194 <f_write+0x36a>
 8009190:	4610      	mov	r0, r2
 8009192:	4619      	mov	r1, r3
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	681a      	ldr	r2, [r3, #0]
 800919e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a0:	441a      	add	r2, r3
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	601a      	str	r2, [r3, #0]
 80091a6:	697a      	ldr	r2, [r7, #20]
 80091a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091aa:	1ad3      	subs	r3, r2, r3
 80091ac:	617b      	str	r3, [r7, #20]
	for ( ;  btw;							/* Repeat until all data written */
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	f47f ae82 	bne.w	8008eba <f_write+0x90>
 80091b6:	e000      	b.n	80091ba <f_write+0x390>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80091b8:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80091ba:	69fb      	ldr	r3, [r7, #28]
 80091bc:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80091c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091c4:	b2da      	uxtb	r2, r3
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3744      	adds	r7, #68	@ 0x44
 80091d2:	46bd      	mov	sp, r7
 80091d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080091d8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b09a      	sub	sp, #104	@ 0x68
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80091e6:	4611      	mov	r1, r2
 80091e8:	4618      	mov	r0, r3
 80091ea:	f7ff f93b 	bl	8008464 <validate>
 80091ee:	4603      	mov	r3, r0
 80091f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80091f4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	f040 8105 	bne.w	8009408 <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009208:	2b00      	cmp	r3, #0
 800920a:	f000 80fd 	beq.w	8009408 <f_sync+0x230>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009214:	b25b      	sxtb	r3, r3
 8009216:	2b00      	cmp	r3, #0
 8009218:	da17      	bge.n	800924a <f_sync+0x72>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800921a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800921c:	7858      	ldrb	r0, [r3, #1]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009228:	2301      	movs	r3, #1
 800922a:	f7fb fde1 	bl	8004df0 <disk_write>
 800922e:	4603      	mov	r3, r0
 8009230:	2b00      	cmp	r3, #0
 8009232:	d001      	beq.n	8009238 <f_sync+0x60>
 8009234:	2301      	movs	r3, #1
 8009236:	e0e9      	b.n	800940c <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800923e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009242:	b2da      	uxtb	r2, r3
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800924a:	f7fb fd11 	bl	8004c70 <get_fattime>
 800924e:	6638      	str	r0, [r7, #96]	@ 0x60
#if _FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8009250:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009252:	781b      	ldrb	r3, [r3, #0]
 8009254:	2b04      	cmp	r3, #4
 8009256:	f040 808c 	bne.w	8009372 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	4618      	mov	r0, r3
 800925e:	f7fc fe45 	bl	8005eec <fill_first_frag>
 8009262:	4603      	mov	r3, r0
 8009264:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 8009268:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800926c:	2b00      	cmp	r3, #0
 800926e:	d10a      	bne.n	8009286 <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009276:	f04f 32ff 	mov.w	r2, #4294967295
 800927a:	4619      	mov	r1, r3
 800927c:	f7fc fe65 	bl	8005f4a <fill_last_frag>
 8009280:	4603      	mov	r3, r0
 8009282:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 8009286:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800928a:	2b00      	cmp	r3, #0
 800928c:	f040 80bc 	bne.w	8009408 <f_sync+0x230>
					INIT_NAMBUF(fs);
					res = load_obj_dir(&dj, &fp->obj);	/* Load directory entry block */
 8009290:	687a      	ldr	r2, [r7, #4]
 8009292:	f107 0308 	add.w	r3, r7, #8
 8009296:	4611      	mov	r1, r2
 8009298:	4618      	mov	r0, r3
 800929a:	f7fd fda7 	bl	8006dec <load_obj_dir>
 800929e:	4603      	mov	r3, r0
 80092a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 80092a4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f040 80ad 	bne.w	8009408 <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive bit */
 80092ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092b0:	695b      	ldr	r3, [r3, #20]
 80092b2:	3304      	adds	r3, #4
 80092b4:	781a      	ldrb	r2, [r3, #0]
 80092b6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	3304      	adds	r3, #4
 80092bc:	f042 0220 	orr.w	r2, r2, #32
 80092c0:	b2d2      	uxtb	r2, r2
 80092c2:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation info */
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	79da      	ldrb	r2, [r3, #7]
 80092c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092ca:	695b      	ldr	r3, [r3, #20]
 80092cc:	3321      	adds	r3, #33	@ 0x21
 80092ce:	f042 0201 	orr.w	r2, r2, #1
 80092d2:	b2d2      	uxtb	r2, r2
 80092d4:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);
 80092d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	4619      	mov	r1, r3
 80092e4:	4610      	mov	r0, r2
 80092e6:	f7fb fef3 	bl	80050d0 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);
 80092ea:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80092ec:	695b      	ldr	r3, [r3, #20]
 80092ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80092f8:	4608      	mov	r0, r1
 80092fa:	f7fb ff15 	bl	8005128 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);
 80092fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009300:	695b      	ldr	r3, [r3, #20]
 8009302:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800930c:	4608      	mov	r0, r1
 800930e:	f7fb ff0b 	bl	8005128 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8009312:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009314:	695b      	ldr	r3, [r3, #20]
 8009316:	330c      	adds	r3, #12
 8009318:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800931a:	4618      	mov	r0, r3
 800931c:	f7fb fed8 	bl	80050d0 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8009320:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009322:	695b      	ldr	r3, [r3, #20]
 8009324:	3315      	adds	r3, #21
 8009326:	2200      	movs	r2, #0
 8009328:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 800932a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800932c:	695b      	ldr	r3, [r3, #20]
 800932e:	3310      	adds	r3, #16
 8009330:	2100      	movs	r1, #0
 8009332:	4618      	mov	r0, r3
 8009334:	f7fb fecc 	bl	80050d0 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 8009338:	f107 0308 	add.w	r3, r7, #8
 800933c:	4618      	mov	r0, r3
 800933e:	f7fd fd8b 	bl	8006e58 <store_xdir>
 8009342:	4603      	mov	r3, r0
 8009344:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8009348:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800934c:	2b00      	cmp	r3, #0
 800934e:	d15b      	bne.n	8009408 <f_sync+0x230>
							res = sync_fs(fs);
 8009350:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009352:	4618      	mov	r0, r3
 8009354:	f7fc f9cc 	bl	80056f0 <sync_fs>
 8009358:	4603      	mov	r3, r0
 800935a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8009364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009368:	b2da      	uxtb	r2, r3
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8009370:	e04a      	b.n	8009408 <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8009372:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009378:	4619      	mov	r1, r3
 800937a:	4610      	mov	r0, r2
 800937c:	f7fc f98a 	bl	8005694 <move_window>
 8009380:	4603      	mov	r3, r0
 8009382:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 8009386:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800938a:	2b00      	cmp	r3, #0
 800938c:	d13c      	bne.n	8009408 <f_sync+0x230>
					dir = fp->dir_ptr;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009392:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8009394:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009396:	330b      	adds	r3, #11
 8009398:	781a      	ldrb	r2, [r3, #0]
 800939a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800939c:	330b      	adds	r3, #11
 800939e:	f042 0220 	orr.w	r2, r2, #32
 80093a2:	b2d2      	uxtb	r2, r2
 80093a4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6818      	ldr	r0, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	689b      	ldr	r3, [r3, #8]
 80093ae:	461a      	mov	r2, r3
 80093b0:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80093b2:	f7fd f9f1 	bl	8006798 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80093b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093b8:	f103 001c 	add.w	r0, r3, #28
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80093c2:	4613      	mov	r3, r2
 80093c4:	4619      	mov	r1, r3
 80093c6:	f7fb fe83 	bl	80050d0 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80093ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093cc:	3316      	adds	r3, #22
 80093ce:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80093d0:	4618      	mov	r0, r3
 80093d2:	f7fb fe7d 	bl	80050d0 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80093d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80093d8:	3312      	adds	r3, #18
 80093da:	2100      	movs	r1, #0
 80093dc:	4618      	mov	r0, r3
 80093de:	f7fb fe5c 	bl	800509a <st_word>
					fs->wflag = 1;
 80093e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093e4:	2201      	movs	r2, #1
 80093e6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80093e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80093ea:	4618      	mov	r0, r3
 80093ec:	f7fc f980 	bl	80056f0 <sync_fs>
 80093f0:	4603      	mov	r3, r0
 80093f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80093fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009400:	b2da      	uxtb	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009408:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800940c:	4618      	mov	r0, r3
 800940e:	3768      	adds	r7, #104	@ 0x68
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}

08009414 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f7ff fedb 	bl	80091d8 <f_sync>
 8009422:	4603      	mov	r3, r0
 8009424:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009426:	7bfb      	ldrb	r3, [r7, #15]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d118      	bne.n	800945e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f107 0208 	add.w	r2, r7, #8
 8009432:	4611      	mov	r1, r2
 8009434:	4618      	mov	r0, r3
 8009436:	f7ff f815 	bl	8008464 <validate>
 800943a:	4603      	mov	r3, r0
 800943c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800943e:	7bfb      	ldrb	r3, [r7, #15]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d10c      	bne.n	800945e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009448:	4618      	mov	r0, r3
 800944a:	f7fc f87f 	bl	800554c <dec_lock>
 800944e:	4603      	mov	r3, r0
 8009450:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d102      	bne.n	800945e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2200      	movs	r2, #0
 800945c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800945e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3710      	adds	r7, #16
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b09a      	sub	sp, #104	@ 0x68
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8009474:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8009478:	f107 030c 	add.w	r3, r7, #12
 800947c:	2200      	movs	r2, #0
 800947e:	4618      	mov	r0, r3
 8009480:	f7fe fc56 	bl	8007d30 <find_volume>
 8009484:	4603      	mov	r3, r0
 8009486:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800948a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800948e:	2b00      	cmp	r3, #0
 8009490:	f040 80eb 	bne.w	800966a <f_getfree+0x202>
		*fatfs = fs;				/* Return ptr to the fs object */
 8009494:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800949a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800949c:	69da      	ldr	r2, [r3, #28]
 800949e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094a0:	6a1b      	ldr	r3, [r3, #32]
 80094a2:	3b02      	subs	r3, #2
 80094a4:	429a      	cmp	r2, r3
 80094a6:	d804      	bhi.n	80094b2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80094a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094aa:	69da      	ldr	r2, [r3, #28]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	601a      	str	r2, [r3, #0]
 80094b0:	e0db      	b.n	800966a <f_getfree+0x202>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80094b2:	2300      	movs	r3, #0
 80094b4:	663b      	str	r3, [r7, #96]	@ 0x60
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80094b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	2b01      	cmp	r3, #1
 80094bc:	d128      	bne.n	8009510 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80094be:	2302      	movs	r3, #2
 80094c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80094c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094c4:	613b      	str	r3, [r7, #16]
				do {
					stat = get_fat(&obj, clst);
 80094c6:	f107 0310 	add.w	r3, r7, #16
 80094ca:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80094cc:	4618      	mov	r0, r3
 80094ce:	f7fc f99f 	bl	8005810 <get_fat>
 80094d2:	6478      	str	r0, [r7, #68]	@ 0x44
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80094d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094da:	d103      	bne.n	80094e4 <f_getfree+0x7c>
 80094dc:	2301      	movs	r3, #1
 80094de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80094e2:	e0b5      	b.n	8009650 <f_getfree+0x1e8>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80094e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d103      	bne.n	80094f2 <f_getfree+0x8a>
 80094ea:	2302      	movs	r3, #2
 80094ec:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80094f0:	e0ae      	b.n	8009650 <f_getfree+0x1e8>
					if (stat == 0) nfree++;
 80094f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d102      	bne.n	80094fe <f_getfree+0x96>
 80094f8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094fa:	3301      	adds	r3, #1
 80094fc:	663b      	str	r3, [r7, #96]	@ 0x60
				} while (++clst < fs->n_fatent);
 80094fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009500:	3301      	adds	r3, #1
 8009502:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009504:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009506:	6a1b      	ldr	r3, [r3, #32]
 8009508:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800950a:	429a      	cmp	r2, r3
 800950c:	d3db      	bcc.n	80094c6 <f_getfree+0x5e>
 800950e:	e09f      	b.n	8009650 <f_getfree+0x1e8>
			} else {
#if _FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {	/* exFAT: Scan bitmap table */
 8009510:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	2b04      	cmp	r3, #4
 8009516:	d14b      	bne.n	80095b0 <f_getfree+0x148>
					BYTE bm;
					UINT b;

					clst = fs->n_fatent - 2;
 8009518:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800951a:	6a1b      	ldr	r3, [r3, #32]
 800951c:	3b02      	subs	r3, #2
 800951e:	65fb      	str	r3, [r7, #92]	@ 0x5c
					sect = fs->database;
 8009520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009522:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009524:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0;
 8009526:	2300      	movs	r3, #0
 8009528:	657b      	str	r3, [r7, #84]	@ 0x54
					do {
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800952a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800952c:	2b00      	cmp	r3, #0
 800952e:	d10d      	bne.n	800954c <f_getfree+0xe4>
 8009530:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8009532:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009534:	1c5a      	adds	r2, r3, #1
 8009536:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009538:	4619      	mov	r1, r3
 800953a:	f7fc f8ab 	bl	8005694 <move_window>
 800953e:	4603      	mov	r3, r0
 8009540:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8009544:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8009548:	2b00      	cmp	r3, #0
 800954a:	d17e      	bne.n	800964a <f_getfree+0x1e2>
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800954c:	2308      	movs	r3, #8
 800954e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009550:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009552:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009554:	4413      	add	r3, r2
 8009556:	333c      	adds	r3, #60	@ 0x3c
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800955e:	e013      	b.n	8009588 <f_getfree+0x120>
							if (!(bm & 1)) nfree++;
 8009560:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009564:	f003 0301 	and.w	r3, r3, #1
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <f_getfree+0x10a>
 800956c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800956e:	3301      	adds	r3, #1
 8009570:	663b      	str	r3, [r7, #96]	@ 0x60
							bm >>= 1;
 8009572:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8009576:	085b      	lsrs	r3, r3, #1
 8009578:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
						for (b = 8, bm = fs->win[i]; b && clst; b--, clst--) {
 800957c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800957e:	3b01      	subs	r3, #1
 8009580:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009582:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009584:	3b01      	subs	r3, #1
 8009586:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009588:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800958a:	2b00      	cmp	r3, #0
 800958c:	d002      	beq.n	8009594 <f_getfree+0x12c>
 800958e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e5      	bne.n	8009560 <f_getfree+0xf8>
						}
						i = (i + 1) % SS(fs);
 8009594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009596:	3301      	adds	r3, #1
 8009598:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800959a:	8992      	ldrh	r2, [r2, #12]
 800959c:	fbb3 f1f2 	udiv	r1, r3, r2
 80095a0:	fb01 f202 	mul.w	r2, r1, r2
 80095a4:	1a9b      	subs	r3, r3, r2
 80095a6:	657b      	str	r3, [r7, #84]	@ 0x54
					} while (clst);
 80095a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d1bd      	bne.n	800952a <f_getfree+0xc2>
 80095ae:	e04f      	b.n	8009650 <f_getfree+0x1e8>
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 80095b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095b2:	6a1b      	ldr	r3, [r3, #32]
 80095b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095ba:	65bb      	str	r3, [r7, #88]	@ 0x58
					i = 0; p = 0;
 80095bc:	2300      	movs	r3, #0
 80095be:	657b      	str	r3, [r7, #84]	@ 0x54
 80095c0:	2300      	movs	r3, #0
 80095c2:	653b      	str	r3, [r7, #80]	@ 0x50
					do {
						if (i == 0) {
 80095c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d113      	bne.n	80095f2 <f_getfree+0x18a>
							res = move_window(fs, sect++);
 80095ca:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 80095cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80095d2:	4619      	mov	r1, r3
 80095d4:	f7fc f85e 	bl	8005694 <move_window>
 80095d8:	4603      	mov	r3, r0
 80095da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							if (res != FR_OK) break;
 80095de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d133      	bne.n	800964e <f_getfree+0x1e6>
							p = fs->win;
 80095e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095e8:	333c      	adds	r3, #60	@ 0x3c
 80095ea:	653b      	str	r3, [r7, #80]	@ 0x50
							i = SS(fs);
 80095ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095ee:	899b      	ldrh	r3, [r3, #12]
 80095f0:	657b      	str	r3, [r7, #84]	@ 0x54
						}
						if (fs->fs_type == FS_FAT16) {
 80095f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d10f      	bne.n	800961a <f_getfree+0x1b2>
							if (ld_word(p) == 0) nfree++;
 80095fa:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80095fc:	f7fb fc36 	bl	8004e6c <ld_word>
 8009600:	4603      	mov	r3, r0
 8009602:	2b00      	cmp	r3, #0
 8009604:	d102      	bne.n	800960c <f_getfree+0x1a4>
 8009606:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009608:	3301      	adds	r3, #1
 800960a:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 2; i -= 2;
 800960c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800960e:	3302      	adds	r3, #2
 8009610:	653b      	str	r3, [r7, #80]	@ 0x50
 8009612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009614:	3b02      	subs	r3, #2
 8009616:	657b      	str	r3, [r7, #84]	@ 0x54
 8009618:	e010      	b.n	800963c <f_getfree+0x1d4>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800961a:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800961c:	f7fb fc3f 	bl	8004e9e <ld_dword>
 8009620:	4603      	mov	r3, r0
 8009622:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8009626:	2b00      	cmp	r3, #0
 8009628:	d102      	bne.n	8009630 <f_getfree+0x1c8>
 800962a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800962c:	3301      	adds	r3, #1
 800962e:	663b      	str	r3, [r7, #96]	@ 0x60
							p += 4; i -= 4;
 8009630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009632:	3304      	adds	r3, #4
 8009634:	653b      	str	r3, [r7, #80]	@ 0x50
 8009636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009638:	3b04      	subs	r3, #4
 800963a:	657b      	str	r3, [r7, #84]	@ 0x54
						}
					} while (--clst);
 800963c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800963e:	3b01      	subs	r3, #1
 8009640:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1bd      	bne.n	80095c4 <f_getfree+0x15c>
 8009648:	e002      	b.n	8009650 <f_getfree+0x1e8>
						if (i == 0 && (res = move_window(fs, sect++)) != FR_OK) break;
 800964a:	bf00      	nop
 800964c:	e000      	b.n	8009650 <f_getfree+0x1e8>
							if (res != FR_OK) break;
 800964e:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009654:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8009656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009658:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800965a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800965c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800965e:	791a      	ldrb	r2, [r3, #4]
 8009660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009662:	f042 0201 	orr.w	r2, r2, #1
 8009666:	b2d2      	uxtb	r2, r2
 8009668:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800966a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800966e:	4618      	mov	r0, r3
 8009670:	3768      	adds	r7, #104	@ 0x68
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}

08009676 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8009676:	b580      	push	{r7, lr}
 8009678:	b088      	sub	sp, #32
 800967a:	af00      	add	r7, sp, #0
 800967c:	60f8      	str	r0, [r7, #12]
 800967e:	60b9      	str	r1, [r7, #8]
 8009680:	607a      	str	r2, [r7, #4]
	int n = 0;
 8009682:	2300      	movs	r3, #0
 8009684:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800968a:	e01c      	b.n	80096c6 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800968c:	f107 0310 	add.w	r3, r7, #16
 8009690:	f107 0114 	add.w	r1, r7, #20
 8009694:	2201      	movs	r2, #1
 8009696:	6878      	ldr	r0, [r7, #4]
 8009698:	f7ff fa2f 	bl	8008afa <f_read>
		if (rc != 1) break;
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d117      	bne.n	80096d2 <f_gets+0x5c>
		c = s[0];
 80096a2:	7d3b      	ldrb	r3, [r7, #20]
 80096a4:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80096a6:	7dfb      	ldrb	r3, [r7, #23]
 80096a8:	2b0d      	cmp	r3, #13
 80096aa:	d00b      	beq.n	80096c4 <f_gets+0x4e>
		*p++ = c;
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	1c5a      	adds	r2, r3, #1
 80096b0:	61ba      	str	r2, [r7, #24]
 80096b2:	7dfa      	ldrb	r2, [r7, #23]
 80096b4:	701a      	strb	r2, [r3, #0]
		n++;
 80096b6:	69fb      	ldr	r3, [r7, #28]
 80096b8:	3301      	adds	r3, #1
 80096ba:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	2b0a      	cmp	r3, #10
 80096c0:	d009      	beq.n	80096d6 <f_gets+0x60>
 80096c2:	e000      	b.n	80096c6 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 80096c4:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 80096c6:	68bb      	ldr	r3, [r7, #8]
 80096c8:	3b01      	subs	r3, #1
 80096ca:	69fa      	ldr	r2, [r7, #28]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	dbdd      	blt.n	800968c <f_gets+0x16>
 80096d0:	e002      	b.n	80096d8 <f_gets+0x62>
		if (rc != 1) break;
 80096d2:	bf00      	nop
 80096d4:	e000      	b.n	80096d8 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 80096d6:	bf00      	nop
	}
	*p = 0;
 80096d8:	69bb      	ldr	r3, [r7, #24]
 80096da:	2200      	movs	r2, #0
 80096dc:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d001      	beq.n	80096e8 <f_gets+0x72>
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	e000      	b.n	80096ea <f_gets+0x74>
 80096e8:	2300      	movs	r3, #0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3720      	adds	r7, #32
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}
	...

080096f4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b087      	sub	sp, #28
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	60b9      	str	r1, [r7, #8]
 80096fe:	4613      	mov	r3, r2
 8009700:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009702:	2301      	movs	r3, #1
 8009704:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800970a:	4b1f      	ldr	r3, [pc, #124]	@ (8009788 <FATFS_LinkDriverEx+0x94>)
 800970c:	7b9b      	ldrb	r3, [r3, #14]
 800970e:	b2db      	uxtb	r3, r3
 8009710:	2b01      	cmp	r3, #1
 8009712:	d831      	bhi.n	8009778 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009714:	4b1c      	ldr	r3, [pc, #112]	@ (8009788 <FATFS_LinkDriverEx+0x94>)
 8009716:	7b9b      	ldrb	r3, [r3, #14]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	461a      	mov	r2, r3
 800971c:	4b1a      	ldr	r3, [pc, #104]	@ (8009788 <FATFS_LinkDriverEx+0x94>)
 800971e:	2100      	movs	r1, #0
 8009720:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009722:	4b19      	ldr	r3, [pc, #100]	@ (8009788 <FATFS_LinkDriverEx+0x94>)
 8009724:	7b9b      	ldrb	r3, [r3, #14]
 8009726:	b2db      	uxtb	r3, r3
 8009728:	4a17      	ldr	r2, [pc, #92]	@ (8009788 <FATFS_LinkDriverEx+0x94>)
 800972a:	009b      	lsls	r3, r3, #2
 800972c:	4413      	add	r3, r2
 800972e:	68fa      	ldr	r2, [r7, #12]
 8009730:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009732:	4b15      	ldr	r3, [pc, #84]	@ (8009788 <FATFS_LinkDriverEx+0x94>)
 8009734:	7b9b      	ldrb	r3, [r3, #14]
 8009736:	b2db      	uxtb	r3, r3
 8009738:	461a      	mov	r2, r3
 800973a:	4b13      	ldr	r3, [pc, #76]	@ (8009788 <FATFS_LinkDriverEx+0x94>)
 800973c:	4413      	add	r3, r2
 800973e:	79fa      	ldrb	r2, [r7, #7]
 8009740:	731a      	strb	r2, [r3, #12]
    DiskNum = disk.nbr++;
 8009742:	4b11      	ldr	r3, [pc, #68]	@ (8009788 <FATFS_LinkDriverEx+0x94>)
 8009744:	7b9b      	ldrb	r3, [r3, #14]
 8009746:	b2db      	uxtb	r3, r3
 8009748:	1c5a      	adds	r2, r3, #1
 800974a:	b2d1      	uxtb	r1, r2
 800974c:	4a0e      	ldr	r2, [pc, #56]	@ (8009788 <FATFS_LinkDriverEx+0x94>)
 800974e:	7391      	strb	r1, [r2, #14]
 8009750:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009752:	7dbb      	ldrb	r3, [r7, #22]
 8009754:	3330      	adds	r3, #48	@ 0x30
 8009756:	b2da      	uxtb	r2, r3
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	3301      	adds	r3, #1
 8009760:	223a      	movs	r2, #58	@ 0x3a
 8009762:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	3302      	adds	r3, #2
 8009768:	222f      	movs	r2, #47	@ 0x2f
 800976a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	3303      	adds	r3, #3
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009774:	2300      	movs	r3, #0
 8009776:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009778:	7dfb      	ldrb	r3, [r7, #23]
}
 800977a:	4618      	mov	r0, r3
 800977c:	371c      	adds	r7, #28
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr
 8009786:	bf00      	nop
 8009788:	20002ae0 	.word	0x20002ae0

0800978c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800978c:	b580      	push	{r7, lr}
 800978e:	b082      	sub	sp, #8
 8009790:	af00      	add	r7, sp, #0
 8009792:	6078      	str	r0, [r7, #4]
 8009794:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009796:	2200      	movs	r2, #0
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f7ff ffaa 	bl	80096f4 <FATFS_LinkDriverEx>
 80097a0:	4603      	mov	r3, r0
}
 80097a2:	4618      	mov	r0, r3
 80097a4:	3708      	adds	r7, #8
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
	...

080097ac <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80097ac:	b480      	push	{r7}
 80097ae:	b085      	sub	sp, #20
 80097b0:	af00      	add	r7, sp, #0
 80097b2:	4603      	mov	r3, r0
 80097b4:	6039      	str	r1, [r7, #0]
 80097b6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80097b8:	88fb      	ldrh	r3, [r7, #6]
 80097ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80097bc:	d802      	bhi.n	80097c4 <ff_convert+0x18>
		c = chr;
 80097be:	88fb      	ldrh	r3, [r7, #6]
 80097c0:	81fb      	strh	r3, [r7, #14]
 80097c2:	e025      	b.n	8009810 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d00b      	beq.n	80097e2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80097ca:	88fb      	ldrh	r3, [r7, #6]
 80097cc:	2bff      	cmp	r3, #255	@ 0xff
 80097ce:	d805      	bhi.n	80097dc <ff_convert+0x30>
 80097d0:	88fb      	ldrh	r3, [r7, #6]
 80097d2:	3b80      	subs	r3, #128	@ 0x80
 80097d4:	4a12      	ldr	r2, [pc, #72]	@ (8009820 <ff_convert+0x74>)
 80097d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097da:	e000      	b.n	80097de <ff_convert+0x32>
 80097dc:	2300      	movs	r3, #0
 80097de:	81fb      	strh	r3, [r7, #14]
 80097e0:	e016      	b.n	8009810 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80097e2:	2300      	movs	r3, #0
 80097e4:	81fb      	strh	r3, [r7, #14]
 80097e6:	e009      	b.n	80097fc <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80097e8:	89fb      	ldrh	r3, [r7, #14]
 80097ea:	4a0d      	ldr	r2, [pc, #52]	@ (8009820 <ff_convert+0x74>)
 80097ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097f0:	88fa      	ldrh	r2, [r7, #6]
 80097f2:	429a      	cmp	r2, r3
 80097f4:	d006      	beq.n	8009804 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80097f6:	89fb      	ldrh	r3, [r7, #14]
 80097f8:	3301      	adds	r3, #1
 80097fa:	81fb      	strh	r3, [r7, #14]
 80097fc:	89fb      	ldrh	r3, [r7, #14]
 80097fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8009800:	d9f2      	bls.n	80097e8 <ff_convert+0x3c>
 8009802:	e000      	b.n	8009806 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8009804:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8009806:	89fb      	ldrh	r3, [r7, #14]
 8009808:	3380      	adds	r3, #128	@ 0x80
 800980a:	b29b      	uxth	r3, r3
 800980c:	b2db      	uxtb	r3, r3
 800980e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8009810:	89fb      	ldrh	r3, [r7, #14]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3714      	adds	r7, #20
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	0800a488 	.word	0x0800a488

08009824 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8009824:	b480      	push	{r7}
 8009826:	b087      	sub	sp, #28
 8009828:	af00      	add	r7, sp, #0
 800982a:	4603      	mov	r3, r0
 800982c:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800982e:	88fb      	ldrh	r3, [r7, #6]
 8009830:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009834:	d201      	bcs.n	800983a <ff_wtoupper+0x16>
 8009836:	4b3e      	ldr	r3, [pc, #248]	@ (8009930 <ff_wtoupper+0x10c>)
 8009838:	e000      	b.n	800983c <ff_wtoupper+0x18>
 800983a:	4b3e      	ldr	r3, [pc, #248]	@ (8009934 <ff_wtoupper+0x110>)
 800983c:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	1c9a      	adds	r2, r3, #2
 8009842:	617a      	str	r2, [r7, #20]
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8009848:	8a7b      	ldrh	r3, [r7, #18]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d068      	beq.n	8009920 <ff_wtoupper+0xfc>
 800984e:	88fa      	ldrh	r2, [r7, #6]
 8009850:	8a7b      	ldrh	r3, [r7, #18]
 8009852:	429a      	cmp	r2, r3
 8009854:	d364      	bcc.n	8009920 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	1c9a      	adds	r2, r3, #2
 800985a:	617a      	str	r2, [r7, #20]
 800985c:	881b      	ldrh	r3, [r3, #0]
 800985e:	823b      	strh	r3, [r7, #16]
 8009860:	8a3b      	ldrh	r3, [r7, #16]
 8009862:	0a1b      	lsrs	r3, r3, #8
 8009864:	81fb      	strh	r3, [r7, #14]
 8009866:	8a3b      	ldrh	r3, [r7, #16]
 8009868:	b2db      	uxtb	r3, r3
 800986a:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 800986c:	88fa      	ldrh	r2, [r7, #6]
 800986e:	8a79      	ldrh	r1, [r7, #18]
 8009870:	8a3b      	ldrh	r3, [r7, #16]
 8009872:	440b      	add	r3, r1
 8009874:	429a      	cmp	r2, r3
 8009876:	da49      	bge.n	800990c <ff_wtoupper+0xe8>
			switch (cmd) {
 8009878:	89fb      	ldrh	r3, [r7, #14]
 800987a:	2b08      	cmp	r3, #8
 800987c:	d84f      	bhi.n	800991e <ff_wtoupper+0xfa>
 800987e:	a201      	add	r2, pc, #4	@ (adr r2, 8009884 <ff_wtoupper+0x60>)
 8009880:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009884:	080098a9 	.word	0x080098a9
 8009888:	080098bb 	.word	0x080098bb
 800988c:	080098d1 	.word	0x080098d1
 8009890:	080098d9 	.word	0x080098d9
 8009894:	080098e1 	.word	0x080098e1
 8009898:	080098e9 	.word	0x080098e9
 800989c:	080098f1 	.word	0x080098f1
 80098a0:	080098f9 	.word	0x080098f9
 80098a4:	08009901 	.word	0x08009901
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80098a8:	88fa      	ldrh	r2, [r7, #6]
 80098aa:	8a7b      	ldrh	r3, [r7, #18]
 80098ac:	1ad3      	subs	r3, r2, r3
 80098ae:	005b      	lsls	r3, r3, #1
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	4413      	add	r3, r2
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	80fb      	strh	r3, [r7, #6]
 80098b8:	e027      	b.n	800990a <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80098ba:	88fa      	ldrh	r2, [r7, #6]
 80098bc:	8a7b      	ldrh	r3, [r7, #18]
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	f003 0301 	and.w	r3, r3, #1
 80098c6:	b29b      	uxth	r3, r3
 80098c8:	88fa      	ldrh	r2, [r7, #6]
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	80fb      	strh	r3, [r7, #6]
 80098ce:	e01c      	b.n	800990a <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80098d0:	88fb      	ldrh	r3, [r7, #6]
 80098d2:	3b10      	subs	r3, #16
 80098d4:	80fb      	strh	r3, [r7, #6]
 80098d6:	e018      	b.n	800990a <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80098d8:	88fb      	ldrh	r3, [r7, #6]
 80098da:	3b20      	subs	r3, #32
 80098dc:	80fb      	strh	r3, [r7, #6]
 80098de:	e014      	b.n	800990a <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80098e0:	88fb      	ldrh	r3, [r7, #6]
 80098e2:	3b30      	subs	r3, #48	@ 0x30
 80098e4:	80fb      	strh	r3, [r7, #6]
 80098e6:	e010      	b.n	800990a <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80098e8:	88fb      	ldrh	r3, [r7, #6]
 80098ea:	3b1a      	subs	r3, #26
 80098ec:	80fb      	strh	r3, [r7, #6]
 80098ee:	e00c      	b.n	800990a <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80098f0:	88fb      	ldrh	r3, [r7, #6]
 80098f2:	3308      	adds	r3, #8
 80098f4:	80fb      	strh	r3, [r7, #6]
 80098f6:	e008      	b.n	800990a <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80098f8:	88fb      	ldrh	r3, [r7, #6]
 80098fa:	3b50      	subs	r3, #80	@ 0x50
 80098fc:	80fb      	strh	r3, [r7, #6]
 80098fe:	e004      	b.n	800990a <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8009900:	88fb      	ldrh	r3, [r7, #6]
 8009902:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8009906:	80fb      	strh	r3, [r7, #6]
 8009908:	bf00      	nop
			}
			break;
 800990a:	e008      	b.n	800991e <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 800990c:	89fb      	ldrh	r3, [r7, #14]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d195      	bne.n	800983e <ff_wtoupper+0x1a>
 8009912:	8a3b      	ldrh	r3, [r7, #16]
 8009914:	005b      	lsls	r3, r3, #1
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	4413      	add	r3, r2
 800991a:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 800991c:	e78f      	b.n	800983e <ff_wtoupper+0x1a>
			break;
 800991e:	bf00      	nop
	}

	return chr;
 8009920:	88fb      	ldrh	r3, [r7, #6]
}
 8009922:	4618      	mov	r0, r3
 8009924:	371c      	adds	r7, #28
 8009926:	46bd      	mov	sp, r7
 8009928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992c:	4770      	bx	lr
 800992e:	bf00      	nop
 8009930:	0800a588 	.word	0x0800a588
 8009934:	0800a77c 	.word	0x0800a77c

08009938 <siprintf>:
 8009938:	b40e      	push	{r1, r2, r3}
 800993a:	b510      	push	{r4, lr}
 800993c:	b09d      	sub	sp, #116	@ 0x74
 800993e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009940:	9002      	str	r0, [sp, #8]
 8009942:	9006      	str	r0, [sp, #24]
 8009944:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009948:	480a      	ldr	r0, [pc, #40]	@ (8009974 <siprintf+0x3c>)
 800994a:	9107      	str	r1, [sp, #28]
 800994c:	9104      	str	r1, [sp, #16]
 800994e:	490a      	ldr	r1, [pc, #40]	@ (8009978 <siprintf+0x40>)
 8009950:	f853 2b04 	ldr.w	r2, [r3], #4
 8009954:	9105      	str	r1, [sp, #20]
 8009956:	2400      	movs	r4, #0
 8009958:	a902      	add	r1, sp, #8
 800995a:	6800      	ldr	r0, [r0, #0]
 800995c:	9301      	str	r3, [sp, #4]
 800995e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009960:	f000 f994 	bl	8009c8c <_svfiprintf_r>
 8009964:	9b02      	ldr	r3, [sp, #8]
 8009966:	701c      	strb	r4, [r3, #0]
 8009968:	b01d      	add	sp, #116	@ 0x74
 800996a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800996e:	b003      	add	sp, #12
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	20000038 	.word	0x20000038
 8009978:	ffff0208 	.word	0xffff0208

0800997c <memset>:
 800997c:	4402      	add	r2, r0
 800997e:	4603      	mov	r3, r0
 8009980:	4293      	cmp	r3, r2
 8009982:	d100      	bne.n	8009986 <memset+0xa>
 8009984:	4770      	bx	lr
 8009986:	f803 1b01 	strb.w	r1, [r3], #1
 800998a:	e7f9      	b.n	8009980 <memset+0x4>

0800998c <__errno>:
 800998c:	4b01      	ldr	r3, [pc, #4]	@ (8009994 <__errno+0x8>)
 800998e:	6818      	ldr	r0, [r3, #0]
 8009990:	4770      	bx	lr
 8009992:	bf00      	nop
 8009994:	20000038 	.word	0x20000038

08009998 <__libc_init_array>:
 8009998:	b570      	push	{r4, r5, r6, lr}
 800999a:	4d0d      	ldr	r5, [pc, #52]	@ (80099d0 <__libc_init_array+0x38>)
 800999c:	4c0d      	ldr	r4, [pc, #52]	@ (80099d4 <__libc_init_array+0x3c>)
 800999e:	1b64      	subs	r4, r4, r5
 80099a0:	10a4      	asrs	r4, r4, #2
 80099a2:	2600      	movs	r6, #0
 80099a4:	42a6      	cmp	r6, r4
 80099a6:	d109      	bne.n	80099bc <__libc_init_array+0x24>
 80099a8:	4d0b      	ldr	r5, [pc, #44]	@ (80099d8 <__libc_init_array+0x40>)
 80099aa:	4c0c      	ldr	r4, [pc, #48]	@ (80099dc <__libc_init_array+0x44>)
 80099ac:	f000 fc64 	bl	800a278 <_init>
 80099b0:	1b64      	subs	r4, r4, r5
 80099b2:	10a4      	asrs	r4, r4, #2
 80099b4:	2600      	movs	r6, #0
 80099b6:	42a6      	cmp	r6, r4
 80099b8:	d105      	bne.n	80099c6 <__libc_init_array+0x2e>
 80099ba:	bd70      	pop	{r4, r5, r6, pc}
 80099bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80099c0:	4798      	blx	r3
 80099c2:	3601      	adds	r6, #1
 80099c4:	e7ee      	b.n	80099a4 <__libc_init_array+0xc>
 80099c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80099ca:	4798      	blx	r3
 80099cc:	3601      	adds	r6, #1
 80099ce:	e7f2      	b.n	80099b6 <__libc_init_array+0x1e>
 80099d0:	0800a874 	.word	0x0800a874
 80099d4:	0800a874 	.word	0x0800a874
 80099d8:	0800a874 	.word	0x0800a874
 80099dc:	0800a878 	.word	0x0800a878

080099e0 <__retarget_lock_acquire_recursive>:
 80099e0:	4770      	bx	lr

080099e2 <__retarget_lock_release_recursive>:
 80099e2:	4770      	bx	lr

080099e4 <_free_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4605      	mov	r5, r0
 80099e8:	2900      	cmp	r1, #0
 80099ea:	d041      	beq.n	8009a70 <_free_r+0x8c>
 80099ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80099f0:	1f0c      	subs	r4, r1, #4
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	bfb8      	it	lt
 80099f6:	18e4      	addlt	r4, r4, r3
 80099f8:	f000 f8e0 	bl	8009bbc <__malloc_lock>
 80099fc:	4a1d      	ldr	r2, [pc, #116]	@ (8009a74 <_free_r+0x90>)
 80099fe:	6813      	ldr	r3, [r2, #0]
 8009a00:	b933      	cbnz	r3, 8009a10 <_free_r+0x2c>
 8009a02:	6063      	str	r3, [r4, #4]
 8009a04:	6014      	str	r4, [r2, #0]
 8009a06:	4628      	mov	r0, r5
 8009a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a0c:	f000 b8dc 	b.w	8009bc8 <__malloc_unlock>
 8009a10:	42a3      	cmp	r3, r4
 8009a12:	d908      	bls.n	8009a26 <_free_r+0x42>
 8009a14:	6820      	ldr	r0, [r4, #0]
 8009a16:	1821      	adds	r1, r4, r0
 8009a18:	428b      	cmp	r3, r1
 8009a1a:	bf01      	itttt	eq
 8009a1c:	6819      	ldreq	r1, [r3, #0]
 8009a1e:	685b      	ldreq	r3, [r3, #4]
 8009a20:	1809      	addeq	r1, r1, r0
 8009a22:	6021      	streq	r1, [r4, #0]
 8009a24:	e7ed      	b.n	8009a02 <_free_r+0x1e>
 8009a26:	461a      	mov	r2, r3
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	b10b      	cbz	r3, 8009a30 <_free_r+0x4c>
 8009a2c:	42a3      	cmp	r3, r4
 8009a2e:	d9fa      	bls.n	8009a26 <_free_r+0x42>
 8009a30:	6811      	ldr	r1, [r2, #0]
 8009a32:	1850      	adds	r0, r2, r1
 8009a34:	42a0      	cmp	r0, r4
 8009a36:	d10b      	bne.n	8009a50 <_free_r+0x6c>
 8009a38:	6820      	ldr	r0, [r4, #0]
 8009a3a:	4401      	add	r1, r0
 8009a3c:	1850      	adds	r0, r2, r1
 8009a3e:	4283      	cmp	r3, r0
 8009a40:	6011      	str	r1, [r2, #0]
 8009a42:	d1e0      	bne.n	8009a06 <_free_r+0x22>
 8009a44:	6818      	ldr	r0, [r3, #0]
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	6053      	str	r3, [r2, #4]
 8009a4a:	4408      	add	r0, r1
 8009a4c:	6010      	str	r0, [r2, #0]
 8009a4e:	e7da      	b.n	8009a06 <_free_r+0x22>
 8009a50:	d902      	bls.n	8009a58 <_free_r+0x74>
 8009a52:	230c      	movs	r3, #12
 8009a54:	602b      	str	r3, [r5, #0]
 8009a56:	e7d6      	b.n	8009a06 <_free_r+0x22>
 8009a58:	6820      	ldr	r0, [r4, #0]
 8009a5a:	1821      	adds	r1, r4, r0
 8009a5c:	428b      	cmp	r3, r1
 8009a5e:	bf04      	itt	eq
 8009a60:	6819      	ldreq	r1, [r3, #0]
 8009a62:	685b      	ldreq	r3, [r3, #4]
 8009a64:	6063      	str	r3, [r4, #4]
 8009a66:	bf04      	itt	eq
 8009a68:	1809      	addeq	r1, r1, r0
 8009a6a:	6021      	streq	r1, [r4, #0]
 8009a6c:	6054      	str	r4, [r2, #4]
 8009a6e:	e7ca      	b.n	8009a06 <_free_r+0x22>
 8009a70:	bd38      	pop	{r3, r4, r5, pc}
 8009a72:	bf00      	nop
 8009a74:	20002c34 	.word	0x20002c34

08009a78 <sbrk_aligned>:
 8009a78:	b570      	push	{r4, r5, r6, lr}
 8009a7a:	4e0f      	ldr	r6, [pc, #60]	@ (8009ab8 <sbrk_aligned+0x40>)
 8009a7c:	460c      	mov	r4, r1
 8009a7e:	6831      	ldr	r1, [r6, #0]
 8009a80:	4605      	mov	r5, r0
 8009a82:	b911      	cbnz	r1, 8009a8a <sbrk_aligned+0x12>
 8009a84:	f000 fba4 	bl	800a1d0 <_sbrk_r>
 8009a88:	6030      	str	r0, [r6, #0]
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	f000 fb9f 	bl	800a1d0 <_sbrk_r>
 8009a92:	1c43      	adds	r3, r0, #1
 8009a94:	d103      	bne.n	8009a9e <sbrk_aligned+0x26>
 8009a96:	f04f 34ff 	mov.w	r4, #4294967295
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	bd70      	pop	{r4, r5, r6, pc}
 8009a9e:	1cc4      	adds	r4, r0, #3
 8009aa0:	f024 0403 	bic.w	r4, r4, #3
 8009aa4:	42a0      	cmp	r0, r4
 8009aa6:	d0f8      	beq.n	8009a9a <sbrk_aligned+0x22>
 8009aa8:	1a21      	subs	r1, r4, r0
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 fb90 	bl	800a1d0 <_sbrk_r>
 8009ab0:	3001      	adds	r0, #1
 8009ab2:	d1f2      	bne.n	8009a9a <sbrk_aligned+0x22>
 8009ab4:	e7ef      	b.n	8009a96 <sbrk_aligned+0x1e>
 8009ab6:	bf00      	nop
 8009ab8:	20002c30 	.word	0x20002c30

08009abc <_malloc_r>:
 8009abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ac0:	1ccd      	adds	r5, r1, #3
 8009ac2:	f025 0503 	bic.w	r5, r5, #3
 8009ac6:	3508      	adds	r5, #8
 8009ac8:	2d0c      	cmp	r5, #12
 8009aca:	bf38      	it	cc
 8009acc:	250c      	movcc	r5, #12
 8009ace:	2d00      	cmp	r5, #0
 8009ad0:	4606      	mov	r6, r0
 8009ad2:	db01      	blt.n	8009ad8 <_malloc_r+0x1c>
 8009ad4:	42a9      	cmp	r1, r5
 8009ad6:	d904      	bls.n	8009ae2 <_malloc_r+0x26>
 8009ad8:	230c      	movs	r3, #12
 8009ada:	6033      	str	r3, [r6, #0]
 8009adc:	2000      	movs	r0, #0
 8009ade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009bb8 <_malloc_r+0xfc>
 8009ae6:	f000 f869 	bl	8009bbc <__malloc_lock>
 8009aea:	f8d8 3000 	ldr.w	r3, [r8]
 8009aee:	461c      	mov	r4, r3
 8009af0:	bb44      	cbnz	r4, 8009b44 <_malloc_r+0x88>
 8009af2:	4629      	mov	r1, r5
 8009af4:	4630      	mov	r0, r6
 8009af6:	f7ff ffbf 	bl	8009a78 <sbrk_aligned>
 8009afa:	1c43      	adds	r3, r0, #1
 8009afc:	4604      	mov	r4, r0
 8009afe:	d158      	bne.n	8009bb2 <_malloc_r+0xf6>
 8009b00:	f8d8 4000 	ldr.w	r4, [r8]
 8009b04:	4627      	mov	r7, r4
 8009b06:	2f00      	cmp	r7, #0
 8009b08:	d143      	bne.n	8009b92 <_malloc_r+0xd6>
 8009b0a:	2c00      	cmp	r4, #0
 8009b0c:	d04b      	beq.n	8009ba6 <_malloc_r+0xea>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	4639      	mov	r1, r7
 8009b12:	4630      	mov	r0, r6
 8009b14:	eb04 0903 	add.w	r9, r4, r3
 8009b18:	f000 fb5a 	bl	800a1d0 <_sbrk_r>
 8009b1c:	4581      	cmp	r9, r0
 8009b1e:	d142      	bne.n	8009ba6 <_malloc_r+0xea>
 8009b20:	6821      	ldr	r1, [r4, #0]
 8009b22:	1a6d      	subs	r5, r5, r1
 8009b24:	4629      	mov	r1, r5
 8009b26:	4630      	mov	r0, r6
 8009b28:	f7ff ffa6 	bl	8009a78 <sbrk_aligned>
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d03a      	beq.n	8009ba6 <_malloc_r+0xea>
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	442b      	add	r3, r5
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	f8d8 3000 	ldr.w	r3, [r8]
 8009b3a:	685a      	ldr	r2, [r3, #4]
 8009b3c:	bb62      	cbnz	r2, 8009b98 <_malloc_r+0xdc>
 8009b3e:	f8c8 7000 	str.w	r7, [r8]
 8009b42:	e00f      	b.n	8009b64 <_malloc_r+0xa8>
 8009b44:	6822      	ldr	r2, [r4, #0]
 8009b46:	1b52      	subs	r2, r2, r5
 8009b48:	d420      	bmi.n	8009b8c <_malloc_r+0xd0>
 8009b4a:	2a0b      	cmp	r2, #11
 8009b4c:	d917      	bls.n	8009b7e <_malloc_r+0xc2>
 8009b4e:	1961      	adds	r1, r4, r5
 8009b50:	42a3      	cmp	r3, r4
 8009b52:	6025      	str	r5, [r4, #0]
 8009b54:	bf18      	it	ne
 8009b56:	6059      	strne	r1, [r3, #4]
 8009b58:	6863      	ldr	r3, [r4, #4]
 8009b5a:	bf08      	it	eq
 8009b5c:	f8c8 1000 	streq.w	r1, [r8]
 8009b60:	5162      	str	r2, [r4, r5]
 8009b62:	604b      	str	r3, [r1, #4]
 8009b64:	4630      	mov	r0, r6
 8009b66:	f000 f82f 	bl	8009bc8 <__malloc_unlock>
 8009b6a:	f104 000b 	add.w	r0, r4, #11
 8009b6e:	1d23      	adds	r3, r4, #4
 8009b70:	f020 0007 	bic.w	r0, r0, #7
 8009b74:	1ac2      	subs	r2, r0, r3
 8009b76:	bf1c      	itt	ne
 8009b78:	1a1b      	subne	r3, r3, r0
 8009b7a:	50a3      	strne	r3, [r4, r2]
 8009b7c:	e7af      	b.n	8009ade <_malloc_r+0x22>
 8009b7e:	6862      	ldr	r2, [r4, #4]
 8009b80:	42a3      	cmp	r3, r4
 8009b82:	bf0c      	ite	eq
 8009b84:	f8c8 2000 	streq.w	r2, [r8]
 8009b88:	605a      	strne	r2, [r3, #4]
 8009b8a:	e7eb      	b.n	8009b64 <_malloc_r+0xa8>
 8009b8c:	4623      	mov	r3, r4
 8009b8e:	6864      	ldr	r4, [r4, #4]
 8009b90:	e7ae      	b.n	8009af0 <_malloc_r+0x34>
 8009b92:	463c      	mov	r4, r7
 8009b94:	687f      	ldr	r7, [r7, #4]
 8009b96:	e7b6      	b.n	8009b06 <_malloc_r+0x4a>
 8009b98:	461a      	mov	r2, r3
 8009b9a:	685b      	ldr	r3, [r3, #4]
 8009b9c:	42a3      	cmp	r3, r4
 8009b9e:	d1fb      	bne.n	8009b98 <_malloc_r+0xdc>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	6053      	str	r3, [r2, #4]
 8009ba4:	e7de      	b.n	8009b64 <_malloc_r+0xa8>
 8009ba6:	230c      	movs	r3, #12
 8009ba8:	6033      	str	r3, [r6, #0]
 8009baa:	4630      	mov	r0, r6
 8009bac:	f000 f80c 	bl	8009bc8 <__malloc_unlock>
 8009bb0:	e794      	b.n	8009adc <_malloc_r+0x20>
 8009bb2:	6005      	str	r5, [r0, #0]
 8009bb4:	e7d6      	b.n	8009b64 <_malloc_r+0xa8>
 8009bb6:	bf00      	nop
 8009bb8:	20002c34 	.word	0x20002c34

08009bbc <__malloc_lock>:
 8009bbc:	4801      	ldr	r0, [pc, #4]	@ (8009bc4 <__malloc_lock+0x8>)
 8009bbe:	f7ff bf0f 	b.w	80099e0 <__retarget_lock_acquire_recursive>
 8009bc2:	bf00      	nop
 8009bc4:	20002c2c 	.word	0x20002c2c

08009bc8 <__malloc_unlock>:
 8009bc8:	4801      	ldr	r0, [pc, #4]	@ (8009bd0 <__malloc_unlock+0x8>)
 8009bca:	f7ff bf0a 	b.w	80099e2 <__retarget_lock_release_recursive>
 8009bce:	bf00      	nop
 8009bd0:	20002c2c 	.word	0x20002c2c

08009bd4 <__ssputs_r>:
 8009bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009bd8:	688e      	ldr	r6, [r1, #8]
 8009bda:	461f      	mov	r7, r3
 8009bdc:	42be      	cmp	r6, r7
 8009bde:	680b      	ldr	r3, [r1, #0]
 8009be0:	4682      	mov	sl, r0
 8009be2:	460c      	mov	r4, r1
 8009be4:	4690      	mov	r8, r2
 8009be6:	d82d      	bhi.n	8009c44 <__ssputs_r+0x70>
 8009be8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009bf0:	d026      	beq.n	8009c40 <__ssputs_r+0x6c>
 8009bf2:	6965      	ldr	r5, [r4, #20]
 8009bf4:	6909      	ldr	r1, [r1, #16]
 8009bf6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009bfa:	eba3 0901 	sub.w	r9, r3, r1
 8009bfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c02:	1c7b      	adds	r3, r7, #1
 8009c04:	444b      	add	r3, r9
 8009c06:	106d      	asrs	r5, r5, #1
 8009c08:	429d      	cmp	r5, r3
 8009c0a:	bf38      	it	cc
 8009c0c:	461d      	movcc	r5, r3
 8009c0e:	0553      	lsls	r3, r2, #21
 8009c10:	d527      	bpl.n	8009c62 <__ssputs_r+0x8e>
 8009c12:	4629      	mov	r1, r5
 8009c14:	f7ff ff52 	bl	8009abc <_malloc_r>
 8009c18:	4606      	mov	r6, r0
 8009c1a:	b360      	cbz	r0, 8009c76 <__ssputs_r+0xa2>
 8009c1c:	6921      	ldr	r1, [r4, #16]
 8009c1e:	464a      	mov	r2, r9
 8009c20:	f000 fae6 	bl	800a1f0 <memcpy>
 8009c24:	89a3      	ldrh	r3, [r4, #12]
 8009c26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c2e:	81a3      	strh	r3, [r4, #12]
 8009c30:	6126      	str	r6, [r4, #16]
 8009c32:	6165      	str	r5, [r4, #20]
 8009c34:	444e      	add	r6, r9
 8009c36:	eba5 0509 	sub.w	r5, r5, r9
 8009c3a:	6026      	str	r6, [r4, #0]
 8009c3c:	60a5      	str	r5, [r4, #8]
 8009c3e:	463e      	mov	r6, r7
 8009c40:	42be      	cmp	r6, r7
 8009c42:	d900      	bls.n	8009c46 <__ssputs_r+0x72>
 8009c44:	463e      	mov	r6, r7
 8009c46:	6820      	ldr	r0, [r4, #0]
 8009c48:	4632      	mov	r2, r6
 8009c4a:	4641      	mov	r1, r8
 8009c4c:	f000 faa6 	bl	800a19c <memmove>
 8009c50:	68a3      	ldr	r3, [r4, #8]
 8009c52:	1b9b      	subs	r3, r3, r6
 8009c54:	60a3      	str	r3, [r4, #8]
 8009c56:	6823      	ldr	r3, [r4, #0]
 8009c58:	4433      	add	r3, r6
 8009c5a:	6023      	str	r3, [r4, #0]
 8009c5c:	2000      	movs	r0, #0
 8009c5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c62:	462a      	mov	r2, r5
 8009c64:	f000 fad2 	bl	800a20c <_realloc_r>
 8009c68:	4606      	mov	r6, r0
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d1e0      	bne.n	8009c30 <__ssputs_r+0x5c>
 8009c6e:	6921      	ldr	r1, [r4, #16]
 8009c70:	4650      	mov	r0, sl
 8009c72:	f7ff feb7 	bl	80099e4 <_free_r>
 8009c76:	230c      	movs	r3, #12
 8009c78:	f8ca 3000 	str.w	r3, [sl]
 8009c7c:	89a3      	ldrh	r3, [r4, #12]
 8009c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c82:	81a3      	strh	r3, [r4, #12]
 8009c84:	f04f 30ff 	mov.w	r0, #4294967295
 8009c88:	e7e9      	b.n	8009c5e <__ssputs_r+0x8a>
	...

08009c8c <_svfiprintf_r>:
 8009c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c90:	4698      	mov	r8, r3
 8009c92:	898b      	ldrh	r3, [r1, #12]
 8009c94:	061b      	lsls	r3, r3, #24
 8009c96:	b09d      	sub	sp, #116	@ 0x74
 8009c98:	4607      	mov	r7, r0
 8009c9a:	460d      	mov	r5, r1
 8009c9c:	4614      	mov	r4, r2
 8009c9e:	d510      	bpl.n	8009cc2 <_svfiprintf_r+0x36>
 8009ca0:	690b      	ldr	r3, [r1, #16]
 8009ca2:	b973      	cbnz	r3, 8009cc2 <_svfiprintf_r+0x36>
 8009ca4:	2140      	movs	r1, #64	@ 0x40
 8009ca6:	f7ff ff09 	bl	8009abc <_malloc_r>
 8009caa:	6028      	str	r0, [r5, #0]
 8009cac:	6128      	str	r0, [r5, #16]
 8009cae:	b930      	cbnz	r0, 8009cbe <_svfiprintf_r+0x32>
 8009cb0:	230c      	movs	r3, #12
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009cb8:	b01d      	add	sp, #116	@ 0x74
 8009cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cbe:	2340      	movs	r3, #64	@ 0x40
 8009cc0:	616b      	str	r3, [r5, #20]
 8009cc2:	2300      	movs	r3, #0
 8009cc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cc6:	2320      	movs	r3, #32
 8009cc8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ccc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009cd0:	2330      	movs	r3, #48	@ 0x30
 8009cd2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009e70 <_svfiprintf_r+0x1e4>
 8009cd6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009cda:	f04f 0901 	mov.w	r9, #1
 8009cde:	4623      	mov	r3, r4
 8009ce0:	469a      	mov	sl, r3
 8009ce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ce6:	b10a      	cbz	r2, 8009cec <_svfiprintf_r+0x60>
 8009ce8:	2a25      	cmp	r2, #37	@ 0x25
 8009cea:	d1f9      	bne.n	8009ce0 <_svfiprintf_r+0x54>
 8009cec:	ebba 0b04 	subs.w	fp, sl, r4
 8009cf0:	d00b      	beq.n	8009d0a <_svfiprintf_r+0x7e>
 8009cf2:	465b      	mov	r3, fp
 8009cf4:	4622      	mov	r2, r4
 8009cf6:	4629      	mov	r1, r5
 8009cf8:	4638      	mov	r0, r7
 8009cfa:	f7ff ff6b 	bl	8009bd4 <__ssputs_r>
 8009cfe:	3001      	adds	r0, #1
 8009d00:	f000 80a7 	beq.w	8009e52 <_svfiprintf_r+0x1c6>
 8009d04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d06:	445a      	add	r2, fp
 8009d08:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	f000 809f 	beq.w	8009e52 <_svfiprintf_r+0x1c6>
 8009d14:	2300      	movs	r3, #0
 8009d16:	f04f 32ff 	mov.w	r2, #4294967295
 8009d1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d1e:	f10a 0a01 	add.w	sl, sl, #1
 8009d22:	9304      	str	r3, [sp, #16]
 8009d24:	9307      	str	r3, [sp, #28]
 8009d26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009d2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009d2c:	4654      	mov	r4, sl
 8009d2e:	2205      	movs	r2, #5
 8009d30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d34:	484e      	ldr	r0, [pc, #312]	@ (8009e70 <_svfiprintf_r+0x1e4>)
 8009d36:	f7f6 fa53 	bl	80001e0 <memchr>
 8009d3a:	9a04      	ldr	r2, [sp, #16]
 8009d3c:	b9d8      	cbnz	r0, 8009d76 <_svfiprintf_r+0xea>
 8009d3e:	06d0      	lsls	r0, r2, #27
 8009d40:	bf44      	itt	mi
 8009d42:	2320      	movmi	r3, #32
 8009d44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d48:	0711      	lsls	r1, r2, #28
 8009d4a:	bf44      	itt	mi
 8009d4c:	232b      	movmi	r3, #43	@ 0x2b
 8009d4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d52:	f89a 3000 	ldrb.w	r3, [sl]
 8009d56:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d58:	d015      	beq.n	8009d86 <_svfiprintf_r+0xfa>
 8009d5a:	9a07      	ldr	r2, [sp, #28]
 8009d5c:	4654      	mov	r4, sl
 8009d5e:	2000      	movs	r0, #0
 8009d60:	f04f 0c0a 	mov.w	ip, #10
 8009d64:	4621      	mov	r1, r4
 8009d66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d6a:	3b30      	subs	r3, #48	@ 0x30
 8009d6c:	2b09      	cmp	r3, #9
 8009d6e:	d94b      	bls.n	8009e08 <_svfiprintf_r+0x17c>
 8009d70:	b1b0      	cbz	r0, 8009da0 <_svfiprintf_r+0x114>
 8009d72:	9207      	str	r2, [sp, #28]
 8009d74:	e014      	b.n	8009da0 <_svfiprintf_r+0x114>
 8009d76:	eba0 0308 	sub.w	r3, r0, r8
 8009d7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009d7e:	4313      	orrs	r3, r2
 8009d80:	9304      	str	r3, [sp, #16]
 8009d82:	46a2      	mov	sl, r4
 8009d84:	e7d2      	b.n	8009d2c <_svfiprintf_r+0xa0>
 8009d86:	9b03      	ldr	r3, [sp, #12]
 8009d88:	1d19      	adds	r1, r3, #4
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	9103      	str	r1, [sp, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	bfbb      	ittet	lt
 8009d92:	425b      	neglt	r3, r3
 8009d94:	f042 0202 	orrlt.w	r2, r2, #2
 8009d98:	9307      	strge	r3, [sp, #28]
 8009d9a:	9307      	strlt	r3, [sp, #28]
 8009d9c:	bfb8      	it	lt
 8009d9e:	9204      	strlt	r2, [sp, #16]
 8009da0:	7823      	ldrb	r3, [r4, #0]
 8009da2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009da4:	d10a      	bne.n	8009dbc <_svfiprintf_r+0x130>
 8009da6:	7863      	ldrb	r3, [r4, #1]
 8009da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009daa:	d132      	bne.n	8009e12 <_svfiprintf_r+0x186>
 8009dac:	9b03      	ldr	r3, [sp, #12]
 8009dae:	1d1a      	adds	r2, r3, #4
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	9203      	str	r2, [sp, #12]
 8009db4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009db8:	3402      	adds	r4, #2
 8009dba:	9305      	str	r3, [sp, #20]
 8009dbc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009e80 <_svfiprintf_r+0x1f4>
 8009dc0:	7821      	ldrb	r1, [r4, #0]
 8009dc2:	2203      	movs	r2, #3
 8009dc4:	4650      	mov	r0, sl
 8009dc6:	f7f6 fa0b 	bl	80001e0 <memchr>
 8009dca:	b138      	cbz	r0, 8009ddc <_svfiprintf_r+0x150>
 8009dcc:	9b04      	ldr	r3, [sp, #16]
 8009dce:	eba0 000a 	sub.w	r0, r0, sl
 8009dd2:	2240      	movs	r2, #64	@ 0x40
 8009dd4:	4082      	lsls	r2, r0
 8009dd6:	4313      	orrs	r3, r2
 8009dd8:	3401      	adds	r4, #1
 8009dda:	9304      	str	r3, [sp, #16]
 8009ddc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009de0:	4824      	ldr	r0, [pc, #144]	@ (8009e74 <_svfiprintf_r+0x1e8>)
 8009de2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009de6:	2206      	movs	r2, #6
 8009de8:	f7f6 f9fa 	bl	80001e0 <memchr>
 8009dec:	2800      	cmp	r0, #0
 8009dee:	d036      	beq.n	8009e5e <_svfiprintf_r+0x1d2>
 8009df0:	4b21      	ldr	r3, [pc, #132]	@ (8009e78 <_svfiprintf_r+0x1ec>)
 8009df2:	bb1b      	cbnz	r3, 8009e3c <_svfiprintf_r+0x1b0>
 8009df4:	9b03      	ldr	r3, [sp, #12]
 8009df6:	3307      	adds	r3, #7
 8009df8:	f023 0307 	bic.w	r3, r3, #7
 8009dfc:	3308      	adds	r3, #8
 8009dfe:	9303      	str	r3, [sp, #12]
 8009e00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e02:	4433      	add	r3, r6
 8009e04:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e06:	e76a      	b.n	8009cde <_svfiprintf_r+0x52>
 8009e08:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	2001      	movs	r0, #1
 8009e10:	e7a8      	b.n	8009d64 <_svfiprintf_r+0xd8>
 8009e12:	2300      	movs	r3, #0
 8009e14:	3401      	adds	r4, #1
 8009e16:	9305      	str	r3, [sp, #20]
 8009e18:	4619      	mov	r1, r3
 8009e1a:	f04f 0c0a 	mov.w	ip, #10
 8009e1e:	4620      	mov	r0, r4
 8009e20:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e24:	3a30      	subs	r2, #48	@ 0x30
 8009e26:	2a09      	cmp	r2, #9
 8009e28:	d903      	bls.n	8009e32 <_svfiprintf_r+0x1a6>
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d0c6      	beq.n	8009dbc <_svfiprintf_r+0x130>
 8009e2e:	9105      	str	r1, [sp, #20]
 8009e30:	e7c4      	b.n	8009dbc <_svfiprintf_r+0x130>
 8009e32:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e36:	4604      	mov	r4, r0
 8009e38:	2301      	movs	r3, #1
 8009e3a:	e7f0      	b.n	8009e1e <_svfiprintf_r+0x192>
 8009e3c:	ab03      	add	r3, sp, #12
 8009e3e:	9300      	str	r3, [sp, #0]
 8009e40:	462a      	mov	r2, r5
 8009e42:	4b0e      	ldr	r3, [pc, #56]	@ (8009e7c <_svfiprintf_r+0x1f0>)
 8009e44:	a904      	add	r1, sp, #16
 8009e46:	4638      	mov	r0, r7
 8009e48:	f3af 8000 	nop.w
 8009e4c:	1c42      	adds	r2, r0, #1
 8009e4e:	4606      	mov	r6, r0
 8009e50:	d1d6      	bne.n	8009e00 <_svfiprintf_r+0x174>
 8009e52:	89ab      	ldrh	r3, [r5, #12]
 8009e54:	065b      	lsls	r3, r3, #25
 8009e56:	f53f af2d 	bmi.w	8009cb4 <_svfiprintf_r+0x28>
 8009e5a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e5c:	e72c      	b.n	8009cb8 <_svfiprintf_r+0x2c>
 8009e5e:	ab03      	add	r3, sp, #12
 8009e60:	9300      	str	r3, [sp, #0]
 8009e62:	462a      	mov	r2, r5
 8009e64:	4b05      	ldr	r3, [pc, #20]	@ (8009e7c <_svfiprintf_r+0x1f0>)
 8009e66:	a904      	add	r1, sp, #16
 8009e68:	4638      	mov	r0, r7
 8009e6a:	f000 f879 	bl	8009f60 <_printf_i>
 8009e6e:	e7ed      	b.n	8009e4c <_svfiprintf_r+0x1c0>
 8009e70:	0800a838 	.word	0x0800a838
 8009e74:	0800a842 	.word	0x0800a842
 8009e78:	00000000 	.word	0x00000000
 8009e7c:	08009bd5 	.word	0x08009bd5
 8009e80:	0800a83e 	.word	0x0800a83e

08009e84 <_printf_common>:
 8009e84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e88:	4616      	mov	r6, r2
 8009e8a:	4698      	mov	r8, r3
 8009e8c:	688a      	ldr	r2, [r1, #8]
 8009e8e:	690b      	ldr	r3, [r1, #16]
 8009e90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e94:	4293      	cmp	r3, r2
 8009e96:	bfb8      	it	lt
 8009e98:	4613      	movlt	r3, r2
 8009e9a:	6033      	str	r3, [r6, #0]
 8009e9c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009ea0:	4607      	mov	r7, r0
 8009ea2:	460c      	mov	r4, r1
 8009ea4:	b10a      	cbz	r2, 8009eaa <_printf_common+0x26>
 8009ea6:	3301      	adds	r3, #1
 8009ea8:	6033      	str	r3, [r6, #0]
 8009eaa:	6823      	ldr	r3, [r4, #0]
 8009eac:	0699      	lsls	r1, r3, #26
 8009eae:	bf42      	ittt	mi
 8009eb0:	6833      	ldrmi	r3, [r6, #0]
 8009eb2:	3302      	addmi	r3, #2
 8009eb4:	6033      	strmi	r3, [r6, #0]
 8009eb6:	6825      	ldr	r5, [r4, #0]
 8009eb8:	f015 0506 	ands.w	r5, r5, #6
 8009ebc:	d106      	bne.n	8009ecc <_printf_common+0x48>
 8009ebe:	f104 0a19 	add.w	sl, r4, #25
 8009ec2:	68e3      	ldr	r3, [r4, #12]
 8009ec4:	6832      	ldr	r2, [r6, #0]
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	42ab      	cmp	r3, r5
 8009eca:	dc26      	bgt.n	8009f1a <_printf_common+0x96>
 8009ecc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ed0:	6822      	ldr	r2, [r4, #0]
 8009ed2:	3b00      	subs	r3, #0
 8009ed4:	bf18      	it	ne
 8009ed6:	2301      	movne	r3, #1
 8009ed8:	0692      	lsls	r2, r2, #26
 8009eda:	d42b      	bmi.n	8009f34 <_printf_common+0xb0>
 8009edc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009ee0:	4641      	mov	r1, r8
 8009ee2:	4638      	mov	r0, r7
 8009ee4:	47c8      	blx	r9
 8009ee6:	3001      	adds	r0, #1
 8009ee8:	d01e      	beq.n	8009f28 <_printf_common+0xa4>
 8009eea:	6823      	ldr	r3, [r4, #0]
 8009eec:	6922      	ldr	r2, [r4, #16]
 8009eee:	f003 0306 	and.w	r3, r3, #6
 8009ef2:	2b04      	cmp	r3, #4
 8009ef4:	bf02      	ittt	eq
 8009ef6:	68e5      	ldreq	r5, [r4, #12]
 8009ef8:	6833      	ldreq	r3, [r6, #0]
 8009efa:	1aed      	subeq	r5, r5, r3
 8009efc:	68a3      	ldr	r3, [r4, #8]
 8009efe:	bf0c      	ite	eq
 8009f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f04:	2500      	movne	r5, #0
 8009f06:	4293      	cmp	r3, r2
 8009f08:	bfc4      	itt	gt
 8009f0a:	1a9b      	subgt	r3, r3, r2
 8009f0c:	18ed      	addgt	r5, r5, r3
 8009f0e:	2600      	movs	r6, #0
 8009f10:	341a      	adds	r4, #26
 8009f12:	42b5      	cmp	r5, r6
 8009f14:	d11a      	bne.n	8009f4c <_printf_common+0xc8>
 8009f16:	2000      	movs	r0, #0
 8009f18:	e008      	b.n	8009f2c <_printf_common+0xa8>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	4652      	mov	r2, sl
 8009f1e:	4641      	mov	r1, r8
 8009f20:	4638      	mov	r0, r7
 8009f22:	47c8      	blx	r9
 8009f24:	3001      	adds	r0, #1
 8009f26:	d103      	bne.n	8009f30 <_printf_common+0xac>
 8009f28:	f04f 30ff 	mov.w	r0, #4294967295
 8009f2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f30:	3501      	adds	r5, #1
 8009f32:	e7c6      	b.n	8009ec2 <_printf_common+0x3e>
 8009f34:	18e1      	adds	r1, r4, r3
 8009f36:	1c5a      	adds	r2, r3, #1
 8009f38:	2030      	movs	r0, #48	@ 0x30
 8009f3a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f3e:	4422      	add	r2, r4
 8009f40:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f44:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f48:	3302      	adds	r3, #2
 8009f4a:	e7c7      	b.n	8009edc <_printf_common+0x58>
 8009f4c:	2301      	movs	r3, #1
 8009f4e:	4622      	mov	r2, r4
 8009f50:	4641      	mov	r1, r8
 8009f52:	4638      	mov	r0, r7
 8009f54:	47c8      	blx	r9
 8009f56:	3001      	adds	r0, #1
 8009f58:	d0e6      	beq.n	8009f28 <_printf_common+0xa4>
 8009f5a:	3601      	adds	r6, #1
 8009f5c:	e7d9      	b.n	8009f12 <_printf_common+0x8e>
	...

08009f60 <_printf_i>:
 8009f60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f64:	7e0f      	ldrb	r7, [r1, #24]
 8009f66:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f68:	2f78      	cmp	r7, #120	@ 0x78
 8009f6a:	4691      	mov	r9, r2
 8009f6c:	4680      	mov	r8, r0
 8009f6e:	460c      	mov	r4, r1
 8009f70:	469a      	mov	sl, r3
 8009f72:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f76:	d807      	bhi.n	8009f88 <_printf_i+0x28>
 8009f78:	2f62      	cmp	r7, #98	@ 0x62
 8009f7a:	d80a      	bhi.n	8009f92 <_printf_i+0x32>
 8009f7c:	2f00      	cmp	r7, #0
 8009f7e:	f000 80d1 	beq.w	800a124 <_printf_i+0x1c4>
 8009f82:	2f58      	cmp	r7, #88	@ 0x58
 8009f84:	f000 80b8 	beq.w	800a0f8 <_printf_i+0x198>
 8009f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f8c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f90:	e03a      	b.n	800a008 <_printf_i+0xa8>
 8009f92:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f96:	2b15      	cmp	r3, #21
 8009f98:	d8f6      	bhi.n	8009f88 <_printf_i+0x28>
 8009f9a:	a101      	add	r1, pc, #4	@ (adr r1, 8009fa0 <_printf_i+0x40>)
 8009f9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fa0:	08009ff9 	.word	0x08009ff9
 8009fa4:	0800a00d 	.word	0x0800a00d
 8009fa8:	08009f89 	.word	0x08009f89
 8009fac:	08009f89 	.word	0x08009f89
 8009fb0:	08009f89 	.word	0x08009f89
 8009fb4:	08009f89 	.word	0x08009f89
 8009fb8:	0800a00d 	.word	0x0800a00d
 8009fbc:	08009f89 	.word	0x08009f89
 8009fc0:	08009f89 	.word	0x08009f89
 8009fc4:	08009f89 	.word	0x08009f89
 8009fc8:	08009f89 	.word	0x08009f89
 8009fcc:	0800a10b 	.word	0x0800a10b
 8009fd0:	0800a037 	.word	0x0800a037
 8009fd4:	0800a0c5 	.word	0x0800a0c5
 8009fd8:	08009f89 	.word	0x08009f89
 8009fdc:	08009f89 	.word	0x08009f89
 8009fe0:	0800a12d 	.word	0x0800a12d
 8009fe4:	08009f89 	.word	0x08009f89
 8009fe8:	0800a037 	.word	0x0800a037
 8009fec:	08009f89 	.word	0x08009f89
 8009ff0:	08009f89 	.word	0x08009f89
 8009ff4:	0800a0cd 	.word	0x0800a0cd
 8009ff8:	6833      	ldr	r3, [r6, #0]
 8009ffa:	1d1a      	adds	r2, r3, #4
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	6032      	str	r2, [r6, #0]
 800a000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a004:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a008:	2301      	movs	r3, #1
 800a00a:	e09c      	b.n	800a146 <_printf_i+0x1e6>
 800a00c:	6833      	ldr	r3, [r6, #0]
 800a00e:	6820      	ldr	r0, [r4, #0]
 800a010:	1d19      	adds	r1, r3, #4
 800a012:	6031      	str	r1, [r6, #0]
 800a014:	0606      	lsls	r6, r0, #24
 800a016:	d501      	bpl.n	800a01c <_printf_i+0xbc>
 800a018:	681d      	ldr	r5, [r3, #0]
 800a01a:	e003      	b.n	800a024 <_printf_i+0xc4>
 800a01c:	0645      	lsls	r5, r0, #25
 800a01e:	d5fb      	bpl.n	800a018 <_printf_i+0xb8>
 800a020:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a024:	2d00      	cmp	r5, #0
 800a026:	da03      	bge.n	800a030 <_printf_i+0xd0>
 800a028:	232d      	movs	r3, #45	@ 0x2d
 800a02a:	426d      	negs	r5, r5
 800a02c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a030:	4858      	ldr	r0, [pc, #352]	@ (800a194 <_printf_i+0x234>)
 800a032:	230a      	movs	r3, #10
 800a034:	e011      	b.n	800a05a <_printf_i+0xfa>
 800a036:	6821      	ldr	r1, [r4, #0]
 800a038:	6833      	ldr	r3, [r6, #0]
 800a03a:	0608      	lsls	r0, r1, #24
 800a03c:	f853 5b04 	ldr.w	r5, [r3], #4
 800a040:	d402      	bmi.n	800a048 <_printf_i+0xe8>
 800a042:	0649      	lsls	r1, r1, #25
 800a044:	bf48      	it	mi
 800a046:	b2ad      	uxthmi	r5, r5
 800a048:	2f6f      	cmp	r7, #111	@ 0x6f
 800a04a:	4852      	ldr	r0, [pc, #328]	@ (800a194 <_printf_i+0x234>)
 800a04c:	6033      	str	r3, [r6, #0]
 800a04e:	bf14      	ite	ne
 800a050:	230a      	movne	r3, #10
 800a052:	2308      	moveq	r3, #8
 800a054:	2100      	movs	r1, #0
 800a056:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a05a:	6866      	ldr	r6, [r4, #4]
 800a05c:	60a6      	str	r6, [r4, #8]
 800a05e:	2e00      	cmp	r6, #0
 800a060:	db05      	blt.n	800a06e <_printf_i+0x10e>
 800a062:	6821      	ldr	r1, [r4, #0]
 800a064:	432e      	orrs	r6, r5
 800a066:	f021 0104 	bic.w	r1, r1, #4
 800a06a:	6021      	str	r1, [r4, #0]
 800a06c:	d04b      	beq.n	800a106 <_printf_i+0x1a6>
 800a06e:	4616      	mov	r6, r2
 800a070:	fbb5 f1f3 	udiv	r1, r5, r3
 800a074:	fb03 5711 	mls	r7, r3, r1, r5
 800a078:	5dc7      	ldrb	r7, [r0, r7]
 800a07a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a07e:	462f      	mov	r7, r5
 800a080:	42bb      	cmp	r3, r7
 800a082:	460d      	mov	r5, r1
 800a084:	d9f4      	bls.n	800a070 <_printf_i+0x110>
 800a086:	2b08      	cmp	r3, #8
 800a088:	d10b      	bne.n	800a0a2 <_printf_i+0x142>
 800a08a:	6823      	ldr	r3, [r4, #0]
 800a08c:	07df      	lsls	r7, r3, #31
 800a08e:	d508      	bpl.n	800a0a2 <_printf_i+0x142>
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	6861      	ldr	r1, [r4, #4]
 800a094:	4299      	cmp	r1, r3
 800a096:	bfde      	ittt	le
 800a098:	2330      	movle	r3, #48	@ 0x30
 800a09a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a09e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a0a2:	1b92      	subs	r2, r2, r6
 800a0a4:	6122      	str	r2, [r4, #16]
 800a0a6:	f8cd a000 	str.w	sl, [sp]
 800a0aa:	464b      	mov	r3, r9
 800a0ac:	aa03      	add	r2, sp, #12
 800a0ae:	4621      	mov	r1, r4
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	f7ff fee7 	bl	8009e84 <_printf_common>
 800a0b6:	3001      	adds	r0, #1
 800a0b8:	d14a      	bne.n	800a150 <_printf_i+0x1f0>
 800a0ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a0be:	b004      	add	sp, #16
 800a0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	f043 0320 	orr.w	r3, r3, #32
 800a0ca:	6023      	str	r3, [r4, #0]
 800a0cc:	4832      	ldr	r0, [pc, #200]	@ (800a198 <_printf_i+0x238>)
 800a0ce:	2778      	movs	r7, #120	@ 0x78
 800a0d0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	6831      	ldr	r1, [r6, #0]
 800a0d8:	061f      	lsls	r7, r3, #24
 800a0da:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0de:	d402      	bmi.n	800a0e6 <_printf_i+0x186>
 800a0e0:	065f      	lsls	r7, r3, #25
 800a0e2:	bf48      	it	mi
 800a0e4:	b2ad      	uxthmi	r5, r5
 800a0e6:	6031      	str	r1, [r6, #0]
 800a0e8:	07d9      	lsls	r1, r3, #31
 800a0ea:	bf44      	itt	mi
 800a0ec:	f043 0320 	orrmi.w	r3, r3, #32
 800a0f0:	6023      	strmi	r3, [r4, #0]
 800a0f2:	b11d      	cbz	r5, 800a0fc <_printf_i+0x19c>
 800a0f4:	2310      	movs	r3, #16
 800a0f6:	e7ad      	b.n	800a054 <_printf_i+0xf4>
 800a0f8:	4826      	ldr	r0, [pc, #152]	@ (800a194 <_printf_i+0x234>)
 800a0fa:	e7e9      	b.n	800a0d0 <_printf_i+0x170>
 800a0fc:	6823      	ldr	r3, [r4, #0]
 800a0fe:	f023 0320 	bic.w	r3, r3, #32
 800a102:	6023      	str	r3, [r4, #0]
 800a104:	e7f6      	b.n	800a0f4 <_printf_i+0x194>
 800a106:	4616      	mov	r6, r2
 800a108:	e7bd      	b.n	800a086 <_printf_i+0x126>
 800a10a:	6833      	ldr	r3, [r6, #0]
 800a10c:	6825      	ldr	r5, [r4, #0]
 800a10e:	6961      	ldr	r1, [r4, #20]
 800a110:	1d18      	adds	r0, r3, #4
 800a112:	6030      	str	r0, [r6, #0]
 800a114:	062e      	lsls	r6, r5, #24
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	d501      	bpl.n	800a11e <_printf_i+0x1be>
 800a11a:	6019      	str	r1, [r3, #0]
 800a11c:	e002      	b.n	800a124 <_printf_i+0x1c4>
 800a11e:	0668      	lsls	r0, r5, #25
 800a120:	d5fb      	bpl.n	800a11a <_printf_i+0x1ba>
 800a122:	8019      	strh	r1, [r3, #0]
 800a124:	2300      	movs	r3, #0
 800a126:	6123      	str	r3, [r4, #16]
 800a128:	4616      	mov	r6, r2
 800a12a:	e7bc      	b.n	800a0a6 <_printf_i+0x146>
 800a12c:	6833      	ldr	r3, [r6, #0]
 800a12e:	1d1a      	adds	r2, r3, #4
 800a130:	6032      	str	r2, [r6, #0]
 800a132:	681e      	ldr	r6, [r3, #0]
 800a134:	6862      	ldr	r2, [r4, #4]
 800a136:	2100      	movs	r1, #0
 800a138:	4630      	mov	r0, r6
 800a13a:	f7f6 f851 	bl	80001e0 <memchr>
 800a13e:	b108      	cbz	r0, 800a144 <_printf_i+0x1e4>
 800a140:	1b80      	subs	r0, r0, r6
 800a142:	6060      	str	r0, [r4, #4]
 800a144:	6863      	ldr	r3, [r4, #4]
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	2300      	movs	r3, #0
 800a14a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a14e:	e7aa      	b.n	800a0a6 <_printf_i+0x146>
 800a150:	6923      	ldr	r3, [r4, #16]
 800a152:	4632      	mov	r2, r6
 800a154:	4649      	mov	r1, r9
 800a156:	4640      	mov	r0, r8
 800a158:	47d0      	blx	sl
 800a15a:	3001      	adds	r0, #1
 800a15c:	d0ad      	beq.n	800a0ba <_printf_i+0x15a>
 800a15e:	6823      	ldr	r3, [r4, #0]
 800a160:	079b      	lsls	r3, r3, #30
 800a162:	d413      	bmi.n	800a18c <_printf_i+0x22c>
 800a164:	68e0      	ldr	r0, [r4, #12]
 800a166:	9b03      	ldr	r3, [sp, #12]
 800a168:	4298      	cmp	r0, r3
 800a16a:	bfb8      	it	lt
 800a16c:	4618      	movlt	r0, r3
 800a16e:	e7a6      	b.n	800a0be <_printf_i+0x15e>
 800a170:	2301      	movs	r3, #1
 800a172:	4632      	mov	r2, r6
 800a174:	4649      	mov	r1, r9
 800a176:	4640      	mov	r0, r8
 800a178:	47d0      	blx	sl
 800a17a:	3001      	adds	r0, #1
 800a17c:	d09d      	beq.n	800a0ba <_printf_i+0x15a>
 800a17e:	3501      	adds	r5, #1
 800a180:	68e3      	ldr	r3, [r4, #12]
 800a182:	9903      	ldr	r1, [sp, #12]
 800a184:	1a5b      	subs	r3, r3, r1
 800a186:	42ab      	cmp	r3, r5
 800a188:	dcf2      	bgt.n	800a170 <_printf_i+0x210>
 800a18a:	e7eb      	b.n	800a164 <_printf_i+0x204>
 800a18c:	2500      	movs	r5, #0
 800a18e:	f104 0619 	add.w	r6, r4, #25
 800a192:	e7f5      	b.n	800a180 <_printf_i+0x220>
 800a194:	0800a849 	.word	0x0800a849
 800a198:	0800a85a 	.word	0x0800a85a

0800a19c <memmove>:
 800a19c:	4288      	cmp	r0, r1
 800a19e:	b510      	push	{r4, lr}
 800a1a0:	eb01 0402 	add.w	r4, r1, r2
 800a1a4:	d902      	bls.n	800a1ac <memmove+0x10>
 800a1a6:	4284      	cmp	r4, r0
 800a1a8:	4623      	mov	r3, r4
 800a1aa:	d807      	bhi.n	800a1bc <memmove+0x20>
 800a1ac:	1e43      	subs	r3, r0, #1
 800a1ae:	42a1      	cmp	r1, r4
 800a1b0:	d008      	beq.n	800a1c4 <memmove+0x28>
 800a1b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1ba:	e7f8      	b.n	800a1ae <memmove+0x12>
 800a1bc:	4402      	add	r2, r0
 800a1be:	4601      	mov	r1, r0
 800a1c0:	428a      	cmp	r2, r1
 800a1c2:	d100      	bne.n	800a1c6 <memmove+0x2a>
 800a1c4:	bd10      	pop	{r4, pc}
 800a1c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a1ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a1ce:	e7f7      	b.n	800a1c0 <memmove+0x24>

0800a1d0 <_sbrk_r>:
 800a1d0:	b538      	push	{r3, r4, r5, lr}
 800a1d2:	4d06      	ldr	r5, [pc, #24]	@ (800a1ec <_sbrk_r+0x1c>)
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	4604      	mov	r4, r0
 800a1d8:	4608      	mov	r0, r1
 800a1da:	602b      	str	r3, [r5, #0]
 800a1dc:	f7f7 fb1c 	bl	8001818 <_sbrk>
 800a1e0:	1c43      	adds	r3, r0, #1
 800a1e2:	d102      	bne.n	800a1ea <_sbrk_r+0x1a>
 800a1e4:	682b      	ldr	r3, [r5, #0]
 800a1e6:	b103      	cbz	r3, 800a1ea <_sbrk_r+0x1a>
 800a1e8:	6023      	str	r3, [r4, #0]
 800a1ea:	bd38      	pop	{r3, r4, r5, pc}
 800a1ec:	20002c28 	.word	0x20002c28

0800a1f0 <memcpy>:
 800a1f0:	440a      	add	r2, r1
 800a1f2:	4291      	cmp	r1, r2
 800a1f4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1f8:	d100      	bne.n	800a1fc <memcpy+0xc>
 800a1fa:	4770      	bx	lr
 800a1fc:	b510      	push	{r4, lr}
 800a1fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a202:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a206:	4291      	cmp	r1, r2
 800a208:	d1f9      	bne.n	800a1fe <memcpy+0xe>
 800a20a:	bd10      	pop	{r4, pc}

0800a20c <_realloc_r>:
 800a20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a210:	4607      	mov	r7, r0
 800a212:	4614      	mov	r4, r2
 800a214:	460d      	mov	r5, r1
 800a216:	b921      	cbnz	r1, 800a222 <_realloc_r+0x16>
 800a218:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a21c:	4611      	mov	r1, r2
 800a21e:	f7ff bc4d 	b.w	8009abc <_malloc_r>
 800a222:	b92a      	cbnz	r2, 800a230 <_realloc_r+0x24>
 800a224:	f7ff fbde 	bl	80099e4 <_free_r>
 800a228:	4625      	mov	r5, r4
 800a22a:	4628      	mov	r0, r5
 800a22c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a230:	f000 f81a 	bl	800a268 <_malloc_usable_size_r>
 800a234:	4284      	cmp	r4, r0
 800a236:	4606      	mov	r6, r0
 800a238:	d802      	bhi.n	800a240 <_realloc_r+0x34>
 800a23a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a23e:	d8f4      	bhi.n	800a22a <_realloc_r+0x1e>
 800a240:	4621      	mov	r1, r4
 800a242:	4638      	mov	r0, r7
 800a244:	f7ff fc3a 	bl	8009abc <_malloc_r>
 800a248:	4680      	mov	r8, r0
 800a24a:	b908      	cbnz	r0, 800a250 <_realloc_r+0x44>
 800a24c:	4645      	mov	r5, r8
 800a24e:	e7ec      	b.n	800a22a <_realloc_r+0x1e>
 800a250:	42b4      	cmp	r4, r6
 800a252:	4622      	mov	r2, r4
 800a254:	4629      	mov	r1, r5
 800a256:	bf28      	it	cs
 800a258:	4632      	movcs	r2, r6
 800a25a:	f7ff ffc9 	bl	800a1f0 <memcpy>
 800a25e:	4629      	mov	r1, r5
 800a260:	4638      	mov	r0, r7
 800a262:	f7ff fbbf 	bl	80099e4 <_free_r>
 800a266:	e7f1      	b.n	800a24c <_realloc_r+0x40>

0800a268 <_malloc_usable_size_r>:
 800a268:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a26c:	1f18      	subs	r0, r3, #4
 800a26e:	2b00      	cmp	r3, #0
 800a270:	bfbc      	itt	lt
 800a272:	580b      	ldrlt	r3, [r1, r0]
 800a274:	18c0      	addlt	r0, r0, r3
 800a276:	4770      	bx	lr

0800a278 <_init>:
 800a278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a27a:	bf00      	nop
 800a27c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a27e:	bc08      	pop	{r3}
 800a280:	469e      	mov	lr, r3
 800a282:	4770      	bx	lr

0800a284 <_fini>:
 800a284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a286:	bf00      	nop
 800a288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a28a:	bc08      	pop	{r3}
 800a28c:	469e      	mov	lr, r3
 800a28e:	4770      	bx	lr
