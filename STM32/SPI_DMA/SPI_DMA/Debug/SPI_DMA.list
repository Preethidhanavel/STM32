
SPI_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000040dc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08004264  08004264  00005264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042b0  080042b0  00006018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080042b0  080042b0  000052b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080042b8  080042b8  00006018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080042b8  080042b8  000052b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080042bc  080042bc  000052bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080042c0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a8  20000018  080042d8  00006018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  080042d8  000061c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c9b4  00000000  00000000  00006048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cb3  00000000  00000000  000129fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b38  00000000  00000000  000146b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008a8  00000000  00000000  000151e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000253e1  00000000  00000000  00015a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d395  00000000  00000000  0003ae71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e61af  00000000  00000000  00048206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012e3b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002dd8  00000000  00000000  0012e3f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  001311d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800424c 	.word	0x0800424c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800424c 	.word	0x0800424c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <HAL_SPI_TxRxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
    if (hspi->Instance == SPI1)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a13      	ldr	r2, [pc, #76]	@ (8000550 <HAL_SPI_TxRxCpltCallback+0x5c>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d120      	bne.n	8000548 <HAL_SPI_TxRxCpltCallback+0x54>
    {
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);  // Set CS HIGH
 8000506:	2201      	movs	r2, #1
 8000508:	2110      	movs	r1, #16
 800050a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800050e:	f001 f8a7 	bl	8001660 <HAL_GPIO_WritePin>

        // Optional: display received data over UART
        HAL_UART_Transmit(&huart2, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8000512:	f04f 33ff 	mov.w	r3, #4294967295
 8000516:	220a      	movs	r2, #10
 8000518:	490e      	ldr	r1, [pc, #56]	@ (8000554 <HAL_SPI_TxRxCpltCallback+0x60>)
 800051a:	480f      	ldr	r0, [pc, #60]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x64>)
 800051c:	f003 f90c 	bl	8003738 <HAL_UART_Transmit>

        // Add newline for readability
        uint8_t newline[] = "\r\n";
 8000520:	4a0e      	ldr	r2, [pc, #56]	@ (800055c <HAL_SPI_TxRxCpltCallback+0x68>)
 8000522:	f107 030c 	add.w	r3, r7, #12
 8000526:	6812      	ldr	r2, [r2, #0]
 8000528:	4611      	mov	r1, r2
 800052a:	8019      	strh	r1, [r3, #0]
 800052c:	3302      	adds	r3, #2
 800052e:	0c12      	lsrs	r2, r2, #16
 8000530:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, newline, sizeof(newline)-1, HAL_MAX_DELAY);
 8000532:	f107 010c 	add.w	r1, r7, #12
 8000536:	f04f 33ff 	mov.w	r3, #4294967295
 800053a:	2202      	movs	r2, #2
 800053c:	4806      	ldr	r0, [pc, #24]	@ (8000558 <HAL_SPI_TxRxCpltCallback+0x64>)
 800053e:	f003 f8fb 	bl	8003738 <HAL_UART_Transmit>
        spi_ready = 1;  // Mark ready for next transfer
 8000542:	4b07      	ldr	r3, [pc, #28]	@ (8000560 <HAL_SPI_TxRxCpltCallback+0x6c>)
 8000544:	2201      	movs	r2, #1
 8000546:	701a      	strb	r2, [r3, #0]
    }
}
 8000548:	bf00      	nop
 800054a:	3710      	adds	r7, #16
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40013000 	.word	0x40013000
 8000554:	20000034 	.word	0x20000034
 8000558:	20000134 	.word	0x20000134
 800055c:	08004264 	.word	0x08004264
 8000560:	2000000a 	.word	0x2000000a

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 fb26 	bl	8000bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f836 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f91a 	bl	80007a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000574:	f000 f8f2 	bl	800075c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8c0 	bl	80006fc <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800057c:	f000 f880 	bl	8000680 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);  // Pull CS LOW (optional if using GPIO PA4 as CS)
 8000580:	2200      	movs	r2, #0
 8000582:	2110      	movs	r1, #16
 8000584:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000588:	f001 f86a 	bl	8001660 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, rx_buffer, sizeof(tx_buffer));
 800058c:	230a      	movs	r3, #10
 800058e:	4a0f      	ldr	r2, [pc, #60]	@ (80005cc <main+0x68>)
 8000590:	490f      	ldr	r1, [pc, #60]	@ (80005d0 <main+0x6c>)
 8000592:	4810      	ldr	r0, [pc, #64]	@ (80005d4 <main+0x70>)
 8000594:	f002 fc40 	bl	8002e18 <HAL_SPI_TransmitReceive_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (spi_ready)
 8000598:	4b0f      	ldr	r3, [pc, #60]	@ (80005d8 <main+0x74>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d00e      	beq.n	80005c0 <main+0x5c>
	      {
	          spi_ready = 0;
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <main+0x74>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	701a      	strb	r2, [r3, #0]
	          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2110      	movs	r1, #16
 80005ac:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005b0:	f001 f856 	bl	8001660 <HAL_GPIO_WritePin>
	          HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buffer, rx_buffer, sizeof(tx_buffer));
 80005b4:	230a      	movs	r3, #10
 80005b6:	4a05      	ldr	r2, [pc, #20]	@ (80005cc <main+0x68>)
 80005b8:	4905      	ldr	r1, [pc, #20]	@ (80005d0 <main+0x6c>)
 80005ba:	4806      	ldr	r0, [pc, #24]	@ (80005d4 <main+0x70>)
 80005bc:	f002 fc2c 	bl	8002e18 <HAL_SPI_TransmitReceive_DMA>
	      }

	      HAL_Delay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005c4:	f000 fb74 	bl	8000cb0 <HAL_Delay>
	  if (spi_ready)
 80005c8:	e7e6      	b.n	8000598 <main+0x34>
 80005ca:	bf00      	nop
 80005cc:	20000034 	.word	0x20000034
 80005d0:	20000000 	.word	0x20000000
 80005d4:	20000040 	.word	0x20000040
 80005d8:	2000000a 	.word	0x2000000a

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b096      	sub	sp, #88	@ 0x58
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 0314 	add.w	r3, r7, #20
 80005e6:	2244      	movs	r2, #68	@ 0x44
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 fe01 	bl	80041f2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	463b      	mov	r3, r7
 80005f2:	2200      	movs	r2, #0
 80005f4:	601a      	str	r2, [r3, #0]
 80005f6:	605a      	str	r2, [r3, #4]
 80005f8:	609a      	str	r2, [r3, #8]
 80005fa:	60da      	str	r2, [r3, #12]
 80005fc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005fe:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000602:	f001 f853 	bl	80016ac <HAL_PWREx_ControlVoltageScaling>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800060c:	f000 f932 	bl	8000874 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000610:	2302      	movs	r3, #2
 8000612:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000618:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800061a:	2310      	movs	r3, #16
 800061c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061e:	2302      	movs	r3, #2
 8000620:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000622:	2302      	movs	r3, #2
 8000624:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000626:	2301      	movs	r3, #1
 8000628:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800062a:	230a      	movs	r3, #10
 800062c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062e:	2307      	movs	r3, #7
 8000630:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000632:	2302      	movs	r3, #2
 8000634:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063a:	f107 0314 	add.w	r3, r7, #20
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f88a 	bl	8001758 <HAL_RCC_OscConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064a:	f000 f913 	bl	8000874 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064e:	230f      	movs	r3, #15
 8000650:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000652:	2303      	movs	r3, #3
 8000654:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000662:	463b      	mov	r3, r7
 8000664:	2104      	movs	r1, #4
 8000666:	4618      	mov	r0, r3
 8000668:	f001 fc52 	bl	8001f10 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000672:	f000 f8ff 	bl	8000874 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3758      	adds	r7, #88	@ 0x58
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000684:	4b1b      	ldr	r3, [pc, #108]	@ (80006f4 <MX_SPI1_Init+0x74>)
 8000686:	4a1c      	ldr	r2, [pc, #112]	@ (80006f8 <MX_SPI1_Init+0x78>)
 8000688:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800068a:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_SPI1_Init+0x74>)
 800068c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000690:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000692:	4b18      	ldr	r3, [pc, #96]	@ (80006f4 <MX_SPI1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000698:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_SPI1_Init+0x74>)
 800069a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800069e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006b6:	2218      	movs	r2, #24
 80006b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006ce:	2207      	movs	r2, #7
 80006d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006da:	2208      	movs	r2, #8
 80006dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_SPI1_Init+0x74>)
 80006e0:	f002 faf6 	bl	8002cd0 <HAL_SPI_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80006ea:	f000 f8c3 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000040 	.word	0x20000040
 80006f8:	40013000 	.word	0x40013000

080006fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000700:	4b14      	ldr	r3, [pc, #80]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000702:	4a15      	ldr	r2, [pc, #84]	@ (8000758 <MX_USART2_UART_Init+0x5c>)
 8000704:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000706:	4b13      	ldr	r3, [pc, #76]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b11      	ldr	r3, [pc, #68]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0f      	ldr	r3, [pc, #60]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0e      	ldr	r3, [pc, #56]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b0b      	ldr	r3, [pc, #44]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b09      	ldr	r3, [pc, #36]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000732:	4b08      	ldr	r3, [pc, #32]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000738:	4b06      	ldr	r3, [pc, #24]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073e:	4805      	ldr	r0, [pc, #20]	@ (8000754 <MX_USART2_UART_Init+0x58>)
 8000740:	f002 ffac 	bl	800369c <HAL_UART_Init>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800074a:	f000 f893 	bl	8000874 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000134 	.word	0x20000134
 8000758:	40004400 	.word	0x40004400

0800075c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b082      	sub	sp, #8
 8000760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000762:	4b10      	ldr	r3, [pc, #64]	@ (80007a4 <MX_DMA_Init+0x48>)
 8000764:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000766:	4a0f      	ldr	r2, [pc, #60]	@ (80007a4 <MX_DMA_Init+0x48>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	6493      	str	r3, [r2, #72]	@ 0x48
 800076e:	4b0d      	ldr	r3, [pc, #52]	@ (80007a4 <MX_DMA_Init+0x48>)
 8000770:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	607b      	str	r3, [r7, #4]
 8000778:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800077a:	2200      	movs	r2, #0
 800077c:	2100      	movs	r1, #0
 800077e:	200c      	movs	r0, #12
 8000780:	f000 fb95 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000784:	200c      	movs	r0, #12
 8000786:	f000 fbae 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	200d      	movs	r0, #13
 8000790:	f000 fb8d 	bl	8000eae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000794:	200d      	movs	r0, #13
 8000796:	f000 fba6 	bl	8000ee6 <HAL_NVIC_EnableIRQ>

}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08a      	sub	sp, #40	@ 0x28
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	f107 0314 	add.w	r3, r7, #20
 80007b2:	2200      	movs	r2, #0
 80007b4:	601a      	str	r2, [r3, #0]
 80007b6:	605a      	str	r2, [r3, #4]
 80007b8:	609a      	str	r2, [r3, #8]
 80007ba:	60da      	str	r2, [r3, #12]
 80007bc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b2b      	ldr	r3, [pc, #172]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007c2:	4a2a      	ldr	r2, [pc, #168]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007c4:	f043 0304 	orr.w	r3, r3, #4
 80007c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007ca:	4b28      	ldr	r3, [pc, #160]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007ce:	f003 0304 	and.w	r3, r3, #4
 80007d2:	613b      	str	r3, [r7, #16]
 80007d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007d6:	4b25      	ldr	r3, [pc, #148]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007da:	4a24      	ldr	r2, [pc, #144]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007e2:	4b22      	ldr	r3, [pc, #136]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ea:	60fb      	str	r3, [r7, #12]
 80007ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ee:	4b1f      	ldr	r3, [pc, #124]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007f2:	4a1e      	ldr	r2, [pc, #120]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007f4:	f043 0301 	orr.w	r3, r3, #1
 80007f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80007fa:	4b1c      	ldr	r3, [pc, #112]	@ (800086c <MX_GPIO_Init+0xc4>)
 80007fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80007fe:	f003 0301 	and.w	r3, r3, #1
 8000802:	60bb      	str	r3, [r7, #8]
 8000804:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000806:	4b19      	ldr	r3, [pc, #100]	@ (800086c <MX_GPIO_Init+0xc4>)
 8000808:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_GPIO_Init+0xc4>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_GPIO_Init+0xc4>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	2110      	movs	r1, #16
 8000822:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000826:	f000 ff1b 	bl	8001660 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800082a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800082e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000830:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800083a:	f107 0314 	add.w	r3, r7, #20
 800083e:	4619      	mov	r1, r3
 8000840:	480b      	ldr	r0, [pc, #44]	@ (8000870 <MX_GPIO_Init+0xc8>)
 8000842:	f000 fd63 	bl	800130c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000846:	2310      	movs	r3, #16
 8000848:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000860:	f000 fd54 	bl	800130c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000864:	bf00      	nop
 8000866:	3728      	adds	r7, #40	@ 0x28
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40021000 	.word	0x40021000
 8000870:	48000800 	.word	0x48000800

08000874 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000878:	b672      	cpsid	i
}
 800087a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087c:	bf00      	nop
 800087e:	e7fd      	b.n	800087c <Error_Handler+0x8>

08000880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000886:	4b0f      	ldr	r3, [pc, #60]	@ (80008c4 <HAL_MspInit+0x44>)
 8000888:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800088a:	4a0e      	ldr	r2, [pc, #56]	@ (80008c4 <HAL_MspInit+0x44>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6613      	str	r3, [r2, #96]	@ 0x60
 8000892:	4b0c      	ldr	r3, [pc, #48]	@ (80008c4 <HAL_MspInit+0x44>)
 8000894:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800089e:	4b09      	ldr	r3, [pc, #36]	@ (80008c4 <HAL_MspInit+0x44>)
 80008a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008a2:	4a08      	ldr	r2, [pc, #32]	@ (80008c4 <HAL_MspInit+0x44>)
 80008a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80008aa:	4b06      	ldr	r3, [pc, #24]	@ (80008c4 <HAL_MspInit+0x44>)
 80008ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008b2:	603b      	str	r3, [r7, #0]
 80008b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000

080008c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b08a      	sub	sp, #40	@ 0x28
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a40      	ldr	r2, [pc, #256]	@ (80009e8 <HAL_SPI_MspInit+0x120>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d17a      	bne.n	80009e0 <HAL_SPI_MspInit+0x118>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80008ea:	4b40      	ldr	r3, [pc, #256]	@ (80009ec <HAL_SPI_MspInit+0x124>)
 80008ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008ee:	4a3f      	ldr	r2, [pc, #252]	@ (80009ec <HAL_SPI_MspInit+0x124>)
 80008f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80008f4:	6613      	str	r3, [r2, #96]	@ 0x60
 80008f6:	4b3d      	ldr	r3, [pc, #244]	@ (80009ec <HAL_SPI_MspInit+0x124>)
 80008f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b3a      	ldr	r3, [pc, #232]	@ (80009ec <HAL_SPI_MspInit+0x124>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000906:	4a39      	ldr	r2, [pc, #228]	@ (80009ec <HAL_SPI_MspInit+0x124>)
 8000908:	f043 0301 	orr.w	r3, r3, #1
 800090c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800090e:	4b37      	ldr	r3, [pc, #220]	@ (80009ec <HAL_SPI_MspInit+0x124>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800091a:	23e0      	movs	r3, #224	@ 0xe0
 800091c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	2302      	movs	r3, #2
 8000920:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000926:	2303      	movs	r3, #3
 8000928:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800092a:	2305      	movs	r3, #5
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f000 fce8 	bl	800130c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 800093c:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 800093e:	4a2d      	ldr	r2, [pc, #180]	@ (80009f4 <HAL_SPI_MspInit+0x12c>)
 8000940:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8000942:	4b2b      	ldr	r3, [pc, #172]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 8000944:	2201      	movs	r2, #1
 8000946:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000948:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800094e:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000954:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 8000956:	2280      	movs	r2, #128	@ 0x80
 8000958:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800095a:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 800095c:	2200      	movs	r2, #0
 800095e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000960:	4b23      	ldr	r3, [pc, #140]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 8000962:	2200      	movs	r2, #0
 8000964:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8000966:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 8000968:	2200      	movs	r2, #0
 800096a:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800096c:	4b20      	ldr	r3, [pc, #128]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 800096e:	2200      	movs	r2, #0
 8000970:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8000972:	481f      	ldr	r0, [pc, #124]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 8000974:	f000 fad2 	bl	8000f1c <HAL_DMA_Init>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800097e:	f7ff ff79 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a1a      	ldr	r2, [pc, #104]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 8000986:	659a      	str	r2, [r3, #88]	@ 0x58
 8000988:	4a19      	ldr	r2, [pc, #100]	@ (80009f0 <HAL_SPI_MspInit+0x128>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 800098e:	4b1a      	ldr	r3, [pc, #104]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 8000990:	4a1a      	ldr	r2, [pc, #104]	@ (80009fc <HAL_SPI_MspInit+0x134>)
 8000992:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8000994:	4b18      	ldr	r3, [pc, #96]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 8000996:	2201      	movs	r2, #1
 8000998:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800099a:	4b17      	ldr	r3, [pc, #92]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 800099c:	2210      	movs	r2, #16
 800099e:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a0:	4b15      	ldr	r3, [pc, #84]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009a6:	4b14      	ldr	r3, [pc, #80]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 80009a8:	2280      	movs	r2, #128	@ 0x80
 80009aa:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009ac:	4b12      	ldr	r3, [pc, #72]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009b2:	4b11      	ldr	r3, [pc, #68]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009be:	4b0e      	ldr	r3, [pc, #56]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80009c4:	480c      	ldr	r0, [pc, #48]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 80009c6:	f000 faa9 	bl	8000f1c <HAL_DMA_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80009d0:	f7ff ff50 	bl	8000874 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	4a08      	ldr	r2, [pc, #32]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 80009d8:	655a      	str	r2, [r3, #84]	@ 0x54
 80009da:	4a07      	ldr	r2, [pc, #28]	@ (80009f8 <HAL_SPI_MspInit+0x130>)
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80009e0:	bf00      	nop
 80009e2:	3728      	adds	r7, #40	@ 0x28
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40013000 	.word	0x40013000
 80009ec:	40021000 	.word	0x40021000
 80009f0:	200000a4 	.word	0x200000a4
 80009f4:	4002001c 	.word	0x4002001c
 80009f8:	200000ec 	.word	0x200000ec
 80009fc:	40020030 	.word	0x40020030

08000a00 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0ac      	sub	sp, #176	@ 0xb0
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2288      	movs	r2, #136	@ 0x88
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f003 fbe6 	bl	80041f2 <memset>
  if(huart->Instance==USART2)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a21      	ldr	r2, [pc, #132]	@ (8000ab0 <HAL_UART_MspInit+0xb0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d13b      	bne.n	8000aa8 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a30:	2302      	movs	r3, #2
 8000a32:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a34:	2300      	movs	r3, #0
 8000a36:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fc8b 	bl	8002358 <HAL_RCCEx_PeriphCLKConfig>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a48:	f7ff ff14 	bl	8000874 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a4c:	4b19      	ldr	r3, [pc, #100]	@ (8000ab4 <HAL_UART_MspInit+0xb4>)
 8000a4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a50:	4a18      	ldr	r2, [pc, #96]	@ (8000ab4 <HAL_UART_MspInit+0xb4>)
 8000a52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a56:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a58:	4b16      	ldr	r3, [pc, #88]	@ (8000ab4 <HAL_UART_MspInit+0xb4>)
 8000a5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a60:	613b      	str	r3, [r7, #16]
 8000a62:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a64:	4b13      	ldr	r3, [pc, #76]	@ (8000ab4 <HAL_UART_MspInit+0xb4>)
 8000a66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a68:	4a12      	ldr	r2, [pc, #72]	@ (8000ab4 <HAL_UART_MspInit+0xb4>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a70:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <HAL_UART_MspInit+0xb4>)
 8000a72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60fb      	str	r3, [r7, #12]
 8000a7a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a7c:	230c      	movs	r3, #12
 8000a7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a82:	2302      	movs	r3, #2
 8000a84:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a94:	2307      	movs	r3, #7
 8000a96:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a9a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000aa4:	f000 fc32 	bl	800130c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000aa8:	bf00      	nop
 8000aaa:	37b0      	adds	r7, #176	@ 0xb0
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40004400 	.word	0x40004400
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <NMI_Handler+0x4>

08000ac0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <HardFault_Handler+0x4>

08000ac8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <MemManage_Handler+0x4>

08000ad0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <BusFault_Handler+0x4>

08000ad8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <UsageFault_Handler+0x4>

08000ae0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr

08000aee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aee:	b480      	push	{r7}
 8000af0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af2:	bf00      	nop
 8000af4:	46bd      	mov	sp, r7
 8000af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afa:	4770      	bx	lr

08000afc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b0e:	f000 f8af 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
	...

08000b18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000b1c:	4802      	ldr	r0, [pc, #8]	@ (8000b28 <DMA1_Channel2_IRQHandler+0x10>)
 8000b1e:	f000 fb15 	bl	800114c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000a4 	.word	0x200000a4

08000b2c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000b30:	4802      	ldr	r0, [pc, #8]	@ (8000b3c <DMA1_Channel3_IRQHandler+0x10>)
 8000b32:	f000 fb0b 	bl	800114c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	200000ec 	.word	0x200000ec

08000b40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b44:	4b06      	ldr	r3, [pc, #24]	@ (8000b60 <SystemInit+0x20>)
 8000b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b4a:	4a05      	ldr	r2, [pc, #20]	@ (8000b60 <SystemInit+0x20>)
 8000b4c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b50:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000b54:	bf00      	nop
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b9c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b68:	f7ff ffea 	bl	8000b40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b6c:	480c      	ldr	r0, [pc, #48]	@ (8000ba0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b70:	4a0d      	ldr	r2, [pc, #52]	@ (8000ba8 <LoopForever+0xe>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b74:	e002      	b.n	8000b7c <LoopCopyDataInit>

08000b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b7a:	3304      	adds	r3, #4

08000b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b80:	d3f9      	bcc.n	8000b76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b82:	4a0a      	ldr	r2, [pc, #40]	@ (8000bac <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b84:	4c0a      	ldr	r4, [pc, #40]	@ (8000bb0 <LoopForever+0x16>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b88:	e001      	b.n	8000b8e <LoopFillZerobss>

08000b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b8c:	3204      	adds	r2, #4

08000b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b90:	d3fb      	bcc.n	8000b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b92:	f003 fb37 	bl	8004204 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b96:	f7ff fce5 	bl	8000564 <main>

08000b9a <LoopForever>:

LoopForever:
    b LoopForever
 8000b9a:	e7fe      	b.n	8000b9a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b9c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ba0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba4:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000ba8:	080042c0 	.word	0x080042c0
  ldr r2, =_sbss
 8000bac:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000bb0:	200001c0 	.word	0x200001c0

08000bb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000bb4:	e7fe      	b.n	8000bb4 <ADC1_2_IRQHandler>
	...

08000bb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf4 <HAL_Init+0x3c>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a0b      	ldr	r2, [pc, #44]	@ (8000bf4 <HAL_Init+0x3c>)
 8000bc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bcc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bce:	2003      	movs	r0, #3
 8000bd0:	f000 f962 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f000 f80f 	bl	8000bf8 <HAL_InitTick>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d002      	beq.n	8000be6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000be0:	2301      	movs	r3, #1
 8000be2:	71fb      	strb	r3, [r7, #7]
 8000be4:	e001      	b.n	8000bea <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000be6:	f7ff fe4b 	bl	8000880 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bea:	79fb      	ldrb	r3, [r7, #7]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c04:	4b17      	ldr	r3, [pc, #92]	@ (8000c64 <HAL_InitTick+0x6c>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d023      	beq.n	8000c54 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c0c:	4b16      	ldr	r3, [pc, #88]	@ (8000c68 <HAL_InitTick+0x70>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b14      	ldr	r3, [pc, #80]	@ (8000c64 <HAL_InitTick+0x6c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c22:	4618      	mov	r0, r3
 8000c24:	f000 f96d 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d10f      	bne.n	8000c4e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d809      	bhi.n	8000c48 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c34:	2200      	movs	r2, #0
 8000c36:	6879      	ldr	r1, [r7, #4]
 8000c38:	f04f 30ff 	mov.w	r0, #4294967295
 8000c3c:	f000 f937 	bl	8000eae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c40:	4a0a      	ldr	r2, [pc, #40]	@ (8000c6c <HAL_InitTick+0x74>)
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6013      	str	r3, [r2, #0]
 8000c46:	e007      	b.n	8000c58 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c48:	2301      	movs	r3, #1
 8000c4a:	73fb      	strb	r3, [r7, #15]
 8000c4c:	e004      	b.n	8000c58 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
 8000c52:	e001      	b.n	8000c58 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c54:	2301      	movs	r3, #1
 8000c56:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000014 	.word	0x20000014
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	20000010 	.word	0x20000010

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000014 	.word	0x20000014
 8000c94:	200001bc 	.word	0x200001bc

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	200001bc 	.word	0x200001bc

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000014 	.word	0x20000014

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff29 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff3e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff8e 	bl	8000dec <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5d 	bl	8000d98 <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff31 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d101      	bne.n	8000f2e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	e098      	b.n	8001060 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	4b4d      	ldr	r3, [pc, #308]	@ (800106c <HAL_DMA_Init+0x150>)
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d80f      	bhi.n	8000f5a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	461a      	mov	r2, r3
 8000f40:	4b4b      	ldr	r3, [pc, #300]	@ (8001070 <HAL_DMA_Init+0x154>)
 8000f42:	4413      	add	r3, r2
 8000f44:	4a4b      	ldr	r2, [pc, #300]	@ (8001074 <HAL_DMA_Init+0x158>)
 8000f46:	fba2 2303 	umull	r2, r3, r2, r3
 8000f4a:	091b      	lsrs	r3, r3, #4
 8000f4c:	009a      	lsls	r2, r3, #2
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a48      	ldr	r2, [pc, #288]	@ (8001078 <HAL_DMA_Init+0x15c>)
 8000f56:	641a      	str	r2, [r3, #64]	@ 0x40
 8000f58:	e00e      	b.n	8000f78 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	4b46      	ldr	r3, [pc, #280]	@ (800107c <HAL_DMA_Init+0x160>)
 8000f62:	4413      	add	r3, r2
 8000f64:	4a43      	ldr	r2, [pc, #268]	@ (8001074 <HAL_DMA_Init+0x158>)
 8000f66:	fba2 2303 	umull	r2, r3, r2, r3
 8000f6a:	091b      	lsrs	r3, r3, #4
 8000f6c:	009a      	lsls	r2, r3, #2
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a42      	ldr	r2, [pc, #264]	@ (8001080 <HAL_DMA_Init+0x164>)
 8000f76:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8000f8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8000f92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000f9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000fa8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	699b      	ldr	r3, [r3, #24]
 8000fae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000fb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a1b      	ldr	r3, [r3, #32]
 8000fba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000fbc:	68fa      	ldr	r2, [r7, #12]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68fa      	ldr	r2, [r7, #12]
 8000fc8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8000fd2:	d039      	beq.n	8001048 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd8:	4a27      	ldr	r2, [pc, #156]	@ (8001078 <HAL_DMA_Init+0x15c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d11a      	bne.n	8001014 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000fde:	4b29      	ldr	r3, [pc, #164]	@ (8001084 <HAL_DMA_Init+0x168>)
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	f003 031c 	and.w	r3, r3, #28
 8000fea:	210f      	movs	r1, #15
 8000fec:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	4924      	ldr	r1, [pc, #144]	@ (8001084 <HAL_DMA_Init+0x168>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000ff8:	4b22      	ldr	r3, [pc, #136]	@ (8001084 <HAL_DMA_Init+0x168>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6859      	ldr	r1, [r3, #4]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001004:	f003 031c 	and.w	r3, r3, #28
 8001008:	fa01 f303 	lsl.w	r3, r1, r3
 800100c:	491d      	ldr	r1, [pc, #116]	@ (8001084 <HAL_DMA_Init+0x168>)
 800100e:	4313      	orrs	r3, r2
 8001010:	600b      	str	r3, [r1, #0]
 8001012:	e019      	b.n	8001048 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001014:	4b1c      	ldr	r3, [pc, #112]	@ (8001088 <HAL_DMA_Init+0x16c>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101c:	f003 031c 	and.w	r3, r3, #28
 8001020:	210f      	movs	r1, #15
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	4917      	ldr	r1, [pc, #92]	@ (8001088 <HAL_DMA_Init+0x16c>)
 800102a:	4013      	ands	r3, r2
 800102c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800102e:	4b16      	ldr	r3, [pc, #88]	@ (8001088 <HAL_DMA_Init+0x16c>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6859      	ldr	r1, [r3, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103a:	f003 031c 	and.w	r3, r3, #28
 800103e:	fa01 f303 	lsl.w	r3, r1, r3
 8001042:	4911      	ldr	r1, [pc, #68]	@ (8001088 <HAL_DMA_Init+0x16c>)
 8001044:	4313      	orrs	r3, r2
 8001046:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2200      	movs	r2, #0
 800104c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2201      	movs	r2, #1
 8001052:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40020407 	.word	0x40020407
 8001070:	bffdfff8 	.word	0xbffdfff8
 8001074:	cccccccd 	.word	0xcccccccd
 8001078:	40020000 	.word	0x40020000
 800107c:	bffdfbf8 	.word	0xbffdfbf8
 8001080:	40020400 	.word	0x40020400
 8001084:	400200a8 	.word	0x400200a8
 8001088:	400204a8 	.word	0x400204a8

0800108c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b086      	sub	sp, #24
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d101      	bne.n	80010ac <HAL_DMA_Start_IT+0x20>
 80010a8:	2302      	movs	r3, #2
 80010aa:	e04b      	b.n	8001144 <HAL_DMA_Start_IT+0xb8>
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	2201      	movs	r2, #1
 80010b0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80010ba:	b2db      	uxtb	r3, r3
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d13a      	bne.n	8001136 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	2202      	movs	r2, #2
 80010c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	2200      	movs	r2, #0
 80010cc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0201 	bic.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	687a      	ldr	r2, [r7, #4]
 80010e2:	68b9      	ldr	r1, [r7, #8]
 80010e4:	68f8      	ldr	r0, [r7, #12]
 80010e6:	f000 f8e0 	bl	80012aa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d008      	beq.n	8001104 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f042 020e 	orr.w	r2, r2, #14
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	e00f      	b.n	8001124 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f022 0204 	bic.w	r2, r2, #4
 8001112:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f042 020a 	orr.w	r2, r2, #10
 8001122:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0201 	orr.w	r2, r2, #1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e005      	b.n	8001142 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800113e:	2302      	movs	r3, #2
 8001140:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001142:	7dfb      	ldrb	r3, [r7, #23]
}
 8001144:	4618      	mov	r0, r3
 8001146:	3718      	adds	r7, #24
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b084      	sub	sp, #16
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001168:	f003 031c 	and.w	r3, r3, #28
 800116c:	2204      	movs	r2, #4
 800116e:	409a      	lsls	r2, r3
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	4013      	ands	r3, r2
 8001174:	2b00      	cmp	r3, #0
 8001176:	d026      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x7a>
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	d021      	beq.n	80011c6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	2b00      	cmp	r3, #0
 800118e:	d107      	bne.n	80011a0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 0204 	bic.w	r2, r2, #4
 800119e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011a4:	f003 021c 	and.w	r2, r3, #28
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ac:	2104      	movs	r1, #4
 80011ae:	fa01 f202 	lsl.w	r2, r1, r2
 80011b2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d071      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80011c4:	e06c      	b.n	80012a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ca:	f003 031c 	and.w	r3, r3, #28
 80011ce:	2202      	movs	r2, #2
 80011d0:	409a      	lsls	r2, r3
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	4013      	ands	r3, r2
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d02e      	beq.n	8001238 <HAL_DMA_IRQHandler+0xec>
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f003 0302 	and.w	r3, r3, #2
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d029      	beq.n	8001238 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0320 	and.w	r3, r3, #32
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10b      	bne.n	800120a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 020a 	bic.w	r2, r2, #10
 8001200:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2201      	movs	r2, #1
 8001206:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120e:	f003 021c 	and.w	r2, r3, #28
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	2102      	movs	r1, #2
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2200      	movs	r2, #0
 8001222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800122a:	2b00      	cmp	r3, #0
 800122c:	d038      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001236:	e033      	b.n	80012a0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800123c:	f003 031c 	and.w	r3, r3, #28
 8001240:	2208      	movs	r2, #8
 8001242:	409a      	lsls	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	4013      	ands	r3, r2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d02a      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x156>
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d025      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f022 020e 	bic.w	r2, r2, #14
 8001264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800126a:	f003 021c 	and.w	r2, r3, #28
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	2101      	movs	r1, #1
 8001274:	fa01 f202 	lsl.w	r2, r1, r2
 8001278:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2201      	movs	r2, #1
 800127e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800129c:	6878      	ldr	r0, [r7, #4]
 800129e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
}
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012aa:	b480      	push	{r7}
 80012ac:	b085      	sub	sp, #20
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	60f8      	str	r0, [r7, #12]
 80012b2:	60b9      	str	r1, [r7, #8]
 80012b4:	607a      	str	r2, [r7, #4]
 80012b6:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012bc:	f003 021c 	and.w	r2, r3, #28
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012c4:	2101      	movs	r1, #1
 80012c6:	fa01 f202 	lsl.w	r2, r1, r2
 80012ca:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	683a      	ldr	r2, [r7, #0]
 80012d2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	2b10      	cmp	r3, #16
 80012da:	d108      	bne.n	80012ee <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80012ec:	e007      	b.n	80012fe <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	60da      	str	r2, [r3, #12]
}
 80012fe:	bf00      	nop
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
	...

0800130c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800130c:	b480      	push	{r7}
 800130e:	b087      	sub	sp, #28
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001316:	2300      	movs	r3, #0
 8001318:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131a:	e17f      	b.n	800161c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	2101      	movs	r1, #1
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	fa01 f303 	lsl.w	r3, r1, r3
 8001328:	4013      	ands	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 8171 	beq.w	8001616 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	2b01      	cmp	r3, #1
 800133e:	d005      	beq.n	800134c <HAL_GPIO_Init+0x40>
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b02      	cmp	r3, #2
 800134a:	d130      	bne.n	80013ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001352:	697b      	ldr	r3, [r7, #20]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4013      	ands	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	68da      	ldr	r2, [r3, #12]
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001382:	2201      	movs	r2, #1
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa02 f303 	lsl.w	r3, r2, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4013      	ands	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	091b      	lsrs	r3, r3, #4
 8001398:	f003 0201 	and.w	r2, r3, #1
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	2b03      	cmp	r3, #3
 80013b8:	d118      	bne.n	80013ec <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80013c0:	2201      	movs	r2, #1
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	08db      	lsrs	r3, r3, #3
 80013d6:	f003 0201 	and.w	r2, r3, #1
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f003 0303 	and.w	r3, r3, #3
 80013f4:	2b03      	cmp	r3, #3
 80013f6:	d017      	beq.n	8001428 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013fe:	697b      	ldr	r3, [r7, #20]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	2203      	movs	r2, #3
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	43db      	mvns	r3, r3
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	4013      	ands	r3, r2
 800140e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4313      	orrs	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	f003 0303 	and.w	r3, r3, #3
 8001430:	2b02      	cmp	r3, #2
 8001432:	d123      	bne.n	800147c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	08da      	lsrs	r2, r3, #3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	3208      	adds	r2, #8
 800143c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001440:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	f003 0307 	and.w	r3, r3, #7
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	220f      	movs	r2, #15
 800144c:	fa02 f303 	lsl.w	r3, r2, r3
 8001450:	43db      	mvns	r3, r3
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	4013      	ands	r3, r2
 8001456:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	691a      	ldr	r2, [r3, #16]
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	f003 0307 	and.w	r3, r3, #7
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	4313      	orrs	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	6939      	ldr	r1, [r7, #16]
 8001478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	2203      	movs	r2, #3
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43db      	mvns	r3, r3
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	4013      	ands	r3, r2
 8001492:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f003 0203 	and.w	r2, r3, #3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	005b      	lsls	r3, r3, #1
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	685b      	ldr	r3, [r3, #4]
 80014b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	f000 80ac 	beq.w	8001616 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014be:	4b5f      	ldr	r3, [pc, #380]	@ (800163c <HAL_GPIO_Init+0x330>)
 80014c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014c2:	4a5e      	ldr	r2, [pc, #376]	@ (800163c <HAL_GPIO_Init+0x330>)
 80014c4:	f043 0301 	orr.w	r3, r3, #1
 80014c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80014ca:	4b5c      	ldr	r3, [pc, #368]	@ (800163c <HAL_GPIO_Init+0x330>)
 80014cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014d6:	4a5a      	ldr	r2, [pc, #360]	@ (8001640 <HAL_GPIO_Init+0x334>)
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	3302      	adds	r3, #2
 80014de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	220f      	movs	r2, #15
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001500:	d025      	beq.n	800154e <HAL_GPIO_Init+0x242>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4f      	ldr	r2, [pc, #316]	@ (8001644 <HAL_GPIO_Init+0x338>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d01f      	beq.n	800154a <HAL_GPIO_Init+0x23e>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4e      	ldr	r2, [pc, #312]	@ (8001648 <HAL_GPIO_Init+0x33c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d019      	beq.n	8001546 <HAL_GPIO_Init+0x23a>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a4d      	ldr	r2, [pc, #308]	@ (800164c <HAL_GPIO_Init+0x340>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d013      	beq.n	8001542 <HAL_GPIO_Init+0x236>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	4a4c      	ldr	r2, [pc, #304]	@ (8001650 <HAL_GPIO_Init+0x344>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d00d      	beq.n	800153e <HAL_GPIO_Init+0x232>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a4b      	ldr	r2, [pc, #300]	@ (8001654 <HAL_GPIO_Init+0x348>)
 8001526:	4293      	cmp	r3, r2
 8001528:	d007      	beq.n	800153a <HAL_GPIO_Init+0x22e>
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	4a4a      	ldr	r2, [pc, #296]	@ (8001658 <HAL_GPIO_Init+0x34c>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d101      	bne.n	8001536 <HAL_GPIO_Init+0x22a>
 8001532:	2306      	movs	r3, #6
 8001534:	e00c      	b.n	8001550 <HAL_GPIO_Init+0x244>
 8001536:	2307      	movs	r3, #7
 8001538:	e00a      	b.n	8001550 <HAL_GPIO_Init+0x244>
 800153a:	2305      	movs	r3, #5
 800153c:	e008      	b.n	8001550 <HAL_GPIO_Init+0x244>
 800153e:	2304      	movs	r3, #4
 8001540:	e006      	b.n	8001550 <HAL_GPIO_Init+0x244>
 8001542:	2303      	movs	r3, #3
 8001544:	e004      	b.n	8001550 <HAL_GPIO_Init+0x244>
 8001546:	2302      	movs	r3, #2
 8001548:	e002      	b.n	8001550 <HAL_GPIO_Init+0x244>
 800154a:	2301      	movs	r3, #1
 800154c:	e000      	b.n	8001550 <HAL_GPIO_Init+0x244>
 800154e:	2300      	movs	r3, #0
 8001550:	697a      	ldr	r2, [r7, #20]
 8001552:	f002 0203 	and.w	r2, r2, #3
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	4093      	lsls	r3, r2
 800155a:	693a      	ldr	r2, [r7, #16]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001560:	4937      	ldr	r1, [pc, #220]	@ (8001640 <HAL_GPIO_Init+0x334>)
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	3302      	adds	r3, #2
 8001568:	693a      	ldr	r2, [r7, #16]
 800156a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800156e:	4b3b      	ldr	r3, [pc, #236]	@ (800165c <HAL_GPIO_Init+0x350>)
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	43db      	mvns	r3, r3
 8001578:	693a      	ldr	r2, [r7, #16]
 800157a:	4013      	ands	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d003      	beq.n	8001592 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	4313      	orrs	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001592:	4a32      	ldr	r2, [pc, #200]	@ (800165c <HAL_GPIO_Init+0x350>)
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001598:	4b30      	ldr	r3, [pc, #192]	@ (800165c <HAL_GPIO_Init+0x350>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015bc:	4a27      	ldr	r2, [pc, #156]	@ (800165c <HAL_GPIO_Init+0x350>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015c2:	4b26      	ldr	r3, [pc, #152]	@ (800165c <HAL_GPIO_Init+0x350>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e6:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <HAL_GPIO_Init+0x350>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015ec:	4b1b      	ldr	r3, [pc, #108]	@ (800165c <HAL_GPIO_Init+0x350>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001610:	4a12      	ldr	r2, [pc, #72]	@ (800165c <HAL_GPIO_Init+0x350>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	3301      	adds	r3, #1
 800161a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	f47f ae78 	bne.w	800131c <HAL_GPIO_Init+0x10>
  }
}
 800162c:	bf00      	nop
 800162e:	bf00      	nop
 8001630:	371c      	adds	r7, #28
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40021000 	.word	0x40021000
 8001640:	40010000 	.word	0x40010000
 8001644:	48000400 	.word	0x48000400
 8001648:	48000800 	.word	0x48000800
 800164c:	48000c00 	.word	0x48000c00
 8001650:	48001000 	.word	0x48001000
 8001654:	48001400 	.word	0x48001400
 8001658:	48001800 	.word	0x48001800
 800165c:	40010400 	.word	0x40010400

08001660 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	460b      	mov	r3, r1
 800166a:	807b      	strh	r3, [r7, #2]
 800166c:	4613      	mov	r3, r2
 800166e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001670:	787b      	ldrb	r3, [r7, #1]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d003      	beq.n	800167e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800167c:	e002      	b.n	8001684 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001694:	4b04      	ldr	r3, [pc, #16]	@ (80016a8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	40007000 	.word	0x40007000

080016ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b085      	sub	sp, #20
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016ba:	d130      	bne.n	800171e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016bc:	4b23      	ldr	r3, [pc, #140]	@ (800174c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80016c8:	d038      	beq.n	800173c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016ca:	4b20      	ldr	r3, [pc, #128]	@ (800174c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80016d2:	4a1e      	ldr	r2, [pc, #120]	@ (800174c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016d4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016d8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016da:	4b1d      	ldr	r3, [pc, #116]	@ (8001750 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2232      	movs	r2, #50	@ 0x32
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
 80016e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001754 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016e6:	fba2 2303 	umull	r2, r3, r2, r3
 80016ea:	0c9b      	lsrs	r3, r3, #18
 80016ec:	3301      	adds	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f0:	e002      	b.n	80016f8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f8:	4b14      	ldr	r3, [pc, #80]	@ (800174c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016fa:	695b      	ldr	r3, [r3, #20]
 80016fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001700:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001704:	d102      	bne.n	800170c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d1f2      	bne.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800170c:	4b0f      	ldr	r3, [pc, #60]	@ (800174c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001718:	d110      	bne.n	800173c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e00f      	b.n	800173e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800171e:	4b0b      	ldr	r3, [pc, #44]	@ (800174c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800172a:	d007      	beq.n	800173c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800172c:	4b07      	ldr	r3, [pc, #28]	@ (800174c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001734:	4a05      	ldr	r2, [pc, #20]	@ (800174c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001736:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800173a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	3714      	adds	r7, #20
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	40007000 	.word	0x40007000
 8001750:	2000000c 	.word	0x2000000c
 8001754:	431bde83 	.word	0x431bde83

08001758 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b088      	sub	sp, #32
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d101      	bne.n	800176a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e3ca      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800176a:	4b97      	ldr	r3, [pc, #604]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 800176c:	689b      	ldr	r3, [r3, #8]
 800176e:	f003 030c 	and.w	r3, r3, #12
 8001772:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001774:	4b94      	ldr	r3, [pc, #592]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0310 	and.w	r3, r3, #16
 8001786:	2b00      	cmp	r3, #0
 8001788:	f000 80e4 	beq.w	8001954 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <HAL_RCC_OscConfig+0x4a>
 8001792:	69bb      	ldr	r3, [r7, #24]
 8001794:	2b0c      	cmp	r3, #12
 8001796:	f040 808b 	bne.w	80018b0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	2b01      	cmp	r3, #1
 800179e:	f040 8087 	bne.w	80018b0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017a2:	4b89      	ldr	r3, [pc, #548]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d005      	beq.n	80017ba <HAL_RCC_OscConfig+0x62>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	699b      	ldr	r3, [r3, #24]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d101      	bne.n	80017ba <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80017b6:	2301      	movs	r3, #1
 80017b8:	e3a2      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6a1a      	ldr	r2, [r3, #32]
 80017be:	4b82      	ldr	r3, [pc, #520]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d004      	beq.n	80017d4 <HAL_RCC_OscConfig+0x7c>
 80017ca:	4b7f      	ldr	r3, [pc, #508]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017d2:	e005      	b.n	80017e0 <HAL_RCC_OscConfig+0x88>
 80017d4:	4b7c      	ldr	r3, [pc, #496]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017da:	091b      	lsrs	r3, r3, #4
 80017dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d223      	bcs.n	800182c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6a1b      	ldr	r3, [r3, #32]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f000 fd55 	bl	8002298 <RCC_SetFlashLatencyFromMSIRange>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e383      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f8:	4b73      	ldr	r3, [pc, #460]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a72      	ldr	r2, [pc, #456]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80017fe:	f043 0308 	orr.w	r3, r3, #8
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b70      	ldr	r3, [pc, #448]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6a1b      	ldr	r3, [r3, #32]
 8001810:	496d      	ldr	r1, [pc, #436]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001812:	4313      	orrs	r3, r2
 8001814:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001816:	4b6c      	ldr	r3, [pc, #432]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	021b      	lsls	r3, r3, #8
 8001824:	4968      	ldr	r1, [pc, #416]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001826:	4313      	orrs	r3, r2
 8001828:	604b      	str	r3, [r1, #4]
 800182a:	e025      	b.n	8001878 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800182c:	4b66      	ldr	r3, [pc, #408]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a65      	ldr	r2, [pc, #404]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6013      	str	r3, [r2, #0]
 8001838:	4b63      	ldr	r3, [pc, #396]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a1b      	ldr	r3, [r3, #32]
 8001844:	4960      	ldr	r1, [pc, #384]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800184a:	4b5f      	ldr	r3, [pc, #380]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	021b      	lsls	r3, r3, #8
 8001858:	495b      	ldr	r1, [pc, #364]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800185e:	69bb      	ldr	r3, [r7, #24]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d109      	bne.n	8001878 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	4618      	mov	r0, r3
 800186a:	f000 fd15 	bl	8002298 <RCC_SetFlashLatencyFromMSIRange>
 800186e:	4603      	mov	r3, r0
 8001870:	2b00      	cmp	r3, #0
 8001872:	d001      	beq.n	8001878 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001874:	2301      	movs	r3, #1
 8001876:	e343      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001878:	f000 fc4a 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 800187c:	4602      	mov	r2, r0
 800187e:	4b52      	ldr	r3, [pc, #328]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	091b      	lsrs	r3, r3, #4
 8001884:	f003 030f 	and.w	r3, r3, #15
 8001888:	4950      	ldr	r1, [pc, #320]	@ (80019cc <HAL_RCC_OscConfig+0x274>)
 800188a:	5ccb      	ldrb	r3, [r1, r3]
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	fa22 f303 	lsr.w	r3, r2, r3
 8001894:	4a4e      	ldr	r2, [pc, #312]	@ (80019d0 <HAL_RCC_OscConfig+0x278>)
 8001896:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001898:	4b4e      	ldr	r3, [pc, #312]	@ (80019d4 <HAL_RCC_OscConfig+0x27c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff f9ab 	bl	8000bf8 <HAL_InitTick>
 80018a2:	4603      	mov	r3, r0
 80018a4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d052      	beq.n	8001952 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	e327      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d032      	beq.n	800191e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b8:	4b43      	ldr	r3, [pc, #268]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a42      	ldr	r2, [pc, #264]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018be:	f043 0301 	orr.w	r3, r3, #1
 80018c2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018c4:	f7ff f9e8 	bl	8000c98 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ca:	e008      	b.n	80018de <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018cc:	f7ff f9e4 	bl	8000c98 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e310      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018de:	4b3a      	ldr	r3, [pc, #232]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d0f0      	beq.n	80018cc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018ea:	4b37      	ldr	r3, [pc, #220]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a36      	ldr	r2, [pc, #216]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6013      	str	r3, [r2, #0]
 80018f6:	4b34      	ldr	r3, [pc, #208]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a1b      	ldr	r3, [r3, #32]
 8001902:	4931      	ldr	r1, [pc, #196]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001904:	4313      	orrs	r3, r2
 8001906:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001908:	4b2f      	ldr	r3, [pc, #188]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	69db      	ldr	r3, [r3, #28]
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	492c      	ldr	r1, [pc, #176]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001918:	4313      	orrs	r3, r2
 800191a:	604b      	str	r3, [r1, #4]
 800191c:	e01a      	b.n	8001954 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800191e:	4b2a      	ldr	r3, [pc, #168]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a29      	ldr	r2, [pc, #164]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001924:	f023 0301 	bic.w	r3, r3, #1
 8001928:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800192a:	f7ff f9b5 	bl	8000c98 <HAL_GetTick>
 800192e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001930:	e008      	b.n	8001944 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001932:	f7ff f9b1 	bl	8000c98 <HAL_GetTick>
 8001936:	4602      	mov	r2, r0
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	1ad3      	subs	r3, r2, r3
 800193c:	2b02      	cmp	r3, #2
 800193e:	d901      	bls.n	8001944 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001940:	2303      	movs	r3, #3
 8001942:	e2dd      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001944:	4b20      	ldr	r3, [pc, #128]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1f0      	bne.n	8001932 <HAL_RCC_OscConfig+0x1da>
 8001950:	e000      	b.n	8001954 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001952:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0301 	and.w	r3, r3, #1
 800195c:	2b00      	cmp	r3, #0
 800195e:	d074      	beq.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b08      	cmp	r3, #8
 8001964:	d005      	beq.n	8001972 <HAL_RCC_OscConfig+0x21a>
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	2b0c      	cmp	r3, #12
 800196a:	d10e      	bne.n	800198a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	2b03      	cmp	r3, #3
 8001970:	d10b      	bne.n	800198a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001972:	4b15      	ldr	r3, [pc, #84]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d064      	beq.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d160      	bne.n	8001a48 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e2ba      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001992:	d106      	bne.n	80019a2 <HAL_RCC_OscConfig+0x24a>
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0b      	ldr	r2, [pc, #44]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 800199a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	e026      	b.n	80019f0 <HAL_RCC_OscConfig+0x298>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80019aa:	d115      	bne.n	80019d8 <HAL_RCC_OscConfig+0x280>
 80019ac:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a05      	ldr	r2, [pc, #20]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80019b2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a02      	ldr	r2, [pc, #8]	@ (80019c8 <HAL_RCC_OscConfig+0x270>)
 80019be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019c2:	6013      	str	r3, [r2, #0]
 80019c4:	e014      	b.n	80019f0 <HAL_RCC_OscConfig+0x298>
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000
 80019cc:	08004268 	.word	0x08004268
 80019d0:	2000000c 	.word	0x2000000c
 80019d4:	20000010 	.word	0x20000010
 80019d8:	4ba0      	ldr	r3, [pc, #640]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a9f      	ldr	r2, [pc, #636]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 80019de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019e2:	6013      	str	r3, [r2, #0]
 80019e4:	4b9d      	ldr	r3, [pc, #628]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a9c      	ldr	r2, [pc, #624]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 80019ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d013      	beq.n	8001a20 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f8:	f7ff f94e 	bl	8000c98 <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a00:	f7ff f94a 	bl	8000c98 <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b64      	cmp	r3, #100	@ 0x64
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e276      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a12:	4b92      	ldr	r3, [pc, #584]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f0      	beq.n	8001a00 <HAL_RCC_OscConfig+0x2a8>
 8001a1e:	e014      	b.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff f93a 	bl	8000c98 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff f936 	bl	8000c98 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	@ 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e262      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a3a:	4b88      	ldr	r3, [pc, #544]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x2d0>
 8001a46:	e000      	b.n	8001a4a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d060      	beq.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a56:	69bb      	ldr	r3, [r7, #24]
 8001a58:	2b04      	cmp	r3, #4
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_OscConfig+0x310>
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	2b0c      	cmp	r3, #12
 8001a60:	d119      	bne.n	8001a96 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b02      	cmp	r3, #2
 8001a66:	d116      	bne.n	8001a96 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a68:	4b7c      	ldr	r3, [pc, #496]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d005      	beq.n	8001a80 <HAL_RCC_OscConfig+0x328>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e23f      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a80:	4b76      	ldr	r3, [pc, #472]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	061b      	lsls	r3, r3, #24
 8001a8e:	4973      	ldr	r1, [pc, #460]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001a90:	4313      	orrs	r3, r2
 8001a92:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a94:	e040      	b.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d023      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001aa4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aaa:	f7ff f8f5 	bl	8000c98 <HAL_GetTick>
 8001aae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ab0:	e008      	b.n	8001ac4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab2:	f7ff f8f1 	bl	8000c98 <HAL_GetTick>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	2b02      	cmp	r3, #2
 8001abe:	d901      	bls.n	8001ac4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ac0:	2303      	movs	r3, #3
 8001ac2:	e21d      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ac4:	4b65      	ldr	r3, [pc, #404]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0f0      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ad0:	4b62      	ldr	r3, [pc, #392]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	691b      	ldr	r3, [r3, #16]
 8001adc:	061b      	lsls	r3, r3, #24
 8001ade:	495f      	ldr	r1, [pc, #380]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
 8001ae4:	e018      	b.n	8001b18 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a5c      	ldr	r2, [pc, #368]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001aec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af2:	f7ff f8d1 	bl	8000c98 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afa:	f7ff f8cd 	bl	8000c98 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e1f9      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b0c:	4b53      	ldr	r3, [pc, #332]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0308 	and.w	r3, r3, #8
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d03c      	beq.n	8001b9e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	695b      	ldr	r3, [r3, #20]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d01c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b32:	4a4a      	ldr	r2, [pc, #296]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff f8ac 	bl	8000c98 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b44:	f7ff f8a8 	bl	8000c98 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e1d4      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b56:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b58:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b5c:	f003 0302 	and.w	r3, r3, #2
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d0ef      	beq.n	8001b44 <HAL_RCC_OscConfig+0x3ec>
 8001b64:	e01b      	b.n	8001b9e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b66:	4b3d      	ldr	r3, [pc, #244]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b68:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b6c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b6e:	f023 0301 	bic.w	r3, r3, #1
 8001b72:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff f88f 	bl	8000c98 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7e:	f7ff f88b 	bl	8000c98 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e1b7      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b90:	4b32      	ldr	r3, [pc, #200]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001b92:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d1ef      	bne.n	8001b7e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 0304 	and.w	r3, r3, #4
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80a6 	beq.w	8001cf8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d10d      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bbc:	4b27      	ldr	r3, [pc, #156]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bc0:	4a26      	ldr	r2, [pc, #152]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001bc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001bc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001bc8:	4b24      	ldr	r3, [pc, #144]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001bca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bd0:	60bb      	str	r3, [r7, #8]
 8001bd2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd8:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <HAL_RCC_OscConfig+0x508>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d118      	bne.n	8001c16 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001be4:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <HAL_RCC_OscConfig+0x508>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1d      	ldr	r2, [pc, #116]	@ (8001c60 <HAL_RCC_OscConfig+0x508>)
 8001bea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bf0:	f7ff f852 	bl	8000c98 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf8:	f7ff f84e 	bl	8000c98 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b02      	cmp	r3, #2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e17a      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c0a:	4b15      	ldr	r3, [pc, #84]	@ (8001c60 <HAL_RCC_OscConfig+0x508>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b01      	cmp	r3, #1
 8001c1c:	d108      	bne.n	8001c30 <HAL_RCC_OscConfig+0x4d8>
 8001c1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c24:	4a0d      	ldr	r2, [pc, #52]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c26:	f043 0301 	orr.w	r3, r3, #1
 8001c2a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c2e:	e029      	b.n	8001c84 <HAL_RCC_OscConfig+0x52c>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b05      	cmp	r3, #5
 8001c36:	d115      	bne.n	8001c64 <HAL_RCC_OscConfig+0x50c>
 8001c38:	4b08      	ldr	r3, [pc, #32]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c3e:	4a07      	ldr	r2, [pc, #28]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c40:	f043 0304 	orr.w	r3, r3, #4
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c48:	4b04      	ldr	r3, [pc, #16]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c4e:	4a03      	ldr	r2, [pc, #12]	@ (8001c5c <HAL_RCC_OscConfig+0x504>)
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c58:	e014      	b.n	8001c84 <HAL_RCC_OscConfig+0x52c>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	40007000 	.word	0x40007000
 8001c64:	4b9c      	ldr	r3, [pc, #624]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c6a:	4a9b      	ldr	r2, [pc, #620]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001c6c:	f023 0301 	bic.w	r3, r3, #1
 8001c70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001c74:	4b98      	ldr	r3, [pc, #608]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c7a:	4a97      	ldr	r2, [pc, #604]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001c7c:	f023 0304 	bic.w	r3, r3, #4
 8001c80:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d016      	beq.n	8001cba <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8c:	f7ff f804 	bl	8000c98 <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c92:	e00a      	b.n	8001caa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c94:	f7ff f800 	bl	8000c98 <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e12a      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001caa:	4b8b      	ldr	r3, [pc, #556]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0ed      	beq.n	8001c94 <HAL_RCC_OscConfig+0x53c>
 8001cb8:	e015      	b.n	8001ce6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cba:	f7fe ffed 	bl	8000c98 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cc0:	e00a      	b.n	8001cd8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc2:	f7fe ffe9 	bl	8000c98 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d901      	bls.n	8001cd8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e113      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd8:	4b7f      	ldr	r3, [pc, #508]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001cda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d1ed      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ce6:	7ffb      	ldrb	r3, [r7, #31]
 8001ce8:	2b01      	cmp	r3, #1
 8001cea:	d105      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cec:	4b7a      	ldr	r3, [pc, #488]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cf0:	4a79      	ldr	r2, [pc, #484]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001cf2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001cf6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f000 80fe 	beq.w	8001efe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	f040 80d0 	bne.w	8001eac <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d0c:	4b72      	ldr	r3, [pc, #456]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001d0e:	68db      	ldr	r3, [r3, #12]
 8001d10:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	f003 0203 	and.w	r2, r3, #3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d130      	bne.n	8001d82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	3b01      	subs	r3, #1
 8001d2c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d127      	bne.n	8001d82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d3c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d11f      	bne.n	8001d82 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d4c:	2a07      	cmp	r2, #7
 8001d4e:	bf14      	ite	ne
 8001d50:	2201      	movne	r2, #1
 8001d52:	2200      	moveq	r2, #0
 8001d54:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d113      	bne.n	8001d82 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	3b01      	subs	r3, #1
 8001d68:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d109      	bne.n	8001d82 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d78:	085b      	lsrs	r3, r3, #1
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d06e      	beq.n	8001e60 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d82:	69bb      	ldr	r3, [r7, #24]
 8001d84:	2b0c      	cmp	r3, #12
 8001d86:	d069      	beq.n	8001e5c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d88:	4b53      	ldr	r3, [pc, #332]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d94:	4b50      	ldr	r3, [pc, #320]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e0ad      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001da4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a4b      	ldr	r2, [pc, #300]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001daa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dae:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db0:	f7fe ff72 	bl	8000c98 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7fe ff6e 	bl	8000c98 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e09a      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dca:	4b43      	ldr	r3, [pc, #268]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f0      	bne.n	8001db8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dd6:	4b40      	ldr	r3, [pc, #256]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001dd8:	68da      	ldr	r2, [r3, #12]
 8001dda:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <HAL_RCC_OscConfig+0x784>)
 8001ddc:	4013      	ands	r3, r2
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001de6:	3a01      	subs	r2, #1
 8001de8:	0112      	lsls	r2, r2, #4
 8001dea:	4311      	orrs	r1, r2
 8001dec:	687a      	ldr	r2, [r7, #4]
 8001dee:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001df0:	0212      	lsls	r2, r2, #8
 8001df2:	4311      	orrs	r1, r2
 8001df4:	687a      	ldr	r2, [r7, #4]
 8001df6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001df8:	0852      	lsrs	r2, r2, #1
 8001dfa:	3a01      	subs	r2, #1
 8001dfc:	0552      	lsls	r2, r2, #21
 8001dfe:	4311      	orrs	r1, r2
 8001e00:	687a      	ldr	r2, [r7, #4]
 8001e02:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e04:	0852      	lsrs	r2, r2, #1
 8001e06:	3a01      	subs	r2, #1
 8001e08:	0652      	lsls	r2, r2, #25
 8001e0a:	4311      	orrs	r1, r2
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001e10:	0912      	lsrs	r2, r2, #4
 8001e12:	0452      	lsls	r2, r2, #17
 8001e14:	430a      	orrs	r2, r1
 8001e16:	4930      	ldr	r1, [pc, #192]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e1c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a2d      	ldr	r2, [pc, #180]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e22:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e26:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e28:	4b2b      	ldr	r3, [pc, #172]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e32:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e34:	f7fe ff30 	bl	8000c98 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3c:	f7fe ff2c 	bl	8000c98 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e058      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e5a:	e050      	b.n	8001efe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e04f      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e60:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d148      	bne.n	8001efe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001e6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a19      	ldr	r2, [pc, #100]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e76:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e78:	4b17      	ldr	r3, [pc, #92]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	4a16      	ldr	r2, [pc, #88]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001e7e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e82:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e84:	f7fe ff08 	bl	8000c98 <HAL_GetTick>
 8001e88:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e8c:	f7fe ff04 	bl	8000c98 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d901      	bls.n	8001e9e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	e030      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d0f0      	beq.n	8001e8c <HAL_RCC_OscConfig+0x734>
 8001eaa:	e028      	b.n	8001efe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	2b0c      	cmp	r3, #12
 8001eb0:	d023      	beq.n	8001efa <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001eb2:	4b09      	ldr	r3, [pc, #36]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a08      	ldr	r2, [pc, #32]	@ (8001ed8 <HAL_RCC_OscConfig+0x780>)
 8001eb8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ebc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebe:	f7fe feeb 	bl	8000c98 <HAL_GetTick>
 8001ec2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ec4:	e00c      	b.n	8001ee0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ec6:	f7fe fee7 	bl	8000c98 <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d905      	bls.n	8001ee0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e013      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
 8001ed8:	40021000 	.word	0x40021000
 8001edc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ee0:	4b09      	ldr	r3, [pc, #36]	@ (8001f08 <HAL_RCC_OscConfig+0x7b0>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1ec      	bne.n	8001ec6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <HAL_RCC_OscConfig+0x7b0>)
 8001eee:	68da      	ldr	r2, [r3, #12]
 8001ef0:	4905      	ldr	r1, [pc, #20]	@ (8001f08 <HAL_RCC_OscConfig+0x7b0>)
 8001ef2:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <HAL_RCC_OscConfig+0x7b4>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60cb      	str	r3, [r1, #12]
 8001ef8:	e001      	b.n	8001efe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3720      	adds	r7, #32
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	feeefffc 	.word	0xfeeefffc

08001f10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0e7      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f24:	4b75      	ldr	r3, [pc, #468]	@ (80020fc <HAL_RCC_ClockConfig+0x1ec>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d910      	bls.n	8001f54 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f32:	4b72      	ldr	r3, [pc, #456]	@ (80020fc <HAL_RCC_ClockConfig+0x1ec>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 0207 	bic.w	r2, r3, #7
 8001f3a:	4970      	ldr	r1, [pc, #448]	@ (80020fc <HAL_RCC_ClockConfig+0x1ec>)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f42:	4b6e      	ldr	r3, [pc, #440]	@ (80020fc <HAL_RCC_ClockConfig+0x1ec>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0307 	and.w	r3, r3, #7
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d001      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0cf      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d010      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	4b66      	ldr	r3, [pc, #408]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d908      	bls.n	8001f82 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b63      	ldr	r3, [pc, #396]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4960      	ldr	r1, [pc, #384]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d04c      	beq.n	8002028 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b03      	cmp	r3, #3
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f96:	4b5a      	ldr	r3, [pc, #360]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d121      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e0a6      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fae:	4b54      	ldr	r3, [pc, #336]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d115      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e09a      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d107      	bne.n	8001fd6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001fc6:	4b4e      	ldr	r3, [pc, #312]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0302 	and.w	r3, r3, #2
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d109      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e08e      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fd6:	4b4a      	ldr	r3, [pc, #296]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d101      	bne.n	8001fe6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e086      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001fe6:	4b46      	ldr	r3, [pc, #280]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f023 0203 	bic.w	r2, r3, #3
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4943      	ldr	r1, [pc, #268]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ff8:	f7fe fe4e 	bl	8000c98 <HAL_GetTick>
 8001ffc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	e00a      	b.n	8002016 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002000:	f7fe fe4a 	bl	8000c98 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800200e:	4293      	cmp	r3, r2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e06e      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002016:	4b3a      	ldr	r3, [pc, #232]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f003 020c 	and.w	r2, r3, #12
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	429a      	cmp	r2, r3
 8002026:	d1eb      	bne.n	8002000 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0302 	and.w	r3, r3, #2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d010      	beq.n	8002056 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689a      	ldr	r2, [r3, #8]
 8002038:	4b31      	ldr	r3, [pc, #196]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002040:	429a      	cmp	r2, r3
 8002042:	d208      	bcs.n	8002056 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002044:	4b2e      	ldr	r3, [pc, #184]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	492b      	ldr	r1, [pc, #172]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8002052:	4313      	orrs	r3, r2
 8002054:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002056:	4b29      	ldr	r3, [pc, #164]	@ (80020fc <HAL_RCC_ClockConfig+0x1ec>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d210      	bcs.n	8002086 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002064:	4b25      	ldr	r3, [pc, #148]	@ (80020fc <HAL_RCC_ClockConfig+0x1ec>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 0207 	bic.w	r2, r3, #7
 800206c:	4923      	ldr	r1, [pc, #140]	@ (80020fc <HAL_RCC_ClockConfig+0x1ec>)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002074:	4b21      	ldr	r3, [pc, #132]	@ (80020fc <HAL_RCC_ClockConfig+0x1ec>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e036      	b.n	80020f4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d008      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002092:	4b1b      	ldr	r3, [pc, #108]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	4918      	ldr	r1, [pc, #96]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4910      	ldr	r1, [pc, #64]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80020c4:	f000 f824 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	091b      	lsrs	r3, r3, #4
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	490b      	ldr	r1, [pc, #44]	@ (8002104 <HAL_RCC_ClockConfig+0x1f4>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
 80020e0:	4a09      	ldr	r2, [pc, #36]	@ (8002108 <HAL_RCC_ClockConfig+0x1f8>)
 80020e2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <HAL_RCC_ClockConfig+0x1fc>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7fe fd85 	bl	8000bf8 <HAL_InitTick>
 80020ee:	4603      	mov	r3, r0
 80020f0:	72fb      	strb	r3, [r7, #11]

  return status;
 80020f2:	7afb      	ldrb	r3, [r7, #11]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3710      	adds	r7, #16
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40022000 	.word	0x40022000
 8002100:	40021000 	.word	0x40021000
 8002104:	08004268 	.word	0x08004268
 8002108:	2000000c 	.word	0x2000000c
 800210c:	20000010 	.word	0x20000010

08002110 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	@ 0x24
 8002114:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
 800211a:	2300      	movs	r3, #0
 800211c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211e:	4b3e      	ldr	r3, [pc, #248]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x108>)
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 030c 	and.w	r3, r3, #12
 8002126:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002128:	4b3b      	ldr	r3, [pc, #236]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x108>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x34>
 8002138:	693b      	ldr	r3, [r7, #16]
 800213a:	2b0c      	cmp	r3, #12
 800213c:	d121      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d11e      	bne.n	8002182 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002144:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x108>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002150:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x108>)
 8002152:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002156:	0a1b      	lsrs	r3, r3, #8
 8002158:	f003 030f 	and.w	r3, r3, #15
 800215c:	61fb      	str	r3, [r7, #28]
 800215e:	e005      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002160:	4b2d      	ldr	r3, [pc, #180]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x108>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	091b      	lsrs	r3, r3, #4
 8002166:	f003 030f 	and.w	r3, r3, #15
 800216a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800216c:	4a2b      	ldr	r2, [pc, #172]	@ (800221c <HAL_RCC_GetSysClockFreq+0x10c>)
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002174:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10d      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d102      	bne.n	800218e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002188:	4b25      	ldr	r3, [pc, #148]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x110>)
 800218a:	61bb      	str	r3, [r7, #24]
 800218c:	e004      	b.n	8002198 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800218e:	693b      	ldr	r3, [r7, #16]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d101      	bne.n	8002198 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002194:	4b23      	ldr	r3, [pc, #140]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x114>)
 8002196:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	2b0c      	cmp	r3, #12
 800219c:	d134      	bne.n	8002208 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800219e:	4b1e      	ldr	r3, [pc, #120]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x108>)
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	d003      	beq.n	80021b6 <HAL_RCC_GetSysClockFreq+0xa6>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	2b03      	cmp	r3, #3
 80021b2:	d003      	beq.n	80021bc <HAL_RCC_GetSysClockFreq+0xac>
 80021b4:	e005      	b.n	80021c2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002220 <HAL_RCC_GetSysClockFreq+0x110>)
 80021b8:	617b      	str	r3, [r7, #20]
      break;
 80021ba:	e005      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80021bc:	4b19      	ldr	r3, [pc, #100]	@ (8002224 <HAL_RCC_GetSysClockFreq+0x114>)
 80021be:	617b      	str	r3, [r7, #20]
      break;
 80021c0:	e002      	b.n	80021c8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	617b      	str	r3, [r7, #20]
      break;
 80021c6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	3301      	adds	r3, #1
 80021d4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021d6:	4b10      	ldr	r3, [pc, #64]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x108>)
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80021e0:	697a      	ldr	r2, [r7, #20]
 80021e2:	fb03 f202 	mul.w	r2, r3, r2
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021ec:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002218 <HAL_RCC_GetSysClockFreq+0x108>)
 80021f0:	68db      	ldr	r3, [r3, #12]
 80021f2:	0e5b      	lsrs	r3, r3, #25
 80021f4:	f003 0303 	and.w	r3, r3, #3
 80021f8:	3301      	adds	r3, #1
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	fbb2 f3f3 	udiv	r3, r2, r3
 8002206:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002208:	69bb      	ldr	r3, [r7, #24]
}
 800220a:	4618      	mov	r0, r3
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40021000 	.word	0x40021000
 800221c:	08004280 	.word	0x08004280
 8002220:	00f42400 	.word	0x00f42400
 8002224:	007a1200 	.word	0x007a1200

08002228 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800222c:	4b03      	ldr	r3, [pc, #12]	@ (800223c <HAL_RCC_GetHCLKFreq+0x14>)
 800222e:	681b      	ldr	r3, [r3, #0]
}
 8002230:	4618      	mov	r0, r3
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	2000000c 	.word	0x2000000c

08002240 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002244:	f7ff fff0 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002248:	4602      	mov	r2, r0
 800224a:	4b06      	ldr	r3, [pc, #24]	@ (8002264 <HAL_RCC_GetPCLK1Freq+0x24>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	0a1b      	lsrs	r3, r3, #8
 8002250:	f003 0307 	and.w	r3, r3, #7
 8002254:	4904      	ldr	r1, [pc, #16]	@ (8002268 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002256:	5ccb      	ldrb	r3, [r1, r3]
 8002258:	f003 031f 	and.w	r3, r3, #31
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002260:	4618      	mov	r0, r3
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	08004278 	.word	0x08004278

0800226c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002270:	f7ff ffda 	bl	8002228 <HAL_RCC_GetHCLKFreq>
 8002274:	4602      	mov	r2, r0
 8002276:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002278:	689b      	ldr	r3, [r3, #8]
 800227a:	0adb      	lsrs	r3, r3, #11
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	4904      	ldr	r1, [pc, #16]	@ (8002294 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002282:	5ccb      	ldrb	r3, [r1, r3]
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40021000 	.word	0x40021000
 8002294:	08004278 	.word	0x08004278

08002298 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80022a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d003      	beq.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80022b0:	f7ff f9ee 	bl	8001690 <HAL_PWREx_GetVoltageRange>
 80022b4:	6178      	str	r0, [r7, #20]
 80022b6:	e014      	b.n	80022e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80022b8:	4b25      	ldr	r3, [pc, #148]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022bc:	4a24      	ldr	r2, [pc, #144]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80022c4:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80022d0:	f7ff f9de 	bl	8001690 <HAL_PWREx_GetVoltageRange>
 80022d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80022d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	4a1d      	ldr	r2, [pc, #116]	@ (8002350 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80022dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80022e8:	d10b      	bne.n	8002302 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2b80      	cmp	r3, #128	@ 0x80
 80022ee:	d919      	bls.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2ba0      	cmp	r3, #160	@ 0xa0
 80022f4:	d902      	bls.n	80022fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022f6:	2302      	movs	r3, #2
 80022f8:	613b      	str	r3, [r7, #16]
 80022fa:	e013      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022fc:	2301      	movs	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]
 8002300:	e010      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b80      	cmp	r3, #128	@ 0x80
 8002306:	d902      	bls.n	800230e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002308:	2303      	movs	r3, #3
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	e00a      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b80      	cmp	r3, #128	@ 0x80
 8002312:	d102      	bne.n	800231a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002314:	2302      	movs	r3, #2
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	e004      	b.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2b70      	cmp	r3, #112	@ 0x70
 800231e:	d101      	bne.n	8002324 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002320:	2301      	movs	r3, #1
 8002322:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002324:	4b0b      	ldr	r3, [pc, #44]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f023 0207 	bic.w	r2, r3, #7
 800232c:	4909      	ldr	r1, [pc, #36]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002334:	4b07      	ldr	r3, [pc, #28]	@ (8002354 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	429a      	cmp	r2, r3
 8002340:	d001      	beq.n	8002346 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40021000 	.word	0x40021000
 8002354:	40022000 	.word	0x40022000

08002358 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002360:	2300      	movs	r3, #0
 8002362:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002364:	2300      	movs	r3, #0
 8002366:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002370:	2b00      	cmp	r3, #0
 8002372:	d041      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002378:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800237c:	d02a      	beq.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800237e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002382:	d824      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002384:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800238a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800238e:	d81e      	bhi.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002390:	2b00      	cmp	r3, #0
 8002392:	d00a      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002394:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002398:	d010      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800239a:	e018      	b.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800239c:	4b86      	ldr	r3, [pc, #536]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	4a85      	ldr	r2, [pc, #532]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023a8:	e015      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3304      	adds	r3, #4
 80023ae:	2100      	movs	r1, #0
 80023b0:	4618      	mov	r0, r3
 80023b2:	f000 fabb 	bl	800292c <RCCEx_PLLSAI1_Config>
 80023b6:	4603      	mov	r3, r0
 80023b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023ba:	e00c      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3320      	adds	r3, #32
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 fba6 	bl	8002b14 <RCCEx_PLLSAI2_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80023cc:	e003      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
 80023d0:	74fb      	strb	r3, [r7, #19]
      break;
 80023d2:	e000      	b.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80023d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10b      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023dc:	4b76      	ldr	r3, [pc, #472]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023ea:	4973      	ldr	r1, [pc, #460]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80023f2:	e001      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d041      	beq.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002408:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800240c:	d02a      	beq.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800240e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002412:	d824      	bhi.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002414:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002418:	d008      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800241a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800241e:	d81e      	bhi.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002424:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002428:	d010      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800242a:	e018      	b.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800242c:	4b62      	ldr	r3, [pc, #392]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	4a61      	ldr	r2, [pc, #388]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002436:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002438:	e015      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	3304      	adds	r3, #4
 800243e:	2100      	movs	r1, #0
 8002440:	4618      	mov	r0, r3
 8002442:	f000 fa73 	bl	800292c <RCCEx_PLLSAI1_Config>
 8002446:	4603      	mov	r3, r0
 8002448:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800244a:	e00c      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3320      	adds	r3, #32
 8002450:	2100      	movs	r1, #0
 8002452:	4618      	mov	r0, r3
 8002454:	f000 fb5e 	bl	8002b14 <RCCEx_PLLSAI2_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800245c:	e003      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	74fb      	strb	r3, [r7, #19]
      break;
 8002462:	e000      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002464:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002466:	7cfb      	ldrb	r3, [r7, #19]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10b      	bne.n	8002484 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800246c:	4b52      	ldr	r3, [pc, #328]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002472:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800247a:	494f      	ldr	r1, [pc, #316]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8002482:	e001      	b.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002484:	7cfb      	ldrb	r3, [r7, #19]
 8002486:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	f000 80a0 	beq.w	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002496:	2300      	movs	r3, #0
 8002498:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800249a:	4b47      	ldr	r3, [pc, #284]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d101      	bne.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80024a6:	2301      	movs	r3, #1
 80024a8:	e000      	b.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80024aa:	2300      	movs	r3, #0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d00d      	beq.n	80024cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024b0:	4b41      	ldr	r3, [pc, #260]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b4:	4a40      	ldr	r2, [pc, #256]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80024ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80024bc:	4b3e      	ldr	r3, [pc, #248]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024c4:	60bb      	str	r3, [r7, #8]
 80024c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024c8:	2301      	movs	r3, #1
 80024ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024cc:	4b3b      	ldr	r3, [pc, #236]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a3a      	ldr	r2, [pc, #232]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024d8:	f7fe fbde 	bl	8000c98 <HAL_GetTick>
 80024dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024de:	e009      	b.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024e0:	f7fe fbda 	bl	8000c98 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d902      	bls.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	74fb      	strb	r3, [r7, #19]
        break;
 80024f2:	e005      	b.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024f4:	4b31      	ldr	r3, [pc, #196]	@ (80025bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0ef      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d15c      	bne.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002506:	4b2c      	ldr	r3, [pc, #176]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800250c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002510:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01f      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	429a      	cmp	r2, r3
 8002522:	d019      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002524:	4b24      	ldr	r3, [pc, #144]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002526:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800252a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800252e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002530:	4b21      	ldr	r3, [pc, #132]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002536:	4a20      	ldr	r2, [pc, #128]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002538:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002540:	4b1d      	ldr	r3, [pc, #116]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002546:	4a1c      	ldr	r2, [pc, #112]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002548:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002550:	4a19      	ldr	r2, [pc, #100]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d016      	beq.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe fb99 	bl	8000c98 <HAL_GetTick>
 8002566:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002568:	e00b      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256a:	f7fe fb95 	bl	8000c98 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002578:	4293      	cmp	r3, r2
 800257a:	d902      	bls.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	74fb      	strb	r3, [r7, #19]
            break;
 8002580:	e006      	b.n	8002590 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002582:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002584:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d0ec      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d10c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002596:	4b08      	ldr	r3, [pc, #32]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800259c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80025a6:	4904      	ldr	r1, [pc, #16]	@ (80025b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80025ae:	e009      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025b0:	7cfb      	ldrb	r3, [r7, #19]
 80025b2:	74bb      	strb	r3, [r7, #18]
 80025b4:	e006      	b.n	80025c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025c0:	7cfb      	ldrb	r3, [r7, #19]
 80025c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025c4:	7c7b      	ldrb	r3, [r7, #17]
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d105      	bne.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025ca:	4b9e      	ldr	r3, [pc, #632]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ce:	4a9d      	ldr	r2, [pc, #628]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80025d4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025e2:	4b98      	ldr	r3, [pc, #608]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025e8:	f023 0203 	bic.w	r2, r3, #3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f0:	4994      	ldr	r1, [pc, #592]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002604:	4b8f      	ldr	r3, [pc, #572]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800260a:	f023 020c 	bic.w	r2, r3, #12
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002612:	498c      	ldr	r1, [pc, #560]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0304 	and.w	r3, r3, #4
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002626:	4b87      	ldr	r3, [pc, #540]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	4983      	ldr	r1, [pc, #524]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002648:	4b7e      	ldr	r3, [pc, #504]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800264e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002656:	497b      	ldr	r1, [pc, #492]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800266a:	4b76      	ldr	r3, [pc, #472]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002670:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002678:	4972      	ldr	r1, [pc, #456]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0320 	and.w	r3, r3, #32
 8002688:	2b00      	cmp	r3, #0
 800268a:	d00a      	beq.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800268c:	4b6d      	ldr	r3, [pc, #436]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002692:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800269a:	496a      	ldr	r1, [pc, #424]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00a      	beq.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026ae:	4b65      	ldr	r3, [pc, #404]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026bc:	4961      	ldr	r1, [pc, #388]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d00a      	beq.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80026d0:	4b5c      	ldr	r3, [pc, #368]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026d6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026de:	4959      	ldr	r1, [pc, #356]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d00a      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026f2:	4b54      	ldr	r3, [pc, #336]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026f8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002700:	4950      	ldr	r1, [pc, #320]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002702:	4313      	orrs	r3, r2
 8002704:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00a      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002714:	4b4b      	ldr	r3, [pc, #300]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800271a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002722:	4948      	ldr	r1, [pc, #288]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002736:	4b43      	ldr	r3, [pc, #268]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800273c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002744:	493f      	ldr	r1, [pc, #252]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002746:	4313      	orrs	r3, r2
 8002748:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d028      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002758:	4b3a      	ldr	r3, [pc, #232]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800275e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002766:	4937      	ldr	r1, [pc, #220]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002768:	4313      	orrs	r3, r2
 800276a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002772:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002776:	d106      	bne.n	8002786 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002778:	4b32      	ldr	r3, [pc, #200]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	4a31      	ldr	r2, [pc, #196]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800277e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002782:	60d3      	str	r3, [r2, #12]
 8002784:	e011      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800278a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800278e:	d10c      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3304      	adds	r3, #4
 8002794:	2101      	movs	r1, #1
 8002796:	4618      	mov	r0, r3
 8002798:	f000 f8c8 	bl	800292c <RCCEx_PLLSAI1_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80027a0:	7cfb      	ldrb	r3, [r7, #19]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80027a6:	7cfb      	ldrb	r3, [r7, #19]
 80027a8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d028      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027b6:	4b23      	ldr	r3, [pc, #140]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027bc:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c4:	491f      	ldr	r1, [pc, #124]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d6:	4b1b      	ldr	r3, [pc, #108]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	4a1a      	ldr	r2, [pc, #104]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80027e0:	60d3      	str	r3, [r2, #12]
 80027e2:	e011      	b.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	3304      	adds	r3, #4
 80027f2:	2101      	movs	r1, #1
 80027f4:	4618      	mov	r0, r3
 80027f6:	f000 f899 	bl	800292c <RCCEx_PLLSAI1_Config>
 80027fa:	4603      	mov	r3, r0
 80027fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002810:	2b00      	cmp	r3, #0
 8002812:	d02b      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002814:	4b0b      	ldr	r3, [pc, #44]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002816:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800281a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002822:	4908      	ldr	r1, [pc, #32]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002824:	4313      	orrs	r3, r2
 8002826:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002832:	d109      	bne.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002834:	4b03      	ldr	r3, [pc, #12]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4a02      	ldr	r2, [pc, #8]	@ (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800283e:	60d3      	str	r3, [r2, #12]
 8002840:	e014      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002850:	d10c      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3304      	adds	r3, #4
 8002856:	2101      	movs	r1, #1
 8002858:	4618      	mov	r0, r3
 800285a:	f000 f867 	bl	800292c <RCCEx_PLLSAI1_Config>
 800285e:	4603      	mov	r3, r0
 8002860:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002862:	7cfb      	ldrb	r3, [r7, #19]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02f      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002878:	4b2b      	ldr	r3, [pc, #172]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002886:	4928      	ldr	r1, [pc, #160]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002892:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002896:	d10d      	bne.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3304      	adds	r3, #4
 800289c:	2102      	movs	r1, #2
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f844 	bl	800292c <RCCEx_PLLSAI1_Config>
 80028a4:	4603      	mov	r3, r0
 80028a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028a8:	7cfb      	ldrb	r3, [r7, #19]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d014      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028ae:	7cfb      	ldrb	r3, [r7, #19]
 80028b0:	74bb      	strb	r3, [r7, #18]
 80028b2:	e011      	b.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80028bc:	d10c      	bne.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	3320      	adds	r3, #32
 80028c2:	2102      	movs	r1, #2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f000 f925 	bl	8002b14 <RCCEx_PLLSAI2_Config>
 80028ca:	4603      	mov	r3, r0
 80028cc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028ce:	7cfb      	ldrb	r3, [r7, #19]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028e4:	4b10      	ldr	r3, [pc, #64]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028ea:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028f2:	490d      	ldr	r1, [pc, #52]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00b      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002906:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800290c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002916:	4904      	ldr	r1, [pc, #16]	@ (8002928 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002918:	4313      	orrs	r3, r2
 800291a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800291e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000

0800292c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002936:	2300      	movs	r3, #0
 8002938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800293a:	4b75      	ldr	r3, [pc, #468]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d018      	beq.n	8002978 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002946:	4b72      	ldr	r3, [pc, #456]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0203 	and.w	r2, r3, #3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	429a      	cmp	r2, r3
 8002954:	d10d      	bne.n	8002972 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
       ||
 800295a:	2b00      	cmp	r3, #0
 800295c:	d009      	beq.n	8002972 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800295e:	4b6c      	ldr	r3, [pc, #432]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	091b      	lsrs	r3, r3, #4
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
       ||
 800296e:	429a      	cmp	r2, r3
 8002970:	d047      	beq.n	8002a02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
 8002976:	e044      	b.n	8002a02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d018      	beq.n	80029b2 <RCCEx_PLLSAI1_Config+0x86>
 8002980:	2b03      	cmp	r3, #3
 8002982:	d825      	bhi.n	80029d0 <RCCEx_PLLSAI1_Config+0xa4>
 8002984:	2b01      	cmp	r3, #1
 8002986:	d002      	beq.n	800298e <RCCEx_PLLSAI1_Config+0x62>
 8002988:	2b02      	cmp	r3, #2
 800298a:	d009      	beq.n	80029a0 <RCCEx_PLLSAI1_Config+0x74>
 800298c:	e020      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800298e:	4b60      	ldr	r3, [pc, #384]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d11d      	bne.n	80029d6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299e:	e01a      	b.n	80029d6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029a0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d116      	bne.n	80029da <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b0:	e013      	b.n	80029da <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029b2:	4b57      	ldr	r3, [pc, #348]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10f      	bne.n	80029de <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029be:	4b54      	ldr	r3, [pc, #336]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d109      	bne.n	80029de <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ce:	e006      	b.n	80029de <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      break;
 80029d4:	e004      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029d6:	bf00      	nop
 80029d8:	e002      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029da:	bf00      	nop
 80029dc:	e000      	b.n	80029e0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029de:	bf00      	nop
    }

    if(status == HAL_OK)
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10d      	bne.n	8002a02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029e6:	4b4a      	ldr	r3, [pc, #296]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6819      	ldr	r1, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	3b01      	subs	r3, #1
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	430b      	orrs	r3, r1
 80029fc:	4944      	ldr	r1, [pc, #272]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d17d      	bne.n	8002b04 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002a08:	4b41      	ldr	r3, [pc, #260]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a40      	ldr	r2, [pc, #256]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a14:	f7fe f940 	bl	8000c98 <HAL_GetTick>
 8002a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a1a:	e009      	b.n	8002a30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a1c:	f7fe f93c 	bl	8000c98 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d902      	bls.n	8002a30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a2e:	e005      	b.n	8002a3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a30:	4b37      	ldr	r3, [pc, #220]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d1ef      	bne.n	8002a1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a3c:	7bfb      	ldrb	r3, [r7, #15]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d160      	bne.n	8002b04 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d111      	bne.n	8002a6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a48:	4b31      	ldr	r3, [pc, #196]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a4a:	691b      	ldr	r3, [r3, #16]
 8002a4c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002a50:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	6892      	ldr	r2, [r2, #8]
 8002a58:	0211      	lsls	r1, r2, #8
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68d2      	ldr	r2, [r2, #12]
 8002a5e:	0912      	lsrs	r2, r2, #4
 8002a60:	0452      	lsls	r2, r2, #17
 8002a62:	430a      	orrs	r2, r1
 8002a64:	492a      	ldr	r1, [pc, #168]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	610b      	str	r3, [r1, #16]
 8002a6a:	e027      	b.n	8002abc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d112      	bne.n	8002a98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a72:	4b27      	ldr	r3, [pc, #156]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002a7a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002a7e:	687a      	ldr	r2, [r7, #4]
 8002a80:	6892      	ldr	r2, [r2, #8]
 8002a82:	0211      	lsls	r1, r2, #8
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	6912      	ldr	r2, [r2, #16]
 8002a88:	0852      	lsrs	r2, r2, #1
 8002a8a:	3a01      	subs	r2, #1
 8002a8c:	0552      	lsls	r2, r2, #21
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	491f      	ldr	r1, [pc, #124]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	610b      	str	r3, [r1, #16]
 8002a96:	e011      	b.n	8002abc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a98:	4b1d      	ldr	r3, [pc, #116]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002aa0:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	6892      	ldr	r2, [r2, #8]
 8002aa8:	0211      	lsls	r1, r2, #8
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	6952      	ldr	r2, [r2, #20]
 8002aae:	0852      	lsrs	r2, r2, #1
 8002ab0:	3a01      	subs	r2, #1
 8002ab2:	0652      	lsls	r2, r2, #25
 8002ab4:	430a      	orrs	r2, r1
 8002ab6:	4916      	ldr	r1, [pc, #88]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002abc:	4b14      	ldr	r3, [pc, #80]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a13      	ldr	r2, [pc, #76]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ac2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002ac6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ac8:	f7fe f8e6 	bl	8000c98 <HAL_GetTick>
 8002acc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ace:	e009      	b.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002ad0:	f7fe f8e2 	bl	8000c98 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	68bb      	ldr	r3, [r7, #8]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d902      	bls.n	8002ae4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ae2:	e005      	b.n	8002af0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d0ef      	beq.n	8002ad0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002af8:	691a      	ldr	r2, [r3, #16]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	699b      	ldr	r3, [r3, #24]
 8002afe:	4904      	ldr	r1, [pc, #16]	@ (8002b10 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3710      	adds	r7, #16
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40021000 	.word	0x40021000

08002b14 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b22:	4b6a      	ldr	r3, [pc, #424]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0303 	and.w	r3, r3, #3
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d018      	beq.n	8002b60 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002b2e:	4b67      	ldr	r3, [pc, #412]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	f003 0203 	and.w	r2, r3, #3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d10d      	bne.n	8002b5a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
       ||
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d009      	beq.n	8002b5a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002b46:	4b61      	ldr	r3, [pc, #388]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	091b      	lsrs	r3, r3, #4
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
       ||
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d047      	beq.n	8002bea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	73fb      	strb	r3, [r7, #15]
 8002b5e:	e044      	b.n	8002bea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2b03      	cmp	r3, #3
 8002b66:	d018      	beq.n	8002b9a <RCCEx_PLLSAI2_Config+0x86>
 8002b68:	2b03      	cmp	r3, #3
 8002b6a:	d825      	bhi.n	8002bb8 <RCCEx_PLLSAI2_Config+0xa4>
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d002      	beq.n	8002b76 <RCCEx_PLLSAI2_Config+0x62>
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d009      	beq.n	8002b88 <RCCEx_PLLSAI2_Config+0x74>
 8002b74:	e020      	b.n	8002bb8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b76:	4b55      	ldr	r3, [pc, #340]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d11d      	bne.n	8002bbe <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b86:	e01a      	b.n	8002bbe <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b88:	4b50      	ldr	r3, [pc, #320]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d116      	bne.n	8002bc2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b98:	e013      	b.n	8002bc2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b9a:	4b4c      	ldr	r3, [pc, #304]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10f      	bne.n	8002bc6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ba6:	4b49      	ldr	r3, [pc, #292]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bb6:	e006      	b.n	8002bc6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	73fb      	strb	r3, [r7, #15]
      break;
 8002bbc:	e004      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bbe:	bf00      	nop
 8002bc0:	e002      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bc2:	bf00      	nop
 8002bc4:	e000      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002bc6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002bc8:	7bfb      	ldrb	r3, [r7, #15]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10d      	bne.n	8002bea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bce:	4b3f      	ldr	r3, [pc, #252]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	011b      	lsls	r3, r3, #4
 8002be2:	430b      	orrs	r3, r1
 8002be4:	4939      	ldr	r1, [pc, #228]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bea:	7bfb      	ldrb	r3, [r7, #15]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d167      	bne.n	8002cc0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002bf0:	4b36      	ldr	r3, [pc, #216]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a35      	ldr	r2, [pc, #212]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bfc:	f7fe f84c 	bl	8000c98 <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c02:	e009      	b.n	8002c18 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c04:	f7fe f848 	bl	8000c98 <HAL_GetTick>
 8002c08:	4602      	mov	r2, r0
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	1ad3      	subs	r3, r2, r3
 8002c0e:	2b02      	cmp	r3, #2
 8002c10:	d902      	bls.n	8002c18 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c12:	2303      	movs	r3, #3
 8002c14:	73fb      	strb	r3, [r7, #15]
        break;
 8002c16:	e005      	b.n	8002c24 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002c18:	4b2c      	ldr	r3, [pc, #176]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d1ef      	bne.n	8002c04 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d14a      	bne.n	8002cc0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d111      	bne.n	8002c54 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c30:	4b26      	ldr	r3, [pc, #152]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002c38:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c3c:	687a      	ldr	r2, [r7, #4]
 8002c3e:	6892      	ldr	r2, [r2, #8]
 8002c40:	0211      	lsls	r1, r2, #8
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68d2      	ldr	r2, [r2, #12]
 8002c46:	0912      	lsrs	r2, r2, #4
 8002c48:	0452      	lsls	r2, r2, #17
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	491f      	ldr	r1, [pc, #124]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	614b      	str	r3, [r1, #20]
 8002c52:	e011      	b.n	8002c78 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002c54:	4b1d      	ldr	r3, [pc, #116]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c56:	695b      	ldr	r3, [r3, #20]
 8002c58:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002c5c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	6892      	ldr	r2, [r2, #8]
 8002c64:	0211      	lsls	r1, r2, #8
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6912      	ldr	r2, [r2, #16]
 8002c6a:	0852      	lsrs	r2, r2, #1
 8002c6c:	3a01      	subs	r2, #1
 8002c6e:	0652      	lsls	r2, r2, #25
 8002c70:	430a      	orrs	r2, r1
 8002c72:	4916      	ldr	r1, [pc, #88]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002c78:	4b14      	ldr	r3, [pc, #80]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a13      	ldr	r2, [pc, #76]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c82:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fe f808 	bl	8000c98 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002c8a:	e009      	b.n	8002ca0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002c8c:	f7fe f804 	bl	8000c98 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	73fb      	strb	r3, [r7, #15]
          break;
 8002c9e:	e005      	b.n	8002cac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d0ef      	beq.n	8002c8c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d106      	bne.n	8002cc0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002cb2:	4b06      	ldr	r3, [pc, #24]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	4904      	ldr	r1, [pc, #16]	@ (8002ccc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	3710      	adds	r7, #16
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40021000 	.word	0x40021000

08002cd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b084      	sub	sp, #16
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d101      	bne.n	8002ce2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e095      	b.n	8002e0e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d108      	bne.n	8002cfc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002cf2:	d009      	beq.n	8002d08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	61da      	str	r2, [r3, #28]
 8002cfa:	e005      	b.n	8002d08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d106      	bne.n	8002d28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7fd fdd0 	bl	80008c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d48:	d902      	bls.n	8002d50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e002      	b.n	8002d56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002d54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002d5e:	d007      	beq.n	8002d70 <HAL_SPI_Init+0xa0>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d80:	431a      	orrs	r2, r3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	691b      	ldr	r3, [r3, #16]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	431a      	orrs	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	699b      	ldr	r3, [r3, #24]
 8002d9a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db2:	ea42 0103 	orr.w	r1, r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dba:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	0c1b      	lsrs	r3, r3, #16
 8002dcc:	f003 0204 	and.w	r2, r3, #4
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd4:	f003 0310 	and.w	r3, r3, #16
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	431a      	orrs	r2, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002dec:	ea42 0103 	orr.w	r1, r2, r3
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	430a      	orrs	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
	...

08002e18 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b086      	sub	sp, #24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	60b9      	str	r1, [r7, #8]
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	807b      	strh	r3, [r7, #2]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e2c:	75fb      	strb	r3, [r7, #23]
  tmp_mode            = hspi->Init.Mode;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8002e34:	7dfb      	ldrb	r3, [r7, #23]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d00c      	beq.n	8002e54 <HAL_SPI_TransmitReceive_DMA+0x3c>
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002e40:	d106      	bne.n	8002e50 <HAL_SPI_TransmitReceive_DMA+0x38>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d102      	bne.n	8002e50 <HAL_SPI_TransmitReceive_DMA+0x38>
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
 8002e4c:	2b04      	cmp	r3, #4
 8002e4e:	d001      	beq.n	8002e54 <HAL_SPI_TransmitReceive_DMA+0x3c>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002e50:	2302      	movs	r3, #2
 8002e52:	e158      	b.n	8003106 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_SPI_TransmitReceive_DMA+0x4e>
 8002e60:	887b      	ldrh	r3, [r7, #2]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_SPI_TransmitReceive_DMA+0x52>
  {
    return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e14d      	b.n	8003106 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_SPI_TransmitReceive_DMA+0x60>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e146      	b.n	8003106 <HAL_SPI_TransmitReceive_DMA+0x2ee>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d003      	beq.n	8002e94 <HAL_SPI_TransmitReceive_DMA+0x7c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2205      	movs	r2, #5
 8002e90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	2200      	movs	r2, #0
 8002e98:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	887a      	ldrh	r2, [r7, #2]
 8002ea4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	887a      	ldrh	r2, [r7, #2]
 8002eaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	887a      	ldrh	r2, [r7, #2]
 8002eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	887a      	ldrh	r2, [r7, #2]
 8002ebe:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	685a      	ldr	r2, [r3, #4]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8002edc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ee6:	d908      	bls.n	8002efa <HAL_SPI_TransmitReceive_DMA+0xe2>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	685a      	ldr	r2, [r3, #4]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002ef6:	605a      	str	r2, [r3, #4]
 8002ef8:	e06f      	b.n	8002fda <HAL_SPI_TransmitReceive_DMA+0x1c2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	685a      	ldr	r2, [r3, #4]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8002f08:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f0e:	699b      	ldr	r3, [r3, #24]
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f14:	d126      	bne.n	8002f64 <HAL_SPI_TransmitReceive_DMA+0x14c>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <HAL_SPI_TransmitReceive_DMA+0x12a>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002f30:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f40:	e010      	b.n	8002f64 <HAL_SPI_TransmitReceive_DMA+0x14c>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f50:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f56:	b29b      	uxth	r3, r3
 8002f58:	085b      	lsrs	r3, r3, #1
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f68:	699b      	ldr	r3, [r3, #24]
 8002f6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f6e:	d134      	bne.n	8002fda <HAL_SPI_TransmitReceive_DMA+0x1c2>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002f7e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d111      	bne.n	8002fb4 <HAL_SPI_TransmitReceive_DMA+0x19c>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	685a      	ldr	r2, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002f9e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	085b      	lsrs	r3, r3, #1
 8002faa:	b29a      	uxth	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8002fb2:	e012      	b.n	8002fda <HAL_SPI_TransmitReceive_DMA+0x1c2>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002fc2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	3301      	adds	r3, #1
 8002fd2:	b29a      	uxth	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b04      	cmp	r3, #4
 8002fe4:	d108      	bne.n	8002ff8 <HAL_SPI_TransmitReceive_DMA+0x1e0>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fea:	4a49      	ldr	r2, [pc, #292]	@ (8003110 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 8002fec:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ff2:	4a48      	ldr	r2, [pc, #288]	@ (8003114 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 8002ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002ff6:	e007      	b.n	8003008 <HAL_SPI_TransmitReceive_DMA+0x1f0>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffc:	4a46      	ldr	r2, [pc, #280]	@ (8003118 <HAL_SPI_TransmitReceive_DMA+0x300>)
 8002ffe:	631a      	str	r2, [r3, #48]	@ 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003004:	4a45      	ldr	r2, [pc, #276]	@ (800311c <HAL_SPI_TransmitReceive_DMA+0x304>)
 8003006:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800300c:	4a44      	ldr	r2, [pc, #272]	@ (8003120 <HAL_SPI_TransmitReceive_DMA+0x308>)
 800300e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003014:	2200      	movs	r2, #0
 8003016:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6d98      	ldr	r0, [r3, #88]	@ 0x58
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	330c      	adds	r3, #12
 8003022:	4619      	mov	r1, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003028:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003030:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003032:	f7fe f82b 	bl	800108c <HAL_DMA_Start_IT>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_SPI_TransmitReceive_DMA+0x23c>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003040:	f043 0210 	orr.w	r2, r3, #16
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	2200      	movs	r2, #0
 800304c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e058      	b.n	8003106 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	685a      	ldr	r2, [r3, #4]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0201 	orr.w	r2, r2, #1
 8003062:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003070:	2200      	movs	r2, #0
 8003072:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003078:	2200      	movs	r2, #0
 800307a:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003080:	2200      	movs	r2, #0
 8003082:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800308c:	4619      	mov	r1, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	330c      	adds	r3, #12
 8003094:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800309a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800309c:	f7fd fff6 	bl	800108c <HAL_DMA_Start_IT>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_SPI_TransmitReceive_DMA+0x2a6>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030aa:	f043 0210 	orr.w	r2, r3, #16
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	661a      	str	r2, [r3, #96]	@ 0x60
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e023      	b.n	8003106 <HAL_SPI_TransmitReceive_DMA+0x2ee>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030c8:	2b40      	cmp	r3, #64	@ 0x40
 80030ca:	d007      	beq.n	80030dc <HAL_SPI_TransmitReceive_DMA+0x2c4>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030da:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0220 	orr.w	r2, r2, #32
 80030f2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685a      	ldr	r2, [r3, #4]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0202 	orr.w	r2, r2, #2
 8003102:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	080032ad 	.word	0x080032ad
 8003114:	08003175 	.word	0x08003175
 8003118:	080032c9 	.word	0x080032c9
 800311c:	0800321d 	.word	0x0800321d
 8003120:	080032e5 	.word	0x080032e5

08003124 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800312c:	bf00      	nop
 800312e:	370c      	adds	r7, #12
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8003140:	bf00      	nop
 8003142:	370c      	adds	r7, #12
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003168:	bf00      	nop
 800316a:	370c      	adds	r7, #12
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003180:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003182:	f7fd fd89 	bl	8000c98 <HAL_GetTick>
 8003186:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b20      	cmp	r3, #32
 8003194:	d03c      	beq.n	8003210 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0220 	bic.w	r2, r2, #32
 80031a4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	689b      	ldr	r3, [r3, #8]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10d      	bne.n	80031ca <SPI_DMAReceiveCplt+0x56>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031b6:	d108      	bne.n	80031ca <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685a      	ldr	r2, [r3, #4]
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0203 	bic.w	r2, r2, #3
 80031c6:	605a      	str	r2, [r3, #4]
 80031c8:	e007      	b.n	80031da <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0201 	bic.w	r2, r2, #1
 80031d8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80031da:	68ba      	ldr	r2, [r7, #8]
 80031dc:	2164      	movs	r1, #100	@ 0x64
 80031de:	68f8      	ldr	r0, [r7, #12]
 80031e0:	f000 f9be 	bl	8003560 <SPI_EndRxTransaction>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d002      	beq.n	80031f0 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2220      	movs	r2, #32
 80031ee:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    hspi->RxXferCount = 0U;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff ffa9 	bl	8003160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800320e:	e002      	b.n	8003216 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8003210:	68f8      	ldr	r0, [r7, #12]
 8003212:	f7ff ff87 	bl	8003124 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003216:	3710      	adds	r7, #16
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b084      	sub	sp, #16
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003228:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800322a:	f7fd fd35 	bl	8000c98 <HAL_GetTick>
 800322e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 0320 	and.w	r3, r3, #32
 800323a:	2b20      	cmp	r3, #32
 800323c:	d030      	beq.n	80032a0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	685a      	ldr	r2, [r3, #4]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 0220 	bic.w	r2, r2, #32
 800324c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	2164      	movs	r1, #100	@ 0x64
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 f9dc 	bl	8003610 <SPI_EndRxTxTransaction>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003262:	f043 0220 	orr.w	r2, r3, #32
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	661a      	str	r2, [r3, #96]	@ 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685a      	ldr	r2, [r3, #4]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0203 	bic.w	r2, r2, #3
 8003278:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	87da      	strh	r2, [r3, #62]	@ 0x3e
    hspi->RxXferCount = 0U;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff ff61 	bl	8003160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800329e:	e002      	b.n	80032a6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80032a0:	68f8      	ldr	r0, [r7, #12]
 80032a2:	f7fd f927 	bl	80004f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032a6:	3710      	adds	r7, #16
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}

080032ac <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b084      	sub	sp, #16
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032b8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f7ff ff3c 	bl	8003138 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032c0:	bf00      	nop
 80032c2:	3710      	adds	r7, #16
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}

080032c8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f7ff ff38 	bl	800314c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80032dc:	bf00      	nop
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032f0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685a      	ldr	r2, [r3, #4]
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f022 0203 	bic.w	r2, r2, #3
 8003300:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003306:	f043 0210 	orr.w	r2, r3, #16
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff ff22 	bl	8003160 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800331c:	bf00      	nop
 800331e:	3710      	adds	r7, #16
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b088      	sub	sp, #32
 8003328:	af00      	add	r7, sp, #0
 800332a:	60f8      	str	r0, [r7, #12]
 800332c:	60b9      	str	r1, [r7, #8]
 800332e:	603b      	str	r3, [r7, #0]
 8003330:	4613      	mov	r3, r2
 8003332:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003334:	f7fd fcb0 	bl	8000c98 <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	683a      	ldr	r2, [r7, #0]
 8003340:	4413      	add	r3, r2
 8003342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003344:	f7fd fca8 	bl	8000c98 <HAL_GetTick>
 8003348:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800334a:	4b39      	ldr	r3, [pc, #228]	@ (8003430 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	015b      	lsls	r3, r3, #5
 8003350:	0d1b      	lsrs	r3, r3, #20
 8003352:	69fa      	ldr	r2, [r7, #28]
 8003354:	fb02 f303 	mul.w	r3, r2, r3
 8003358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800335a:	e054      	b.n	8003406 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003362:	d050      	beq.n	8003406 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003364:	f7fd fc98 	bl	8000c98 <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	69bb      	ldr	r3, [r7, #24]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	69fa      	ldr	r2, [r7, #28]
 8003370:	429a      	cmp	r2, r3
 8003372:	d902      	bls.n	800337a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003374:	69fb      	ldr	r3, [r7, #28]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d13d      	bne.n	80033f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003388:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003392:	d111      	bne.n	80033b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800339c:	d004      	beq.n	80033a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033a6:	d107      	bne.n	80033b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033c0:	d10f      	bne.n	80033e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80033d0:	601a      	str	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80033e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2201      	movs	r2, #1
 80033e6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e017      	b.n	8003426 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	3b01      	subs	r3, #1
 8003404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	429a      	cmp	r2, r3
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	429a      	cmp	r2, r3
 8003422:	d19b      	bne.n	800335c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3720      	adds	r7, #32
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	2000000c 	.word	0x2000000c

08003434 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b08a      	sub	sp, #40	@ 0x28
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003446:	f7fd fc27 	bl	8000c98 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800344e:	1a9b      	subs	r3, r3, r2
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	4413      	add	r3, r2
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003456:	f7fd fc1f 	bl	8000c98 <HAL_GetTick>
 800345a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	330c      	adds	r3, #12
 8003462:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003464:	4b3d      	ldr	r3, [pc, #244]	@ (800355c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	00da      	lsls	r2, r3, #3
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	0d1b      	lsrs	r3, r3, #20
 8003474:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003476:	fb02 f303 	mul.w	r3, r2, r3
 800347a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800347c:	e060      	b.n	8003540 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003484:	d107      	bne.n	8003496 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	b2db      	uxtb	r3, r3
 8003492:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003494:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d050      	beq.n	8003540 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800349e:	f7fd fbfb 	bl	8000c98 <HAL_GetTick>
 80034a2:	4602      	mov	r2, r0
 80034a4:	6a3b      	ldr	r3, [r7, #32]
 80034a6:	1ad3      	subs	r3, r2, r3
 80034a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80034aa:	429a      	cmp	r2, r3
 80034ac:	d902      	bls.n	80034b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80034ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d13d      	bne.n	8003530 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	685a      	ldr	r2, [r3, #4]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80034c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034cc:	d111      	bne.n	80034f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034d6:	d004      	beq.n	80034e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034e0:	d107      	bne.n	80034f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034fa:	d10f      	bne.n	800351c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800351a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800352c:	2303      	movs	r3, #3
 800352e:	e010      	b.n	8003552 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003530:	69bb      	ldr	r3, [r7, #24]
 8003532:	2b00      	cmp	r3, #0
 8003534:	d101      	bne.n	800353a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003536:	2300      	movs	r3, #0
 8003538:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	3b01      	subs	r3, #1
 800353e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	689a      	ldr	r2, [r3, #8]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	687a      	ldr	r2, [r7, #4]
 800354c:	429a      	cmp	r2, r3
 800354e:	d196      	bne.n	800347e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	3728      	adds	r7, #40	@ 0x28
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	2000000c 	.word	0x2000000c

08003560 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af02      	add	r7, sp, #8
 8003566:	60f8      	str	r0, [r7, #12]
 8003568:	60b9      	str	r1, [r7, #8]
 800356a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003574:	d111      	bne.n	800359a <SPI_EndRxTransaction+0x3a>
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800357e:	d004      	beq.n	800358a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003588:	d107      	bne.n	800359a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003598:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	9300      	str	r3, [sp, #0]
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	2200      	movs	r2, #0
 80035a2:	2180      	movs	r1, #128	@ 0x80
 80035a4:	68f8      	ldr	r0, [r7, #12]
 80035a6:	f7ff febd 	bl	8003324 <SPI_WaitFlagStateUntilTimeout>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d007      	beq.n	80035c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035b4:	f043 0220 	orr.w	r2, r3, #32
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e023      	b.n	8003608 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035c8:	d11d      	bne.n	8003606 <SPI_EndRxTransaction+0xa6>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035d2:	d004      	beq.n	80035de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035dc:	d113      	bne.n	8003606 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	9300      	str	r3, [sp, #0]
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	2200      	movs	r2, #0
 80035e6:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80035ea:	68f8      	ldr	r0, [r7, #12]
 80035ec:	f7ff ff22 	bl	8003434 <SPI_WaitFifoStateUntilTimeout>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d007      	beq.n	8003606 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80035fa:	f043 0220 	orr.w	r2, r3, #32
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e000      	b.n	8003608 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003606:	2300      	movs	r3, #0
}
 8003608:	4618      	mov	r0, r3
 800360a:	3710      	adds	r7, #16
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	2200      	movs	r2, #0
 8003624:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7ff ff03 	bl	8003434 <SPI_WaitFifoStateUntilTimeout>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d007      	beq.n	8003644 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003638:	f043 0220 	orr.w	r2, r3, #32
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e027      	b.n	8003694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	2200      	movs	r2, #0
 800364c:	2180      	movs	r1, #128	@ 0x80
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f7ff fe68 	bl	8003324 <SPI_WaitFlagStateUntilTimeout>
 8003654:	4603      	mov	r3, r0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d007      	beq.n	800366a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800365e:	f043 0220 	orr.w	r2, r3, #32
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e014      	b.n	8003694 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	9300      	str	r3, [sp, #0]
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	2200      	movs	r2, #0
 8003672:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003676:	68f8      	ldr	r0, [r7, #12]
 8003678:	f7ff fedc 	bl	8003434 <SPI_WaitFifoStateUntilTimeout>
 800367c:	4603      	mov	r3, r0
 800367e:	2b00      	cmp	r3, #0
 8003680:	d007      	beq.n	8003692 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003686:	f043 0220 	orr.w	r2, r3, #32
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e000      	b.n	8003694 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e040      	b.n	8003730 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d106      	bne.n	80036c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f7fd f99e 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2224      	movs	r2, #36	@ 0x24
 80036c8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f022 0201 	bic.w	r2, r2, #1
 80036d8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d002      	beq.n	80036e8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f000 fb6a 	bl	8003dbc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036e8:	6878      	ldr	r0, [r7, #4]
 80036ea:	f000 f8af 	bl	800384c <UART_SetConfig>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d101      	bne.n	80036f8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e01b      	b.n	8003730 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685a      	ldr	r2, [r3, #4]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003706:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003716:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0201 	orr.w	r2, r2, #1
 8003726:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 fbe9 	bl	8003f00 <UART_CheckIdleState>
 800372e:	4603      	mov	r3, r0
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b08a      	sub	sp, #40	@ 0x28
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	603b      	str	r3, [r7, #0]
 8003744:	4613      	mov	r3, r2
 8003746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800374c:	2b20      	cmp	r3, #32
 800374e:	d177      	bne.n	8003840 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d002      	beq.n	800375c <HAL_UART_Transmit+0x24>
 8003756:	88fb      	ldrh	r3, [r7, #6]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d101      	bne.n	8003760 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e070      	b.n	8003842 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2221      	movs	r2, #33	@ 0x21
 800376c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376e:	f7fd fa93 	bl	8000c98 <HAL_GetTick>
 8003772:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	88fa      	ldrh	r2, [r7, #6]
 8003778:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	88fa      	ldrh	r2, [r7, #6]
 8003780:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800378c:	d108      	bne.n	80037a0 <HAL_UART_Transmit+0x68>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	691b      	ldr	r3, [r3, #16]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d104      	bne.n	80037a0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003796:	2300      	movs	r3, #0
 8003798:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	61bb      	str	r3, [r7, #24]
 800379e:	e003      	b.n	80037a8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a8:	e02f      	b.n	800380a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	9300      	str	r3, [sp, #0]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	2200      	movs	r2, #0
 80037b2:	2180      	movs	r1, #128	@ 0x80
 80037b4:	68f8      	ldr	r0, [r7, #12]
 80037b6:	f000 fc4b 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2220      	movs	r2, #32
 80037c4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80037c6:	2303      	movs	r3, #3
 80037c8:	e03b      	b.n	8003842 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10b      	bne.n	80037e8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	881a      	ldrh	r2, [r3, #0]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037dc:	b292      	uxth	r2, r2
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	3302      	adds	r3, #2
 80037e4:	61bb      	str	r3, [r7, #24]
 80037e6:	e007      	b.n	80037f8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	781a      	ldrb	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	3301      	adds	r3, #1
 80037f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80037fe:	b29b      	uxth	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b29a      	uxth	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003810:	b29b      	uxth	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1c9      	bne.n	80037aa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	2140      	movs	r1, #64	@ 0x40
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 fc15 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 8003826:	4603      	mov	r3, r0
 8003828:	2b00      	cmp	r3, #0
 800382a:	d004      	beq.n	8003836 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2220      	movs	r2, #32
 8003830:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e005      	b.n	8003842 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800383c:	2300      	movs	r3, #0
 800383e:	e000      	b.n	8003842 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003840:	2302      	movs	r3, #2
  }
}
 8003842:	4618      	mov	r0, r3
 8003844:	3720      	adds	r7, #32
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
	...

0800384c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800384c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003850:	b08a      	sub	sp, #40	@ 0x28
 8003852:	af00      	add	r7, sp, #0
 8003854:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	689a      	ldr	r2, [r3, #8]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	691b      	ldr	r3, [r3, #16]
 8003864:	431a      	orrs	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	431a      	orrs	r2, r3
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	69db      	ldr	r3, [r3, #28]
 8003870:	4313      	orrs	r3, r2
 8003872:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	4ba4      	ldr	r3, [pc, #656]	@ (8003b0c <UART_SetConfig+0x2c0>)
 800387c:	4013      	ands	r3, r2
 800387e:	68fa      	ldr	r2, [r7, #12]
 8003880:	6812      	ldr	r2, [r2, #0]
 8003882:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003884:	430b      	orrs	r3, r1
 8003886:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	699b      	ldr	r3, [r3, #24]
 80038a2:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a99      	ldr	r2, [pc, #612]	@ (8003b10 <UART_SetConfig+0x2c4>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d004      	beq.n	80038b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b4:	4313      	orrs	r3, r2
 80038b6:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c8:	430a      	orrs	r2, r1
 80038ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a90      	ldr	r2, [pc, #576]	@ (8003b14 <UART_SetConfig+0x2c8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d126      	bne.n	8003924 <UART_SetConfig+0xd8>
 80038d6:	4b90      	ldr	r3, [pc, #576]	@ (8003b18 <UART_SetConfig+0x2cc>)
 80038d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038dc:	f003 0303 	and.w	r3, r3, #3
 80038e0:	2b03      	cmp	r3, #3
 80038e2:	d81b      	bhi.n	800391c <UART_SetConfig+0xd0>
 80038e4:	a201      	add	r2, pc, #4	@ (adr r2, 80038ec <UART_SetConfig+0xa0>)
 80038e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ea:	bf00      	nop
 80038ec:	080038fd 	.word	0x080038fd
 80038f0:	0800390d 	.word	0x0800390d
 80038f4:	08003905 	.word	0x08003905
 80038f8:	08003915 	.word	0x08003915
 80038fc:	2301      	movs	r3, #1
 80038fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003902:	e116      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003904:	2302      	movs	r3, #2
 8003906:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800390a:	e112      	b.n	8003b32 <UART_SetConfig+0x2e6>
 800390c:	2304      	movs	r3, #4
 800390e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003912:	e10e      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003914:	2308      	movs	r3, #8
 8003916:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800391a:	e10a      	b.n	8003b32 <UART_SetConfig+0x2e6>
 800391c:	2310      	movs	r3, #16
 800391e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003922:	e106      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7c      	ldr	r2, [pc, #496]	@ (8003b1c <UART_SetConfig+0x2d0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d138      	bne.n	80039a0 <UART_SetConfig+0x154>
 800392e:	4b7a      	ldr	r3, [pc, #488]	@ (8003b18 <UART_SetConfig+0x2cc>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003934:	f003 030c 	and.w	r3, r3, #12
 8003938:	2b0c      	cmp	r3, #12
 800393a:	d82d      	bhi.n	8003998 <UART_SetConfig+0x14c>
 800393c:	a201      	add	r2, pc, #4	@ (adr r2, 8003944 <UART_SetConfig+0xf8>)
 800393e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003942:	bf00      	nop
 8003944:	08003979 	.word	0x08003979
 8003948:	08003999 	.word	0x08003999
 800394c:	08003999 	.word	0x08003999
 8003950:	08003999 	.word	0x08003999
 8003954:	08003989 	.word	0x08003989
 8003958:	08003999 	.word	0x08003999
 800395c:	08003999 	.word	0x08003999
 8003960:	08003999 	.word	0x08003999
 8003964:	08003981 	.word	0x08003981
 8003968:	08003999 	.word	0x08003999
 800396c:	08003999 	.word	0x08003999
 8003970:	08003999 	.word	0x08003999
 8003974:	08003991 	.word	0x08003991
 8003978:	2300      	movs	r3, #0
 800397a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800397e:	e0d8      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003980:	2302      	movs	r3, #2
 8003982:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003986:	e0d4      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003988:	2304      	movs	r3, #4
 800398a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800398e:	e0d0      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003990:	2308      	movs	r3, #8
 8003992:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003996:	e0cc      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003998:	2310      	movs	r3, #16
 800399a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800399e:	e0c8      	b.n	8003b32 <UART_SetConfig+0x2e6>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a5e      	ldr	r2, [pc, #376]	@ (8003b20 <UART_SetConfig+0x2d4>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d125      	bne.n	80039f6 <UART_SetConfig+0x1aa>
 80039aa:	4b5b      	ldr	r3, [pc, #364]	@ (8003b18 <UART_SetConfig+0x2cc>)
 80039ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039b0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80039b4:	2b30      	cmp	r3, #48	@ 0x30
 80039b6:	d016      	beq.n	80039e6 <UART_SetConfig+0x19a>
 80039b8:	2b30      	cmp	r3, #48	@ 0x30
 80039ba:	d818      	bhi.n	80039ee <UART_SetConfig+0x1a2>
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d00a      	beq.n	80039d6 <UART_SetConfig+0x18a>
 80039c0:	2b20      	cmp	r3, #32
 80039c2:	d814      	bhi.n	80039ee <UART_SetConfig+0x1a2>
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <UART_SetConfig+0x182>
 80039c8:	2b10      	cmp	r3, #16
 80039ca:	d008      	beq.n	80039de <UART_SetConfig+0x192>
 80039cc:	e00f      	b.n	80039ee <UART_SetConfig+0x1a2>
 80039ce:	2300      	movs	r3, #0
 80039d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039d4:	e0ad      	b.n	8003b32 <UART_SetConfig+0x2e6>
 80039d6:	2302      	movs	r3, #2
 80039d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039dc:	e0a9      	b.n	8003b32 <UART_SetConfig+0x2e6>
 80039de:	2304      	movs	r3, #4
 80039e0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039e4:	e0a5      	b.n	8003b32 <UART_SetConfig+0x2e6>
 80039e6:	2308      	movs	r3, #8
 80039e8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039ec:	e0a1      	b.n	8003b32 <UART_SetConfig+0x2e6>
 80039ee:	2310      	movs	r3, #16
 80039f0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80039f4:	e09d      	b.n	8003b32 <UART_SetConfig+0x2e6>
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a4a      	ldr	r2, [pc, #296]	@ (8003b24 <UART_SetConfig+0x2d8>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d125      	bne.n	8003a4c <UART_SetConfig+0x200>
 8003a00:	4b45      	ldr	r3, [pc, #276]	@ (8003b18 <UART_SetConfig+0x2cc>)
 8003a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a06:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003a0a:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a0c:	d016      	beq.n	8003a3c <UART_SetConfig+0x1f0>
 8003a0e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003a10:	d818      	bhi.n	8003a44 <UART_SetConfig+0x1f8>
 8003a12:	2b80      	cmp	r3, #128	@ 0x80
 8003a14:	d00a      	beq.n	8003a2c <UART_SetConfig+0x1e0>
 8003a16:	2b80      	cmp	r3, #128	@ 0x80
 8003a18:	d814      	bhi.n	8003a44 <UART_SetConfig+0x1f8>
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d002      	beq.n	8003a24 <UART_SetConfig+0x1d8>
 8003a1e:	2b40      	cmp	r3, #64	@ 0x40
 8003a20:	d008      	beq.n	8003a34 <UART_SetConfig+0x1e8>
 8003a22:	e00f      	b.n	8003a44 <UART_SetConfig+0x1f8>
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a2a:	e082      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a32:	e07e      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003a34:	2304      	movs	r3, #4
 8003a36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a3a:	e07a      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003a3c:	2308      	movs	r3, #8
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a42:	e076      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003a44:	2310      	movs	r3, #16
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a4a:	e072      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a35      	ldr	r2, [pc, #212]	@ (8003b28 <UART_SetConfig+0x2dc>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d12a      	bne.n	8003aac <UART_SetConfig+0x260>
 8003a56:	4b30      	ldr	r3, [pc, #192]	@ (8003b18 <UART_SetConfig+0x2cc>)
 8003a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a60:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a64:	d01a      	beq.n	8003a9c <UART_SetConfig+0x250>
 8003a66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003a6a:	d81b      	bhi.n	8003aa4 <UART_SetConfig+0x258>
 8003a6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a70:	d00c      	beq.n	8003a8c <UART_SetConfig+0x240>
 8003a72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a76:	d815      	bhi.n	8003aa4 <UART_SetConfig+0x258>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <UART_SetConfig+0x238>
 8003a7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a80:	d008      	beq.n	8003a94 <UART_SetConfig+0x248>
 8003a82:	e00f      	b.n	8003aa4 <UART_SetConfig+0x258>
 8003a84:	2300      	movs	r3, #0
 8003a86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a8a:	e052      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003a8c:	2302      	movs	r3, #2
 8003a8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a92:	e04e      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003a94:	2304      	movs	r3, #4
 8003a96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003a9a:	e04a      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aa2:	e046      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003aa4:	2310      	movs	r3, #16
 8003aa6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aaa:	e042      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a17      	ldr	r2, [pc, #92]	@ (8003b10 <UART_SetConfig+0x2c4>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d13a      	bne.n	8003b2c <UART_SetConfig+0x2e0>
 8003ab6:	4b18      	ldr	r3, [pc, #96]	@ (8003b18 <UART_SetConfig+0x2cc>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003ac0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ac4:	d01a      	beq.n	8003afc <UART_SetConfig+0x2b0>
 8003ac6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003aca:	d81b      	bhi.n	8003b04 <UART_SetConfig+0x2b8>
 8003acc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ad0:	d00c      	beq.n	8003aec <UART_SetConfig+0x2a0>
 8003ad2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003ad6:	d815      	bhi.n	8003b04 <UART_SetConfig+0x2b8>
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <UART_SetConfig+0x298>
 8003adc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ae0:	d008      	beq.n	8003af4 <UART_SetConfig+0x2a8>
 8003ae2:	e00f      	b.n	8003b04 <UART_SetConfig+0x2b8>
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003aea:	e022      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003aec:	2302      	movs	r3, #2
 8003aee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003af2:	e01e      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003af4:	2304      	movs	r3, #4
 8003af6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003afa:	e01a      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003afc:	2308      	movs	r3, #8
 8003afe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b02:	e016      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003b04:	2310      	movs	r3, #16
 8003b06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003b0a:	e012      	b.n	8003b32 <UART_SetConfig+0x2e6>
 8003b0c:	efff69f3 	.word	0xefff69f3
 8003b10:	40008000 	.word	0x40008000
 8003b14:	40013800 	.word	0x40013800
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40004400 	.word	0x40004400
 8003b20:	40004800 	.word	0x40004800
 8003b24:	40004c00 	.word	0x40004c00
 8003b28:	40005000 	.word	0x40005000
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a9f      	ldr	r2, [pc, #636]	@ (8003db4 <UART_SetConfig+0x568>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d17a      	bne.n	8003c32 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d824      	bhi.n	8003b8e <UART_SetConfig+0x342>
 8003b44:	a201      	add	r2, pc, #4	@ (adr r2, 8003b4c <UART_SetConfig+0x300>)
 8003b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4a:	bf00      	nop
 8003b4c:	08003b71 	.word	0x08003b71
 8003b50:	08003b8f 	.word	0x08003b8f
 8003b54:	08003b79 	.word	0x08003b79
 8003b58:	08003b8f 	.word	0x08003b8f
 8003b5c:	08003b7f 	.word	0x08003b7f
 8003b60:	08003b8f 	.word	0x08003b8f
 8003b64:	08003b8f 	.word	0x08003b8f
 8003b68:	08003b8f 	.word	0x08003b8f
 8003b6c:	08003b87 	.word	0x08003b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b70:	f7fe fb66 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 8003b74:	61f8      	str	r0, [r7, #28]
        break;
 8003b76:	e010      	b.n	8003b9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b78:	4b8f      	ldr	r3, [pc, #572]	@ (8003db8 <UART_SetConfig+0x56c>)
 8003b7a:	61fb      	str	r3, [r7, #28]
        break;
 8003b7c:	e00d      	b.n	8003b9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7e:	f7fe fac7 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 8003b82:	61f8      	str	r0, [r7, #28]
        break;
 8003b84:	e009      	b.n	8003b9a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003b8a:	61fb      	str	r3, [r7, #28]
        break;
 8003b8c:	e005      	b.n	8003b9a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b92:	2301      	movs	r3, #1
 8003b94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003b98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 80fb 	beq.w	8003d98 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685a      	ldr	r2, [r3, #4]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	4413      	add	r3, r2
 8003bac:	69fa      	ldr	r2, [r7, #28]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d305      	bcc.n	8003bbe <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d903      	bls.n	8003bc6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003bc4:	e0e8      	b.n	8003d98 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	461c      	mov	r4, r3
 8003bcc:	4615      	mov	r5, r2
 8003bce:	f04f 0200 	mov.w	r2, #0
 8003bd2:	f04f 0300 	mov.w	r3, #0
 8003bd6:	022b      	lsls	r3, r5, #8
 8003bd8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bdc:	0222      	lsls	r2, r4, #8
 8003bde:	68f9      	ldr	r1, [r7, #12]
 8003be0:	6849      	ldr	r1, [r1, #4]
 8003be2:	0849      	lsrs	r1, r1, #1
 8003be4:	2000      	movs	r0, #0
 8003be6:	4688      	mov	r8, r1
 8003be8:	4681      	mov	r9, r0
 8003bea:	eb12 0a08 	adds.w	sl, r2, r8
 8003bee:	eb43 0b09 	adc.w	fp, r3, r9
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	607a      	str	r2, [r7, #4]
 8003bfc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c00:	4650      	mov	r0, sl
 8003c02:	4659      	mov	r1, fp
 8003c04:	f7fc fae0 	bl	80001c8 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c16:	d308      	bcc.n	8003c2a <UART_SetConfig+0x3de>
 8003c18:	69bb      	ldr	r3, [r7, #24]
 8003c1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c1e:	d204      	bcs.n	8003c2a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69ba      	ldr	r2, [r7, #24]
 8003c26:	60da      	str	r2, [r3, #12]
 8003c28:	e0b6      	b.n	8003d98 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003c30:	e0b2      	b.n	8003d98 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c3a:	d15e      	bne.n	8003cfa <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c3c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d828      	bhi.n	8003c96 <UART_SetConfig+0x44a>
 8003c44:	a201      	add	r2, pc, #4	@ (adr r2, 8003c4c <UART_SetConfig+0x400>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003c79 	.word	0x08003c79
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c97 	.word	0x08003c97
 8003c5c:	08003c87 	.word	0x08003c87
 8003c60:	08003c97 	.word	0x08003c97
 8003c64:	08003c97 	.word	0x08003c97
 8003c68:	08003c97 	.word	0x08003c97
 8003c6c:	08003c8f 	.word	0x08003c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c70:	f7fe fae6 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 8003c74:	61f8      	str	r0, [r7, #28]
        break;
 8003c76:	e014      	b.n	8003ca2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c78:	f7fe faf8 	bl	800226c <HAL_RCC_GetPCLK2Freq>
 8003c7c:	61f8      	str	r0, [r7, #28]
        break;
 8003c7e:	e010      	b.n	8003ca2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c80:	4b4d      	ldr	r3, [pc, #308]	@ (8003db8 <UART_SetConfig+0x56c>)
 8003c82:	61fb      	str	r3, [r7, #28]
        break;
 8003c84:	e00d      	b.n	8003ca2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c86:	f7fe fa43 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 8003c8a:	61f8      	str	r0, [r7, #28]
        break;
 8003c8c:	e009      	b.n	8003ca2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c92:	61fb      	str	r3, [r7, #28]
        break;
 8003c94:	e005      	b.n	8003ca2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003ca0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ca2:	69fb      	ldr	r3, [r7, #28]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d077      	beq.n	8003d98 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005a      	lsls	r2, r3, #1
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	441a      	add	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cbe:	69bb      	ldr	r3, [r7, #24]
 8003cc0:	2b0f      	cmp	r3, #15
 8003cc2:	d916      	bls.n	8003cf2 <UART_SetConfig+0x4a6>
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cca:	d212      	bcs.n	8003cf2 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	f023 030f 	bic.w	r3, r3, #15
 8003cd4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	085b      	lsrs	r3, r3, #1
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	f003 0307 	and.w	r3, r3, #7
 8003ce0:	b29a      	uxth	r2, r3
 8003ce2:	8afb      	ldrh	r3, [r7, #22]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	8afa      	ldrh	r2, [r7, #22]
 8003cee:	60da      	str	r2, [r3, #12]
 8003cf0:	e052      	b.n	8003d98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003cf8:	e04e      	b.n	8003d98 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cfa:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003cfe:	2b08      	cmp	r3, #8
 8003d00:	d827      	bhi.n	8003d52 <UART_SetConfig+0x506>
 8003d02:	a201      	add	r2, pc, #4	@ (adr r2, 8003d08 <UART_SetConfig+0x4bc>)
 8003d04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d35 	.word	0x08003d35
 8003d10:	08003d3d 	.word	0x08003d3d
 8003d14:	08003d53 	.word	0x08003d53
 8003d18:	08003d43 	.word	0x08003d43
 8003d1c:	08003d53 	.word	0x08003d53
 8003d20:	08003d53 	.word	0x08003d53
 8003d24:	08003d53 	.word	0x08003d53
 8003d28:	08003d4b 	.word	0x08003d4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7fe fa88 	bl	8002240 <HAL_RCC_GetPCLK1Freq>
 8003d30:	61f8      	str	r0, [r7, #28]
        break;
 8003d32:	e014      	b.n	8003d5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d34:	f7fe fa9a 	bl	800226c <HAL_RCC_GetPCLK2Freq>
 8003d38:	61f8      	str	r0, [r7, #28]
        break;
 8003d3a:	e010      	b.n	8003d5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8003db8 <UART_SetConfig+0x56c>)
 8003d3e:	61fb      	str	r3, [r7, #28]
        break;
 8003d40:	e00d      	b.n	8003d5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d42:	f7fe f9e5 	bl	8002110 <HAL_RCC_GetSysClockFreq>
 8003d46:	61f8      	str	r0, [r7, #28]
        break;
 8003d48:	e009      	b.n	8003d5e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003d4e:	61fb      	str	r3, [r7, #28]
        break;
 8003d50:	e005      	b.n	8003d5e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d56:	2301      	movs	r3, #1
 8003d58:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003d5c:	bf00      	nop
    }

    if (pclk != 0U)
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d019      	beq.n	8003d98 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	085a      	lsrs	r2, r3, #1
 8003d6a:	69fb      	ldr	r3, [r7, #28]
 8003d6c:	441a      	add	r2, r3
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b0f      	cmp	r3, #15
 8003d7c:	d909      	bls.n	8003d92 <UART_SetConfig+0x546>
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d84:	d205      	bcs.n	8003d92 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	60da      	str	r2, [r3, #12]
 8003d90:	e002      	b.n	8003d98 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8003da4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3728      	adds	r7, #40	@ 0x28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003db2:	bf00      	nop
 8003db4:	40008000 	.word	0x40008000
 8003db8:	00f42400 	.word	0x00f42400

08003dbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc8:	f003 0308 	and.w	r3, r3, #8
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00a      	beq.n	8003de6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dea:	f003 0301 	and.w	r3, r3, #1
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00a      	beq.n	8003e08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	430a      	orrs	r2, r1
 8003e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00a      	beq.n	8003e2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e2e:	f003 0304 	and.w	r3, r3, #4
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d00a      	beq.n	8003e4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	f003 0320 	and.w	r3, r3, #32
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d01a      	beq.n	8003ed2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003eba:	d10a      	bne.n	8003ed2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00a      	beq.n	8003ef4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	605a      	str	r2, [r3, #4]
  }
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b098      	sub	sp, #96	@ 0x60
 8003f04:	af02      	add	r7, sp, #8
 8003f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f10:	f7fc fec2 	bl	8000c98 <HAL_GetTick>
 8003f14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b08      	cmp	r3, #8
 8003f22:	d12e      	bne.n	8003f82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f28:	9300      	str	r3, [sp, #0]
 8003f2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f88c 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d021      	beq.n	8003f82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f46:	e853 3f00 	ldrex	r3, [r3]
 8003f4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f52:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	461a      	mov	r2, r3
 8003f5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f5e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f64:	e841 2300 	strex	r3, r2, [r1]
 8003f68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d1e6      	bne.n	8003f3e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e062      	b.n	8004048 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d149      	bne.n	8004024 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f856 	bl	8004050 <UART_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d03c      	beq.n	8004024 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8003fca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e6      	bne.n	8003faa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	e853 3f00 	ldrex	r3, [r3]
 8003fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0301 	bic.w	r3, r3, #1
 8003ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ffc:	61fa      	str	r2, [r7, #28]
 8003ffe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004000:	69b9      	ldr	r1, [r7, #24]
 8004002:	69fa      	ldr	r2, [r7, #28]
 8004004:	e841 2300 	strex	r3, r2, [r1]
 8004008:	617b      	str	r3, [r7, #20]
   return(result);
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d1e5      	bne.n	8003fdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2220      	movs	r2, #32
 8004014:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2200      	movs	r2, #0
 800401c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	e011      	b.n	8004048 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2220      	movs	r2, #32
 800402e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2200      	movs	r2, #0
 8004036:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3758      	adds	r7, #88	@ 0x58
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	603b      	str	r3, [r7, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004060:	e04f      	b.n	8004102 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004068:	d04b      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406a:	f7fc fe15 	bl	8000c98 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <UART_WaitOnFlagUntilTimeout+0x30>
 800407a:	69bb      	ldr	r3, [r7, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d101      	bne.n	8004084 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	e04e      	b.n	8004122 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d037      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	2b80      	cmp	r3, #128	@ 0x80
 8004096:	d034      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	2b40      	cmp	r3, #64	@ 0x40
 800409c:	d031      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	d110      	bne.n	80040ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2208      	movs	r2, #8
 80040b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f838 	bl	800412a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2208      	movs	r2, #8
 80040be:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e029      	b.n	8004122 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	69db      	ldr	r3, [r3, #28]
 80040d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80040dc:	d111      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80040e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f81e 	bl	800412a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e00f      	b.n	8004122 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69da      	ldr	r2, [r3, #28]
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	429a      	cmp	r2, r3
 8004110:	bf0c      	ite	eq
 8004112:	2301      	moveq	r3, #1
 8004114:	2300      	movne	r3, #0
 8004116:	b2db      	uxtb	r3, r3
 8004118:	461a      	mov	r2, r3
 800411a:	79fb      	ldrb	r3, [r7, #7]
 800411c:	429a      	cmp	r2, r3
 800411e:	d0a0      	beq.n	8004062 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004120:	2300      	movs	r3, #0
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800412a:	b480      	push	{r7}
 800412c:	b095      	sub	sp, #84	@ 0x54
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004140:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004142:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004146:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	461a      	mov	r2, r3
 800414e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004150:	643b      	str	r3, [r7, #64]	@ 0x40
 8004152:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004156:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800415e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e6      	bne.n	8004132 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	3308      	adds	r3, #8
 800416a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6a3b      	ldr	r3, [r7, #32]
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	61fb      	str	r3, [r7, #28]
   return(result);
 8004174:	69fb      	ldr	r3, [r7, #28]
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	3308      	adds	r3, #8
 8004182:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004184:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004186:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800418a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e5      	bne.n	8004164 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800419c:	2b01      	cmp	r3, #1
 800419e:	d118      	bne.n	80041d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f023 0310 	bic.w	r3, r3, #16
 80041b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041be:	61bb      	str	r3, [r7, #24]
 80041c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	6979      	ldr	r1, [r7, #20]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	613b      	str	r3, [r7, #16]
   return(result);
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e6      	bne.n	80041a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2220      	movs	r2, #32
 80041d6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041e6:	bf00      	nop
 80041e8:	3754      	adds	r7, #84	@ 0x54
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <memset>:
 80041f2:	4402      	add	r2, r0
 80041f4:	4603      	mov	r3, r0
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d100      	bne.n	80041fc <memset+0xa>
 80041fa:	4770      	bx	lr
 80041fc:	f803 1b01 	strb.w	r1, [r3], #1
 8004200:	e7f9      	b.n	80041f6 <memset+0x4>
	...

08004204 <__libc_init_array>:
 8004204:	b570      	push	{r4, r5, r6, lr}
 8004206:	4d0d      	ldr	r5, [pc, #52]	@ (800423c <__libc_init_array+0x38>)
 8004208:	4c0d      	ldr	r4, [pc, #52]	@ (8004240 <__libc_init_array+0x3c>)
 800420a:	1b64      	subs	r4, r4, r5
 800420c:	10a4      	asrs	r4, r4, #2
 800420e:	2600      	movs	r6, #0
 8004210:	42a6      	cmp	r6, r4
 8004212:	d109      	bne.n	8004228 <__libc_init_array+0x24>
 8004214:	4d0b      	ldr	r5, [pc, #44]	@ (8004244 <__libc_init_array+0x40>)
 8004216:	4c0c      	ldr	r4, [pc, #48]	@ (8004248 <__libc_init_array+0x44>)
 8004218:	f000 f818 	bl	800424c <_init>
 800421c:	1b64      	subs	r4, r4, r5
 800421e:	10a4      	asrs	r4, r4, #2
 8004220:	2600      	movs	r6, #0
 8004222:	42a6      	cmp	r6, r4
 8004224:	d105      	bne.n	8004232 <__libc_init_array+0x2e>
 8004226:	bd70      	pop	{r4, r5, r6, pc}
 8004228:	f855 3b04 	ldr.w	r3, [r5], #4
 800422c:	4798      	blx	r3
 800422e:	3601      	adds	r6, #1
 8004230:	e7ee      	b.n	8004210 <__libc_init_array+0xc>
 8004232:	f855 3b04 	ldr.w	r3, [r5], #4
 8004236:	4798      	blx	r3
 8004238:	3601      	adds	r6, #1
 800423a:	e7f2      	b.n	8004222 <__libc_init_array+0x1e>
 800423c:	080042b8 	.word	0x080042b8
 8004240:	080042b8 	.word	0x080042b8
 8004244:	080042b8 	.word	0x080042b8
 8004248:	080042bc 	.word	0x080042bc

0800424c <_init>:
 800424c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424e:	bf00      	nop
 8004250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004252:	bc08      	pop	{r3}
 8004254:	469e      	mov	lr, r3
 8004256:	4770      	bx	lr

08004258 <_fini>:
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	bf00      	nop
 800425c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800425e:	bc08      	pop	{r3}
 8004260:	469e      	mov	lr, r3
 8004262:	4770      	bx	lr
