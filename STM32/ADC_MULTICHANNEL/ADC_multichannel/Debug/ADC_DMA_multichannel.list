
ADC_DMA_multichannel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008328  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  080084b8  080084b8  000094b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008894  08008894  0000a1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008894  08008894  00009894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800889c  0800889c  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800889c  0800889c  0000989c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088a0  080088a0  000098a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080088a4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002ac  200001d4  08008a78  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000480  08008a78  0000a480  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f9e7  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d3  00000000  00000000  00019beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  0001bec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab1  00000000  00000000  0001cca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028717  00000000  00000000  0001d759  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fce4  00000000  00000000  00045e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fcb9d  00000000  00000000  00055b54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001526f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b6c  00000000  00000000  00152734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001572a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080084a0 	.word	0x080084a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	080084a0 	.word	0x080084a0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
  if (hadc->Instance == ADC1) {
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <HAL_ADC_ConvCpltCallback+0x24>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d104      	bne.n	8000ef0 <HAL_ADC_ConvCpltCallback+0x1c>
    HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); // toggle LD2 every DMA complete
 8000ee6:	2120      	movs	r1, #32
 8000ee8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000eec:	f002 fb96 	bl	800361c <HAL_GPIO_TogglePin>
  }
}
 8000ef0:	bf00      	nop
 8000ef2:	3708      	adds	r7, #8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	50040000 	.word	0x50040000

08000efc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b094      	sub	sp, #80	@ 0x50
 8000f00:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f02:	f000 fc47 	bl	8001794 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f06:	f000 f85f 	bl	8000fc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f0a:	f000 f983 	bl	8001214 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f0e:	f000 f963 	bl	80011d8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f12:	f000 f931 	bl	8001178 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f16:	f000 f8a9 	bl	800106c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 2);
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	4924      	ldr	r1, [pc, #144]	@ (8000fb0 <main+0xb4>)
 8000f1e:	4825      	ldr	r0, [pc, #148]	@ (8000fb4 <main+0xb8>)
 8000f20:	f000 fffe 	bl	8001f20 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  float ch1 = (adc_buffer[0] * 3.3f) / 4095.0f;
 8000f24:	4b22      	ldr	r3, [pc, #136]	@ (8000fb0 <main+0xb4>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f30:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000fb8 <main+0xbc>
 8000f34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f38:	eddf 6a20 	vldr	s13, [pc, #128]	@ 8000fbc <main+0xc0>
 8000f3c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f40:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
	  float ch2 = (adc_buffer[1] * 3.3f) / 4095.0f;
 8000f44:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb0 <main+0xb4>)
 8000f46:	685b      	ldr	r3, [r3, #4]
 8000f48:	ee07 3a90 	vmov	s15, r3
 8000f4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f50:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8000fb8 <main+0xbc>
 8000f54:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000f58:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000fbc <main+0xc0>
 8000f5c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f60:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38

	  snprintf(msg, sizeof(msg), "CH1: %.2fV  CH2: %.2fV\r\n", ch1, ch2);
 8000f64:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000f66:	f7ff faef 	bl	8000548 <__aeabi_f2d>
 8000f6a:	4604      	mov	r4, r0
 8000f6c:	460d      	mov	r5, r1
 8000f6e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8000f70:	f7ff faea 	bl	8000548 <__aeabi_f2d>
 8000f74:	4602      	mov	r2, r0
 8000f76:	460b      	mov	r3, r1
 8000f78:	1d38      	adds	r0, r7, #4
 8000f7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000f7e:	e9cd 4500 	strd	r4, r5, [sp]
 8000f82:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc0 <main+0xc4>)
 8000f84:	2132      	movs	r1, #50	@ 0x32
 8000f86:	f005 f945 	bl	8006214 <sniprintf>

	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff f96f 	bl	8000270 <strlen>
 8000f92:	4603      	mov	r3, r0
 8000f94:	b29a      	uxth	r2, r3
 8000f96:	1d39      	adds	r1, r7, #4
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	4809      	ldr	r0, [pc, #36]	@ (8000fc4 <main+0xc8>)
 8000f9e:	f003 fec5 	bl	8004d2c <HAL_UART_Transmit>
	  HAL_Delay(500);
 8000fa2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000fa6:	f000 fc71 	bl	800188c <HAL_Delay>
  {
 8000faa:	bf00      	nop
 8000fac:	e7ba      	b.n	8000f24 <main+0x28>
 8000fae:	bf00      	nop
 8000fb0:	200001f0 	.word	0x200001f0
 8000fb4:	200001f8 	.word	0x200001f8
 8000fb8:	40533333 	.word	0x40533333
 8000fbc:	457ff000 	.word	0x457ff000
 8000fc0:	080084b8 	.word	0x080084b8
 8000fc4:	200002a4 	.word	0x200002a4

08000fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b096      	sub	sp, #88	@ 0x58
 8000fcc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fce:	f107 0314 	add.w	r3, r7, #20
 8000fd2:	2244      	movs	r2, #68	@ 0x44
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f005 f995 	bl	8006306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fdc:	463b      	mov	r3, r7
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
 8000fe2:	605a      	str	r2, [r3, #4]
 8000fe4:	609a      	str	r2, [r3, #8]
 8000fe6:	60da      	str	r2, [r3, #12]
 8000fe8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fea:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fee:	f002 fb3d 	bl	800366c <HAL_PWREx_ControlVoltageScaling>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ff8:	f000 f972 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ffc:	2302      	movs	r3, #2
 8000ffe:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001000:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001004:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001006:	2310      	movs	r3, #16
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100a:	2302      	movs	r3, #2
 800100c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800100e:	2302      	movs	r3, #2
 8001010:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001012:	2301      	movs	r3, #1
 8001014:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001016:	230a      	movs	r3, #10
 8001018:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800101a:	2307      	movs	r3, #7
 800101c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800101e:	2302      	movs	r3, #2
 8001020:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001022:	2302      	movs	r3, #2
 8001024:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001026:	f107 0314 	add.w	r3, r7, #20
 800102a:	4618      	mov	r0, r3
 800102c:	f002 fb74 	bl	8003718 <HAL_RCC_OscConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001036:	f000 f953 	bl	80012e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103a:	230f      	movs	r3, #15
 800103c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	2303      	movs	r3, #3
 8001040:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001046:	2300      	movs	r3, #0
 8001048:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800104a:	2300      	movs	r3, #0
 800104c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800104e:	463b      	mov	r3, r7
 8001050:	2104      	movs	r1, #4
 8001052:	4618      	mov	r0, r3
 8001054:	f002 ff3c 	bl	8003ed0 <HAL_RCC_ClockConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800105e:	f000 f93f 	bl	80012e0 <Error_Handler>
  }
}
 8001062:	bf00      	nop
 8001064:	3758      	adds	r7, #88	@ 0x58
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
	...

0800106c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	@ 0x28
 8001070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]
 800108c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800108e:	4b36      	ldr	r3, [pc, #216]	@ (8001168 <MX_ADC1_Init+0xfc>)
 8001090:	4a36      	ldr	r2, [pc, #216]	@ (800116c <MX_ADC1_Init+0x100>)
 8001092:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001094:	4b34      	ldr	r3, [pc, #208]	@ (8001168 <MX_ADC1_Init+0xfc>)
 8001096:	2200      	movs	r2, #0
 8001098:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800109a:	4b33      	ldr	r3, [pc, #204]	@ (8001168 <MX_ADC1_Init+0xfc>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010a0:	4b31      	ldr	r3, [pc, #196]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010a6:	4b30      	ldr	r3, [pc, #192]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010a8:	2201      	movs	r2, #1
 80010aa:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ac:	4b2e      	ldr	r3, [pc, #184]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010ae:	2204      	movs	r2, #4
 80010b0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010b2:	4b2d      	ldr	r3, [pc, #180]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80010be:	4b2a      	ldr	r3, [pc, #168]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010c0:	2202      	movs	r2, #2
 80010c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010c4:	4b28      	ldr	r3, [pc, #160]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010cc:	4b26      	ldr	r3, [pc, #152]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d2:	4b25      	ldr	r3, [pc, #148]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010d8:	4b23      	ldr	r3, [pc, #140]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010da:	2201      	movs	r2, #1
 80010dc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010e0:	4b21      	ldr	r3, [pc, #132]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010e6:	4b20      	ldr	r3, [pc, #128]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010ee:	481e      	ldr	r0, [pc, #120]	@ (8001168 <MX_ADC1_Init+0xfc>)
 80010f0:	f000 fdc6 	bl	8001c80 <HAL_ADC_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80010fa:	f000 f8f1 	bl	80012e0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001102:	f107 031c 	add.w	r3, r7, #28
 8001106:	4619      	mov	r1, r3
 8001108:	4817      	ldr	r0, [pc, #92]	@ (8001168 <MX_ADC1_Init+0xfc>)
 800110a:	f001 fd0b 	bl	8002b24 <HAL_ADCEx_MultiModeConfigChannel>
 800110e:	4603      	mov	r3, r0
 8001110:	2b00      	cmp	r3, #0
 8001112:	d001      	beq.n	8001118 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001114:	f000 f8e4 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001118:	4b15      	ldr	r3, [pc, #84]	@ (8001170 <MX_ADC1_Init+0x104>)
 800111a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111c:	2306      	movs	r3, #6
 800111e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001120:	2300      	movs	r3, #0
 8001122:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001124:	237f      	movs	r3, #127	@ 0x7f
 8001126:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001128:	2304      	movs	r3, #4
 800112a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800112c:	2300      	movs	r3, #0
 800112e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	@ (8001168 <MX_ADC1_Init+0xfc>)
 8001136:	f000 ffc3 	bl	80020c0 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8001140:	f000 f8ce 	bl	80012e0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <MX_ADC1_Init+0x108>)
 8001146:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001148:	230c      	movs	r3, #12
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	@ (8001168 <MX_ADC1_Init+0xfc>)
 8001152:	f000 ffb5 	bl	80020c0 <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0xf4>
  {
    Error_Handler();
 800115c:	f000 f8c0 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	@ 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	200001f8 	.word	0x200001f8
 800116c:	50040000 	.word	0x50040000
 8001170:	14f00020 	.word	0x14f00020
 8001174:	19200040 	.word	0x19200040

08001178 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800117c:	4b14      	ldr	r3, [pc, #80]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 800117e:	4a15      	ldr	r2, [pc, #84]	@ (80011d4 <MX_USART2_UART_Init+0x5c>)
 8001180:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001182:	4b13      	ldr	r3, [pc, #76]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 8001184:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001188:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800118a:	4b11      	ldr	r3, [pc, #68]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001190:	4b0f      	ldr	r3, [pc, #60]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 8001192:	2200      	movs	r2, #0
 8001194:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 8001198:	2200      	movs	r2, #0
 800119a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800119c:	4b0c      	ldr	r3, [pc, #48]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 800119e:	220c      	movs	r2, #12
 80011a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a2:	4b0b      	ldr	r3, [pc, #44]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011a8:	4b09      	ldr	r3, [pc, #36]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011ae:	4b08      	ldr	r3, [pc, #32]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ba:	4805      	ldr	r0, [pc, #20]	@ (80011d0 <MX_USART2_UART_Init+0x58>)
 80011bc:	f003 fd68 	bl	8004c90 <HAL_UART_Init>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d001      	beq.n	80011ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011c6:	f000 f88b 	bl	80012e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ca:	bf00      	nop
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200002a4 	.word	0x200002a4
 80011d4:	40004400 	.word	0x40004400

080011d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011de:	4b0c      	ldr	r3, [pc, #48]	@ (8001210 <MX_DMA_Init+0x38>)
 80011e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011e2:	4a0b      	ldr	r2, [pc, #44]	@ (8001210 <MX_DMA_Init+0x38>)
 80011e4:	f043 0301 	orr.w	r3, r3, #1
 80011e8:	6493      	str	r3, [r2, #72]	@ 0x48
 80011ea:	4b09      	ldr	r3, [pc, #36]	@ (8001210 <MX_DMA_Init+0x38>)
 80011ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80011ee:	f003 0301 	and.w	r3, r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	200b      	movs	r0, #11
 80011fc:	f001 fe1d 	bl	8002e3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001200:	200b      	movs	r0, #11
 8001202:	f001 fe36 	bl	8002e72 <HAL_NVIC_EnableIRQ>

}
 8001206:	bf00      	nop
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000

08001214 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	@ 0x28
 8001218:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121a:	f107 0314 	add.w	r3, r7, #20
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
 8001224:	609a      	str	r2, [r3, #8]
 8001226:	60da      	str	r2, [r3, #12]
 8001228:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800122a:	4b2b      	ldr	r3, [pc, #172]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122e:	4a2a      	ldr	r2, [pc, #168]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001236:	4b28      	ldr	r3, [pc, #160]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001242:	4b25      	ldr	r3, [pc, #148]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001246:	4a24      	ldr	r2, [pc, #144]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001248:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800124c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800124e:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800125a:	4b1f      	ldr	r3, [pc, #124]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125e:	4a1e      	ldr	r2, [pc, #120]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001260:	f043 0301 	orr.w	r3, r3, #1
 8001264:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001266:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	60bb      	str	r3, [r7, #8]
 8001270:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001272:	4b19      	ldr	r3, [pc, #100]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001274:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001276:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001278:	f043 0302 	orr.w	r3, r3, #2
 800127c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800127e:	4b16      	ldr	r3, [pc, #88]	@ (80012d8 <MX_GPIO_Init+0xc4>)
 8001280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800128a:	2200      	movs	r2, #0
 800128c:	2120      	movs	r1, #32
 800128e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001292:	f002 f9ab 	bl	80035ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001296:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800129a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800129c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	4619      	mov	r1, r3
 80012ac:	480b      	ldr	r0, [pc, #44]	@ (80012dc <MX_GPIO_Init+0xc8>)
 80012ae:	f001 fff3 	bl	8003298 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012b2:	2320      	movs	r3, #32
 80012b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b6:	2301      	movs	r3, #1
 80012b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012cc:	f001 ffe4 	bl	8003298 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	@ 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40021000 	.word	0x40021000
 80012dc:	48000800 	.word	0x48000800

080012e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <Error_Handler+0x8>

080012ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001330 <HAL_MspInit+0x44>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012f6:	4a0e      	ldr	r2, [pc, #56]	@ (8001330 <HAL_MspInit+0x44>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80012fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001330 <HAL_MspInit+0x44>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800130a:	4b09      	ldr	r3, [pc, #36]	@ (8001330 <HAL_MspInit+0x44>)
 800130c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800130e:	4a08      	ldr	r2, [pc, #32]	@ (8001330 <HAL_MspInit+0x44>)
 8001310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001314:	6593      	str	r3, [r2, #88]	@ 0x58
 8001316:	4b06      	ldr	r3, [pc, #24]	@ (8001330 <HAL_MspInit+0x44>)
 8001318:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800131a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	40021000 	.word	0x40021000

08001334 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b0ac      	sub	sp, #176	@ 0xb0
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800134c:	f107 0314 	add.w	r3, r7, #20
 8001350:	2288      	movs	r2, #136	@ 0x88
 8001352:	2100      	movs	r1, #0
 8001354:	4618      	mov	r0, r3
 8001356:	f004 ffd6 	bl	8006306 <memset>
  if(hadc->Instance==ADC1)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4a3d      	ldr	r2, [pc, #244]	@ (8001454 <HAL_ADC_MspInit+0x120>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d172      	bne.n	800144a <HAL_ADC_MspInit+0x116>

    /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001364:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001368:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800136a:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800136e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001372:	2302      	movs	r3, #2
 8001374:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001376:	2301      	movs	r3, #1
 8001378:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 800137a:	2308      	movs	r3, #8
 800137c:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800137e:	2307      	movs	r3, #7
 8001380:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001382:	2302      	movs	r3, #2
 8001384:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001386:	2302      	movs	r3, #2
 8001388:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800138a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800138e:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	4618      	mov	r0, r3
 8001396:	f002 ffbf 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 80013a0:	f7ff ff9e 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80013a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001458 <HAL_ADC_MspInit+0x124>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001458 <HAL_ADC_MspInit+0x124>)
 80013aa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013b0:	4b29      	ldr	r3, [pc, #164]	@ (8001458 <HAL_ADC_MspInit+0x124>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013b8:	613b      	str	r3, [r7, #16]
 80013ba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <HAL_ADC_MspInit+0x124>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	4a25      	ldr	r2, [pc, #148]	@ (8001458 <HAL_ADC_MspInit+0x124>)
 80013c2:	f043 0301 	orr.w	r3, r3, #1
 80013c6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013c8:	4b23      	ldr	r3, [pc, #140]	@ (8001458 <HAL_ADC_MspInit+0x124>)
 80013ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013cc:	f003 0301 	and.w	r3, r3, #1
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80013d4:	2303      	movs	r3, #3
 80013d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80013da:	230b      	movs	r3, #11
 80013dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80013ea:	4619      	mov	r1, r3
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013f0:	f001 ff52 	bl	8003298 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <HAL_ADC_MspInit+0x128>)
 80013f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001460 <HAL_ADC_MspInit+0x12c>)
 80013f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80013fa:	4b18      	ldr	r3, [pc, #96]	@ (800145c <HAL_ADC_MspInit+0x128>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001400:	4b16      	ldr	r3, [pc, #88]	@ (800145c <HAL_ADC_MspInit+0x128>)
 8001402:	2200      	movs	r2, #0
 8001404:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001406:	4b15      	ldr	r3, [pc, #84]	@ (800145c <HAL_ADC_MspInit+0x128>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800140c:	4b13      	ldr	r3, [pc, #76]	@ (800145c <HAL_ADC_MspInit+0x128>)
 800140e:	2280      	movs	r2, #128	@ 0x80
 8001410:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001412:	4b12      	ldr	r3, [pc, #72]	@ (800145c <HAL_ADC_MspInit+0x128>)
 8001414:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001418:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800141a:	4b10      	ldr	r3, [pc, #64]	@ (800145c <HAL_ADC_MspInit+0x128>)
 800141c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001420:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001422:	4b0e      	ldr	r3, [pc, #56]	@ (800145c <HAL_ADC_MspInit+0x128>)
 8001424:	2220      	movs	r2, #32
 8001426:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001428:	4b0c      	ldr	r3, [pc, #48]	@ (800145c <HAL_ADC_MspInit+0x128>)
 800142a:	2200      	movs	r2, #0
 800142c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800142e:	480b      	ldr	r0, [pc, #44]	@ (800145c <HAL_ADC_MspInit+0x128>)
 8001430:	f001 fd3a 	bl	8002ea8 <HAL_DMA_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_ADC_MspInit+0x10a>
    {
      Error_Handler();
 800143a:	f7ff ff51 	bl	80012e0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a06      	ldr	r2, [pc, #24]	@ (800145c <HAL_ADC_MspInit+0x128>)
 8001442:	64da      	str	r2, [r3, #76]	@ 0x4c
 8001444:	4a05      	ldr	r2, [pc, #20]	@ (800145c <HAL_ADC_MspInit+0x128>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 800144a:	bf00      	nop
 800144c:	37b0      	adds	r7, #176	@ 0xb0
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	50040000 	.word	0x50040000
 8001458:	40021000 	.word	0x40021000
 800145c:	2000025c 	.word	0x2000025c
 8001460:	40020008 	.word	0x40020008

08001464 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b0ac      	sub	sp, #176	@ 0xb0
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800147c:	f107 0314 	add.w	r3, r7, #20
 8001480:	2288      	movs	r2, #136	@ 0x88
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f004 ff3e 	bl	8006306 <memset>
  if(huart->Instance==USART2)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a21      	ldr	r2, [pc, #132]	@ (8001514 <HAL_UART_MspInit+0xb0>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d13b      	bne.n	800150c <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001494:	2302      	movs	r3, #2
 8001496:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001498:	2300      	movs	r3, #0
 800149a:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 ff39 	bl	8004318 <HAL_RCCEx_PeriphCLKConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014ac:	f7ff ff18 	bl	80012e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b0:	4b19      	ldr	r3, [pc, #100]	@ (8001518 <HAL_UART_MspInit+0xb4>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b4:	4a18      	ldr	r2, [pc, #96]	@ (8001518 <HAL_UART_MspInit+0xb4>)
 80014b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80014ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80014bc:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <HAL_UART_MspInit+0xb4>)
 80014be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014c4:	613b      	str	r3, [r7, #16]
 80014c6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	4b13      	ldr	r3, [pc, #76]	@ (8001518 <HAL_UART_MspInit+0xb4>)
 80014ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014cc:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <HAL_UART_MspInit+0xb4>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014d4:	4b10      	ldr	r3, [pc, #64]	@ (8001518 <HAL_UART_MspInit+0xb4>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014d8:	f003 0301 	and.w	r3, r3, #1
 80014dc:	60fb      	str	r3, [r7, #12]
 80014de:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80014e0:	230c      	movs	r3, #12
 80014e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e6:	2302      	movs	r3, #2
 80014e8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ec:	2300      	movs	r3, #0
 80014ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f2:	2303      	movs	r3, #3
 80014f4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014f8:	2307      	movs	r3, #7
 80014fa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014fe:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001502:	4619      	mov	r1, r3
 8001504:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001508:	f001 fec6 	bl	8003298 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800150c:	bf00      	nop
 800150e:	37b0      	adds	r7, #176	@ 0xb0
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	40004400 	.word	0x40004400
 8001518:	40021000 	.word	0x40021000

0800151c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <NMI_Handler+0x4>

08001524 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001528:	bf00      	nop
 800152a:	e7fd      	b.n	8001528 <HardFault_Handler+0x4>

0800152c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <MemManage_Handler+0x4>

08001534 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001538:	bf00      	nop
 800153a:	e7fd      	b.n	8001538 <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	bf00      	nop
 8001542:	e7fd      	b.n	8001540 <UsageFault_Handler+0x4>

08001544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001552:	b480      	push	{r7}
 8001554:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr

08001560 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr

0800156e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001572:	f000 f96b 	bl	800184c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
	...

0800157c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001580:	4802      	ldr	r0, [pc, #8]	@ (800158c <DMA1_Channel1_IRQHandler+0x10>)
 8001582:	f001 fda9 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001586:	bf00      	nop
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	2000025c 	.word	0x2000025c

08001590 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001590:	b480      	push	{r7}
 8001592:	af00      	add	r7, sp, #0
  return 1;
 8001594:	2301      	movs	r3, #1
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <_kill>:

int _kill(int pid, int sig)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015aa:	f004 feff 	bl	80063ac <__errno>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2216      	movs	r2, #22
 80015b2:	601a      	str	r2, [r3, #0]
  return -1;
 80015b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	3708      	adds	r7, #8
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}

080015c0 <_exit>:

void _exit (int status)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ffe7 	bl	80015a0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015d2:	bf00      	nop
 80015d4:	e7fd      	b.n	80015d2 <_exit+0x12>

080015d6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015d6:	b580      	push	{r7, lr}
 80015d8:	b086      	sub	sp, #24
 80015da:	af00      	add	r7, sp, #0
 80015dc:	60f8      	str	r0, [r7, #12]
 80015de:	60b9      	str	r1, [r7, #8]
 80015e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	e00a      	b.n	80015fe <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015e8:	f3af 8000 	nop.w
 80015ec:	4601      	mov	r1, r0
 80015ee:	68bb      	ldr	r3, [r7, #8]
 80015f0:	1c5a      	adds	r2, r3, #1
 80015f2:	60ba      	str	r2, [r7, #8]
 80015f4:	b2ca      	uxtb	r2, r1
 80015f6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	3301      	adds	r3, #1
 80015fc:	617b      	str	r3, [r7, #20]
 80015fe:	697a      	ldr	r2, [r7, #20]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	429a      	cmp	r2, r3
 8001604:	dbf0      	blt.n	80015e8 <_read+0x12>
  }

  return len;
 8001606:	687b      	ldr	r3, [r7, #4]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	60b9      	str	r1, [r7, #8]
 800161a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800161c:	2300      	movs	r3, #0
 800161e:	617b      	str	r3, [r7, #20]
 8001620:	e009      	b.n	8001636 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	1c5a      	adds	r2, r3, #1
 8001626:	60ba      	str	r2, [r7, #8]
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	3301      	adds	r3, #1
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	429a      	cmp	r2, r3
 800163c:	dbf1      	blt.n	8001622 <_write+0x12>
  }
  return len;
 800163e:	687b      	ldr	r3, [r7, #4]
}
 8001640:	4618      	mov	r0, r3
 8001642:	3718      	adds	r7, #24
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <_close>:

int _close(int file)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001650:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001654:	4618      	mov	r0, r3
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr

08001660 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
 8001668:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001670:	605a      	str	r2, [r3, #4]
  return 0;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	370c      	adds	r7, #12
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <_isatty>:

int _isatty(int file)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001688:	2301      	movs	r3, #1
}
 800168a:	4618      	mov	r0, r3
 800168c:	370c      	adds	r7, #12
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr

08001696 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	3714      	adds	r7, #20
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016b8:	4a14      	ldr	r2, [pc, #80]	@ (800170c <_sbrk+0x5c>)
 80016ba:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <_sbrk+0x60>)
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c4:	4b13      	ldr	r3, [pc, #76]	@ (8001714 <_sbrk+0x64>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d102      	bne.n	80016d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016cc:	4b11      	ldr	r3, [pc, #68]	@ (8001714 <_sbrk+0x64>)
 80016ce:	4a12      	ldr	r2, [pc, #72]	@ (8001718 <_sbrk+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d2:	4b10      	ldr	r3, [pc, #64]	@ (8001714 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	429a      	cmp	r2, r3
 80016de:	d207      	bcs.n	80016f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e0:	f004 fe64 	bl	80063ac <__errno>
 80016e4:	4603      	mov	r3, r0
 80016e6:	220c      	movs	r2, #12
 80016e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ea:	f04f 33ff 	mov.w	r3, #4294967295
 80016ee:	e009      	b.n	8001704 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f0:	4b08      	ldr	r3, [pc, #32]	@ (8001714 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016f6:	4b07      	ldr	r3, [pc, #28]	@ (8001714 <_sbrk+0x64>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4413      	add	r3, r2
 80016fe:	4a05      	ldr	r2, [pc, #20]	@ (8001714 <_sbrk+0x64>)
 8001700:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001702:	68fb      	ldr	r3, [r7, #12]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3718      	adds	r7, #24
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20018000 	.word	0x20018000
 8001710:	00000400 	.word	0x00000400
 8001714:	2000032c 	.word	0x2000032c
 8001718:	20000480 	.word	0x20000480

0800171c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001720:	4b06      	ldr	r3, [pc, #24]	@ (800173c <SystemInit+0x20>)
 8001722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001726:	4a05      	ldr	r2, [pc, #20]	@ (800173c <SystemInit+0x20>)
 8001728:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800172c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	e000ed00 	.word	0xe000ed00

08001740 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001740:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001778 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001744:	f7ff ffea 	bl	800171c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480c      	ldr	r0, [pc, #48]	@ (800177c <LoopForever+0x6>)
  ldr r1, =_edata
 800174a:	490d      	ldr	r1, [pc, #52]	@ (8001780 <LoopForever+0xa>)
  ldr r2, =_sidata
 800174c:	4a0d      	ldr	r2, [pc, #52]	@ (8001784 <LoopForever+0xe>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0a      	ldr	r2, [pc, #40]	@ (8001788 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001760:	4c0a      	ldr	r4, [pc, #40]	@ (800178c <LoopForever+0x16>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176e:	f004 fe23 	bl	80063b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001772:	f7ff fbc3 	bl	8000efc <main>

08001776 <LoopForever>:

LoopForever:
    b LoopForever
 8001776:	e7fe      	b.n	8001776 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001778:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800177c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001780:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001784:	080088a4 	.word	0x080088a4
  ldr r2, =_sbss
 8001788:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800178c:	20000480 	.word	0x20000480

08001790 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001790:	e7fe      	b.n	8001790 <ADC1_2_IRQHandler>
	...

08001794 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800179a:	2300      	movs	r3, #0
 800179c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179e:	4b0c      	ldr	r3, [pc, #48]	@ (80017d0 <HAL_Init+0x3c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a0b      	ldr	r2, [pc, #44]	@ (80017d0 <HAL_Init+0x3c>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017a8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f001 fb3a 	bl	8002e24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017b0:	2000      	movs	r0, #0
 80017b2:	f000 f80f 	bl	80017d4 <HAL_InitTick>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d002      	beq.n	80017c2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	71fb      	strb	r3, [r7, #7]
 80017c0:	e001      	b.n	80017c6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80017c2:	f7ff fd93 	bl	80012ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80017c6:	79fb      	ldrb	r3, [r7, #7]
}
 80017c8:	4618      	mov	r0, r3
 80017ca:	3708      	adds	r7, #8
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40022000 	.word	0x40022000

080017d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80017dc:	2300      	movs	r3, #0
 80017de:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80017e0:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <HAL_InitTick+0x6c>)
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d023      	beq.n	8001830 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80017e8:	4b16      	ldr	r3, [pc, #88]	@ (8001844 <HAL_InitTick+0x70>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b14      	ldr	r3, [pc, #80]	@ (8001840 <HAL_InitTick+0x6c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	4619      	mov	r1, r3
 80017f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 fb45 	bl	8002e8e <HAL_SYSTICK_Config>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10f      	bne.n	800182a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2b0f      	cmp	r3, #15
 800180e:	d809      	bhi.n	8001824 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001810:	2200      	movs	r2, #0
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	f04f 30ff 	mov.w	r0, #4294967295
 8001818:	f001 fb0f 	bl	8002e3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800181c:	4a0a      	ldr	r2, [pc, #40]	@ (8001848 <HAL_InitTick+0x74>)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	e007      	b.n	8001834 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001824:	2301      	movs	r3, #1
 8001826:	73fb      	strb	r3, [r7, #15]
 8001828:	e004      	b.n	8001834 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	73fb      	strb	r3, [r7, #15]
 800182e:	e001      	b.n	8001834 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001834:	7bfb      	ldrb	r3, [r7, #15]
}
 8001836:	4618      	mov	r0, r3
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	20000008 	.word	0x20000008
 8001844:	20000000 	.word	0x20000000
 8001848:	20000004 	.word	0x20000004

0800184c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001850:	4b06      	ldr	r3, [pc, #24]	@ (800186c <HAL_IncTick+0x20>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	461a      	mov	r2, r3
 8001856:	4b06      	ldr	r3, [pc, #24]	@ (8001870 <HAL_IncTick+0x24>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4413      	add	r3, r2
 800185c:	4a04      	ldr	r2, [pc, #16]	@ (8001870 <HAL_IncTick+0x24>)
 800185e:	6013      	str	r3, [r2, #0]
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000008 	.word	0x20000008
 8001870:	20000330 	.word	0x20000330

08001874 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return uwTick;
 8001878:	4b03      	ldr	r3, [pc, #12]	@ (8001888 <HAL_GetTick+0x14>)
 800187a:	681b      	ldr	r3, [r3, #0]
}
 800187c:	4618      	mov	r0, r3
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000330 	.word	0x20000330

0800188c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001894:	f7ff ffee 	bl	8001874 <HAL_GetTick>
 8001898:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018a4:	d005      	beq.n	80018b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80018a6:	4b0a      	ldr	r3, [pc, #40]	@ (80018d0 <HAL_Delay+0x44>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	461a      	mov	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4413      	add	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018b2:	bf00      	nop
 80018b4:	f7ff ffde 	bl	8001874 <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	68fa      	ldr	r2, [r7, #12]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d8f7      	bhi.n	80018b4 <HAL_Delay+0x28>
  {
  }
}
 80018c4:	bf00      	nop
 80018c6:	bf00      	nop
 80018c8:	3710      	adds	r7, #16
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000008 	.word	0x20000008

080018d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	431a      	orrs	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	609a      	str	r2, [r3, #8]
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr

080018fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80018fa:	b480      	push	{r7}
 80018fc:	b083      	sub	sp, #12
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
 8001902:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	431a      	orrs	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	609a      	str	r2, [r3, #8]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001930:	4618      	mov	r0, r3
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800193c:	b480      	push	{r7}
 800193e:	b087      	sub	sp, #28
 8001940:	af00      	add	r7, sp, #0
 8001942:	60f8      	str	r0, [r7, #12]
 8001944:	60b9      	str	r1, [r7, #8]
 8001946:	607a      	str	r2, [r7, #4]
 8001948:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3360      	adds	r3, #96	@ 0x60
 800194e:	461a      	mov	r2, r3
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <LL_ADC_SetOffset+0x44>)
 800195e:	4013      	ands	r3, r2
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001966:	683a      	ldr	r2, [r7, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	4313      	orrs	r3, r2
 800196c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001974:	bf00      	nop
 8001976:	371c      	adds	r7, #28
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	03fff000 	.word	0x03fff000

08001984 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	3360      	adds	r3, #96	@ 0x60
 8001992:	461a      	mov	r2, r3
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	4413      	add	r3, r2
 800199a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3360      	adds	r3, #96	@ 0x60
 80019c0:	461a      	mov	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	009b      	lsls	r3, r3, #2
 80019c6:	4413      	add	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	431a      	orrs	r2, r3
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d101      	bne.n	80019fe <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80019fa:	2301      	movs	r3, #1
 80019fc:	e000      	b.n	8001a00 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	370c      	adds	r7, #12
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3330      	adds	r3, #48	@ 0x30
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	f003 030c 	and.w	r3, r3, #12
 8001a28:	4413      	add	r3, r2
 8001a2a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	f003 031f 	and.w	r3, r3, #31
 8001a36:	211f      	movs	r1, #31
 8001a38:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	401a      	ands	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	0e9b      	lsrs	r3, r3, #26
 8001a44:	f003 011f 	and.w	r1, r3, #31
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	f003 031f 	and.w	r3, r3, #31
 8001a4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a52:	431a      	orrs	r2, r3
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a58:	bf00      	nop
 8001a5a:	371c      	adds	r7, #28
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b087      	sub	sp, #28
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	3314      	adds	r3, #20
 8001a74:	461a      	mov	r2, r3
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	0e5b      	lsrs	r3, r3, #25
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	4413      	add	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	0d1b      	lsrs	r3, r3, #20
 8001a8c:	f003 031f 	and.w	r3, r3, #31
 8001a90:	2107      	movs	r1, #7
 8001a92:	fa01 f303 	lsl.w	r3, r1, r3
 8001a96:	43db      	mvns	r3, r3
 8001a98:	401a      	ands	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	0d1b      	lsrs	r3, r3, #20
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	6879      	ldr	r1, [r7, #4]
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001aae:	bf00      	nop
 8001ab0:	371c      	adds	r7, #28
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
	...

08001abc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	f003 0318 	and.w	r3, r3, #24
 8001ade:	4908      	ldr	r1, [pc, #32]	@ (8001b00 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ae0:	40d9      	lsrs	r1, r3
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	400b      	ands	r3, r1
 8001ae6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001aea:	431a      	orrs	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	0007ffff 	.word	0x0007ffff

08001b04 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f003 031f 	and.w	r3, r3, #31
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	6093      	str	r3, [r2, #8]
}
 8001b38:	bf00      	nop
 8001b3a:	370c      	adds	r7, #12
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001b58:	d101      	bne.n	8001b5e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	370c      	adds	r7, #12
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr

08001b6c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001b7c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001b80:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr

08001b94 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001ba8:	d101      	bne.n	8001bae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001baa:	2301      	movs	r3, #1
 8001bac:	e000      	b.n	8001bb0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	370c      	adds	r7, #12
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr

08001bbc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b083      	sub	sp, #12
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001bcc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001bd0:	f043 0201 	orr.w	r2, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr

08001be4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d101      	bne.n	8001bfc <LL_ADC_IsEnabled+0x18>
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e000      	b.n	8001bfe <LL_ADC_IsEnabled+0x1a>
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001c1a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c1e:	f043 0204 	orr.w	r2, r3, #4
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b04      	cmp	r3, #4
 8001c44:	d101      	bne.n	8001c4a <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c46:	2301      	movs	r3, #1
 8001c48:	e000      	b.n	8001c4c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f003 0308 	and.w	r3, r3, #8
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d101      	bne.n	8001c70 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e000      	b.n	8001c72 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
	...

08001c80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b089      	sub	sp, #36	@ 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e130      	b.n	8001efc <HAL_ADC_Init+0x27c>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	691b      	ldr	r3, [r3, #16]
 8001c9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff fb43 	bl	8001334 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff3f 	bl	8001b44 <LL_ADC_IsDeepPowerDownEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff25 	bl	8001b20 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff5a 	bl	8001b94 <LL_ADC_IsInternalRegulatorEnabled>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d115      	bne.n	8001d12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff3e 	bl	8001b6c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cf0:	4b84      	ldr	r3, [pc, #528]	@ (8001f04 <HAL_ADC_Init+0x284>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	4a84      	ldr	r2, [pc, #528]	@ (8001f08 <HAL_ADC_Init+0x288>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	3301      	adds	r3, #1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d04:	e002      	b.n	8001d0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f9      	bne.n	8001d06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff3c 	bl	8001b94 <LL_ADC_IsInternalRegulatorEnabled>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff75 	bl	8001c32 <LL_ADC_REG_IsConversionOngoing>
 8001d48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 80c9 	bne.w	8001eea <HAL_ADC_Init+0x26a>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 80c5 	bne.w	8001eea <HAL_ADC_Init+0x26a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d64:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff35 	bl	8001be4 <LL_ADC_IsEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d115      	bne.n	8001dac <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d80:	4862      	ldr	r0, [pc, #392]	@ (8001f0c <HAL_ADC_Init+0x28c>)
 8001d82:	f7ff ff2f 	bl	8001be4 <LL_ADC_IsEnabled>
 8001d86:	4604      	mov	r4, r0
 8001d88:	4861      	ldr	r0, [pc, #388]	@ (8001f10 <HAL_ADC_Init+0x290>)
 8001d8a:	f7ff ff2b 	bl	8001be4 <LL_ADC_IsEnabled>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	431c      	orrs	r4, r3
 8001d92:	4860      	ldr	r0, [pc, #384]	@ (8001f14 <HAL_ADC_Init+0x294>)
 8001d94:	f7ff ff26 	bl	8001be4 <LL_ADC_IsEnabled>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	4323      	orrs	r3, r4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d105      	bne.n	8001dac <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4619      	mov	r1, r3
 8001da6:	485c      	ldr	r0, [pc, #368]	@ (8001f18 <HAL_ADC_Init+0x298>)
 8001da8:	f7ff fd94 	bl	80018d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7e5b      	ldrb	r3, [r3, #25]
 8001db0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001db6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001dbc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001dc2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d106      	bne.n	8001de8 <HAL_ADC_Init+0x168>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dde:	3b01      	subs	r3, #1
 8001de0:	045b      	lsls	r3, r3, #17
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d009      	beq.n	8001e04 <HAL_ADC_Init+0x184>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001df4:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dfc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	4313      	orrs	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	4b44      	ldr	r3, [pc, #272]	@ (8001f1c <HAL_ADC_Init+0x29c>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	687a      	ldr	r2, [r7, #4]
 8001e10:	6812      	ldr	r2, [r2, #0]
 8001e12:	69b9      	ldr	r1, [r7, #24]
 8001e14:	430b      	orrs	r3, r1
 8001e16:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f7ff ff1b 	bl	8001c58 <LL_ADC_INJ_IsConversionOngoing>
 8001e22:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d13d      	bne.n	8001ea6 <HAL_ADC_Init+0x226>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d13a      	bne.n	8001ea6 <HAL_ADC_Init+0x226>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e34:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e3c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001e4c:	f023 0302 	bic.w	r3, r3, #2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	69b9      	ldr	r1, [r7, #24]
 8001e56:	430b      	orrs	r3, r1
 8001e58:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d118      	bne.n	8001e96 <HAL_ADC_Init+0x216>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	691b      	ldr	r3, [r3, #16]
 8001e6a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001e6e:	f023 0304 	bic.w	r3, r3, #4
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001e7a:	4311      	orrs	r1, r2
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8001e80:	4311      	orrs	r1, r2
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e86:	430a      	orrs	r2, r1
 8001e88:	431a      	orrs	r2, r3
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f042 0201 	orr.w	r2, r2, #1
 8001e92:	611a      	str	r2, [r3, #16]
 8001e94:	e007      	b.n	8001ea6 <HAL_ADC_Init+0x226>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f022 0201 	bic.w	r2, r2, #1
 8001ea4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d10c      	bne.n	8001ec8 <HAL_ADC_Init+0x248>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb4:	f023 010f 	bic.w	r1, r3, #15
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	1e5a      	subs	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	430a      	orrs	r2, r1
 8001ec4:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ec6:	e007      	b.n	8001ed8 <HAL_ADC_Init+0x258>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 020f 	bic.w	r2, r2, #15
 8001ed6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001edc:	f023 0303 	bic.w	r3, r3, #3
 8001ee0:	f043 0201 	orr.w	r2, r3, #1
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	655a      	str	r2, [r3, #84]	@ 0x54
 8001ee8:	e007      	b.n	8001efa <HAL_ADC_Init+0x27a>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001eee:	f043 0210 	orr.w	r2, r3, #16
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001efa:	7ffb      	ldrb	r3, [r7, #31]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3724      	adds	r7, #36	@ 0x24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd90      	pop	{r4, r7, pc}
 8001f04:	20000000 	.word	0x20000000
 8001f08:	053e2d63 	.word	0x053e2d63
 8001f0c:	50040000 	.word	0x50040000
 8001f10:	50040100 	.word	0x50040100
 8001f14:	50040200 	.word	0x50040200
 8001f18:	50040300 	.word	0x50040300
 8001f1c:	fff0c007 	.word	0xfff0c007

08001f20 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f2c:	4853      	ldr	r0, [pc, #332]	@ (800207c <HAL_ADC_Start_DMA+0x15c>)
 8001f2e:	f7ff fde9 	bl	8001b04 <LL_ADC_GetMultimode>
 8001f32:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7ff fe7a 	bl	8001c32 <LL_ADC_REG_IsConversionOngoing>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f040 8093 	bne.w	800206c <HAL_ADC_Start_DMA+0x14c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d101      	bne.n	8001f54 <HAL_ADC_Start_DMA+0x34>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e08e      	b.n	8002072 <HAL_ADC_Start_DMA+0x152>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a47      	ldr	r2, [pc, #284]	@ (8002080 <HAL_ADC_Start_DMA+0x160>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d008      	beq.n	8001f78 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b05      	cmp	r3, #5
 8001f70:	d002      	beq.n	8001f78 <HAL_ADC_Start_DMA+0x58>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b09      	cmp	r3, #9
 8001f76:	d172      	bne.n	800205e <HAL_ADC_Start_DMA+0x13e>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f78:	68f8      	ldr	r0, [r7, #12]
 8001f7a:	f000 fc93 	bl	80028a4 <ADC_Enable>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001f82:	7dfb      	ldrb	r3, [r7, #23]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d165      	bne.n	8002054 <HAL_ADC_Start_DMA+0x134>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001f8c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001f90:	f023 0301 	bic.w	r3, r3, #1
 8001f94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a38      	ldr	r2, [pc, #224]	@ (8002084 <HAL_ADC_Start_DMA+0x164>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d002      	beq.n	8001fac <HAL_ADC_Start_DMA+0x8c>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	e000      	b.n	8001fae <HAL_ADC_Start_DMA+0x8e>
 8001fac:	4b36      	ldr	r3, [pc, #216]	@ (8002088 <HAL_ADC_Start_DMA+0x168>)
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	6812      	ldr	r2, [r2, #0]
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d002      	beq.n	8001fbc <HAL_ADC_Start_DMA+0x9c>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <HAL_ADC_Start_DMA+0xa8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fc0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	655a      	str	r2, [r3, #84]	@ 0x54
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001fcc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <HAL_ADC_Start_DMA+0xc2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001fd8:	f023 0206 	bic.w	r2, r3, #6
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	659a      	str	r2, [r3, #88]	@ 0x58
 8001fe0:	e002      	b.n	8001fe8 <HAL_ADC_Start_DMA+0xc8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fec:	4a27      	ldr	r2, [pc, #156]	@ (800208c <HAL_ADC_Start_DMA+0x16c>)
 8001fee:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ff4:	4a26      	ldr	r2, [pc, #152]	@ (8002090 <HAL_ADC_Start_DMA+0x170>)
 8001ff6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ffc:	4a25      	ldr	r2, [pc, #148]	@ (8002094 <HAL_ADC_Start_DMA+0x174>)
 8001ffe:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	221c      	movs	r2, #28
 8002006:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0210 	orr.w	r2, r2, #16
 800201e:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	68da      	ldr	r2, [r3, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f042 0201 	orr.w	r2, r2, #1
 800202e:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	3340      	adds	r3, #64	@ 0x40
 800203a:	4619      	mov	r1, r3
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f000 ffea 	bl	8003018 <HAL_DMA_Start_IT>
 8002044:	4603      	mov	r3, r0
 8002046:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fddc 	bl	8001c0a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8002052:	e00d      	b.n	8002070 <HAL_ADC_Start_DMA+0x150>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 800205c:	e008      	b.n	8002070 <HAL_ADC_Start_DMA+0x150>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800206a:	e001      	b.n	8002070 <HAL_ADC_Start_DMA+0x150>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800206c:	2302      	movs	r3, #2
 800206e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002070:	7dfb      	ldrb	r3, [r7, #23]
}
 8002072:	4618      	mov	r0, r3
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	50040300 	.word	0x50040300
 8002080:	50040200 	.word	0x50040200
 8002084:	50040100 	.word	0x50040100
 8002088:	50040000 	.word	0x50040000
 800208c:	080029b1 	.word	0x080029b1
 8002090:	08002a89 	.word	0x08002a89
 8002094:	08002aa5 	.word	0x08002aa5

08002098 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b0b6      	sub	sp, #216	@ 0xd8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x22>
 80020de:	2302      	movs	r3, #2
 80020e0:	e3c9      	b.n	8002876 <HAL_ADC_ConfigChannel+0x7b6>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7ff fd9f 	bl	8001c32 <LL_ADC_REG_IsConversionOngoing>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 83aa 	bne.w	8002850 <HAL_ADC_ConfigChannel+0x790>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	2b05      	cmp	r3, #5
 800210a:	d824      	bhi.n	8002156 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	3b02      	subs	r3, #2
 8002112:	2b03      	cmp	r3, #3
 8002114:	d81b      	bhi.n	800214e <HAL_ADC_ConfigChannel+0x8e>
 8002116:	a201      	add	r2, pc, #4	@ (adr r2, 800211c <HAL_ADC_ConfigChannel+0x5c>)
 8002118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800211c:	0800212d 	.word	0x0800212d
 8002120:	08002135 	.word	0x08002135
 8002124:	0800213d 	.word	0x0800213d
 8002128:	08002145 	.word	0x08002145
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 800212c:	230c      	movs	r3, #12
 800212e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002132:	e010      	b.n	8002156 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002134:	2312      	movs	r3, #18
 8002136:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800213a:	e00c      	b.n	8002156 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 800213c:	2318      	movs	r3, #24
 800213e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002142:	e008      	b.n	8002156 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002144:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002148:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 800214c:	e003      	b.n	8002156 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 800214e:	2306      	movs	r3, #6
 8002150:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002154:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	461a      	mov	r2, r3
 8002160:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002164:	f7ff fc52 	bl	8001a0c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4618      	mov	r0, r3
 800216e:	f7ff fd60 	bl	8001c32 <LL_ADC_REG_IsConversionOngoing>
 8002172:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fd6c 	bl	8001c58 <LL_ADC_INJ_IsConversionOngoing>
 8002180:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002184:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002188:	2b00      	cmp	r3, #0
 800218a:	f040 81a4 	bne.w	80024d6 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800218e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002192:	2b00      	cmp	r3, #0
 8002194:	f040 819f 	bne.w	80024d6 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6818      	ldr	r0, [r3, #0]
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	6819      	ldr	r1, [r3, #0]
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	461a      	mov	r2, r3
 80021a6:	f7ff fc5d 	bl	8001a64 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	695a      	ldr	r2, [r3, #20]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	691b      	ldr	r3, [r3, #16]
 80021c8:	2b04      	cmp	r3, #4
 80021ca:	d00a      	beq.n	80021e2 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6818      	ldr	r0, [r3, #0]
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	6919      	ldr	r1, [r3, #16]
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80021dc:	f7ff fbae 	bl	800193c <LL_ADC_SetOffset>
 80021e0:	e179      	b.n	80024d6 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff fbcb 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <HAL_ADC_ConfigChannel+0x14e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2100      	movs	r1, #0
 80021fe:	4618      	mov	r0, r3
 8002200:	f7ff fbc0 	bl	8001984 <LL_ADC_GetOffsetChannel>
 8002204:	4603      	mov	r3, r0
 8002206:	0e9b      	lsrs	r3, r3, #26
 8002208:	f003 021f 	and.w	r2, r3, #31
 800220c:	e01e      	b.n	800224c <HAL_ADC_ConfigChannel+0x18c>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	2100      	movs	r1, #0
 8002214:	4618      	mov	r0, r3
 8002216:	f7ff fbb5 	bl	8001984 <LL_ADC_GetOffsetChannel>
 800221a:	4603      	mov	r3, r0
 800221c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002220:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002224:	fa93 f3a3 	rbit	r3, r3
 8002228:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800222c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002234:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d101      	bne.n	8002240 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 800223c:	2320      	movs	r3, #32
 800223e:	e004      	b.n	800224a <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002240:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002244:	fab3 f383 	clz	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002254:	2b00      	cmp	r3, #0
 8002256:	d105      	bne.n	8002264 <HAL_ADC_ConfigChannel+0x1a4>
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	0e9b      	lsrs	r3, r3, #26
 800225e:	f003 031f 	and.w	r3, r3, #31
 8002262:	e018      	b.n	8002296 <HAL_ADC_ConfigChannel+0x1d6>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002270:	fa93 f3a3 	rbit	r3, r3
 8002274:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 8002278:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800227c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 8002280:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002288:	2320      	movs	r3, #32
 800228a:	e004      	b.n	8002296 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 800228c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002290:	fab3 f383 	clz	r3, r3
 8002294:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002296:	429a      	cmp	r2, r3
 8002298:	d106      	bne.n	80022a8 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2200      	movs	r2, #0
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fb84 	bl	80019b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2101      	movs	r1, #1
 80022ae:	4618      	mov	r0, r3
 80022b0:	f7ff fb68 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10a      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x214>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2101      	movs	r1, #1
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7ff fb5d 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	0e9b      	lsrs	r3, r3, #26
 80022ce:	f003 021f 	and.w	r2, r3, #31
 80022d2:	e01e      	b.n	8002312 <HAL_ADC_ConfigChannel+0x252>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2101      	movs	r1, #1
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff fb52 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80022e0:	4603      	mov	r3, r0
 80022e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80022ea:	fa93 f3a3 	rbit	r3, r3
 80022ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 80022f2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80022f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 80022fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	e004      	b.n	8002310 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002306:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800230a:	fab3 f383 	clz	r3, r3
 800230e:	b2db      	uxtb	r3, r3
 8002310:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800231a:	2b00      	cmp	r3, #0
 800231c:	d105      	bne.n	800232a <HAL_ADC_ConfigChannel+0x26a>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	0e9b      	lsrs	r3, r3, #26
 8002324:	f003 031f 	and.w	r3, r3, #31
 8002328:	e018      	b.n	800235c <HAL_ADC_ConfigChannel+0x29c>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002332:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002336:	fa93 f3a3 	rbit	r3, r3
 800233a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 800233e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002342:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8002346:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 800234e:	2320      	movs	r3, #32
 8002350:	e004      	b.n	800235c <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002352:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002356:	fab3 f383 	clz	r3, r3
 800235a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800235c:	429a      	cmp	r2, r3
 800235e:	d106      	bne.n	800236e <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2200      	movs	r2, #0
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f7ff fb21 	bl	80019b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	2102      	movs	r1, #2
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff fb05 	bl	8001984 <LL_ADC_GetOffsetChannel>
 800237a:	4603      	mov	r3, r0
 800237c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10a      	bne.n	800239a <HAL_ADC_ConfigChannel+0x2da>
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2102      	movs	r1, #2
 800238a:	4618      	mov	r0, r3
 800238c:	f7ff fafa 	bl	8001984 <LL_ADC_GetOffsetChannel>
 8002390:	4603      	mov	r3, r0
 8002392:	0e9b      	lsrs	r3, r3, #26
 8002394:	f003 021f 	and.w	r2, r3, #31
 8002398:	e01e      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x318>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2102      	movs	r1, #2
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7ff faef 	bl	8001984 <LL_ADC_GetOffsetChannel>
 80023a6:	4603      	mov	r3, r0
 80023a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80023b0:	fa93 f3a3 	rbit	r3, r3
 80023b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80023b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80023bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80023c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d101      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80023c8:	2320      	movs	r3, #32
 80023ca:	e004      	b.n	80023d6 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80023cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80023d0:	fab3 f383 	clz	r3, r3
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d105      	bne.n	80023f0 <HAL_ADC_ConfigChannel+0x330>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	0e9b      	lsrs	r3, r3, #26
 80023ea:	f003 031f 	and.w	r3, r3, #31
 80023ee:	e014      	b.n	800241a <HAL_ADC_ConfigChannel+0x35a>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80023f8:	fa93 f3a3 	rbit	r3, r3
 80023fc:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 80023fe:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002400:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8002404:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002408:	2b00      	cmp	r3, #0
 800240a:	d101      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 800240c:	2320      	movs	r3, #32
 800240e:	e004      	b.n	800241a <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002410:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002414:	fab3 f383 	clz	r3, r3
 8002418:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800241a:	429a      	cmp	r2, r3
 800241c:	d106      	bne.n	800242c <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2200      	movs	r2, #0
 8002424:	2102      	movs	r1, #2
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fac2 	bl	80019b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2103      	movs	r1, #3
 8002432:	4618      	mov	r0, r3
 8002434:	f7ff faa6 	bl	8001984 <LL_ADC_GetOffsetChannel>
 8002438:	4603      	mov	r3, r0
 800243a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10a      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x398>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	2103      	movs	r1, #3
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff fa9b 	bl	8001984 <LL_ADC_GetOffsetChannel>
 800244e:	4603      	mov	r3, r0
 8002450:	0e9b      	lsrs	r3, r3, #26
 8002452:	f003 021f 	and.w	r2, r3, #31
 8002456:	e017      	b.n	8002488 <HAL_ADC_ConfigChannel+0x3c8>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	2103      	movs	r1, #3
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff fa90 	bl	8001984 <LL_ADC_GetOffsetChannel>
 8002464:	4603      	mov	r3, r0
 8002466:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800246a:	fa93 f3a3 	rbit	r3, r3
 800246e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002470:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002472:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8002474:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800247a:	2320      	movs	r3, #32
 800247c:	e003      	b.n	8002486 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 800247e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002480:	fab3 f383 	clz	r3, r3
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002490:	2b00      	cmp	r3, #0
 8002492:	d105      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x3e0>
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	0e9b      	lsrs	r3, r3, #26
 800249a:	f003 031f 	and.w	r3, r3, #31
 800249e:	e011      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x404>
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80024a8:	fa93 f3a3 	rbit	r3, r3
 80024ac:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80024ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80024b0:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80024b2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80024b8:	2320      	movs	r3, #32
 80024ba:	e003      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80024bc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80024be:	fab3 f383 	clz	r3, r3
 80024c2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024c4:	429a      	cmp	r2, r3
 80024c6:	d106      	bne.n	80024d6 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2103      	movs	r1, #3
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fa6d 	bl	80019b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f7ff fb82 	bl	8001be4 <LL_ADC_IsEnabled>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f040 8140 	bne.w	8002768 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6818      	ldr	r0, [r3, #0]
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	6819      	ldr	r1, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	461a      	mov	r2, r3
 80024f6:	f7ff fae1 	bl	8001abc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	4a8f      	ldr	r2, [pc, #572]	@ (800273c <HAL_ADC_ConfigChannel+0x67c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	f040 8131 	bne.w	8002768 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_ADC_ConfigChannel+0x46e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	0e9b      	lsrs	r3, r3, #26
 800251c:	3301      	adds	r3, #1
 800251e:	f003 031f 	and.w	r3, r3, #31
 8002522:	2b09      	cmp	r3, #9
 8002524:	bf94      	ite	ls
 8002526:	2301      	movls	r3, #1
 8002528:	2300      	movhi	r3, #0
 800252a:	b2db      	uxtb	r3, r3
 800252c:	e019      	b.n	8002562 <HAL_ADC_ConfigChannel+0x4a2>
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002536:	fa93 f3a3 	rbit	r3, r3
 800253a:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800253c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800253e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8002540:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002546:	2320      	movs	r3, #32
 8002548:	e003      	b.n	8002552 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800254a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800254c:	fab3 f383 	clz	r3, r3
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3301      	adds	r3, #1
 8002554:	f003 031f 	and.w	r3, r3, #31
 8002558:	2b09      	cmp	r3, #9
 800255a:	bf94      	ite	ls
 800255c:	2301      	movls	r3, #1
 800255e:	2300      	movhi	r3, #0
 8002560:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002562:	2b00      	cmp	r3, #0
 8002564:	d079      	beq.n	800265a <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800256e:	2b00      	cmp	r3, #0
 8002570:	d107      	bne.n	8002582 <HAL_ADC_ConfigChannel+0x4c2>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	0e9b      	lsrs	r3, r3, #26
 8002578:	3301      	adds	r3, #1
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002580:	e015      	b.n	80025ae <HAL_ADC_ConfigChannel+0x4ee>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800258a:	fa93 f3a3 	rbit	r3, r3
 800258e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 8002590:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002592:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 8002594:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002596:	2b00      	cmp	r3, #0
 8002598:	d101      	bne.n	800259e <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800259a:	2320      	movs	r3, #32
 800259c:	e003      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800259e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80025a0:	fab3 f383 	clz	r3, r3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	3301      	adds	r3, #1
 80025a8:	069b      	lsls	r3, r3, #26
 80025aa:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x50e>
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	0e9b      	lsrs	r3, r3, #26
 80025c0:	3301      	adds	r3, #1
 80025c2:	f003 031f 	and.w	r3, r3, #31
 80025c6:	2101      	movs	r1, #1
 80025c8:	fa01 f303 	lsl.w	r3, r1, r3
 80025cc:	e017      	b.n	80025fe <HAL_ADC_ConfigChannel+0x53e>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80025d6:	fa93 f3a3 	rbit	r3, r3
 80025da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80025dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80025de:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 80025e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80025e6:	2320      	movs	r3, #32
 80025e8:	e003      	b.n	80025f2 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80025ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025ec:	fab3 f383 	clz	r3, r3
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	3301      	adds	r3, #1
 80025f4:	f003 031f 	and.w	r3, r3, #31
 80025f8:	2101      	movs	r1, #1
 80025fa:	fa01 f303 	lsl.w	r3, r1, r3
 80025fe:	ea42 0103 	orr.w	r1, r2, r3
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10a      	bne.n	8002624 <HAL_ADC_ConfigChannel+0x564>
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	0e9b      	lsrs	r3, r3, #26
 8002614:	3301      	adds	r3, #1
 8002616:	f003 021f 	and.w	r2, r3, #31
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	051b      	lsls	r3, r3, #20
 8002622:	e018      	b.n	8002656 <HAL_ADC_ConfigChannel+0x596>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262c:	fa93 f3a3 	rbit	r3, r3
 8002630:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8002632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002634:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8002636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 800263c:	2320      	movs	r3, #32
 800263e:	e003      	b.n	8002648 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002642:	fab3 f383 	clz	r3, r3
 8002646:	b2db      	uxtb	r3, r3
 8002648:	3301      	adds	r3, #1
 800264a:	f003 021f 	and.w	r2, r3, #31
 800264e:	4613      	mov	r3, r2
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	4413      	add	r3, r2
 8002654:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002656:	430b      	orrs	r3, r1
 8002658:	e081      	b.n	800275e <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002662:	2b00      	cmp	r3, #0
 8002664:	d107      	bne.n	8002676 <HAL_ADC_ConfigChannel+0x5b6>
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	0e9b      	lsrs	r3, r3, #26
 800266c:	3301      	adds	r3, #1
 800266e:	069b      	lsls	r3, r3, #26
 8002670:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002674:	e015      	b.n	80026a2 <HAL_ADC_ConfigChannel+0x5e2>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800267e:	fa93 f3a3 	rbit	r3, r3
 8002682:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 8002684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002686:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 8002688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800268a:	2b00      	cmp	r3, #0
 800268c:	d101      	bne.n	8002692 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800268e:	2320      	movs	r3, #32
 8002690:	e003      	b.n	800269a <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002694:	fab3 f383 	clz	r3, r3
 8002698:	b2db      	uxtb	r3, r3
 800269a:	3301      	adds	r3, #1
 800269c:	069b      	lsls	r3, r3, #26
 800269e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d109      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x602>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	0e9b      	lsrs	r3, r3, #26
 80026b4:	3301      	adds	r3, #1
 80026b6:	f003 031f 	and.w	r3, r3, #31
 80026ba:	2101      	movs	r1, #1
 80026bc:	fa01 f303 	lsl.w	r3, r1, r3
 80026c0:	e017      	b.n	80026f2 <HAL_ADC_ConfigChannel+0x632>
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	fa93 f3a3 	rbit	r3, r3
 80026ce:	61bb      	str	r3, [r7, #24]
  return result;
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d101      	bne.n	80026de <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80026da:	2320      	movs	r3, #32
 80026dc:	e003      	b.n	80026e6 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80026de:	6a3b      	ldr	r3, [r7, #32]
 80026e0:	fab3 f383 	clz	r3, r3
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	3301      	adds	r3, #1
 80026e8:	f003 031f 	and.w	r3, r3, #31
 80026ec:	2101      	movs	r1, #1
 80026ee:	fa01 f303 	lsl.w	r3, r1, r3
 80026f2:	ea42 0103 	orr.w	r1, r2, r3
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10d      	bne.n	800271e <HAL_ADC_ConfigChannel+0x65e>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	0e9b      	lsrs	r3, r3, #26
 8002708:	3301      	adds	r3, #1
 800270a:	f003 021f 	and.w	r2, r3, #31
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	3b1e      	subs	r3, #30
 8002716:	051b      	lsls	r3, r3, #20
 8002718:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800271c:	e01e      	b.n	800275c <HAL_ADC_ConfigChannel+0x69c>
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	fa93 f3a3 	rbit	r3, r3
 800272a:	60fb      	str	r3, [r7, #12]
  return result;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d104      	bne.n	8002740 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002736:	2320      	movs	r3, #32
 8002738:	e006      	b.n	8002748 <HAL_ADC_ConfigChannel+0x688>
 800273a:	bf00      	nop
 800273c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	fab3 f383 	clz	r3, r3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	3301      	adds	r3, #1
 800274a:	f003 021f 	and.w	r2, r3, #31
 800274e:	4613      	mov	r3, r2
 8002750:	005b      	lsls	r3, r3, #1
 8002752:	4413      	add	r3, r2
 8002754:	3b1e      	subs	r3, #30
 8002756:	051b      	lsls	r3, r3, #20
 8002758:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800275c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800275e:	683a      	ldr	r2, [r7, #0]
 8002760:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002762:	4619      	mov	r1, r3
 8002764:	f7ff f97e 	bl	8001a64 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4b44      	ldr	r3, [pc, #272]	@ (8002880 <HAL_ADC_ConfigChannel+0x7c0>)
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d07a      	beq.n	800286a <HAL_ADC_ConfigChannel+0x7aa>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002774:	4843      	ldr	r0, [pc, #268]	@ (8002884 <HAL_ADC_ConfigChannel+0x7c4>)
 8002776:	f7ff f8d3 	bl	8001920 <LL_ADC_GetCommonPathInternalCh>
 800277a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a41      	ldr	r2, [pc, #260]	@ (8002888 <HAL_ADC_ConfigChannel+0x7c8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d12c      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x722>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002788:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800278c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002790:	2b00      	cmp	r3, #0
 8002792:	d126      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x722>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a3c      	ldr	r2, [pc, #240]	@ (800288c <HAL_ADC_ConfigChannel+0x7cc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d004      	beq.n	80027a8 <HAL_ADC_ConfigChannel+0x6e8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002890 <HAL_ADC_ConfigChannel+0x7d0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d15d      	bne.n	8002864 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027ac:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80027b0:	4619      	mov	r1, r3
 80027b2:	4834      	ldr	r0, [pc, #208]	@ (8002884 <HAL_ADC_ConfigChannel+0x7c4>)
 80027b4:	f7ff f8a1 	bl	80018fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027b8:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <HAL_ADC_ConfigChannel+0x7d4>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	099b      	lsrs	r3, r3, #6
 80027be:	4a36      	ldr	r2, [pc, #216]	@ (8002898 <HAL_ADC_ConfigChannel+0x7d8>)
 80027c0:	fba2 2303 	umull	r2, r3, r2, r3
 80027c4:	099b      	lsrs	r3, r3, #6
 80027c6:	1c5a      	adds	r2, r3, #1
 80027c8:	4613      	mov	r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027d2:	e002      	b.n	80027da <HAL_ADC_ConfigChannel+0x71a>
          {
            wait_loop_index--;
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1f9      	bne.n	80027d4 <HAL_ADC_ConfigChannel+0x714>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80027e0:	e040      	b.n	8002864 <HAL_ADC_ConfigChannel+0x7a4>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2d      	ldr	r2, [pc, #180]	@ (800289c <HAL_ADC_ConfigChannel+0x7dc>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d118      	bne.n	800281e <HAL_ADC_ConfigChannel+0x75e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80027ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80027f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d112      	bne.n	800281e <HAL_ADC_ConfigChannel+0x75e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a23      	ldr	r2, [pc, #140]	@ (800288c <HAL_ADC_ConfigChannel+0x7cc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d004      	beq.n	800280c <HAL_ADC_ConfigChannel+0x74c>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a22      	ldr	r2, [pc, #136]	@ (8002890 <HAL_ADC_ConfigChannel+0x7d0>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d12d      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800280c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002810:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002814:	4619      	mov	r1, r3
 8002816:	481b      	ldr	r0, [pc, #108]	@ (8002884 <HAL_ADC_ConfigChannel+0x7c4>)
 8002818:	f7ff f86f 	bl	80018fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800281c:	e024      	b.n	8002868 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a1f      	ldr	r2, [pc, #124]	@ (80028a0 <HAL_ADC_ConfigChannel+0x7e0>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d120      	bne.n	800286a <HAL_ADC_ConfigChannel+0x7aa>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002828:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800282c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d11a      	bne.n	800286a <HAL_ADC_ConfigChannel+0x7aa>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a14      	ldr	r2, [pc, #80]	@ (800288c <HAL_ADC_ConfigChannel+0x7cc>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d115      	bne.n	800286a <HAL_ADC_ConfigChannel+0x7aa>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800283e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002842:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002846:	4619      	mov	r1, r3
 8002848:	480e      	ldr	r0, [pc, #56]	@ (8002884 <HAL_ADC_ConfigChannel+0x7c4>)
 800284a:	f7ff f856 	bl	80018fa <LL_ADC_SetCommonPathInternalCh>
 800284e:	e00c      	b.n	800286a <HAL_ADC_ConfigChannel+0x7aa>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002854:	f043 0220 	orr.w	r2, r3, #32
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8002862:	e002      	b.n	800286a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002864:	bf00      	nop
 8002866:	e000      	b.n	800286a <HAL_ADC_ConfigChannel+0x7aa>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002868:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002872:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002876:	4618      	mov	r0, r3
 8002878:	37d8      	adds	r7, #216	@ 0xd8
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	80080000 	.word	0x80080000
 8002884:	50040300 	.word	0x50040300
 8002888:	c7520000 	.word	0xc7520000
 800288c:	50040000 	.word	0x50040000
 8002890:	50040200 	.word	0x50040200
 8002894:	20000000 	.word	0x20000000
 8002898:	053e2d63 	.word	0x053e2d63
 800289c:	cb840000 	.word	0xcb840000
 80028a0:	80000001 	.word	0x80000001

080028a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4618      	mov	r0, r3
 80028b6:	f7ff f995 	bl	8001be4 <LL_ADC_IsEnabled>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d169      	bne.n	8002994 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689a      	ldr	r2, [r3, #8]
 80028c6:	4b36      	ldr	r3, [pc, #216]	@ (80029a0 <ADC_Enable+0xfc>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d00d      	beq.n	80028ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028d2:	f043 0210 	orr.w	r2, r3, #16
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028de:	f043 0201 	orr.w	r2, r3, #1
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e055      	b.n	8002996 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4618      	mov	r0, r3
 80028f0:	f7ff f964 	bl	8001bbc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80028f4:	482b      	ldr	r0, [pc, #172]	@ (80029a4 <ADC_Enable+0x100>)
 80028f6:	f7ff f813 	bl	8001920 <LL_ADC_GetCommonPathInternalCh>
 80028fa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80028fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002904:	4b28      	ldr	r3, [pc, #160]	@ (80029a8 <ADC_Enable+0x104>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	099b      	lsrs	r3, r3, #6
 800290a:	4a28      	ldr	r2, [pc, #160]	@ (80029ac <ADC_Enable+0x108>)
 800290c:	fba2 2303 	umull	r2, r3, r2, r3
 8002910:	099b      	lsrs	r3, r3, #6
 8002912:	1c5a      	adds	r2, r3, #1
 8002914:	4613      	mov	r3, r2
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800291e:	e002      	b.n	8002926 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	3b01      	subs	r3, #1
 8002924:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f9      	bne.n	8002920 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800292c:	f7fe ffa2 	bl	8001874 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002932:	e028      	b.n	8002986 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f7ff f953 	bl	8001be4 <LL_ADC_IsEnabled>
 800293e:	4603      	mov	r3, r0
 8002940:	2b00      	cmp	r3, #0
 8002942:	d104      	bne.n	800294e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f937 	bl	8001bbc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800294e:	f7fe ff91 	bl	8001874 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d914      	bls.n	8002986 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b01      	cmp	r3, #1
 8002968:	d00d      	beq.n	8002986 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800296e:	f043 0210 	orr.w	r2, r3, #16
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800297a:	f043 0201 	orr.w	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e007      	b.n	8002996 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	2b01      	cmp	r3, #1
 8002992:	d1cf      	bne.n	8002934 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3710      	adds	r7, #16
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	8000003f 	.word	0x8000003f
 80029a4:	50040300 	.word	0x50040300
 80029a8:	20000000 	.word	0x20000000
 80029ac:	053e2d63 	.word	0x053e2d63

080029b0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029c2:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d14b      	bne.n	8002a62 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ce:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d021      	beq.n	8002a28 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7fe fffc 	bl	80019e6 <LL_ADC_REG_IsTriggerSourceSWStart>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d032      	beq.n	8002a5a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d12b      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d11f      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a1e:	f043 0201 	orr.w	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a26:	e018      	b.n	8002a5a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	f003 0302 	and.w	r3, r3, #2
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d111      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a3a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a46:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d105      	bne.n	8002a5a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a52:	f043 0201 	orr.w	r2, r3, #1
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f7fe fa3a 	bl	8000ed4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a60:	e00e      	b.n	8002a80 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d003      	beq.n	8002a76 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f7ff fb1c 	bl	80020ac <HAL_ADC_ErrorCallback>
}
 8002a74:	e004      	b.n	8002a80 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a7c:	6878      	ldr	r0, [r7, #4]
 8002a7e:	4798      	blx	r3
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a94:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f7ff fafe 	bl	8002098 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ab0:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ab6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac2:	f043 0204 	orr.w	r2, r3, #4
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f7ff faee 	bl	80020ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <LL_ADC_IsEnabled>:
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	f003 0301 	and.w	r3, r3, #1
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <LL_ADC_IsEnabled+0x18>
 8002aec:	2301      	movs	r3, #1
 8002aee:	e000      	b.n	8002af2 <LL_ADC_IsEnabled+0x1a>
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <LL_ADC_REG_IsConversionOngoing>:
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0304 	and.w	r3, r3, #4
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d101      	bne.n	8002b16 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b12:	2301      	movs	r3, #1
 8002b14:	e000      	b.n	8002b18 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002b24:	b590      	push	{r4, r7, lr}
 8002b26:	b09f      	sub	sp, #124	@ 0x7c
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002b3a:	2b01      	cmp	r3, #1
 8002b3c:	d101      	bne.n	8002b42 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002b3e:	2302      	movs	r3, #2
 8002b40:	e093      	b.n	8002c6a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002b4e:	2300      	movs	r3, #0
 8002b50:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a47      	ldr	r2, [pc, #284]	@ (8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d102      	bne.n	8002b62 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002b5c:	4b46      	ldr	r3, [pc, #280]	@ (8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	e001      	b.n	8002b66 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002b62:	2300      	movs	r3, #0
 8002b64:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d10b      	bne.n	8002b84 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e072      	b.n	8002c6a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f7ff ffb9 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
 8002b8c:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff ffb3 	bl	8002afe <LL_ADC_REG_IsConversionOngoing>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d154      	bne.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002b9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d151      	bne.n	8002c48 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002ba4:	4b35      	ldr	r3, [pc, #212]	@ (8002c7c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8002ba6:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d02c      	beq.n	8002c0a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002bb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bc2:	035b      	lsls	r3, r3, #13
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bca:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002bcc:	4829      	ldr	r0, [pc, #164]	@ (8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002bce:	f7ff ff83 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002bd2:	4604      	mov	r4, r0
 8002bd4:	4828      	ldr	r0, [pc, #160]	@ (8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002bd6:	f7ff ff7f 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002bda:	4603      	mov	r3, r0
 8002bdc:	431c      	orrs	r4, r3
 8002bde:	4828      	ldr	r0, [pc, #160]	@ (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002be0:	f7ff ff7a 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002be4:	4603      	mov	r3, r0
 8002be6:	4323      	orrs	r3, r4
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d137      	bne.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002bf4:	f023 030f 	bic.w	r3, r3, #15
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	6811      	ldr	r1, [r2, #0]
 8002bfc:	683a      	ldr	r2, [r7, #0]
 8002bfe:	6892      	ldr	r2, [r2, #8]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	431a      	orrs	r2, r3
 8002c04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c06:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c08:	e028      	b.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002c12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c14:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c16:	4817      	ldr	r0, [pc, #92]	@ (8002c74 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8002c18:	f7ff ff5e 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002c1c:	4604      	mov	r4, r0
 8002c1e:	4816      	ldr	r0, [pc, #88]	@ (8002c78 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8002c20:	f7ff ff5a 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002c24:	4603      	mov	r3, r0
 8002c26:	431c      	orrs	r4, r3
 8002c28:	4815      	ldr	r0, [pc, #84]	@ (8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8002c2a:	f7ff ff55 	bl	8002ad8 <LL_ADC_IsEnabled>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	4323      	orrs	r3, r4
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d112      	bne.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002c3e:	f023 030f 	bic.w	r3, r3, #15
 8002c42:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002c44:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c46:	e009      	b.n	8002c5c <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c4c:	f043 0220 	orr.w	r2, r3, #32
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002c54:	2301      	movs	r3, #1
 8002c56:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 8002c5a:	e000      	b.n	8002c5e <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002c5c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002c66:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	377c      	adds	r7, #124	@ 0x7c
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd90      	pop	{r4, r7, pc}
 8002c72:	bf00      	nop
 8002c74:	50040000 	.word	0x50040000
 8002c78:	50040100 	.word	0x50040100
 8002c7c:	50040300 	.word	0x50040300
 8002c80:	50040200 	.word	0x50040200

08002c84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c94:	4b0c      	ldr	r3, [pc, #48]	@ (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c9a:	68ba      	ldr	r2, [r7, #8]
 8002c9c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002cb0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002cb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cb6:	4a04      	ldr	r2, [pc, #16]	@ (8002cc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	60d3      	str	r3, [r2, #12]
}
 8002cbc:	bf00      	nop
 8002cbe:	3714      	adds	r7, #20
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr
 8002cc8:	e000ed00 	.word	0xe000ed00

08002ccc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cd0:	4b04      	ldr	r3, [pc, #16]	@ (8002ce4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	0a1b      	lsrs	r3, r3, #8
 8002cd6:	f003 0307 	and.w	r3, r3, #7
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr
 8002ce4:	e000ed00 	.word	0xe000ed00

08002ce8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	4603      	mov	r3, r0
 8002cf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	db0b      	blt.n	8002d12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	f003 021f 	and.w	r2, r3, #31
 8002d00:	4907      	ldr	r1, [pc, #28]	@ (8002d20 <__NVIC_EnableIRQ+0x38>)
 8002d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d06:	095b      	lsrs	r3, r3, #5
 8002d08:	2001      	movs	r0, #1
 8002d0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000e100 	.word	0xe000e100

08002d24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	6039      	str	r1, [r7, #0]
 8002d2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	db0a      	blt.n	8002d4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	490c      	ldr	r1, [pc, #48]	@ (8002d70 <__NVIC_SetPriority+0x4c>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	b2d2      	uxtb	r2, r2
 8002d46:	440b      	add	r3, r1
 8002d48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d4c:	e00a      	b.n	8002d64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	4908      	ldr	r1, [pc, #32]	@ (8002d74 <__NVIC_SetPriority+0x50>)
 8002d54:	79fb      	ldrb	r3, [r7, #7]
 8002d56:	f003 030f 	and.w	r3, r3, #15
 8002d5a:	3b04      	subs	r3, #4
 8002d5c:	0112      	lsls	r2, r2, #4
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	440b      	add	r3, r1
 8002d62:	761a      	strb	r2, [r3, #24]
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6e:	4770      	bx	lr
 8002d70:	e000e100 	.word	0xe000e100
 8002d74:	e000ed00 	.word	0xe000ed00

08002d78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b089      	sub	sp, #36	@ 0x24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f1c3 0307 	rsb	r3, r3, #7
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	bf28      	it	cs
 8002d96:	2304      	movcs	r3, #4
 8002d98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	2b06      	cmp	r3, #6
 8002da0:	d902      	bls.n	8002da8 <NVIC_EncodePriority+0x30>
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	3b03      	subs	r3, #3
 8002da6:	e000      	b.n	8002daa <NVIC_EncodePriority+0x32>
 8002da8:	2300      	movs	r3, #0
 8002daa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	fa02 f303 	lsl.w	r3, r2, r3
 8002db6:	43da      	mvns	r2, r3
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	401a      	ands	r2, r3
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002dca:	43d9      	mvns	r1, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	4313      	orrs	r3, r2
         );
}
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	3724      	adds	r7, #36	@ 0x24
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ddc:	4770      	bx	lr
	...

08002de0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002df0:	d301      	bcc.n	8002df6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002df2:	2301      	movs	r3, #1
 8002df4:	e00f      	b.n	8002e16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002df6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e20 <SysTick_Config+0x40>)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	3b01      	subs	r3, #1
 8002dfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dfe:	210f      	movs	r1, #15
 8002e00:	f04f 30ff 	mov.w	r0, #4294967295
 8002e04:	f7ff ff8e 	bl	8002d24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e08:	4b05      	ldr	r3, [pc, #20]	@ (8002e20 <SysTick_Config+0x40>)
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e0e:	4b04      	ldr	r3, [pc, #16]	@ (8002e20 <SysTick_Config+0x40>)
 8002e10:	2207      	movs	r2, #7
 8002e12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	e000e010 	.word	0xe000e010

08002e24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f7ff ff29 	bl	8002c84 <__NVIC_SetPriorityGrouping>
}
 8002e32:	bf00      	nop
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b086      	sub	sp, #24
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	4603      	mov	r3, r0
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	607a      	str	r2, [r7, #4]
 8002e46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e4c:	f7ff ff3e 	bl	8002ccc <__NVIC_GetPriorityGrouping>
 8002e50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	68b9      	ldr	r1, [r7, #8]
 8002e56:	6978      	ldr	r0, [r7, #20]
 8002e58:	f7ff ff8e 	bl	8002d78 <NVIC_EncodePriority>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff ff5d 	bl	8002d24 <__NVIC_SetPriority>
}
 8002e6a:	bf00      	nop
 8002e6c:	3718      	adds	r7, #24
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	4603      	mov	r3, r0
 8002e7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7ff ff31 	bl	8002ce8 <__NVIC_EnableIRQ>
}
 8002e86:	bf00      	nop
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7ff ffa2 	bl	8002de0 <SysTick_Config>
 8002e9c:	4603      	mov	r3, r0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
	...

08002ea8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b085      	sub	sp, #20
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e098      	b.n	8002fec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	4b4d      	ldr	r3, [pc, #308]	@ (8002ff8 <HAL_DMA_Init+0x150>)
 8002ec2:	429a      	cmp	r2, r3
 8002ec4:	d80f      	bhi.n	8002ee6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	@ (8002ffc <HAL_DMA_Init+0x154>)
 8002ece:	4413      	add	r3, r2
 8002ed0:	4a4b      	ldr	r2, [pc, #300]	@ (8003000 <HAL_DMA_Init+0x158>)
 8002ed2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ed6:	091b      	lsrs	r3, r3, #4
 8002ed8:	009a      	lsls	r2, r3, #2
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a48      	ldr	r2, [pc, #288]	@ (8003004 <HAL_DMA_Init+0x15c>)
 8002ee2:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ee4:	e00e      	b.n	8002f04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b46      	ldr	r3, [pc, #280]	@ (8003008 <HAL_DMA_Init+0x160>)
 8002eee:	4413      	add	r3, r2
 8002ef0:	4a43      	ldr	r2, [pc, #268]	@ (8003000 <HAL_DMA_Init+0x158>)
 8002ef2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef6:	091b      	lsrs	r3, r3, #4
 8002ef8:	009a      	lsls	r2, r3, #2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a42      	ldr	r2, [pc, #264]	@ (800300c <HAL_DMA_Init+0x164>)
 8002f02:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a1b      	ldr	r3, [r3, #32]
 8002f46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002f5e:	d039      	beq.n	8002fd4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	4a27      	ldr	r2, [pc, #156]	@ (8003004 <HAL_DMA_Init+0x15c>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d11a      	bne.n	8002fa0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f6a:	4b29      	ldr	r3, [pc, #164]	@ (8003010 <HAL_DMA_Init+0x168>)
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f72:	f003 031c 	and.w	r3, r3, #28
 8002f76:	210f      	movs	r1, #15
 8002f78:	fa01 f303 	lsl.w	r3, r1, r3
 8002f7c:	43db      	mvns	r3, r3
 8002f7e:	4924      	ldr	r1, [pc, #144]	@ (8003010 <HAL_DMA_Init+0x168>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002f84:	4b22      	ldr	r3, [pc, #136]	@ (8003010 <HAL_DMA_Init+0x168>)
 8002f86:	681a      	ldr	r2, [r3, #0]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6859      	ldr	r1, [r3, #4]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f90:	f003 031c 	and.w	r3, r3, #28
 8002f94:	fa01 f303 	lsl.w	r3, r1, r3
 8002f98:	491d      	ldr	r1, [pc, #116]	@ (8003010 <HAL_DMA_Init+0x168>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	600b      	str	r3, [r1, #0]
 8002f9e:	e019      	b.n	8002fd4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fa0:	4b1c      	ldr	r3, [pc, #112]	@ (8003014 <HAL_DMA_Init+0x16c>)
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa8:	f003 031c 	and.w	r3, r3, #28
 8002fac:	210f      	movs	r1, #15
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43db      	mvns	r3, r3
 8002fb4:	4917      	ldr	r1, [pc, #92]	@ (8003014 <HAL_DMA_Init+0x16c>)
 8002fb6:	4013      	ands	r3, r2
 8002fb8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fba:	4b16      	ldr	r3, [pc, #88]	@ (8003014 <HAL_DMA_Init+0x16c>)
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6859      	ldr	r1, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc6:	f003 031c 	and.w	r3, r3, #28
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	4911      	ldr	r1, [pc, #68]	@ (8003014 <HAL_DMA_Init+0x16c>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3714      	adds	r7, #20
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	40020407 	.word	0x40020407
 8002ffc:	bffdfff8 	.word	0xbffdfff8
 8003000:	cccccccd 	.word	0xcccccccd
 8003004:	40020000 	.word	0x40020000
 8003008:	bffdfbf8 	.word	0xbffdfbf8
 800300c:	40020400 	.word	0x40020400
 8003010:	400200a8 	.word	0x400200a8
 8003014:	400204a8 	.word	0x400204a8

08003018 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	607a      	str	r2, [r7, #4]
 8003024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_DMA_Start_IT+0x20>
 8003034:	2302      	movs	r3, #2
 8003036:	e04b      	b.n	80030d0 <HAL_DMA_Start_IT+0xb8>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b01      	cmp	r3, #1
 800304a:	d13a      	bne.n	80030c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2202      	movs	r2, #2
 8003050:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	2200      	movs	r2, #0
 8003058:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f022 0201 	bic.w	r2, r2, #1
 8003068:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	68b9      	ldr	r1, [r7, #8]
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f8e0 	bl	8003236 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800307a:	2b00      	cmp	r3, #0
 800307c:	d008      	beq.n	8003090 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f042 020e 	orr.w	r2, r2, #14
 800308c:	601a      	str	r2, [r3, #0]
 800308e:	e00f      	b.n	80030b0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0204 	bic.w	r2, r2, #4
 800309e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 020a 	orr.w	r2, r2, #10
 80030ae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e005      	b.n	80030ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b084      	sub	sp, #16
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f4:	f003 031c 	and.w	r3, r3, #28
 80030f8:	2204      	movs	r2, #4
 80030fa:	409a      	lsls	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d026      	beq.n	8003152 <HAL_DMA_IRQHandler+0x7a>
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d021      	beq.n	8003152 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d107      	bne.n	800312c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0204 	bic.w	r2, r2, #4
 800312a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	f003 021c 	and.w	r2, r3, #28
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	2104      	movs	r1, #4
 800313a:	fa01 f202 	lsl.w	r2, r1, r2
 800313e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003144:	2b00      	cmp	r3, #0
 8003146:	d071      	beq.n	800322c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314c:	6878      	ldr	r0, [r7, #4]
 800314e:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003150:	e06c      	b.n	800322c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003156:	f003 031c 	and.w	r3, r3, #28
 800315a:	2202      	movs	r2, #2
 800315c:	409a      	lsls	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	4013      	ands	r3, r2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d02e      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xec>
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d029      	beq.n	80031c4 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 0320 	and.w	r3, r3, #32
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 020a 	bic.w	r2, r2, #10
 800318c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2201      	movs	r2, #1
 8003192:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800319a:	f003 021c 	and.w	r2, r3, #28
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	2102      	movs	r1, #2
 80031a4:	fa01 f202 	lsl.w	r2, r1, r2
 80031a8:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2200      	movs	r2, #0
 80031ae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d038      	beq.n	800322c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80031c2:	e033      	b.n	800322c <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c8:	f003 031c 	and.w	r3, r3, #28
 80031cc:	2208      	movs	r2, #8
 80031ce:	409a      	lsls	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4013      	ands	r3, r2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d02a      	beq.n	800322e <HAL_DMA_IRQHandler+0x156>
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0308 	and.w	r3, r3, #8
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d025      	beq.n	800322e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 020e 	bic.w	r2, r2, #14
 80031f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f6:	f003 021c 	and.w	r2, r3, #28
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fe:	2101      	movs	r1, #1
 8003200:	fa01 f202 	lsl.w	r2, r1, r2
 8003204:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003220:	2b00      	cmp	r3, #0
 8003222:	d004      	beq.n	800322e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800322c:	bf00      	nop
 800322e:	bf00      	nop
}
 8003230:	3710      	adds	r7, #16
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}

08003236 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003236:	b480      	push	{r7}
 8003238:	b085      	sub	sp, #20
 800323a:	af00      	add	r7, sp, #0
 800323c:	60f8      	str	r0, [r7, #12]
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003248:	f003 021c 	and.w	r2, r3, #28
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003250:	2101      	movs	r1, #1
 8003252:	fa01 f202 	lsl.w	r2, r1, r2
 8003256:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	2b10      	cmp	r3, #16
 8003266:	d108      	bne.n	800327a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68ba      	ldr	r2, [r7, #8]
 8003276:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003278:	e007      	b.n	800328a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	60da      	str	r2, [r3, #12]
}
 800328a:	bf00      	nop
 800328c:	3714      	adds	r7, #20
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
	...

08003298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003298:	b480      	push	{r7}
 800329a:	b087      	sub	sp, #28
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
 80032a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80032a2:	2300      	movs	r3, #0
 80032a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a6:	e17f      	b.n	80035a8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	4013      	ands	r3, r2
 80032b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f000 8171 	beq.w	80035a2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f003 0303 	and.w	r3, r3, #3
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d005      	beq.n	80032d8 <HAL_GPIO_Init+0x40>
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f003 0303 	and.w	r3, r3, #3
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d130      	bne.n	800333a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	2203      	movs	r2, #3
 80032e4:	fa02 f303 	lsl.w	r3, r2, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	4313      	orrs	r3, r2
 8003300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800330e:	2201      	movs	r2, #1
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	43db      	mvns	r3, r3
 8003318:	693a      	ldr	r2, [r7, #16]
 800331a:	4013      	ands	r3, r2
 800331c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	091b      	lsrs	r3, r3, #4
 8003324:	f003 0201 	and.w	r2, r3, #1
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	fa02 f303 	lsl.w	r3, r2, r3
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	693a      	ldr	r2, [r7, #16]
 8003338:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f003 0303 	and.w	r3, r3, #3
 8003342:	2b03      	cmp	r3, #3
 8003344:	d118      	bne.n	8003378 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800334a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800334c:	2201      	movs	r2, #1
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	693a      	ldr	r2, [r7, #16]
 8003358:	4013      	ands	r3, r2
 800335a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	08db      	lsrs	r3, r3, #3
 8003362:	f003 0201 	and.w	r2, r3, #1
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	fa02 f303 	lsl.w	r3, r2, r3
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	4313      	orrs	r3, r2
 8003370:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	693a      	ldr	r2, [r7, #16]
 8003376:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f003 0303 	and.w	r3, r3, #3
 8003380:	2b03      	cmp	r3, #3
 8003382:	d017      	beq.n	80033b4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	005b      	lsls	r3, r3, #1
 800338e:	2203      	movs	r2, #3
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	693a      	ldr	r2, [r7, #16]
 8003398:	4013      	ands	r3, r2
 800339a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	689a      	ldr	r2, [r3, #8]
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	fa02 f303 	lsl.w	r3, r2, r3
 80033a8:	693a      	ldr	r2, [r7, #16]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	693a      	ldr	r2, [r7, #16]
 80033b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	f003 0303 	and.w	r3, r3, #3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d123      	bne.n	8003408 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	08da      	lsrs	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3208      	adds	r2, #8
 80033c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f003 0307 	and.w	r3, r3, #7
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	220f      	movs	r2, #15
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	691a      	ldr	r2, [r3, #16]
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f003 0307 	and.w	r3, r3, #7
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	693a      	ldr	r2, [r7, #16]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	08da      	lsrs	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	3208      	adds	r2, #8
 8003402:	6939      	ldr	r1, [r7, #16]
 8003404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	2203      	movs	r2, #3
 8003414:	fa02 f303 	lsl.w	r3, r2, r3
 8003418:	43db      	mvns	r3, r3
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	4013      	ands	r3, r2
 800341e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f003 0203 	and.w	r2, r3, #3
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	005b      	lsls	r3, r3, #1
 800342c:	fa02 f303 	lsl.w	r3, r2, r3
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	4313      	orrs	r3, r2
 8003434:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	693a      	ldr	r2, [r7, #16]
 800343a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80ac 	beq.w	80035a2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800344a:	4b5f      	ldr	r3, [pc, #380]	@ (80035c8 <HAL_GPIO_Init+0x330>)
 800344c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800344e:	4a5e      	ldr	r2, [pc, #376]	@ (80035c8 <HAL_GPIO_Init+0x330>)
 8003450:	f043 0301 	orr.w	r3, r3, #1
 8003454:	6613      	str	r3, [r2, #96]	@ 0x60
 8003456:	4b5c      	ldr	r3, [pc, #368]	@ (80035c8 <HAL_GPIO_Init+0x330>)
 8003458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
 8003460:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003462:	4a5a      	ldr	r2, [pc, #360]	@ (80035cc <HAL_GPIO_Init+0x334>)
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	089b      	lsrs	r3, r3, #2
 8003468:	3302      	adds	r3, #2
 800346a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800346e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	220f      	movs	r2, #15
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	693a      	ldr	r2, [r7, #16]
 8003482:	4013      	ands	r3, r2
 8003484:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800348c:	d025      	beq.n	80034da <HAL_GPIO_Init+0x242>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4f      	ldr	r2, [pc, #316]	@ (80035d0 <HAL_GPIO_Init+0x338>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d01f      	beq.n	80034d6 <HAL_GPIO_Init+0x23e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4e      	ldr	r2, [pc, #312]	@ (80035d4 <HAL_GPIO_Init+0x33c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d019      	beq.n	80034d2 <HAL_GPIO_Init+0x23a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4d      	ldr	r2, [pc, #308]	@ (80035d8 <HAL_GPIO_Init+0x340>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d013      	beq.n	80034ce <HAL_GPIO_Init+0x236>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4c      	ldr	r2, [pc, #304]	@ (80035dc <HAL_GPIO_Init+0x344>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00d      	beq.n	80034ca <HAL_GPIO_Init+0x232>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a4b      	ldr	r2, [pc, #300]	@ (80035e0 <HAL_GPIO_Init+0x348>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d007      	beq.n	80034c6 <HAL_GPIO_Init+0x22e>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4a      	ldr	r2, [pc, #296]	@ (80035e4 <HAL_GPIO_Init+0x34c>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d101      	bne.n	80034c2 <HAL_GPIO_Init+0x22a>
 80034be:	2306      	movs	r3, #6
 80034c0:	e00c      	b.n	80034dc <HAL_GPIO_Init+0x244>
 80034c2:	2307      	movs	r3, #7
 80034c4:	e00a      	b.n	80034dc <HAL_GPIO_Init+0x244>
 80034c6:	2305      	movs	r3, #5
 80034c8:	e008      	b.n	80034dc <HAL_GPIO_Init+0x244>
 80034ca:	2304      	movs	r3, #4
 80034cc:	e006      	b.n	80034dc <HAL_GPIO_Init+0x244>
 80034ce:	2303      	movs	r3, #3
 80034d0:	e004      	b.n	80034dc <HAL_GPIO_Init+0x244>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e002      	b.n	80034dc <HAL_GPIO_Init+0x244>
 80034d6:	2301      	movs	r3, #1
 80034d8:	e000      	b.n	80034dc <HAL_GPIO_Init+0x244>
 80034da:	2300      	movs	r3, #0
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	f002 0203 	and.w	r2, r2, #3
 80034e2:	0092      	lsls	r2, r2, #2
 80034e4:	4093      	lsls	r3, r2
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80034ec:	4937      	ldr	r1, [pc, #220]	@ (80035cc <HAL_GPIO_Init+0x334>)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	693a      	ldr	r2, [r7, #16]
 80034f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80034fa:	4b3b      	ldr	r3, [pc, #236]	@ (80035e8 <HAL_GPIO_Init+0x350>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	43db      	mvns	r3, r3
 8003504:	693a      	ldr	r2, [r7, #16]
 8003506:	4013      	ands	r3, r2
 8003508:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003516:	693a      	ldr	r2, [r7, #16]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4313      	orrs	r3, r2
 800351c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800351e:	4a32      	ldr	r2, [pc, #200]	@ (80035e8 <HAL_GPIO_Init+0x350>)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003524:	4b30      	ldr	r3, [pc, #192]	@ (80035e8 <HAL_GPIO_Init+0x350>)
 8003526:	68db      	ldr	r3, [r3, #12]
 8003528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	43db      	mvns	r3, r3
 800352e:	693a      	ldr	r2, [r7, #16]
 8003530:	4013      	ands	r3, r2
 8003532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d003      	beq.n	8003548 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003548:	4a27      	ldr	r2, [pc, #156]	@ (80035e8 <HAL_GPIO_Init+0x350>)
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800354e:	4b26      	ldr	r3, [pc, #152]	@ (80035e8 <HAL_GPIO_Init+0x350>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	43db      	mvns	r3, r3
 8003558:	693a      	ldr	r2, [r7, #16]
 800355a:	4013      	ands	r3, r2
 800355c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d003      	beq.n	8003572 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800356a:	693a      	ldr	r2, [r7, #16]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4313      	orrs	r3, r2
 8003570:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003572:	4a1d      	ldr	r2, [pc, #116]	@ (80035e8 <HAL_GPIO_Init+0x350>)
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003578:	4b1b      	ldr	r3, [pc, #108]	@ (80035e8 <HAL_GPIO_Init+0x350>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	43db      	mvns	r3, r3
 8003582:	693a      	ldr	r2, [r7, #16]
 8003584:	4013      	ands	r3, r2
 8003586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d003      	beq.n	800359c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800359c:	4a12      	ldr	r2, [pc, #72]	@ (80035e8 <HAL_GPIO_Init+0x350>)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	3301      	adds	r3, #1
 80035a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	fa22 f303 	lsr.w	r3, r2, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f47f ae78 	bne.w	80032a8 <HAL_GPIO_Init+0x10>
  }
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c4:	4770      	bx	lr
 80035c6:	bf00      	nop
 80035c8:	40021000 	.word	0x40021000
 80035cc:	40010000 	.word	0x40010000
 80035d0:	48000400 	.word	0x48000400
 80035d4:	48000800 	.word	0x48000800
 80035d8:	48000c00 	.word	0x48000c00
 80035dc:	48001000 	.word	0x48001000
 80035e0:	48001400 	.word	0x48001400
 80035e4:	48001800 	.word	0x48001800
 80035e8:	40010400 	.word	0x40010400

080035ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	460b      	mov	r3, r1
 80035f6:	807b      	strh	r3, [r7, #2]
 80035f8:	4613      	mov	r3, r2
 80035fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035fc:	787b      	ldrb	r3, [r7, #1]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003602:	887a      	ldrh	r2, [r7, #2]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003608:	e002      	b.n	8003610 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	460b      	mov	r3, r1
 8003626:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	695b      	ldr	r3, [r3, #20]
 800362c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800362e:	887a      	ldrh	r2, [r7, #2]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	4013      	ands	r3, r2
 8003634:	041a      	lsls	r2, r3, #16
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	43d9      	mvns	r1, r3
 800363a:	887b      	ldrh	r3, [r7, #2]
 800363c:	400b      	ands	r3, r1
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	619a      	str	r2, [r3, #24]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr

08003650 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <HAL_PWREx_GetVoltageRange+0x18>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800365c:	4618      	mov	r0, r3
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	40007000 	.word	0x40007000

0800366c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800367a:	d130      	bne.n	80036de <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800367c:	4b23      	ldr	r3, [pc, #140]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003684:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003688:	d038      	beq.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800368a:	4b20      	ldr	r3, [pc, #128]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003692:	4a1e      	ldr	r2, [pc, #120]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003694:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003698:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800369a:	4b1d      	ldr	r3, [pc, #116]	@ (8003710 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2232      	movs	r2, #50	@ 0x32
 80036a0:	fb02 f303 	mul.w	r3, r2, r3
 80036a4:	4a1b      	ldr	r2, [pc, #108]	@ (8003714 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80036a6:	fba2 2303 	umull	r2, r3, r2, r3
 80036aa:	0c9b      	lsrs	r3, r3, #18
 80036ac:	3301      	adds	r3, #1
 80036ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b0:	e002      	b.n	80036b8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	3b01      	subs	r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80036b8:	4b14      	ldr	r3, [pc, #80]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036c4:	d102      	bne.n	80036cc <HAL_PWREx_ControlVoltageScaling+0x60>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f2      	bne.n	80036b2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80036cc:	4b0f      	ldr	r3, [pc, #60]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036d8:	d110      	bne.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e00f      	b.n	80036fe <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80036de:	4b0b      	ldr	r3, [pc, #44]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80036e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80036ea:	d007      	beq.n	80036fc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80036ec:	4b07      	ldr	r3, [pc, #28]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80036f4:	4a05      	ldr	r2, [pc, #20]	@ (800370c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80036f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80036fa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40007000 	.word	0x40007000
 8003710:	20000000 	.word	0x20000000
 8003714:	431bde83 	.word	0x431bde83

08003718 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d101      	bne.n	800372a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e3ca      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800372a:	4b97      	ldr	r3, [pc, #604]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 030c 	and.w	r3, r3, #12
 8003732:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003734:	4b94      	ldr	r3, [pc, #592]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	f003 0303 	and.w	r3, r3, #3
 800373c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0310 	and.w	r3, r3, #16
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 80e4 	beq.w	8003914 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_RCC_OscConfig+0x4a>
 8003752:	69bb      	ldr	r3, [r7, #24]
 8003754:	2b0c      	cmp	r3, #12
 8003756:	f040 808b 	bne.w	8003870 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	2b01      	cmp	r3, #1
 800375e:	f040 8087 	bne.w	8003870 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003762:	4b89      	ldr	r3, [pc, #548]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_RCC_OscConfig+0x62>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e3a2      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1a      	ldr	r2, [r3, #32]
 800377e:	4b82      	ldr	r3, [pc, #520]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d004      	beq.n	8003794 <HAL_RCC_OscConfig+0x7c>
 800378a:	4b7f      	ldr	r3, [pc, #508]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003792:	e005      	b.n	80037a0 <HAL_RCC_OscConfig+0x88>
 8003794:	4b7c      	ldr	r3, [pc, #496]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003796:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800379a:	091b      	lsrs	r3, r3, #4
 800379c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d223      	bcs.n	80037ec <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fd55 	bl	8004258 <RCC_SetFlashLatencyFromMSIRange>
 80037ae:	4603      	mov	r3, r0
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e383      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037b8:	4b73      	ldr	r3, [pc, #460]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a72      	ldr	r2, [pc, #456]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80037be:	f043 0308 	orr.w	r3, r3, #8
 80037c2:	6013      	str	r3, [r2, #0]
 80037c4:	4b70      	ldr	r3, [pc, #448]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a1b      	ldr	r3, [r3, #32]
 80037d0:	496d      	ldr	r1, [pc, #436]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80037d2:	4313      	orrs	r3, r2
 80037d4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037d6:	4b6c      	ldr	r3, [pc, #432]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69db      	ldr	r3, [r3, #28]
 80037e2:	021b      	lsls	r3, r3, #8
 80037e4:	4968      	ldr	r1, [pc, #416]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	604b      	str	r3, [r1, #4]
 80037ea:	e025      	b.n	8003838 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037ec:	4b66      	ldr	r3, [pc, #408]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a65      	ldr	r2, [pc, #404]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80037f2:	f043 0308 	orr.w	r3, r3, #8
 80037f6:	6013      	str	r3, [r2, #0]
 80037f8:	4b63      	ldr	r3, [pc, #396]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	4960      	ldr	r1, [pc, #384]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003806:	4313      	orrs	r3, r2
 8003808:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800380a:	4b5f      	ldr	r3, [pc, #380]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	021b      	lsls	r3, r3, #8
 8003818:	495b      	ldr	r1, [pc, #364]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	4618      	mov	r0, r3
 800382a:	f000 fd15 	bl	8004258 <RCC_SetFlashLatencyFromMSIRange>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d001      	beq.n	8003838 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e343      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003838:	f000 fc4a 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800383c:	4602      	mov	r2, r0
 800383e:	4b52      	ldr	r3, [pc, #328]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	091b      	lsrs	r3, r3, #4
 8003844:	f003 030f 	and.w	r3, r3, #15
 8003848:	4950      	ldr	r1, [pc, #320]	@ (800398c <HAL_RCC_OscConfig+0x274>)
 800384a:	5ccb      	ldrb	r3, [r1, r3]
 800384c:	f003 031f 	and.w	r3, r3, #31
 8003850:	fa22 f303 	lsr.w	r3, r2, r3
 8003854:	4a4e      	ldr	r2, [pc, #312]	@ (8003990 <HAL_RCC_OscConfig+0x278>)
 8003856:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003858:	4b4e      	ldr	r3, [pc, #312]	@ (8003994 <HAL_RCC_OscConfig+0x27c>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4618      	mov	r0, r3
 800385e:	f7fd ffb9 	bl	80017d4 <HAL_InitTick>
 8003862:	4603      	mov	r3, r0
 8003864:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d052      	beq.n	8003912 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	e327      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	699b      	ldr	r3, [r3, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d032      	beq.n	80038de <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003878:	4b43      	ldr	r3, [pc, #268]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a42      	ldr	r2, [pc, #264]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003884:	f7fd fff6 	bl	8001874 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800388c:	f7fd fff2 	bl	8001874 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e310      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800389e:	4b3a      	ldr	r3, [pc, #232]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80038aa:	4b37      	ldr	r3, [pc, #220]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a36      	ldr	r2, [pc, #216]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038b0:	f043 0308 	orr.w	r3, r3, #8
 80038b4:	6013      	str	r3, [r2, #0]
 80038b6:	4b34      	ldr	r3, [pc, #208]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	4931      	ldr	r1, [pc, #196]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80038c8:	4b2f      	ldr	r3, [pc, #188]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	69db      	ldr	r3, [r3, #28]
 80038d4:	021b      	lsls	r3, r3, #8
 80038d6:	492c      	ldr	r1, [pc, #176]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	604b      	str	r3, [r1, #4]
 80038dc:	e01a      	b.n	8003914 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80038de:	4b2a      	ldr	r3, [pc, #168]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a29      	ldr	r2, [pc, #164]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 80038e4:	f023 0301 	bic.w	r3, r3, #1
 80038e8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80038ea:	f7fd ffc3 	bl	8001874 <HAL_GetTick>
 80038ee:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80038f0:	e008      	b.n	8003904 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80038f2:	f7fd ffbf 	bl	8001874 <HAL_GetTick>
 80038f6:	4602      	mov	r2, r0
 80038f8:	693b      	ldr	r3, [r7, #16]
 80038fa:	1ad3      	subs	r3, r2, r3
 80038fc:	2b02      	cmp	r3, #2
 80038fe:	d901      	bls.n	8003904 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e2dd      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003904:	4b20      	ldr	r3, [pc, #128]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1f0      	bne.n	80038f2 <HAL_RCC_OscConfig+0x1da>
 8003910:	e000      	b.n	8003914 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003912:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	d074      	beq.n	8003a0a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003920:	69bb      	ldr	r3, [r7, #24]
 8003922:	2b08      	cmp	r3, #8
 8003924:	d005      	beq.n	8003932 <HAL_RCC_OscConfig+0x21a>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	2b0c      	cmp	r3, #12
 800392a:	d10e      	bne.n	800394a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d10b      	bne.n	800394a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003932:	4b15      	ldr	r3, [pc, #84]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d064      	beq.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d160      	bne.n	8003a08 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e2ba      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003952:	d106      	bne.n	8003962 <HAL_RCC_OscConfig+0x24a>
 8003954:	4b0c      	ldr	r3, [pc, #48]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a0b      	ldr	r2, [pc, #44]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800395a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800395e:	6013      	str	r3, [r2, #0]
 8003960:	e026      	b.n	80039b0 <HAL_RCC_OscConfig+0x298>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800396a:	d115      	bne.n	8003998 <HAL_RCC_OscConfig+0x280>
 800396c:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a05      	ldr	r2, [pc, #20]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 8003972:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003976:	6013      	str	r3, [r2, #0]
 8003978:	4b03      	ldr	r3, [pc, #12]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a02      	ldr	r2, [pc, #8]	@ (8003988 <HAL_RCC_OscConfig+0x270>)
 800397e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003982:	6013      	str	r3, [r2, #0]
 8003984:	e014      	b.n	80039b0 <HAL_RCC_OscConfig+0x298>
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000
 800398c:	080084d4 	.word	0x080084d4
 8003990:	20000000 	.word	0x20000000
 8003994:	20000004 	.word	0x20000004
 8003998:	4ba0      	ldr	r3, [pc, #640]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a9f      	ldr	r2, [pc, #636]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 800399e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039a2:	6013      	str	r3, [r2, #0]
 80039a4:	4b9d      	ldr	r3, [pc, #628]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a9c      	ldr	r2, [pc, #624]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 80039aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80039ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d013      	beq.n	80039e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039b8:	f7fd ff5c 	bl	8001874 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039be:	e008      	b.n	80039d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039c0:	f7fd ff58 	bl	8001874 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	2b64      	cmp	r3, #100	@ 0x64
 80039cc:	d901      	bls.n	80039d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80039ce:	2303      	movs	r3, #3
 80039d0:	e276      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039d2:	4b92      	ldr	r3, [pc, #584]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d0f0      	beq.n	80039c0 <HAL_RCC_OscConfig+0x2a8>
 80039de:	e014      	b.n	8003a0a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e0:	f7fd ff48 	bl	8001874 <HAL_GetTick>
 80039e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039e6:	e008      	b.n	80039fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039e8:	f7fd ff44 	bl	8001874 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	@ 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e262      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80039fa:	4b88      	ldr	r3, [pc, #544]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1f0      	bne.n	80039e8 <HAL_RCC_OscConfig+0x2d0>
 8003a06:	e000      	b.n	8003a0a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0302 	and.w	r3, r3, #2
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d060      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_OscConfig+0x310>
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b0c      	cmp	r3, #12
 8003a20:	d119      	bne.n	8003a56 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	2b02      	cmp	r3, #2
 8003a26:	d116      	bne.n	8003a56 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a28:	4b7c      	ldr	r3, [pc, #496]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_OscConfig+0x328>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e23f      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a40:	4b76      	ldr	r3, [pc, #472]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	4973      	ldr	r1, [pc, #460]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a54:	e040      	b.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d023      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6e      	ldr	r2, [pc, #440]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6a:	f7fd ff03 	bl	8001874 <HAL_GetTick>
 8003a6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a70:	e008      	b.n	8003a84 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a72:	f7fd feff 	bl	8001874 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d901      	bls.n	8003a84 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a80:	2303      	movs	r3, #3
 8003a82:	e21d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a84:	4b65      	ldr	r3, [pc, #404]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0f0      	beq.n	8003a72 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a90:	4b62      	ldr	r3, [pc, #392]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	061b      	lsls	r3, r3, #24
 8003a9e:	495f      	ldr	r1, [pc, #380]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	604b      	str	r3, [r1, #4]
 8003aa4:	e018      	b.n	8003ad8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a5c      	ldr	r2, [pc, #368]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fd fedf 	bl	8001874 <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fd fedb 	bl	8001874 <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e1f9      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003acc:	4b53      	ldr	r3, [pc, #332]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f0      	bne.n	8003aba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0308 	and.w	r3, r3, #8
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d03c      	beq.n	8003b5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d01c      	beq.n	8003b26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003aec:	4b4b      	ldr	r3, [pc, #300]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003af2:	4a4a      	ldr	r2, [pc, #296]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003af4:	f043 0301 	orr.w	r3, r3, #1
 8003af8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003afc:	f7fd feba 	bl	8001874 <HAL_GetTick>
 8003b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b02:	e008      	b.n	8003b16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b04:	f7fd feb6 	bl	8001874 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d901      	bls.n	8003b16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b12:	2303      	movs	r3, #3
 8003b14:	e1d4      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b16:	4b41      	ldr	r3, [pc, #260]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0ef      	beq.n	8003b04 <HAL_RCC_OscConfig+0x3ec>
 8003b24:	e01b      	b.n	8003b5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b26:	4b3d      	ldr	r3, [pc, #244]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b2e:	f023 0301 	bic.w	r3, r3, #1
 8003b32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b36:	f7fd fe9d 	bl	8001874 <HAL_GetTick>
 8003b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b3c:	e008      	b.n	8003b50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b3e:	f7fd fe99 	bl	8001874 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d901      	bls.n	8003b50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e1b7      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003b50:	4b32      	ldr	r3, [pc, #200]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d1ef      	bne.n	8003b3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0304 	and.w	r3, r3, #4
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	f000 80a6 	beq.w	8003cb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003b70:	4b2a      	ldr	r3, [pc, #168]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d10d      	bne.n	8003b98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b7c:	4b27      	ldr	r3, [pc, #156]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b80:	4a26      	ldr	r2, [pc, #152]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b86:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b88:	4b24      	ldr	r3, [pc, #144]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b94:	2301      	movs	r3, #1
 8003b96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b98:	4b21      	ldr	r3, [pc, #132]	@ (8003c20 <HAL_RCC_OscConfig+0x508>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d118      	bne.n	8003bd6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c20 <HAL_RCC_OscConfig+0x508>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	@ (8003c20 <HAL_RCC_OscConfig+0x508>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bb0:	f7fd fe60 	bl	8001874 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bb8:	f7fd fe5c 	bl	8001874 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e17a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003bca:	4b15      	ldr	r3, [pc, #84]	@ (8003c20 <HAL_RCC_OscConfig+0x508>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d0f0      	beq.n	8003bb8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b01      	cmp	r3, #1
 8003bdc:	d108      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x4d8>
 8003bde:	4b0f      	ldr	r3, [pc, #60]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003be4:	4a0d      	ldr	r2, [pc, #52]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003be6:	f043 0301 	orr.w	r3, r3, #1
 8003bea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003bee:	e029      	b.n	8003c44 <HAL_RCC_OscConfig+0x52c>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	2b05      	cmp	r3, #5
 8003bf6:	d115      	bne.n	8003c24 <HAL_RCC_OscConfig+0x50c>
 8003bf8:	4b08      	ldr	r3, [pc, #32]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003bfe:	4a07      	ldr	r2, [pc, #28]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003c00:	f043 0304 	orr.w	r3, r3, #4
 8003c04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c08:	4b04      	ldr	r3, [pc, #16]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c0e:	4a03      	ldr	r2, [pc, #12]	@ (8003c1c <HAL_RCC_OscConfig+0x504>)
 8003c10:	f043 0301 	orr.w	r3, r3, #1
 8003c14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c18:	e014      	b.n	8003c44 <HAL_RCC_OscConfig+0x52c>
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	40007000 	.word	0x40007000
 8003c24:	4b9c      	ldr	r3, [pc, #624]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c2a:	4a9b      	ldr	r2, [pc, #620]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c2c:	f023 0301 	bic.w	r3, r3, #1
 8003c30:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003c34:	4b98      	ldr	r3, [pc, #608]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c3a:	4a97      	ldr	r2, [pc, #604]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c3c:	f023 0304 	bic.w	r3, r3, #4
 8003c40:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d016      	beq.n	8003c7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c4c:	f7fd fe12 	bl	8001874 <HAL_GetTick>
 8003c50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c52:	e00a      	b.n	8003c6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c54:	f7fd fe0e 	bl	8001874 <HAL_GetTick>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	1ad3      	subs	r3, r2, r3
 8003c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e12a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c6a:	4b8b      	ldr	r3, [pc, #556]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0ed      	beq.n	8003c54 <HAL_RCC_OscConfig+0x53c>
 8003c78:	e015      	b.n	8003ca6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c7a:	f7fd fdfb 	bl	8001874 <HAL_GetTick>
 8003c7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c80:	e00a      	b.n	8003c98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c82:	f7fd fdf7 	bl	8001874 <HAL_GetTick>
 8003c86:	4602      	mov	r2, r0
 8003c88:	693b      	ldr	r3, [r7, #16]
 8003c8a:	1ad3      	subs	r3, r2, r3
 8003c8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e113      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c98:	4b7f      	ldr	r3, [pc, #508]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d1ed      	bne.n	8003c82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ca6:	7ffb      	ldrb	r3, [r7, #31]
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d105      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cac:	4b7a      	ldr	r3, [pc, #488]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cb0:	4a79      	ldr	r2, [pc, #484]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003cb2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003cb6:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 80fe 	beq.w	8003ebe <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	f040 80d0 	bne.w	8003e6c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003ccc:	4b72      	ldr	r3, [pc, #456]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f003 0203 	and.w	r2, r3, #3
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d130      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	3b01      	subs	r3, #1
 8003cec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d127      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cfc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d11f      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003d0c:	2a07      	cmp	r2, #7
 8003d0e:	bf14      	ite	ne
 8003d10:	2201      	movne	r2, #1
 8003d12:	2200      	moveq	r2, #0
 8003d14:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d113      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d24:	085b      	lsrs	r3, r3, #1
 8003d26:	3b01      	subs	r3, #1
 8003d28:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d109      	bne.n	8003d42 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d06e      	beq.n	8003e20 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b0c      	cmp	r3, #12
 8003d46:	d069      	beq.n	8003e1c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d48:	4b53      	ldr	r3, [pc, #332]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d105      	bne.n	8003d60 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d54:	4b50      	ldr	r3, [pc, #320]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003d60:	2301      	movs	r3, #1
 8003d62:	e0ad      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d64:	4b4c      	ldr	r3, [pc, #304]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a4b      	ldr	r2, [pc, #300]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d6a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003d6e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d70:	f7fd fd80 	bl	8001874 <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d76:	e008      	b.n	8003d8a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d78:	f7fd fd7c 	bl	8001874 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d901      	bls.n	8003d8a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e09a      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d8a:	4b43      	ldr	r3, [pc, #268]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1f0      	bne.n	8003d78 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003d96:	4b40      	ldr	r3, [pc, #256]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	4b40      	ldr	r3, [pc, #256]	@ (8003e9c <HAL_RCC_OscConfig+0x784>)
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003da6:	3a01      	subs	r2, #1
 8003da8:	0112      	lsls	r2, r2, #4
 8003daa:	4311      	orrs	r1, r2
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003db0:	0212      	lsls	r2, r2, #8
 8003db2:	4311      	orrs	r1, r2
 8003db4:	687a      	ldr	r2, [r7, #4]
 8003db6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003db8:	0852      	lsrs	r2, r2, #1
 8003dba:	3a01      	subs	r2, #1
 8003dbc:	0552      	lsls	r2, r2, #21
 8003dbe:	4311      	orrs	r1, r2
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003dc4:	0852      	lsrs	r2, r2, #1
 8003dc6:	3a01      	subs	r2, #1
 8003dc8:	0652      	lsls	r2, r2, #25
 8003dca:	4311      	orrs	r1, r2
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003dd0:	0912      	lsrs	r2, r2, #4
 8003dd2:	0452      	lsls	r2, r2, #17
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	4930      	ldr	r1, [pc, #192]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003ddc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a2d      	ldr	r2, [pc, #180]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003de2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003de6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003de8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4a2a      	ldr	r2, [pc, #168]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003dee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003df2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003df4:	f7fd fd3e 	bl	8001874 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003dfc:	f7fd fd3a 	bl	8001874 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b02      	cmp	r3, #2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e058      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e0e:	4b22      	ldr	r3, [pc, #136]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e1a:	e050      	b.n	8003ebe <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e04f      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e20:	4b1d      	ldr	r3, [pc, #116]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d148      	bne.n	8003ebe <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e2c:	4b1a      	ldr	r3, [pc, #104]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a19      	ldr	r2, [pc, #100]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e36:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e38:	4b17      	ldr	r3, [pc, #92]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	4a16      	ldr	r2, [pc, #88]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003e42:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e44:	f7fd fd16 	bl	8001874 <HAL_GetTick>
 8003e48:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e4a:	e008      	b.n	8003e5e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e4c:	f7fd fd12 	bl	8001874 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d901      	bls.n	8003e5e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e030      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5e:	4b0e      	ldr	r3, [pc, #56]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d0f0      	beq.n	8003e4c <HAL_RCC_OscConfig+0x734>
 8003e6a:	e028      	b.n	8003ebe <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	2b0c      	cmp	r3, #12
 8003e70:	d023      	beq.n	8003eba <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e72:	4b09      	ldr	r3, [pc, #36]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a08      	ldr	r2, [pc, #32]	@ (8003e98 <HAL_RCC_OscConfig+0x780>)
 8003e78:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7e:	f7fd fcf9 	bl	8001874 <HAL_GetTick>
 8003e82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e84:	e00c      	b.n	8003ea0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e86:	f7fd fcf5 	bl	8001874 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b02      	cmp	r3, #2
 8003e92:	d905      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e013      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea0:	4b09      	ldr	r3, [pc, #36]	@ (8003ec8 <HAL_RCC_OscConfig+0x7b0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1ec      	bne.n	8003e86 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003eac:	4b06      	ldr	r3, [pc, #24]	@ (8003ec8 <HAL_RCC_OscConfig+0x7b0>)
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4905      	ldr	r1, [pc, #20]	@ (8003ec8 <HAL_RCC_OscConfig+0x7b0>)
 8003eb2:	4b06      	ldr	r3, [pc, #24]	@ (8003ecc <HAL_RCC_OscConfig+0x7b4>)
 8003eb4:	4013      	ands	r3, r2
 8003eb6:	60cb      	str	r3, [r1, #12]
 8003eb8:	e001      	b.n	8003ebe <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e000      	b.n	8003ec0 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3720      	adds	r7, #32
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40021000 	.word	0x40021000
 8003ecc:	feeefffc 	.word	0xfeeefffc

08003ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0e7      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b75      	ldr	r3, [pc, #468]	@ (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d910      	bls.n	8003f14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b72      	ldr	r3, [pc, #456]	@ (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f023 0207 	bic.w	r2, r3, #7
 8003efa:	4970      	ldr	r1, [pc, #448]	@ (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f02:	4b6e      	ldr	r3, [pc, #440]	@ (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f003 0307 	and.w	r3, r3, #7
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d001      	beq.n	8003f14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e0cf      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d010      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	4b66      	ldr	r3, [pc, #408]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d908      	bls.n	8003f42 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b63      	ldr	r3, [pc, #396]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	4960      	ldr	r1, [pc, #384]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d04c      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f56:	4b5a      	ldr	r3, [pc, #360]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d121      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0a6      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f6e:	4b54      	ldr	r3, [pc, #336]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d115      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e09a      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d107      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f86:	4b4e      	ldr	r3, [pc, #312]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e08e      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f96:	4b4a      	ldr	r3, [pc, #296]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e086      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003fa6:	4b46      	ldr	r3, [pc, #280]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f023 0203 	bic.w	r2, r3, #3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4943      	ldr	r1, [pc, #268]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb4:	4313      	orrs	r3, r2
 8003fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003fb8:	f7fd fc5c 	bl	8001874 <HAL_GetTick>
 8003fbc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fbe:	e00a      	b.n	8003fd6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc0:	f7fd fc58 	bl	8001874 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e06e      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd8:	689b      	ldr	r3, [r3, #8]
 8003fda:	f003 020c 	and.w	r2, r3, #12
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d1eb      	bne.n	8003fc0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d010      	beq.n	8004016 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	689a      	ldr	r2, [r3, #8]
 8003ff8:	4b31      	ldr	r3, [pc, #196]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004000:	429a      	cmp	r2, r3
 8004002:	d208      	bcs.n	8004016 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004004:	4b2e      	ldr	r3, [pc, #184]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	492b      	ldr	r1, [pc, #172]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004012:	4313      	orrs	r3, r2
 8004014:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004016:	4b29      	ldr	r3, [pc, #164]	@ (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 0307 	and.w	r3, r3, #7
 800401e:	683a      	ldr	r2, [r7, #0]
 8004020:	429a      	cmp	r2, r3
 8004022:	d210      	bcs.n	8004046 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004024:	4b25      	ldr	r3, [pc, #148]	@ (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 0207 	bic.w	r2, r3, #7
 800402c:	4923      	ldr	r1, [pc, #140]	@ (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004034:	4b21      	ldr	r3, [pc, #132]	@ (80040bc <HAL_RCC_ClockConfig+0x1ec>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f003 0307 	and.w	r3, r3, #7
 800403c:	683a      	ldr	r2, [r7, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d001      	beq.n	8004046 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e036      	b.n	80040b4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d008      	beq.n	8004064 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004052:	4b1b      	ldr	r3, [pc, #108]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68db      	ldr	r3, [r3, #12]
 800405e:	4918      	ldr	r1, [pc, #96]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0308 	and.w	r3, r3, #8
 800406c:	2b00      	cmp	r3, #0
 800406e:	d009      	beq.n	8004084 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004070:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	4910      	ldr	r1, [pc, #64]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 8004080:	4313      	orrs	r3, r2
 8004082:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004084:	f000 f824 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8004088:	4602      	mov	r2, r0
 800408a:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <HAL_RCC_ClockConfig+0x1f0>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	091b      	lsrs	r3, r3, #4
 8004090:	f003 030f 	and.w	r3, r3, #15
 8004094:	490b      	ldr	r1, [pc, #44]	@ (80040c4 <HAL_RCC_ClockConfig+0x1f4>)
 8004096:	5ccb      	ldrb	r3, [r1, r3]
 8004098:	f003 031f 	and.w	r3, r3, #31
 800409c:	fa22 f303 	lsr.w	r3, r2, r3
 80040a0:	4a09      	ldr	r2, [pc, #36]	@ (80040c8 <HAL_RCC_ClockConfig+0x1f8>)
 80040a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80040a4:	4b09      	ldr	r3, [pc, #36]	@ (80040cc <HAL_RCC_ClockConfig+0x1fc>)
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4618      	mov	r0, r3
 80040aa:	f7fd fb93 	bl	80017d4 <HAL_InitTick>
 80040ae:	4603      	mov	r3, r0
 80040b0:	72fb      	strb	r3, [r7, #11]

  return status;
 80040b2:	7afb      	ldrb	r3, [r7, #11]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	40022000 	.word	0x40022000
 80040c0:	40021000 	.word	0x40021000
 80040c4:	080084d4 	.word	0x080084d4
 80040c8:	20000000 	.word	0x20000000
 80040cc:	20000004 	.word	0x20000004

080040d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b089      	sub	sp, #36	@ 0x24
 80040d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80040d6:	2300      	movs	r3, #0
 80040d8:	61fb      	str	r3, [r7, #28]
 80040da:	2300      	movs	r3, #0
 80040dc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040de:	4b3e      	ldr	r3, [pc, #248]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040e8:	4b3b      	ldr	r3, [pc, #236]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	f003 0303 	and.w	r3, r3, #3
 80040f0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_GetSysClockFreq+0x34>
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	2b0c      	cmp	r3, #12
 80040fc:	d121      	bne.n	8004142 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2b01      	cmp	r3, #1
 8004102:	d11e      	bne.n	8004142 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004104:	4b34      	ldr	r3, [pc, #208]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004110:	4b31      	ldr	r3, [pc, #196]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004112:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004116:	0a1b      	lsrs	r3, r3, #8
 8004118:	f003 030f 	and.w	r3, r3, #15
 800411c:	61fb      	str	r3, [r7, #28]
 800411e:	e005      	b.n	800412c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004120:	4b2d      	ldr	r3, [pc, #180]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 030f 	and.w	r3, r3, #15
 800412a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800412c:	4a2b      	ldr	r2, [pc, #172]	@ (80041dc <HAL_RCC_GetSysClockFreq+0x10c>)
 800412e:	69fb      	ldr	r3, [r7, #28]
 8004130:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004134:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10d      	bne.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800413c:	69fb      	ldr	r3, [r7, #28]
 800413e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004140:	e00a      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d102      	bne.n	800414e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004148:	4b25      	ldr	r3, [pc, #148]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x110>)
 800414a:	61bb      	str	r3, [r7, #24]
 800414c:	e004      	b.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	2b08      	cmp	r3, #8
 8004152:	d101      	bne.n	8004158 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004154:	4b23      	ldr	r3, [pc, #140]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004156:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	2b0c      	cmp	r3, #12
 800415c:	d134      	bne.n	80041c8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800415e:	4b1e      	ldr	r3, [pc, #120]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d003      	beq.n	8004176 <HAL_RCC_GetSysClockFreq+0xa6>
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	2b03      	cmp	r3, #3
 8004172:	d003      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0xac>
 8004174:	e005      	b.n	8004182 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004176:	4b1a      	ldr	r3, [pc, #104]	@ (80041e0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004178:	617b      	str	r3, [r7, #20]
      break;
 800417a:	e005      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800417c:	4b19      	ldr	r3, [pc, #100]	@ (80041e4 <HAL_RCC_GetSysClockFreq+0x114>)
 800417e:	617b      	str	r3, [r7, #20]
      break;
 8004180:	e002      	b.n	8004188 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	617b      	str	r3, [r7, #20]
      break;
 8004186:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004188:	4b13      	ldr	r3, [pc, #76]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	f003 0307 	and.w	r3, r3, #7
 8004192:	3301      	adds	r3, #1
 8004194:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004196:	4b10      	ldr	r3, [pc, #64]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004198:	68db      	ldr	r3, [r3, #12]
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	fb03 f202 	mul.w	r2, r3, r2
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ac:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80041ae:	4b0a      	ldr	r3, [pc, #40]	@ (80041d8 <HAL_RCC_GetSysClockFreq+0x108>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	0e5b      	lsrs	r3, r3, #25
 80041b4:	f003 0303 	and.w	r3, r3, #3
 80041b8:	3301      	adds	r3, #1
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80041be:	697a      	ldr	r2, [r7, #20]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80041c8:	69bb      	ldr	r3, [r7, #24]
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	3724      	adds	r7, #36	@ 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40021000 	.word	0x40021000
 80041dc:	080084ec 	.word	0x080084ec
 80041e0:	00f42400 	.word	0x00f42400
 80041e4:	007a1200 	.word	0x007a1200

080041e8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041e8:	b480      	push	{r7}
 80041ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041ec:	4b03      	ldr	r3, [pc, #12]	@ (80041fc <HAL_RCC_GetHCLKFreq+0x14>)
 80041ee:	681b      	ldr	r3, [r3, #0]
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	20000000 	.word	0x20000000

08004200 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004204:	f7ff fff0 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004208:	4602      	mov	r2, r0
 800420a:	4b06      	ldr	r3, [pc, #24]	@ (8004224 <HAL_RCC_GetPCLK1Freq+0x24>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	0a1b      	lsrs	r3, r3, #8
 8004210:	f003 0307 	and.w	r3, r3, #7
 8004214:	4904      	ldr	r1, [pc, #16]	@ (8004228 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004216:	5ccb      	ldrb	r3, [r1, r3]
 8004218:	f003 031f 	and.w	r3, r3, #31
 800421c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004220:	4618      	mov	r0, r3
 8004222:	bd80      	pop	{r7, pc}
 8004224:	40021000 	.word	0x40021000
 8004228:	080084e4 	.word	0x080084e4

0800422c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004230:	f7ff ffda 	bl	80041e8 <HAL_RCC_GetHCLKFreq>
 8004234:	4602      	mov	r2, r0
 8004236:	4b06      	ldr	r3, [pc, #24]	@ (8004250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	0adb      	lsrs	r3, r3, #11
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	4904      	ldr	r1, [pc, #16]	@ (8004254 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004242:	5ccb      	ldrb	r3, [r1, r3]
 8004244:	f003 031f 	and.w	r3, r3, #31
 8004248:	fa22 f303 	lsr.w	r3, r2, r3
}
 800424c:	4618      	mov	r0, r3
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40021000 	.word	0x40021000
 8004254:	080084e4 	.word	0x080084e4

08004258 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b086      	sub	sp, #24
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004260:	2300      	movs	r3, #0
 8004262:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004264:	4b2a      	ldr	r3, [pc, #168]	@ (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004268:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004270:	f7ff f9ee 	bl	8003650 <HAL_PWREx_GetVoltageRange>
 8004274:	6178      	str	r0, [r7, #20]
 8004276:	e014      	b.n	80042a2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004278:	4b25      	ldr	r3, [pc, #148]	@ (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800427c:	4a24      	ldr	r2, [pc, #144]	@ (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800427e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004282:	6593      	str	r3, [r2, #88]	@ 0x58
 8004284:	4b22      	ldr	r3, [pc, #136]	@ (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004286:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004288:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800428c:	60fb      	str	r3, [r7, #12]
 800428e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004290:	f7ff f9de 	bl	8003650 <HAL_PWREx_GetVoltageRange>
 8004294:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004296:	4b1e      	ldr	r3, [pc, #120]	@ (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800429a:	4a1d      	ldr	r2, [pc, #116]	@ (8004310 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800429c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042a8:	d10b      	bne.n	80042c2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b80      	cmp	r3, #128	@ 0x80
 80042ae:	d919      	bls.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2ba0      	cmp	r3, #160	@ 0xa0
 80042b4:	d902      	bls.n	80042bc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042b6:	2302      	movs	r3, #2
 80042b8:	613b      	str	r3, [r7, #16]
 80042ba:	e013      	b.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042bc:	2301      	movs	r3, #1
 80042be:	613b      	str	r3, [r7, #16]
 80042c0:	e010      	b.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2b80      	cmp	r3, #128	@ 0x80
 80042c6:	d902      	bls.n	80042ce <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80042c8:	2303      	movs	r3, #3
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	e00a      	b.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2b80      	cmp	r3, #128	@ 0x80
 80042d2:	d102      	bne.n	80042da <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80042d4:	2302      	movs	r3, #2
 80042d6:	613b      	str	r3, [r7, #16]
 80042d8:	e004      	b.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2b70      	cmp	r3, #112	@ 0x70
 80042de:	d101      	bne.n	80042e4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80042e0:	2301      	movs	r3, #1
 80042e2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80042e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f023 0207 	bic.w	r2, r3, #7
 80042ec:	4909      	ldr	r1, [pc, #36]	@ (8004314 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80042f4:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0307 	and.w	r3, r3, #7
 80042fc:	693a      	ldr	r2, [r7, #16]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d001      	beq.n	8004306 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e000      	b.n	8004308 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3718      	adds	r7, #24
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40021000 	.word	0x40021000
 8004314:	40022000 	.word	0x40022000

08004318 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004320:	2300      	movs	r3, #0
 8004322:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004324:	2300      	movs	r3, #0
 8004326:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004330:	2b00      	cmp	r3, #0
 8004332:	d041      	beq.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004338:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800433c:	d02a      	beq.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800433e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004342:	d824      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004344:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004348:	d008      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800434a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800434e:	d81e      	bhi.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00a      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004354:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004358:	d010      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800435a:	e018      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800435c:	4b86      	ldr	r3, [pc, #536]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	4a85      	ldr	r2, [pc, #532]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004366:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004368:	e015      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	3304      	adds	r3, #4
 800436e:	2100      	movs	r1, #0
 8004370:	4618      	mov	r0, r3
 8004372:	f000 fabb 	bl	80048ec <RCCEx_PLLSAI1_Config>
 8004376:	4603      	mov	r3, r0
 8004378:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800437a:	e00c      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3320      	adds	r3, #32
 8004380:	2100      	movs	r1, #0
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fba6 	bl	8004ad4 <RCCEx_PLLSAI2_Config>
 8004388:	4603      	mov	r3, r0
 800438a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800438c:	e003      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800438e:	2301      	movs	r3, #1
 8004390:	74fb      	strb	r3, [r7, #19]
      break;
 8004392:	e000      	b.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004394:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004396:	7cfb      	ldrb	r3, [r7, #19]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d10b      	bne.n	80043b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800439c:	4b76      	ldr	r3, [pc, #472]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800439e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043a2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80043aa:	4973      	ldr	r1, [pc, #460]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ac:	4313      	orrs	r3, r2
 80043ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80043b2:	e001      	b.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b4:	7cfb      	ldrb	r3, [r7, #19]
 80043b6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d041      	beq.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80043c8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043cc:	d02a      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80043ce:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80043d2:	d824      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043d4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043d8:	d008      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80043da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80043de:	d81e      	bhi.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00a      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80043e4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80043e8:	d010      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80043ea:	e018      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043ec:	4b62      	ldr	r3, [pc, #392]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a61      	ldr	r2, [pc, #388]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043f6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043f8:	e015      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	3304      	adds	r3, #4
 80043fe:	2100      	movs	r1, #0
 8004400:	4618      	mov	r0, r3
 8004402:	f000 fa73 	bl	80048ec <RCCEx_PLLSAI1_Config>
 8004406:	4603      	mov	r3, r0
 8004408:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800440a:	e00c      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3320      	adds	r3, #32
 8004410:	2100      	movs	r1, #0
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fb5e 	bl	8004ad4 <RCCEx_PLLSAI2_Config>
 8004418:	4603      	mov	r3, r0
 800441a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800441c:	e003      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	74fb      	strb	r3, [r7, #19]
      break;
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004424:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004426:	7cfb      	ldrb	r3, [r7, #19]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d10b      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800442c:	4b52      	ldr	r3, [pc, #328]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004432:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800443a:	494f      	ldr	r1, [pc, #316]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800443c:	4313      	orrs	r3, r2
 800443e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004442:	e001      	b.n	8004448 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	7cfb      	ldrb	r3, [r7, #19]
 8004446:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80a0 	beq.w	8004596 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004456:	2300      	movs	r3, #0
 8004458:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800445a:	4b47      	ldr	r3, [pc, #284]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800445c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800445e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004462:	2b00      	cmp	r3, #0
 8004464:	d101      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004466:	2301      	movs	r3, #1
 8004468:	e000      	b.n	800446c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800446a:	2300      	movs	r3, #0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d00d      	beq.n	800448c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004470:	4b41      	ldr	r3, [pc, #260]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004474:	4a40      	ldr	r2, [pc, #256]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800447a:	6593      	str	r3, [r2, #88]	@ 0x58
 800447c:	4b3e      	ldr	r3, [pc, #248]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800447e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004480:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004488:	2301      	movs	r3, #1
 800448a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800448c:	4b3b      	ldr	r3, [pc, #236]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a3a      	ldr	r2, [pc, #232]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004492:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004496:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004498:	f7fd f9ec 	bl	8001874 <HAL_GetTick>
 800449c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800449e:	e009      	b.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a0:	f7fd f9e8 	bl	8001874 <HAL_GetTick>
 80044a4:	4602      	mov	r2, r0
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	1ad3      	subs	r3, r2, r3
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	d902      	bls.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	74fb      	strb	r3, [r7, #19]
        break;
 80044b2:	e005      	b.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80044b4:	4b31      	ldr	r3, [pc, #196]	@ (800457c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0ef      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80044c0:	7cfb      	ldrb	r3, [r7, #19]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d15c      	bne.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80044c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044cc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80044d0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01f      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d019      	beq.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80044e4:	4b24      	ldr	r3, [pc, #144]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80044f0:	4b21      	ldr	r3, [pc, #132]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f6:	4a20      	ldr	r2, [pc, #128]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80044fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004500:	4b1d      	ldr	r3, [pc, #116]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004506:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004508:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800450c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004510:	4a19      	ldr	r2, [pc, #100]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	2b00      	cmp	r3, #0
 8004520:	d016      	beq.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004522:	f7fd f9a7 	bl	8001874 <HAL_GetTick>
 8004526:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004528:	e00b      	b.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800452a:	f7fd f9a3 	bl	8001874 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004538:	4293      	cmp	r3, r2
 800453a:	d902      	bls.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800453c:	2303      	movs	r3, #3
 800453e:	74fb      	strb	r3, [r7, #19]
            break;
 8004540:	e006      	b.n	8004550 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004542:	4b0d      	ldr	r3, [pc, #52]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004548:	f003 0302 	and.w	r3, r3, #2
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0ec      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004550:	7cfb      	ldrb	r3, [r7, #19]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004556:	4b08      	ldr	r3, [pc, #32]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800455c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004566:	4904      	ldr	r1, [pc, #16]	@ (8004578 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004568:	4313      	orrs	r3, r2
 800456a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800456e:	e009      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004570:	7cfb      	ldrb	r3, [r7, #19]
 8004572:	74bb      	strb	r3, [r7, #18]
 8004574:	e006      	b.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004576:	bf00      	nop
 8004578:	40021000 	.word	0x40021000
 800457c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	7cfb      	ldrb	r3, [r7, #19]
 8004582:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004584:	7c7b      	ldrb	r3, [r7, #17]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d105      	bne.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800458a:	4b9e      	ldr	r3, [pc, #632]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800458c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800458e:	4a9d      	ldr	r2, [pc, #628]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004590:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004594:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f003 0301 	and.w	r3, r3, #1
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00a      	beq.n	80045b8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80045a2:	4b98      	ldr	r3, [pc, #608]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045a8:	f023 0203 	bic.w	r2, r3, #3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b0:	4994      	ldr	r1, [pc, #592]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045b2:	4313      	orrs	r3, r2
 80045b4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0302 	and.w	r3, r3, #2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80045c4:	4b8f      	ldr	r3, [pc, #572]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ca:	f023 020c 	bic.w	r2, r3, #12
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d2:	498c      	ldr	r1, [pc, #560]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d00a      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80045e6:	4b87      	ldr	r3, [pc, #540]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ec:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f4:	4983      	ldr	r1, [pc, #524]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d00a      	beq.n	800461e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004608:	4b7e      	ldr	r3, [pc, #504]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	497b      	ldr	r1, [pc, #492]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004618:	4313      	orrs	r3, r2
 800461a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0310 	and.w	r3, r3, #16
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00a      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800462a:	4b76      	ldr	r3, [pc, #472]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800462c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004630:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004638:	4972      	ldr	r1, [pc, #456]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800463a:	4313      	orrs	r3, r2
 800463c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0320 	and.w	r3, r3, #32
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800464c:	4b6d      	ldr	r3, [pc, #436]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004652:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800465a:	496a      	ldr	r1, [pc, #424]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800465c:	4313      	orrs	r3, r2
 800465e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00a      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800466e:	4b65      	ldr	r3, [pc, #404]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004674:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800467c:	4961      	ldr	r1, [pc, #388]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00a      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004690:	4b5c      	ldr	r3, [pc, #368]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004696:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800469e:	4959      	ldr	r1, [pc, #356]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046a0:	4313      	orrs	r3, r2
 80046a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046b2:	4b54      	ldr	r3, [pc, #336]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046c0:	4950      	ldr	r1, [pc, #320]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046c2:	4313      	orrs	r3, r2
 80046c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00a      	beq.n	80046ea <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80046d4:	4b4b      	ldr	r3, [pc, #300]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046da:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e2:	4948      	ldr	r1, [pc, #288]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046f6:	4b43      	ldr	r3, [pc, #268]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046fc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004704:	493f      	ldr	r1, [pc, #252]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004706:	4313      	orrs	r3, r2
 8004708:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d028      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004718:	4b3a      	ldr	r3, [pc, #232]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800471e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004726:	4937      	ldr	r1, [pc, #220]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004728:	4313      	orrs	r3, r2
 800472a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004736:	d106      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004738:	4b32      	ldr	r3, [pc, #200]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	4a31      	ldr	r2, [pc, #196]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800473e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004742:	60d3      	str	r3, [r2, #12]
 8004744:	e011      	b.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800474a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800474e:	d10c      	bne.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	2101      	movs	r1, #1
 8004756:	4618      	mov	r0, r3
 8004758:	f000 f8c8 	bl	80048ec <RCCEx_PLLSAI1_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004760:	7cfb      	ldrb	r3, [r7, #19]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004766:	7cfb      	ldrb	r3, [r7, #19]
 8004768:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d028      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004776:	4b23      	ldr	r3, [pc, #140]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004784:	491f      	ldr	r1, [pc, #124]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004790:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004794:	d106      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004796:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	4a1a      	ldr	r2, [pc, #104]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047a0:	60d3      	str	r3, [r2, #12]
 80047a2:	e011      	b.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047a8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80047ac:	d10c      	bne.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	3304      	adds	r3, #4
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 f899 	bl	80048ec <RCCEx_PLLSAI1_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047be:	7cfb      	ldrb	r3, [r7, #19]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80047c4:	7cfb      	ldrb	r3, [r7, #19]
 80047c6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d02b      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047da:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047e2:	4908      	ldr	r1, [pc, #32]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80047f2:	d109      	bne.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047f4:	4b03      	ldr	r3, [pc, #12]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	4a02      	ldr	r2, [pc, #8]	@ (8004804 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047fe:	60d3      	str	r3, [r2, #12]
 8004800:	e014      	b.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004802:	bf00      	nop
 8004804:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800480c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004810:	d10c      	bne.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	3304      	adds	r3, #4
 8004816:	2101      	movs	r1, #1
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f867 	bl	80048ec <RCCEx_PLLSAI1_Config>
 800481e:	4603      	mov	r3, r0
 8004820:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004822:	7cfb      	ldrb	r3, [r7, #19]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004828:	7cfb      	ldrb	r3, [r7, #19]
 800482a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004834:	2b00      	cmp	r3, #0
 8004836:	d02f      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004838:	4b2b      	ldr	r3, [pc, #172]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800483a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800483e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004846:	4928      	ldr	r1, [pc, #160]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004848:	4313      	orrs	r3, r2
 800484a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004852:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004856:	d10d      	bne.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	3304      	adds	r3, #4
 800485c:	2102      	movs	r1, #2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f844 	bl	80048ec <RCCEx_PLLSAI1_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004868:	7cfb      	ldrb	r3, [r7, #19]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d014      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800486e:	7cfb      	ldrb	r3, [r7, #19]
 8004870:	74bb      	strb	r3, [r7, #18]
 8004872:	e011      	b.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004878:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800487c:	d10c      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	3320      	adds	r3, #32
 8004882:	2102      	movs	r1, #2
 8004884:	4618      	mov	r0, r3
 8004886:	f000 f925 	bl	8004ad4 <RCCEx_PLLSAI2_Config>
 800488a:	4603      	mov	r3, r0
 800488c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800488e:	7cfb      	ldrb	r3, [r7, #19]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d001      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004894:	7cfb      	ldrb	r3, [r7, #19]
 8004896:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d00a      	beq.n	80048ba <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80048a4:	4b10      	ldr	r3, [pc, #64]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048aa:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048b2:	490d      	ldr	r1, [pc, #52]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80048c6:	4b08      	ldr	r3, [pc, #32]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048cc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80048d6:	4904      	ldr	r1, [pc, #16]	@ (80048e8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80048de:	7cbb      	ldrb	r3, [r7, #18]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000

080048ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
 80048f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048f6:	2300      	movs	r3, #0
 80048f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048fa:	4b75      	ldr	r3, [pc, #468]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	68db      	ldr	r3, [r3, #12]
 80048fe:	f003 0303 	and.w	r3, r3, #3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d018      	beq.n	8004938 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004906:	4b72      	ldr	r3, [pc, #456]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004908:	68db      	ldr	r3, [r3, #12]
 800490a:	f003 0203 	and.w	r2, r3, #3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	429a      	cmp	r2, r3
 8004914:	d10d      	bne.n	8004932 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
       ||
 800491a:	2b00      	cmp	r3, #0
 800491c:	d009      	beq.n	8004932 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800491e:	4b6c      	ldr	r3, [pc, #432]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004920:	68db      	ldr	r3, [r3, #12]
 8004922:	091b      	lsrs	r3, r3, #4
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
       ||
 800492e:	429a      	cmp	r2, r3
 8004930:	d047      	beq.n	80049c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	73fb      	strb	r3, [r7, #15]
 8004936:	e044      	b.n	80049c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2b03      	cmp	r3, #3
 800493e:	d018      	beq.n	8004972 <RCCEx_PLLSAI1_Config+0x86>
 8004940:	2b03      	cmp	r3, #3
 8004942:	d825      	bhi.n	8004990 <RCCEx_PLLSAI1_Config+0xa4>
 8004944:	2b01      	cmp	r3, #1
 8004946:	d002      	beq.n	800494e <RCCEx_PLLSAI1_Config+0x62>
 8004948:	2b02      	cmp	r3, #2
 800494a:	d009      	beq.n	8004960 <RCCEx_PLLSAI1_Config+0x74>
 800494c:	e020      	b.n	8004990 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800494e:	4b60      	ldr	r3, [pc, #384]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0302 	and.w	r3, r3, #2
 8004956:	2b00      	cmp	r3, #0
 8004958:	d11d      	bne.n	8004996 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800495e:	e01a      	b.n	8004996 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004960:	4b5b      	ldr	r3, [pc, #364]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004968:	2b00      	cmp	r3, #0
 800496a:	d116      	bne.n	800499a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004970:	e013      	b.n	800499a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004972:	4b57      	ldr	r3, [pc, #348]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800497e:	4b54      	ldr	r3, [pc, #336]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d109      	bne.n	800499e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800498e:	e006      	b.n	800499e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	73fb      	strb	r3, [r7, #15]
      break;
 8004994:	e004      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004996:	bf00      	nop
 8004998:	e002      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800499a:	bf00      	nop
 800499c:	e000      	b.n	80049a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800499e:	bf00      	nop
    }

    if(status == HAL_OK)
 80049a0:	7bfb      	ldrb	r3, [r7, #15]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d10d      	bne.n	80049c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80049a6:	4b4a      	ldr	r3, [pc, #296]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6819      	ldr	r1, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	685b      	ldr	r3, [r3, #4]
 80049b6:	3b01      	subs	r3, #1
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	430b      	orrs	r3, r1
 80049bc:	4944      	ldr	r1, [pc, #272]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049be:	4313      	orrs	r3, r2
 80049c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80049c2:	7bfb      	ldrb	r3, [r7, #15]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d17d      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049c8:	4b41      	ldr	r3, [pc, #260]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a40      	ldr	r2, [pc, #256]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049ce:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80049d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049d4:	f7fc ff4e 	bl	8001874 <HAL_GetTick>
 80049d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049da:	e009      	b.n	80049f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049dc:	f7fc ff4a 	bl	8001874 <HAL_GetTick>
 80049e0:	4602      	mov	r2, r0
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	1ad3      	subs	r3, r2, r3
 80049e6:	2b02      	cmp	r3, #2
 80049e8:	d902      	bls.n	80049f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	73fb      	strb	r3, [r7, #15]
        break;
 80049ee:	e005      	b.n	80049fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049f0:	4b37      	ldr	r3, [pc, #220]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d1ef      	bne.n	80049dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049fc:	7bfb      	ldrb	r3, [r7, #15]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d160      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d111      	bne.n	8004a2c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a08:	4b31      	ldr	r3, [pc, #196]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004a10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	6892      	ldr	r2, [r2, #8]
 8004a18:	0211      	lsls	r1, r2, #8
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68d2      	ldr	r2, [r2, #12]
 8004a1e:	0912      	lsrs	r2, r2, #4
 8004a20:	0452      	lsls	r2, r2, #17
 8004a22:	430a      	orrs	r2, r1
 8004a24:	492a      	ldr	r1, [pc, #168]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	610b      	str	r3, [r1, #16]
 8004a2a:	e027      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d112      	bne.n	8004a58 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a32:	4b27      	ldr	r3, [pc, #156]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004a3a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	6892      	ldr	r2, [r2, #8]
 8004a42:	0211      	lsls	r1, r2, #8
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6912      	ldr	r2, [r2, #16]
 8004a48:	0852      	lsrs	r2, r2, #1
 8004a4a:	3a01      	subs	r2, #1
 8004a4c:	0552      	lsls	r2, r2, #21
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	491f      	ldr	r1, [pc, #124]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	610b      	str	r3, [r1, #16]
 8004a56:	e011      	b.n	8004a7c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a58:	4b1d      	ldr	r3, [pc, #116]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a60:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6892      	ldr	r2, [r2, #8]
 8004a68:	0211      	lsls	r1, r2, #8
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	6952      	ldr	r2, [r2, #20]
 8004a6e:	0852      	lsrs	r2, r2, #1
 8004a70:	3a01      	subs	r2, #1
 8004a72:	0652      	lsls	r2, r2, #25
 8004a74:	430a      	orrs	r2, r1
 8004a76:	4916      	ldr	r1, [pc, #88]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a7c:	4b14      	ldr	r3, [pc, #80]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a13      	ldr	r2, [pc, #76]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a82:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a86:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a88:	f7fc fef4 	bl	8001874 <HAL_GetTick>
 8004a8c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a8e:	e009      	b.n	8004aa4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a90:	f7fc fef0 	bl	8001874 <HAL_GetTick>
 8004a94:	4602      	mov	r2, r0
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	1ad3      	subs	r3, r2, r3
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d902      	bls.n	8004aa4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a9e:	2303      	movs	r3, #3
 8004aa0:	73fb      	strb	r3, [r7, #15]
          break;
 8004aa2:	e005      	b.n	8004ab0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d0ef      	beq.n	8004a90 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004ab0:	7bfb      	ldrb	r3, [r7, #15]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d106      	bne.n	8004ac4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ab6:	4b06      	ldr	r3, [pc, #24]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	4904      	ldr	r1, [pc, #16]	@ (8004ad0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3710      	adds	r7, #16
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bd80      	pop	{r7, pc}
 8004ace:	bf00      	nop
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	68db      	ldr	r3, [r3, #12]
 8004ae6:	f003 0303 	and.w	r3, r3, #3
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d018      	beq.n	8004b20 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004aee:	4b67      	ldr	r3, [pc, #412]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	f003 0203 	and.w	r2, r3, #3
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	d10d      	bne.n	8004b1a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
       ||
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d009      	beq.n	8004b1a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004b06:	4b61      	ldr	r3, [pc, #388]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b08:	68db      	ldr	r3, [r3, #12]
 8004b0a:	091b      	lsrs	r3, r3, #4
 8004b0c:	f003 0307 	and.w	r3, r3, #7
 8004b10:	1c5a      	adds	r2, r3, #1
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
       ||
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d047      	beq.n	8004baa <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	73fb      	strb	r3, [r7, #15]
 8004b1e:	e044      	b.n	8004baa <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b03      	cmp	r3, #3
 8004b26:	d018      	beq.n	8004b5a <RCCEx_PLLSAI2_Config+0x86>
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d825      	bhi.n	8004b78 <RCCEx_PLLSAI2_Config+0xa4>
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d002      	beq.n	8004b36 <RCCEx_PLLSAI2_Config+0x62>
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d009      	beq.n	8004b48 <RCCEx_PLLSAI2_Config+0x74>
 8004b34:	e020      	b.n	8004b78 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b36:	4b55      	ldr	r3, [pc, #340]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d11d      	bne.n	8004b7e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b46:	e01a      	b.n	8004b7e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b48:	4b50      	ldr	r3, [pc, #320]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d116      	bne.n	8004b82 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b58:	e013      	b.n	8004b82 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b5a:	4b4c      	ldr	r3, [pc, #304]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10f      	bne.n	8004b86 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b66:	4b49      	ldr	r3, [pc, #292]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d109      	bne.n	8004b86 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b76:	e006      	b.n	8004b86 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b7c:	e004      	b.n	8004b88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b7e:	bf00      	nop
 8004b80:	e002      	b.n	8004b88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b82:	bf00      	nop
 8004b84:	e000      	b.n	8004b88 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b86:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10d      	bne.n	8004baa <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b90:	68db      	ldr	r3, [r3, #12]
 8004b92:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	011b      	lsls	r3, r3, #4
 8004ba2:	430b      	orrs	r3, r1
 8004ba4:	4939      	ldr	r1, [pc, #228]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004baa:	7bfb      	ldrb	r3, [r7, #15]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d167      	bne.n	8004c80 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bb0:	4b36      	ldr	r3, [pc, #216]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a35      	ldr	r2, [pc, #212]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bb6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004bba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bbc:	f7fc fe5a 	bl	8001874 <HAL_GetTick>
 8004bc0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bc2:	e009      	b.n	8004bd8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bc4:	f7fc fe56 	bl	8001874 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d902      	bls.n	8004bd8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	73fb      	strb	r3, [r7, #15]
        break;
 8004bd6:	e005      	b.n	8004be4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bd8:	4b2c      	ldr	r3, [pc, #176]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1ef      	bne.n	8004bc4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d14a      	bne.n	8004c80 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d111      	bne.n	8004c14 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bf0:	4b26      	ldr	r3, [pc, #152]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bf2:	695b      	ldr	r3, [r3, #20]
 8004bf4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004bf8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6892      	ldr	r2, [r2, #8]
 8004c00:	0211      	lsls	r1, r2, #8
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	68d2      	ldr	r2, [r2, #12]
 8004c06:	0912      	lsrs	r2, r2, #4
 8004c08:	0452      	lsls	r2, r2, #17
 8004c0a:	430a      	orrs	r2, r1
 8004c0c:	491f      	ldr	r1, [pc, #124]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	614b      	str	r3, [r1, #20]
 8004c12:	e011      	b.n	8004c38 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c14:	4b1d      	ldr	r3, [pc, #116]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c16:	695b      	ldr	r3, [r3, #20]
 8004c18:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004c1c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	6892      	ldr	r2, [r2, #8]
 8004c24:	0211      	lsls	r1, r2, #8
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	6912      	ldr	r2, [r2, #16]
 8004c2a:	0852      	lsrs	r2, r2, #1
 8004c2c:	3a01      	subs	r2, #1
 8004c2e:	0652      	lsls	r2, r2, #25
 8004c30:	430a      	orrs	r2, r1
 8004c32:	4916      	ldr	r1, [pc, #88]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c38:	4b14      	ldr	r3, [pc, #80]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a13      	ldr	r2, [pc, #76]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fc fe16 	bl	8001874 <HAL_GetTick>
 8004c48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c4a:	e009      	b.n	8004c60 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c4c:	f7fc fe12 	bl	8001874 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d902      	bls.n	8004c60 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c5e:	e005      	b.n	8004c6c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c60:	4b0a      	ldr	r3, [pc, #40]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ef      	beq.n	8004c4c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c72:	4b06      	ldr	r3, [pc, #24]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c74:	695a      	ldr	r2, [r3, #20]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	695b      	ldr	r3, [r3, #20]
 8004c7a:	4904      	ldr	r1, [pc, #16]	@ (8004c8c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000

08004c90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b082      	sub	sp, #8
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d101      	bne.n	8004ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e040      	b.n	8004d24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d106      	bne.n	8004cb8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fc fbd6 	bl	8001464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2224      	movs	r2, #36	@ 0x24
 8004cbc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f022 0201 	bic.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d002      	beq.n	8004cdc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fb6a 	bl	80053b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004cdc:	6878      	ldr	r0, [r7, #4]
 8004cde:	f000 f8af 	bl	8004e40 <UART_SetConfig>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d101      	bne.n	8004cec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e01b      	b.n	8004d24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	685a      	ldr	r2, [r3, #4]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004cfa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	689a      	ldr	r2, [r3, #8]
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004d0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0201 	orr.w	r2, r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f000 fbe9 	bl	80054f4 <UART_CheckIdleState>
 8004d22:	4603      	mov	r3, r0
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3708      	adds	r7, #8
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b08a      	sub	sp, #40	@ 0x28
 8004d30:	af02      	add	r7, sp, #8
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	4613      	mov	r3, r2
 8004d3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004d40:	2b20      	cmp	r3, #32
 8004d42:	d177      	bne.n	8004e34 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d002      	beq.n	8004d50 <HAL_UART_Transmit+0x24>
 8004d4a:	88fb      	ldrh	r3, [r7, #6]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d101      	bne.n	8004d54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004d50:	2301      	movs	r3, #1
 8004d52:	e070      	b.n	8004e36 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2200      	movs	r2, #0
 8004d58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2221      	movs	r2, #33	@ 0x21
 8004d60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004d62:	f7fc fd87 	bl	8001874 <HAL_GetTick>
 8004d66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	88fa      	ldrh	r2, [r7, #6]
 8004d6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	88fa      	ldrh	r2, [r7, #6]
 8004d74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d80:	d108      	bne.n	8004d94 <HAL_UART_Transmit+0x68>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	61bb      	str	r3, [r7, #24]
 8004d92:	e003      	b.n	8004d9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004d9c:	e02f      	b.n	8004dfe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	9300      	str	r3, [sp, #0]
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2200      	movs	r2, #0
 8004da6:	2180      	movs	r1, #128	@ 0x80
 8004da8:	68f8      	ldr	r0, [r7, #12]
 8004daa:	f000 fc4b 	bl	8005644 <UART_WaitOnFlagUntilTimeout>
 8004dae:	4603      	mov	r3, r0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d004      	beq.n	8004dbe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2220      	movs	r2, #32
 8004db8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e03b      	b.n	8004e36 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10b      	bne.n	8004ddc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004dc4:	69bb      	ldr	r3, [r7, #24]
 8004dc6:	881a      	ldrh	r2, [r3, #0]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004dd0:	b292      	uxth	r2, r2
 8004dd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004dd4:	69bb      	ldr	r3, [r7, #24]
 8004dd6:	3302      	adds	r3, #2
 8004dd8:	61bb      	str	r3, [r7, #24]
 8004dda:	e007      	b.n	8004dec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	781a      	ldrb	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	3301      	adds	r3, #1
 8004dea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	3b01      	subs	r3, #1
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004e04:	b29b      	uxth	r3, r3
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d1c9      	bne.n	8004d9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	9300      	str	r3, [sp, #0]
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	2140      	movs	r1, #64	@ 0x40
 8004e14:	68f8      	ldr	r0, [r7, #12]
 8004e16:	f000 fc15 	bl	8005644 <UART_WaitOnFlagUntilTimeout>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d004      	beq.n	8004e2a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2220      	movs	r2, #32
 8004e24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e005      	b.n	8004e36 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004e30:	2300      	movs	r3, #0
 8004e32:	e000      	b.n	8004e36 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004e34:	2302      	movs	r3, #2
  }
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3720      	adds	r7, #32
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e44:	b08a      	sub	sp, #40	@ 0x28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	691b      	ldr	r3, [r3, #16]
 8004e58:	431a      	orrs	r2, r3
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	431a      	orrs	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	69db      	ldr	r3, [r3, #28]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	4ba4      	ldr	r3, [pc, #656]	@ (8005100 <UART_SetConfig+0x2c0>)
 8004e70:	4013      	ands	r3, r2
 8004e72:	68fa      	ldr	r2, [r7, #12]
 8004e74:	6812      	ldr	r2, [r2, #0]
 8004e76:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004e78:	430b      	orrs	r3, r1
 8004e7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	68da      	ldr	r2, [r3, #12]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	699b      	ldr	r3, [r3, #24]
 8004e96:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a99      	ldr	r2, [pc, #612]	@ (8005104 <UART_SetConfig+0x2c4>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d004      	beq.n	8004eac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	4a90      	ldr	r2, [pc, #576]	@ (8005108 <UART_SetConfig+0x2c8>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d126      	bne.n	8004f18 <UART_SetConfig+0xd8>
 8004eca:	4b90      	ldr	r3, [pc, #576]	@ (800510c <UART_SetConfig+0x2cc>)
 8004ecc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d81b      	bhi.n	8004f10 <UART_SetConfig+0xd0>
 8004ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee0 <UART_SetConfig+0xa0>)
 8004eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ede:	bf00      	nop
 8004ee0:	08004ef1 	.word	0x08004ef1
 8004ee4:	08004f01 	.word	0x08004f01
 8004ee8:	08004ef9 	.word	0x08004ef9
 8004eec:	08004f09 	.word	0x08004f09
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004ef6:	e116      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004efe:	e112      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004f00:	2304      	movs	r3, #4
 8004f02:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f06:	e10e      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004f08:	2308      	movs	r3, #8
 8004f0a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f0e:	e10a      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004f10:	2310      	movs	r3, #16
 8004f12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f16:	e106      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a7c      	ldr	r2, [pc, #496]	@ (8005110 <UART_SetConfig+0x2d0>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d138      	bne.n	8004f94 <UART_SetConfig+0x154>
 8004f22:	4b7a      	ldr	r3, [pc, #488]	@ (800510c <UART_SetConfig+0x2cc>)
 8004f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f28:	f003 030c 	and.w	r3, r3, #12
 8004f2c:	2b0c      	cmp	r3, #12
 8004f2e:	d82d      	bhi.n	8004f8c <UART_SetConfig+0x14c>
 8004f30:	a201      	add	r2, pc, #4	@ (adr r2, 8004f38 <UART_SetConfig+0xf8>)
 8004f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f36:	bf00      	nop
 8004f38:	08004f6d 	.word	0x08004f6d
 8004f3c:	08004f8d 	.word	0x08004f8d
 8004f40:	08004f8d 	.word	0x08004f8d
 8004f44:	08004f8d 	.word	0x08004f8d
 8004f48:	08004f7d 	.word	0x08004f7d
 8004f4c:	08004f8d 	.word	0x08004f8d
 8004f50:	08004f8d 	.word	0x08004f8d
 8004f54:	08004f8d 	.word	0x08004f8d
 8004f58:	08004f75 	.word	0x08004f75
 8004f5c:	08004f8d 	.word	0x08004f8d
 8004f60:	08004f8d 	.word	0x08004f8d
 8004f64:	08004f8d 	.word	0x08004f8d
 8004f68:	08004f85 	.word	0x08004f85
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f72:	e0d8      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004f74:	2302      	movs	r3, #2
 8004f76:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f7a:	e0d4      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004f7c:	2304      	movs	r3, #4
 8004f7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f82:	e0d0      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004f84:	2308      	movs	r3, #8
 8004f86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f8a:	e0cc      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004f8c:	2310      	movs	r3, #16
 8004f8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004f92:	e0c8      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a5e      	ldr	r2, [pc, #376]	@ (8005114 <UART_SetConfig+0x2d4>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d125      	bne.n	8004fea <UART_SetConfig+0x1aa>
 8004f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800510c <UART_SetConfig+0x2cc>)
 8004fa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fa4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004fa8:	2b30      	cmp	r3, #48	@ 0x30
 8004faa:	d016      	beq.n	8004fda <UART_SetConfig+0x19a>
 8004fac:	2b30      	cmp	r3, #48	@ 0x30
 8004fae:	d818      	bhi.n	8004fe2 <UART_SetConfig+0x1a2>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d00a      	beq.n	8004fca <UART_SetConfig+0x18a>
 8004fb4:	2b20      	cmp	r3, #32
 8004fb6:	d814      	bhi.n	8004fe2 <UART_SetConfig+0x1a2>
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <UART_SetConfig+0x182>
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d008      	beq.n	8004fd2 <UART_SetConfig+0x192>
 8004fc0:	e00f      	b.n	8004fe2 <UART_SetConfig+0x1a2>
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fc8:	e0ad      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004fca:	2302      	movs	r3, #2
 8004fcc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd0:	e0a9      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004fd2:	2304      	movs	r3, #4
 8004fd4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fd8:	e0a5      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004fda:	2308      	movs	r3, #8
 8004fdc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe0:	e0a1      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004fe2:	2310      	movs	r3, #16
 8004fe4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004fe8:	e09d      	b.n	8005126 <UART_SetConfig+0x2e6>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a4a      	ldr	r2, [pc, #296]	@ (8005118 <UART_SetConfig+0x2d8>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d125      	bne.n	8005040 <UART_SetConfig+0x200>
 8004ff4:	4b45      	ldr	r3, [pc, #276]	@ (800510c <UART_SetConfig+0x2cc>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ffa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004ffe:	2bc0      	cmp	r3, #192	@ 0xc0
 8005000:	d016      	beq.n	8005030 <UART_SetConfig+0x1f0>
 8005002:	2bc0      	cmp	r3, #192	@ 0xc0
 8005004:	d818      	bhi.n	8005038 <UART_SetConfig+0x1f8>
 8005006:	2b80      	cmp	r3, #128	@ 0x80
 8005008:	d00a      	beq.n	8005020 <UART_SetConfig+0x1e0>
 800500a:	2b80      	cmp	r3, #128	@ 0x80
 800500c:	d814      	bhi.n	8005038 <UART_SetConfig+0x1f8>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <UART_SetConfig+0x1d8>
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d008      	beq.n	8005028 <UART_SetConfig+0x1e8>
 8005016:	e00f      	b.n	8005038 <UART_SetConfig+0x1f8>
 8005018:	2300      	movs	r3, #0
 800501a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800501e:	e082      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005020:	2302      	movs	r3, #2
 8005022:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005026:	e07e      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005028:	2304      	movs	r3, #4
 800502a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800502e:	e07a      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005030:	2308      	movs	r3, #8
 8005032:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005036:	e076      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005038:	2310      	movs	r3, #16
 800503a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800503e:	e072      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a35      	ldr	r2, [pc, #212]	@ (800511c <UART_SetConfig+0x2dc>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d12a      	bne.n	80050a0 <UART_SetConfig+0x260>
 800504a:	4b30      	ldr	r3, [pc, #192]	@ (800510c <UART_SetConfig+0x2cc>)
 800504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005050:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005054:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005058:	d01a      	beq.n	8005090 <UART_SetConfig+0x250>
 800505a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800505e:	d81b      	bhi.n	8005098 <UART_SetConfig+0x258>
 8005060:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005064:	d00c      	beq.n	8005080 <UART_SetConfig+0x240>
 8005066:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800506a:	d815      	bhi.n	8005098 <UART_SetConfig+0x258>
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <UART_SetConfig+0x238>
 8005070:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005074:	d008      	beq.n	8005088 <UART_SetConfig+0x248>
 8005076:	e00f      	b.n	8005098 <UART_SetConfig+0x258>
 8005078:	2300      	movs	r3, #0
 800507a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800507e:	e052      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005080:	2302      	movs	r3, #2
 8005082:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005086:	e04e      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005088:	2304      	movs	r3, #4
 800508a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800508e:	e04a      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005090:	2308      	movs	r3, #8
 8005092:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005096:	e046      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005098:	2310      	movs	r3, #16
 800509a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800509e:	e042      	b.n	8005126 <UART_SetConfig+0x2e6>
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a17      	ldr	r2, [pc, #92]	@ (8005104 <UART_SetConfig+0x2c4>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d13a      	bne.n	8005120 <UART_SetConfig+0x2e0>
 80050aa:	4b18      	ldr	r3, [pc, #96]	@ (800510c <UART_SetConfig+0x2cc>)
 80050ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80050b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050b8:	d01a      	beq.n	80050f0 <UART_SetConfig+0x2b0>
 80050ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80050be:	d81b      	bhi.n	80050f8 <UART_SetConfig+0x2b8>
 80050c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c4:	d00c      	beq.n	80050e0 <UART_SetConfig+0x2a0>
 80050c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050ca:	d815      	bhi.n	80050f8 <UART_SetConfig+0x2b8>
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d003      	beq.n	80050d8 <UART_SetConfig+0x298>
 80050d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050d4:	d008      	beq.n	80050e8 <UART_SetConfig+0x2a8>
 80050d6:	e00f      	b.n	80050f8 <UART_SetConfig+0x2b8>
 80050d8:	2300      	movs	r3, #0
 80050da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050de:	e022      	b.n	8005126 <UART_SetConfig+0x2e6>
 80050e0:	2302      	movs	r3, #2
 80050e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050e6:	e01e      	b.n	8005126 <UART_SetConfig+0x2e6>
 80050e8:	2304      	movs	r3, #4
 80050ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050ee:	e01a      	b.n	8005126 <UART_SetConfig+0x2e6>
 80050f0:	2308      	movs	r3, #8
 80050f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050f6:	e016      	b.n	8005126 <UART_SetConfig+0x2e6>
 80050f8:	2310      	movs	r3, #16
 80050fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80050fe:	e012      	b.n	8005126 <UART_SetConfig+0x2e6>
 8005100:	efff69f3 	.word	0xefff69f3
 8005104:	40008000 	.word	0x40008000
 8005108:	40013800 	.word	0x40013800
 800510c:	40021000 	.word	0x40021000
 8005110:	40004400 	.word	0x40004400
 8005114:	40004800 	.word	0x40004800
 8005118:	40004c00 	.word	0x40004c00
 800511c:	40005000 	.word	0x40005000
 8005120:	2310      	movs	r3, #16
 8005122:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a9f      	ldr	r2, [pc, #636]	@ (80053a8 <UART_SetConfig+0x568>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d17a      	bne.n	8005226 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005130:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005134:	2b08      	cmp	r3, #8
 8005136:	d824      	bhi.n	8005182 <UART_SetConfig+0x342>
 8005138:	a201      	add	r2, pc, #4	@ (adr r2, 8005140 <UART_SetConfig+0x300>)
 800513a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800513e:	bf00      	nop
 8005140:	08005165 	.word	0x08005165
 8005144:	08005183 	.word	0x08005183
 8005148:	0800516d 	.word	0x0800516d
 800514c:	08005183 	.word	0x08005183
 8005150:	08005173 	.word	0x08005173
 8005154:	08005183 	.word	0x08005183
 8005158:	08005183 	.word	0x08005183
 800515c:	08005183 	.word	0x08005183
 8005160:	0800517b 	.word	0x0800517b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005164:	f7ff f84c 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8005168:	61f8      	str	r0, [r7, #28]
        break;
 800516a:	e010      	b.n	800518e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800516c:	4b8f      	ldr	r3, [pc, #572]	@ (80053ac <UART_SetConfig+0x56c>)
 800516e:	61fb      	str	r3, [r7, #28]
        break;
 8005170:	e00d      	b.n	800518e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005172:	f7fe ffad 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 8005176:	61f8      	str	r0, [r7, #28]
        break;
 8005178:	e009      	b.n	800518e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800517a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800517e:	61fb      	str	r3, [r7, #28]
        break;
 8005180:	e005      	b.n	800518e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800518c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	2b00      	cmp	r3, #0
 8005192:	f000 80fb 	beq.w	800538c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	4413      	add	r3, r2
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d305      	bcc.n	80051b2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80051ac:	69fa      	ldr	r2, [r7, #28]
 80051ae:	429a      	cmp	r2, r3
 80051b0:	d903      	bls.n	80051ba <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80051b8:	e0e8      	b.n	800538c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2200      	movs	r2, #0
 80051be:	461c      	mov	r4, r3
 80051c0:	4615      	mov	r5, r2
 80051c2:	f04f 0200 	mov.w	r2, #0
 80051c6:	f04f 0300 	mov.w	r3, #0
 80051ca:	022b      	lsls	r3, r5, #8
 80051cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80051d0:	0222      	lsls	r2, r4, #8
 80051d2:	68f9      	ldr	r1, [r7, #12]
 80051d4:	6849      	ldr	r1, [r1, #4]
 80051d6:	0849      	lsrs	r1, r1, #1
 80051d8:	2000      	movs	r0, #0
 80051da:	4688      	mov	r8, r1
 80051dc:	4681      	mov	r9, r0
 80051de:	eb12 0a08 	adds.w	sl, r2, r8
 80051e2:	eb43 0b09 	adc.w	fp, r3, r9
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	603b      	str	r3, [r7, #0]
 80051ee:	607a      	str	r2, [r7, #4]
 80051f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051f4:	4650      	mov	r0, sl
 80051f6:	4659      	mov	r1, fp
 80051f8:	f7fb fcd6 	bl	8000ba8 <__aeabi_uldivmod>
 80051fc:	4602      	mov	r2, r0
 80051fe:	460b      	mov	r3, r1
 8005200:	4613      	mov	r3, r2
 8005202:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005204:	69bb      	ldr	r3, [r7, #24]
 8005206:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800520a:	d308      	bcc.n	800521e <UART_SetConfig+0x3de>
 800520c:	69bb      	ldr	r3, [r7, #24]
 800520e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005212:	d204      	bcs.n	800521e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	60da      	str	r2, [r3, #12]
 800521c:	e0b6      	b.n	800538c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800521e:	2301      	movs	r3, #1
 8005220:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005224:	e0b2      	b.n	800538c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	69db      	ldr	r3, [r3, #28]
 800522a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800522e:	d15e      	bne.n	80052ee <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005230:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005234:	2b08      	cmp	r3, #8
 8005236:	d828      	bhi.n	800528a <UART_SetConfig+0x44a>
 8005238:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <UART_SetConfig+0x400>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	08005265 	.word	0x08005265
 8005244:	0800526d 	.word	0x0800526d
 8005248:	08005275 	.word	0x08005275
 800524c:	0800528b 	.word	0x0800528b
 8005250:	0800527b 	.word	0x0800527b
 8005254:	0800528b 	.word	0x0800528b
 8005258:	0800528b 	.word	0x0800528b
 800525c:	0800528b 	.word	0x0800528b
 8005260:	08005283 	.word	0x08005283
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005264:	f7fe ffcc 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8005268:	61f8      	str	r0, [r7, #28]
        break;
 800526a:	e014      	b.n	8005296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800526c:	f7fe ffde 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 8005270:	61f8      	str	r0, [r7, #28]
        break;
 8005272:	e010      	b.n	8005296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005274:	4b4d      	ldr	r3, [pc, #308]	@ (80053ac <UART_SetConfig+0x56c>)
 8005276:	61fb      	str	r3, [r7, #28]
        break;
 8005278:	e00d      	b.n	8005296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800527a:	f7fe ff29 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800527e:	61f8      	str	r0, [r7, #28]
        break;
 8005280:	e009      	b.n	8005296 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005282:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005286:	61fb      	str	r3, [r7, #28]
        break;
 8005288:	e005      	b.n	8005296 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800528a:	2300      	movs	r3, #0
 800528c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005294:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d077      	beq.n	800538c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	005a      	lsls	r2, r3, #1
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	085b      	lsrs	r3, r3, #1
 80052a6:	441a      	add	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	2b0f      	cmp	r3, #15
 80052b6:	d916      	bls.n	80052e6 <UART_SetConfig+0x4a6>
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052be:	d212      	bcs.n	80052e6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f023 030f 	bic.w	r3, r3, #15
 80052c8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	f003 0307 	and.w	r3, r3, #7
 80052d4:	b29a      	uxth	r2, r3
 80052d6:	8afb      	ldrh	r3, [r7, #22]
 80052d8:	4313      	orrs	r3, r2
 80052da:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	8afa      	ldrh	r2, [r7, #22]
 80052e2:	60da      	str	r2, [r3, #12]
 80052e4:	e052      	b.n	800538c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80052e6:	2301      	movs	r3, #1
 80052e8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80052ec:	e04e      	b.n	800538c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052ee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052f2:	2b08      	cmp	r3, #8
 80052f4:	d827      	bhi.n	8005346 <UART_SetConfig+0x506>
 80052f6:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <UART_SetConfig+0x4bc>)
 80052f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fc:	08005321 	.word	0x08005321
 8005300:	08005329 	.word	0x08005329
 8005304:	08005331 	.word	0x08005331
 8005308:	08005347 	.word	0x08005347
 800530c:	08005337 	.word	0x08005337
 8005310:	08005347 	.word	0x08005347
 8005314:	08005347 	.word	0x08005347
 8005318:	08005347 	.word	0x08005347
 800531c:	0800533f 	.word	0x0800533f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005320:	f7fe ff6e 	bl	8004200 <HAL_RCC_GetPCLK1Freq>
 8005324:	61f8      	str	r0, [r7, #28]
        break;
 8005326:	e014      	b.n	8005352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005328:	f7fe ff80 	bl	800422c <HAL_RCC_GetPCLK2Freq>
 800532c:	61f8      	str	r0, [r7, #28]
        break;
 800532e:	e010      	b.n	8005352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005330:	4b1e      	ldr	r3, [pc, #120]	@ (80053ac <UART_SetConfig+0x56c>)
 8005332:	61fb      	str	r3, [r7, #28]
        break;
 8005334:	e00d      	b.n	8005352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005336:	f7fe fecb 	bl	80040d0 <HAL_RCC_GetSysClockFreq>
 800533a:	61f8      	str	r0, [r7, #28]
        break;
 800533c:	e009      	b.n	8005352 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005342:	61fb      	str	r3, [r7, #28]
        break;
 8005344:	e005      	b.n	8005352 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005346:	2300      	movs	r3, #0
 8005348:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005350:	bf00      	nop
    }

    if (pclk != 0U)
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d019      	beq.n	800538c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	085a      	lsrs	r2, r3, #1
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	441a      	add	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	fbb2 f3f3 	udiv	r3, r2, r3
 800536a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800536c:	69bb      	ldr	r3, [r7, #24]
 800536e:	2b0f      	cmp	r3, #15
 8005370:	d909      	bls.n	8005386 <UART_SetConfig+0x546>
 8005372:	69bb      	ldr	r3, [r7, #24]
 8005374:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005378:	d205      	bcs.n	8005386 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	60da      	str	r2, [r3, #12]
 8005384:	e002      	b.n	800538c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2200      	movs	r2, #0
 8005396:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005398:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800539c:	4618      	mov	r0, r3
 800539e:	3728      	adds	r7, #40	@ 0x28
 80053a0:	46bd      	mov	sp, r7
 80053a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053a6:	bf00      	nop
 80053a8:	40008000 	.word	0x40008000
 80053ac:	00f42400 	.word	0x00f42400

080053b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b083      	sub	sp, #12
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053bc:	f003 0308 	and.w	r3, r3, #8
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d00a      	beq.n	80053da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	430a      	orrs	r2, r1
 80053d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d00a      	beq.n	80053fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	430a      	orrs	r2, r1
 80053fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005400:	f003 0302 	and.w	r3, r3, #2
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00a      	beq.n	800541e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005422:	f003 0304 	and.w	r3, r3, #4
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	430a      	orrs	r2, r1
 800543e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005444:	f003 0310 	and.w	r3, r3, #16
 8005448:	2b00      	cmp	r3, #0
 800544a:	d00a      	beq.n	8005462 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	430a      	orrs	r2, r1
 8005460:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d00a      	beq.n	8005484 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	430a      	orrs	r2, r1
 8005482:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01a      	beq.n	80054c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ae:	d10a      	bne.n	80054c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d00a      	beq.n	80054e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	605a      	str	r2, [r3, #4]
  }
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b098      	sub	sp, #96	@ 0x60
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005504:	f7fc f9b6 	bl	8001874 <HAL_GetTick>
 8005508:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f003 0308 	and.w	r3, r3, #8
 8005514:	2b08      	cmp	r3, #8
 8005516:	d12e      	bne.n	8005576 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005518:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005520:	2200      	movs	r2, #0
 8005522:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f88c 	bl	8005644 <UART_WaitOnFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d021      	beq.n	8005576 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553a:	e853 3f00 	ldrex	r3, [r3]
 800553e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005542:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005546:	653b      	str	r3, [r7, #80]	@ 0x50
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	461a      	mov	r2, r3
 800554e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005550:	647b      	str	r3, [r7, #68]	@ 0x44
 8005552:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005554:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005556:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005558:	e841 2300 	strex	r3, r2, [r1]
 800555c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800555e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005560:	2b00      	cmp	r3, #0
 8005562:	d1e6      	bne.n	8005532 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2220      	movs	r2, #32
 8005568:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e062      	b.n	800563c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 0304 	and.w	r3, r3, #4
 8005580:	2b04      	cmp	r3, #4
 8005582:	d149      	bne.n	8005618 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005584:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005588:	9300      	str	r3, [sp, #0]
 800558a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800558c:	2200      	movs	r2, #0
 800558e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005592:	6878      	ldr	r0, [r7, #4]
 8005594:	f000 f856 	bl	8005644 <UART_WaitOnFlagUntilTimeout>
 8005598:	4603      	mov	r3, r0
 800559a:	2b00      	cmp	r3, #0
 800559c:	d03c      	beq.n	8005618 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	623b      	str	r3, [r7, #32]
   return(result);
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	461a      	mov	r2, r3
 80055ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80055be:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055c4:	e841 2300 	strex	r3, r2, [r1]
 80055c8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d1e6      	bne.n	800559e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3308      	adds	r3, #8
 80055d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	60fb      	str	r3, [r7, #12]
   return(result);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0301 	bic.w	r3, r3, #1
 80055e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3308      	adds	r3, #8
 80055ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055f0:	61fa      	str	r2, [r7, #28]
 80055f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	69b9      	ldr	r1, [r7, #24]
 80055f6:	69fa      	ldr	r2, [r7, #28]
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	617b      	str	r3, [r7, #20]
   return(result);
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e5      	bne.n	80055d0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005614:	2303      	movs	r3, #3
 8005616:	e011      	b.n	800563c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2220      	movs	r2, #32
 800561c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2220      	movs	r2, #32
 8005622:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2200      	movs	r2, #0
 8005630:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800563a:	2300      	movs	r3, #0
}
 800563c:	4618      	mov	r0, r3
 800563e:	3758      	adds	r7, #88	@ 0x58
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	603b      	str	r3, [r7, #0]
 8005650:	4613      	mov	r3, r2
 8005652:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005654:	e04f      	b.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800565c:	d04b      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800565e:	f7fc f909 	bl	8001874 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	69ba      	ldr	r2, [r7, #24]
 800566a:	429a      	cmp	r2, r3
 800566c:	d302      	bcc.n	8005674 <UART_WaitOnFlagUntilTimeout+0x30>
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d101      	bne.n	8005678 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e04e      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 0304 	and.w	r3, r3, #4
 8005682:	2b00      	cmp	r3, #0
 8005684:	d037      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b80      	cmp	r3, #128	@ 0x80
 800568a:	d034      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	2b40      	cmp	r3, #64	@ 0x40
 8005690:	d031      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	69db      	ldr	r3, [r3, #28]
 8005698:	f003 0308 	and.w	r3, r3, #8
 800569c:	2b08      	cmp	r3, #8
 800569e:	d110      	bne.n	80056c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2208      	movs	r2, #8
 80056a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f000 f838 	bl	800571e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2208      	movs	r2, #8
 80056b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	e029      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	69db      	ldr	r3, [r3, #28]
 80056c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056d0:	d111      	bne.n	80056f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	f000 f81e 	bl	800571e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	2220      	movs	r2, #32
 80056e6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	2200      	movs	r2, #0
 80056ee:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e00f      	b.n	8005716 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	4013      	ands	r3, r2
 8005700:	68ba      	ldr	r2, [r7, #8]
 8005702:	429a      	cmp	r2, r3
 8005704:	bf0c      	ite	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	2300      	movne	r3, #0
 800570a:	b2db      	uxtb	r3, r3
 800570c:	461a      	mov	r2, r3
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	429a      	cmp	r2, r3
 8005712:	d0a0      	beq.n	8005656 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800571e:	b480      	push	{r7}
 8005720:	b095      	sub	sp, #84	@ 0x54
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800572e:	e853 3f00 	ldrex	r3, [r3]
 8005732:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005736:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800573a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	461a      	mov	r2, r3
 8005742:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005744:	643b      	str	r3, [r7, #64]	@ 0x40
 8005746:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800574a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005752:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e6      	bne.n	8005726 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	3308      	adds	r3, #8
 800575e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	e853 3f00 	ldrex	r3, [r3]
 8005766:	61fb      	str	r3, [r7, #28]
   return(result);
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f023 0301 	bic.w	r3, r3, #1
 800576e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3308      	adds	r3, #8
 8005776:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005778:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800577a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800577c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800577e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005780:	e841 2300 	strex	r3, r2, [r1]
 8005784:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e5      	bne.n	8005758 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005790:	2b01      	cmp	r3, #1
 8005792:	d118      	bne.n	80057c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	f023 0310 	bic.w	r3, r3, #16
 80057a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057b6:	6979      	ldr	r1, [r7, #20]
 80057b8:	69ba      	ldr	r2, [r7, #24]
 80057ba:	e841 2300 	strex	r3, r2, [r1]
 80057be:	613b      	str	r3, [r7, #16]
   return(result);
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d1e6      	bne.n	8005794 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2220      	movs	r2, #32
 80057ca:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80057da:	bf00      	nop
 80057dc:	3754      	adds	r7, #84	@ 0x54
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr

080057e6 <__cvt>:
 80057e6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057ea:	ec57 6b10 	vmov	r6, r7, d0
 80057ee:	2f00      	cmp	r7, #0
 80057f0:	460c      	mov	r4, r1
 80057f2:	4619      	mov	r1, r3
 80057f4:	463b      	mov	r3, r7
 80057f6:	bfbb      	ittet	lt
 80057f8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80057fc:	461f      	movlt	r7, r3
 80057fe:	2300      	movge	r3, #0
 8005800:	232d      	movlt	r3, #45	@ 0x2d
 8005802:	700b      	strb	r3, [r1, #0]
 8005804:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005806:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800580a:	4691      	mov	r9, r2
 800580c:	f023 0820 	bic.w	r8, r3, #32
 8005810:	bfbc      	itt	lt
 8005812:	4632      	movlt	r2, r6
 8005814:	4616      	movlt	r6, r2
 8005816:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800581a:	d005      	beq.n	8005828 <__cvt+0x42>
 800581c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005820:	d100      	bne.n	8005824 <__cvt+0x3e>
 8005822:	3401      	adds	r4, #1
 8005824:	2102      	movs	r1, #2
 8005826:	e000      	b.n	800582a <__cvt+0x44>
 8005828:	2103      	movs	r1, #3
 800582a:	ab03      	add	r3, sp, #12
 800582c:	9301      	str	r3, [sp, #4]
 800582e:	ab02      	add	r3, sp, #8
 8005830:	9300      	str	r3, [sp, #0]
 8005832:	ec47 6b10 	vmov	d0, r6, r7
 8005836:	4653      	mov	r3, sl
 8005838:	4622      	mov	r2, r4
 800583a:	f000 fe6d 	bl	8006518 <_dtoa_r>
 800583e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005842:	4605      	mov	r5, r0
 8005844:	d119      	bne.n	800587a <__cvt+0x94>
 8005846:	f019 0f01 	tst.w	r9, #1
 800584a:	d00e      	beq.n	800586a <__cvt+0x84>
 800584c:	eb00 0904 	add.w	r9, r0, r4
 8005850:	2200      	movs	r2, #0
 8005852:	2300      	movs	r3, #0
 8005854:	4630      	mov	r0, r6
 8005856:	4639      	mov	r1, r7
 8005858:	f7fb f936 	bl	8000ac8 <__aeabi_dcmpeq>
 800585c:	b108      	cbz	r0, 8005862 <__cvt+0x7c>
 800585e:	f8cd 900c 	str.w	r9, [sp, #12]
 8005862:	2230      	movs	r2, #48	@ 0x30
 8005864:	9b03      	ldr	r3, [sp, #12]
 8005866:	454b      	cmp	r3, r9
 8005868:	d31e      	bcc.n	80058a8 <__cvt+0xc2>
 800586a:	9b03      	ldr	r3, [sp, #12]
 800586c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800586e:	1b5b      	subs	r3, r3, r5
 8005870:	4628      	mov	r0, r5
 8005872:	6013      	str	r3, [r2, #0]
 8005874:	b004      	add	sp, #16
 8005876:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800587a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800587e:	eb00 0904 	add.w	r9, r0, r4
 8005882:	d1e5      	bne.n	8005850 <__cvt+0x6a>
 8005884:	7803      	ldrb	r3, [r0, #0]
 8005886:	2b30      	cmp	r3, #48	@ 0x30
 8005888:	d10a      	bne.n	80058a0 <__cvt+0xba>
 800588a:	2200      	movs	r2, #0
 800588c:	2300      	movs	r3, #0
 800588e:	4630      	mov	r0, r6
 8005890:	4639      	mov	r1, r7
 8005892:	f7fb f919 	bl	8000ac8 <__aeabi_dcmpeq>
 8005896:	b918      	cbnz	r0, 80058a0 <__cvt+0xba>
 8005898:	f1c4 0401 	rsb	r4, r4, #1
 800589c:	f8ca 4000 	str.w	r4, [sl]
 80058a0:	f8da 3000 	ldr.w	r3, [sl]
 80058a4:	4499      	add	r9, r3
 80058a6:	e7d3      	b.n	8005850 <__cvt+0x6a>
 80058a8:	1c59      	adds	r1, r3, #1
 80058aa:	9103      	str	r1, [sp, #12]
 80058ac:	701a      	strb	r2, [r3, #0]
 80058ae:	e7d9      	b.n	8005864 <__cvt+0x7e>

080058b0 <__exponent>:
 80058b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80058b2:	2900      	cmp	r1, #0
 80058b4:	bfba      	itte	lt
 80058b6:	4249      	neglt	r1, r1
 80058b8:	232d      	movlt	r3, #45	@ 0x2d
 80058ba:	232b      	movge	r3, #43	@ 0x2b
 80058bc:	2909      	cmp	r1, #9
 80058be:	7002      	strb	r2, [r0, #0]
 80058c0:	7043      	strb	r3, [r0, #1]
 80058c2:	dd29      	ble.n	8005918 <__exponent+0x68>
 80058c4:	f10d 0307 	add.w	r3, sp, #7
 80058c8:	461d      	mov	r5, r3
 80058ca:	270a      	movs	r7, #10
 80058cc:	461a      	mov	r2, r3
 80058ce:	fbb1 f6f7 	udiv	r6, r1, r7
 80058d2:	fb07 1416 	mls	r4, r7, r6, r1
 80058d6:	3430      	adds	r4, #48	@ 0x30
 80058d8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80058dc:	460c      	mov	r4, r1
 80058de:	2c63      	cmp	r4, #99	@ 0x63
 80058e0:	f103 33ff 	add.w	r3, r3, #4294967295
 80058e4:	4631      	mov	r1, r6
 80058e6:	dcf1      	bgt.n	80058cc <__exponent+0x1c>
 80058e8:	3130      	adds	r1, #48	@ 0x30
 80058ea:	1e94      	subs	r4, r2, #2
 80058ec:	f803 1c01 	strb.w	r1, [r3, #-1]
 80058f0:	1c41      	adds	r1, r0, #1
 80058f2:	4623      	mov	r3, r4
 80058f4:	42ab      	cmp	r3, r5
 80058f6:	d30a      	bcc.n	800590e <__exponent+0x5e>
 80058f8:	f10d 0309 	add.w	r3, sp, #9
 80058fc:	1a9b      	subs	r3, r3, r2
 80058fe:	42ac      	cmp	r4, r5
 8005900:	bf88      	it	hi
 8005902:	2300      	movhi	r3, #0
 8005904:	3302      	adds	r3, #2
 8005906:	4403      	add	r3, r0
 8005908:	1a18      	subs	r0, r3, r0
 800590a:	b003      	add	sp, #12
 800590c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800590e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005912:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005916:	e7ed      	b.n	80058f4 <__exponent+0x44>
 8005918:	2330      	movs	r3, #48	@ 0x30
 800591a:	3130      	adds	r1, #48	@ 0x30
 800591c:	7083      	strb	r3, [r0, #2]
 800591e:	70c1      	strb	r1, [r0, #3]
 8005920:	1d03      	adds	r3, r0, #4
 8005922:	e7f1      	b.n	8005908 <__exponent+0x58>

08005924 <_printf_float>:
 8005924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005928:	b08d      	sub	sp, #52	@ 0x34
 800592a:	460c      	mov	r4, r1
 800592c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005930:	4616      	mov	r6, r2
 8005932:	461f      	mov	r7, r3
 8005934:	4605      	mov	r5, r0
 8005936:	f000 fcef 	bl	8006318 <_localeconv_r>
 800593a:	6803      	ldr	r3, [r0, #0]
 800593c:	9304      	str	r3, [sp, #16]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fa fc96 	bl	8000270 <strlen>
 8005944:	2300      	movs	r3, #0
 8005946:	930a      	str	r3, [sp, #40]	@ 0x28
 8005948:	f8d8 3000 	ldr.w	r3, [r8]
 800594c:	9005      	str	r0, [sp, #20]
 800594e:	3307      	adds	r3, #7
 8005950:	f023 0307 	bic.w	r3, r3, #7
 8005954:	f103 0208 	add.w	r2, r3, #8
 8005958:	f894 a018 	ldrb.w	sl, [r4, #24]
 800595c:	f8d4 b000 	ldr.w	fp, [r4]
 8005960:	f8c8 2000 	str.w	r2, [r8]
 8005964:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005968:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800596c:	9307      	str	r3, [sp, #28]
 800596e:	f8cd 8018 	str.w	r8, [sp, #24]
 8005972:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005976:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800597a:	4b9c      	ldr	r3, [pc, #624]	@ (8005bec <_printf_float+0x2c8>)
 800597c:	f04f 32ff 	mov.w	r2, #4294967295
 8005980:	f7fb f8d4 	bl	8000b2c <__aeabi_dcmpun>
 8005984:	bb70      	cbnz	r0, 80059e4 <_printf_float+0xc0>
 8005986:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800598a:	4b98      	ldr	r3, [pc, #608]	@ (8005bec <_printf_float+0x2c8>)
 800598c:	f04f 32ff 	mov.w	r2, #4294967295
 8005990:	f7fb f8ae 	bl	8000af0 <__aeabi_dcmple>
 8005994:	bb30      	cbnz	r0, 80059e4 <_printf_float+0xc0>
 8005996:	2200      	movs	r2, #0
 8005998:	2300      	movs	r3, #0
 800599a:	4640      	mov	r0, r8
 800599c:	4649      	mov	r1, r9
 800599e:	f7fb f89d 	bl	8000adc <__aeabi_dcmplt>
 80059a2:	b110      	cbz	r0, 80059aa <_printf_float+0x86>
 80059a4:	232d      	movs	r3, #45	@ 0x2d
 80059a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059aa:	4a91      	ldr	r2, [pc, #580]	@ (8005bf0 <_printf_float+0x2cc>)
 80059ac:	4b91      	ldr	r3, [pc, #580]	@ (8005bf4 <_printf_float+0x2d0>)
 80059ae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80059b2:	bf8c      	ite	hi
 80059b4:	4690      	movhi	r8, r2
 80059b6:	4698      	movls	r8, r3
 80059b8:	2303      	movs	r3, #3
 80059ba:	6123      	str	r3, [r4, #16]
 80059bc:	f02b 0304 	bic.w	r3, fp, #4
 80059c0:	6023      	str	r3, [r4, #0]
 80059c2:	f04f 0900 	mov.w	r9, #0
 80059c6:	9700      	str	r7, [sp, #0]
 80059c8:	4633      	mov	r3, r6
 80059ca:	aa0b      	add	r2, sp, #44	@ 0x2c
 80059cc:	4621      	mov	r1, r4
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 f9d2 	bl	8005d78 <_printf_common>
 80059d4:	3001      	adds	r0, #1
 80059d6:	f040 808d 	bne.w	8005af4 <_printf_float+0x1d0>
 80059da:	f04f 30ff 	mov.w	r0, #4294967295
 80059de:	b00d      	add	sp, #52	@ 0x34
 80059e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059e4:	4642      	mov	r2, r8
 80059e6:	464b      	mov	r3, r9
 80059e8:	4640      	mov	r0, r8
 80059ea:	4649      	mov	r1, r9
 80059ec:	f7fb f89e 	bl	8000b2c <__aeabi_dcmpun>
 80059f0:	b140      	cbz	r0, 8005a04 <_printf_float+0xe0>
 80059f2:	464b      	mov	r3, r9
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	bfbc      	itt	lt
 80059f8:	232d      	movlt	r3, #45	@ 0x2d
 80059fa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80059fe:	4a7e      	ldr	r2, [pc, #504]	@ (8005bf8 <_printf_float+0x2d4>)
 8005a00:	4b7e      	ldr	r3, [pc, #504]	@ (8005bfc <_printf_float+0x2d8>)
 8005a02:	e7d4      	b.n	80059ae <_printf_float+0x8a>
 8005a04:	6863      	ldr	r3, [r4, #4]
 8005a06:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005a0a:	9206      	str	r2, [sp, #24]
 8005a0c:	1c5a      	adds	r2, r3, #1
 8005a0e:	d13b      	bne.n	8005a88 <_printf_float+0x164>
 8005a10:	2306      	movs	r3, #6
 8005a12:	6063      	str	r3, [r4, #4]
 8005a14:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005a18:	2300      	movs	r3, #0
 8005a1a:	6022      	str	r2, [r4, #0]
 8005a1c:	9303      	str	r3, [sp, #12]
 8005a1e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005a20:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005a24:	ab09      	add	r3, sp, #36	@ 0x24
 8005a26:	9300      	str	r3, [sp, #0]
 8005a28:	6861      	ldr	r1, [r4, #4]
 8005a2a:	ec49 8b10 	vmov	d0, r8, r9
 8005a2e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005a32:	4628      	mov	r0, r5
 8005a34:	f7ff fed7 	bl	80057e6 <__cvt>
 8005a38:	9b06      	ldr	r3, [sp, #24]
 8005a3a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005a3c:	2b47      	cmp	r3, #71	@ 0x47
 8005a3e:	4680      	mov	r8, r0
 8005a40:	d129      	bne.n	8005a96 <_printf_float+0x172>
 8005a42:	1cc8      	adds	r0, r1, #3
 8005a44:	db02      	blt.n	8005a4c <_printf_float+0x128>
 8005a46:	6863      	ldr	r3, [r4, #4]
 8005a48:	4299      	cmp	r1, r3
 8005a4a:	dd41      	ble.n	8005ad0 <_printf_float+0x1ac>
 8005a4c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005a50:	fa5f fa8a 	uxtb.w	sl, sl
 8005a54:	3901      	subs	r1, #1
 8005a56:	4652      	mov	r2, sl
 8005a58:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005a5c:	9109      	str	r1, [sp, #36]	@ 0x24
 8005a5e:	f7ff ff27 	bl	80058b0 <__exponent>
 8005a62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a64:	1813      	adds	r3, r2, r0
 8005a66:	2a01      	cmp	r2, #1
 8005a68:	4681      	mov	r9, r0
 8005a6a:	6123      	str	r3, [r4, #16]
 8005a6c:	dc02      	bgt.n	8005a74 <_printf_float+0x150>
 8005a6e:	6822      	ldr	r2, [r4, #0]
 8005a70:	07d2      	lsls	r2, r2, #31
 8005a72:	d501      	bpl.n	8005a78 <_printf_float+0x154>
 8005a74:	3301      	adds	r3, #1
 8005a76:	6123      	str	r3, [r4, #16]
 8005a78:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d0a2      	beq.n	80059c6 <_printf_float+0xa2>
 8005a80:	232d      	movs	r3, #45	@ 0x2d
 8005a82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005a86:	e79e      	b.n	80059c6 <_printf_float+0xa2>
 8005a88:	9a06      	ldr	r2, [sp, #24]
 8005a8a:	2a47      	cmp	r2, #71	@ 0x47
 8005a8c:	d1c2      	bne.n	8005a14 <_printf_float+0xf0>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d1c0      	bne.n	8005a14 <_printf_float+0xf0>
 8005a92:	2301      	movs	r3, #1
 8005a94:	e7bd      	b.n	8005a12 <_printf_float+0xee>
 8005a96:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a9a:	d9db      	bls.n	8005a54 <_printf_float+0x130>
 8005a9c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005aa0:	d118      	bne.n	8005ad4 <_printf_float+0x1b0>
 8005aa2:	2900      	cmp	r1, #0
 8005aa4:	6863      	ldr	r3, [r4, #4]
 8005aa6:	dd0b      	ble.n	8005ac0 <_printf_float+0x19c>
 8005aa8:	6121      	str	r1, [r4, #16]
 8005aaa:	b913      	cbnz	r3, 8005ab2 <_printf_float+0x18e>
 8005aac:	6822      	ldr	r2, [r4, #0]
 8005aae:	07d0      	lsls	r0, r2, #31
 8005ab0:	d502      	bpl.n	8005ab8 <_printf_float+0x194>
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	440b      	add	r3, r1
 8005ab6:	6123      	str	r3, [r4, #16]
 8005ab8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005aba:	f04f 0900 	mov.w	r9, #0
 8005abe:	e7db      	b.n	8005a78 <_printf_float+0x154>
 8005ac0:	b913      	cbnz	r3, 8005ac8 <_printf_float+0x1a4>
 8005ac2:	6822      	ldr	r2, [r4, #0]
 8005ac4:	07d2      	lsls	r2, r2, #31
 8005ac6:	d501      	bpl.n	8005acc <_printf_float+0x1a8>
 8005ac8:	3302      	adds	r3, #2
 8005aca:	e7f4      	b.n	8005ab6 <_printf_float+0x192>
 8005acc:	2301      	movs	r3, #1
 8005ace:	e7f2      	b.n	8005ab6 <_printf_float+0x192>
 8005ad0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005ad4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ad6:	4299      	cmp	r1, r3
 8005ad8:	db05      	blt.n	8005ae6 <_printf_float+0x1c2>
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	6121      	str	r1, [r4, #16]
 8005ade:	07d8      	lsls	r0, r3, #31
 8005ae0:	d5ea      	bpl.n	8005ab8 <_printf_float+0x194>
 8005ae2:	1c4b      	adds	r3, r1, #1
 8005ae4:	e7e7      	b.n	8005ab6 <_printf_float+0x192>
 8005ae6:	2900      	cmp	r1, #0
 8005ae8:	bfd4      	ite	le
 8005aea:	f1c1 0202 	rsble	r2, r1, #2
 8005aee:	2201      	movgt	r2, #1
 8005af0:	4413      	add	r3, r2
 8005af2:	e7e0      	b.n	8005ab6 <_printf_float+0x192>
 8005af4:	6823      	ldr	r3, [r4, #0]
 8005af6:	055a      	lsls	r2, r3, #21
 8005af8:	d407      	bmi.n	8005b0a <_printf_float+0x1e6>
 8005afa:	6923      	ldr	r3, [r4, #16]
 8005afc:	4642      	mov	r2, r8
 8005afe:	4631      	mov	r1, r6
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	d12b      	bne.n	8005b60 <_printf_float+0x23c>
 8005b08:	e767      	b.n	80059da <_printf_float+0xb6>
 8005b0a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005b0e:	f240 80dd 	bls.w	8005ccc <_printf_float+0x3a8>
 8005b12:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b16:	2200      	movs	r2, #0
 8005b18:	2300      	movs	r3, #0
 8005b1a:	f7fa ffd5 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d033      	beq.n	8005b8a <_printf_float+0x266>
 8005b22:	4a37      	ldr	r2, [pc, #220]	@ (8005c00 <_printf_float+0x2dc>)
 8005b24:	2301      	movs	r3, #1
 8005b26:	4631      	mov	r1, r6
 8005b28:	4628      	mov	r0, r5
 8005b2a:	47b8      	blx	r7
 8005b2c:	3001      	adds	r0, #1
 8005b2e:	f43f af54 	beq.w	80059da <_printf_float+0xb6>
 8005b32:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005b36:	4543      	cmp	r3, r8
 8005b38:	db02      	blt.n	8005b40 <_printf_float+0x21c>
 8005b3a:	6823      	ldr	r3, [r4, #0]
 8005b3c:	07d8      	lsls	r0, r3, #31
 8005b3e:	d50f      	bpl.n	8005b60 <_printf_float+0x23c>
 8005b40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b44:	4631      	mov	r1, r6
 8005b46:	4628      	mov	r0, r5
 8005b48:	47b8      	blx	r7
 8005b4a:	3001      	adds	r0, #1
 8005b4c:	f43f af45 	beq.w	80059da <_printf_float+0xb6>
 8005b50:	f04f 0900 	mov.w	r9, #0
 8005b54:	f108 38ff 	add.w	r8, r8, #4294967295
 8005b58:	f104 0a1a 	add.w	sl, r4, #26
 8005b5c:	45c8      	cmp	r8, r9
 8005b5e:	dc09      	bgt.n	8005b74 <_printf_float+0x250>
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	079b      	lsls	r3, r3, #30
 8005b64:	f100 8103 	bmi.w	8005d6e <_printf_float+0x44a>
 8005b68:	68e0      	ldr	r0, [r4, #12]
 8005b6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b6c:	4298      	cmp	r0, r3
 8005b6e:	bfb8      	it	lt
 8005b70:	4618      	movlt	r0, r3
 8005b72:	e734      	b.n	80059de <_printf_float+0xba>
 8005b74:	2301      	movs	r3, #1
 8005b76:	4652      	mov	r2, sl
 8005b78:	4631      	mov	r1, r6
 8005b7a:	4628      	mov	r0, r5
 8005b7c:	47b8      	blx	r7
 8005b7e:	3001      	adds	r0, #1
 8005b80:	f43f af2b 	beq.w	80059da <_printf_float+0xb6>
 8005b84:	f109 0901 	add.w	r9, r9, #1
 8005b88:	e7e8      	b.n	8005b5c <_printf_float+0x238>
 8005b8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	dc39      	bgt.n	8005c04 <_printf_float+0x2e0>
 8005b90:	4a1b      	ldr	r2, [pc, #108]	@ (8005c00 <_printf_float+0x2dc>)
 8005b92:	2301      	movs	r3, #1
 8005b94:	4631      	mov	r1, r6
 8005b96:	4628      	mov	r0, r5
 8005b98:	47b8      	blx	r7
 8005b9a:	3001      	adds	r0, #1
 8005b9c:	f43f af1d 	beq.w	80059da <_printf_float+0xb6>
 8005ba0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005ba4:	ea59 0303 	orrs.w	r3, r9, r3
 8005ba8:	d102      	bne.n	8005bb0 <_printf_float+0x28c>
 8005baa:	6823      	ldr	r3, [r4, #0]
 8005bac:	07d9      	lsls	r1, r3, #31
 8005bae:	d5d7      	bpl.n	8005b60 <_printf_float+0x23c>
 8005bb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005bb4:	4631      	mov	r1, r6
 8005bb6:	4628      	mov	r0, r5
 8005bb8:	47b8      	blx	r7
 8005bba:	3001      	adds	r0, #1
 8005bbc:	f43f af0d 	beq.w	80059da <_printf_float+0xb6>
 8005bc0:	f04f 0a00 	mov.w	sl, #0
 8005bc4:	f104 0b1a 	add.w	fp, r4, #26
 8005bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005bca:	425b      	negs	r3, r3
 8005bcc:	4553      	cmp	r3, sl
 8005bce:	dc01      	bgt.n	8005bd4 <_printf_float+0x2b0>
 8005bd0:	464b      	mov	r3, r9
 8005bd2:	e793      	b.n	8005afc <_printf_float+0x1d8>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	465a      	mov	r2, fp
 8005bd8:	4631      	mov	r1, r6
 8005bda:	4628      	mov	r0, r5
 8005bdc:	47b8      	blx	r7
 8005bde:	3001      	adds	r0, #1
 8005be0:	f43f aefb 	beq.w	80059da <_printf_float+0xb6>
 8005be4:	f10a 0a01 	add.w	sl, sl, #1
 8005be8:	e7ee      	b.n	8005bc8 <_printf_float+0x2a4>
 8005bea:	bf00      	nop
 8005bec:	7fefffff 	.word	0x7fefffff
 8005bf0:	08008520 	.word	0x08008520
 8005bf4:	0800851c 	.word	0x0800851c
 8005bf8:	08008528 	.word	0x08008528
 8005bfc:	08008524 	.word	0x08008524
 8005c00:	0800852c 	.word	0x0800852c
 8005c04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c06:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005c0a:	4553      	cmp	r3, sl
 8005c0c:	bfa8      	it	ge
 8005c0e:	4653      	movge	r3, sl
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	4699      	mov	r9, r3
 8005c14:	dc36      	bgt.n	8005c84 <_printf_float+0x360>
 8005c16:	f04f 0b00 	mov.w	fp, #0
 8005c1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c1e:	f104 021a 	add.w	r2, r4, #26
 8005c22:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005c24:	9306      	str	r3, [sp, #24]
 8005c26:	eba3 0309 	sub.w	r3, r3, r9
 8005c2a:	455b      	cmp	r3, fp
 8005c2c:	dc31      	bgt.n	8005c92 <_printf_float+0x36e>
 8005c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c30:	459a      	cmp	sl, r3
 8005c32:	dc3a      	bgt.n	8005caa <_printf_float+0x386>
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	07da      	lsls	r2, r3, #31
 8005c38:	d437      	bmi.n	8005caa <_printf_float+0x386>
 8005c3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c3c:	ebaa 0903 	sub.w	r9, sl, r3
 8005c40:	9b06      	ldr	r3, [sp, #24]
 8005c42:	ebaa 0303 	sub.w	r3, sl, r3
 8005c46:	4599      	cmp	r9, r3
 8005c48:	bfa8      	it	ge
 8005c4a:	4699      	movge	r9, r3
 8005c4c:	f1b9 0f00 	cmp.w	r9, #0
 8005c50:	dc33      	bgt.n	8005cba <_printf_float+0x396>
 8005c52:	f04f 0800 	mov.w	r8, #0
 8005c56:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005c5a:	f104 0b1a 	add.w	fp, r4, #26
 8005c5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005c60:	ebaa 0303 	sub.w	r3, sl, r3
 8005c64:	eba3 0309 	sub.w	r3, r3, r9
 8005c68:	4543      	cmp	r3, r8
 8005c6a:	f77f af79 	ble.w	8005b60 <_printf_float+0x23c>
 8005c6e:	2301      	movs	r3, #1
 8005c70:	465a      	mov	r2, fp
 8005c72:	4631      	mov	r1, r6
 8005c74:	4628      	mov	r0, r5
 8005c76:	47b8      	blx	r7
 8005c78:	3001      	adds	r0, #1
 8005c7a:	f43f aeae 	beq.w	80059da <_printf_float+0xb6>
 8005c7e:	f108 0801 	add.w	r8, r8, #1
 8005c82:	e7ec      	b.n	8005c5e <_printf_float+0x33a>
 8005c84:	4642      	mov	r2, r8
 8005c86:	4631      	mov	r1, r6
 8005c88:	4628      	mov	r0, r5
 8005c8a:	47b8      	blx	r7
 8005c8c:	3001      	adds	r0, #1
 8005c8e:	d1c2      	bne.n	8005c16 <_printf_float+0x2f2>
 8005c90:	e6a3      	b.n	80059da <_printf_float+0xb6>
 8005c92:	2301      	movs	r3, #1
 8005c94:	4631      	mov	r1, r6
 8005c96:	4628      	mov	r0, r5
 8005c98:	9206      	str	r2, [sp, #24]
 8005c9a:	47b8      	blx	r7
 8005c9c:	3001      	adds	r0, #1
 8005c9e:	f43f ae9c 	beq.w	80059da <_printf_float+0xb6>
 8005ca2:	9a06      	ldr	r2, [sp, #24]
 8005ca4:	f10b 0b01 	add.w	fp, fp, #1
 8005ca8:	e7bb      	b.n	8005c22 <_printf_float+0x2fe>
 8005caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cae:	4631      	mov	r1, r6
 8005cb0:	4628      	mov	r0, r5
 8005cb2:	47b8      	blx	r7
 8005cb4:	3001      	adds	r0, #1
 8005cb6:	d1c0      	bne.n	8005c3a <_printf_float+0x316>
 8005cb8:	e68f      	b.n	80059da <_printf_float+0xb6>
 8005cba:	9a06      	ldr	r2, [sp, #24]
 8005cbc:	464b      	mov	r3, r9
 8005cbe:	4442      	add	r2, r8
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	d1c3      	bne.n	8005c52 <_printf_float+0x32e>
 8005cca:	e686      	b.n	80059da <_printf_float+0xb6>
 8005ccc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005cd0:	f1ba 0f01 	cmp.w	sl, #1
 8005cd4:	dc01      	bgt.n	8005cda <_printf_float+0x3b6>
 8005cd6:	07db      	lsls	r3, r3, #31
 8005cd8:	d536      	bpl.n	8005d48 <_printf_float+0x424>
 8005cda:	2301      	movs	r3, #1
 8005cdc:	4642      	mov	r2, r8
 8005cde:	4631      	mov	r1, r6
 8005ce0:	4628      	mov	r0, r5
 8005ce2:	47b8      	blx	r7
 8005ce4:	3001      	adds	r0, #1
 8005ce6:	f43f ae78 	beq.w	80059da <_printf_float+0xb6>
 8005cea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cee:	4631      	mov	r1, r6
 8005cf0:	4628      	mov	r0, r5
 8005cf2:	47b8      	blx	r7
 8005cf4:	3001      	adds	r0, #1
 8005cf6:	f43f ae70 	beq.w	80059da <_printf_float+0xb6>
 8005cfa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005cfe:	2200      	movs	r2, #0
 8005d00:	2300      	movs	r3, #0
 8005d02:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d06:	f7fa fedf 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d0a:	b9c0      	cbnz	r0, 8005d3e <_printf_float+0x41a>
 8005d0c:	4653      	mov	r3, sl
 8005d0e:	f108 0201 	add.w	r2, r8, #1
 8005d12:	4631      	mov	r1, r6
 8005d14:	4628      	mov	r0, r5
 8005d16:	47b8      	blx	r7
 8005d18:	3001      	adds	r0, #1
 8005d1a:	d10c      	bne.n	8005d36 <_printf_float+0x412>
 8005d1c:	e65d      	b.n	80059da <_printf_float+0xb6>
 8005d1e:	2301      	movs	r3, #1
 8005d20:	465a      	mov	r2, fp
 8005d22:	4631      	mov	r1, r6
 8005d24:	4628      	mov	r0, r5
 8005d26:	47b8      	blx	r7
 8005d28:	3001      	adds	r0, #1
 8005d2a:	f43f ae56 	beq.w	80059da <_printf_float+0xb6>
 8005d2e:	f108 0801 	add.w	r8, r8, #1
 8005d32:	45d0      	cmp	r8, sl
 8005d34:	dbf3      	blt.n	8005d1e <_printf_float+0x3fa>
 8005d36:	464b      	mov	r3, r9
 8005d38:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005d3c:	e6df      	b.n	8005afe <_printf_float+0x1da>
 8005d3e:	f04f 0800 	mov.w	r8, #0
 8005d42:	f104 0b1a 	add.w	fp, r4, #26
 8005d46:	e7f4      	b.n	8005d32 <_printf_float+0x40e>
 8005d48:	2301      	movs	r3, #1
 8005d4a:	4642      	mov	r2, r8
 8005d4c:	e7e1      	b.n	8005d12 <_printf_float+0x3ee>
 8005d4e:	2301      	movs	r3, #1
 8005d50:	464a      	mov	r2, r9
 8005d52:	4631      	mov	r1, r6
 8005d54:	4628      	mov	r0, r5
 8005d56:	47b8      	blx	r7
 8005d58:	3001      	adds	r0, #1
 8005d5a:	f43f ae3e 	beq.w	80059da <_printf_float+0xb6>
 8005d5e:	f108 0801 	add.w	r8, r8, #1
 8005d62:	68e3      	ldr	r3, [r4, #12]
 8005d64:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d66:	1a5b      	subs	r3, r3, r1
 8005d68:	4543      	cmp	r3, r8
 8005d6a:	dcf0      	bgt.n	8005d4e <_printf_float+0x42a>
 8005d6c:	e6fc      	b.n	8005b68 <_printf_float+0x244>
 8005d6e:	f04f 0800 	mov.w	r8, #0
 8005d72:	f104 0919 	add.w	r9, r4, #25
 8005d76:	e7f4      	b.n	8005d62 <_printf_float+0x43e>

08005d78 <_printf_common>:
 8005d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d7c:	4616      	mov	r6, r2
 8005d7e:	4698      	mov	r8, r3
 8005d80:	688a      	ldr	r2, [r1, #8]
 8005d82:	690b      	ldr	r3, [r1, #16]
 8005d84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	bfb8      	it	lt
 8005d8c:	4613      	movlt	r3, r2
 8005d8e:	6033      	str	r3, [r6, #0]
 8005d90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d94:	4607      	mov	r7, r0
 8005d96:	460c      	mov	r4, r1
 8005d98:	b10a      	cbz	r2, 8005d9e <_printf_common+0x26>
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	6033      	str	r3, [r6, #0]
 8005d9e:	6823      	ldr	r3, [r4, #0]
 8005da0:	0699      	lsls	r1, r3, #26
 8005da2:	bf42      	ittt	mi
 8005da4:	6833      	ldrmi	r3, [r6, #0]
 8005da6:	3302      	addmi	r3, #2
 8005da8:	6033      	strmi	r3, [r6, #0]
 8005daa:	6825      	ldr	r5, [r4, #0]
 8005dac:	f015 0506 	ands.w	r5, r5, #6
 8005db0:	d106      	bne.n	8005dc0 <_printf_common+0x48>
 8005db2:	f104 0a19 	add.w	sl, r4, #25
 8005db6:	68e3      	ldr	r3, [r4, #12]
 8005db8:	6832      	ldr	r2, [r6, #0]
 8005dba:	1a9b      	subs	r3, r3, r2
 8005dbc:	42ab      	cmp	r3, r5
 8005dbe:	dc26      	bgt.n	8005e0e <_printf_common+0x96>
 8005dc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005dc4:	6822      	ldr	r2, [r4, #0]
 8005dc6:	3b00      	subs	r3, #0
 8005dc8:	bf18      	it	ne
 8005dca:	2301      	movne	r3, #1
 8005dcc:	0692      	lsls	r2, r2, #26
 8005dce:	d42b      	bmi.n	8005e28 <_printf_common+0xb0>
 8005dd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005dd4:	4641      	mov	r1, r8
 8005dd6:	4638      	mov	r0, r7
 8005dd8:	47c8      	blx	r9
 8005dda:	3001      	adds	r0, #1
 8005ddc:	d01e      	beq.n	8005e1c <_printf_common+0xa4>
 8005dde:	6823      	ldr	r3, [r4, #0]
 8005de0:	6922      	ldr	r2, [r4, #16]
 8005de2:	f003 0306 	and.w	r3, r3, #6
 8005de6:	2b04      	cmp	r3, #4
 8005de8:	bf02      	ittt	eq
 8005dea:	68e5      	ldreq	r5, [r4, #12]
 8005dec:	6833      	ldreq	r3, [r6, #0]
 8005dee:	1aed      	subeq	r5, r5, r3
 8005df0:	68a3      	ldr	r3, [r4, #8]
 8005df2:	bf0c      	ite	eq
 8005df4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005df8:	2500      	movne	r5, #0
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	bfc4      	itt	gt
 8005dfe:	1a9b      	subgt	r3, r3, r2
 8005e00:	18ed      	addgt	r5, r5, r3
 8005e02:	2600      	movs	r6, #0
 8005e04:	341a      	adds	r4, #26
 8005e06:	42b5      	cmp	r5, r6
 8005e08:	d11a      	bne.n	8005e40 <_printf_common+0xc8>
 8005e0a:	2000      	movs	r0, #0
 8005e0c:	e008      	b.n	8005e20 <_printf_common+0xa8>
 8005e0e:	2301      	movs	r3, #1
 8005e10:	4652      	mov	r2, sl
 8005e12:	4641      	mov	r1, r8
 8005e14:	4638      	mov	r0, r7
 8005e16:	47c8      	blx	r9
 8005e18:	3001      	adds	r0, #1
 8005e1a:	d103      	bne.n	8005e24 <_printf_common+0xac>
 8005e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e24:	3501      	adds	r5, #1
 8005e26:	e7c6      	b.n	8005db6 <_printf_common+0x3e>
 8005e28:	18e1      	adds	r1, r4, r3
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	2030      	movs	r0, #48	@ 0x30
 8005e2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e32:	4422      	add	r2, r4
 8005e34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e3c:	3302      	adds	r3, #2
 8005e3e:	e7c7      	b.n	8005dd0 <_printf_common+0x58>
 8005e40:	2301      	movs	r3, #1
 8005e42:	4622      	mov	r2, r4
 8005e44:	4641      	mov	r1, r8
 8005e46:	4638      	mov	r0, r7
 8005e48:	47c8      	blx	r9
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	d0e6      	beq.n	8005e1c <_printf_common+0xa4>
 8005e4e:	3601      	adds	r6, #1
 8005e50:	e7d9      	b.n	8005e06 <_printf_common+0x8e>
	...

08005e54 <_printf_i>:
 8005e54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	7e0f      	ldrb	r7, [r1, #24]
 8005e5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e5c:	2f78      	cmp	r7, #120	@ 0x78
 8005e5e:	4691      	mov	r9, r2
 8005e60:	4680      	mov	r8, r0
 8005e62:	460c      	mov	r4, r1
 8005e64:	469a      	mov	sl, r3
 8005e66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e6a:	d807      	bhi.n	8005e7c <_printf_i+0x28>
 8005e6c:	2f62      	cmp	r7, #98	@ 0x62
 8005e6e:	d80a      	bhi.n	8005e86 <_printf_i+0x32>
 8005e70:	2f00      	cmp	r7, #0
 8005e72:	f000 80d1 	beq.w	8006018 <_printf_i+0x1c4>
 8005e76:	2f58      	cmp	r7, #88	@ 0x58
 8005e78:	f000 80b8 	beq.w	8005fec <_printf_i+0x198>
 8005e7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e84:	e03a      	b.n	8005efc <_printf_i+0xa8>
 8005e86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e8a:	2b15      	cmp	r3, #21
 8005e8c:	d8f6      	bhi.n	8005e7c <_printf_i+0x28>
 8005e8e:	a101      	add	r1, pc, #4	@ (adr r1, 8005e94 <_printf_i+0x40>)
 8005e90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e94:	08005eed 	.word	0x08005eed
 8005e98:	08005f01 	.word	0x08005f01
 8005e9c:	08005e7d 	.word	0x08005e7d
 8005ea0:	08005e7d 	.word	0x08005e7d
 8005ea4:	08005e7d 	.word	0x08005e7d
 8005ea8:	08005e7d 	.word	0x08005e7d
 8005eac:	08005f01 	.word	0x08005f01
 8005eb0:	08005e7d 	.word	0x08005e7d
 8005eb4:	08005e7d 	.word	0x08005e7d
 8005eb8:	08005e7d 	.word	0x08005e7d
 8005ebc:	08005e7d 	.word	0x08005e7d
 8005ec0:	08005fff 	.word	0x08005fff
 8005ec4:	08005f2b 	.word	0x08005f2b
 8005ec8:	08005fb9 	.word	0x08005fb9
 8005ecc:	08005e7d 	.word	0x08005e7d
 8005ed0:	08005e7d 	.word	0x08005e7d
 8005ed4:	08006021 	.word	0x08006021
 8005ed8:	08005e7d 	.word	0x08005e7d
 8005edc:	08005f2b 	.word	0x08005f2b
 8005ee0:	08005e7d 	.word	0x08005e7d
 8005ee4:	08005e7d 	.word	0x08005e7d
 8005ee8:	08005fc1 	.word	0x08005fc1
 8005eec:	6833      	ldr	r3, [r6, #0]
 8005eee:	1d1a      	adds	r2, r3, #4
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	6032      	str	r2, [r6, #0]
 8005ef4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ef8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005efc:	2301      	movs	r3, #1
 8005efe:	e09c      	b.n	800603a <_printf_i+0x1e6>
 8005f00:	6833      	ldr	r3, [r6, #0]
 8005f02:	6820      	ldr	r0, [r4, #0]
 8005f04:	1d19      	adds	r1, r3, #4
 8005f06:	6031      	str	r1, [r6, #0]
 8005f08:	0606      	lsls	r6, r0, #24
 8005f0a:	d501      	bpl.n	8005f10 <_printf_i+0xbc>
 8005f0c:	681d      	ldr	r5, [r3, #0]
 8005f0e:	e003      	b.n	8005f18 <_printf_i+0xc4>
 8005f10:	0645      	lsls	r5, r0, #25
 8005f12:	d5fb      	bpl.n	8005f0c <_printf_i+0xb8>
 8005f14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f18:	2d00      	cmp	r5, #0
 8005f1a:	da03      	bge.n	8005f24 <_printf_i+0xd0>
 8005f1c:	232d      	movs	r3, #45	@ 0x2d
 8005f1e:	426d      	negs	r5, r5
 8005f20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f24:	4858      	ldr	r0, [pc, #352]	@ (8006088 <_printf_i+0x234>)
 8005f26:	230a      	movs	r3, #10
 8005f28:	e011      	b.n	8005f4e <_printf_i+0xfa>
 8005f2a:	6821      	ldr	r1, [r4, #0]
 8005f2c:	6833      	ldr	r3, [r6, #0]
 8005f2e:	0608      	lsls	r0, r1, #24
 8005f30:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f34:	d402      	bmi.n	8005f3c <_printf_i+0xe8>
 8005f36:	0649      	lsls	r1, r1, #25
 8005f38:	bf48      	it	mi
 8005f3a:	b2ad      	uxthmi	r5, r5
 8005f3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f3e:	4852      	ldr	r0, [pc, #328]	@ (8006088 <_printf_i+0x234>)
 8005f40:	6033      	str	r3, [r6, #0]
 8005f42:	bf14      	ite	ne
 8005f44:	230a      	movne	r3, #10
 8005f46:	2308      	moveq	r3, #8
 8005f48:	2100      	movs	r1, #0
 8005f4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f4e:	6866      	ldr	r6, [r4, #4]
 8005f50:	60a6      	str	r6, [r4, #8]
 8005f52:	2e00      	cmp	r6, #0
 8005f54:	db05      	blt.n	8005f62 <_printf_i+0x10e>
 8005f56:	6821      	ldr	r1, [r4, #0]
 8005f58:	432e      	orrs	r6, r5
 8005f5a:	f021 0104 	bic.w	r1, r1, #4
 8005f5e:	6021      	str	r1, [r4, #0]
 8005f60:	d04b      	beq.n	8005ffa <_printf_i+0x1a6>
 8005f62:	4616      	mov	r6, r2
 8005f64:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f68:	fb03 5711 	mls	r7, r3, r1, r5
 8005f6c:	5dc7      	ldrb	r7, [r0, r7]
 8005f6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f72:	462f      	mov	r7, r5
 8005f74:	42bb      	cmp	r3, r7
 8005f76:	460d      	mov	r5, r1
 8005f78:	d9f4      	bls.n	8005f64 <_printf_i+0x110>
 8005f7a:	2b08      	cmp	r3, #8
 8005f7c:	d10b      	bne.n	8005f96 <_printf_i+0x142>
 8005f7e:	6823      	ldr	r3, [r4, #0]
 8005f80:	07df      	lsls	r7, r3, #31
 8005f82:	d508      	bpl.n	8005f96 <_printf_i+0x142>
 8005f84:	6923      	ldr	r3, [r4, #16]
 8005f86:	6861      	ldr	r1, [r4, #4]
 8005f88:	4299      	cmp	r1, r3
 8005f8a:	bfde      	ittt	le
 8005f8c:	2330      	movle	r3, #48	@ 0x30
 8005f8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f92:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f96:	1b92      	subs	r2, r2, r6
 8005f98:	6122      	str	r2, [r4, #16]
 8005f9a:	f8cd a000 	str.w	sl, [sp]
 8005f9e:	464b      	mov	r3, r9
 8005fa0:	aa03      	add	r2, sp, #12
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	4640      	mov	r0, r8
 8005fa6:	f7ff fee7 	bl	8005d78 <_printf_common>
 8005faa:	3001      	adds	r0, #1
 8005fac:	d14a      	bne.n	8006044 <_printf_i+0x1f0>
 8005fae:	f04f 30ff 	mov.w	r0, #4294967295
 8005fb2:	b004      	add	sp, #16
 8005fb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fb8:	6823      	ldr	r3, [r4, #0]
 8005fba:	f043 0320 	orr.w	r3, r3, #32
 8005fbe:	6023      	str	r3, [r4, #0]
 8005fc0:	4832      	ldr	r0, [pc, #200]	@ (800608c <_printf_i+0x238>)
 8005fc2:	2778      	movs	r7, #120	@ 0x78
 8005fc4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	6831      	ldr	r1, [r6, #0]
 8005fcc:	061f      	lsls	r7, r3, #24
 8005fce:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fd2:	d402      	bmi.n	8005fda <_printf_i+0x186>
 8005fd4:	065f      	lsls	r7, r3, #25
 8005fd6:	bf48      	it	mi
 8005fd8:	b2ad      	uxthmi	r5, r5
 8005fda:	6031      	str	r1, [r6, #0]
 8005fdc:	07d9      	lsls	r1, r3, #31
 8005fde:	bf44      	itt	mi
 8005fe0:	f043 0320 	orrmi.w	r3, r3, #32
 8005fe4:	6023      	strmi	r3, [r4, #0]
 8005fe6:	b11d      	cbz	r5, 8005ff0 <_printf_i+0x19c>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	e7ad      	b.n	8005f48 <_printf_i+0xf4>
 8005fec:	4826      	ldr	r0, [pc, #152]	@ (8006088 <_printf_i+0x234>)
 8005fee:	e7e9      	b.n	8005fc4 <_printf_i+0x170>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	f023 0320 	bic.w	r3, r3, #32
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	e7f6      	b.n	8005fe8 <_printf_i+0x194>
 8005ffa:	4616      	mov	r6, r2
 8005ffc:	e7bd      	b.n	8005f7a <_printf_i+0x126>
 8005ffe:	6833      	ldr	r3, [r6, #0]
 8006000:	6825      	ldr	r5, [r4, #0]
 8006002:	6961      	ldr	r1, [r4, #20]
 8006004:	1d18      	adds	r0, r3, #4
 8006006:	6030      	str	r0, [r6, #0]
 8006008:	062e      	lsls	r6, r5, #24
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	d501      	bpl.n	8006012 <_printf_i+0x1be>
 800600e:	6019      	str	r1, [r3, #0]
 8006010:	e002      	b.n	8006018 <_printf_i+0x1c4>
 8006012:	0668      	lsls	r0, r5, #25
 8006014:	d5fb      	bpl.n	800600e <_printf_i+0x1ba>
 8006016:	8019      	strh	r1, [r3, #0]
 8006018:	2300      	movs	r3, #0
 800601a:	6123      	str	r3, [r4, #16]
 800601c:	4616      	mov	r6, r2
 800601e:	e7bc      	b.n	8005f9a <_printf_i+0x146>
 8006020:	6833      	ldr	r3, [r6, #0]
 8006022:	1d1a      	adds	r2, r3, #4
 8006024:	6032      	str	r2, [r6, #0]
 8006026:	681e      	ldr	r6, [r3, #0]
 8006028:	6862      	ldr	r2, [r4, #4]
 800602a:	2100      	movs	r1, #0
 800602c:	4630      	mov	r0, r6
 800602e:	f7fa f8cf 	bl	80001d0 <memchr>
 8006032:	b108      	cbz	r0, 8006038 <_printf_i+0x1e4>
 8006034:	1b80      	subs	r0, r0, r6
 8006036:	6060      	str	r0, [r4, #4]
 8006038:	6863      	ldr	r3, [r4, #4]
 800603a:	6123      	str	r3, [r4, #16]
 800603c:	2300      	movs	r3, #0
 800603e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006042:	e7aa      	b.n	8005f9a <_printf_i+0x146>
 8006044:	6923      	ldr	r3, [r4, #16]
 8006046:	4632      	mov	r2, r6
 8006048:	4649      	mov	r1, r9
 800604a:	4640      	mov	r0, r8
 800604c:	47d0      	blx	sl
 800604e:	3001      	adds	r0, #1
 8006050:	d0ad      	beq.n	8005fae <_printf_i+0x15a>
 8006052:	6823      	ldr	r3, [r4, #0]
 8006054:	079b      	lsls	r3, r3, #30
 8006056:	d413      	bmi.n	8006080 <_printf_i+0x22c>
 8006058:	68e0      	ldr	r0, [r4, #12]
 800605a:	9b03      	ldr	r3, [sp, #12]
 800605c:	4298      	cmp	r0, r3
 800605e:	bfb8      	it	lt
 8006060:	4618      	movlt	r0, r3
 8006062:	e7a6      	b.n	8005fb2 <_printf_i+0x15e>
 8006064:	2301      	movs	r3, #1
 8006066:	4632      	mov	r2, r6
 8006068:	4649      	mov	r1, r9
 800606a:	4640      	mov	r0, r8
 800606c:	47d0      	blx	sl
 800606e:	3001      	adds	r0, #1
 8006070:	d09d      	beq.n	8005fae <_printf_i+0x15a>
 8006072:	3501      	adds	r5, #1
 8006074:	68e3      	ldr	r3, [r4, #12]
 8006076:	9903      	ldr	r1, [sp, #12]
 8006078:	1a5b      	subs	r3, r3, r1
 800607a:	42ab      	cmp	r3, r5
 800607c:	dcf2      	bgt.n	8006064 <_printf_i+0x210>
 800607e:	e7eb      	b.n	8006058 <_printf_i+0x204>
 8006080:	2500      	movs	r5, #0
 8006082:	f104 0619 	add.w	r6, r4, #25
 8006086:	e7f5      	b.n	8006074 <_printf_i+0x220>
 8006088:	0800852e 	.word	0x0800852e
 800608c:	0800853f 	.word	0x0800853f

08006090 <std>:
 8006090:	2300      	movs	r3, #0
 8006092:	b510      	push	{r4, lr}
 8006094:	4604      	mov	r4, r0
 8006096:	e9c0 3300 	strd	r3, r3, [r0]
 800609a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800609e:	6083      	str	r3, [r0, #8]
 80060a0:	8181      	strh	r1, [r0, #12]
 80060a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80060a4:	81c2      	strh	r2, [r0, #14]
 80060a6:	6183      	str	r3, [r0, #24]
 80060a8:	4619      	mov	r1, r3
 80060aa:	2208      	movs	r2, #8
 80060ac:	305c      	adds	r0, #92	@ 0x5c
 80060ae:	f000 f92a 	bl	8006306 <memset>
 80060b2:	4b0d      	ldr	r3, [pc, #52]	@ (80060e8 <std+0x58>)
 80060b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80060b6:	4b0d      	ldr	r3, [pc, #52]	@ (80060ec <std+0x5c>)
 80060b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80060ba:	4b0d      	ldr	r3, [pc, #52]	@ (80060f0 <std+0x60>)
 80060bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80060be:	4b0d      	ldr	r3, [pc, #52]	@ (80060f4 <std+0x64>)
 80060c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80060c2:	4b0d      	ldr	r3, [pc, #52]	@ (80060f8 <std+0x68>)
 80060c4:	6224      	str	r4, [r4, #32]
 80060c6:	429c      	cmp	r4, r3
 80060c8:	d006      	beq.n	80060d8 <std+0x48>
 80060ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80060ce:	4294      	cmp	r4, r2
 80060d0:	d002      	beq.n	80060d8 <std+0x48>
 80060d2:	33d0      	adds	r3, #208	@ 0xd0
 80060d4:	429c      	cmp	r4, r3
 80060d6:	d105      	bne.n	80060e4 <std+0x54>
 80060d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80060dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060e0:	f000 b98e 	b.w	8006400 <__retarget_lock_init_recursive>
 80060e4:	bd10      	pop	{r4, pc}
 80060e6:	bf00      	nop
 80060e8:	08006281 	.word	0x08006281
 80060ec:	080062a3 	.word	0x080062a3
 80060f0:	080062db 	.word	0x080062db
 80060f4:	080062ff 	.word	0x080062ff
 80060f8:	20000334 	.word	0x20000334

080060fc <stdio_exit_handler>:
 80060fc:	4a02      	ldr	r2, [pc, #8]	@ (8006108 <stdio_exit_handler+0xc>)
 80060fe:	4903      	ldr	r1, [pc, #12]	@ (800610c <stdio_exit_handler+0x10>)
 8006100:	4803      	ldr	r0, [pc, #12]	@ (8006110 <stdio_exit_handler+0x14>)
 8006102:	f000 b869 	b.w	80061d8 <_fwalk_sglue>
 8006106:	bf00      	nop
 8006108:	2000000c 	.word	0x2000000c
 800610c:	08007d65 	.word	0x08007d65
 8006110:	2000001c 	.word	0x2000001c

08006114 <cleanup_stdio>:
 8006114:	6841      	ldr	r1, [r0, #4]
 8006116:	4b0c      	ldr	r3, [pc, #48]	@ (8006148 <cleanup_stdio+0x34>)
 8006118:	4299      	cmp	r1, r3
 800611a:	b510      	push	{r4, lr}
 800611c:	4604      	mov	r4, r0
 800611e:	d001      	beq.n	8006124 <cleanup_stdio+0x10>
 8006120:	f001 fe20 	bl	8007d64 <_fflush_r>
 8006124:	68a1      	ldr	r1, [r4, #8]
 8006126:	4b09      	ldr	r3, [pc, #36]	@ (800614c <cleanup_stdio+0x38>)
 8006128:	4299      	cmp	r1, r3
 800612a:	d002      	beq.n	8006132 <cleanup_stdio+0x1e>
 800612c:	4620      	mov	r0, r4
 800612e:	f001 fe19 	bl	8007d64 <_fflush_r>
 8006132:	68e1      	ldr	r1, [r4, #12]
 8006134:	4b06      	ldr	r3, [pc, #24]	@ (8006150 <cleanup_stdio+0x3c>)
 8006136:	4299      	cmp	r1, r3
 8006138:	d004      	beq.n	8006144 <cleanup_stdio+0x30>
 800613a:	4620      	mov	r0, r4
 800613c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006140:	f001 be10 	b.w	8007d64 <_fflush_r>
 8006144:	bd10      	pop	{r4, pc}
 8006146:	bf00      	nop
 8006148:	20000334 	.word	0x20000334
 800614c:	2000039c 	.word	0x2000039c
 8006150:	20000404 	.word	0x20000404

08006154 <global_stdio_init.part.0>:
 8006154:	b510      	push	{r4, lr}
 8006156:	4b0b      	ldr	r3, [pc, #44]	@ (8006184 <global_stdio_init.part.0+0x30>)
 8006158:	4c0b      	ldr	r4, [pc, #44]	@ (8006188 <global_stdio_init.part.0+0x34>)
 800615a:	4a0c      	ldr	r2, [pc, #48]	@ (800618c <global_stdio_init.part.0+0x38>)
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	4620      	mov	r0, r4
 8006160:	2200      	movs	r2, #0
 8006162:	2104      	movs	r1, #4
 8006164:	f7ff ff94 	bl	8006090 <std>
 8006168:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800616c:	2201      	movs	r2, #1
 800616e:	2109      	movs	r1, #9
 8006170:	f7ff ff8e 	bl	8006090 <std>
 8006174:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006178:	2202      	movs	r2, #2
 800617a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800617e:	2112      	movs	r1, #18
 8006180:	f7ff bf86 	b.w	8006090 <std>
 8006184:	2000046c 	.word	0x2000046c
 8006188:	20000334 	.word	0x20000334
 800618c:	080060fd 	.word	0x080060fd

08006190 <__sfp_lock_acquire>:
 8006190:	4801      	ldr	r0, [pc, #4]	@ (8006198 <__sfp_lock_acquire+0x8>)
 8006192:	f000 b936 	b.w	8006402 <__retarget_lock_acquire_recursive>
 8006196:	bf00      	nop
 8006198:	20000475 	.word	0x20000475

0800619c <__sfp_lock_release>:
 800619c:	4801      	ldr	r0, [pc, #4]	@ (80061a4 <__sfp_lock_release+0x8>)
 800619e:	f000 b931 	b.w	8006404 <__retarget_lock_release_recursive>
 80061a2:	bf00      	nop
 80061a4:	20000475 	.word	0x20000475

080061a8 <__sinit>:
 80061a8:	b510      	push	{r4, lr}
 80061aa:	4604      	mov	r4, r0
 80061ac:	f7ff fff0 	bl	8006190 <__sfp_lock_acquire>
 80061b0:	6a23      	ldr	r3, [r4, #32]
 80061b2:	b11b      	cbz	r3, 80061bc <__sinit+0x14>
 80061b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061b8:	f7ff bff0 	b.w	800619c <__sfp_lock_release>
 80061bc:	4b04      	ldr	r3, [pc, #16]	@ (80061d0 <__sinit+0x28>)
 80061be:	6223      	str	r3, [r4, #32]
 80061c0:	4b04      	ldr	r3, [pc, #16]	@ (80061d4 <__sinit+0x2c>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f5      	bne.n	80061b4 <__sinit+0xc>
 80061c8:	f7ff ffc4 	bl	8006154 <global_stdio_init.part.0>
 80061cc:	e7f2      	b.n	80061b4 <__sinit+0xc>
 80061ce:	bf00      	nop
 80061d0:	08006115 	.word	0x08006115
 80061d4:	2000046c 	.word	0x2000046c

080061d8 <_fwalk_sglue>:
 80061d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80061dc:	4607      	mov	r7, r0
 80061de:	4688      	mov	r8, r1
 80061e0:	4614      	mov	r4, r2
 80061e2:	2600      	movs	r6, #0
 80061e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80061e8:	f1b9 0901 	subs.w	r9, r9, #1
 80061ec:	d505      	bpl.n	80061fa <_fwalk_sglue+0x22>
 80061ee:	6824      	ldr	r4, [r4, #0]
 80061f0:	2c00      	cmp	r4, #0
 80061f2:	d1f7      	bne.n	80061e4 <_fwalk_sglue+0xc>
 80061f4:	4630      	mov	r0, r6
 80061f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80061fa:	89ab      	ldrh	r3, [r5, #12]
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d907      	bls.n	8006210 <_fwalk_sglue+0x38>
 8006200:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006204:	3301      	adds	r3, #1
 8006206:	d003      	beq.n	8006210 <_fwalk_sglue+0x38>
 8006208:	4629      	mov	r1, r5
 800620a:	4638      	mov	r0, r7
 800620c:	47c0      	blx	r8
 800620e:	4306      	orrs	r6, r0
 8006210:	3568      	adds	r5, #104	@ 0x68
 8006212:	e7e9      	b.n	80061e8 <_fwalk_sglue+0x10>

08006214 <sniprintf>:
 8006214:	b40c      	push	{r2, r3}
 8006216:	b530      	push	{r4, r5, lr}
 8006218:	4b18      	ldr	r3, [pc, #96]	@ (800627c <sniprintf+0x68>)
 800621a:	1e0c      	subs	r4, r1, #0
 800621c:	681d      	ldr	r5, [r3, #0]
 800621e:	b09d      	sub	sp, #116	@ 0x74
 8006220:	da08      	bge.n	8006234 <sniprintf+0x20>
 8006222:	238b      	movs	r3, #139	@ 0x8b
 8006224:	602b      	str	r3, [r5, #0]
 8006226:	f04f 30ff 	mov.w	r0, #4294967295
 800622a:	b01d      	add	sp, #116	@ 0x74
 800622c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006230:	b002      	add	sp, #8
 8006232:	4770      	bx	lr
 8006234:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006238:	f8ad 3014 	strh.w	r3, [sp, #20]
 800623c:	f04f 0300 	mov.w	r3, #0
 8006240:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006242:	bf14      	ite	ne
 8006244:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006248:	4623      	moveq	r3, r4
 800624a:	9304      	str	r3, [sp, #16]
 800624c:	9307      	str	r3, [sp, #28]
 800624e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006252:	9002      	str	r0, [sp, #8]
 8006254:	9006      	str	r0, [sp, #24]
 8006256:	f8ad 3016 	strh.w	r3, [sp, #22]
 800625a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800625c:	ab21      	add	r3, sp, #132	@ 0x84
 800625e:	a902      	add	r1, sp, #8
 8006260:	4628      	mov	r0, r5
 8006262:	9301      	str	r3, [sp, #4]
 8006264:	f001 fbfe 	bl	8007a64 <_svfiprintf_r>
 8006268:	1c43      	adds	r3, r0, #1
 800626a:	bfbc      	itt	lt
 800626c:	238b      	movlt	r3, #139	@ 0x8b
 800626e:	602b      	strlt	r3, [r5, #0]
 8006270:	2c00      	cmp	r4, #0
 8006272:	d0da      	beq.n	800622a <sniprintf+0x16>
 8006274:	9b02      	ldr	r3, [sp, #8]
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
 800627a:	e7d6      	b.n	800622a <sniprintf+0x16>
 800627c:	20000018 	.word	0x20000018

08006280 <__sread>:
 8006280:	b510      	push	{r4, lr}
 8006282:	460c      	mov	r4, r1
 8006284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006288:	f000 f86c 	bl	8006364 <_read_r>
 800628c:	2800      	cmp	r0, #0
 800628e:	bfab      	itete	ge
 8006290:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006292:	89a3      	ldrhlt	r3, [r4, #12]
 8006294:	181b      	addge	r3, r3, r0
 8006296:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800629a:	bfac      	ite	ge
 800629c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800629e:	81a3      	strhlt	r3, [r4, #12]
 80062a0:	bd10      	pop	{r4, pc}

080062a2 <__swrite>:
 80062a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062a6:	461f      	mov	r7, r3
 80062a8:	898b      	ldrh	r3, [r1, #12]
 80062aa:	05db      	lsls	r3, r3, #23
 80062ac:	4605      	mov	r5, r0
 80062ae:	460c      	mov	r4, r1
 80062b0:	4616      	mov	r6, r2
 80062b2:	d505      	bpl.n	80062c0 <__swrite+0x1e>
 80062b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062b8:	2302      	movs	r3, #2
 80062ba:	2200      	movs	r2, #0
 80062bc:	f000 f840 	bl	8006340 <_lseek_r>
 80062c0:	89a3      	ldrh	r3, [r4, #12]
 80062c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80062c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80062ca:	81a3      	strh	r3, [r4, #12]
 80062cc:	4632      	mov	r2, r6
 80062ce:	463b      	mov	r3, r7
 80062d0:	4628      	mov	r0, r5
 80062d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062d6:	f000 b857 	b.w	8006388 <_write_r>

080062da <__sseek>:
 80062da:	b510      	push	{r4, lr}
 80062dc:	460c      	mov	r4, r1
 80062de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80062e2:	f000 f82d 	bl	8006340 <_lseek_r>
 80062e6:	1c43      	adds	r3, r0, #1
 80062e8:	89a3      	ldrh	r3, [r4, #12]
 80062ea:	bf15      	itete	ne
 80062ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80062ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80062f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80062f6:	81a3      	strheq	r3, [r4, #12]
 80062f8:	bf18      	it	ne
 80062fa:	81a3      	strhne	r3, [r4, #12]
 80062fc:	bd10      	pop	{r4, pc}

080062fe <__sclose>:
 80062fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006302:	f000 b80d 	b.w	8006320 <_close_r>

08006306 <memset>:
 8006306:	4402      	add	r2, r0
 8006308:	4603      	mov	r3, r0
 800630a:	4293      	cmp	r3, r2
 800630c:	d100      	bne.n	8006310 <memset+0xa>
 800630e:	4770      	bx	lr
 8006310:	f803 1b01 	strb.w	r1, [r3], #1
 8006314:	e7f9      	b.n	800630a <memset+0x4>
	...

08006318 <_localeconv_r>:
 8006318:	4800      	ldr	r0, [pc, #0]	@ (800631c <_localeconv_r+0x4>)
 800631a:	4770      	bx	lr
 800631c:	20000158 	.word	0x20000158

08006320 <_close_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	4d06      	ldr	r5, [pc, #24]	@ (800633c <_close_r+0x1c>)
 8006324:	2300      	movs	r3, #0
 8006326:	4604      	mov	r4, r0
 8006328:	4608      	mov	r0, r1
 800632a:	602b      	str	r3, [r5, #0]
 800632c:	f7fb f98c 	bl	8001648 <_close>
 8006330:	1c43      	adds	r3, r0, #1
 8006332:	d102      	bne.n	800633a <_close_r+0x1a>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b103      	cbz	r3, 800633a <_close_r+0x1a>
 8006338:	6023      	str	r3, [r4, #0]
 800633a:	bd38      	pop	{r3, r4, r5, pc}
 800633c:	20000470 	.word	0x20000470

08006340 <_lseek_r>:
 8006340:	b538      	push	{r3, r4, r5, lr}
 8006342:	4d07      	ldr	r5, [pc, #28]	@ (8006360 <_lseek_r+0x20>)
 8006344:	4604      	mov	r4, r0
 8006346:	4608      	mov	r0, r1
 8006348:	4611      	mov	r1, r2
 800634a:	2200      	movs	r2, #0
 800634c:	602a      	str	r2, [r5, #0]
 800634e:	461a      	mov	r2, r3
 8006350:	f7fb f9a1 	bl	8001696 <_lseek>
 8006354:	1c43      	adds	r3, r0, #1
 8006356:	d102      	bne.n	800635e <_lseek_r+0x1e>
 8006358:	682b      	ldr	r3, [r5, #0]
 800635a:	b103      	cbz	r3, 800635e <_lseek_r+0x1e>
 800635c:	6023      	str	r3, [r4, #0]
 800635e:	bd38      	pop	{r3, r4, r5, pc}
 8006360:	20000470 	.word	0x20000470

08006364 <_read_r>:
 8006364:	b538      	push	{r3, r4, r5, lr}
 8006366:	4d07      	ldr	r5, [pc, #28]	@ (8006384 <_read_r+0x20>)
 8006368:	4604      	mov	r4, r0
 800636a:	4608      	mov	r0, r1
 800636c:	4611      	mov	r1, r2
 800636e:	2200      	movs	r2, #0
 8006370:	602a      	str	r2, [r5, #0]
 8006372:	461a      	mov	r2, r3
 8006374:	f7fb f92f 	bl	80015d6 <_read>
 8006378:	1c43      	adds	r3, r0, #1
 800637a:	d102      	bne.n	8006382 <_read_r+0x1e>
 800637c:	682b      	ldr	r3, [r5, #0]
 800637e:	b103      	cbz	r3, 8006382 <_read_r+0x1e>
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	bd38      	pop	{r3, r4, r5, pc}
 8006384:	20000470 	.word	0x20000470

08006388 <_write_r>:
 8006388:	b538      	push	{r3, r4, r5, lr}
 800638a:	4d07      	ldr	r5, [pc, #28]	@ (80063a8 <_write_r+0x20>)
 800638c:	4604      	mov	r4, r0
 800638e:	4608      	mov	r0, r1
 8006390:	4611      	mov	r1, r2
 8006392:	2200      	movs	r2, #0
 8006394:	602a      	str	r2, [r5, #0]
 8006396:	461a      	mov	r2, r3
 8006398:	f7fb f93a 	bl	8001610 <_write>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	d102      	bne.n	80063a6 <_write_r+0x1e>
 80063a0:	682b      	ldr	r3, [r5, #0]
 80063a2:	b103      	cbz	r3, 80063a6 <_write_r+0x1e>
 80063a4:	6023      	str	r3, [r4, #0]
 80063a6:	bd38      	pop	{r3, r4, r5, pc}
 80063a8:	20000470 	.word	0x20000470

080063ac <__errno>:
 80063ac:	4b01      	ldr	r3, [pc, #4]	@ (80063b4 <__errno+0x8>)
 80063ae:	6818      	ldr	r0, [r3, #0]
 80063b0:	4770      	bx	lr
 80063b2:	bf00      	nop
 80063b4:	20000018 	.word	0x20000018

080063b8 <__libc_init_array>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	4d0d      	ldr	r5, [pc, #52]	@ (80063f0 <__libc_init_array+0x38>)
 80063bc:	4c0d      	ldr	r4, [pc, #52]	@ (80063f4 <__libc_init_array+0x3c>)
 80063be:	1b64      	subs	r4, r4, r5
 80063c0:	10a4      	asrs	r4, r4, #2
 80063c2:	2600      	movs	r6, #0
 80063c4:	42a6      	cmp	r6, r4
 80063c6:	d109      	bne.n	80063dc <__libc_init_array+0x24>
 80063c8:	4d0b      	ldr	r5, [pc, #44]	@ (80063f8 <__libc_init_array+0x40>)
 80063ca:	4c0c      	ldr	r4, [pc, #48]	@ (80063fc <__libc_init_array+0x44>)
 80063cc:	f002 f868 	bl	80084a0 <_init>
 80063d0:	1b64      	subs	r4, r4, r5
 80063d2:	10a4      	asrs	r4, r4, #2
 80063d4:	2600      	movs	r6, #0
 80063d6:	42a6      	cmp	r6, r4
 80063d8:	d105      	bne.n	80063e6 <__libc_init_array+0x2e>
 80063da:	bd70      	pop	{r4, r5, r6, pc}
 80063dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e0:	4798      	blx	r3
 80063e2:	3601      	adds	r6, #1
 80063e4:	e7ee      	b.n	80063c4 <__libc_init_array+0xc>
 80063e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ea:	4798      	blx	r3
 80063ec:	3601      	adds	r6, #1
 80063ee:	e7f2      	b.n	80063d6 <__libc_init_array+0x1e>
 80063f0:	0800889c 	.word	0x0800889c
 80063f4:	0800889c 	.word	0x0800889c
 80063f8:	0800889c 	.word	0x0800889c
 80063fc:	080088a0 	.word	0x080088a0

08006400 <__retarget_lock_init_recursive>:
 8006400:	4770      	bx	lr

08006402 <__retarget_lock_acquire_recursive>:
 8006402:	4770      	bx	lr

08006404 <__retarget_lock_release_recursive>:
 8006404:	4770      	bx	lr

08006406 <quorem>:
 8006406:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800640a:	6903      	ldr	r3, [r0, #16]
 800640c:	690c      	ldr	r4, [r1, #16]
 800640e:	42a3      	cmp	r3, r4
 8006410:	4607      	mov	r7, r0
 8006412:	db7e      	blt.n	8006512 <quorem+0x10c>
 8006414:	3c01      	subs	r4, #1
 8006416:	f101 0814 	add.w	r8, r1, #20
 800641a:	00a3      	lsls	r3, r4, #2
 800641c:	f100 0514 	add.w	r5, r0, #20
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006426:	9301      	str	r3, [sp, #4]
 8006428:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800642c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006430:	3301      	adds	r3, #1
 8006432:	429a      	cmp	r2, r3
 8006434:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006438:	fbb2 f6f3 	udiv	r6, r2, r3
 800643c:	d32e      	bcc.n	800649c <quorem+0x96>
 800643e:	f04f 0a00 	mov.w	sl, #0
 8006442:	46c4      	mov	ip, r8
 8006444:	46ae      	mov	lr, r5
 8006446:	46d3      	mov	fp, sl
 8006448:	f85c 3b04 	ldr.w	r3, [ip], #4
 800644c:	b298      	uxth	r0, r3
 800644e:	fb06 a000 	mla	r0, r6, r0, sl
 8006452:	0c02      	lsrs	r2, r0, #16
 8006454:	0c1b      	lsrs	r3, r3, #16
 8006456:	fb06 2303 	mla	r3, r6, r3, r2
 800645a:	f8de 2000 	ldr.w	r2, [lr]
 800645e:	b280      	uxth	r0, r0
 8006460:	b292      	uxth	r2, r2
 8006462:	1a12      	subs	r2, r2, r0
 8006464:	445a      	add	r2, fp
 8006466:	f8de 0000 	ldr.w	r0, [lr]
 800646a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800646e:	b29b      	uxth	r3, r3
 8006470:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006474:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006478:	b292      	uxth	r2, r2
 800647a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800647e:	45e1      	cmp	r9, ip
 8006480:	f84e 2b04 	str.w	r2, [lr], #4
 8006484:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006488:	d2de      	bcs.n	8006448 <quorem+0x42>
 800648a:	9b00      	ldr	r3, [sp, #0]
 800648c:	58eb      	ldr	r3, [r5, r3]
 800648e:	b92b      	cbnz	r3, 800649c <quorem+0x96>
 8006490:	9b01      	ldr	r3, [sp, #4]
 8006492:	3b04      	subs	r3, #4
 8006494:	429d      	cmp	r5, r3
 8006496:	461a      	mov	r2, r3
 8006498:	d32f      	bcc.n	80064fa <quorem+0xf4>
 800649a:	613c      	str	r4, [r7, #16]
 800649c:	4638      	mov	r0, r7
 800649e:	f001 f97d 	bl	800779c <__mcmp>
 80064a2:	2800      	cmp	r0, #0
 80064a4:	db25      	blt.n	80064f2 <quorem+0xec>
 80064a6:	4629      	mov	r1, r5
 80064a8:	2000      	movs	r0, #0
 80064aa:	f858 2b04 	ldr.w	r2, [r8], #4
 80064ae:	f8d1 c000 	ldr.w	ip, [r1]
 80064b2:	fa1f fe82 	uxth.w	lr, r2
 80064b6:	fa1f f38c 	uxth.w	r3, ip
 80064ba:	eba3 030e 	sub.w	r3, r3, lr
 80064be:	4403      	add	r3, r0
 80064c0:	0c12      	lsrs	r2, r2, #16
 80064c2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064c6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064d0:	45c1      	cmp	r9, r8
 80064d2:	f841 3b04 	str.w	r3, [r1], #4
 80064d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064da:	d2e6      	bcs.n	80064aa <quorem+0xa4>
 80064dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064e0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064e4:	b922      	cbnz	r2, 80064f0 <quorem+0xea>
 80064e6:	3b04      	subs	r3, #4
 80064e8:	429d      	cmp	r5, r3
 80064ea:	461a      	mov	r2, r3
 80064ec:	d30b      	bcc.n	8006506 <quorem+0x100>
 80064ee:	613c      	str	r4, [r7, #16]
 80064f0:	3601      	adds	r6, #1
 80064f2:	4630      	mov	r0, r6
 80064f4:	b003      	add	sp, #12
 80064f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064fa:	6812      	ldr	r2, [r2, #0]
 80064fc:	3b04      	subs	r3, #4
 80064fe:	2a00      	cmp	r2, #0
 8006500:	d1cb      	bne.n	800649a <quorem+0x94>
 8006502:	3c01      	subs	r4, #1
 8006504:	e7c6      	b.n	8006494 <quorem+0x8e>
 8006506:	6812      	ldr	r2, [r2, #0]
 8006508:	3b04      	subs	r3, #4
 800650a:	2a00      	cmp	r2, #0
 800650c:	d1ef      	bne.n	80064ee <quorem+0xe8>
 800650e:	3c01      	subs	r4, #1
 8006510:	e7ea      	b.n	80064e8 <quorem+0xe2>
 8006512:	2000      	movs	r0, #0
 8006514:	e7ee      	b.n	80064f4 <quorem+0xee>
	...

08006518 <_dtoa_r>:
 8006518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800651c:	69c7      	ldr	r7, [r0, #28]
 800651e:	b097      	sub	sp, #92	@ 0x5c
 8006520:	ed8d 0b04 	vstr	d0, [sp, #16]
 8006524:	ec55 4b10 	vmov	r4, r5, d0
 8006528:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800652a:	9107      	str	r1, [sp, #28]
 800652c:	4681      	mov	r9, r0
 800652e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006530:	9311      	str	r3, [sp, #68]	@ 0x44
 8006532:	b97f      	cbnz	r7, 8006554 <_dtoa_r+0x3c>
 8006534:	2010      	movs	r0, #16
 8006536:	f000 fe09 	bl	800714c <malloc>
 800653a:	4602      	mov	r2, r0
 800653c:	f8c9 001c 	str.w	r0, [r9, #28]
 8006540:	b920      	cbnz	r0, 800654c <_dtoa_r+0x34>
 8006542:	4ba9      	ldr	r3, [pc, #676]	@ (80067e8 <_dtoa_r+0x2d0>)
 8006544:	21ef      	movs	r1, #239	@ 0xef
 8006546:	48a9      	ldr	r0, [pc, #676]	@ (80067ec <_dtoa_r+0x2d4>)
 8006548:	f001 fc6c 	bl	8007e24 <__assert_func>
 800654c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006550:	6007      	str	r7, [r0, #0]
 8006552:	60c7      	str	r7, [r0, #12]
 8006554:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006558:	6819      	ldr	r1, [r3, #0]
 800655a:	b159      	cbz	r1, 8006574 <_dtoa_r+0x5c>
 800655c:	685a      	ldr	r2, [r3, #4]
 800655e:	604a      	str	r2, [r1, #4]
 8006560:	2301      	movs	r3, #1
 8006562:	4093      	lsls	r3, r2
 8006564:	608b      	str	r3, [r1, #8]
 8006566:	4648      	mov	r0, r9
 8006568:	f000 fee6 	bl	8007338 <_Bfree>
 800656c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006570:	2200      	movs	r2, #0
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	1e2b      	subs	r3, r5, #0
 8006576:	bfb9      	ittee	lt
 8006578:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800657c:	9305      	strlt	r3, [sp, #20]
 800657e:	2300      	movge	r3, #0
 8006580:	6033      	strge	r3, [r6, #0]
 8006582:	9f05      	ldr	r7, [sp, #20]
 8006584:	4b9a      	ldr	r3, [pc, #616]	@ (80067f0 <_dtoa_r+0x2d8>)
 8006586:	bfbc      	itt	lt
 8006588:	2201      	movlt	r2, #1
 800658a:	6032      	strlt	r2, [r6, #0]
 800658c:	43bb      	bics	r3, r7
 800658e:	d112      	bne.n	80065b6 <_dtoa_r+0x9e>
 8006590:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006592:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800659c:	4323      	orrs	r3, r4
 800659e:	f000 855a 	beq.w	8007056 <_dtoa_r+0xb3e>
 80065a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065a4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8006804 <_dtoa_r+0x2ec>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f000 855c 	beq.w	8007066 <_dtoa_r+0xb4e>
 80065ae:	f10a 0303 	add.w	r3, sl, #3
 80065b2:	f000 bd56 	b.w	8007062 <_dtoa_r+0xb4a>
 80065b6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80065ba:	2200      	movs	r2, #0
 80065bc:	ec51 0b17 	vmov	r0, r1, d7
 80065c0:	2300      	movs	r3, #0
 80065c2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80065c6:	f7fa fa7f 	bl	8000ac8 <__aeabi_dcmpeq>
 80065ca:	4680      	mov	r8, r0
 80065cc:	b158      	cbz	r0, 80065e6 <_dtoa_r+0xce>
 80065ce:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80065d0:	2301      	movs	r3, #1
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80065d6:	b113      	cbz	r3, 80065de <_dtoa_r+0xc6>
 80065d8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80065da:	4b86      	ldr	r3, [pc, #536]	@ (80067f4 <_dtoa_r+0x2dc>)
 80065dc:	6013      	str	r3, [r2, #0]
 80065de:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8006808 <_dtoa_r+0x2f0>
 80065e2:	f000 bd40 	b.w	8007066 <_dtoa_r+0xb4e>
 80065e6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80065ea:	aa14      	add	r2, sp, #80	@ 0x50
 80065ec:	a915      	add	r1, sp, #84	@ 0x54
 80065ee:	4648      	mov	r0, r9
 80065f0:	f001 f984 	bl	80078fc <__d2b>
 80065f4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80065f8:	9002      	str	r0, [sp, #8]
 80065fa:	2e00      	cmp	r6, #0
 80065fc:	d078      	beq.n	80066f0 <_dtoa_r+0x1d8>
 80065fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006600:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8006604:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006608:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800660c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006610:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006614:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006618:	4619      	mov	r1, r3
 800661a:	2200      	movs	r2, #0
 800661c:	4b76      	ldr	r3, [pc, #472]	@ (80067f8 <_dtoa_r+0x2e0>)
 800661e:	f7f9 fe33 	bl	8000288 <__aeabi_dsub>
 8006622:	a36b      	add	r3, pc, #428	@ (adr r3, 80067d0 <_dtoa_r+0x2b8>)
 8006624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006628:	f7f9 ffe6 	bl	80005f8 <__aeabi_dmul>
 800662c:	a36a      	add	r3, pc, #424	@ (adr r3, 80067d8 <_dtoa_r+0x2c0>)
 800662e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006632:	f7f9 fe2b 	bl	800028c <__adddf3>
 8006636:	4604      	mov	r4, r0
 8006638:	4630      	mov	r0, r6
 800663a:	460d      	mov	r5, r1
 800663c:	f7f9 ff72 	bl	8000524 <__aeabi_i2d>
 8006640:	a367      	add	r3, pc, #412	@ (adr r3, 80067e0 <_dtoa_r+0x2c8>)
 8006642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006646:	f7f9 ffd7 	bl	80005f8 <__aeabi_dmul>
 800664a:	4602      	mov	r2, r0
 800664c:	460b      	mov	r3, r1
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7f9 fe1b 	bl	800028c <__adddf3>
 8006656:	4604      	mov	r4, r0
 8006658:	460d      	mov	r5, r1
 800665a:	f7fa fa7d 	bl	8000b58 <__aeabi_d2iz>
 800665e:	2200      	movs	r2, #0
 8006660:	4607      	mov	r7, r0
 8006662:	2300      	movs	r3, #0
 8006664:	4620      	mov	r0, r4
 8006666:	4629      	mov	r1, r5
 8006668:	f7fa fa38 	bl	8000adc <__aeabi_dcmplt>
 800666c:	b140      	cbz	r0, 8006680 <_dtoa_r+0x168>
 800666e:	4638      	mov	r0, r7
 8006670:	f7f9 ff58 	bl	8000524 <__aeabi_i2d>
 8006674:	4622      	mov	r2, r4
 8006676:	462b      	mov	r3, r5
 8006678:	f7fa fa26 	bl	8000ac8 <__aeabi_dcmpeq>
 800667c:	b900      	cbnz	r0, 8006680 <_dtoa_r+0x168>
 800667e:	3f01      	subs	r7, #1
 8006680:	2f16      	cmp	r7, #22
 8006682:	d852      	bhi.n	800672a <_dtoa_r+0x212>
 8006684:	4b5d      	ldr	r3, [pc, #372]	@ (80067fc <_dtoa_r+0x2e4>)
 8006686:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800668a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800668e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006692:	f7fa fa23 	bl	8000adc <__aeabi_dcmplt>
 8006696:	2800      	cmp	r0, #0
 8006698:	d049      	beq.n	800672e <_dtoa_r+0x216>
 800669a:	3f01      	subs	r7, #1
 800669c:	2300      	movs	r3, #0
 800669e:	9310      	str	r3, [sp, #64]	@ 0x40
 80066a0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80066a2:	1b9b      	subs	r3, r3, r6
 80066a4:	1e5a      	subs	r2, r3, #1
 80066a6:	bf45      	ittet	mi
 80066a8:	f1c3 0301 	rsbmi	r3, r3, #1
 80066ac:	9300      	strmi	r3, [sp, #0]
 80066ae:	2300      	movpl	r3, #0
 80066b0:	2300      	movmi	r3, #0
 80066b2:	9206      	str	r2, [sp, #24]
 80066b4:	bf54      	ite	pl
 80066b6:	9300      	strpl	r3, [sp, #0]
 80066b8:	9306      	strmi	r3, [sp, #24]
 80066ba:	2f00      	cmp	r7, #0
 80066bc:	db39      	blt.n	8006732 <_dtoa_r+0x21a>
 80066be:	9b06      	ldr	r3, [sp, #24]
 80066c0:	970d      	str	r7, [sp, #52]	@ 0x34
 80066c2:	443b      	add	r3, r7
 80066c4:	9306      	str	r3, [sp, #24]
 80066c6:	2300      	movs	r3, #0
 80066c8:	9308      	str	r3, [sp, #32]
 80066ca:	9b07      	ldr	r3, [sp, #28]
 80066cc:	2b09      	cmp	r3, #9
 80066ce:	d863      	bhi.n	8006798 <_dtoa_r+0x280>
 80066d0:	2b05      	cmp	r3, #5
 80066d2:	bfc4      	itt	gt
 80066d4:	3b04      	subgt	r3, #4
 80066d6:	9307      	strgt	r3, [sp, #28]
 80066d8:	9b07      	ldr	r3, [sp, #28]
 80066da:	f1a3 0302 	sub.w	r3, r3, #2
 80066de:	bfcc      	ite	gt
 80066e0:	2400      	movgt	r4, #0
 80066e2:	2401      	movle	r4, #1
 80066e4:	2b03      	cmp	r3, #3
 80066e6:	d863      	bhi.n	80067b0 <_dtoa_r+0x298>
 80066e8:	e8df f003 	tbb	[pc, r3]
 80066ec:	2b375452 	.word	0x2b375452
 80066f0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80066f4:	441e      	add	r6, r3
 80066f6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066fa:	2b20      	cmp	r3, #32
 80066fc:	bfc1      	itttt	gt
 80066fe:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006702:	409f      	lslgt	r7, r3
 8006704:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006708:	fa24 f303 	lsrgt.w	r3, r4, r3
 800670c:	bfd6      	itet	le
 800670e:	f1c3 0320 	rsble	r3, r3, #32
 8006712:	ea47 0003 	orrgt.w	r0, r7, r3
 8006716:	fa04 f003 	lslle.w	r0, r4, r3
 800671a:	f7f9 fef3 	bl	8000504 <__aeabi_ui2d>
 800671e:	2201      	movs	r2, #1
 8006720:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006724:	3e01      	subs	r6, #1
 8006726:	9212      	str	r2, [sp, #72]	@ 0x48
 8006728:	e776      	b.n	8006618 <_dtoa_r+0x100>
 800672a:	2301      	movs	r3, #1
 800672c:	e7b7      	b.n	800669e <_dtoa_r+0x186>
 800672e:	9010      	str	r0, [sp, #64]	@ 0x40
 8006730:	e7b6      	b.n	80066a0 <_dtoa_r+0x188>
 8006732:	9b00      	ldr	r3, [sp, #0]
 8006734:	1bdb      	subs	r3, r3, r7
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	427b      	negs	r3, r7
 800673a:	9308      	str	r3, [sp, #32]
 800673c:	2300      	movs	r3, #0
 800673e:	930d      	str	r3, [sp, #52]	@ 0x34
 8006740:	e7c3      	b.n	80066ca <_dtoa_r+0x1b2>
 8006742:	2301      	movs	r3, #1
 8006744:	9309      	str	r3, [sp, #36]	@ 0x24
 8006746:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006748:	eb07 0b03 	add.w	fp, r7, r3
 800674c:	f10b 0301 	add.w	r3, fp, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	9303      	str	r3, [sp, #12]
 8006754:	bfb8      	it	lt
 8006756:	2301      	movlt	r3, #1
 8006758:	e006      	b.n	8006768 <_dtoa_r+0x250>
 800675a:	2301      	movs	r3, #1
 800675c:	9309      	str	r3, [sp, #36]	@ 0x24
 800675e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006760:	2b00      	cmp	r3, #0
 8006762:	dd28      	ble.n	80067b6 <_dtoa_r+0x29e>
 8006764:	469b      	mov	fp, r3
 8006766:	9303      	str	r3, [sp, #12]
 8006768:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800676c:	2100      	movs	r1, #0
 800676e:	2204      	movs	r2, #4
 8006770:	f102 0514 	add.w	r5, r2, #20
 8006774:	429d      	cmp	r5, r3
 8006776:	d926      	bls.n	80067c6 <_dtoa_r+0x2ae>
 8006778:	6041      	str	r1, [r0, #4]
 800677a:	4648      	mov	r0, r9
 800677c:	f000 fd9c 	bl	80072b8 <_Balloc>
 8006780:	4682      	mov	sl, r0
 8006782:	2800      	cmp	r0, #0
 8006784:	d142      	bne.n	800680c <_dtoa_r+0x2f4>
 8006786:	4b1e      	ldr	r3, [pc, #120]	@ (8006800 <_dtoa_r+0x2e8>)
 8006788:	4602      	mov	r2, r0
 800678a:	f240 11af 	movw	r1, #431	@ 0x1af
 800678e:	e6da      	b.n	8006546 <_dtoa_r+0x2e>
 8006790:	2300      	movs	r3, #0
 8006792:	e7e3      	b.n	800675c <_dtoa_r+0x244>
 8006794:	2300      	movs	r3, #0
 8006796:	e7d5      	b.n	8006744 <_dtoa_r+0x22c>
 8006798:	2401      	movs	r4, #1
 800679a:	2300      	movs	r3, #0
 800679c:	9307      	str	r3, [sp, #28]
 800679e:	9409      	str	r4, [sp, #36]	@ 0x24
 80067a0:	f04f 3bff 	mov.w	fp, #4294967295
 80067a4:	2200      	movs	r2, #0
 80067a6:	f8cd b00c 	str.w	fp, [sp, #12]
 80067aa:	2312      	movs	r3, #18
 80067ac:	920c      	str	r2, [sp, #48]	@ 0x30
 80067ae:	e7db      	b.n	8006768 <_dtoa_r+0x250>
 80067b0:	2301      	movs	r3, #1
 80067b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067b4:	e7f4      	b.n	80067a0 <_dtoa_r+0x288>
 80067b6:	f04f 0b01 	mov.w	fp, #1
 80067ba:	f8cd b00c 	str.w	fp, [sp, #12]
 80067be:	465b      	mov	r3, fp
 80067c0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80067c4:	e7d0      	b.n	8006768 <_dtoa_r+0x250>
 80067c6:	3101      	adds	r1, #1
 80067c8:	0052      	lsls	r2, r2, #1
 80067ca:	e7d1      	b.n	8006770 <_dtoa_r+0x258>
 80067cc:	f3af 8000 	nop.w
 80067d0:	636f4361 	.word	0x636f4361
 80067d4:	3fd287a7 	.word	0x3fd287a7
 80067d8:	8b60c8b3 	.word	0x8b60c8b3
 80067dc:	3fc68a28 	.word	0x3fc68a28
 80067e0:	509f79fb 	.word	0x509f79fb
 80067e4:	3fd34413 	.word	0x3fd34413
 80067e8:	0800855d 	.word	0x0800855d
 80067ec:	08008574 	.word	0x08008574
 80067f0:	7ff00000 	.word	0x7ff00000
 80067f4:	0800852d 	.word	0x0800852d
 80067f8:	3ff80000 	.word	0x3ff80000
 80067fc:	080086c8 	.word	0x080086c8
 8006800:	080085cc 	.word	0x080085cc
 8006804:	08008559 	.word	0x08008559
 8006808:	0800852c 	.word	0x0800852c
 800680c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006810:	6018      	str	r0, [r3, #0]
 8006812:	9b03      	ldr	r3, [sp, #12]
 8006814:	2b0e      	cmp	r3, #14
 8006816:	f200 80a1 	bhi.w	800695c <_dtoa_r+0x444>
 800681a:	2c00      	cmp	r4, #0
 800681c:	f000 809e 	beq.w	800695c <_dtoa_r+0x444>
 8006820:	2f00      	cmp	r7, #0
 8006822:	dd33      	ble.n	800688c <_dtoa_r+0x374>
 8006824:	4b9c      	ldr	r3, [pc, #624]	@ (8006a98 <_dtoa_r+0x580>)
 8006826:	f007 020f 	and.w	r2, r7, #15
 800682a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800682e:	ed93 7b00 	vldr	d7, [r3]
 8006832:	05f8      	lsls	r0, r7, #23
 8006834:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006838:	ea4f 1427 	mov.w	r4, r7, asr #4
 800683c:	d516      	bpl.n	800686c <_dtoa_r+0x354>
 800683e:	4b97      	ldr	r3, [pc, #604]	@ (8006a9c <_dtoa_r+0x584>)
 8006840:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006844:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006848:	f7fa f800 	bl	800084c <__aeabi_ddiv>
 800684c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006850:	f004 040f 	and.w	r4, r4, #15
 8006854:	2603      	movs	r6, #3
 8006856:	4d91      	ldr	r5, [pc, #580]	@ (8006a9c <_dtoa_r+0x584>)
 8006858:	b954      	cbnz	r4, 8006870 <_dtoa_r+0x358>
 800685a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800685e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006862:	f7f9 fff3 	bl	800084c <__aeabi_ddiv>
 8006866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800686a:	e028      	b.n	80068be <_dtoa_r+0x3a6>
 800686c:	2602      	movs	r6, #2
 800686e:	e7f2      	b.n	8006856 <_dtoa_r+0x33e>
 8006870:	07e1      	lsls	r1, r4, #31
 8006872:	d508      	bpl.n	8006886 <_dtoa_r+0x36e>
 8006874:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006878:	e9d5 2300 	ldrd	r2, r3, [r5]
 800687c:	f7f9 febc 	bl	80005f8 <__aeabi_dmul>
 8006880:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006884:	3601      	adds	r6, #1
 8006886:	1064      	asrs	r4, r4, #1
 8006888:	3508      	adds	r5, #8
 800688a:	e7e5      	b.n	8006858 <_dtoa_r+0x340>
 800688c:	f000 80af 	beq.w	80069ee <_dtoa_r+0x4d6>
 8006890:	427c      	negs	r4, r7
 8006892:	4b81      	ldr	r3, [pc, #516]	@ (8006a98 <_dtoa_r+0x580>)
 8006894:	4d81      	ldr	r5, [pc, #516]	@ (8006a9c <_dtoa_r+0x584>)
 8006896:	f004 020f 	and.w	r2, r4, #15
 800689a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800689e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80068a6:	f7f9 fea7 	bl	80005f8 <__aeabi_dmul>
 80068aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068ae:	1124      	asrs	r4, r4, #4
 80068b0:	2300      	movs	r3, #0
 80068b2:	2602      	movs	r6, #2
 80068b4:	2c00      	cmp	r4, #0
 80068b6:	f040 808f 	bne.w	80069d8 <_dtoa_r+0x4c0>
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d1d3      	bne.n	8006866 <_dtoa_r+0x34e>
 80068be:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80068c0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f000 8094 	beq.w	80069f2 <_dtoa_r+0x4da>
 80068ca:	4b75      	ldr	r3, [pc, #468]	@ (8006aa0 <_dtoa_r+0x588>)
 80068cc:	2200      	movs	r2, #0
 80068ce:	4620      	mov	r0, r4
 80068d0:	4629      	mov	r1, r5
 80068d2:	f7fa f903 	bl	8000adc <__aeabi_dcmplt>
 80068d6:	2800      	cmp	r0, #0
 80068d8:	f000 808b 	beq.w	80069f2 <_dtoa_r+0x4da>
 80068dc:	9b03      	ldr	r3, [sp, #12]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f000 8087 	beq.w	80069f2 <_dtoa_r+0x4da>
 80068e4:	f1bb 0f00 	cmp.w	fp, #0
 80068e8:	dd34      	ble.n	8006954 <_dtoa_r+0x43c>
 80068ea:	4620      	mov	r0, r4
 80068ec:	4b6d      	ldr	r3, [pc, #436]	@ (8006aa4 <_dtoa_r+0x58c>)
 80068ee:	2200      	movs	r2, #0
 80068f0:	4629      	mov	r1, r5
 80068f2:	f7f9 fe81 	bl	80005f8 <__aeabi_dmul>
 80068f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80068fa:	f107 38ff 	add.w	r8, r7, #4294967295
 80068fe:	3601      	adds	r6, #1
 8006900:	465c      	mov	r4, fp
 8006902:	4630      	mov	r0, r6
 8006904:	f7f9 fe0e 	bl	8000524 <__aeabi_i2d>
 8006908:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800690c:	f7f9 fe74 	bl	80005f8 <__aeabi_dmul>
 8006910:	4b65      	ldr	r3, [pc, #404]	@ (8006aa8 <_dtoa_r+0x590>)
 8006912:	2200      	movs	r2, #0
 8006914:	f7f9 fcba 	bl	800028c <__adddf3>
 8006918:	4605      	mov	r5, r0
 800691a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800691e:	2c00      	cmp	r4, #0
 8006920:	d16a      	bne.n	80069f8 <_dtoa_r+0x4e0>
 8006922:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006926:	4b61      	ldr	r3, [pc, #388]	@ (8006aac <_dtoa_r+0x594>)
 8006928:	2200      	movs	r2, #0
 800692a:	f7f9 fcad 	bl	8000288 <__aeabi_dsub>
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006936:	462a      	mov	r2, r5
 8006938:	4633      	mov	r3, r6
 800693a:	f7fa f8ed 	bl	8000b18 <__aeabi_dcmpgt>
 800693e:	2800      	cmp	r0, #0
 8006940:	f040 8298 	bne.w	8006e74 <_dtoa_r+0x95c>
 8006944:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006948:	462a      	mov	r2, r5
 800694a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800694e:	f7fa f8c5 	bl	8000adc <__aeabi_dcmplt>
 8006952:	bb38      	cbnz	r0, 80069a4 <_dtoa_r+0x48c>
 8006954:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006958:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800695c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800695e:	2b00      	cmp	r3, #0
 8006960:	f2c0 8157 	blt.w	8006c12 <_dtoa_r+0x6fa>
 8006964:	2f0e      	cmp	r7, #14
 8006966:	f300 8154 	bgt.w	8006c12 <_dtoa_r+0x6fa>
 800696a:	4b4b      	ldr	r3, [pc, #300]	@ (8006a98 <_dtoa_r+0x580>)
 800696c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006970:	ed93 7b00 	vldr	d7, [r3]
 8006974:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006976:	2b00      	cmp	r3, #0
 8006978:	ed8d 7b00 	vstr	d7, [sp]
 800697c:	f280 80e5 	bge.w	8006b4a <_dtoa_r+0x632>
 8006980:	9b03      	ldr	r3, [sp, #12]
 8006982:	2b00      	cmp	r3, #0
 8006984:	f300 80e1 	bgt.w	8006b4a <_dtoa_r+0x632>
 8006988:	d10c      	bne.n	80069a4 <_dtoa_r+0x48c>
 800698a:	4b48      	ldr	r3, [pc, #288]	@ (8006aac <_dtoa_r+0x594>)
 800698c:	2200      	movs	r2, #0
 800698e:	ec51 0b17 	vmov	r0, r1, d7
 8006992:	f7f9 fe31 	bl	80005f8 <__aeabi_dmul>
 8006996:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800699a:	f7fa f8b3 	bl	8000b04 <__aeabi_dcmpge>
 800699e:	2800      	cmp	r0, #0
 80069a0:	f000 8266 	beq.w	8006e70 <_dtoa_r+0x958>
 80069a4:	2400      	movs	r4, #0
 80069a6:	4625      	mov	r5, r4
 80069a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80069aa:	4656      	mov	r6, sl
 80069ac:	ea6f 0803 	mvn.w	r8, r3
 80069b0:	2700      	movs	r7, #0
 80069b2:	4621      	mov	r1, r4
 80069b4:	4648      	mov	r0, r9
 80069b6:	f000 fcbf 	bl	8007338 <_Bfree>
 80069ba:	2d00      	cmp	r5, #0
 80069bc:	f000 80bd 	beq.w	8006b3a <_dtoa_r+0x622>
 80069c0:	b12f      	cbz	r7, 80069ce <_dtoa_r+0x4b6>
 80069c2:	42af      	cmp	r7, r5
 80069c4:	d003      	beq.n	80069ce <_dtoa_r+0x4b6>
 80069c6:	4639      	mov	r1, r7
 80069c8:	4648      	mov	r0, r9
 80069ca:	f000 fcb5 	bl	8007338 <_Bfree>
 80069ce:	4629      	mov	r1, r5
 80069d0:	4648      	mov	r0, r9
 80069d2:	f000 fcb1 	bl	8007338 <_Bfree>
 80069d6:	e0b0      	b.n	8006b3a <_dtoa_r+0x622>
 80069d8:	07e2      	lsls	r2, r4, #31
 80069da:	d505      	bpl.n	80069e8 <_dtoa_r+0x4d0>
 80069dc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80069e0:	f7f9 fe0a 	bl	80005f8 <__aeabi_dmul>
 80069e4:	3601      	adds	r6, #1
 80069e6:	2301      	movs	r3, #1
 80069e8:	1064      	asrs	r4, r4, #1
 80069ea:	3508      	adds	r5, #8
 80069ec:	e762      	b.n	80068b4 <_dtoa_r+0x39c>
 80069ee:	2602      	movs	r6, #2
 80069f0:	e765      	b.n	80068be <_dtoa_r+0x3a6>
 80069f2:	9c03      	ldr	r4, [sp, #12]
 80069f4:	46b8      	mov	r8, r7
 80069f6:	e784      	b.n	8006902 <_dtoa_r+0x3ea>
 80069f8:	4b27      	ldr	r3, [pc, #156]	@ (8006a98 <_dtoa_r+0x580>)
 80069fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069fc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a04:	4454      	add	r4, sl
 8006a06:	2900      	cmp	r1, #0
 8006a08:	d054      	beq.n	8006ab4 <_dtoa_r+0x59c>
 8006a0a:	4929      	ldr	r1, [pc, #164]	@ (8006ab0 <_dtoa_r+0x598>)
 8006a0c:	2000      	movs	r0, #0
 8006a0e:	f7f9 ff1d 	bl	800084c <__aeabi_ddiv>
 8006a12:	4633      	mov	r3, r6
 8006a14:	462a      	mov	r2, r5
 8006a16:	f7f9 fc37 	bl	8000288 <__aeabi_dsub>
 8006a1a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a1e:	4656      	mov	r6, sl
 8006a20:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a24:	f7fa f898 	bl	8000b58 <__aeabi_d2iz>
 8006a28:	4605      	mov	r5, r0
 8006a2a:	f7f9 fd7b 	bl	8000524 <__aeabi_i2d>
 8006a2e:	4602      	mov	r2, r0
 8006a30:	460b      	mov	r3, r1
 8006a32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a36:	f7f9 fc27 	bl	8000288 <__aeabi_dsub>
 8006a3a:	3530      	adds	r5, #48	@ 0x30
 8006a3c:	4602      	mov	r2, r0
 8006a3e:	460b      	mov	r3, r1
 8006a40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006a44:	f806 5b01 	strb.w	r5, [r6], #1
 8006a48:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a4c:	f7fa f846 	bl	8000adc <__aeabi_dcmplt>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d172      	bne.n	8006b3a <_dtoa_r+0x622>
 8006a54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a58:	4911      	ldr	r1, [pc, #68]	@ (8006aa0 <_dtoa_r+0x588>)
 8006a5a:	2000      	movs	r0, #0
 8006a5c:	f7f9 fc14 	bl	8000288 <__aeabi_dsub>
 8006a60:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006a64:	f7fa f83a 	bl	8000adc <__aeabi_dcmplt>
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	f040 80b4 	bne.w	8006bd6 <_dtoa_r+0x6be>
 8006a6e:	42a6      	cmp	r6, r4
 8006a70:	f43f af70 	beq.w	8006954 <_dtoa_r+0x43c>
 8006a74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006a78:	4b0a      	ldr	r3, [pc, #40]	@ (8006aa4 <_dtoa_r+0x58c>)
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f7f9 fdbc 	bl	80005f8 <__aeabi_dmul>
 8006a80:	4b08      	ldr	r3, [pc, #32]	@ (8006aa4 <_dtoa_r+0x58c>)
 8006a82:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006a86:	2200      	movs	r2, #0
 8006a88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006a8c:	f7f9 fdb4 	bl	80005f8 <__aeabi_dmul>
 8006a90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006a94:	e7c4      	b.n	8006a20 <_dtoa_r+0x508>
 8006a96:	bf00      	nop
 8006a98:	080086c8 	.word	0x080086c8
 8006a9c:	080086a0 	.word	0x080086a0
 8006aa0:	3ff00000 	.word	0x3ff00000
 8006aa4:	40240000 	.word	0x40240000
 8006aa8:	401c0000 	.word	0x401c0000
 8006aac:	40140000 	.word	0x40140000
 8006ab0:	3fe00000 	.word	0x3fe00000
 8006ab4:	4631      	mov	r1, r6
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f7f9 fd9e 	bl	80005f8 <__aeabi_dmul>
 8006abc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006ac0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ac2:	4656      	mov	r6, sl
 8006ac4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ac8:	f7fa f846 	bl	8000b58 <__aeabi_d2iz>
 8006acc:	4605      	mov	r5, r0
 8006ace:	f7f9 fd29 	bl	8000524 <__aeabi_i2d>
 8006ad2:	4602      	mov	r2, r0
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ada:	f7f9 fbd5 	bl	8000288 <__aeabi_dsub>
 8006ade:	3530      	adds	r5, #48	@ 0x30
 8006ae0:	f806 5b01 	strb.w	r5, [r6], #1
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	460b      	mov	r3, r1
 8006ae8:	42a6      	cmp	r6, r4
 8006aea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006aee:	f04f 0200 	mov.w	r2, #0
 8006af2:	d124      	bne.n	8006b3e <_dtoa_r+0x626>
 8006af4:	4baf      	ldr	r3, [pc, #700]	@ (8006db4 <_dtoa_r+0x89c>)
 8006af6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006afa:	f7f9 fbc7 	bl	800028c <__adddf3>
 8006afe:	4602      	mov	r2, r0
 8006b00:	460b      	mov	r3, r1
 8006b02:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b06:	f7fa f807 	bl	8000b18 <__aeabi_dcmpgt>
 8006b0a:	2800      	cmp	r0, #0
 8006b0c:	d163      	bne.n	8006bd6 <_dtoa_r+0x6be>
 8006b0e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006b12:	49a8      	ldr	r1, [pc, #672]	@ (8006db4 <_dtoa_r+0x89c>)
 8006b14:	2000      	movs	r0, #0
 8006b16:	f7f9 fbb7 	bl	8000288 <__aeabi_dsub>
 8006b1a:	4602      	mov	r2, r0
 8006b1c:	460b      	mov	r3, r1
 8006b1e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b22:	f7f9 ffdb 	bl	8000adc <__aeabi_dcmplt>
 8006b26:	2800      	cmp	r0, #0
 8006b28:	f43f af14 	beq.w	8006954 <_dtoa_r+0x43c>
 8006b2c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b2e:	1e73      	subs	r3, r6, #1
 8006b30:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b32:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b36:	2b30      	cmp	r3, #48	@ 0x30
 8006b38:	d0f8      	beq.n	8006b2c <_dtoa_r+0x614>
 8006b3a:	4647      	mov	r7, r8
 8006b3c:	e03b      	b.n	8006bb6 <_dtoa_r+0x69e>
 8006b3e:	4b9e      	ldr	r3, [pc, #632]	@ (8006db8 <_dtoa_r+0x8a0>)
 8006b40:	f7f9 fd5a 	bl	80005f8 <__aeabi_dmul>
 8006b44:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b48:	e7bc      	b.n	8006ac4 <_dtoa_r+0x5ac>
 8006b4a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006b4e:	4656      	mov	r6, sl
 8006b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b54:	4620      	mov	r0, r4
 8006b56:	4629      	mov	r1, r5
 8006b58:	f7f9 fe78 	bl	800084c <__aeabi_ddiv>
 8006b5c:	f7f9 fffc 	bl	8000b58 <__aeabi_d2iz>
 8006b60:	4680      	mov	r8, r0
 8006b62:	f7f9 fcdf 	bl	8000524 <__aeabi_i2d>
 8006b66:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b6a:	f7f9 fd45 	bl	80005f8 <__aeabi_dmul>
 8006b6e:	4602      	mov	r2, r0
 8006b70:	460b      	mov	r3, r1
 8006b72:	4620      	mov	r0, r4
 8006b74:	4629      	mov	r1, r5
 8006b76:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006b7a:	f7f9 fb85 	bl	8000288 <__aeabi_dsub>
 8006b7e:	f806 4b01 	strb.w	r4, [r6], #1
 8006b82:	9d03      	ldr	r5, [sp, #12]
 8006b84:	eba6 040a 	sub.w	r4, r6, sl
 8006b88:	42a5      	cmp	r5, r4
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	460b      	mov	r3, r1
 8006b8e:	d133      	bne.n	8006bf8 <_dtoa_r+0x6e0>
 8006b90:	f7f9 fb7c 	bl	800028c <__adddf3>
 8006b94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b98:	4604      	mov	r4, r0
 8006b9a:	460d      	mov	r5, r1
 8006b9c:	f7f9 ffbc 	bl	8000b18 <__aeabi_dcmpgt>
 8006ba0:	b9c0      	cbnz	r0, 8006bd4 <_dtoa_r+0x6bc>
 8006ba2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7f9 ff8d 	bl	8000ac8 <__aeabi_dcmpeq>
 8006bae:	b110      	cbz	r0, 8006bb6 <_dtoa_r+0x69e>
 8006bb0:	f018 0f01 	tst.w	r8, #1
 8006bb4:	d10e      	bne.n	8006bd4 <_dtoa_r+0x6bc>
 8006bb6:	9902      	ldr	r1, [sp, #8]
 8006bb8:	4648      	mov	r0, r9
 8006bba:	f000 fbbd 	bl	8007338 <_Bfree>
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	7033      	strb	r3, [r6, #0]
 8006bc2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006bc4:	3701      	adds	r7, #1
 8006bc6:	601f      	str	r7, [r3, #0]
 8006bc8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f000 824b 	beq.w	8007066 <_dtoa_r+0xb4e>
 8006bd0:	601e      	str	r6, [r3, #0]
 8006bd2:	e248      	b.n	8007066 <_dtoa_r+0xb4e>
 8006bd4:	46b8      	mov	r8, r7
 8006bd6:	4633      	mov	r3, r6
 8006bd8:	461e      	mov	r6, r3
 8006bda:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bde:	2a39      	cmp	r2, #57	@ 0x39
 8006be0:	d106      	bne.n	8006bf0 <_dtoa_r+0x6d8>
 8006be2:	459a      	cmp	sl, r3
 8006be4:	d1f8      	bne.n	8006bd8 <_dtoa_r+0x6c0>
 8006be6:	2230      	movs	r2, #48	@ 0x30
 8006be8:	f108 0801 	add.w	r8, r8, #1
 8006bec:	f88a 2000 	strb.w	r2, [sl]
 8006bf0:	781a      	ldrb	r2, [r3, #0]
 8006bf2:	3201      	adds	r2, #1
 8006bf4:	701a      	strb	r2, [r3, #0]
 8006bf6:	e7a0      	b.n	8006b3a <_dtoa_r+0x622>
 8006bf8:	4b6f      	ldr	r3, [pc, #444]	@ (8006db8 <_dtoa_r+0x8a0>)
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f7f9 fcfc 	bl	80005f8 <__aeabi_dmul>
 8006c00:	2200      	movs	r2, #0
 8006c02:	2300      	movs	r3, #0
 8006c04:	4604      	mov	r4, r0
 8006c06:	460d      	mov	r5, r1
 8006c08:	f7f9 ff5e 	bl	8000ac8 <__aeabi_dcmpeq>
 8006c0c:	2800      	cmp	r0, #0
 8006c0e:	d09f      	beq.n	8006b50 <_dtoa_r+0x638>
 8006c10:	e7d1      	b.n	8006bb6 <_dtoa_r+0x69e>
 8006c12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c14:	2a00      	cmp	r2, #0
 8006c16:	f000 80ea 	beq.w	8006dee <_dtoa_r+0x8d6>
 8006c1a:	9a07      	ldr	r2, [sp, #28]
 8006c1c:	2a01      	cmp	r2, #1
 8006c1e:	f300 80cd 	bgt.w	8006dbc <_dtoa_r+0x8a4>
 8006c22:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c24:	2a00      	cmp	r2, #0
 8006c26:	f000 80c1 	beq.w	8006dac <_dtoa_r+0x894>
 8006c2a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c2e:	9c08      	ldr	r4, [sp, #32]
 8006c30:	9e00      	ldr	r6, [sp, #0]
 8006c32:	9a00      	ldr	r2, [sp, #0]
 8006c34:	441a      	add	r2, r3
 8006c36:	9200      	str	r2, [sp, #0]
 8006c38:	9a06      	ldr	r2, [sp, #24]
 8006c3a:	2101      	movs	r1, #1
 8006c3c:	441a      	add	r2, r3
 8006c3e:	4648      	mov	r0, r9
 8006c40:	9206      	str	r2, [sp, #24]
 8006c42:	f000 fc2d 	bl	80074a0 <__i2b>
 8006c46:	4605      	mov	r5, r0
 8006c48:	b166      	cbz	r6, 8006c64 <_dtoa_r+0x74c>
 8006c4a:	9b06      	ldr	r3, [sp, #24]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	dd09      	ble.n	8006c64 <_dtoa_r+0x74c>
 8006c50:	42b3      	cmp	r3, r6
 8006c52:	9a00      	ldr	r2, [sp, #0]
 8006c54:	bfa8      	it	ge
 8006c56:	4633      	movge	r3, r6
 8006c58:	1ad2      	subs	r2, r2, r3
 8006c5a:	9200      	str	r2, [sp, #0]
 8006c5c:	9a06      	ldr	r2, [sp, #24]
 8006c5e:	1af6      	subs	r6, r6, r3
 8006c60:	1ad3      	subs	r3, r2, r3
 8006c62:	9306      	str	r3, [sp, #24]
 8006c64:	9b08      	ldr	r3, [sp, #32]
 8006c66:	b30b      	cbz	r3, 8006cac <_dtoa_r+0x794>
 8006c68:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	f000 80c6 	beq.w	8006dfc <_dtoa_r+0x8e4>
 8006c70:	2c00      	cmp	r4, #0
 8006c72:	f000 80c0 	beq.w	8006df6 <_dtoa_r+0x8de>
 8006c76:	4629      	mov	r1, r5
 8006c78:	4622      	mov	r2, r4
 8006c7a:	4648      	mov	r0, r9
 8006c7c:	f000 fcc8 	bl	8007610 <__pow5mult>
 8006c80:	9a02      	ldr	r2, [sp, #8]
 8006c82:	4601      	mov	r1, r0
 8006c84:	4605      	mov	r5, r0
 8006c86:	4648      	mov	r0, r9
 8006c88:	f000 fc20 	bl	80074cc <__multiply>
 8006c8c:	9902      	ldr	r1, [sp, #8]
 8006c8e:	4680      	mov	r8, r0
 8006c90:	4648      	mov	r0, r9
 8006c92:	f000 fb51 	bl	8007338 <_Bfree>
 8006c96:	9b08      	ldr	r3, [sp, #32]
 8006c98:	1b1b      	subs	r3, r3, r4
 8006c9a:	9308      	str	r3, [sp, #32]
 8006c9c:	f000 80b1 	beq.w	8006e02 <_dtoa_r+0x8ea>
 8006ca0:	9a08      	ldr	r2, [sp, #32]
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	4648      	mov	r0, r9
 8006ca6:	f000 fcb3 	bl	8007610 <__pow5mult>
 8006caa:	9002      	str	r0, [sp, #8]
 8006cac:	2101      	movs	r1, #1
 8006cae:	4648      	mov	r0, r9
 8006cb0:	f000 fbf6 	bl	80074a0 <__i2b>
 8006cb4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cb6:	4604      	mov	r4, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 81d8 	beq.w	800706e <_dtoa_r+0xb56>
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	4601      	mov	r1, r0
 8006cc2:	4648      	mov	r0, r9
 8006cc4:	f000 fca4 	bl	8007610 <__pow5mult>
 8006cc8:	9b07      	ldr	r3, [sp, #28]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	4604      	mov	r4, r0
 8006cce:	f300 809f 	bgt.w	8006e10 <_dtoa_r+0x8f8>
 8006cd2:	9b04      	ldr	r3, [sp, #16]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 8097 	bne.w	8006e08 <_dtoa_r+0x8f0>
 8006cda:	9b05      	ldr	r3, [sp, #20]
 8006cdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f040 8093 	bne.w	8006e0c <_dtoa_r+0x8f4>
 8006ce6:	9b05      	ldr	r3, [sp, #20]
 8006ce8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cec:	0d1b      	lsrs	r3, r3, #20
 8006cee:	051b      	lsls	r3, r3, #20
 8006cf0:	b133      	cbz	r3, 8006d00 <_dtoa_r+0x7e8>
 8006cf2:	9b00      	ldr	r3, [sp, #0]
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	9b06      	ldr	r3, [sp, #24]
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	9306      	str	r3, [sp, #24]
 8006cfe:	2301      	movs	r3, #1
 8006d00:	9308      	str	r3, [sp, #32]
 8006d02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 81b8 	beq.w	800707a <_dtoa_r+0xb62>
 8006d0a:	6923      	ldr	r3, [r4, #16]
 8006d0c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d10:	6918      	ldr	r0, [r3, #16]
 8006d12:	f000 fb79 	bl	8007408 <__hi0bits>
 8006d16:	f1c0 0020 	rsb	r0, r0, #32
 8006d1a:	9b06      	ldr	r3, [sp, #24]
 8006d1c:	4418      	add	r0, r3
 8006d1e:	f010 001f 	ands.w	r0, r0, #31
 8006d22:	f000 8082 	beq.w	8006e2a <_dtoa_r+0x912>
 8006d26:	f1c0 0320 	rsb	r3, r0, #32
 8006d2a:	2b04      	cmp	r3, #4
 8006d2c:	dd73      	ble.n	8006e16 <_dtoa_r+0x8fe>
 8006d2e:	9b00      	ldr	r3, [sp, #0]
 8006d30:	f1c0 001c 	rsb	r0, r0, #28
 8006d34:	4403      	add	r3, r0
 8006d36:	9300      	str	r3, [sp, #0]
 8006d38:	9b06      	ldr	r3, [sp, #24]
 8006d3a:	4403      	add	r3, r0
 8006d3c:	4406      	add	r6, r0
 8006d3e:	9306      	str	r3, [sp, #24]
 8006d40:	9b00      	ldr	r3, [sp, #0]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	dd05      	ble.n	8006d52 <_dtoa_r+0x83a>
 8006d46:	9902      	ldr	r1, [sp, #8]
 8006d48:	461a      	mov	r2, r3
 8006d4a:	4648      	mov	r0, r9
 8006d4c:	f000 fcba 	bl	80076c4 <__lshift>
 8006d50:	9002      	str	r0, [sp, #8]
 8006d52:	9b06      	ldr	r3, [sp, #24]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	dd05      	ble.n	8006d64 <_dtoa_r+0x84c>
 8006d58:	4621      	mov	r1, r4
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	4648      	mov	r0, r9
 8006d5e:	f000 fcb1 	bl	80076c4 <__lshift>
 8006d62:	4604      	mov	r4, r0
 8006d64:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d061      	beq.n	8006e2e <_dtoa_r+0x916>
 8006d6a:	9802      	ldr	r0, [sp, #8]
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	f000 fd15 	bl	800779c <__mcmp>
 8006d72:	2800      	cmp	r0, #0
 8006d74:	da5b      	bge.n	8006e2e <_dtoa_r+0x916>
 8006d76:	2300      	movs	r3, #0
 8006d78:	9902      	ldr	r1, [sp, #8]
 8006d7a:	220a      	movs	r2, #10
 8006d7c:	4648      	mov	r0, r9
 8006d7e:	f000 fafd 	bl	800737c <__multadd>
 8006d82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d84:	9002      	str	r0, [sp, #8]
 8006d86:	f107 38ff 	add.w	r8, r7, #4294967295
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 8177 	beq.w	800707e <_dtoa_r+0xb66>
 8006d90:	4629      	mov	r1, r5
 8006d92:	2300      	movs	r3, #0
 8006d94:	220a      	movs	r2, #10
 8006d96:	4648      	mov	r0, r9
 8006d98:	f000 faf0 	bl	800737c <__multadd>
 8006d9c:	f1bb 0f00 	cmp.w	fp, #0
 8006da0:	4605      	mov	r5, r0
 8006da2:	dc6f      	bgt.n	8006e84 <_dtoa_r+0x96c>
 8006da4:	9b07      	ldr	r3, [sp, #28]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	dc49      	bgt.n	8006e3e <_dtoa_r+0x926>
 8006daa:	e06b      	b.n	8006e84 <_dtoa_r+0x96c>
 8006dac:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006dae:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006db2:	e73c      	b.n	8006c2e <_dtoa_r+0x716>
 8006db4:	3fe00000 	.word	0x3fe00000
 8006db8:	40240000 	.word	0x40240000
 8006dbc:	9b03      	ldr	r3, [sp, #12]
 8006dbe:	1e5c      	subs	r4, r3, #1
 8006dc0:	9b08      	ldr	r3, [sp, #32]
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	db09      	blt.n	8006dda <_dtoa_r+0x8c2>
 8006dc6:	1b1c      	subs	r4, r3, r4
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	f6bf af30 	bge.w	8006c30 <_dtoa_r+0x718>
 8006dd0:	9b00      	ldr	r3, [sp, #0]
 8006dd2:	9a03      	ldr	r2, [sp, #12]
 8006dd4:	1a9e      	subs	r6, r3, r2
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	e72b      	b.n	8006c32 <_dtoa_r+0x71a>
 8006dda:	9b08      	ldr	r3, [sp, #32]
 8006ddc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006dde:	9408      	str	r4, [sp, #32]
 8006de0:	1ae3      	subs	r3, r4, r3
 8006de2:	441a      	add	r2, r3
 8006de4:	9e00      	ldr	r6, [sp, #0]
 8006de6:	9b03      	ldr	r3, [sp, #12]
 8006de8:	920d      	str	r2, [sp, #52]	@ 0x34
 8006dea:	2400      	movs	r4, #0
 8006dec:	e721      	b.n	8006c32 <_dtoa_r+0x71a>
 8006dee:	9c08      	ldr	r4, [sp, #32]
 8006df0:	9e00      	ldr	r6, [sp, #0]
 8006df2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8006df4:	e728      	b.n	8006c48 <_dtoa_r+0x730>
 8006df6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006dfa:	e751      	b.n	8006ca0 <_dtoa_r+0x788>
 8006dfc:	9a08      	ldr	r2, [sp, #32]
 8006dfe:	9902      	ldr	r1, [sp, #8]
 8006e00:	e750      	b.n	8006ca4 <_dtoa_r+0x78c>
 8006e02:	f8cd 8008 	str.w	r8, [sp, #8]
 8006e06:	e751      	b.n	8006cac <_dtoa_r+0x794>
 8006e08:	2300      	movs	r3, #0
 8006e0a:	e779      	b.n	8006d00 <_dtoa_r+0x7e8>
 8006e0c:	9b04      	ldr	r3, [sp, #16]
 8006e0e:	e777      	b.n	8006d00 <_dtoa_r+0x7e8>
 8006e10:	2300      	movs	r3, #0
 8006e12:	9308      	str	r3, [sp, #32]
 8006e14:	e779      	b.n	8006d0a <_dtoa_r+0x7f2>
 8006e16:	d093      	beq.n	8006d40 <_dtoa_r+0x828>
 8006e18:	9a00      	ldr	r2, [sp, #0]
 8006e1a:	331c      	adds	r3, #28
 8006e1c:	441a      	add	r2, r3
 8006e1e:	9200      	str	r2, [sp, #0]
 8006e20:	9a06      	ldr	r2, [sp, #24]
 8006e22:	441a      	add	r2, r3
 8006e24:	441e      	add	r6, r3
 8006e26:	9206      	str	r2, [sp, #24]
 8006e28:	e78a      	b.n	8006d40 <_dtoa_r+0x828>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	e7f4      	b.n	8006e18 <_dtoa_r+0x900>
 8006e2e:	9b03      	ldr	r3, [sp, #12]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	46b8      	mov	r8, r7
 8006e34:	dc20      	bgt.n	8006e78 <_dtoa_r+0x960>
 8006e36:	469b      	mov	fp, r3
 8006e38:	9b07      	ldr	r3, [sp, #28]
 8006e3a:	2b02      	cmp	r3, #2
 8006e3c:	dd1e      	ble.n	8006e7c <_dtoa_r+0x964>
 8006e3e:	f1bb 0f00 	cmp.w	fp, #0
 8006e42:	f47f adb1 	bne.w	80069a8 <_dtoa_r+0x490>
 8006e46:	4621      	mov	r1, r4
 8006e48:	465b      	mov	r3, fp
 8006e4a:	2205      	movs	r2, #5
 8006e4c:	4648      	mov	r0, r9
 8006e4e:	f000 fa95 	bl	800737c <__multadd>
 8006e52:	4601      	mov	r1, r0
 8006e54:	4604      	mov	r4, r0
 8006e56:	9802      	ldr	r0, [sp, #8]
 8006e58:	f000 fca0 	bl	800779c <__mcmp>
 8006e5c:	2800      	cmp	r0, #0
 8006e5e:	f77f ada3 	ble.w	80069a8 <_dtoa_r+0x490>
 8006e62:	4656      	mov	r6, sl
 8006e64:	2331      	movs	r3, #49	@ 0x31
 8006e66:	f806 3b01 	strb.w	r3, [r6], #1
 8006e6a:	f108 0801 	add.w	r8, r8, #1
 8006e6e:	e59f      	b.n	80069b0 <_dtoa_r+0x498>
 8006e70:	9c03      	ldr	r4, [sp, #12]
 8006e72:	46b8      	mov	r8, r7
 8006e74:	4625      	mov	r5, r4
 8006e76:	e7f4      	b.n	8006e62 <_dtoa_r+0x94a>
 8006e78:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006e7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 8101 	beq.w	8007086 <_dtoa_r+0xb6e>
 8006e84:	2e00      	cmp	r6, #0
 8006e86:	dd05      	ble.n	8006e94 <_dtoa_r+0x97c>
 8006e88:	4629      	mov	r1, r5
 8006e8a:	4632      	mov	r2, r6
 8006e8c:	4648      	mov	r0, r9
 8006e8e:	f000 fc19 	bl	80076c4 <__lshift>
 8006e92:	4605      	mov	r5, r0
 8006e94:	9b08      	ldr	r3, [sp, #32]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d05c      	beq.n	8006f54 <_dtoa_r+0xa3c>
 8006e9a:	6869      	ldr	r1, [r5, #4]
 8006e9c:	4648      	mov	r0, r9
 8006e9e:	f000 fa0b 	bl	80072b8 <_Balloc>
 8006ea2:	4606      	mov	r6, r0
 8006ea4:	b928      	cbnz	r0, 8006eb2 <_dtoa_r+0x99a>
 8006ea6:	4b82      	ldr	r3, [pc, #520]	@ (80070b0 <_dtoa_r+0xb98>)
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006eae:	f7ff bb4a 	b.w	8006546 <_dtoa_r+0x2e>
 8006eb2:	692a      	ldr	r2, [r5, #16]
 8006eb4:	3202      	adds	r2, #2
 8006eb6:	0092      	lsls	r2, r2, #2
 8006eb8:	f105 010c 	add.w	r1, r5, #12
 8006ebc:	300c      	adds	r0, #12
 8006ebe:	f000 ffa3 	bl	8007e08 <memcpy>
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	4631      	mov	r1, r6
 8006ec6:	4648      	mov	r0, r9
 8006ec8:	f000 fbfc 	bl	80076c4 <__lshift>
 8006ecc:	f10a 0301 	add.w	r3, sl, #1
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	eb0a 030b 	add.w	r3, sl, fp
 8006ed6:	9308      	str	r3, [sp, #32]
 8006ed8:	9b04      	ldr	r3, [sp, #16]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	462f      	mov	r7, r5
 8006ee0:	9306      	str	r3, [sp, #24]
 8006ee2:	4605      	mov	r5, r0
 8006ee4:	9b00      	ldr	r3, [sp, #0]
 8006ee6:	9802      	ldr	r0, [sp, #8]
 8006ee8:	4621      	mov	r1, r4
 8006eea:	f103 3bff 	add.w	fp, r3, #4294967295
 8006eee:	f7ff fa8a 	bl	8006406 <quorem>
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	3330      	adds	r3, #48	@ 0x30
 8006ef6:	9003      	str	r0, [sp, #12]
 8006ef8:	4639      	mov	r1, r7
 8006efa:	9802      	ldr	r0, [sp, #8]
 8006efc:	9309      	str	r3, [sp, #36]	@ 0x24
 8006efe:	f000 fc4d 	bl	800779c <__mcmp>
 8006f02:	462a      	mov	r2, r5
 8006f04:	9004      	str	r0, [sp, #16]
 8006f06:	4621      	mov	r1, r4
 8006f08:	4648      	mov	r0, r9
 8006f0a:	f000 fc63 	bl	80077d4 <__mdiff>
 8006f0e:	68c2      	ldr	r2, [r0, #12]
 8006f10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f12:	4606      	mov	r6, r0
 8006f14:	bb02      	cbnz	r2, 8006f58 <_dtoa_r+0xa40>
 8006f16:	4601      	mov	r1, r0
 8006f18:	9802      	ldr	r0, [sp, #8]
 8006f1a:	f000 fc3f 	bl	800779c <__mcmp>
 8006f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f20:	4602      	mov	r2, r0
 8006f22:	4631      	mov	r1, r6
 8006f24:	4648      	mov	r0, r9
 8006f26:	920c      	str	r2, [sp, #48]	@ 0x30
 8006f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8006f2a:	f000 fa05 	bl	8007338 <_Bfree>
 8006f2e:	9b07      	ldr	r3, [sp, #28]
 8006f30:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006f32:	9e00      	ldr	r6, [sp, #0]
 8006f34:	ea42 0103 	orr.w	r1, r2, r3
 8006f38:	9b06      	ldr	r3, [sp, #24]
 8006f3a:	4319      	orrs	r1, r3
 8006f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f3e:	d10d      	bne.n	8006f5c <_dtoa_r+0xa44>
 8006f40:	2b39      	cmp	r3, #57	@ 0x39
 8006f42:	d027      	beq.n	8006f94 <_dtoa_r+0xa7c>
 8006f44:	9a04      	ldr	r2, [sp, #16]
 8006f46:	2a00      	cmp	r2, #0
 8006f48:	dd01      	ble.n	8006f4e <_dtoa_r+0xa36>
 8006f4a:	9b03      	ldr	r3, [sp, #12]
 8006f4c:	3331      	adds	r3, #49	@ 0x31
 8006f4e:	f88b 3000 	strb.w	r3, [fp]
 8006f52:	e52e      	b.n	80069b2 <_dtoa_r+0x49a>
 8006f54:	4628      	mov	r0, r5
 8006f56:	e7b9      	b.n	8006ecc <_dtoa_r+0x9b4>
 8006f58:	2201      	movs	r2, #1
 8006f5a:	e7e2      	b.n	8006f22 <_dtoa_r+0xa0a>
 8006f5c:	9904      	ldr	r1, [sp, #16]
 8006f5e:	2900      	cmp	r1, #0
 8006f60:	db04      	blt.n	8006f6c <_dtoa_r+0xa54>
 8006f62:	9807      	ldr	r0, [sp, #28]
 8006f64:	4301      	orrs	r1, r0
 8006f66:	9806      	ldr	r0, [sp, #24]
 8006f68:	4301      	orrs	r1, r0
 8006f6a:	d120      	bne.n	8006fae <_dtoa_r+0xa96>
 8006f6c:	2a00      	cmp	r2, #0
 8006f6e:	ddee      	ble.n	8006f4e <_dtoa_r+0xa36>
 8006f70:	9902      	ldr	r1, [sp, #8]
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	2201      	movs	r2, #1
 8006f76:	4648      	mov	r0, r9
 8006f78:	f000 fba4 	bl	80076c4 <__lshift>
 8006f7c:	4621      	mov	r1, r4
 8006f7e:	9002      	str	r0, [sp, #8]
 8006f80:	f000 fc0c 	bl	800779c <__mcmp>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	9b00      	ldr	r3, [sp, #0]
 8006f88:	dc02      	bgt.n	8006f90 <_dtoa_r+0xa78>
 8006f8a:	d1e0      	bne.n	8006f4e <_dtoa_r+0xa36>
 8006f8c:	07da      	lsls	r2, r3, #31
 8006f8e:	d5de      	bpl.n	8006f4e <_dtoa_r+0xa36>
 8006f90:	2b39      	cmp	r3, #57	@ 0x39
 8006f92:	d1da      	bne.n	8006f4a <_dtoa_r+0xa32>
 8006f94:	2339      	movs	r3, #57	@ 0x39
 8006f96:	f88b 3000 	strb.w	r3, [fp]
 8006f9a:	4633      	mov	r3, r6
 8006f9c:	461e      	mov	r6, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006fa4:	2a39      	cmp	r2, #57	@ 0x39
 8006fa6:	d04e      	beq.n	8007046 <_dtoa_r+0xb2e>
 8006fa8:	3201      	adds	r2, #1
 8006faa:	701a      	strb	r2, [r3, #0]
 8006fac:	e501      	b.n	80069b2 <_dtoa_r+0x49a>
 8006fae:	2a00      	cmp	r2, #0
 8006fb0:	dd03      	ble.n	8006fba <_dtoa_r+0xaa2>
 8006fb2:	2b39      	cmp	r3, #57	@ 0x39
 8006fb4:	d0ee      	beq.n	8006f94 <_dtoa_r+0xa7c>
 8006fb6:	3301      	adds	r3, #1
 8006fb8:	e7c9      	b.n	8006f4e <_dtoa_r+0xa36>
 8006fba:	9a00      	ldr	r2, [sp, #0]
 8006fbc:	9908      	ldr	r1, [sp, #32]
 8006fbe:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006fc2:	428a      	cmp	r2, r1
 8006fc4:	d028      	beq.n	8007018 <_dtoa_r+0xb00>
 8006fc6:	9902      	ldr	r1, [sp, #8]
 8006fc8:	2300      	movs	r3, #0
 8006fca:	220a      	movs	r2, #10
 8006fcc:	4648      	mov	r0, r9
 8006fce:	f000 f9d5 	bl	800737c <__multadd>
 8006fd2:	42af      	cmp	r7, r5
 8006fd4:	9002      	str	r0, [sp, #8]
 8006fd6:	f04f 0300 	mov.w	r3, #0
 8006fda:	f04f 020a 	mov.w	r2, #10
 8006fde:	4639      	mov	r1, r7
 8006fe0:	4648      	mov	r0, r9
 8006fe2:	d107      	bne.n	8006ff4 <_dtoa_r+0xadc>
 8006fe4:	f000 f9ca 	bl	800737c <__multadd>
 8006fe8:	4607      	mov	r7, r0
 8006fea:	4605      	mov	r5, r0
 8006fec:	9b00      	ldr	r3, [sp, #0]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	9300      	str	r3, [sp, #0]
 8006ff2:	e777      	b.n	8006ee4 <_dtoa_r+0x9cc>
 8006ff4:	f000 f9c2 	bl	800737c <__multadd>
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4607      	mov	r7, r0
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	220a      	movs	r2, #10
 8007000:	4648      	mov	r0, r9
 8007002:	f000 f9bb 	bl	800737c <__multadd>
 8007006:	4605      	mov	r5, r0
 8007008:	e7f0      	b.n	8006fec <_dtoa_r+0xad4>
 800700a:	f1bb 0f00 	cmp.w	fp, #0
 800700e:	bfcc      	ite	gt
 8007010:	465e      	movgt	r6, fp
 8007012:	2601      	movle	r6, #1
 8007014:	4456      	add	r6, sl
 8007016:	2700      	movs	r7, #0
 8007018:	9902      	ldr	r1, [sp, #8]
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2201      	movs	r2, #1
 800701e:	4648      	mov	r0, r9
 8007020:	f000 fb50 	bl	80076c4 <__lshift>
 8007024:	4621      	mov	r1, r4
 8007026:	9002      	str	r0, [sp, #8]
 8007028:	f000 fbb8 	bl	800779c <__mcmp>
 800702c:	2800      	cmp	r0, #0
 800702e:	dcb4      	bgt.n	8006f9a <_dtoa_r+0xa82>
 8007030:	d102      	bne.n	8007038 <_dtoa_r+0xb20>
 8007032:	9b00      	ldr	r3, [sp, #0]
 8007034:	07db      	lsls	r3, r3, #31
 8007036:	d4b0      	bmi.n	8006f9a <_dtoa_r+0xa82>
 8007038:	4633      	mov	r3, r6
 800703a:	461e      	mov	r6, r3
 800703c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007040:	2a30      	cmp	r2, #48	@ 0x30
 8007042:	d0fa      	beq.n	800703a <_dtoa_r+0xb22>
 8007044:	e4b5      	b.n	80069b2 <_dtoa_r+0x49a>
 8007046:	459a      	cmp	sl, r3
 8007048:	d1a8      	bne.n	8006f9c <_dtoa_r+0xa84>
 800704a:	2331      	movs	r3, #49	@ 0x31
 800704c:	f108 0801 	add.w	r8, r8, #1
 8007050:	f88a 3000 	strb.w	r3, [sl]
 8007054:	e4ad      	b.n	80069b2 <_dtoa_r+0x49a>
 8007056:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007058:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80070b4 <_dtoa_r+0xb9c>
 800705c:	b11b      	cbz	r3, 8007066 <_dtoa_r+0xb4e>
 800705e:	f10a 0308 	add.w	r3, sl, #8
 8007062:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007064:	6013      	str	r3, [r2, #0]
 8007066:	4650      	mov	r0, sl
 8007068:	b017      	add	sp, #92	@ 0x5c
 800706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706e:	9b07      	ldr	r3, [sp, #28]
 8007070:	2b01      	cmp	r3, #1
 8007072:	f77f ae2e 	ble.w	8006cd2 <_dtoa_r+0x7ba>
 8007076:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007078:	9308      	str	r3, [sp, #32]
 800707a:	2001      	movs	r0, #1
 800707c:	e64d      	b.n	8006d1a <_dtoa_r+0x802>
 800707e:	f1bb 0f00 	cmp.w	fp, #0
 8007082:	f77f aed9 	ble.w	8006e38 <_dtoa_r+0x920>
 8007086:	4656      	mov	r6, sl
 8007088:	9802      	ldr	r0, [sp, #8]
 800708a:	4621      	mov	r1, r4
 800708c:	f7ff f9bb 	bl	8006406 <quorem>
 8007090:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007094:	f806 3b01 	strb.w	r3, [r6], #1
 8007098:	eba6 020a 	sub.w	r2, r6, sl
 800709c:	4593      	cmp	fp, r2
 800709e:	ddb4      	ble.n	800700a <_dtoa_r+0xaf2>
 80070a0:	9902      	ldr	r1, [sp, #8]
 80070a2:	2300      	movs	r3, #0
 80070a4:	220a      	movs	r2, #10
 80070a6:	4648      	mov	r0, r9
 80070a8:	f000 f968 	bl	800737c <__multadd>
 80070ac:	9002      	str	r0, [sp, #8]
 80070ae:	e7eb      	b.n	8007088 <_dtoa_r+0xb70>
 80070b0:	080085cc 	.word	0x080085cc
 80070b4:	08008550 	.word	0x08008550

080070b8 <_free_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4605      	mov	r5, r0
 80070bc:	2900      	cmp	r1, #0
 80070be:	d041      	beq.n	8007144 <_free_r+0x8c>
 80070c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c4:	1f0c      	subs	r4, r1, #4
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	bfb8      	it	lt
 80070ca:	18e4      	addlt	r4, r4, r3
 80070cc:	f000 f8e8 	bl	80072a0 <__malloc_lock>
 80070d0:	4a1d      	ldr	r2, [pc, #116]	@ (8007148 <_free_r+0x90>)
 80070d2:	6813      	ldr	r3, [r2, #0]
 80070d4:	b933      	cbnz	r3, 80070e4 <_free_r+0x2c>
 80070d6:	6063      	str	r3, [r4, #4]
 80070d8:	6014      	str	r4, [r2, #0]
 80070da:	4628      	mov	r0, r5
 80070dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070e0:	f000 b8e4 	b.w	80072ac <__malloc_unlock>
 80070e4:	42a3      	cmp	r3, r4
 80070e6:	d908      	bls.n	80070fa <_free_r+0x42>
 80070e8:	6820      	ldr	r0, [r4, #0]
 80070ea:	1821      	adds	r1, r4, r0
 80070ec:	428b      	cmp	r3, r1
 80070ee:	bf01      	itttt	eq
 80070f0:	6819      	ldreq	r1, [r3, #0]
 80070f2:	685b      	ldreq	r3, [r3, #4]
 80070f4:	1809      	addeq	r1, r1, r0
 80070f6:	6021      	streq	r1, [r4, #0]
 80070f8:	e7ed      	b.n	80070d6 <_free_r+0x1e>
 80070fa:	461a      	mov	r2, r3
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	b10b      	cbz	r3, 8007104 <_free_r+0x4c>
 8007100:	42a3      	cmp	r3, r4
 8007102:	d9fa      	bls.n	80070fa <_free_r+0x42>
 8007104:	6811      	ldr	r1, [r2, #0]
 8007106:	1850      	adds	r0, r2, r1
 8007108:	42a0      	cmp	r0, r4
 800710a:	d10b      	bne.n	8007124 <_free_r+0x6c>
 800710c:	6820      	ldr	r0, [r4, #0]
 800710e:	4401      	add	r1, r0
 8007110:	1850      	adds	r0, r2, r1
 8007112:	4283      	cmp	r3, r0
 8007114:	6011      	str	r1, [r2, #0]
 8007116:	d1e0      	bne.n	80070da <_free_r+0x22>
 8007118:	6818      	ldr	r0, [r3, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	6053      	str	r3, [r2, #4]
 800711e:	4408      	add	r0, r1
 8007120:	6010      	str	r0, [r2, #0]
 8007122:	e7da      	b.n	80070da <_free_r+0x22>
 8007124:	d902      	bls.n	800712c <_free_r+0x74>
 8007126:	230c      	movs	r3, #12
 8007128:	602b      	str	r3, [r5, #0]
 800712a:	e7d6      	b.n	80070da <_free_r+0x22>
 800712c:	6820      	ldr	r0, [r4, #0]
 800712e:	1821      	adds	r1, r4, r0
 8007130:	428b      	cmp	r3, r1
 8007132:	bf04      	itt	eq
 8007134:	6819      	ldreq	r1, [r3, #0]
 8007136:	685b      	ldreq	r3, [r3, #4]
 8007138:	6063      	str	r3, [r4, #4]
 800713a:	bf04      	itt	eq
 800713c:	1809      	addeq	r1, r1, r0
 800713e:	6021      	streq	r1, [r4, #0]
 8007140:	6054      	str	r4, [r2, #4]
 8007142:	e7ca      	b.n	80070da <_free_r+0x22>
 8007144:	bd38      	pop	{r3, r4, r5, pc}
 8007146:	bf00      	nop
 8007148:	2000047c 	.word	0x2000047c

0800714c <malloc>:
 800714c:	4b02      	ldr	r3, [pc, #8]	@ (8007158 <malloc+0xc>)
 800714e:	4601      	mov	r1, r0
 8007150:	6818      	ldr	r0, [r3, #0]
 8007152:	f000 b825 	b.w	80071a0 <_malloc_r>
 8007156:	bf00      	nop
 8007158:	20000018 	.word	0x20000018

0800715c <sbrk_aligned>:
 800715c:	b570      	push	{r4, r5, r6, lr}
 800715e:	4e0f      	ldr	r6, [pc, #60]	@ (800719c <sbrk_aligned+0x40>)
 8007160:	460c      	mov	r4, r1
 8007162:	6831      	ldr	r1, [r6, #0]
 8007164:	4605      	mov	r5, r0
 8007166:	b911      	cbnz	r1, 800716e <sbrk_aligned+0x12>
 8007168:	f000 fe3e 	bl	8007de8 <_sbrk_r>
 800716c:	6030      	str	r0, [r6, #0]
 800716e:	4621      	mov	r1, r4
 8007170:	4628      	mov	r0, r5
 8007172:	f000 fe39 	bl	8007de8 <_sbrk_r>
 8007176:	1c43      	adds	r3, r0, #1
 8007178:	d103      	bne.n	8007182 <sbrk_aligned+0x26>
 800717a:	f04f 34ff 	mov.w	r4, #4294967295
 800717e:	4620      	mov	r0, r4
 8007180:	bd70      	pop	{r4, r5, r6, pc}
 8007182:	1cc4      	adds	r4, r0, #3
 8007184:	f024 0403 	bic.w	r4, r4, #3
 8007188:	42a0      	cmp	r0, r4
 800718a:	d0f8      	beq.n	800717e <sbrk_aligned+0x22>
 800718c:	1a21      	subs	r1, r4, r0
 800718e:	4628      	mov	r0, r5
 8007190:	f000 fe2a 	bl	8007de8 <_sbrk_r>
 8007194:	3001      	adds	r0, #1
 8007196:	d1f2      	bne.n	800717e <sbrk_aligned+0x22>
 8007198:	e7ef      	b.n	800717a <sbrk_aligned+0x1e>
 800719a:	bf00      	nop
 800719c:	20000478 	.word	0x20000478

080071a0 <_malloc_r>:
 80071a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a4:	1ccd      	adds	r5, r1, #3
 80071a6:	f025 0503 	bic.w	r5, r5, #3
 80071aa:	3508      	adds	r5, #8
 80071ac:	2d0c      	cmp	r5, #12
 80071ae:	bf38      	it	cc
 80071b0:	250c      	movcc	r5, #12
 80071b2:	2d00      	cmp	r5, #0
 80071b4:	4606      	mov	r6, r0
 80071b6:	db01      	blt.n	80071bc <_malloc_r+0x1c>
 80071b8:	42a9      	cmp	r1, r5
 80071ba:	d904      	bls.n	80071c6 <_malloc_r+0x26>
 80071bc:	230c      	movs	r3, #12
 80071be:	6033      	str	r3, [r6, #0]
 80071c0:	2000      	movs	r0, #0
 80071c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800729c <_malloc_r+0xfc>
 80071ca:	f000 f869 	bl	80072a0 <__malloc_lock>
 80071ce:	f8d8 3000 	ldr.w	r3, [r8]
 80071d2:	461c      	mov	r4, r3
 80071d4:	bb44      	cbnz	r4, 8007228 <_malloc_r+0x88>
 80071d6:	4629      	mov	r1, r5
 80071d8:	4630      	mov	r0, r6
 80071da:	f7ff ffbf 	bl	800715c <sbrk_aligned>
 80071de:	1c43      	adds	r3, r0, #1
 80071e0:	4604      	mov	r4, r0
 80071e2:	d158      	bne.n	8007296 <_malloc_r+0xf6>
 80071e4:	f8d8 4000 	ldr.w	r4, [r8]
 80071e8:	4627      	mov	r7, r4
 80071ea:	2f00      	cmp	r7, #0
 80071ec:	d143      	bne.n	8007276 <_malloc_r+0xd6>
 80071ee:	2c00      	cmp	r4, #0
 80071f0:	d04b      	beq.n	800728a <_malloc_r+0xea>
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	4639      	mov	r1, r7
 80071f6:	4630      	mov	r0, r6
 80071f8:	eb04 0903 	add.w	r9, r4, r3
 80071fc:	f000 fdf4 	bl	8007de8 <_sbrk_r>
 8007200:	4581      	cmp	r9, r0
 8007202:	d142      	bne.n	800728a <_malloc_r+0xea>
 8007204:	6821      	ldr	r1, [r4, #0]
 8007206:	1a6d      	subs	r5, r5, r1
 8007208:	4629      	mov	r1, r5
 800720a:	4630      	mov	r0, r6
 800720c:	f7ff ffa6 	bl	800715c <sbrk_aligned>
 8007210:	3001      	adds	r0, #1
 8007212:	d03a      	beq.n	800728a <_malloc_r+0xea>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	442b      	add	r3, r5
 8007218:	6023      	str	r3, [r4, #0]
 800721a:	f8d8 3000 	ldr.w	r3, [r8]
 800721e:	685a      	ldr	r2, [r3, #4]
 8007220:	bb62      	cbnz	r2, 800727c <_malloc_r+0xdc>
 8007222:	f8c8 7000 	str.w	r7, [r8]
 8007226:	e00f      	b.n	8007248 <_malloc_r+0xa8>
 8007228:	6822      	ldr	r2, [r4, #0]
 800722a:	1b52      	subs	r2, r2, r5
 800722c:	d420      	bmi.n	8007270 <_malloc_r+0xd0>
 800722e:	2a0b      	cmp	r2, #11
 8007230:	d917      	bls.n	8007262 <_malloc_r+0xc2>
 8007232:	1961      	adds	r1, r4, r5
 8007234:	42a3      	cmp	r3, r4
 8007236:	6025      	str	r5, [r4, #0]
 8007238:	bf18      	it	ne
 800723a:	6059      	strne	r1, [r3, #4]
 800723c:	6863      	ldr	r3, [r4, #4]
 800723e:	bf08      	it	eq
 8007240:	f8c8 1000 	streq.w	r1, [r8]
 8007244:	5162      	str	r2, [r4, r5]
 8007246:	604b      	str	r3, [r1, #4]
 8007248:	4630      	mov	r0, r6
 800724a:	f000 f82f 	bl	80072ac <__malloc_unlock>
 800724e:	f104 000b 	add.w	r0, r4, #11
 8007252:	1d23      	adds	r3, r4, #4
 8007254:	f020 0007 	bic.w	r0, r0, #7
 8007258:	1ac2      	subs	r2, r0, r3
 800725a:	bf1c      	itt	ne
 800725c:	1a1b      	subne	r3, r3, r0
 800725e:	50a3      	strne	r3, [r4, r2]
 8007260:	e7af      	b.n	80071c2 <_malloc_r+0x22>
 8007262:	6862      	ldr	r2, [r4, #4]
 8007264:	42a3      	cmp	r3, r4
 8007266:	bf0c      	ite	eq
 8007268:	f8c8 2000 	streq.w	r2, [r8]
 800726c:	605a      	strne	r2, [r3, #4]
 800726e:	e7eb      	b.n	8007248 <_malloc_r+0xa8>
 8007270:	4623      	mov	r3, r4
 8007272:	6864      	ldr	r4, [r4, #4]
 8007274:	e7ae      	b.n	80071d4 <_malloc_r+0x34>
 8007276:	463c      	mov	r4, r7
 8007278:	687f      	ldr	r7, [r7, #4]
 800727a:	e7b6      	b.n	80071ea <_malloc_r+0x4a>
 800727c:	461a      	mov	r2, r3
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	42a3      	cmp	r3, r4
 8007282:	d1fb      	bne.n	800727c <_malloc_r+0xdc>
 8007284:	2300      	movs	r3, #0
 8007286:	6053      	str	r3, [r2, #4]
 8007288:	e7de      	b.n	8007248 <_malloc_r+0xa8>
 800728a:	230c      	movs	r3, #12
 800728c:	6033      	str	r3, [r6, #0]
 800728e:	4630      	mov	r0, r6
 8007290:	f000 f80c 	bl	80072ac <__malloc_unlock>
 8007294:	e794      	b.n	80071c0 <_malloc_r+0x20>
 8007296:	6005      	str	r5, [r0, #0]
 8007298:	e7d6      	b.n	8007248 <_malloc_r+0xa8>
 800729a:	bf00      	nop
 800729c:	2000047c 	.word	0x2000047c

080072a0 <__malloc_lock>:
 80072a0:	4801      	ldr	r0, [pc, #4]	@ (80072a8 <__malloc_lock+0x8>)
 80072a2:	f7ff b8ae 	b.w	8006402 <__retarget_lock_acquire_recursive>
 80072a6:	bf00      	nop
 80072a8:	20000474 	.word	0x20000474

080072ac <__malloc_unlock>:
 80072ac:	4801      	ldr	r0, [pc, #4]	@ (80072b4 <__malloc_unlock+0x8>)
 80072ae:	f7ff b8a9 	b.w	8006404 <__retarget_lock_release_recursive>
 80072b2:	bf00      	nop
 80072b4:	20000474 	.word	0x20000474

080072b8 <_Balloc>:
 80072b8:	b570      	push	{r4, r5, r6, lr}
 80072ba:	69c6      	ldr	r6, [r0, #28]
 80072bc:	4604      	mov	r4, r0
 80072be:	460d      	mov	r5, r1
 80072c0:	b976      	cbnz	r6, 80072e0 <_Balloc+0x28>
 80072c2:	2010      	movs	r0, #16
 80072c4:	f7ff ff42 	bl	800714c <malloc>
 80072c8:	4602      	mov	r2, r0
 80072ca:	61e0      	str	r0, [r4, #28]
 80072cc:	b920      	cbnz	r0, 80072d8 <_Balloc+0x20>
 80072ce:	4b18      	ldr	r3, [pc, #96]	@ (8007330 <_Balloc+0x78>)
 80072d0:	4818      	ldr	r0, [pc, #96]	@ (8007334 <_Balloc+0x7c>)
 80072d2:	216b      	movs	r1, #107	@ 0x6b
 80072d4:	f000 fda6 	bl	8007e24 <__assert_func>
 80072d8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80072dc:	6006      	str	r6, [r0, #0]
 80072de:	60c6      	str	r6, [r0, #12]
 80072e0:	69e6      	ldr	r6, [r4, #28]
 80072e2:	68f3      	ldr	r3, [r6, #12]
 80072e4:	b183      	cbz	r3, 8007308 <_Balloc+0x50>
 80072e6:	69e3      	ldr	r3, [r4, #28]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80072ee:	b9b8      	cbnz	r0, 8007320 <_Balloc+0x68>
 80072f0:	2101      	movs	r1, #1
 80072f2:	fa01 f605 	lsl.w	r6, r1, r5
 80072f6:	1d72      	adds	r2, r6, #5
 80072f8:	0092      	lsls	r2, r2, #2
 80072fa:	4620      	mov	r0, r4
 80072fc:	f000 fdb0 	bl	8007e60 <_calloc_r>
 8007300:	b160      	cbz	r0, 800731c <_Balloc+0x64>
 8007302:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007306:	e00e      	b.n	8007326 <_Balloc+0x6e>
 8007308:	2221      	movs	r2, #33	@ 0x21
 800730a:	2104      	movs	r1, #4
 800730c:	4620      	mov	r0, r4
 800730e:	f000 fda7 	bl	8007e60 <_calloc_r>
 8007312:	69e3      	ldr	r3, [r4, #28]
 8007314:	60f0      	str	r0, [r6, #12]
 8007316:	68db      	ldr	r3, [r3, #12]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1e4      	bne.n	80072e6 <_Balloc+0x2e>
 800731c:	2000      	movs	r0, #0
 800731e:	bd70      	pop	{r4, r5, r6, pc}
 8007320:	6802      	ldr	r2, [r0, #0]
 8007322:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007326:	2300      	movs	r3, #0
 8007328:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800732c:	e7f7      	b.n	800731e <_Balloc+0x66>
 800732e:	bf00      	nop
 8007330:	0800855d 	.word	0x0800855d
 8007334:	080085dd 	.word	0x080085dd

08007338 <_Bfree>:
 8007338:	b570      	push	{r4, r5, r6, lr}
 800733a:	69c6      	ldr	r6, [r0, #28]
 800733c:	4605      	mov	r5, r0
 800733e:	460c      	mov	r4, r1
 8007340:	b976      	cbnz	r6, 8007360 <_Bfree+0x28>
 8007342:	2010      	movs	r0, #16
 8007344:	f7ff ff02 	bl	800714c <malloc>
 8007348:	4602      	mov	r2, r0
 800734a:	61e8      	str	r0, [r5, #28]
 800734c:	b920      	cbnz	r0, 8007358 <_Bfree+0x20>
 800734e:	4b09      	ldr	r3, [pc, #36]	@ (8007374 <_Bfree+0x3c>)
 8007350:	4809      	ldr	r0, [pc, #36]	@ (8007378 <_Bfree+0x40>)
 8007352:	218f      	movs	r1, #143	@ 0x8f
 8007354:	f000 fd66 	bl	8007e24 <__assert_func>
 8007358:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800735c:	6006      	str	r6, [r0, #0]
 800735e:	60c6      	str	r6, [r0, #12]
 8007360:	b13c      	cbz	r4, 8007372 <_Bfree+0x3a>
 8007362:	69eb      	ldr	r3, [r5, #28]
 8007364:	6862      	ldr	r2, [r4, #4]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800736c:	6021      	str	r1, [r4, #0]
 800736e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007372:	bd70      	pop	{r4, r5, r6, pc}
 8007374:	0800855d 	.word	0x0800855d
 8007378:	080085dd 	.word	0x080085dd

0800737c <__multadd>:
 800737c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007380:	690d      	ldr	r5, [r1, #16]
 8007382:	4607      	mov	r7, r0
 8007384:	460c      	mov	r4, r1
 8007386:	461e      	mov	r6, r3
 8007388:	f101 0c14 	add.w	ip, r1, #20
 800738c:	2000      	movs	r0, #0
 800738e:	f8dc 3000 	ldr.w	r3, [ip]
 8007392:	b299      	uxth	r1, r3
 8007394:	fb02 6101 	mla	r1, r2, r1, r6
 8007398:	0c1e      	lsrs	r6, r3, #16
 800739a:	0c0b      	lsrs	r3, r1, #16
 800739c:	fb02 3306 	mla	r3, r2, r6, r3
 80073a0:	b289      	uxth	r1, r1
 80073a2:	3001      	adds	r0, #1
 80073a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80073a8:	4285      	cmp	r5, r0
 80073aa:	f84c 1b04 	str.w	r1, [ip], #4
 80073ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80073b2:	dcec      	bgt.n	800738e <__multadd+0x12>
 80073b4:	b30e      	cbz	r6, 80073fa <__multadd+0x7e>
 80073b6:	68a3      	ldr	r3, [r4, #8]
 80073b8:	42ab      	cmp	r3, r5
 80073ba:	dc19      	bgt.n	80073f0 <__multadd+0x74>
 80073bc:	6861      	ldr	r1, [r4, #4]
 80073be:	4638      	mov	r0, r7
 80073c0:	3101      	adds	r1, #1
 80073c2:	f7ff ff79 	bl	80072b8 <_Balloc>
 80073c6:	4680      	mov	r8, r0
 80073c8:	b928      	cbnz	r0, 80073d6 <__multadd+0x5a>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b0c      	ldr	r3, [pc, #48]	@ (8007400 <__multadd+0x84>)
 80073ce:	480d      	ldr	r0, [pc, #52]	@ (8007404 <__multadd+0x88>)
 80073d0:	21ba      	movs	r1, #186	@ 0xba
 80073d2:	f000 fd27 	bl	8007e24 <__assert_func>
 80073d6:	6922      	ldr	r2, [r4, #16]
 80073d8:	3202      	adds	r2, #2
 80073da:	f104 010c 	add.w	r1, r4, #12
 80073de:	0092      	lsls	r2, r2, #2
 80073e0:	300c      	adds	r0, #12
 80073e2:	f000 fd11 	bl	8007e08 <memcpy>
 80073e6:	4621      	mov	r1, r4
 80073e8:	4638      	mov	r0, r7
 80073ea:	f7ff ffa5 	bl	8007338 <_Bfree>
 80073ee:	4644      	mov	r4, r8
 80073f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80073f4:	3501      	adds	r5, #1
 80073f6:	615e      	str	r6, [r3, #20]
 80073f8:	6125      	str	r5, [r4, #16]
 80073fa:	4620      	mov	r0, r4
 80073fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007400:	080085cc 	.word	0x080085cc
 8007404:	080085dd 	.word	0x080085dd

08007408 <__hi0bits>:
 8007408:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800740c:	4603      	mov	r3, r0
 800740e:	bf36      	itet	cc
 8007410:	0403      	lslcc	r3, r0, #16
 8007412:	2000      	movcs	r0, #0
 8007414:	2010      	movcc	r0, #16
 8007416:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800741a:	bf3c      	itt	cc
 800741c:	021b      	lslcc	r3, r3, #8
 800741e:	3008      	addcc	r0, #8
 8007420:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007424:	bf3c      	itt	cc
 8007426:	011b      	lslcc	r3, r3, #4
 8007428:	3004      	addcc	r0, #4
 800742a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800742e:	bf3c      	itt	cc
 8007430:	009b      	lslcc	r3, r3, #2
 8007432:	3002      	addcc	r0, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	db05      	blt.n	8007444 <__hi0bits+0x3c>
 8007438:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800743c:	f100 0001 	add.w	r0, r0, #1
 8007440:	bf08      	it	eq
 8007442:	2020      	moveq	r0, #32
 8007444:	4770      	bx	lr

08007446 <__lo0bits>:
 8007446:	6803      	ldr	r3, [r0, #0]
 8007448:	4602      	mov	r2, r0
 800744a:	f013 0007 	ands.w	r0, r3, #7
 800744e:	d00b      	beq.n	8007468 <__lo0bits+0x22>
 8007450:	07d9      	lsls	r1, r3, #31
 8007452:	d421      	bmi.n	8007498 <__lo0bits+0x52>
 8007454:	0798      	lsls	r0, r3, #30
 8007456:	bf49      	itett	mi
 8007458:	085b      	lsrmi	r3, r3, #1
 800745a:	089b      	lsrpl	r3, r3, #2
 800745c:	2001      	movmi	r0, #1
 800745e:	6013      	strmi	r3, [r2, #0]
 8007460:	bf5c      	itt	pl
 8007462:	6013      	strpl	r3, [r2, #0]
 8007464:	2002      	movpl	r0, #2
 8007466:	4770      	bx	lr
 8007468:	b299      	uxth	r1, r3
 800746a:	b909      	cbnz	r1, 8007470 <__lo0bits+0x2a>
 800746c:	0c1b      	lsrs	r3, r3, #16
 800746e:	2010      	movs	r0, #16
 8007470:	b2d9      	uxtb	r1, r3
 8007472:	b909      	cbnz	r1, 8007478 <__lo0bits+0x32>
 8007474:	3008      	adds	r0, #8
 8007476:	0a1b      	lsrs	r3, r3, #8
 8007478:	0719      	lsls	r1, r3, #28
 800747a:	bf04      	itt	eq
 800747c:	091b      	lsreq	r3, r3, #4
 800747e:	3004      	addeq	r0, #4
 8007480:	0799      	lsls	r1, r3, #30
 8007482:	bf04      	itt	eq
 8007484:	089b      	lsreq	r3, r3, #2
 8007486:	3002      	addeq	r0, #2
 8007488:	07d9      	lsls	r1, r3, #31
 800748a:	d403      	bmi.n	8007494 <__lo0bits+0x4e>
 800748c:	085b      	lsrs	r3, r3, #1
 800748e:	f100 0001 	add.w	r0, r0, #1
 8007492:	d003      	beq.n	800749c <__lo0bits+0x56>
 8007494:	6013      	str	r3, [r2, #0]
 8007496:	4770      	bx	lr
 8007498:	2000      	movs	r0, #0
 800749a:	4770      	bx	lr
 800749c:	2020      	movs	r0, #32
 800749e:	4770      	bx	lr

080074a0 <__i2b>:
 80074a0:	b510      	push	{r4, lr}
 80074a2:	460c      	mov	r4, r1
 80074a4:	2101      	movs	r1, #1
 80074a6:	f7ff ff07 	bl	80072b8 <_Balloc>
 80074aa:	4602      	mov	r2, r0
 80074ac:	b928      	cbnz	r0, 80074ba <__i2b+0x1a>
 80074ae:	4b05      	ldr	r3, [pc, #20]	@ (80074c4 <__i2b+0x24>)
 80074b0:	4805      	ldr	r0, [pc, #20]	@ (80074c8 <__i2b+0x28>)
 80074b2:	f240 1145 	movw	r1, #325	@ 0x145
 80074b6:	f000 fcb5 	bl	8007e24 <__assert_func>
 80074ba:	2301      	movs	r3, #1
 80074bc:	6144      	str	r4, [r0, #20]
 80074be:	6103      	str	r3, [r0, #16]
 80074c0:	bd10      	pop	{r4, pc}
 80074c2:	bf00      	nop
 80074c4:	080085cc 	.word	0x080085cc
 80074c8:	080085dd 	.word	0x080085dd

080074cc <__multiply>:
 80074cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d0:	4617      	mov	r7, r2
 80074d2:	690a      	ldr	r2, [r1, #16]
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	429a      	cmp	r2, r3
 80074d8:	bfa8      	it	ge
 80074da:	463b      	movge	r3, r7
 80074dc:	4689      	mov	r9, r1
 80074de:	bfa4      	itt	ge
 80074e0:	460f      	movge	r7, r1
 80074e2:	4699      	movge	r9, r3
 80074e4:	693d      	ldr	r5, [r7, #16]
 80074e6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6879      	ldr	r1, [r7, #4]
 80074ee:	eb05 060a 	add.w	r6, r5, sl
 80074f2:	42b3      	cmp	r3, r6
 80074f4:	b085      	sub	sp, #20
 80074f6:	bfb8      	it	lt
 80074f8:	3101      	addlt	r1, #1
 80074fa:	f7ff fedd 	bl	80072b8 <_Balloc>
 80074fe:	b930      	cbnz	r0, 800750e <__multiply+0x42>
 8007500:	4602      	mov	r2, r0
 8007502:	4b41      	ldr	r3, [pc, #260]	@ (8007608 <__multiply+0x13c>)
 8007504:	4841      	ldr	r0, [pc, #260]	@ (800760c <__multiply+0x140>)
 8007506:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800750a:	f000 fc8b 	bl	8007e24 <__assert_func>
 800750e:	f100 0414 	add.w	r4, r0, #20
 8007512:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8007516:	4623      	mov	r3, r4
 8007518:	2200      	movs	r2, #0
 800751a:	4573      	cmp	r3, lr
 800751c:	d320      	bcc.n	8007560 <__multiply+0x94>
 800751e:	f107 0814 	add.w	r8, r7, #20
 8007522:	f109 0114 	add.w	r1, r9, #20
 8007526:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800752a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800752e:	9302      	str	r3, [sp, #8]
 8007530:	1beb      	subs	r3, r5, r7
 8007532:	3b15      	subs	r3, #21
 8007534:	f023 0303 	bic.w	r3, r3, #3
 8007538:	3304      	adds	r3, #4
 800753a:	3715      	adds	r7, #21
 800753c:	42bd      	cmp	r5, r7
 800753e:	bf38      	it	cc
 8007540:	2304      	movcc	r3, #4
 8007542:	9301      	str	r3, [sp, #4]
 8007544:	9b02      	ldr	r3, [sp, #8]
 8007546:	9103      	str	r1, [sp, #12]
 8007548:	428b      	cmp	r3, r1
 800754a:	d80c      	bhi.n	8007566 <__multiply+0x9a>
 800754c:	2e00      	cmp	r6, #0
 800754e:	dd03      	ble.n	8007558 <__multiply+0x8c>
 8007550:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8007554:	2b00      	cmp	r3, #0
 8007556:	d055      	beq.n	8007604 <__multiply+0x138>
 8007558:	6106      	str	r6, [r0, #16]
 800755a:	b005      	add	sp, #20
 800755c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007560:	f843 2b04 	str.w	r2, [r3], #4
 8007564:	e7d9      	b.n	800751a <__multiply+0x4e>
 8007566:	f8b1 a000 	ldrh.w	sl, [r1]
 800756a:	f1ba 0f00 	cmp.w	sl, #0
 800756e:	d01f      	beq.n	80075b0 <__multiply+0xe4>
 8007570:	46c4      	mov	ip, r8
 8007572:	46a1      	mov	r9, r4
 8007574:	2700      	movs	r7, #0
 8007576:	f85c 2b04 	ldr.w	r2, [ip], #4
 800757a:	f8d9 3000 	ldr.w	r3, [r9]
 800757e:	fa1f fb82 	uxth.w	fp, r2
 8007582:	b29b      	uxth	r3, r3
 8007584:	fb0a 330b 	mla	r3, sl, fp, r3
 8007588:	443b      	add	r3, r7
 800758a:	f8d9 7000 	ldr.w	r7, [r9]
 800758e:	0c12      	lsrs	r2, r2, #16
 8007590:	0c3f      	lsrs	r7, r7, #16
 8007592:	fb0a 7202 	mla	r2, sl, r2, r7
 8007596:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800759a:	b29b      	uxth	r3, r3
 800759c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075a0:	4565      	cmp	r5, ip
 80075a2:	f849 3b04 	str.w	r3, [r9], #4
 80075a6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80075aa:	d8e4      	bhi.n	8007576 <__multiply+0xaa>
 80075ac:	9b01      	ldr	r3, [sp, #4]
 80075ae:	50e7      	str	r7, [r4, r3]
 80075b0:	9b03      	ldr	r3, [sp, #12]
 80075b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80075b6:	3104      	adds	r1, #4
 80075b8:	f1b9 0f00 	cmp.w	r9, #0
 80075bc:	d020      	beq.n	8007600 <__multiply+0x134>
 80075be:	6823      	ldr	r3, [r4, #0]
 80075c0:	4647      	mov	r7, r8
 80075c2:	46a4      	mov	ip, r4
 80075c4:	f04f 0a00 	mov.w	sl, #0
 80075c8:	f8b7 b000 	ldrh.w	fp, [r7]
 80075cc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80075d0:	fb09 220b 	mla	r2, r9, fp, r2
 80075d4:	4452      	add	r2, sl
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80075dc:	f84c 3b04 	str.w	r3, [ip], #4
 80075e0:	f857 3b04 	ldr.w	r3, [r7], #4
 80075e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075e8:	f8bc 3000 	ldrh.w	r3, [ip]
 80075ec:	fb09 330a 	mla	r3, r9, sl, r3
 80075f0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80075f4:	42bd      	cmp	r5, r7
 80075f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075fa:	d8e5      	bhi.n	80075c8 <__multiply+0xfc>
 80075fc:	9a01      	ldr	r2, [sp, #4]
 80075fe:	50a3      	str	r3, [r4, r2]
 8007600:	3404      	adds	r4, #4
 8007602:	e79f      	b.n	8007544 <__multiply+0x78>
 8007604:	3e01      	subs	r6, #1
 8007606:	e7a1      	b.n	800754c <__multiply+0x80>
 8007608:	080085cc 	.word	0x080085cc
 800760c:	080085dd 	.word	0x080085dd

08007610 <__pow5mult>:
 8007610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007614:	4615      	mov	r5, r2
 8007616:	f012 0203 	ands.w	r2, r2, #3
 800761a:	4607      	mov	r7, r0
 800761c:	460e      	mov	r6, r1
 800761e:	d007      	beq.n	8007630 <__pow5mult+0x20>
 8007620:	4c25      	ldr	r4, [pc, #148]	@ (80076b8 <__pow5mult+0xa8>)
 8007622:	3a01      	subs	r2, #1
 8007624:	2300      	movs	r3, #0
 8007626:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800762a:	f7ff fea7 	bl	800737c <__multadd>
 800762e:	4606      	mov	r6, r0
 8007630:	10ad      	asrs	r5, r5, #2
 8007632:	d03d      	beq.n	80076b0 <__pow5mult+0xa0>
 8007634:	69fc      	ldr	r4, [r7, #28]
 8007636:	b97c      	cbnz	r4, 8007658 <__pow5mult+0x48>
 8007638:	2010      	movs	r0, #16
 800763a:	f7ff fd87 	bl	800714c <malloc>
 800763e:	4602      	mov	r2, r0
 8007640:	61f8      	str	r0, [r7, #28]
 8007642:	b928      	cbnz	r0, 8007650 <__pow5mult+0x40>
 8007644:	4b1d      	ldr	r3, [pc, #116]	@ (80076bc <__pow5mult+0xac>)
 8007646:	481e      	ldr	r0, [pc, #120]	@ (80076c0 <__pow5mult+0xb0>)
 8007648:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800764c:	f000 fbea 	bl	8007e24 <__assert_func>
 8007650:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007654:	6004      	str	r4, [r0, #0]
 8007656:	60c4      	str	r4, [r0, #12]
 8007658:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800765c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007660:	b94c      	cbnz	r4, 8007676 <__pow5mult+0x66>
 8007662:	f240 2171 	movw	r1, #625	@ 0x271
 8007666:	4638      	mov	r0, r7
 8007668:	f7ff ff1a 	bl	80074a0 <__i2b>
 800766c:	2300      	movs	r3, #0
 800766e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007672:	4604      	mov	r4, r0
 8007674:	6003      	str	r3, [r0, #0]
 8007676:	f04f 0900 	mov.w	r9, #0
 800767a:	07eb      	lsls	r3, r5, #31
 800767c:	d50a      	bpl.n	8007694 <__pow5mult+0x84>
 800767e:	4631      	mov	r1, r6
 8007680:	4622      	mov	r2, r4
 8007682:	4638      	mov	r0, r7
 8007684:	f7ff ff22 	bl	80074cc <__multiply>
 8007688:	4631      	mov	r1, r6
 800768a:	4680      	mov	r8, r0
 800768c:	4638      	mov	r0, r7
 800768e:	f7ff fe53 	bl	8007338 <_Bfree>
 8007692:	4646      	mov	r6, r8
 8007694:	106d      	asrs	r5, r5, #1
 8007696:	d00b      	beq.n	80076b0 <__pow5mult+0xa0>
 8007698:	6820      	ldr	r0, [r4, #0]
 800769a:	b938      	cbnz	r0, 80076ac <__pow5mult+0x9c>
 800769c:	4622      	mov	r2, r4
 800769e:	4621      	mov	r1, r4
 80076a0:	4638      	mov	r0, r7
 80076a2:	f7ff ff13 	bl	80074cc <__multiply>
 80076a6:	6020      	str	r0, [r4, #0]
 80076a8:	f8c0 9000 	str.w	r9, [r0]
 80076ac:	4604      	mov	r4, r0
 80076ae:	e7e4      	b.n	800767a <__pow5mult+0x6a>
 80076b0:	4630      	mov	r0, r6
 80076b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076b6:	bf00      	nop
 80076b8:	08008690 	.word	0x08008690
 80076bc:	0800855d 	.word	0x0800855d
 80076c0:	080085dd 	.word	0x080085dd

080076c4 <__lshift>:
 80076c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c8:	460c      	mov	r4, r1
 80076ca:	6849      	ldr	r1, [r1, #4]
 80076cc:	6923      	ldr	r3, [r4, #16]
 80076ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80076d2:	68a3      	ldr	r3, [r4, #8]
 80076d4:	4607      	mov	r7, r0
 80076d6:	4691      	mov	r9, r2
 80076d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80076dc:	f108 0601 	add.w	r6, r8, #1
 80076e0:	42b3      	cmp	r3, r6
 80076e2:	db0b      	blt.n	80076fc <__lshift+0x38>
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7ff fde7 	bl	80072b8 <_Balloc>
 80076ea:	4605      	mov	r5, r0
 80076ec:	b948      	cbnz	r0, 8007702 <__lshift+0x3e>
 80076ee:	4602      	mov	r2, r0
 80076f0:	4b28      	ldr	r3, [pc, #160]	@ (8007794 <__lshift+0xd0>)
 80076f2:	4829      	ldr	r0, [pc, #164]	@ (8007798 <__lshift+0xd4>)
 80076f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80076f8:	f000 fb94 	bl	8007e24 <__assert_func>
 80076fc:	3101      	adds	r1, #1
 80076fe:	005b      	lsls	r3, r3, #1
 8007700:	e7ee      	b.n	80076e0 <__lshift+0x1c>
 8007702:	2300      	movs	r3, #0
 8007704:	f100 0114 	add.w	r1, r0, #20
 8007708:	f100 0210 	add.w	r2, r0, #16
 800770c:	4618      	mov	r0, r3
 800770e:	4553      	cmp	r3, sl
 8007710:	db33      	blt.n	800777a <__lshift+0xb6>
 8007712:	6920      	ldr	r0, [r4, #16]
 8007714:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007718:	f104 0314 	add.w	r3, r4, #20
 800771c:	f019 091f 	ands.w	r9, r9, #31
 8007720:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007724:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007728:	d02b      	beq.n	8007782 <__lshift+0xbe>
 800772a:	f1c9 0e20 	rsb	lr, r9, #32
 800772e:	468a      	mov	sl, r1
 8007730:	2200      	movs	r2, #0
 8007732:	6818      	ldr	r0, [r3, #0]
 8007734:	fa00 f009 	lsl.w	r0, r0, r9
 8007738:	4310      	orrs	r0, r2
 800773a:	f84a 0b04 	str.w	r0, [sl], #4
 800773e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007742:	459c      	cmp	ip, r3
 8007744:	fa22 f20e 	lsr.w	r2, r2, lr
 8007748:	d8f3      	bhi.n	8007732 <__lshift+0x6e>
 800774a:	ebac 0304 	sub.w	r3, ip, r4
 800774e:	3b15      	subs	r3, #21
 8007750:	f023 0303 	bic.w	r3, r3, #3
 8007754:	3304      	adds	r3, #4
 8007756:	f104 0015 	add.w	r0, r4, #21
 800775a:	4560      	cmp	r0, ip
 800775c:	bf88      	it	hi
 800775e:	2304      	movhi	r3, #4
 8007760:	50ca      	str	r2, [r1, r3]
 8007762:	b10a      	cbz	r2, 8007768 <__lshift+0xa4>
 8007764:	f108 0602 	add.w	r6, r8, #2
 8007768:	3e01      	subs	r6, #1
 800776a:	4638      	mov	r0, r7
 800776c:	612e      	str	r6, [r5, #16]
 800776e:	4621      	mov	r1, r4
 8007770:	f7ff fde2 	bl	8007338 <_Bfree>
 8007774:	4628      	mov	r0, r5
 8007776:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800777a:	f842 0f04 	str.w	r0, [r2, #4]!
 800777e:	3301      	adds	r3, #1
 8007780:	e7c5      	b.n	800770e <__lshift+0x4a>
 8007782:	3904      	subs	r1, #4
 8007784:	f853 2b04 	ldr.w	r2, [r3], #4
 8007788:	f841 2f04 	str.w	r2, [r1, #4]!
 800778c:	459c      	cmp	ip, r3
 800778e:	d8f9      	bhi.n	8007784 <__lshift+0xc0>
 8007790:	e7ea      	b.n	8007768 <__lshift+0xa4>
 8007792:	bf00      	nop
 8007794:	080085cc 	.word	0x080085cc
 8007798:	080085dd 	.word	0x080085dd

0800779c <__mcmp>:
 800779c:	690a      	ldr	r2, [r1, #16]
 800779e:	4603      	mov	r3, r0
 80077a0:	6900      	ldr	r0, [r0, #16]
 80077a2:	1a80      	subs	r0, r0, r2
 80077a4:	b530      	push	{r4, r5, lr}
 80077a6:	d10e      	bne.n	80077c6 <__mcmp+0x2a>
 80077a8:	3314      	adds	r3, #20
 80077aa:	3114      	adds	r1, #20
 80077ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80077b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80077b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80077b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80077bc:	4295      	cmp	r5, r2
 80077be:	d003      	beq.n	80077c8 <__mcmp+0x2c>
 80077c0:	d205      	bcs.n	80077ce <__mcmp+0x32>
 80077c2:	f04f 30ff 	mov.w	r0, #4294967295
 80077c6:	bd30      	pop	{r4, r5, pc}
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d3f3      	bcc.n	80077b4 <__mcmp+0x18>
 80077cc:	e7fb      	b.n	80077c6 <__mcmp+0x2a>
 80077ce:	2001      	movs	r0, #1
 80077d0:	e7f9      	b.n	80077c6 <__mcmp+0x2a>
	...

080077d4 <__mdiff>:
 80077d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d8:	4689      	mov	r9, r1
 80077da:	4606      	mov	r6, r0
 80077dc:	4611      	mov	r1, r2
 80077de:	4648      	mov	r0, r9
 80077e0:	4614      	mov	r4, r2
 80077e2:	f7ff ffdb 	bl	800779c <__mcmp>
 80077e6:	1e05      	subs	r5, r0, #0
 80077e8:	d112      	bne.n	8007810 <__mdiff+0x3c>
 80077ea:	4629      	mov	r1, r5
 80077ec:	4630      	mov	r0, r6
 80077ee:	f7ff fd63 	bl	80072b8 <_Balloc>
 80077f2:	4602      	mov	r2, r0
 80077f4:	b928      	cbnz	r0, 8007802 <__mdiff+0x2e>
 80077f6:	4b3f      	ldr	r3, [pc, #252]	@ (80078f4 <__mdiff+0x120>)
 80077f8:	f240 2137 	movw	r1, #567	@ 0x237
 80077fc:	483e      	ldr	r0, [pc, #248]	@ (80078f8 <__mdiff+0x124>)
 80077fe:	f000 fb11 	bl	8007e24 <__assert_func>
 8007802:	2301      	movs	r3, #1
 8007804:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007808:	4610      	mov	r0, r2
 800780a:	b003      	add	sp, #12
 800780c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007810:	bfbc      	itt	lt
 8007812:	464b      	movlt	r3, r9
 8007814:	46a1      	movlt	r9, r4
 8007816:	4630      	mov	r0, r6
 8007818:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800781c:	bfba      	itte	lt
 800781e:	461c      	movlt	r4, r3
 8007820:	2501      	movlt	r5, #1
 8007822:	2500      	movge	r5, #0
 8007824:	f7ff fd48 	bl	80072b8 <_Balloc>
 8007828:	4602      	mov	r2, r0
 800782a:	b918      	cbnz	r0, 8007834 <__mdiff+0x60>
 800782c:	4b31      	ldr	r3, [pc, #196]	@ (80078f4 <__mdiff+0x120>)
 800782e:	f240 2145 	movw	r1, #581	@ 0x245
 8007832:	e7e3      	b.n	80077fc <__mdiff+0x28>
 8007834:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007838:	6926      	ldr	r6, [r4, #16]
 800783a:	60c5      	str	r5, [r0, #12]
 800783c:	f109 0310 	add.w	r3, r9, #16
 8007840:	f109 0514 	add.w	r5, r9, #20
 8007844:	f104 0e14 	add.w	lr, r4, #20
 8007848:	f100 0b14 	add.w	fp, r0, #20
 800784c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007850:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007854:	9301      	str	r3, [sp, #4]
 8007856:	46d9      	mov	r9, fp
 8007858:	f04f 0c00 	mov.w	ip, #0
 800785c:	9b01      	ldr	r3, [sp, #4]
 800785e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007862:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	fa1f f38a 	uxth.w	r3, sl
 800786c:	4619      	mov	r1, r3
 800786e:	b283      	uxth	r3, r0
 8007870:	1acb      	subs	r3, r1, r3
 8007872:	0c00      	lsrs	r0, r0, #16
 8007874:	4463      	add	r3, ip
 8007876:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800787a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800787e:	b29b      	uxth	r3, r3
 8007880:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007884:	4576      	cmp	r6, lr
 8007886:	f849 3b04 	str.w	r3, [r9], #4
 800788a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800788e:	d8e5      	bhi.n	800785c <__mdiff+0x88>
 8007890:	1b33      	subs	r3, r6, r4
 8007892:	3b15      	subs	r3, #21
 8007894:	f023 0303 	bic.w	r3, r3, #3
 8007898:	3415      	adds	r4, #21
 800789a:	3304      	adds	r3, #4
 800789c:	42a6      	cmp	r6, r4
 800789e:	bf38      	it	cc
 80078a0:	2304      	movcc	r3, #4
 80078a2:	441d      	add	r5, r3
 80078a4:	445b      	add	r3, fp
 80078a6:	461e      	mov	r6, r3
 80078a8:	462c      	mov	r4, r5
 80078aa:	4544      	cmp	r4, r8
 80078ac:	d30e      	bcc.n	80078cc <__mdiff+0xf8>
 80078ae:	f108 0103 	add.w	r1, r8, #3
 80078b2:	1b49      	subs	r1, r1, r5
 80078b4:	f021 0103 	bic.w	r1, r1, #3
 80078b8:	3d03      	subs	r5, #3
 80078ba:	45a8      	cmp	r8, r5
 80078bc:	bf38      	it	cc
 80078be:	2100      	movcc	r1, #0
 80078c0:	440b      	add	r3, r1
 80078c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80078c6:	b191      	cbz	r1, 80078ee <__mdiff+0x11a>
 80078c8:	6117      	str	r7, [r2, #16]
 80078ca:	e79d      	b.n	8007808 <__mdiff+0x34>
 80078cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80078d0:	46e6      	mov	lr, ip
 80078d2:	0c08      	lsrs	r0, r1, #16
 80078d4:	fa1c fc81 	uxtah	ip, ip, r1
 80078d8:	4471      	add	r1, lr
 80078da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80078de:	b289      	uxth	r1, r1
 80078e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80078e4:	f846 1b04 	str.w	r1, [r6], #4
 80078e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80078ec:	e7dd      	b.n	80078aa <__mdiff+0xd6>
 80078ee:	3f01      	subs	r7, #1
 80078f0:	e7e7      	b.n	80078c2 <__mdiff+0xee>
 80078f2:	bf00      	nop
 80078f4:	080085cc 	.word	0x080085cc
 80078f8:	080085dd 	.word	0x080085dd

080078fc <__d2b>:
 80078fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007900:	460f      	mov	r7, r1
 8007902:	2101      	movs	r1, #1
 8007904:	ec59 8b10 	vmov	r8, r9, d0
 8007908:	4616      	mov	r6, r2
 800790a:	f7ff fcd5 	bl	80072b8 <_Balloc>
 800790e:	4604      	mov	r4, r0
 8007910:	b930      	cbnz	r0, 8007920 <__d2b+0x24>
 8007912:	4602      	mov	r2, r0
 8007914:	4b23      	ldr	r3, [pc, #140]	@ (80079a4 <__d2b+0xa8>)
 8007916:	4824      	ldr	r0, [pc, #144]	@ (80079a8 <__d2b+0xac>)
 8007918:	f240 310f 	movw	r1, #783	@ 0x30f
 800791c:	f000 fa82 	bl	8007e24 <__assert_func>
 8007920:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007924:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007928:	b10d      	cbz	r5, 800792e <__d2b+0x32>
 800792a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800792e:	9301      	str	r3, [sp, #4]
 8007930:	f1b8 0300 	subs.w	r3, r8, #0
 8007934:	d023      	beq.n	800797e <__d2b+0x82>
 8007936:	4668      	mov	r0, sp
 8007938:	9300      	str	r3, [sp, #0]
 800793a:	f7ff fd84 	bl	8007446 <__lo0bits>
 800793e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007942:	b1d0      	cbz	r0, 800797a <__d2b+0x7e>
 8007944:	f1c0 0320 	rsb	r3, r0, #32
 8007948:	fa02 f303 	lsl.w	r3, r2, r3
 800794c:	430b      	orrs	r3, r1
 800794e:	40c2      	lsrs	r2, r0
 8007950:	6163      	str	r3, [r4, #20]
 8007952:	9201      	str	r2, [sp, #4]
 8007954:	9b01      	ldr	r3, [sp, #4]
 8007956:	61a3      	str	r3, [r4, #24]
 8007958:	2b00      	cmp	r3, #0
 800795a:	bf0c      	ite	eq
 800795c:	2201      	moveq	r2, #1
 800795e:	2202      	movne	r2, #2
 8007960:	6122      	str	r2, [r4, #16]
 8007962:	b1a5      	cbz	r5, 800798e <__d2b+0x92>
 8007964:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007968:	4405      	add	r5, r0
 800796a:	603d      	str	r5, [r7, #0]
 800796c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007970:	6030      	str	r0, [r6, #0]
 8007972:	4620      	mov	r0, r4
 8007974:	b003      	add	sp, #12
 8007976:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800797a:	6161      	str	r1, [r4, #20]
 800797c:	e7ea      	b.n	8007954 <__d2b+0x58>
 800797e:	a801      	add	r0, sp, #4
 8007980:	f7ff fd61 	bl	8007446 <__lo0bits>
 8007984:	9b01      	ldr	r3, [sp, #4]
 8007986:	6163      	str	r3, [r4, #20]
 8007988:	3020      	adds	r0, #32
 800798a:	2201      	movs	r2, #1
 800798c:	e7e8      	b.n	8007960 <__d2b+0x64>
 800798e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007992:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007996:	6038      	str	r0, [r7, #0]
 8007998:	6918      	ldr	r0, [r3, #16]
 800799a:	f7ff fd35 	bl	8007408 <__hi0bits>
 800799e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80079a2:	e7e5      	b.n	8007970 <__d2b+0x74>
 80079a4:	080085cc 	.word	0x080085cc
 80079a8:	080085dd 	.word	0x080085dd

080079ac <__ssputs_r>:
 80079ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	688e      	ldr	r6, [r1, #8]
 80079b2:	461f      	mov	r7, r3
 80079b4:	42be      	cmp	r6, r7
 80079b6:	680b      	ldr	r3, [r1, #0]
 80079b8:	4682      	mov	sl, r0
 80079ba:	460c      	mov	r4, r1
 80079bc:	4690      	mov	r8, r2
 80079be:	d82d      	bhi.n	8007a1c <__ssputs_r+0x70>
 80079c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80079c8:	d026      	beq.n	8007a18 <__ssputs_r+0x6c>
 80079ca:	6965      	ldr	r5, [r4, #20]
 80079cc:	6909      	ldr	r1, [r1, #16]
 80079ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80079d2:	eba3 0901 	sub.w	r9, r3, r1
 80079d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80079da:	1c7b      	adds	r3, r7, #1
 80079dc:	444b      	add	r3, r9
 80079de:	106d      	asrs	r5, r5, #1
 80079e0:	429d      	cmp	r5, r3
 80079e2:	bf38      	it	cc
 80079e4:	461d      	movcc	r5, r3
 80079e6:	0553      	lsls	r3, r2, #21
 80079e8:	d527      	bpl.n	8007a3a <__ssputs_r+0x8e>
 80079ea:	4629      	mov	r1, r5
 80079ec:	f7ff fbd8 	bl	80071a0 <_malloc_r>
 80079f0:	4606      	mov	r6, r0
 80079f2:	b360      	cbz	r0, 8007a4e <__ssputs_r+0xa2>
 80079f4:	6921      	ldr	r1, [r4, #16]
 80079f6:	464a      	mov	r2, r9
 80079f8:	f000 fa06 	bl	8007e08 <memcpy>
 80079fc:	89a3      	ldrh	r3, [r4, #12]
 80079fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007a02:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a06:	81a3      	strh	r3, [r4, #12]
 8007a08:	6126      	str	r6, [r4, #16]
 8007a0a:	6165      	str	r5, [r4, #20]
 8007a0c:	444e      	add	r6, r9
 8007a0e:	eba5 0509 	sub.w	r5, r5, r9
 8007a12:	6026      	str	r6, [r4, #0]
 8007a14:	60a5      	str	r5, [r4, #8]
 8007a16:	463e      	mov	r6, r7
 8007a18:	42be      	cmp	r6, r7
 8007a1a:	d900      	bls.n	8007a1e <__ssputs_r+0x72>
 8007a1c:	463e      	mov	r6, r7
 8007a1e:	6820      	ldr	r0, [r4, #0]
 8007a20:	4632      	mov	r2, r6
 8007a22:	4641      	mov	r1, r8
 8007a24:	f000 f9c6 	bl	8007db4 <memmove>
 8007a28:	68a3      	ldr	r3, [r4, #8]
 8007a2a:	1b9b      	subs	r3, r3, r6
 8007a2c:	60a3      	str	r3, [r4, #8]
 8007a2e:	6823      	ldr	r3, [r4, #0]
 8007a30:	4433      	add	r3, r6
 8007a32:	6023      	str	r3, [r4, #0]
 8007a34:	2000      	movs	r0, #0
 8007a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	f000 fa36 	bl	8007eac <_realloc_r>
 8007a40:	4606      	mov	r6, r0
 8007a42:	2800      	cmp	r0, #0
 8007a44:	d1e0      	bne.n	8007a08 <__ssputs_r+0x5c>
 8007a46:	6921      	ldr	r1, [r4, #16]
 8007a48:	4650      	mov	r0, sl
 8007a4a:	f7ff fb35 	bl	80070b8 <_free_r>
 8007a4e:	230c      	movs	r3, #12
 8007a50:	f8ca 3000 	str.w	r3, [sl]
 8007a54:	89a3      	ldrh	r3, [r4, #12]
 8007a56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a5a:	81a3      	strh	r3, [r4, #12]
 8007a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a60:	e7e9      	b.n	8007a36 <__ssputs_r+0x8a>
	...

08007a64 <_svfiprintf_r>:
 8007a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a68:	4698      	mov	r8, r3
 8007a6a:	898b      	ldrh	r3, [r1, #12]
 8007a6c:	061b      	lsls	r3, r3, #24
 8007a6e:	b09d      	sub	sp, #116	@ 0x74
 8007a70:	4607      	mov	r7, r0
 8007a72:	460d      	mov	r5, r1
 8007a74:	4614      	mov	r4, r2
 8007a76:	d510      	bpl.n	8007a9a <_svfiprintf_r+0x36>
 8007a78:	690b      	ldr	r3, [r1, #16]
 8007a7a:	b973      	cbnz	r3, 8007a9a <_svfiprintf_r+0x36>
 8007a7c:	2140      	movs	r1, #64	@ 0x40
 8007a7e:	f7ff fb8f 	bl	80071a0 <_malloc_r>
 8007a82:	6028      	str	r0, [r5, #0]
 8007a84:	6128      	str	r0, [r5, #16]
 8007a86:	b930      	cbnz	r0, 8007a96 <_svfiprintf_r+0x32>
 8007a88:	230c      	movs	r3, #12
 8007a8a:	603b      	str	r3, [r7, #0]
 8007a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8007a90:	b01d      	add	sp, #116	@ 0x74
 8007a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a96:	2340      	movs	r3, #64	@ 0x40
 8007a98:	616b      	str	r3, [r5, #20]
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a9e:	2320      	movs	r3, #32
 8007aa0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007aa4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007aa8:	2330      	movs	r3, #48	@ 0x30
 8007aaa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007c48 <_svfiprintf_r+0x1e4>
 8007aae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ab2:	f04f 0901 	mov.w	r9, #1
 8007ab6:	4623      	mov	r3, r4
 8007ab8:	469a      	mov	sl, r3
 8007aba:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007abe:	b10a      	cbz	r2, 8007ac4 <_svfiprintf_r+0x60>
 8007ac0:	2a25      	cmp	r2, #37	@ 0x25
 8007ac2:	d1f9      	bne.n	8007ab8 <_svfiprintf_r+0x54>
 8007ac4:	ebba 0b04 	subs.w	fp, sl, r4
 8007ac8:	d00b      	beq.n	8007ae2 <_svfiprintf_r+0x7e>
 8007aca:	465b      	mov	r3, fp
 8007acc:	4622      	mov	r2, r4
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	f7ff ff6b 	bl	80079ac <__ssputs_r>
 8007ad6:	3001      	adds	r0, #1
 8007ad8:	f000 80a7 	beq.w	8007c2a <_svfiprintf_r+0x1c6>
 8007adc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ade:	445a      	add	r2, fp
 8007ae0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ae2:	f89a 3000 	ldrb.w	r3, [sl]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	f000 809f 	beq.w	8007c2a <_svfiprintf_r+0x1c6>
 8007aec:	2300      	movs	r3, #0
 8007aee:	f04f 32ff 	mov.w	r2, #4294967295
 8007af2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007af6:	f10a 0a01 	add.w	sl, sl, #1
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	9307      	str	r3, [sp, #28]
 8007afe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007b02:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b04:	4654      	mov	r4, sl
 8007b06:	2205      	movs	r2, #5
 8007b08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b0c:	484e      	ldr	r0, [pc, #312]	@ (8007c48 <_svfiprintf_r+0x1e4>)
 8007b0e:	f7f8 fb5f 	bl	80001d0 <memchr>
 8007b12:	9a04      	ldr	r2, [sp, #16]
 8007b14:	b9d8      	cbnz	r0, 8007b4e <_svfiprintf_r+0xea>
 8007b16:	06d0      	lsls	r0, r2, #27
 8007b18:	bf44      	itt	mi
 8007b1a:	2320      	movmi	r3, #32
 8007b1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b20:	0711      	lsls	r1, r2, #28
 8007b22:	bf44      	itt	mi
 8007b24:	232b      	movmi	r3, #43	@ 0x2b
 8007b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007b2a:	f89a 3000 	ldrb.w	r3, [sl]
 8007b2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b30:	d015      	beq.n	8007b5e <_svfiprintf_r+0xfa>
 8007b32:	9a07      	ldr	r2, [sp, #28]
 8007b34:	4654      	mov	r4, sl
 8007b36:	2000      	movs	r0, #0
 8007b38:	f04f 0c0a 	mov.w	ip, #10
 8007b3c:	4621      	mov	r1, r4
 8007b3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b42:	3b30      	subs	r3, #48	@ 0x30
 8007b44:	2b09      	cmp	r3, #9
 8007b46:	d94b      	bls.n	8007be0 <_svfiprintf_r+0x17c>
 8007b48:	b1b0      	cbz	r0, 8007b78 <_svfiprintf_r+0x114>
 8007b4a:	9207      	str	r2, [sp, #28]
 8007b4c:	e014      	b.n	8007b78 <_svfiprintf_r+0x114>
 8007b4e:	eba0 0308 	sub.w	r3, r0, r8
 8007b52:	fa09 f303 	lsl.w	r3, r9, r3
 8007b56:	4313      	orrs	r3, r2
 8007b58:	9304      	str	r3, [sp, #16]
 8007b5a:	46a2      	mov	sl, r4
 8007b5c:	e7d2      	b.n	8007b04 <_svfiprintf_r+0xa0>
 8007b5e:	9b03      	ldr	r3, [sp, #12]
 8007b60:	1d19      	adds	r1, r3, #4
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	9103      	str	r1, [sp, #12]
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	bfbb      	ittet	lt
 8007b6a:	425b      	neglt	r3, r3
 8007b6c:	f042 0202 	orrlt.w	r2, r2, #2
 8007b70:	9307      	strge	r3, [sp, #28]
 8007b72:	9307      	strlt	r3, [sp, #28]
 8007b74:	bfb8      	it	lt
 8007b76:	9204      	strlt	r2, [sp, #16]
 8007b78:	7823      	ldrb	r3, [r4, #0]
 8007b7a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b7c:	d10a      	bne.n	8007b94 <_svfiprintf_r+0x130>
 8007b7e:	7863      	ldrb	r3, [r4, #1]
 8007b80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b82:	d132      	bne.n	8007bea <_svfiprintf_r+0x186>
 8007b84:	9b03      	ldr	r3, [sp, #12]
 8007b86:	1d1a      	adds	r2, r3, #4
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	9203      	str	r2, [sp, #12]
 8007b8c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b90:	3402      	adds	r4, #2
 8007b92:	9305      	str	r3, [sp, #20]
 8007b94:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007c58 <_svfiprintf_r+0x1f4>
 8007b98:	7821      	ldrb	r1, [r4, #0]
 8007b9a:	2203      	movs	r2, #3
 8007b9c:	4650      	mov	r0, sl
 8007b9e:	f7f8 fb17 	bl	80001d0 <memchr>
 8007ba2:	b138      	cbz	r0, 8007bb4 <_svfiprintf_r+0x150>
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	eba0 000a 	sub.w	r0, r0, sl
 8007baa:	2240      	movs	r2, #64	@ 0x40
 8007bac:	4082      	lsls	r2, r0
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	3401      	adds	r4, #1
 8007bb2:	9304      	str	r3, [sp, #16]
 8007bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb8:	4824      	ldr	r0, [pc, #144]	@ (8007c4c <_svfiprintf_r+0x1e8>)
 8007bba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007bbe:	2206      	movs	r2, #6
 8007bc0:	f7f8 fb06 	bl	80001d0 <memchr>
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d036      	beq.n	8007c36 <_svfiprintf_r+0x1d2>
 8007bc8:	4b21      	ldr	r3, [pc, #132]	@ (8007c50 <_svfiprintf_r+0x1ec>)
 8007bca:	bb1b      	cbnz	r3, 8007c14 <_svfiprintf_r+0x1b0>
 8007bcc:	9b03      	ldr	r3, [sp, #12]
 8007bce:	3307      	adds	r3, #7
 8007bd0:	f023 0307 	bic.w	r3, r3, #7
 8007bd4:	3308      	adds	r3, #8
 8007bd6:	9303      	str	r3, [sp, #12]
 8007bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bda:	4433      	add	r3, r6
 8007bdc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bde:	e76a      	b.n	8007ab6 <_svfiprintf_r+0x52>
 8007be0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007be4:	460c      	mov	r4, r1
 8007be6:	2001      	movs	r0, #1
 8007be8:	e7a8      	b.n	8007b3c <_svfiprintf_r+0xd8>
 8007bea:	2300      	movs	r3, #0
 8007bec:	3401      	adds	r4, #1
 8007bee:	9305      	str	r3, [sp, #20]
 8007bf0:	4619      	mov	r1, r3
 8007bf2:	f04f 0c0a 	mov.w	ip, #10
 8007bf6:	4620      	mov	r0, r4
 8007bf8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007bfc:	3a30      	subs	r2, #48	@ 0x30
 8007bfe:	2a09      	cmp	r2, #9
 8007c00:	d903      	bls.n	8007c0a <_svfiprintf_r+0x1a6>
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d0c6      	beq.n	8007b94 <_svfiprintf_r+0x130>
 8007c06:	9105      	str	r1, [sp, #20]
 8007c08:	e7c4      	b.n	8007b94 <_svfiprintf_r+0x130>
 8007c0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c0e:	4604      	mov	r4, r0
 8007c10:	2301      	movs	r3, #1
 8007c12:	e7f0      	b.n	8007bf6 <_svfiprintf_r+0x192>
 8007c14:	ab03      	add	r3, sp, #12
 8007c16:	9300      	str	r3, [sp, #0]
 8007c18:	462a      	mov	r2, r5
 8007c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007c54 <_svfiprintf_r+0x1f0>)
 8007c1c:	a904      	add	r1, sp, #16
 8007c1e:	4638      	mov	r0, r7
 8007c20:	f7fd fe80 	bl	8005924 <_printf_float>
 8007c24:	1c42      	adds	r2, r0, #1
 8007c26:	4606      	mov	r6, r0
 8007c28:	d1d6      	bne.n	8007bd8 <_svfiprintf_r+0x174>
 8007c2a:	89ab      	ldrh	r3, [r5, #12]
 8007c2c:	065b      	lsls	r3, r3, #25
 8007c2e:	f53f af2d 	bmi.w	8007a8c <_svfiprintf_r+0x28>
 8007c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007c34:	e72c      	b.n	8007a90 <_svfiprintf_r+0x2c>
 8007c36:	ab03      	add	r3, sp, #12
 8007c38:	9300      	str	r3, [sp, #0]
 8007c3a:	462a      	mov	r2, r5
 8007c3c:	4b05      	ldr	r3, [pc, #20]	@ (8007c54 <_svfiprintf_r+0x1f0>)
 8007c3e:	a904      	add	r1, sp, #16
 8007c40:	4638      	mov	r0, r7
 8007c42:	f7fe f907 	bl	8005e54 <_printf_i>
 8007c46:	e7ed      	b.n	8007c24 <_svfiprintf_r+0x1c0>
 8007c48:	08008636 	.word	0x08008636
 8007c4c:	08008640 	.word	0x08008640
 8007c50:	08005925 	.word	0x08005925
 8007c54:	080079ad 	.word	0x080079ad
 8007c58:	0800863c 	.word	0x0800863c

08007c5c <__sflush_r>:
 8007c5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c64:	0716      	lsls	r6, r2, #28
 8007c66:	4605      	mov	r5, r0
 8007c68:	460c      	mov	r4, r1
 8007c6a:	d454      	bmi.n	8007d16 <__sflush_r+0xba>
 8007c6c:	684b      	ldr	r3, [r1, #4]
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	dc02      	bgt.n	8007c78 <__sflush_r+0x1c>
 8007c72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	dd48      	ble.n	8007d0a <__sflush_r+0xae>
 8007c78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007c7a:	2e00      	cmp	r6, #0
 8007c7c:	d045      	beq.n	8007d0a <__sflush_r+0xae>
 8007c7e:	2300      	movs	r3, #0
 8007c80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007c84:	682f      	ldr	r7, [r5, #0]
 8007c86:	6a21      	ldr	r1, [r4, #32]
 8007c88:	602b      	str	r3, [r5, #0]
 8007c8a:	d030      	beq.n	8007cee <__sflush_r+0x92>
 8007c8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007c8e:	89a3      	ldrh	r3, [r4, #12]
 8007c90:	0759      	lsls	r1, r3, #29
 8007c92:	d505      	bpl.n	8007ca0 <__sflush_r+0x44>
 8007c94:	6863      	ldr	r3, [r4, #4]
 8007c96:	1ad2      	subs	r2, r2, r3
 8007c98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007c9a:	b10b      	cbz	r3, 8007ca0 <__sflush_r+0x44>
 8007c9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007c9e:	1ad2      	subs	r2, r2, r3
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007ca4:	6a21      	ldr	r1, [r4, #32]
 8007ca6:	4628      	mov	r0, r5
 8007ca8:	47b0      	blx	r6
 8007caa:	1c43      	adds	r3, r0, #1
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	d106      	bne.n	8007cbe <__sflush_r+0x62>
 8007cb0:	6829      	ldr	r1, [r5, #0]
 8007cb2:	291d      	cmp	r1, #29
 8007cb4:	d82b      	bhi.n	8007d0e <__sflush_r+0xb2>
 8007cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8007d60 <__sflush_r+0x104>)
 8007cb8:	40ca      	lsrs	r2, r1
 8007cba:	07d6      	lsls	r6, r2, #31
 8007cbc:	d527      	bpl.n	8007d0e <__sflush_r+0xb2>
 8007cbe:	2200      	movs	r2, #0
 8007cc0:	6062      	str	r2, [r4, #4]
 8007cc2:	04d9      	lsls	r1, r3, #19
 8007cc4:	6922      	ldr	r2, [r4, #16]
 8007cc6:	6022      	str	r2, [r4, #0]
 8007cc8:	d504      	bpl.n	8007cd4 <__sflush_r+0x78>
 8007cca:	1c42      	adds	r2, r0, #1
 8007ccc:	d101      	bne.n	8007cd2 <__sflush_r+0x76>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	b903      	cbnz	r3, 8007cd4 <__sflush_r+0x78>
 8007cd2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007cd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007cd6:	602f      	str	r7, [r5, #0]
 8007cd8:	b1b9      	cbz	r1, 8007d0a <__sflush_r+0xae>
 8007cda:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007cde:	4299      	cmp	r1, r3
 8007ce0:	d002      	beq.n	8007ce8 <__sflush_r+0x8c>
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	f7ff f9e8 	bl	80070b8 <_free_r>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	6363      	str	r3, [r4, #52]	@ 0x34
 8007cec:	e00d      	b.n	8007d0a <__sflush_r+0xae>
 8007cee:	2301      	movs	r3, #1
 8007cf0:	4628      	mov	r0, r5
 8007cf2:	47b0      	blx	r6
 8007cf4:	4602      	mov	r2, r0
 8007cf6:	1c50      	adds	r0, r2, #1
 8007cf8:	d1c9      	bne.n	8007c8e <__sflush_r+0x32>
 8007cfa:	682b      	ldr	r3, [r5, #0]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0c6      	beq.n	8007c8e <__sflush_r+0x32>
 8007d00:	2b1d      	cmp	r3, #29
 8007d02:	d001      	beq.n	8007d08 <__sflush_r+0xac>
 8007d04:	2b16      	cmp	r3, #22
 8007d06:	d11e      	bne.n	8007d46 <__sflush_r+0xea>
 8007d08:	602f      	str	r7, [r5, #0]
 8007d0a:	2000      	movs	r0, #0
 8007d0c:	e022      	b.n	8007d54 <__sflush_r+0xf8>
 8007d0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d12:	b21b      	sxth	r3, r3
 8007d14:	e01b      	b.n	8007d4e <__sflush_r+0xf2>
 8007d16:	690f      	ldr	r7, [r1, #16]
 8007d18:	2f00      	cmp	r7, #0
 8007d1a:	d0f6      	beq.n	8007d0a <__sflush_r+0xae>
 8007d1c:	0793      	lsls	r3, r2, #30
 8007d1e:	680e      	ldr	r6, [r1, #0]
 8007d20:	bf08      	it	eq
 8007d22:	694b      	ldreq	r3, [r1, #20]
 8007d24:	600f      	str	r7, [r1, #0]
 8007d26:	bf18      	it	ne
 8007d28:	2300      	movne	r3, #0
 8007d2a:	eba6 0807 	sub.w	r8, r6, r7
 8007d2e:	608b      	str	r3, [r1, #8]
 8007d30:	f1b8 0f00 	cmp.w	r8, #0
 8007d34:	dde9      	ble.n	8007d0a <__sflush_r+0xae>
 8007d36:	6a21      	ldr	r1, [r4, #32]
 8007d38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007d3a:	4643      	mov	r3, r8
 8007d3c:	463a      	mov	r2, r7
 8007d3e:	4628      	mov	r0, r5
 8007d40:	47b0      	blx	r6
 8007d42:	2800      	cmp	r0, #0
 8007d44:	dc08      	bgt.n	8007d58 <__sflush_r+0xfc>
 8007d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d4e:	81a3      	strh	r3, [r4, #12]
 8007d50:	f04f 30ff 	mov.w	r0, #4294967295
 8007d54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d58:	4407      	add	r7, r0
 8007d5a:	eba8 0800 	sub.w	r8, r8, r0
 8007d5e:	e7e7      	b.n	8007d30 <__sflush_r+0xd4>
 8007d60:	20400001 	.word	0x20400001

08007d64 <_fflush_r>:
 8007d64:	b538      	push	{r3, r4, r5, lr}
 8007d66:	690b      	ldr	r3, [r1, #16]
 8007d68:	4605      	mov	r5, r0
 8007d6a:	460c      	mov	r4, r1
 8007d6c:	b913      	cbnz	r3, 8007d74 <_fflush_r+0x10>
 8007d6e:	2500      	movs	r5, #0
 8007d70:	4628      	mov	r0, r5
 8007d72:	bd38      	pop	{r3, r4, r5, pc}
 8007d74:	b118      	cbz	r0, 8007d7e <_fflush_r+0x1a>
 8007d76:	6a03      	ldr	r3, [r0, #32]
 8007d78:	b90b      	cbnz	r3, 8007d7e <_fflush_r+0x1a>
 8007d7a:	f7fe fa15 	bl	80061a8 <__sinit>
 8007d7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d0f3      	beq.n	8007d6e <_fflush_r+0xa>
 8007d86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007d88:	07d0      	lsls	r0, r2, #31
 8007d8a:	d404      	bmi.n	8007d96 <_fflush_r+0x32>
 8007d8c:	0599      	lsls	r1, r3, #22
 8007d8e:	d402      	bmi.n	8007d96 <_fflush_r+0x32>
 8007d90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d92:	f7fe fb36 	bl	8006402 <__retarget_lock_acquire_recursive>
 8007d96:	4628      	mov	r0, r5
 8007d98:	4621      	mov	r1, r4
 8007d9a:	f7ff ff5f 	bl	8007c5c <__sflush_r>
 8007d9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007da0:	07da      	lsls	r2, r3, #31
 8007da2:	4605      	mov	r5, r0
 8007da4:	d4e4      	bmi.n	8007d70 <_fflush_r+0xc>
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	059b      	lsls	r3, r3, #22
 8007daa:	d4e1      	bmi.n	8007d70 <_fflush_r+0xc>
 8007dac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dae:	f7fe fb29 	bl	8006404 <__retarget_lock_release_recursive>
 8007db2:	e7dd      	b.n	8007d70 <_fflush_r+0xc>

08007db4 <memmove>:
 8007db4:	4288      	cmp	r0, r1
 8007db6:	b510      	push	{r4, lr}
 8007db8:	eb01 0402 	add.w	r4, r1, r2
 8007dbc:	d902      	bls.n	8007dc4 <memmove+0x10>
 8007dbe:	4284      	cmp	r4, r0
 8007dc0:	4623      	mov	r3, r4
 8007dc2:	d807      	bhi.n	8007dd4 <memmove+0x20>
 8007dc4:	1e43      	subs	r3, r0, #1
 8007dc6:	42a1      	cmp	r1, r4
 8007dc8:	d008      	beq.n	8007ddc <memmove+0x28>
 8007dca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007dce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007dd2:	e7f8      	b.n	8007dc6 <memmove+0x12>
 8007dd4:	4402      	add	r2, r0
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	428a      	cmp	r2, r1
 8007dda:	d100      	bne.n	8007dde <memmove+0x2a>
 8007ddc:	bd10      	pop	{r4, pc}
 8007dde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007de2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007de6:	e7f7      	b.n	8007dd8 <memmove+0x24>

08007de8 <_sbrk_r>:
 8007de8:	b538      	push	{r3, r4, r5, lr}
 8007dea:	4d06      	ldr	r5, [pc, #24]	@ (8007e04 <_sbrk_r+0x1c>)
 8007dec:	2300      	movs	r3, #0
 8007dee:	4604      	mov	r4, r0
 8007df0:	4608      	mov	r0, r1
 8007df2:	602b      	str	r3, [r5, #0]
 8007df4:	f7f9 fc5c 	bl	80016b0 <_sbrk>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d102      	bne.n	8007e02 <_sbrk_r+0x1a>
 8007dfc:	682b      	ldr	r3, [r5, #0]
 8007dfe:	b103      	cbz	r3, 8007e02 <_sbrk_r+0x1a>
 8007e00:	6023      	str	r3, [r4, #0]
 8007e02:	bd38      	pop	{r3, r4, r5, pc}
 8007e04:	20000470 	.word	0x20000470

08007e08 <memcpy>:
 8007e08:	440a      	add	r2, r1
 8007e0a:	4291      	cmp	r1, r2
 8007e0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e10:	d100      	bne.n	8007e14 <memcpy+0xc>
 8007e12:	4770      	bx	lr
 8007e14:	b510      	push	{r4, lr}
 8007e16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e1e:	4291      	cmp	r1, r2
 8007e20:	d1f9      	bne.n	8007e16 <memcpy+0xe>
 8007e22:	bd10      	pop	{r4, pc}

08007e24 <__assert_func>:
 8007e24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007e26:	4614      	mov	r4, r2
 8007e28:	461a      	mov	r2, r3
 8007e2a:	4b09      	ldr	r3, [pc, #36]	@ (8007e50 <__assert_func+0x2c>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4605      	mov	r5, r0
 8007e30:	68d8      	ldr	r0, [r3, #12]
 8007e32:	b14c      	cbz	r4, 8007e48 <__assert_func+0x24>
 8007e34:	4b07      	ldr	r3, [pc, #28]	@ (8007e54 <__assert_func+0x30>)
 8007e36:	9100      	str	r1, [sp, #0]
 8007e38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007e3c:	4906      	ldr	r1, [pc, #24]	@ (8007e58 <__assert_func+0x34>)
 8007e3e:	462b      	mov	r3, r5
 8007e40:	f000 f870 	bl	8007f24 <fiprintf>
 8007e44:	f000 f880 	bl	8007f48 <abort>
 8007e48:	4b04      	ldr	r3, [pc, #16]	@ (8007e5c <__assert_func+0x38>)
 8007e4a:	461c      	mov	r4, r3
 8007e4c:	e7f3      	b.n	8007e36 <__assert_func+0x12>
 8007e4e:	bf00      	nop
 8007e50:	20000018 	.word	0x20000018
 8007e54:	08008651 	.word	0x08008651
 8007e58:	0800865e 	.word	0x0800865e
 8007e5c:	0800868c 	.word	0x0800868c

08007e60 <_calloc_r>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	fba1 5402 	umull	r5, r4, r1, r2
 8007e66:	b934      	cbnz	r4, 8007e76 <_calloc_r+0x16>
 8007e68:	4629      	mov	r1, r5
 8007e6a:	f7ff f999 	bl	80071a0 <_malloc_r>
 8007e6e:	4606      	mov	r6, r0
 8007e70:	b928      	cbnz	r0, 8007e7e <_calloc_r+0x1e>
 8007e72:	4630      	mov	r0, r6
 8007e74:	bd70      	pop	{r4, r5, r6, pc}
 8007e76:	220c      	movs	r2, #12
 8007e78:	6002      	str	r2, [r0, #0]
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	e7f9      	b.n	8007e72 <_calloc_r+0x12>
 8007e7e:	462a      	mov	r2, r5
 8007e80:	4621      	mov	r1, r4
 8007e82:	f7fe fa40 	bl	8006306 <memset>
 8007e86:	e7f4      	b.n	8007e72 <_calloc_r+0x12>

08007e88 <__ascii_mbtowc>:
 8007e88:	b082      	sub	sp, #8
 8007e8a:	b901      	cbnz	r1, 8007e8e <__ascii_mbtowc+0x6>
 8007e8c:	a901      	add	r1, sp, #4
 8007e8e:	b142      	cbz	r2, 8007ea2 <__ascii_mbtowc+0x1a>
 8007e90:	b14b      	cbz	r3, 8007ea6 <__ascii_mbtowc+0x1e>
 8007e92:	7813      	ldrb	r3, [r2, #0]
 8007e94:	600b      	str	r3, [r1, #0]
 8007e96:	7812      	ldrb	r2, [r2, #0]
 8007e98:	1e10      	subs	r0, r2, #0
 8007e9a:	bf18      	it	ne
 8007e9c:	2001      	movne	r0, #1
 8007e9e:	b002      	add	sp, #8
 8007ea0:	4770      	bx	lr
 8007ea2:	4610      	mov	r0, r2
 8007ea4:	e7fb      	b.n	8007e9e <__ascii_mbtowc+0x16>
 8007ea6:	f06f 0001 	mvn.w	r0, #1
 8007eaa:	e7f8      	b.n	8007e9e <__ascii_mbtowc+0x16>

08007eac <_realloc_r>:
 8007eac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eb0:	4607      	mov	r7, r0
 8007eb2:	4614      	mov	r4, r2
 8007eb4:	460d      	mov	r5, r1
 8007eb6:	b921      	cbnz	r1, 8007ec2 <_realloc_r+0x16>
 8007eb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ebc:	4611      	mov	r1, r2
 8007ebe:	f7ff b96f 	b.w	80071a0 <_malloc_r>
 8007ec2:	b92a      	cbnz	r2, 8007ed0 <_realloc_r+0x24>
 8007ec4:	f7ff f8f8 	bl	80070b8 <_free_r>
 8007ec8:	4625      	mov	r5, r4
 8007eca:	4628      	mov	r0, r5
 8007ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ed0:	f000 f841 	bl	8007f56 <_malloc_usable_size_r>
 8007ed4:	4284      	cmp	r4, r0
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	d802      	bhi.n	8007ee0 <_realloc_r+0x34>
 8007eda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007ede:	d8f4      	bhi.n	8007eca <_realloc_r+0x1e>
 8007ee0:	4621      	mov	r1, r4
 8007ee2:	4638      	mov	r0, r7
 8007ee4:	f7ff f95c 	bl	80071a0 <_malloc_r>
 8007ee8:	4680      	mov	r8, r0
 8007eea:	b908      	cbnz	r0, 8007ef0 <_realloc_r+0x44>
 8007eec:	4645      	mov	r5, r8
 8007eee:	e7ec      	b.n	8007eca <_realloc_r+0x1e>
 8007ef0:	42b4      	cmp	r4, r6
 8007ef2:	4622      	mov	r2, r4
 8007ef4:	4629      	mov	r1, r5
 8007ef6:	bf28      	it	cs
 8007ef8:	4632      	movcs	r2, r6
 8007efa:	f7ff ff85 	bl	8007e08 <memcpy>
 8007efe:	4629      	mov	r1, r5
 8007f00:	4638      	mov	r0, r7
 8007f02:	f7ff f8d9 	bl	80070b8 <_free_r>
 8007f06:	e7f1      	b.n	8007eec <_realloc_r+0x40>

08007f08 <__ascii_wctomb>:
 8007f08:	4603      	mov	r3, r0
 8007f0a:	4608      	mov	r0, r1
 8007f0c:	b141      	cbz	r1, 8007f20 <__ascii_wctomb+0x18>
 8007f0e:	2aff      	cmp	r2, #255	@ 0xff
 8007f10:	d904      	bls.n	8007f1c <__ascii_wctomb+0x14>
 8007f12:	228a      	movs	r2, #138	@ 0x8a
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	f04f 30ff 	mov.w	r0, #4294967295
 8007f1a:	4770      	bx	lr
 8007f1c:	700a      	strb	r2, [r1, #0]
 8007f1e:	2001      	movs	r0, #1
 8007f20:	4770      	bx	lr
	...

08007f24 <fiprintf>:
 8007f24:	b40e      	push	{r1, r2, r3}
 8007f26:	b503      	push	{r0, r1, lr}
 8007f28:	4601      	mov	r1, r0
 8007f2a:	ab03      	add	r3, sp, #12
 8007f2c:	4805      	ldr	r0, [pc, #20]	@ (8007f44 <fiprintf+0x20>)
 8007f2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f32:	6800      	ldr	r0, [r0, #0]
 8007f34:	9301      	str	r3, [sp, #4]
 8007f36:	f000 f83f 	bl	8007fb8 <_vfiprintf_r>
 8007f3a:	b002      	add	sp, #8
 8007f3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f40:	b003      	add	sp, #12
 8007f42:	4770      	bx	lr
 8007f44:	20000018 	.word	0x20000018

08007f48 <abort>:
 8007f48:	b508      	push	{r3, lr}
 8007f4a:	2006      	movs	r0, #6
 8007f4c:	f000 fa08 	bl	8008360 <raise>
 8007f50:	2001      	movs	r0, #1
 8007f52:	f7f9 fb35 	bl	80015c0 <_exit>

08007f56 <_malloc_usable_size_r>:
 8007f56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f5a:	1f18      	subs	r0, r3, #4
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	bfbc      	itt	lt
 8007f60:	580b      	ldrlt	r3, [r1, r0]
 8007f62:	18c0      	addlt	r0, r0, r3
 8007f64:	4770      	bx	lr

08007f66 <__sfputc_r>:
 8007f66:	6893      	ldr	r3, [r2, #8]
 8007f68:	3b01      	subs	r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	b410      	push	{r4}
 8007f6e:	6093      	str	r3, [r2, #8]
 8007f70:	da08      	bge.n	8007f84 <__sfputc_r+0x1e>
 8007f72:	6994      	ldr	r4, [r2, #24]
 8007f74:	42a3      	cmp	r3, r4
 8007f76:	db01      	blt.n	8007f7c <__sfputc_r+0x16>
 8007f78:	290a      	cmp	r1, #10
 8007f7a:	d103      	bne.n	8007f84 <__sfputc_r+0x1e>
 8007f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f80:	f000 b932 	b.w	80081e8 <__swbuf_r>
 8007f84:	6813      	ldr	r3, [r2, #0]
 8007f86:	1c58      	adds	r0, r3, #1
 8007f88:	6010      	str	r0, [r2, #0]
 8007f8a:	7019      	strb	r1, [r3, #0]
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f92:	4770      	bx	lr

08007f94 <__sfputs_r>:
 8007f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f96:	4606      	mov	r6, r0
 8007f98:	460f      	mov	r7, r1
 8007f9a:	4614      	mov	r4, r2
 8007f9c:	18d5      	adds	r5, r2, r3
 8007f9e:	42ac      	cmp	r4, r5
 8007fa0:	d101      	bne.n	8007fa6 <__sfputs_r+0x12>
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	e007      	b.n	8007fb6 <__sfputs_r+0x22>
 8007fa6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007faa:	463a      	mov	r2, r7
 8007fac:	4630      	mov	r0, r6
 8007fae:	f7ff ffda 	bl	8007f66 <__sfputc_r>
 8007fb2:	1c43      	adds	r3, r0, #1
 8007fb4:	d1f3      	bne.n	8007f9e <__sfputs_r+0xa>
 8007fb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007fb8 <_vfiprintf_r>:
 8007fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fbc:	460d      	mov	r5, r1
 8007fbe:	b09d      	sub	sp, #116	@ 0x74
 8007fc0:	4614      	mov	r4, r2
 8007fc2:	4698      	mov	r8, r3
 8007fc4:	4606      	mov	r6, r0
 8007fc6:	b118      	cbz	r0, 8007fd0 <_vfiprintf_r+0x18>
 8007fc8:	6a03      	ldr	r3, [r0, #32]
 8007fca:	b90b      	cbnz	r3, 8007fd0 <_vfiprintf_r+0x18>
 8007fcc:	f7fe f8ec 	bl	80061a8 <__sinit>
 8007fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fd2:	07d9      	lsls	r1, r3, #31
 8007fd4:	d405      	bmi.n	8007fe2 <_vfiprintf_r+0x2a>
 8007fd6:	89ab      	ldrh	r3, [r5, #12]
 8007fd8:	059a      	lsls	r2, r3, #22
 8007fda:	d402      	bmi.n	8007fe2 <_vfiprintf_r+0x2a>
 8007fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fde:	f7fe fa10 	bl	8006402 <__retarget_lock_acquire_recursive>
 8007fe2:	89ab      	ldrh	r3, [r5, #12]
 8007fe4:	071b      	lsls	r3, r3, #28
 8007fe6:	d501      	bpl.n	8007fec <_vfiprintf_r+0x34>
 8007fe8:	692b      	ldr	r3, [r5, #16]
 8007fea:	b99b      	cbnz	r3, 8008014 <_vfiprintf_r+0x5c>
 8007fec:	4629      	mov	r1, r5
 8007fee:	4630      	mov	r0, r6
 8007ff0:	f000 f938 	bl	8008264 <__swsetup_r>
 8007ff4:	b170      	cbz	r0, 8008014 <_vfiprintf_r+0x5c>
 8007ff6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007ff8:	07dc      	lsls	r4, r3, #31
 8007ffa:	d504      	bpl.n	8008006 <_vfiprintf_r+0x4e>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	b01d      	add	sp, #116	@ 0x74
 8008002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008006:	89ab      	ldrh	r3, [r5, #12]
 8008008:	0598      	lsls	r0, r3, #22
 800800a:	d4f7      	bmi.n	8007ffc <_vfiprintf_r+0x44>
 800800c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800800e:	f7fe f9f9 	bl	8006404 <__retarget_lock_release_recursive>
 8008012:	e7f3      	b.n	8007ffc <_vfiprintf_r+0x44>
 8008014:	2300      	movs	r3, #0
 8008016:	9309      	str	r3, [sp, #36]	@ 0x24
 8008018:	2320      	movs	r3, #32
 800801a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800801e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008022:	2330      	movs	r3, #48	@ 0x30
 8008024:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80081d4 <_vfiprintf_r+0x21c>
 8008028:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800802c:	f04f 0901 	mov.w	r9, #1
 8008030:	4623      	mov	r3, r4
 8008032:	469a      	mov	sl, r3
 8008034:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008038:	b10a      	cbz	r2, 800803e <_vfiprintf_r+0x86>
 800803a:	2a25      	cmp	r2, #37	@ 0x25
 800803c:	d1f9      	bne.n	8008032 <_vfiprintf_r+0x7a>
 800803e:	ebba 0b04 	subs.w	fp, sl, r4
 8008042:	d00b      	beq.n	800805c <_vfiprintf_r+0xa4>
 8008044:	465b      	mov	r3, fp
 8008046:	4622      	mov	r2, r4
 8008048:	4629      	mov	r1, r5
 800804a:	4630      	mov	r0, r6
 800804c:	f7ff ffa2 	bl	8007f94 <__sfputs_r>
 8008050:	3001      	adds	r0, #1
 8008052:	f000 80a7 	beq.w	80081a4 <_vfiprintf_r+0x1ec>
 8008056:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008058:	445a      	add	r2, fp
 800805a:	9209      	str	r2, [sp, #36]	@ 0x24
 800805c:	f89a 3000 	ldrb.w	r3, [sl]
 8008060:	2b00      	cmp	r3, #0
 8008062:	f000 809f 	beq.w	80081a4 <_vfiprintf_r+0x1ec>
 8008066:	2300      	movs	r3, #0
 8008068:	f04f 32ff 	mov.w	r2, #4294967295
 800806c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008070:	f10a 0a01 	add.w	sl, sl, #1
 8008074:	9304      	str	r3, [sp, #16]
 8008076:	9307      	str	r3, [sp, #28]
 8008078:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800807c:	931a      	str	r3, [sp, #104]	@ 0x68
 800807e:	4654      	mov	r4, sl
 8008080:	2205      	movs	r2, #5
 8008082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008086:	4853      	ldr	r0, [pc, #332]	@ (80081d4 <_vfiprintf_r+0x21c>)
 8008088:	f7f8 f8a2 	bl	80001d0 <memchr>
 800808c:	9a04      	ldr	r2, [sp, #16]
 800808e:	b9d8      	cbnz	r0, 80080c8 <_vfiprintf_r+0x110>
 8008090:	06d1      	lsls	r1, r2, #27
 8008092:	bf44      	itt	mi
 8008094:	2320      	movmi	r3, #32
 8008096:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800809a:	0713      	lsls	r3, r2, #28
 800809c:	bf44      	itt	mi
 800809e:	232b      	movmi	r3, #43	@ 0x2b
 80080a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80080a4:	f89a 3000 	ldrb.w	r3, [sl]
 80080a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80080aa:	d015      	beq.n	80080d8 <_vfiprintf_r+0x120>
 80080ac:	9a07      	ldr	r2, [sp, #28]
 80080ae:	4654      	mov	r4, sl
 80080b0:	2000      	movs	r0, #0
 80080b2:	f04f 0c0a 	mov.w	ip, #10
 80080b6:	4621      	mov	r1, r4
 80080b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080bc:	3b30      	subs	r3, #48	@ 0x30
 80080be:	2b09      	cmp	r3, #9
 80080c0:	d94b      	bls.n	800815a <_vfiprintf_r+0x1a2>
 80080c2:	b1b0      	cbz	r0, 80080f2 <_vfiprintf_r+0x13a>
 80080c4:	9207      	str	r2, [sp, #28]
 80080c6:	e014      	b.n	80080f2 <_vfiprintf_r+0x13a>
 80080c8:	eba0 0308 	sub.w	r3, r0, r8
 80080cc:	fa09 f303 	lsl.w	r3, r9, r3
 80080d0:	4313      	orrs	r3, r2
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	46a2      	mov	sl, r4
 80080d6:	e7d2      	b.n	800807e <_vfiprintf_r+0xc6>
 80080d8:	9b03      	ldr	r3, [sp, #12]
 80080da:	1d19      	adds	r1, r3, #4
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	9103      	str	r1, [sp, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	bfbb      	ittet	lt
 80080e4:	425b      	neglt	r3, r3
 80080e6:	f042 0202 	orrlt.w	r2, r2, #2
 80080ea:	9307      	strge	r3, [sp, #28]
 80080ec:	9307      	strlt	r3, [sp, #28]
 80080ee:	bfb8      	it	lt
 80080f0:	9204      	strlt	r2, [sp, #16]
 80080f2:	7823      	ldrb	r3, [r4, #0]
 80080f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80080f6:	d10a      	bne.n	800810e <_vfiprintf_r+0x156>
 80080f8:	7863      	ldrb	r3, [r4, #1]
 80080fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80080fc:	d132      	bne.n	8008164 <_vfiprintf_r+0x1ac>
 80080fe:	9b03      	ldr	r3, [sp, #12]
 8008100:	1d1a      	adds	r2, r3, #4
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	9203      	str	r2, [sp, #12]
 8008106:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800810a:	3402      	adds	r4, #2
 800810c:	9305      	str	r3, [sp, #20]
 800810e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80081e4 <_vfiprintf_r+0x22c>
 8008112:	7821      	ldrb	r1, [r4, #0]
 8008114:	2203      	movs	r2, #3
 8008116:	4650      	mov	r0, sl
 8008118:	f7f8 f85a 	bl	80001d0 <memchr>
 800811c:	b138      	cbz	r0, 800812e <_vfiprintf_r+0x176>
 800811e:	9b04      	ldr	r3, [sp, #16]
 8008120:	eba0 000a 	sub.w	r0, r0, sl
 8008124:	2240      	movs	r2, #64	@ 0x40
 8008126:	4082      	lsls	r2, r0
 8008128:	4313      	orrs	r3, r2
 800812a:	3401      	adds	r4, #1
 800812c:	9304      	str	r3, [sp, #16]
 800812e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008132:	4829      	ldr	r0, [pc, #164]	@ (80081d8 <_vfiprintf_r+0x220>)
 8008134:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008138:	2206      	movs	r2, #6
 800813a:	f7f8 f849 	bl	80001d0 <memchr>
 800813e:	2800      	cmp	r0, #0
 8008140:	d03f      	beq.n	80081c2 <_vfiprintf_r+0x20a>
 8008142:	4b26      	ldr	r3, [pc, #152]	@ (80081dc <_vfiprintf_r+0x224>)
 8008144:	bb1b      	cbnz	r3, 800818e <_vfiprintf_r+0x1d6>
 8008146:	9b03      	ldr	r3, [sp, #12]
 8008148:	3307      	adds	r3, #7
 800814a:	f023 0307 	bic.w	r3, r3, #7
 800814e:	3308      	adds	r3, #8
 8008150:	9303      	str	r3, [sp, #12]
 8008152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008154:	443b      	add	r3, r7
 8008156:	9309      	str	r3, [sp, #36]	@ 0x24
 8008158:	e76a      	b.n	8008030 <_vfiprintf_r+0x78>
 800815a:	fb0c 3202 	mla	r2, ip, r2, r3
 800815e:	460c      	mov	r4, r1
 8008160:	2001      	movs	r0, #1
 8008162:	e7a8      	b.n	80080b6 <_vfiprintf_r+0xfe>
 8008164:	2300      	movs	r3, #0
 8008166:	3401      	adds	r4, #1
 8008168:	9305      	str	r3, [sp, #20]
 800816a:	4619      	mov	r1, r3
 800816c:	f04f 0c0a 	mov.w	ip, #10
 8008170:	4620      	mov	r0, r4
 8008172:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008176:	3a30      	subs	r2, #48	@ 0x30
 8008178:	2a09      	cmp	r2, #9
 800817a:	d903      	bls.n	8008184 <_vfiprintf_r+0x1cc>
 800817c:	2b00      	cmp	r3, #0
 800817e:	d0c6      	beq.n	800810e <_vfiprintf_r+0x156>
 8008180:	9105      	str	r1, [sp, #20]
 8008182:	e7c4      	b.n	800810e <_vfiprintf_r+0x156>
 8008184:	fb0c 2101 	mla	r1, ip, r1, r2
 8008188:	4604      	mov	r4, r0
 800818a:	2301      	movs	r3, #1
 800818c:	e7f0      	b.n	8008170 <_vfiprintf_r+0x1b8>
 800818e:	ab03      	add	r3, sp, #12
 8008190:	9300      	str	r3, [sp, #0]
 8008192:	462a      	mov	r2, r5
 8008194:	4b12      	ldr	r3, [pc, #72]	@ (80081e0 <_vfiprintf_r+0x228>)
 8008196:	a904      	add	r1, sp, #16
 8008198:	4630      	mov	r0, r6
 800819a:	f7fd fbc3 	bl	8005924 <_printf_float>
 800819e:	4607      	mov	r7, r0
 80081a0:	1c78      	adds	r0, r7, #1
 80081a2:	d1d6      	bne.n	8008152 <_vfiprintf_r+0x19a>
 80081a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80081a6:	07d9      	lsls	r1, r3, #31
 80081a8:	d405      	bmi.n	80081b6 <_vfiprintf_r+0x1fe>
 80081aa:	89ab      	ldrh	r3, [r5, #12]
 80081ac:	059a      	lsls	r2, r3, #22
 80081ae:	d402      	bmi.n	80081b6 <_vfiprintf_r+0x1fe>
 80081b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80081b2:	f7fe f927 	bl	8006404 <__retarget_lock_release_recursive>
 80081b6:	89ab      	ldrh	r3, [r5, #12]
 80081b8:	065b      	lsls	r3, r3, #25
 80081ba:	f53f af1f 	bmi.w	8007ffc <_vfiprintf_r+0x44>
 80081be:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80081c0:	e71e      	b.n	8008000 <_vfiprintf_r+0x48>
 80081c2:	ab03      	add	r3, sp, #12
 80081c4:	9300      	str	r3, [sp, #0]
 80081c6:	462a      	mov	r2, r5
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <_vfiprintf_r+0x228>)
 80081ca:	a904      	add	r1, sp, #16
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7fd fe41 	bl	8005e54 <_printf_i>
 80081d2:	e7e4      	b.n	800819e <_vfiprintf_r+0x1e6>
 80081d4:	08008636 	.word	0x08008636
 80081d8:	08008640 	.word	0x08008640
 80081dc:	08005925 	.word	0x08005925
 80081e0:	08007f95 	.word	0x08007f95
 80081e4:	0800863c 	.word	0x0800863c

080081e8 <__swbuf_r>:
 80081e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ea:	460e      	mov	r6, r1
 80081ec:	4614      	mov	r4, r2
 80081ee:	4605      	mov	r5, r0
 80081f0:	b118      	cbz	r0, 80081fa <__swbuf_r+0x12>
 80081f2:	6a03      	ldr	r3, [r0, #32]
 80081f4:	b90b      	cbnz	r3, 80081fa <__swbuf_r+0x12>
 80081f6:	f7fd ffd7 	bl	80061a8 <__sinit>
 80081fa:	69a3      	ldr	r3, [r4, #24]
 80081fc:	60a3      	str	r3, [r4, #8]
 80081fe:	89a3      	ldrh	r3, [r4, #12]
 8008200:	071a      	lsls	r2, r3, #28
 8008202:	d501      	bpl.n	8008208 <__swbuf_r+0x20>
 8008204:	6923      	ldr	r3, [r4, #16]
 8008206:	b943      	cbnz	r3, 800821a <__swbuf_r+0x32>
 8008208:	4621      	mov	r1, r4
 800820a:	4628      	mov	r0, r5
 800820c:	f000 f82a 	bl	8008264 <__swsetup_r>
 8008210:	b118      	cbz	r0, 800821a <__swbuf_r+0x32>
 8008212:	f04f 37ff 	mov.w	r7, #4294967295
 8008216:	4638      	mov	r0, r7
 8008218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	6922      	ldr	r2, [r4, #16]
 800821e:	1a98      	subs	r0, r3, r2
 8008220:	6963      	ldr	r3, [r4, #20]
 8008222:	b2f6      	uxtb	r6, r6
 8008224:	4283      	cmp	r3, r0
 8008226:	4637      	mov	r7, r6
 8008228:	dc05      	bgt.n	8008236 <__swbuf_r+0x4e>
 800822a:	4621      	mov	r1, r4
 800822c:	4628      	mov	r0, r5
 800822e:	f7ff fd99 	bl	8007d64 <_fflush_r>
 8008232:	2800      	cmp	r0, #0
 8008234:	d1ed      	bne.n	8008212 <__swbuf_r+0x2a>
 8008236:	68a3      	ldr	r3, [r4, #8]
 8008238:	3b01      	subs	r3, #1
 800823a:	60a3      	str	r3, [r4, #8]
 800823c:	6823      	ldr	r3, [r4, #0]
 800823e:	1c5a      	adds	r2, r3, #1
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	701e      	strb	r6, [r3, #0]
 8008244:	6962      	ldr	r2, [r4, #20]
 8008246:	1c43      	adds	r3, r0, #1
 8008248:	429a      	cmp	r2, r3
 800824a:	d004      	beq.n	8008256 <__swbuf_r+0x6e>
 800824c:	89a3      	ldrh	r3, [r4, #12]
 800824e:	07db      	lsls	r3, r3, #31
 8008250:	d5e1      	bpl.n	8008216 <__swbuf_r+0x2e>
 8008252:	2e0a      	cmp	r6, #10
 8008254:	d1df      	bne.n	8008216 <__swbuf_r+0x2e>
 8008256:	4621      	mov	r1, r4
 8008258:	4628      	mov	r0, r5
 800825a:	f7ff fd83 	bl	8007d64 <_fflush_r>
 800825e:	2800      	cmp	r0, #0
 8008260:	d0d9      	beq.n	8008216 <__swbuf_r+0x2e>
 8008262:	e7d6      	b.n	8008212 <__swbuf_r+0x2a>

08008264 <__swsetup_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4b29      	ldr	r3, [pc, #164]	@ (800830c <__swsetup_r+0xa8>)
 8008268:	4605      	mov	r5, r0
 800826a:	6818      	ldr	r0, [r3, #0]
 800826c:	460c      	mov	r4, r1
 800826e:	b118      	cbz	r0, 8008278 <__swsetup_r+0x14>
 8008270:	6a03      	ldr	r3, [r0, #32]
 8008272:	b90b      	cbnz	r3, 8008278 <__swsetup_r+0x14>
 8008274:	f7fd ff98 	bl	80061a8 <__sinit>
 8008278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800827c:	0719      	lsls	r1, r3, #28
 800827e:	d422      	bmi.n	80082c6 <__swsetup_r+0x62>
 8008280:	06da      	lsls	r2, r3, #27
 8008282:	d407      	bmi.n	8008294 <__swsetup_r+0x30>
 8008284:	2209      	movs	r2, #9
 8008286:	602a      	str	r2, [r5, #0]
 8008288:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800828c:	81a3      	strh	r3, [r4, #12]
 800828e:	f04f 30ff 	mov.w	r0, #4294967295
 8008292:	e033      	b.n	80082fc <__swsetup_r+0x98>
 8008294:	0758      	lsls	r0, r3, #29
 8008296:	d512      	bpl.n	80082be <__swsetup_r+0x5a>
 8008298:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800829a:	b141      	cbz	r1, 80082ae <__swsetup_r+0x4a>
 800829c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082a0:	4299      	cmp	r1, r3
 80082a2:	d002      	beq.n	80082aa <__swsetup_r+0x46>
 80082a4:	4628      	mov	r0, r5
 80082a6:	f7fe ff07 	bl	80070b8 <_free_r>
 80082aa:	2300      	movs	r3, #0
 80082ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80082b4:	81a3      	strh	r3, [r4, #12]
 80082b6:	2300      	movs	r3, #0
 80082b8:	6063      	str	r3, [r4, #4]
 80082ba:	6923      	ldr	r3, [r4, #16]
 80082bc:	6023      	str	r3, [r4, #0]
 80082be:	89a3      	ldrh	r3, [r4, #12]
 80082c0:	f043 0308 	orr.w	r3, r3, #8
 80082c4:	81a3      	strh	r3, [r4, #12]
 80082c6:	6923      	ldr	r3, [r4, #16]
 80082c8:	b94b      	cbnz	r3, 80082de <__swsetup_r+0x7a>
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80082d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082d4:	d003      	beq.n	80082de <__swsetup_r+0x7a>
 80082d6:	4621      	mov	r1, r4
 80082d8:	4628      	mov	r0, r5
 80082da:	f000 f883 	bl	80083e4 <__smakebuf_r>
 80082de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082e2:	f013 0201 	ands.w	r2, r3, #1
 80082e6:	d00a      	beq.n	80082fe <__swsetup_r+0x9a>
 80082e8:	2200      	movs	r2, #0
 80082ea:	60a2      	str	r2, [r4, #8]
 80082ec:	6962      	ldr	r2, [r4, #20]
 80082ee:	4252      	negs	r2, r2
 80082f0:	61a2      	str	r2, [r4, #24]
 80082f2:	6922      	ldr	r2, [r4, #16]
 80082f4:	b942      	cbnz	r2, 8008308 <__swsetup_r+0xa4>
 80082f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80082fa:	d1c5      	bne.n	8008288 <__swsetup_r+0x24>
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	0799      	lsls	r1, r3, #30
 8008300:	bf58      	it	pl
 8008302:	6962      	ldrpl	r2, [r4, #20]
 8008304:	60a2      	str	r2, [r4, #8]
 8008306:	e7f4      	b.n	80082f2 <__swsetup_r+0x8e>
 8008308:	2000      	movs	r0, #0
 800830a:	e7f7      	b.n	80082fc <__swsetup_r+0x98>
 800830c:	20000018 	.word	0x20000018

08008310 <_raise_r>:
 8008310:	291f      	cmp	r1, #31
 8008312:	b538      	push	{r3, r4, r5, lr}
 8008314:	4605      	mov	r5, r0
 8008316:	460c      	mov	r4, r1
 8008318:	d904      	bls.n	8008324 <_raise_r+0x14>
 800831a:	2316      	movs	r3, #22
 800831c:	6003      	str	r3, [r0, #0]
 800831e:	f04f 30ff 	mov.w	r0, #4294967295
 8008322:	bd38      	pop	{r3, r4, r5, pc}
 8008324:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008326:	b112      	cbz	r2, 800832e <_raise_r+0x1e>
 8008328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800832c:	b94b      	cbnz	r3, 8008342 <_raise_r+0x32>
 800832e:	4628      	mov	r0, r5
 8008330:	f000 f830 	bl	8008394 <_getpid_r>
 8008334:	4622      	mov	r2, r4
 8008336:	4601      	mov	r1, r0
 8008338:	4628      	mov	r0, r5
 800833a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800833e:	f000 b817 	b.w	8008370 <_kill_r>
 8008342:	2b01      	cmp	r3, #1
 8008344:	d00a      	beq.n	800835c <_raise_r+0x4c>
 8008346:	1c59      	adds	r1, r3, #1
 8008348:	d103      	bne.n	8008352 <_raise_r+0x42>
 800834a:	2316      	movs	r3, #22
 800834c:	6003      	str	r3, [r0, #0]
 800834e:	2001      	movs	r0, #1
 8008350:	e7e7      	b.n	8008322 <_raise_r+0x12>
 8008352:	2100      	movs	r1, #0
 8008354:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008358:	4620      	mov	r0, r4
 800835a:	4798      	blx	r3
 800835c:	2000      	movs	r0, #0
 800835e:	e7e0      	b.n	8008322 <_raise_r+0x12>

08008360 <raise>:
 8008360:	4b02      	ldr	r3, [pc, #8]	@ (800836c <raise+0xc>)
 8008362:	4601      	mov	r1, r0
 8008364:	6818      	ldr	r0, [r3, #0]
 8008366:	f7ff bfd3 	b.w	8008310 <_raise_r>
 800836a:	bf00      	nop
 800836c:	20000018 	.word	0x20000018

08008370 <_kill_r>:
 8008370:	b538      	push	{r3, r4, r5, lr}
 8008372:	4d07      	ldr	r5, [pc, #28]	@ (8008390 <_kill_r+0x20>)
 8008374:	2300      	movs	r3, #0
 8008376:	4604      	mov	r4, r0
 8008378:	4608      	mov	r0, r1
 800837a:	4611      	mov	r1, r2
 800837c:	602b      	str	r3, [r5, #0]
 800837e:	f7f9 f90f 	bl	80015a0 <_kill>
 8008382:	1c43      	adds	r3, r0, #1
 8008384:	d102      	bne.n	800838c <_kill_r+0x1c>
 8008386:	682b      	ldr	r3, [r5, #0]
 8008388:	b103      	cbz	r3, 800838c <_kill_r+0x1c>
 800838a:	6023      	str	r3, [r4, #0]
 800838c:	bd38      	pop	{r3, r4, r5, pc}
 800838e:	bf00      	nop
 8008390:	20000470 	.word	0x20000470

08008394 <_getpid_r>:
 8008394:	f7f9 b8fc 	b.w	8001590 <_getpid>

08008398 <__swhatbuf_r>:
 8008398:	b570      	push	{r4, r5, r6, lr}
 800839a:	460c      	mov	r4, r1
 800839c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083a0:	2900      	cmp	r1, #0
 80083a2:	b096      	sub	sp, #88	@ 0x58
 80083a4:	4615      	mov	r5, r2
 80083a6:	461e      	mov	r6, r3
 80083a8:	da0d      	bge.n	80083c6 <__swhatbuf_r+0x2e>
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80083b0:	f04f 0100 	mov.w	r1, #0
 80083b4:	bf14      	ite	ne
 80083b6:	2340      	movne	r3, #64	@ 0x40
 80083b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80083bc:	2000      	movs	r0, #0
 80083be:	6031      	str	r1, [r6, #0]
 80083c0:	602b      	str	r3, [r5, #0]
 80083c2:	b016      	add	sp, #88	@ 0x58
 80083c4:	bd70      	pop	{r4, r5, r6, pc}
 80083c6:	466a      	mov	r2, sp
 80083c8:	f000 f848 	bl	800845c <_fstat_r>
 80083cc:	2800      	cmp	r0, #0
 80083ce:	dbec      	blt.n	80083aa <__swhatbuf_r+0x12>
 80083d0:	9901      	ldr	r1, [sp, #4]
 80083d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80083d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80083da:	4259      	negs	r1, r3
 80083dc:	4159      	adcs	r1, r3
 80083de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80083e2:	e7eb      	b.n	80083bc <__swhatbuf_r+0x24>

080083e4 <__smakebuf_r>:
 80083e4:	898b      	ldrh	r3, [r1, #12]
 80083e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80083e8:	079d      	lsls	r5, r3, #30
 80083ea:	4606      	mov	r6, r0
 80083ec:	460c      	mov	r4, r1
 80083ee:	d507      	bpl.n	8008400 <__smakebuf_r+0x1c>
 80083f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	6123      	str	r3, [r4, #16]
 80083f8:	2301      	movs	r3, #1
 80083fa:	6163      	str	r3, [r4, #20]
 80083fc:	b003      	add	sp, #12
 80083fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008400:	ab01      	add	r3, sp, #4
 8008402:	466a      	mov	r2, sp
 8008404:	f7ff ffc8 	bl	8008398 <__swhatbuf_r>
 8008408:	9f00      	ldr	r7, [sp, #0]
 800840a:	4605      	mov	r5, r0
 800840c:	4639      	mov	r1, r7
 800840e:	4630      	mov	r0, r6
 8008410:	f7fe fec6 	bl	80071a0 <_malloc_r>
 8008414:	b948      	cbnz	r0, 800842a <__smakebuf_r+0x46>
 8008416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800841a:	059a      	lsls	r2, r3, #22
 800841c:	d4ee      	bmi.n	80083fc <__smakebuf_r+0x18>
 800841e:	f023 0303 	bic.w	r3, r3, #3
 8008422:	f043 0302 	orr.w	r3, r3, #2
 8008426:	81a3      	strh	r3, [r4, #12]
 8008428:	e7e2      	b.n	80083f0 <__smakebuf_r+0xc>
 800842a:	89a3      	ldrh	r3, [r4, #12]
 800842c:	6020      	str	r0, [r4, #0]
 800842e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008432:	81a3      	strh	r3, [r4, #12]
 8008434:	9b01      	ldr	r3, [sp, #4]
 8008436:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800843a:	b15b      	cbz	r3, 8008454 <__smakebuf_r+0x70>
 800843c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008440:	4630      	mov	r0, r6
 8008442:	f000 f81d 	bl	8008480 <_isatty_r>
 8008446:	b128      	cbz	r0, 8008454 <__smakebuf_r+0x70>
 8008448:	89a3      	ldrh	r3, [r4, #12]
 800844a:	f023 0303 	bic.w	r3, r3, #3
 800844e:	f043 0301 	orr.w	r3, r3, #1
 8008452:	81a3      	strh	r3, [r4, #12]
 8008454:	89a3      	ldrh	r3, [r4, #12]
 8008456:	431d      	orrs	r5, r3
 8008458:	81a5      	strh	r5, [r4, #12]
 800845a:	e7cf      	b.n	80083fc <__smakebuf_r+0x18>

0800845c <_fstat_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d07      	ldr	r5, [pc, #28]	@ (800847c <_fstat_r+0x20>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	4611      	mov	r1, r2
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f7f9 f8f9 	bl	8001660 <_fstat>
 800846e:	1c43      	adds	r3, r0, #1
 8008470:	d102      	bne.n	8008478 <_fstat_r+0x1c>
 8008472:	682b      	ldr	r3, [r5, #0]
 8008474:	b103      	cbz	r3, 8008478 <_fstat_r+0x1c>
 8008476:	6023      	str	r3, [r4, #0]
 8008478:	bd38      	pop	{r3, r4, r5, pc}
 800847a:	bf00      	nop
 800847c:	20000470 	.word	0x20000470

08008480 <_isatty_r>:
 8008480:	b538      	push	{r3, r4, r5, lr}
 8008482:	4d06      	ldr	r5, [pc, #24]	@ (800849c <_isatty_r+0x1c>)
 8008484:	2300      	movs	r3, #0
 8008486:	4604      	mov	r4, r0
 8008488:	4608      	mov	r0, r1
 800848a:	602b      	str	r3, [r5, #0]
 800848c:	f7f9 f8f8 	bl	8001680 <_isatty>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_isatty_r+0x1a>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_isatty_r+0x1a>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20000470 	.word	0x20000470

080084a0 <_init>:
 80084a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a2:	bf00      	nop
 80084a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084a6:	bc08      	pop	{r3}
 80084a8:	469e      	mov	lr, r3
 80084aa:	4770      	bx	lr

080084ac <_fini>:
 80084ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084ae:	bf00      	nop
 80084b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084b2:	bc08      	pop	{r3}
 80084b4:	469e      	mov	lr, r3
 80084b6:	4770      	bx	lr
