
RTC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048c0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08004a50  08004a50  00005a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b30  08004b30  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08004b30  08004b30  00005b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b38  08004b38  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b38  08004b38  00005b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004b3c  08004b3c  00005b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004b40  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000021c  20000068  08004ba8  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004ba8  00006284  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c149  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c14  00000000  00000000  000121e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a78  00000000  00000000  00013df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007fb  00000000  00000000  00014870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000272ab  00000000  00000000  0001506b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c739  00000000  00000000  0003c316  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef6de  00000000  00000000  00048a4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013812d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031c4  00000000  00000000  00138170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0013b334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004a38 	.word	0x08004a38

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08004a38 	.word	0x08004a38

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80005a4:	1d39      	adds	r1, r7, #4
 80005a6:	f04f 33ff 	mov.w	r3, #4294967295
 80005aa:	2201      	movs	r2, #1
 80005ac:	4803      	ldr	r0, [pc, #12]	@ (80005bc <__io_putchar+0x20>)
 80005ae:	f002 fd59 	bl	8003064 <HAL_UART_Transmit>
  return ch;
 80005b2:	687b      	ldr	r3, [r7, #4]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	200000a8 	.word	0x200000a8

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b5b0      	push	{r4, r5, r7, lr}
 80005c2:	b08a      	sub	sp, #40	@ 0x28
 80005c4:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */

	  RTC_TimeTypeDef sTime = {0};
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
	  RTC_DateTypeDef sDate = {0};
 80005d4:	2300      	movs	r3, #0
 80005d6:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f000 fb68 	bl	8000cac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005dc:	f000 f85a 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e0:	f000 f938 	bl	8000854 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005e4:	f000 f906 	bl	80007f4 <MX_USART2_UART_Init>
  MX_RTC_Init();
 80005e8:	f000 f8a8 	bl	800073c <MX_RTC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  // Set Time/Date if not initialized
  if ((RTC->ISR & RTC_ISR_INITS) == 0)
 80005ec:	4b25      	ldr	r3, [pc, #148]	@ (8000684 <main+0xc4>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	f003 0310 	and.w	r3, r3, #16
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d120      	bne.n	800063a <main+0x7a>
   {
     printf("RTC not yet initialized. Setting time and date...\r\n");
 80005f8:	4823      	ldr	r0, [pc, #140]	@ (8000688 <main+0xc8>)
 80005fa:	f003 fbbb 	bl	8003d74 <puts>

     sTime.Hours = 11;
 80005fe:	230b      	movs	r3, #11
 8000600:	713b      	strb	r3, [r7, #4]
     sTime.Minutes = 15;
 8000602:	230f      	movs	r3, #15
 8000604:	717b      	strb	r3, [r7, #5]
     sTime.Seconds = 30;
 8000606:	231e      	movs	r3, #30
 8000608:	71bb      	strb	r3, [r7, #6]
     sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800060a:	2300      	movs	r3, #0
 800060c:	613b      	str	r3, [r7, #16]
     sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800060e:	2300      	movs	r3, #0
 8000610:	617b      	str	r3, [r7, #20]
     HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	4619      	mov	r1, r3
 8000618:	481c      	ldr	r0, [pc, #112]	@ (800068c <main+0xcc>)
 800061a:	f002 fa37 	bl	8002a8c <HAL_RTC_SetTime>

     sDate.WeekDay = RTC_WEEKDAY_FRIDAY;
 800061e:	2305      	movs	r3, #5
 8000620:	703b      	strb	r3, [r7, #0]
     sDate.Month = RTC_MONTH_JULY;
 8000622:	2307      	movs	r3, #7
 8000624:	707b      	strb	r3, [r7, #1]
     sDate.Date = 29;
 8000626:	231d      	movs	r3, #29
 8000628:	70bb      	strb	r3, [r7, #2]
     sDate.Year = 25;
 800062a:	2319      	movs	r3, #25
 800062c:	70fb      	strb	r3, [r7, #3]
     HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800062e:	463b      	mov	r3, r7
 8000630:	2200      	movs	r2, #0
 8000632:	4619      	mov	r1, r3
 8000634:	4815      	ldr	r0, [pc, #84]	@ (800068c <main+0xcc>)
 8000636:	f002 fb22 	bl	8002c7e <HAL_RTC_SetDate>
   }

   while (1)
   {
     HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	2200      	movs	r2, #0
 800063e:	4619      	mov	r1, r3
 8000640:	4812      	ldr	r0, [pc, #72]	@ (800068c <main+0xcc>)
 8000642:	f002 fac0 	bl	8002bc6 <HAL_RTC_GetTime>
     HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);  // must follow GetTime
 8000646:	463b      	mov	r3, r7
 8000648:	2200      	movs	r2, #0
 800064a:	4619      	mov	r1, r3
 800064c:	480f      	ldr	r0, [pc, #60]	@ (800068c <main+0xcc>)
 800064e:	f002 fb9d 	bl	8002d8c <HAL_RTC_GetDate>

     printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
            sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000652:	793b      	ldrb	r3, [r7, #4]
     printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000654:	4618      	mov	r0, r3
            sTime.Hours, sTime.Minutes, sTime.Seconds,
 8000656:	797b      	ldrb	r3, [r7, #5]
     printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000658:	461c      	mov	r4, r3
            sTime.Hours, sTime.Minutes, sTime.Seconds,
 800065a:	79bb      	ldrb	r3, [r7, #6]
     printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 800065c:	461d      	mov	r5, r3
            sDate.Date, sDate.Month, sDate.Year);
 800065e:	78bb      	ldrb	r3, [r7, #2]
 8000660:	787a      	ldrb	r2, [r7, #1]
 8000662:	78f9      	ldrb	r1, [r7, #3]
     printf("Time: %02d:%02d:%02d | Date: %02d-%02d-20%02d\r\n",
 8000664:	9102      	str	r1, [sp, #8]
 8000666:	9201      	str	r2, [sp, #4]
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	462b      	mov	r3, r5
 800066c:	4622      	mov	r2, r4
 800066e:	4601      	mov	r1, r0
 8000670:	4807      	ldr	r0, [pc, #28]	@ (8000690 <main+0xd0>)
 8000672:	f003 fb17 	bl	8003ca4 <iprintf>

     HAL_Delay(1000);
 8000676:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800067a:	f000 fb93 	bl	8000da4 <HAL_Delay>
     HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800067e:	bf00      	nop
 8000680:	e7db      	b.n	800063a <main+0x7a>
 8000682:	bf00      	nop
 8000684:	40002800 	.word	0x40002800
 8000688:	08004a50 	.word	0x08004a50
 800068c:	20000084 	.word	0x20000084
 8000690:	08004a84 	.word	0x08004a84

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b096      	sub	sp, #88	@ 0x58
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	2244      	movs	r2, #68	@ 0x44
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f003 fc46 	bl	8003f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	463b      	mov	r3, r7
 80006aa:	2200      	movs	r2, #0
 80006ac:	601a      	str	r2, [r3, #0]
 80006ae:	605a      	str	r2, [r3, #4]
 80006b0:	609a      	str	r2, [r3, #8]
 80006b2:	60da      	str	r2, [r3, #12]
 80006b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80006ba:	f000 fe4d 	bl	8001358 <HAL_PWREx_ControlVoltageScaling>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006c4:	f000 f92c 	bl	8000920 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80006c8:	230a      	movs	r3, #10
 80006ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006d2:	2310      	movs	r3, #16
 80006d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006d6:	2301      	movs	r3, #1
 80006d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006da:	2302      	movs	r3, #2
 80006dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006de:	2302      	movs	r3, #2
 80006e0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006e2:	2301      	movs	r3, #1
 80006e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006e6:	230a      	movs	r3, #10
 80006e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ea:	2307      	movs	r3, #7
 80006ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006ee:	2302      	movs	r3, #2
 80006f0:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006f2:	2302      	movs	r3, #2
 80006f4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 fe82 	bl	8001404 <HAL_RCC_OscConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000706:	f000 f90b 	bl	8000920 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800070a:	230f      	movs	r3, #15
 800070c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800070e:	2303      	movs	r3, #3
 8000710:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000712:	2300      	movs	r3, #0
 8000714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000716:	2300      	movs	r3, #0
 8000718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800071e:	463b      	mov	r3, r7
 8000720:	2104      	movs	r1, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f001 fa4a 	bl	8001bbc <HAL_RCC_ClockConfig>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800072e:	f000 f8f7 	bl	8000920 <Error_Handler>
  }
}
 8000732:	bf00      	nop
 8000734:	3758      	adds	r7, #88	@ 0x58
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b086      	sub	sp, #24
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000742:	1d3b      	adds	r3, r7, #4
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000750:	2300      	movs	r3, #0
 8000752:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000754:	4b25      	ldr	r3, [pc, #148]	@ (80007ec <MX_RTC_Init+0xb0>)
 8000756:	4a26      	ldr	r2, [pc, #152]	@ (80007f0 <MX_RTC_Init+0xb4>)
 8000758:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800075a:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <MX_RTC_Init+0xb0>)
 800075c:	2200      	movs	r2, #0
 800075e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000760:	4b22      	ldr	r3, [pc, #136]	@ (80007ec <MX_RTC_Init+0xb0>)
 8000762:	227f      	movs	r2, #127	@ 0x7f
 8000764:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_RTC_Init+0xb0>)
 8000768:	22ff      	movs	r2, #255	@ 0xff
 800076a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800076c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_RTC_Init+0xb0>)
 800076e:	2200      	movs	r2, #0
 8000770:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000772:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <MX_RTC_Init+0xb0>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000778:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_RTC_Init+0xb0>)
 800077a:	2200      	movs	r2, #0
 800077c:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800077e:	4b1b      	ldr	r3, [pc, #108]	@ (80007ec <MX_RTC_Init+0xb0>)
 8000780:	2200      	movs	r2, #0
 8000782:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000784:	4819      	ldr	r0, [pc, #100]	@ (80007ec <MX_RTC_Init+0xb0>)
 8000786:	f002 f8f9 	bl	800297c <HAL_RTC_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_RTC_Init+0x58>
  {
    Error_Handler();
 8000790:	f000 f8c6 	bl	8000920 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000794:	2300      	movs	r3, #0
 8000796:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8000798:	2300      	movs	r3, #0
 800079a:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800079c:	2300      	movs	r3, #0
 800079e:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007a4:	2300      	movs	r3, #0
 80007a6:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2201      	movs	r2, #1
 80007ac:	4619      	mov	r1, r3
 80007ae:	480f      	ldr	r0, [pc, #60]	@ (80007ec <MX_RTC_Init+0xb0>)
 80007b0:	f002 f96c 	bl	8002a8c <HAL_RTC_SetTime>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d001      	beq.n	80007be <MX_RTC_Init+0x82>
  {
    Error_Handler();
 80007ba:	f000 f8b1 	bl	8000920 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80007be:	2301      	movs	r3, #1
 80007c0:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80007c2:	2301      	movs	r3, #1
 80007c4:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 80007c6:	2301      	movs	r3, #1
 80007c8:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80007ce:	463b      	mov	r3, r7
 80007d0:	2201      	movs	r2, #1
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_RTC_Init+0xb0>)
 80007d6:	f002 fa52 	bl	8002c7e <HAL_RTC_SetDate>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_RTC_Init+0xa8>
  {
    Error_Handler();
 80007e0:	f000 f89e 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3718      	adds	r7, #24
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000084 	.word	0x20000084
 80007f0:	40002800 	.word	0x40002800

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b14      	ldr	r3, [pc, #80]	@ (800084c <MX_USART2_UART_Init+0x58>)
 80007fa:	4a15      	ldr	r2, [pc, #84]	@ (8000850 <MX_USART2_UART_Init+0x5c>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007fe:	4b13      	ldr	r3, [pc, #76]	@ (800084c <MX_USART2_UART_Init+0x58>)
 8000800:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b11      	ldr	r3, [pc, #68]	@ (800084c <MX_USART2_UART_Init+0x58>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <MX_USART2_UART_Init+0x58>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0e      	ldr	r3, [pc, #56]	@ (800084c <MX_USART2_UART_Init+0x58>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b0c      	ldr	r3, [pc, #48]	@ (800084c <MX_USART2_UART_Init+0x58>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <MX_USART2_UART_Init+0x58>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b09      	ldr	r3, [pc, #36]	@ (800084c <MX_USART2_UART_Init+0x58>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800082a:	4b08      	ldr	r3, [pc, #32]	@ (800084c <MX_USART2_UART_Init+0x58>)
 800082c:	2200      	movs	r2, #0
 800082e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <MX_USART2_UART_Init+0x58>)
 8000832:	2200      	movs	r2, #0
 8000834:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	@ (800084c <MX_USART2_UART_Init+0x58>)
 8000838:	f002 fbc6 	bl	8002fc8 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000842:	f000 f86d 	bl	8000920 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200000a8 	.word	0x200000a8
 8000850:	40004400 	.word	0x40004400

08000854 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08a      	sub	sp, #40	@ 0x28
 8000858:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085a:	f107 0314 	add.w	r3, r7, #20
 800085e:	2200      	movs	r2, #0
 8000860:	601a      	str	r2, [r3, #0]
 8000862:	605a      	str	r2, [r3, #4]
 8000864:	609a      	str	r2, [r3, #8]
 8000866:	60da      	str	r2, [r3, #12]
 8000868:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800086a:	4b2b      	ldr	r3, [pc, #172]	@ (8000918 <MX_GPIO_Init+0xc4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800086e:	4a2a      	ldr	r2, [pc, #168]	@ (8000918 <MX_GPIO_Init+0xc4>)
 8000870:	f043 0304 	orr.w	r3, r3, #4
 8000874:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000876:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <MX_GPIO_Init+0xc4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	613b      	str	r3, [r7, #16]
 8000880:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000882:	4b25      	ldr	r3, [pc, #148]	@ (8000918 <MX_GPIO_Init+0xc4>)
 8000884:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000886:	4a24      	ldr	r2, [pc, #144]	@ (8000918 <MX_GPIO_Init+0xc4>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800088c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800088e:	4b22      	ldr	r3, [pc, #136]	@ (8000918 <MX_GPIO_Init+0xc4>)
 8000890:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b1f      	ldr	r3, [pc, #124]	@ (8000918 <MX_GPIO_Init+0xc4>)
 800089c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800089e:	4a1e      	ldr	r2, [pc, #120]	@ (8000918 <MX_GPIO_Init+0xc4>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008a6:	4b1c      	ldr	r3, [pc, #112]	@ (8000918 <MX_GPIO_Init+0xc4>)
 80008a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <MX_GPIO_Init+0xc4>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008b6:	4a18      	ldr	r2, [pc, #96]	@ (8000918 <MX_GPIO_Init+0xc4>)
 80008b8:	f043 0302 	orr.w	r3, r3, #2
 80008bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008be:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <MX_GPIO_Init+0xc4>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c2:	f003 0302 	and.w	r3, r3, #2
 80008c6:	607b      	str	r3, [r7, #4]
 80008c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008d2:	f000 fd1b 	bl	800130c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008dc:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <MX_GPIO_Init+0xc8>)
 80008ee:	f000 fb63 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f2:	2320      	movs	r3, #32
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090c:	f000 fb54 	bl	8000fb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000910:	bf00      	nop
 8000912:	3728      	adds	r7, #40	@ 0x28
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40021000 	.word	0x40021000
 800091c:	48000800 	.word	0x48000800

08000920 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000924:	b672      	cpsid	i
}
 8000926:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000928:	bf00      	nop
 800092a:	e7fd      	b.n	8000928 <Error_Handler+0x8>

0800092c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000932:	4b0f      	ldr	r3, [pc, #60]	@ (8000970 <HAL_MspInit+0x44>)
 8000934:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000936:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <HAL_MspInit+0x44>)
 8000938:	f043 0301 	orr.w	r3, r3, #1
 800093c:	6613      	str	r3, [r2, #96]	@ 0x60
 800093e:	4b0c      	ldr	r3, [pc, #48]	@ (8000970 <HAL_MspInit+0x44>)
 8000940:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000942:	f003 0301 	and.w	r3, r3, #1
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	4b09      	ldr	r3, [pc, #36]	@ (8000970 <HAL_MspInit+0x44>)
 800094c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800094e:	4a08      	ldr	r2, [pc, #32]	@ (8000970 <HAL_MspInit+0x44>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000954:	6593      	str	r3, [r2, #88]	@ 0x58
 8000956:	4b06      	ldr	r3, [pc, #24]	@ (8000970 <HAL_MspInit+0x44>)
 8000958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800095a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	40021000 	.word	0x40021000

08000974 <HAL_RTC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hrtc: RTC handle pointer
  * @retval None
  */
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b0a4      	sub	sp, #144	@ 0x90
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	2288      	movs	r2, #136	@ 0x88
 8000982:	2100      	movs	r1, #0
 8000984:	4618      	mov	r0, r3
 8000986:	f003 fad5 	bl	8003f34 <memset>
  if(hrtc->Instance==RTC)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4a10      	ldr	r2, [pc, #64]	@ (80009d0 <HAL_RTC_MspInit+0x5c>)
 8000990:	4293      	cmp	r3, r2
 8000992:	d118      	bne.n	80009c6 <HAL_RTC_MspInit+0x52>

    /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000994:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000998:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800099a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800099e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009a2:	f107 0308 	add.w	r3, r7, #8
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fb2c 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80009b2:	f7ff ffb5 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80009b6:	4b07      	ldr	r3, [pc, #28]	@ (80009d4 <HAL_RTC_MspInit+0x60>)
 80009b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80009bc:	4a05      	ldr	r2, [pc, #20]	@ (80009d4 <HAL_RTC_MspInit+0x60>)
 80009be:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* USER CODE END RTC_MspInit 1 */

  }

}
 80009c6:	bf00      	nop
 80009c8:	3790      	adds	r7, #144	@ 0x90
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40002800 	.word	0x40002800
 80009d4:	40021000 	.word	0x40021000

080009d8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b0ac      	sub	sp, #176	@ 0xb0
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009f0:	f107 0314 	add.w	r3, r7, #20
 80009f4:	2288      	movs	r2, #136	@ 0x88
 80009f6:	2100      	movs	r1, #0
 80009f8:	4618      	mov	r0, r3
 80009fa:	f003 fa9b 	bl	8003f34 <memset>
  if(huart->Instance==USART2)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	4a21      	ldr	r2, [pc, #132]	@ (8000a88 <HAL_UART_MspInit+0xb0>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d13b      	bne.n	8000a80 <HAL_UART_MspInit+0xa8>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a08:	2302      	movs	r3, #2
 8000a0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4618      	mov	r0, r3
 8000a16:	f001 faf5 	bl	8002004 <HAL_RCCEx_PeriphCLKConfig>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d001      	beq.n	8000a24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a20:	f7ff ff7e 	bl	8000920 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a24:	4b19      	ldr	r3, [pc, #100]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a28:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a2e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a30:	4b16      	ldr	r3, [pc, #88]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3c:	4b13      	ldr	r3, [pc, #76]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a40:	4a12      	ldr	r2, [pc, #72]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a42:	f043 0301 	orr.w	r3, r3, #1
 8000a46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a48:	4b10      	ldr	r3, [pc, #64]	@ (8000a8c <HAL_UART_MspInit+0xb4>)
 8000a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a4c:	f003 0301 	and.w	r3, r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000a54:	230c      	movs	r3, #12
 8000a56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a66:	2303      	movs	r3, #3
 8000a68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a6c:	2307      	movs	r3, #7
 8000a6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a72:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000a76:	4619      	mov	r1, r3
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a7c:	f000 fa9c 	bl	8000fb8 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a80:	bf00      	nop
 8000a82:	37b0      	adds	r7, #176	@ 0xb0
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40004400 	.word	0x40004400
 8000a8c:	40021000 	.word	0x40021000

08000a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a94:	bf00      	nop
 8000a96:	e7fd      	b.n	8000a94 <NMI_Handler+0x4>

08000a98 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9c:	bf00      	nop
 8000a9e:	e7fd      	b.n	8000a9c <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ae2:	b580      	push	{r7, lr}
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ae6:	f000 f93d 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}

08000aee <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b086      	sub	sp, #24
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	60f8      	str	r0, [r7, #12]
 8000af6:	60b9      	str	r1, [r7, #8]
 8000af8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000afa:	2300      	movs	r3, #0
 8000afc:	617b      	str	r3, [r7, #20]
 8000afe:	e00a      	b.n	8000b16 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b00:	f3af 8000 	nop.w
 8000b04:	4601      	mov	r1, r0
 8000b06:	68bb      	ldr	r3, [r7, #8]
 8000b08:	1c5a      	adds	r2, r3, #1
 8000b0a:	60ba      	str	r2, [r7, #8]
 8000b0c:	b2ca      	uxtb	r2, r1
 8000b0e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
 8000b16:	697a      	ldr	r2, [r7, #20]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	dbf0      	blt.n	8000b00 <_read+0x12>
  }

  return len;
 8000b1e:	687b      	ldr	r3, [r7, #4]
}
 8000b20:	4618      	mov	r0, r3
 8000b22:	3718      	adds	r7, #24
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b086      	sub	sp, #24
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
 8000b38:	e009      	b.n	8000b4e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000b3a:	68bb      	ldr	r3, [r7, #8]
 8000b3c:	1c5a      	adds	r2, r3, #1
 8000b3e:	60ba      	str	r2, [r7, #8]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	4618      	mov	r0, r3
 8000b44:	f7ff fd2a 	bl	800059c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b48:	697b      	ldr	r3, [r7, #20]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	617b      	str	r3, [r7, #20]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	429a      	cmp	r2, r3
 8000b54:	dbf1      	blt.n	8000b3a <_write+0x12>
  }
  return len;
 8000b56:	687b      	ldr	r3, [r7, #4]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}

08000b60 <_close>:

int _close(int file)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000b68:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	370c      	adds	r7, #12
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b88:	605a      	str	r2, [r3, #4]
  return 0;
 8000b8a:	2300      	movs	r3, #0
}
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <_isatty>:

int _isatty(int file)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ba0:	2301      	movs	r3, #1
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr

08000bae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	b085      	sub	sp, #20
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60f8      	str	r0, [r7, #12]
 8000bb6:	60b9      	str	r1, [r7, #8]
 8000bb8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000bba:	2300      	movs	r3, #0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bd0:	4a14      	ldr	r2, [pc, #80]	@ (8000c24 <_sbrk+0x5c>)
 8000bd2:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <_sbrk+0x60>)
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bdc:	4b13      	ldr	r3, [pc, #76]	@ (8000c2c <_sbrk+0x64>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d102      	bne.n	8000bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <_sbrk+0x64>)
 8000be6:	4a12      	ldr	r2, [pc, #72]	@ (8000c30 <_sbrk+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bea:	4b10      	ldr	r3, [pc, #64]	@ (8000c2c <_sbrk+0x64>)
 8000bec:	681a      	ldr	r2, [r3, #0]
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	693a      	ldr	r2, [r7, #16]
 8000bf4:	429a      	cmp	r2, r3
 8000bf6:	d207      	bcs.n	8000c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf8:	f003 f9ea 	bl	8003fd0 <__errno>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	220c      	movs	r2, #12
 8000c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c02:	f04f 33ff 	mov.w	r3, #4294967295
 8000c06:	e009      	b.n	8000c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <_sbrk+0x64>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c0e:	4b07      	ldr	r3, [pc, #28]	@ (8000c2c <_sbrk+0x64>)
 8000c10:	681a      	ldr	r2, [r3, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4413      	add	r3, r2
 8000c16:	4a05      	ldr	r2, [pc, #20]	@ (8000c2c <_sbrk+0x64>)
 8000c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c1a:	68fb      	ldr	r3, [r7, #12]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	20018000 	.word	0x20018000
 8000c28:	00000400 	.word	0x00000400
 8000c2c:	20000130 	.word	0x20000130
 8000c30:	20000288 	.word	0x20000288

08000c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c38:	4b06      	ldr	r3, [pc, #24]	@ (8000c54 <SystemInit+0x20>)
 8000c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c3e:	4a05      	ldr	r2, [pc, #20]	@ (8000c54 <SystemInit+0x20>)
 8000c40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000ed00 	.word	0xe000ed00

08000c58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c5c:	f7ff ffea 	bl	8000c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c60:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c62:	490d      	ldr	r1, [pc, #52]	@ (8000c98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c64:	4a0d      	ldr	r2, [pc, #52]	@ (8000c9c <LoopForever+0xe>)
  movs r3, #0
 8000c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c68:	e002      	b.n	8000c70 <LoopCopyDataInit>

08000c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c6e:	3304      	adds	r3, #4

08000c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c74:	d3f9      	bcc.n	8000c6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c76:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c78:	4c0a      	ldr	r4, [pc, #40]	@ (8000ca4 <LoopForever+0x16>)
  movs r3, #0
 8000c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c7c:	e001      	b.n	8000c82 <LoopFillZerobss>

08000c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c80:	3204      	adds	r2, #4

08000c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c84:	d3fb      	bcc.n	8000c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c86:	f003 f9a9 	bl	8003fdc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c8a:	f7ff fc99 	bl	80005c0 <main>

08000c8e <LoopForever>:

LoopForever:
    b LoopForever
 8000c8e:	e7fe      	b.n	8000c8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c90:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000c94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c98:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c9c:	08004b40 	.word	0x08004b40
  ldr r2, =_sbss
 8000ca0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ca4:	20000284 	.word	0x20000284

08000ca8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ca8:	e7fe      	b.n	8000ca8 <ADC1_2_IRQHandler>
	...

08000cac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <HAL_Init+0x3c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a0b      	ldr	r2, [pc, #44]	@ (8000ce8 <HAL_Init+0x3c>)
 8000cbc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000cc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cc2:	2003      	movs	r0, #3
 8000cc4:	f000 f944 	bl	8000f50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f000 f80f 	bl	8000cec <HAL_InitTick>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d002      	beq.n	8000cda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	71fb      	strb	r3, [r7, #7]
 8000cd8:	e001      	b.n	8000cde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cda:	f7ff fe27 	bl	800092c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cde:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	40022000 	.word	0x40022000

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf8:	4b17      	ldr	r3, [pc, #92]	@ (8000d58 <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d023      	beq.n	8000d48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d00:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <HAL_InitTick+0x70>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b14      	ldr	r3, [pc, #80]	@ (8000d58 <HAL_InitTick+0x6c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f941 	bl	8000f9e <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d809      	bhi.n	8000d3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f919 	bl	8000f66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d34:	4a0a      	ldr	r2, [pc, #40]	@ (8000d60 <HAL_InitTick+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e007      	b.n	8000d4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e004      	b.n	8000d4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e001      	b.n	8000d4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000008 	.word	0x20000008
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	20000004 	.word	0x20000004

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	@ (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	@ (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000008 	.word	0x20000008
 8000d88:	20000134 	.word	0x20000134

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	@ (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000134 	.word	0x20000134

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	20000008 	.word	0x20000008

08000dec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e02:	68ba      	ldr	r2, [r7, #8]
 8000e04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e1e:	4a04      	ldr	r2, [pc, #16]	@ (8000e30 <__NVIC_SetPriorityGrouping+0x44>)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	60d3      	str	r3, [r2, #12]
}
 8000e24:	bf00      	nop
 8000e26:	3714      	adds	r7, #20
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e38:	4b04      	ldr	r3, [pc, #16]	@ (8000e4c <__NVIC_GetPriorityGrouping+0x18>)
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	0a1b      	lsrs	r3, r3, #8
 8000e3e:	f003 0307 	and.w	r3, r3, #7
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr
 8000e4c:	e000ed00 	.word	0xe000ed00

08000e50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	4603      	mov	r3, r0
 8000e58:	6039      	str	r1, [r7, #0]
 8000e5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	db0a      	blt.n	8000e7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	490c      	ldr	r1, [pc, #48]	@ (8000e9c <__NVIC_SetPriority+0x4c>)
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	0112      	lsls	r2, r2, #4
 8000e70:	b2d2      	uxtb	r2, r2
 8000e72:	440b      	add	r3, r1
 8000e74:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e78:	e00a      	b.n	8000e90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4908      	ldr	r1, [pc, #32]	@ (8000ea0 <__NVIC_SetPriority+0x50>)
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	f003 030f 	and.w	r3, r3, #15
 8000e86:	3b04      	subs	r3, #4
 8000e88:	0112      	lsls	r2, r2, #4
 8000e8a:	b2d2      	uxtb	r2, r2
 8000e8c:	440b      	add	r3, r1
 8000e8e:	761a      	strb	r2, [r3, #24]
}
 8000e90:	bf00      	nop
 8000e92:	370c      	adds	r7, #12
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr
 8000e9c:	e000e100 	.word	0xe000e100
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b089      	sub	sp, #36	@ 0x24
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	60f8      	str	r0, [r7, #12]
 8000eac:	60b9      	str	r1, [r7, #8]
 8000eae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000eb8:	69fb      	ldr	r3, [r7, #28]
 8000eba:	f1c3 0307 	rsb	r3, r3, #7
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	bf28      	it	cs
 8000ec2:	2304      	movcs	r3, #4
 8000ec4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	3304      	adds	r3, #4
 8000eca:	2b06      	cmp	r3, #6
 8000ecc:	d902      	bls.n	8000ed4 <NVIC_EncodePriority+0x30>
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	3b03      	subs	r3, #3
 8000ed2:	e000      	b.n	8000ed6 <NVIC_EncodePriority+0x32>
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	43da      	mvns	r2, r3
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	401a      	ands	r2, r3
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000eec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ef6:	43d9      	mvns	r1, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	4313      	orrs	r3, r2
         );
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	3724      	adds	r7, #36	@ 0x24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
	...

08000f0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000f1c:	d301      	bcc.n	8000f22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e00f      	b.n	8000f42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f22:	4a0a      	ldr	r2, [pc, #40]	@ (8000f4c <SysTick_Config+0x40>)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	3b01      	subs	r3, #1
 8000f28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f2a:	210f      	movs	r1, #15
 8000f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f30:	f7ff ff8e 	bl	8000e50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f34:	4b05      	ldr	r3, [pc, #20]	@ (8000f4c <SysTick_Config+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f3a:	4b04      	ldr	r3, [pc, #16]	@ (8000f4c <SysTick_Config+0x40>)
 8000f3c:	2207      	movs	r2, #7
 8000f3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	e000e010 	.word	0xe000e010

08000f50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f7ff ff47 	bl	8000dec <__NVIC_SetPriorityGrouping>
}
 8000f5e:	bf00      	nop
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}

08000f66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f66:	b580      	push	{r7, lr}
 8000f68:	b086      	sub	sp, #24
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	60b9      	str	r1, [r7, #8]
 8000f70:	607a      	str	r2, [r7, #4]
 8000f72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f74:	2300      	movs	r3, #0
 8000f76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f78:	f7ff ff5c 	bl	8000e34 <__NVIC_GetPriorityGrouping>
 8000f7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7e:	687a      	ldr	r2, [r7, #4]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	6978      	ldr	r0, [r7, #20]
 8000f84:	f7ff ff8e 	bl	8000ea4 <NVIC_EncodePriority>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8e:	4611      	mov	r1, r2
 8000f90:	4618      	mov	r0, r3
 8000f92:	f7ff ff5d 	bl	8000e50 <__NVIC_SetPriority>
}
 8000f96:	bf00      	nop
 8000f98:	3718      	adds	r7, #24
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}

08000f9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f9e:	b580      	push	{r7, lr}
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	af00      	add	r7, sp, #0
 8000fa4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff ffb0 	bl	8000f0c <SysTick_Config>
 8000fac:	4603      	mov	r3, r0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b087      	sub	sp, #28
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fc6:	e17f      	b.n	80012c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	2101      	movs	r1, #1
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 8171 	beq.w	80012c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	f003 0303 	and.w	r3, r3, #3
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d005      	beq.n	8000ff8 <HAL_GPIO_Init+0x40>
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0303 	and.w	r3, r3, #3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d130      	bne.n	800105a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	2203      	movs	r2, #3
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	43db      	mvns	r3, r3
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68da      	ldr	r2, [r3, #12]
 8001014:	697b      	ldr	r3, [r7, #20]
 8001016:	005b      	lsls	r3, r3, #1
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	693a      	ldr	r2, [r7, #16]
 8001026:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800102e:	2201      	movs	r2, #1
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	091b      	lsrs	r3, r3, #4
 8001044:	f003 0201 	and.w	r2, r3, #1
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa02 f303 	lsl.w	r3, r2, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4313      	orrs	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	693a      	ldr	r2, [r7, #16]
 8001058:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	f003 0303 	and.w	r3, r3, #3
 8001062:	2b03      	cmp	r3, #3
 8001064:	d118      	bne.n	8001098 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800106a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800106c:	2201      	movs	r2, #1
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	08db      	lsrs	r3, r3, #3
 8001082:	f003 0201 	and.w	r2, r3, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4313      	orrs	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	f003 0303 	and.w	r3, r3, #3
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	d017      	beq.n	80010d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	005b      	lsls	r3, r3, #1
 80010c4:	fa02 f303 	lsl.w	r3, r2, r3
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0303 	and.w	r3, r3, #3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d123      	bne.n	8001128 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	08da      	lsrs	r2, r3, #3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3208      	adds	r2, #8
 80010e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0307 	and.w	r3, r3, #7
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001104:	683b      	ldr	r3, [r7, #0]
 8001106:	691a      	ldr	r2, [r3, #16]
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	f003 0307 	and.w	r3, r3, #7
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	693a      	ldr	r2, [r7, #16]
 8001116:	4313      	orrs	r3, r2
 8001118:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	08da      	lsrs	r2, r3, #3
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	3208      	adds	r2, #8
 8001122:	6939      	ldr	r1, [r7, #16]
 8001124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	2203      	movs	r2, #3
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0203 	and.w	r2, r3, #3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	005b      	lsls	r3, r3, #1
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001164:	2b00      	cmp	r3, #0
 8001166:	f000 80ac 	beq.w	80012c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800116a:	4b5f      	ldr	r3, [pc, #380]	@ (80012e8 <HAL_GPIO_Init+0x330>)
 800116c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800116e:	4a5e      	ldr	r2, [pc, #376]	@ (80012e8 <HAL_GPIO_Init+0x330>)
 8001170:	f043 0301 	orr.w	r3, r3, #1
 8001174:	6613      	str	r3, [r2, #96]	@ 0x60
 8001176:	4b5c      	ldr	r3, [pc, #368]	@ (80012e8 <HAL_GPIO_Init+0x330>)
 8001178:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800117a:	f003 0301 	and.w	r3, r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001182:	4a5a      	ldr	r2, [pc, #360]	@ (80012ec <HAL_GPIO_Init+0x334>)
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	089b      	lsrs	r3, r3, #2
 8001188:	3302      	adds	r3, #2
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001190:	697b      	ldr	r3, [r7, #20]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	220f      	movs	r2, #15
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80011ac:	d025      	beq.n	80011fa <HAL_GPIO_Init+0x242>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a4f      	ldr	r2, [pc, #316]	@ (80012f0 <HAL_GPIO_Init+0x338>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d01f      	beq.n	80011f6 <HAL_GPIO_Init+0x23e>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	4a4e      	ldr	r2, [pc, #312]	@ (80012f4 <HAL_GPIO_Init+0x33c>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d019      	beq.n	80011f2 <HAL_GPIO_Init+0x23a>
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	4a4d      	ldr	r2, [pc, #308]	@ (80012f8 <HAL_GPIO_Init+0x340>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d013      	beq.n	80011ee <HAL_GPIO_Init+0x236>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a4c      	ldr	r2, [pc, #304]	@ (80012fc <HAL_GPIO_Init+0x344>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d00d      	beq.n	80011ea <HAL_GPIO_Init+0x232>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	4a4b      	ldr	r2, [pc, #300]	@ (8001300 <HAL_GPIO_Init+0x348>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d007      	beq.n	80011e6 <HAL_GPIO_Init+0x22e>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001304 <HAL_GPIO_Init+0x34c>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d101      	bne.n	80011e2 <HAL_GPIO_Init+0x22a>
 80011de:	2306      	movs	r3, #6
 80011e0:	e00c      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011e2:	2307      	movs	r3, #7
 80011e4:	e00a      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011e6:	2305      	movs	r3, #5
 80011e8:	e008      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011ea:	2304      	movs	r3, #4
 80011ec:	e006      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011ee:	2303      	movs	r3, #3
 80011f0:	e004      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011f2:	2302      	movs	r3, #2
 80011f4:	e002      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011f6:	2301      	movs	r3, #1
 80011f8:	e000      	b.n	80011fc <HAL_GPIO_Init+0x244>
 80011fa:	2300      	movs	r3, #0
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	f002 0203 	and.w	r2, r2, #3
 8001202:	0092      	lsls	r2, r2, #2
 8001204:	4093      	lsls	r3, r2
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800120c:	4937      	ldr	r1, [pc, #220]	@ (80012ec <HAL_GPIO_Init+0x334>)
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800121a:	4b3b      	ldr	r3, [pc, #236]	@ (8001308 <HAL_GPIO_Init+0x350>)
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	43db      	mvns	r3, r3
 8001224:	693a      	ldr	r2, [r7, #16]
 8001226:	4013      	ands	r3, r2
 8001228:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800123e:	4a32      	ldr	r2, [pc, #200]	@ (8001308 <HAL_GPIO_Init+0x350>)
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001244:	4b30      	ldr	r3, [pc, #192]	@ (8001308 <HAL_GPIO_Init+0x350>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	43db      	mvns	r3, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4013      	ands	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001268:	4a27      	ldr	r2, [pc, #156]	@ (8001308 <HAL_GPIO_Init+0x350>)
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800126e:	4b26      	ldr	r3, [pc, #152]	@ (8001308 <HAL_GPIO_Init+0x350>)
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	43db      	mvns	r3, r3
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	4013      	ands	r3, r2
 800127c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	685b      	ldr	r3, [r3, #4]
 8001282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001292:	4a1d      	ldr	r2, [pc, #116]	@ (8001308 <HAL_GPIO_Init+0x350>)
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001298:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <HAL_GPIO_Init+0x350>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d003      	beq.n	80012bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012bc:	4a12      	ldr	r2, [pc, #72]	@ (8001308 <HAL_GPIO_Init+0x350>)
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3301      	adds	r3, #1
 80012c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	fa22 f303 	lsr.w	r3, r2, r3
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f47f ae78 	bne.w	8000fc8 <HAL_GPIO_Init+0x10>
  }
}
 80012d8:	bf00      	nop
 80012da:	bf00      	nop
 80012dc:	371c      	adds	r7, #28
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	40021000 	.word	0x40021000
 80012ec:	40010000 	.word	0x40010000
 80012f0:	48000400 	.word	0x48000400
 80012f4:	48000800 	.word	0x48000800
 80012f8:	48000c00 	.word	0x48000c00
 80012fc:	48001000 	.word	0x48001000
 8001300:	48001400 	.word	0x48001400
 8001304:	48001800 	.word	0x48001800
 8001308:	40010400 	.word	0x40010400

0800130c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
 8001318:	4613      	mov	r3, r2
 800131a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800131c:	787b      	ldrb	r3, [r7, #1]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d003      	beq.n	800132a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001328:	e002      	b.n	8001330 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800132a:	887a      	ldrh	r2, [r7, #2]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001340:	4b04      	ldr	r3, [pc, #16]	@ (8001354 <HAL_PWREx_GetVoltageRange+0x18>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	40007000 	.word	0x40007000

08001358 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001366:	d130      	bne.n	80013ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001368:	4b23      	ldr	r3, [pc, #140]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001370:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001374:	d038      	beq.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001376:	4b20      	ldr	r3, [pc, #128]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800137e:	4a1e      	ldr	r2, [pc, #120]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001380:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001384:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001386:	4b1d      	ldr	r3, [pc, #116]	@ (80013fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	2232      	movs	r2, #50	@ 0x32
 800138c:	fb02 f303 	mul.w	r3, r2, r3
 8001390:	4a1b      	ldr	r2, [pc, #108]	@ (8001400 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001392:	fba2 2303 	umull	r2, r3, r2, r3
 8001396:	0c9b      	lsrs	r3, r3, #18
 8001398:	3301      	adds	r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800139c:	e002      	b.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	3b01      	subs	r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013a4:	4b14      	ldr	r3, [pc, #80]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013b0:	d102      	bne.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f2      	bne.n	800139e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013b8:	4b0f      	ldr	r3, [pc, #60]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013ba:	695b      	ldr	r3, [r3, #20]
 80013bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013c4:	d110      	bne.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e00f      	b.n	80013ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80013d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80013d6:	d007      	beq.n	80013e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80013d8:	4b07      	ldr	r3, [pc, #28]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80013e0:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80013e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
 80013f6:	bf00      	nop
 80013f8:	40007000 	.word	0x40007000
 80013fc:	20000000 	.word	0x20000000
 8001400:	431bde83 	.word	0x431bde83

08001404 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e3ca      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001416:	4b97      	ldr	r3, [pc, #604]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f003 030c 	and.w	r3, r3, #12
 800141e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001420:	4b94      	ldr	r3, [pc, #592]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001422:	68db      	ldr	r3, [r3, #12]
 8001424:	f003 0303 	and.w	r3, r3, #3
 8001428:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f003 0310 	and.w	r3, r3, #16
 8001432:	2b00      	cmp	r3, #0
 8001434:	f000 80e4 	beq.w	8001600 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d007      	beq.n	800144e <HAL_RCC_OscConfig+0x4a>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b0c      	cmp	r3, #12
 8001442:	f040 808b 	bne.w	800155c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	2b01      	cmp	r3, #1
 800144a:	f040 8087 	bne.w	800155c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800144e:	4b89      	ldr	r3, [pc, #548]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d005      	beq.n	8001466 <HAL_RCC_OscConfig+0x62>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	699b      	ldr	r3, [r3, #24]
 800145e:	2b00      	cmp	r3, #0
 8001460:	d101      	bne.n	8001466 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e3a2      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6a1a      	ldr	r2, [r3, #32]
 800146a:	4b82      	ldr	r3, [pc, #520]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0308 	and.w	r3, r3, #8
 8001472:	2b00      	cmp	r3, #0
 8001474:	d004      	beq.n	8001480 <HAL_RCC_OscConfig+0x7c>
 8001476:	4b7f      	ldr	r3, [pc, #508]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800147e:	e005      	b.n	800148c <HAL_RCC_OscConfig+0x88>
 8001480:	4b7c      	ldr	r3, [pc, #496]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001486:	091b      	lsrs	r3, r3, #4
 8001488:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800148c:	4293      	cmp	r3, r2
 800148e:	d223      	bcs.n	80014d8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a1b      	ldr	r3, [r3, #32]
 8001494:	4618      	mov	r0, r3
 8001496:	f000 fd55 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	e383      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014a4:	4b73      	ldr	r3, [pc, #460]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a72      	ldr	r2, [pc, #456]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014aa:	f043 0308 	orr.w	r3, r3, #8
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b70      	ldr	r3, [pc, #448]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a1b      	ldr	r3, [r3, #32]
 80014bc:	496d      	ldr	r1, [pc, #436]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014c2:	4b6c      	ldr	r3, [pc, #432]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	69db      	ldr	r3, [r3, #28]
 80014ce:	021b      	lsls	r3, r3, #8
 80014d0:	4968      	ldr	r1, [pc, #416]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014d2:	4313      	orrs	r3, r2
 80014d4:	604b      	str	r3, [r1, #4]
 80014d6:	e025      	b.n	8001524 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014d8:	4b66      	ldr	r3, [pc, #408]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a65      	ldr	r2, [pc, #404]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014de:	f043 0308 	orr.w	r3, r3, #8
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	4b63      	ldr	r3, [pc, #396]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a1b      	ldr	r3, [r3, #32]
 80014f0:	4960      	ldr	r1, [pc, #384]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	021b      	lsls	r3, r3, #8
 8001504:	495b      	ldr	r1, [pc, #364]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001506:	4313      	orrs	r3, r2
 8001508:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d109      	bne.n	8001524 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6a1b      	ldr	r3, [r3, #32]
 8001514:	4618      	mov	r0, r3
 8001516:	f000 fd15 	bl	8001f44 <RCC_SetFlashLatencyFromMSIRange>
 800151a:	4603      	mov	r3, r0
 800151c:	2b00      	cmp	r3, #0
 800151e:	d001      	beq.n	8001524 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e343      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001524:	f000 fc4a 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001528:	4602      	mov	r2, r0
 800152a:	4b52      	ldr	r3, [pc, #328]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	f003 030f 	and.w	r3, r3, #15
 8001534:	4950      	ldr	r1, [pc, #320]	@ (8001678 <HAL_RCC_OscConfig+0x274>)
 8001536:	5ccb      	ldrb	r3, [r1, r3]
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	fa22 f303 	lsr.w	r3, r2, r3
 8001540:	4a4e      	ldr	r2, [pc, #312]	@ (800167c <HAL_RCC_OscConfig+0x278>)
 8001542:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001544:	4b4e      	ldr	r3, [pc, #312]	@ (8001680 <HAL_RCC_OscConfig+0x27c>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fbcf 	bl	8000cec <HAL_InitTick>
 800154e:	4603      	mov	r3, r0
 8001550:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d052      	beq.n	80015fe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001558:	7bfb      	ldrb	r3, [r7, #15]
 800155a:	e327      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	699b      	ldr	r3, [r3, #24]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d032      	beq.n	80015ca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001564:	4b43      	ldr	r3, [pc, #268]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a42      	ldr	r2, [pc, #264]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800156a:	f043 0301 	orr.w	r3, r3, #1
 800156e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001570:	f7ff fc0c 	bl	8000d8c <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001576:	e008      	b.n	800158a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001578:	f7ff fc08 	bl	8000d8c <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	2b02      	cmp	r3, #2
 8001584:	d901      	bls.n	800158a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001586:	2303      	movs	r3, #3
 8001588:	e310      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800158a:	4b3a      	ldr	r3, [pc, #232]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0302 	and.w	r3, r3, #2
 8001592:	2b00      	cmp	r3, #0
 8001594:	d0f0      	beq.n	8001578 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001596:	4b37      	ldr	r3, [pc, #220]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a36      	ldr	r2, [pc, #216]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800159c:	f043 0308 	orr.w	r3, r3, #8
 80015a0:	6013      	str	r3, [r2, #0]
 80015a2:	4b34      	ldr	r3, [pc, #208]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	4931      	ldr	r1, [pc, #196]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015b0:	4313      	orrs	r3, r2
 80015b2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b4:	4b2f      	ldr	r3, [pc, #188]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	69db      	ldr	r3, [r3, #28]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	492c      	ldr	r1, [pc, #176]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	604b      	str	r3, [r1, #4]
 80015c8:	e01a      	b.n	8001600 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015ca:	4b2a      	ldr	r3, [pc, #168]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a29      	ldr	r2, [pc, #164]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fbd9 	bl	8000d8c <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015de:	f7ff fbd5 	bl	8000d8c <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e2dd      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80015f0:	4b20      	ldr	r3, [pc, #128]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1f0      	bne.n	80015de <HAL_RCC_OscConfig+0x1da>
 80015fc:	e000      	b.n	8001600 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d074      	beq.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	2b08      	cmp	r3, #8
 8001610:	d005      	beq.n	800161e <HAL_RCC_OscConfig+0x21a>
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	2b0c      	cmp	r3, #12
 8001616:	d10e      	bne.n	8001636 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	2b03      	cmp	r3, #3
 800161c:	d10b      	bne.n	8001636 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161e:	4b15      	ldr	r3, [pc, #84]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d064      	beq.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d160      	bne.n	80016f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e2ba      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800163e:	d106      	bne.n	800164e <HAL_RCC_OscConfig+0x24a>
 8001640:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a0b      	ldr	r2, [pc, #44]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001646:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800164a:	6013      	str	r3, [r2, #0]
 800164c:	e026      	b.n	800169c <HAL_RCC_OscConfig+0x298>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001656:	d115      	bne.n	8001684 <HAL_RCC_OscConfig+0x280>
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a05      	ldr	r2, [pc, #20]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800165e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a02      	ldr	r2, [pc, #8]	@ (8001674 <HAL_RCC_OscConfig+0x270>)
 800166a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	e014      	b.n	800169c <HAL_RCC_OscConfig+0x298>
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	08004ab4 	.word	0x08004ab4
 800167c:	20000000 	.word	0x20000000
 8001680:	20000004 	.word	0x20000004
 8001684:	4ba0      	ldr	r3, [pc, #640]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a9f      	ldr	r2, [pc, #636]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b9d      	ldr	r3, [pc, #628]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a9c      	ldr	r2, [pc, #624]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a4:	f7ff fb72 	bl	8000d8c <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fb6e 	bl	8000d8c <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e276      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016be:	4b92      	ldr	r3, [pc, #584]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0x2a8>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016cc:	f7ff fb5e 	bl	8000d8c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fb5a 	bl	8000d8c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e262      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80016e6:	4b88      	ldr	r3, [pc, #544]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0x2d0>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d060      	beq.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001702:	69bb      	ldr	r3, [r7, #24]
 8001704:	2b04      	cmp	r3, #4
 8001706:	d005      	beq.n	8001714 <HAL_RCC_OscConfig+0x310>
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b0c      	cmp	r3, #12
 800170c:	d119      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b02      	cmp	r3, #2
 8001712:	d116      	bne.n	8001742 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001714:	4b7c      	ldr	r3, [pc, #496]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_OscConfig+0x328>
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d101      	bne.n	800172c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e23f      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800172c:	4b76      	ldr	r3, [pc, #472]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
 8001738:	061b      	lsls	r3, r3, #24
 800173a:	4973      	ldr	r1, [pc, #460]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800173c:	4313      	orrs	r3, r2
 800173e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001740:	e040      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d023      	beq.n	8001792 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174a:	4b6f      	ldr	r3, [pc, #444]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a6e      	ldr	r2, [pc, #440]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001750:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001754:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001756:	f7ff fb19 	bl	8000d8c <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800175e:	f7ff fb15 	bl	8000d8c <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e21d      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001770:	4b65      	ldr	r3, [pc, #404]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177c:	4b62      	ldr	r3, [pc, #392]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	691b      	ldr	r3, [r3, #16]
 8001788:	061b      	lsls	r3, r3, #24
 800178a:	495f      	ldr	r1, [pc, #380]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e018      	b.n	80017c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001792:	4b5d      	ldr	r3, [pc, #372]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a5c      	ldr	r2, [pc, #368]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001798:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800179c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff faf5 	bl	8000d8c <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff faf1 	bl	8000d8c <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1f9      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80017b8:	4b53      	ldr	r3, [pc, #332]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d1f0      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0308 	and.w	r3, r3, #8
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d03c      	beq.n	800184a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	695b      	ldr	r3, [r3, #20]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01c      	beq.n	8001812 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80017da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80017de:	4a4a      	ldr	r2, [pc, #296]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fad0 	bl	8000d8c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f0:	f7ff facc 	bl	8000d8c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e1d4      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001802:	4b41      	ldr	r3, [pc, #260]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001804:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ef      	beq.n	80017f0 <HAL_RCC_OscConfig+0x3ec>
 8001810:	e01b      	b.n	800184a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001812:	4b3d      	ldr	r3, [pc, #244]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001818:	4a3b      	ldr	r2, [pc, #236]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fab3 	bl	8000d8c <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182a:	f7ff faaf 	bl	8000d8c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e1b7      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800183c:	4b32      	ldr	r3, [pc, #200]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800183e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ef      	bne.n	800182a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 80a6 	beq.w	80019a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001858:	2300      	movs	r3, #0
 800185a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800185c:	4b2a      	ldr	r3, [pc, #168]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800185e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001864:	2b00      	cmp	r3, #0
 8001866:	d10d      	bne.n	8001884 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001868:	4b27      	ldr	r3, [pc, #156]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186c:	4a26      	ldr	r2, [pc, #152]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 800186e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001872:	6593      	str	r3, [r2, #88]	@ 0x58
 8001874:	4b24      	ldr	r3, [pc, #144]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001878:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187c:	60bb      	str	r3, [r7, #8]
 800187e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001880:	2301      	movs	r3, #1
 8001882:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001884:	4b21      	ldr	r3, [pc, #132]	@ (800190c <HAL_RCC_OscConfig+0x508>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188c:	2b00      	cmp	r3, #0
 800188e:	d118      	bne.n	80018c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001890:	4b1e      	ldr	r3, [pc, #120]	@ (800190c <HAL_RCC_OscConfig+0x508>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1d      	ldr	r2, [pc, #116]	@ (800190c <HAL_RCC_OscConfig+0x508>)
 8001896:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800189a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189c:	f7ff fa76 	bl	8000d8c <HAL_GetTick>
 80018a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018a2:	e008      	b.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a4:	f7ff fa72 	bl	8000d8c <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	693b      	ldr	r3, [r7, #16]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d901      	bls.n	80018b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80018b2:	2303      	movs	r3, #3
 80018b4:	e17a      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b6:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_RCC_OscConfig+0x508>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d0f0      	beq.n	80018a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d108      	bne.n	80018dc <HAL_RCC_OscConfig+0x4d8>
 80018ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018d2:	f043 0301 	orr.w	r3, r3, #1
 80018d6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018da:	e029      	b.n	8001930 <HAL_RCC_OscConfig+0x52c>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b05      	cmp	r3, #5
 80018e2:	d115      	bne.n	8001910 <HAL_RCC_OscConfig+0x50c>
 80018e4:	4b08      	ldr	r3, [pc, #32]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018ea:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018ec:	f043 0304 	orr.w	r3, r3, #4
 80018f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80018f4:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80018fa:	4a03      	ldr	r2, [pc, #12]	@ (8001908 <HAL_RCC_OscConfig+0x504>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001904:	e014      	b.n	8001930 <HAL_RCC_OscConfig+0x52c>
 8001906:	bf00      	nop
 8001908:	40021000 	.word	0x40021000
 800190c:	40007000 	.word	0x40007000
 8001910:	4b9c      	ldr	r3, [pc, #624]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001916:	4a9b      	ldr	r2, [pc, #620]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001918:	f023 0301 	bic.w	r3, r3, #1
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001920:	4b98      	ldr	r3, [pc, #608]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001926:	4a97      	ldr	r2, [pc, #604]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001928:	f023 0304 	bic.w	r3, r3, #4
 800192c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d016      	beq.n	8001966 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001938:	f7ff fa28 	bl	8000d8c <HAL_GetTick>
 800193c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800193e:	e00a      	b.n	8001956 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fa24 	bl	8000d8c <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e12a      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001956:	4b8b      	ldr	r3, [pc, #556]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001958:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0ed      	beq.n	8001940 <HAL_RCC_OscConfig+0x53c>
 8001964:	e015      	b.n	8001992 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff fa11 	bl	8000d8c <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff fa0d 	bl	8000d8c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e113      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001984:	4b7f      	ldr	r3, [pc, #508]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d1ed      	bne.n	800196e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001992:	7ffb      	ldrb	r3, [r7, #31]
 8001994:	2b01      	cmp	r3, #1
 8001996:	d105      	bne.n	80019a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	4b7a      	ldr	r3, [pc, #488]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 800199a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800199c:	4a79      	ldr	r2, [pc, #484]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 800199e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019a2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	f000 80fe 	beq.w	8001baa <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	f040 80d0 	bne.w	8001b58 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019b8:	4b72      	ldr	r3, [pc, #456]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	f003 0203 	and.w	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d130      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	3b01      	subs	r3, #1
 80019d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019da:	429a      	cmp	r2, r3
 80019dc:	d127      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d11f      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80019f8:	2a07      	cmp	r2, #7
 80019fa:	bf14      	ite	ne
 80019fc:	2201      	movne	r2, #1
 80019fe:	2200      	moveq	r2, #0
 8001a00:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d113      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a10:	085b      	lsrs	r3, r3, #1
 8001a12:	3b01      	subs	r3, #1
 8001a14:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d109      	bne.n	8001a2e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a24:	085b      	lsrs	r3, r3, #1
 8001a26:	3b01      	subs	r3, #1
 8001a28:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d06e      	beq.n	8001b0c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b0c      	cmp	r3, #12
 8001a32:	d069      	beq.n	8001b08 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a34:	4b53      	ldr	r3, [pc, #332]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a40:	4b50      	ldr	r3, [pc, #320]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e0ad      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a50:	4b4c      	ldr	r3, [pc, #304]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a4b      	ldr	r2, [pc, #300]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a56:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001a5a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a5c:	f7ff f996 	bl	8000d8c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a64:	f7ff f992 	bl	8000d8c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e09a      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a76:	4b43      	ldr	r3, [pc, #268]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d1f0      	bne.n	8001a64 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a82:	4b40      	ldr	r3, [pc, #256]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001a84:	68da      	ldr	r2, [r3, #12]
 8001a86:	4b40      	ldr	r3, [pc, #256]	@ (8001b88 <HAL_RCC_OscConfig+0x784>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001a92:	3a01      	subs	r2, #1
 8001a94:	0112      	lsls	r2, r2, #4
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001a9c:	0212      	lsls	r2, r2, #8
 8001a9e:	4311      	orrs	r1, r2
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001aa4:	0852      	lsrs	r2, r2, #1
 8001aa6:	3a01      	subs	r2, #1
 8001aa8:	0552      	lsls	r2, r2, #21
 8001aaa:	4311      	orrs	r1, r2
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001ab0:	0852      	lsrs	r2, r2, #1
 8001ab2:	3a01      	subs	r2, #1
 8001ab4:	0652      	lsls	r2, r2, #25
 8001ab6:	4311      	orrs	r1, r2
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001abc:	0912      	lsrs	r2, r2, #4
 8001abe:	0452      	lsls	r2, r2, #17
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	4930      	ldr	r1, [pc, #192]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b2e      	ldr	r3, [pc, #184]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a2d      	ldr	r2, [pc, #180]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001ace:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ad2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a2a      	ldr	r2, [pc, #168]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001ade:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae0:	f7ff f954 	bl	8000d8c <HAL_GetTick>
 8001ae4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae8:	f7ff f950 	bl	8000d8c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	693b      	ldr	r3, [r7, #16]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e058      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001afa:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b06:	e050      	b.n	8001baa <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e04f      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d148      	bne.n	8001baa <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b18:	4b1a      	ldr	r3, [pc, #104]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a19      	ldr	r2, [pc, #100]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b1e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b22:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b24:	4b17      	ldr	r3, [pc, #92]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	4a16      	ldr	r2, [pc, #88]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001b2e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b30:	f7ff f92c 	bl	8000d8c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7ff f928 	bl	8000d8c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e030      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCC_OscConfig+0x734>
 8001b56:	e028      	b.n	8001baa <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b0c      	cmp	r3, #12
 8001b5c:	d023      	beq.n	8001ba6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a08      	ldr	r2, [pc, #32]	@ (8001b84 <HAL_RCC_OscConfig+0x780>)
 8001b64:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b68:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7ff f90f 	bl	8000d8c <HAL_GetTick>
 8001b6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b70:	e00c      	b.n	8001b8c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b72:	f7ff f90b 	bl	8000d8c <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b02      	cmp	r3, #2
 8001b7e:	d905      	bls.n	8001b8c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e013      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
 8001b84:	40021000 	.word	0x40021000
 8001b88:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b8c:	4b09      	ldr	r3, [pc, #36]	@ (8001bb4 <HAL_RCC_OscConfig+0x7b0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d1ec      	bne.n	8001b72 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001b98:	4b06      	ldr	r3, [pc, #24]	@ (8001bb4 <HAL_RCC_OscConfig+0x7b0>)
 8001b9a:	68da      	ldr	r2, [r3, #12]
 8001b9c:	4905      	ldr	r1, [pc, #20]	@ (8001bb4 <HAL_RCC_OscConfig+0x7b0>)
 8001b9e:	4b06      	ldr	r3, [pc, #24]	@ (8001bb8 <HAL_RCC_OscConfig+0x7b4>)
 8001ba0:	4013      	ands	r3, r2
 8001ba2:	60cb      	str	r3, [r1, #12]
 8001ba4:	e001      	b.n	8001baa <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001baa:	2300      	movs	r3, #0
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	3720      	adds	r7, #32
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	feeefffc 	.word	0xfeeefffc

08001bbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e0e7      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd0:	4b75      	ldr	r3, [pc, #468]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	683a      	ldr	r2, [r7, #0]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d910      	bls.n	8001c00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bde:	4b72      	ldr	r3, [pc, #456]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f023 0207 	bic.w	r2, r3, #7
 8001be6:	4970      	ldr	r1, [pc, #448]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	4313      	orrs	r3, r2
 8001bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bee:	4b6e      	ldr	r3, [pc, #440]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0307 	and.w	r3, r3, #7
 8001bf6:	683a      	ldr	r2, [r7, #0]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d001      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e0cf      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d010      	beq.n	8001c2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	689a      	ldr	r2, [r3, #8]
 8001c10:	4b66      	ldr	r3, [pc, #408]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d908      	bls.n	8001c2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c1c:	4b63      	ldr	r3, [pc, #396]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	4960      	ldr	r1, [pc, #384]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d04c      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	2b03      	cmp	r3, #3
 8001c40:	d107      	bne.n	8001c52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	4b5a      	ldr	r3, [pc, #360]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d121      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0a6      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d107      	bne.n	8001c6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c5a:	4b54      	ldr	r3, [pc, #336]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d115      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e09a      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c72:	4b4e      	ldr	r3, [pc, #312]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d109      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e08e      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c82:	4b4a      	ldr	r3, [pc, #296]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e086      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c92:	4b46      	ldr	r3, [pc, #280]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f023 0203 	bic.w	r2, r3, #3
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4943      	ldr	r1, [pc, #268]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca4:	f7ff f872 	bl	8000d8c <HAL_GetTick>
 8001ca8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001caa:	e00a      	b.n	8001cc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cac:	f7ff f86e 	bl	8000d8c <HAL_GetTick>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	1ad3      	subs	r3, r2, r3
 8001cb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e06e      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f003 020c 	and.w	r2, r3, #12
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d1eb      	bne.n	8001cac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0302 	and.w	r3, r3, #2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d010      	beq.n	8001d02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	689a      	ldr	r2, [r3, #8]
 8001ce4:	4b31      	ldr	r3, [pc, #196]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d208      	bcs.n	8001d02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001cf0:	4b2e      	ldr	r3, [pc, #184]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	492b      	ldr	r1, [pc, #172]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d02:	4b29      	ldr	r3, [pc, #164]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d210      	bcs.n	8001d32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d10:	4b25      	ldr	r3, [pc, #148]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 0207 	bic.w	r2, r3, #7
 8001d18:	4923      	ldr	r1, [pc, #140]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d20:	4b21      	ldr	r3, [pc, #132]	@ (8001da8 <HAL_RCC_ClockConfig+0x1ec>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 0307 	and.w	r3, r3, #7
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e036      	b.n	8001da0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f003 0304 	and.w	r3, r3, #4
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d008      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3e:	4b1b      	ldr	r3, [pc, #108]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	4918      	ldr	r1, [pc, #96]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0308 	and.w	r3, r3, #8
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d009      	beq.n	8001d70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5c:	4b13      	ldr	r3, [pc, #76]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	00db      	lsls	r3, r3, #3
 8001d6a:	4910      	ldr	r1, [pc, #64]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d70:	f000 f824 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8001d74:	4602      	mov	r2, r0
 8001d76:	4b0d      	ldr	r3, [pc, #52]	@ (8001dac <HAL_RCC_ClockConfig+0x1f0>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	490b      	ldr	r1, [pc, #44]	@ (8001db0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d82:	5ccb      	ldrb	r3, [r1, r3]
 8001d84:	f003 031f 	and.w	r3, r3, #31
 8001d88:	fa22 f303 	lsr.w	r3, r2, r3
 8001d8c:	4a09      	ldr	r2, [pc, #36]	@ (8001db4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d90:	4b09      	ldr	r3, [pc, #36]	@ (8001db8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe ffa9 	bl	8000cec <HAL_InitTick>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3710      	adds	r7, #16
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	40022000 	.word	0x40022000
 8001dac:	40021000 	.word	0x40021000
 8001db0:	08004ab4 	.word	0x08004ab4
 8001db4:	20000000 	.word	0x20000000
 8001db8:	20000004 	.word	0x20000004

08001dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b089      	sub	sp, #36	@ 0x24
 8001dc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61fb      	str	r3, [r7, #28]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dca:	4b3e      	ldr	r3, [pc, #248]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f003 030c 	and.w	r3, r3, #12
 8001dd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001dd4:	4b3b      	ldr	r3, [pc, #236]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d005      	beq.n	8001df0 <HAL_RCC_GetSysClockFreq+0x34>
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	2b0c      	cmp	r3, #12
 8001de8:	d121      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d11e      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001df0:	4b34      	ldr	r3, [pc, #208]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0308 	and.w	r3, r3, #8
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001dfc:	4b31      	ldr	r3, [pc, #196]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 030f 	and.w	r3, r3, #15
 8001e08:	61fb      	str	r3, [r7, #28]
 8001e0a:	e005      	b.n	8001e18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e0c:	4b2d      	ldr	r3, [pc, #180]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	091b      	lsrs	r3, r3, #4
 8001e12:	f003 030f 	and.w	r3, r3, #15
 8001e16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e18:	4a2b      	ldr	r2, [pc, #172]	@ (8001ec8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d10d      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e28:	69fb      	ldr	r3, [r7, #28]
 8001e2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b04      	cmp	r3, #4
 8001e32:	d102      	bne.n	8001e3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e34:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e36:	61bb      	str	r3, [r7, #24]
 8001e38:	e004      	b.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d101      	bne.n	8001e44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e40:	4b23      	ldr	r3, [pc, #140]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	2b0c      	cmp	r3, #12
 8001e48:	d134      	bne.n	8001eb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4c:	68db      	ldr	r3, [r3, #12]
 8001e4e:	f003 0303 	and.w	r3, r3, #3
 8001e52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d003      	beq.n	8001e62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e5a:	68bb      	ldr	r3, [r7, #8]
 8001e5c:	2b03      	cmp	r3, #3
 8001e5e:	d003      	beq.n	8001e68 <HAL_RCC_GetSysClockFreq+0xac>
 8001e60:	e005      	b.n	8001e6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e62:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <HAL_RCC_GetSysClockFreq+0x110>)
 8001e64:	617b      	str	r3, [r7, #20]
      break;
 8001e66:	e005      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e68:	4b19      	ldr	r3, [pc, #100]	@ (8001ed0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e6a:	617b      	str	r3, [r7, #20]
      break;
 8001e6c:	e002      	b.n	8001e74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	617b      	str	r3, [r7, #20]
      break;
 8001e72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e74:	4b13      	ldr	r3, [pc, #76]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0307 	and.w	r3, r3, #7
 8001e7e:	3301      	adds	r3, #1
 8001e80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e82:	4b10      	ldr	r3, [pc, #64]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e84:	68db      	ldr	r3, [r3, #12]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	fb03 f202 	mul.w	r2, r3, r2
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001ec4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	0e5b      	lsrs	r3, r3, #25
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	005b      	lsls	r3, r3, #1
 8001ea8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001eaa:	697a      	ldr	r2, [r7, #20]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001eb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001eb4:	69bb      	ldr	r3, [r7, #24]
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	3724      	adds	r7, #36	@ 0x24
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08004acc 	.word	0x08004acc
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	007a1200 	.word	0x007a1200

08001ed4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ed8:	4b03      	ldr	r3, [pc, #12]	@ (8001ee8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001eda:	681b      	ldr	r3, [r3, #0]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	20000000 	.word	0x20000000

08001eec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ef0:	f7ff fff0 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	4b06      	ldr	r3, [pc, #24]	@ (8001f10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	0a1b      	lsrs	r3, r3, #8
 8001efc:	f003 0307 	and.w	r3, r3, #7
 8001f00:	4904      	ldr	r1, [pc, #16]	@ (8001f14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f02:	5ccb      	ldrb	r3, [r1, r3]
 8001f04:	f003 031f 	and.w	r3, r3, #31
 8001f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40021000 	.word	0x40021000
 8001f14:	08004ac4 	.word	0x08004ac4

08001f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f1c:	f7ff ffda 	bl	8001ed4 <HAL_RCC_GetHCLKFreq>
 8001f20:	4602      	mov	r2, r0
 8001f22:	4b06      	ldr	r3, [pc, #24]	@ (8001f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	0adb      	lsrs	r3, r3, #11
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	4904      	ldr	r1, [pc, #16]	@ (8001f40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f2e:	5ccb      	ldrb	r3, [r1, r3]
 8001f30:	f003 031f 	and.w	r3, r3, #31
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	08004ac4 	.word	0x08004ac4

08001f44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b086      	sub	sp, #24
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f50:	4b2a      	ldr	r3, [pc, #168]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d003      	beq.n	8001f64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f5c:	f7ff f9ee 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8001f60:	6178      	str	r0, [r7, #20]
 8001f62:	e014      	b.n	8001f8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f64:	4b25      	ldr	r3, [pc, #148]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	4a24      	ldr	r2, [pc, #144]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f70:	4b22      	ldr	r3, [pc, #136]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f7c:	f7ff f9de 	bl	800133c <HAL_PWREx_GetVoltageRange>
 8001f80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f82:	4b1e      	ldr	r3, [pc, #120]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f86:	4a1d      	ldr	r2, [pc, #116]	@ (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f88:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001f94:	d10b      	bne.n	8001fae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2b80      	cmp	r3, #128	@ 0x80
 8001f9a:	d919      	bls.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001fa0:	d902      	bls.n	8001fa8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	613b      	str	r3, [r7, #16]
 8001fa6:	e013      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fa8:	2301      	movs	r3, #1
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	e010      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	@ 0x80
 8001fb2:	d902      	bls.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e00a      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b80      	cmp	r3, #128	@ 0x80
 8001fbe:	d102      	bne.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e004      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b70      	cmp	r3, #112	@ 0x70
 8001fca:	d101      	bne.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 0207 	bic.w	r2, r3, #7
 8001fd8:	4909      	ldr	r1, [pc, #36]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fe0:	4b07      	ldr	r3, [pc, #28]	@ (8002000 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40022000 	.word	0x40022000

08002004 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800200c:	2300      	movs	r3, #0
 800200e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002010:	2300      	movs	r3, #0
 8002012:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800201c:	2b00      	cmp	r3, #0
 800201e:	d041      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002024:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002028:	d02a      	beq.n	8002080 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800202a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800202e:	d824      	bhi.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002030:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002034:	d008      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002036:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800203a:	d81e      	bhi.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00a      	beq.n	8002056 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002040:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002044:	d010      	beq.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002046:	e018      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002048:	4b86      	ldr	r3, [pc, #536]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	4a85      	ldr	r2, [pc, #532]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800204e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002052:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002054:	e015      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3304      	adds	r3, #4
 800205a:	2100      	movs	r1, #0
 800205c:	4618      	mov	r0, r3
 800205e:	f000 fabb 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 8002062:	4603      	mov	r3, r0
 8002064:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002066:	e00c      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3320      	adds	r3, #32
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fba6 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002074:	4603      	mov	r3, r0
 8002076:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002078:	e003      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	74fb      	strb	r3, [r7, #19]
      break;
 800207e:	e000      	b.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002082:	7cfb      	ldrb	r3, [r7, #19]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d10b      	bne.n	80020a0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002088:	4b76      	ldr	r3, [pc, #472]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800208a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800208e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002096:	4973      	ldr	r1, [pc, #460]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002098:	4313      	orrs	r3, r2
 800209a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800209e:	e001      	b.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020a0:	7cfb      	ldrb	r3, [r7, #19]
 80020a2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d041      	beq.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80020b4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020b8:	d02a      	beq.n	8002110 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80020ba:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80020be:	d824      	bhi.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020c4:	d008      	beq.n	80020d8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80020c6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80020ca:	d81e      	bhi.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d00a      	beq.n	80020e6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d4:	d010      	beq.n	80020f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80020d6:	e018      	b.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020d8:	4b62      	ldr	r3, [pc, #392]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4a61      	ldr	r2, [pc, #388]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020e2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020e4:	e015      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	3304      	adds	r3, #4
 80020ea:	2100      	movs	r1, #0
 80020ec:	4618      	mov	r0, r3
 80020ee:	f000 fa73 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 80020f2:	4603      	mov	r3, r0
 80020f4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80020f6:	e00c      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	3320      	adds	r3, #32
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f000 fb5e 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002104:	4603      	mov	r3, r0
 8002106:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002108:	e003      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	74fb      	strb	r3, [r7, #19]
      break;
 800210e:	e000      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002110:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002112:	7cfb      	ldrb	r3, [r7, #19]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d10b      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002118:	4b52      	ldr	r3, [pc, #328]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002126:	494f      	ldr	r1, [pc, #316]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002128:	4313      	orrs	r3, r2
 800212a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800212e:	e001      	b.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002130:	7cfb      	ldrb	r3, [r7, #19]
 8002132:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a0 	beq.w	8002282 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002146:	4b47      	ldr	r3, [pc, #284]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d101      	bne.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002152:	2301      	movs	r3, #1
 8002154:	e000      	b.n	8002158 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002156:	2300      	movs	r3, #0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215c:	4b41      	ldr	r3, [pc, #260]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800215e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002160:	4a40      	ldr	r2, [pc, #256]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002162:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002166:	6593      	str	r3, [r2, #88]	@ 0x58
 8002168:	4b3e      	ldr	r3, [pc, #248]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800216a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800216c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002174:	2301      	movs	r3, #1
 8002176:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002178:	4b3b      	ldr	r3, [pc, #236]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a3a      	ldr	r2, [pc, #232]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800217e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002182:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002184:	f7fe fe02 	bl	8000d8c <HAL_GetTick>
 8002188:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800218a:	e009      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218c:	f7fe fdfe 	bl	8000d8c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d902      	bls.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	74fb      	strb	r3, [r7, #19]
        break;
 800219e:	e005      	b.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80021a0:	4b31      	ldr	r3, [pc, #196]	@ (8002268 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0ef      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80021ac:	7cfb      	ldrb	r3, [r7, #19]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d15c      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80021b2:	4b2c      	ldr	r3, [pc, #176]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021bc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01f      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d019      	beq.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80021d0:	4b24      	ldr	r3, [pc, #144]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021da:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80021dc:	4b21      	ldr	r3, [pc, #132]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021e2:	4a20      	ldr	r2, [pc, #128]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80021ec:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021f2:	4a1c      	ldr	r2, [pc, #112]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80021fc:	4a19      	ldr	r2, [pc, #100]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b00      	cmp	r3, #0
 800220c:	d016      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7fe fdbd 	bl	8000d8c <HAL_GetTick>
 8002212:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002214:	e00b      	b.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002216:	f7fe fdb9 	bl	8000d8c <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002224:	4293      	cmp	r3, r2
 8002226:	d902      	bls.n	800222e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002228:	2303      	movs	r3, #3
 800222a:	74fb      	strb	r3, [r7, #19]
            break;
 800222c:	e006      	b.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222e:	4b0d      	ldr	r3, [pc, #52]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002230:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002234:	f003 0302 	and.w	r3, r3, #2
 8002238:	2b00      	cmp	r3, #0
 800223a:	d0ec      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002242:	4b08      	ldr	r3, [pc, #32]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002248:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002252:	4904      	ldr	r1, [pc, #16]	@ (8002264 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800225a:	e009      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800225c:	7cfb      	ldrb	r3, [r7, #19]
 800225e:	74bb      	strb	r3, [r7, #18]
 8002260:	e006      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002262:	bf00      	nop
 8002264:	40021000 	.word	0x40021000
 8002268:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002270:	7c7b      	ldrb	r3, [r7, #17]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d105      	bne.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002276:	4b9e      	ldr	r3, [pc, #632]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	4a9d      	ldr	r2, [pc, #628]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002280:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d00a      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800228e:	4b98      	ldr	r3, [pc, #608]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002290:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002294:	f023 0203 	bic.w	r2, r3, #3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229c:	4994      	ldr	r1, [pc, #592]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00a      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80022b0:	4b8f      	ldr	r3, [pc, #572]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022b6:	f023 020c 	bic.w	r2, r3, #12
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022be:	498c      	ldr	r1, [pc, #560]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022c0:	4313      	orrs	r3, r2
 80022c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022d2:	4b87      	ldr	r3, [pc, #540]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022d8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e0:	4983      	ldr	r1, [pc, #524]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0308 	and.w	r3, r3, #8
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d00a      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022f4:	4b7e      	ldr	r3, [pc, #504]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022fa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002302:	497b      	ldr	r1, [pc, #492]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002304:	4313      	orrs	r3, r2
 8002306:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 0310 	and.w	r3, r3, #16
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002316:	4b76      	ldr	r3, [pc, #472]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002318:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800231c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002324:	4972      	ldr	r1, [pc, #456]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002326:	4313      	orrs	r3, r2
 8002328:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0320 	and.w	r3, r3, #32
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002338:	4b6d      	ldr	r3, [pc, #436]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800233e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	496a      	ldr	r1, [pc, #424]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002356:	2b00      	cmp	r3, #0
 8002358:	d00a      	beq.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800235a:	4b65      	ldr	r3, [pc, #404]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800235c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002360:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002368:	4961      	ldr	r1, [pc, #388]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800236a:	4313      	orrs	r3, r2
 800236c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00a      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800237c:	4b5c      	ldr	r3, [pc, #368]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002382:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800238a:	4959      	ldr	r1, [pc, #356]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238c:	4313      	orrs	r3, r2
 800238e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800239e:	4b54      	ldr	r3, [pc, #336]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ac:	4950      	ldr	r1, [pc, #320]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023c0:	4b4b      	ldr	r3, [pc, #300]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023c6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80023ce:	4948      	ldr	r1, [pc, #288]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d0:	4313      	orrs	r3, r2
 80023d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023e2:	4b43      	ldr	r3, [pc, #268]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023e8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f0:	493f      	ldr	r1, [pc, #252]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d028      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002404:	4b3a      	ldr	r3, [pc, #232]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800240a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002412:	4937      	ldr	r1, [pc, #220]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800241e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002422:	d106      	bne.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002424:	4b32      	ldr	r3, [pc, #200]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4a31      	ldr	r2, [pc, #196]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800242e:	60d3      	str	r3, [r2, #12]
 8002430:	e011      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002436:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800243a:	d10c      	bne.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3304      	adds	r3, #4
 8002440:	2101      	movs	r1, #1
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f8c8 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 8002448:	4603      	mov	r3, r0
 800244a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002452:	7cfb      	ldrb	r3, [r7, #19]
 8002454:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d028      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002462:	4b23      	ldr	r3, [pc, #140]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002468:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002470:	491f      	ldr	r1, [pc, #124]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800247c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002480:	d106      	bne.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002482:	4b1b      	ldr	r3, [pc, #108]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002488:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800248c:	60d3      	str	r3, [r2, #12]
 800248e:	e011      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002494:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002498:	d10c      	bne.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	3304      	adds	r3, #4
 800249e:	2101      	movs	r1, #1
 80024a0:	4618      	mov	r0, r3
 80024a2:	f000 f899 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 80024a6:	4603      	mov	r3, r0
 80024a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80024aa:	7cfb      	ldrb	r3, [r7, #19]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80024b0:	7cfb      	ldrb	r3, [r7, #19]
 80024b2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d02b      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024c0:	4b0b      	ldr	r3, [pc, #44]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024ce:	4908      	ldr	r1, [pc, #32]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80024de:	d109      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024e0:	4b03      	ldr	r3, [pc, #12]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	4a02      	ldr	r2, [pc, #8]	@ (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80024ea:	60d3      	str	r3, [r2, #12]
 80024ec:	e014      	b.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80024ee:	bf00      	nop
 80024f0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80024f8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024fc:	d10c      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3304      	adds	r3, #4
 8002502:	2101      	movs	r1, #1
 8002504:	4618      	mov	r0, r3
 8002506:	f000 f867 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 800250a:	4603      	mov	r3, r0
 800250c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800250e:	7cfb      	ldrb	r3, [r7, #19]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002514:	7cfb      	ldrb	r3, [r7, #19]
 8002516:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d02f      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002524:	4b2b      	ldr	r3, [pc, #172]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002526:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800252a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002532:	4928      	ldr	r1, [pc, #160]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002534:	4313      	orrs	r3, r2
 8002536:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800253e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002542:	d10d      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	3304      	adds	r3, #4
 8002548:	2102      	movs	r1, #2
 800254a:	4618      	mov	r0, r3
 800254c:	f000 f844 	bl	80025d8 <RCCEx_PLLSAI1_Config>
 8002550:	4603      	mov	r3, r0
 8002552:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002554:	7cfb      	ldrb	r3, [r7, #19]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d014      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800255a:	7cfb      	ldrb	r3, [r7, #19]
 800255c:	74bb      	strb	r3, [r7, #18]
 800255e:	e011      	b.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002564:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002568:	d10c      	bne.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	3320      	adds	r3, #32
 800256e:	2102      	movs	r1, #2
 8002570:	4618      	mov	r0, r3
 8002572:	f000 f925 	bl	80027c0 <RCCEx_PLLSAI2_Config>
 8002576:	4603      	mov	r3, r0
 8002578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800257a:	7cfb      	ldrb	r3, [r7, #19]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d001      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002580:	7cfb      	ldrb	r3, [r7, #19]
 8002582:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002590:	4b10      	ldr	r3, [pc, #64]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002596:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800259e:	490d      	ldr	r1, [pc, #52]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80025b2:	4b08      	ldr	r3, [pc, #32]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80025c2:	4904      	ldr	r1, [pc, #16]	@ (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80025ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000

080025d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80025e2:	2300      	movs	r3, #0
 80025e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80025e6:	4b75      	ldr	r3, [pc, #468]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d018      	beq.n	8002624 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80025f2:	4b72      	ldr	r3, [pc, #456]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f003 0203 	and.w	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	429a      	cmp	r2, r3
 8002600:	d10d      	bne.n	800261e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
       ||
 8002606:	2b00      	cmp	r3, #0
 8002608:	d009      	beq.n	800261e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800260a:	4b6c      	ldr	r3, [pc, #432]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	091b      	lsrs	r3, r3, #4
 8002610:	f003 0307 	and.w	r3, r3, #7
 8002614:	1c5a      	adds	r2, r3, #1
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
       ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d047      	beq.n	80026ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	73fb      	strb	r3, [r7, #15]
 8002622:	e044      	b.n	80026ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b03      	cmp	r3, #3
 800262a:	d018      	beq.n	800265e <RCCEx_PLLSAI1_Config+0x86>
 800262c:	2b03      	cmp	r3, #3
 800262e:	d825      	bhi.n	800267c <RCCEx_PLLSAI1_Config+0xa4>
 8002630:	2b01      	cmp	r3, #1
 8002632:	d002      	beq.n	800263a <RCCEx_PLLSAI1_Config+0x62>
 8002634:	2b02      	cmp	r3, #2
 8002636:	d009      	beq.n	800264c <RCCEx_PLLSAI1_Config+0x74>
 8002638:	e020      	b.n	800267c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800263a:	4b60      	ldr	r3, [pc, #384]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d11d      	bne.n	8002682 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800264a:	e01a      	b.n	8002682 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800264c:	4b5b      	ldr	r3, [pc, #364]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002654:	2b00      	cmp	r3, #0
 8002656:	d116      	bne.n	8002686 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002658:	2301      	movs	r3, #1
 800265a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800265c:	e013      	b.n	8002686 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800265e:	4b57      	ldr	r3, [pc, #348]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10f      	bne.n	800268a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800266a:	4b54      	ldr	r3, [pc, #336]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800267a:	e006      	b.n	800268a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	73fb      	strb	r3, [r7, #15]
      break;
 8002680:	e004      	b.n	800268c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002682:	bf00      	nop
 8002684:	e002      	b.n	800268c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002686:	bf00      	nop
 8002688:	e000      	b.n	800268c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800268a:	bf00      	nop
    }

    if(status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10d      	bne.n	80026ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002692:	4b4a      	ldr	r3, [pc, #296]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6819      	ldr	r1, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	3b01      	subs	r3, #1
 80026a4:	011b      	lsls	r3, r3, #4
 80026a6:	430b      	orrs	r3, r1
 80026a8:	4944      	ldr	r1, [pc, #272]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d17d      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80026b4:	4b41      	ldr	r3, [pc, #260]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a40      	ldr	r2, [pc, #256]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026ba:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80026be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026c0:	f7fe fb64 	bl	8000d8c <HAL_GetTick>
 80026c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026c6:	e009      	b.n	80026dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80026c8:	f7fe fb60 	bl	8000d8c <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d902      	bls.n	80026dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	73fb      	strb	r3, [r7, #15]
        break;
 80026da:	e005      	b.n	80026e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80026dc:	4b37      	ldr	r3, [pc, #220]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d1ef      	bne.n	80026c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d160      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d111      	bne.n	8002718 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80026f4:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80026f6:	691b      	ldr	r3, [r3, #16]
 80026f8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002700:	687a      	ldr	r2, [r7, #4]
 8002702:	6892      	ldr	r2, [r2, #8]
 8002704:	0211      	lsls	r1, r2, #8
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68d2      	ldr	r2, [r2, #12]
 800270a:	0912      	lsrs	r2, r2, #4
 800270c:	0452      	lsls	r2, r2, #17
 800270e:	430a      	orrs	r2, r1
 8002710:	492a      	ldr	r1, [pc, #168]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002712:	4313      	orrs	r3, r2
 8002714:	610b      	str	r3, [r1, #16]
 8002716:	e027      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d112      	bne.n	8002744 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800271e:	4b27      	ldr	r3, [pc, #156]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8002726:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6892      	ldr	r2, [r2, #8]
 800272e:	0211      	lsls	r1, r2, #8
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	6912      	ldr	r2, [r2, #16]
 8002734:	0852      	lsrs	r2, r2, #1
 8002736:	3a01      	subs	r2, #1
 8002738:	0552      	lsls	r2, r2, #21
 800273a:	430a      	orrs	r2, r1
 800273c:	491f      	ldr	r1, [pc, #124]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800273e:	4313      	orrs	r3, r2
 8002740:	610b      	str	r3, [r1, #16]
 8002742:	e011      	b.n	8002768 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002744:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800274c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6892      	ldr	r2, [r2, #8]
 8002754:	0211      	lsls	r1, r2, #8
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6952      	ldr	r2, [r2, #20]
 800275a:	0852      	lsrs	r2, r2, #1
 800275c:	3a01      	subs	r2, #1
 800275e:	0652      	lsls	r2, r2, #25
 8002760:	430a      	orrs	r2, r1
 8002762:	4916      	ldr	r1, [pc, #88]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002764:	4313      	orrs	r3, r2
 8002766:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002768:	4b14      	ldr	r3, [pc, #80]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a13      	ldr	r2, [pc, #76]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 800276e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002772:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fe fb0a 	bl	8000d8c <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800277a:	e009      	b.n	8002790 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800277c:	f7fe fb06 	bl	8000d8c <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d902      	bls.n	8002790 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	73fb      	strb	r3, [r7, #15]
          break;
 800278e:	e005      	b.n	800279c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002790:	4b0a      	ldr	r3, [pc, #40]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800279c:	7bfb      	ldrb	r3, [r7, #15]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d106      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80027a2:	4b06      	ldr	r3, [pc, #24]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a4:	691a      	ldr	r2, [r3, #16]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	4904      	ldr	r1, [pc, #16]	@ (80027bc <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ac:	4313      	orrs	r3, r2
 80027ae:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80027b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	40021000 	.word	0x40021000

080027c0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027ca:	2300      	movs	r3, #0
 80027cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027ce:	4b6a      	ldr	r3, [pc, #424]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	f003 0303 	and.w	r3, r3, #3
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d018      	beq.n	800280c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80027da:	4b67      	ldr	r3, [pc, #412]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027dc:	68db      	ldr	r3, [r3, #12]
 80027de:	f003 0203 	and.w	r2, r3, #3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d10d      	bne.n	8002806 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
       ||
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d009      	beq.n	8002806 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80027f2:	4b61      	ldr	r3, [pc, #388]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f4:	68db      	ldr	r3, [r3, #12]
 80027f6:	091b      	lsrs	r3, r3, #4
 80027f8:	f003 0307 	and.w	r3, r3, #7
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
       ||
 8002802:	429a      	cmp	r2, r3
 8002804:	d047      	beq.n	8002896 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	73fb      	strb	r3, [r7, #15]
 800280a:	e044      	b.n	8002896 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	2b03      	cmp	r3, #3
 8002812:	d018      	beq.n	8002846 <RCCEx_PLLSAI2_Config+0x86>
 8002814:	2b03      	cmp	r3, #3
 8002816:	d825      	bhi.n	8002864 <RCCEx_PLLSAI2_Config+0xa4>
 8002818:	2b01      	cmp	r3, #1
 800281a:	d002      	beq.n	8002822 <RCCEx_PLLSAI2_Config+0x62>
 800281c:	2b02      	cmp	r3, #2
 800281e:	d009      	beq.n	8002834 <RCCEx_PLLSAI2_Config+0x74>
 8002820:	e020      	b.n	8002864 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002822:	4b55      	ldr	r3, [pc, #340]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d11d      	bne.n	800286a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002832:	e01a      	b.n	800286a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002834:	4b50      	ldr	r3, [pc, #320]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800283c:	2b00      	cmp	r3, #0
 800283e:	d116      	bne.n	800286e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002844:	e013      	b.n	800286e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002846:	4b4c      	ldr	r3, [pc, #304]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d10f      	bne.n	8002872 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002852:	4b49      	ldr	r3, [pc, #292]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002862:	e006      	b.n	8002872 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	73fb      	strb	r3, [r7, #15]
      break;
 8002868:	e004      	b.n	8002874 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800286a:	bf00      	nop
 800286c:	e002      	b.n	8002874 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800286e:	bf00      	nop
 8002870:	e000      	b.n	8002874 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002872:	bf00      	nop
    }

    if(status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800287a:	4b3f      	ldr	r3, [pc, #252]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6819      	ldr	r1, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	3b01      	subs	r3, #1
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	430b      	orrs	r3, r1
 8002890:	4939      	ldr	r1, [pc, #228]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002896:	7bfb      	ldrb	r3, [r7, #15]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d167      	bne.n	800296c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800289c:	4b36      	ldr	r3, [pc, #216]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a35      	ldr	r2, [pc, #212]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028a8:	f7fe fa70 	bl	8000d8c <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028ae:	e009      	b.n	80028c4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80028b0:	f7fe fa6c 	bl	8000d8c <HAL_GetTick>
 80028b4:	4602      	mov	r2, r0
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	1ad3      	subs	r3, r2, r3
 80028ba:	2b02      	cmp	r3, #2
 80028bc:	d902      	bls.n	80028c4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	73fb      	strb	r3, [r7, #15]
        break;
 80028c2:	e005      	b.n	80028d0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80028c4:	4b2c      	ldr	r3, [pc, #176]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1ef      	bne.n	80028b0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028d0:	7bfb      	ldrb	r3, [r7, #15]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d14a      	bne.n	800296c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d111      	bne.n	8002900 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80028dc:	4b26      	ldr	r3, [pc, #152]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028de:	695b      	ldr	r3, [r3, #20]
 80028e0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80028e4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	6892      	ldr	r2, [r2, #8]
 80028ec:	0211      	lsls	r1, r2, #8
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	68d2      	ldr	r2, [r2, #12]
 80028f2:	0912      	lsrs	r2, r2, #4
 80028f4:	0452      	lsls	r2, r2, #17
 80028f6:	430a      	orrs	r2, r1
 80028f8:	491f      	ldr	r1, [pc, #124]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	614b      	str	r3, [r1, #20]
 80028fe:	e011      	b.n	8002924 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002900:	4b1d      	ldr	r3, [pc, #116]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002902:	695b      	ldr	r3, [r3, #20]
 8002904:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002908:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	6892      	ldr	r2, [r2, #8]
 8002910:	0211      	lsls	r1, r2, #8
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6912      	ldr	r2, [r2, #16]
 8002916:	0852      	lsrs	r2, r2, #1
 8002918:	3a01      	subs	r2, #1
 800291a:	0652      	lsls	r2, r2, #25
 800291c:	430a      	orrs	r2, r1
 800291e:	4916      	ldr	r1, [pc, #88]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	4313      	orrs	r3, r2
 8002922:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002924:	4b14      	ldr	r3, [pc, #80]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a13      	ldr	r2, [pc, #76]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800292e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002930:	f7fe fa2c 	bl	8000d8c <HAL_GetTick>
 8002934:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002936:	e009      	b.n	800294c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002938:	f7fe fa28 	bl	8000d8c <HAL_GetTick>
 800293c:	4602      	mov	r2, r0
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	1ad3      	subs	r3, r2, r3
 8002942:	2b02      	cmp	r3, #2
 8002944:	d902      	bls.n	800294c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	73fb      	strb	r3, [r7, #15]
          break;
 800294a:	e005      	b.n	8002958 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800294c:	4b0a      	ldr	r3, [pc, #40]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0ef      	beq.n	8002938 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002958:	7bfb      	ldrb	r3, [r7, #15]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d106      	bne.n	800296c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002960:	695a      	ldr	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4904      	ldr	r1, [pc, #16]	@ (8002978 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	4313      	orrs	r3, r2
 800296a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3710      	adds	r7, #16
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40021000 	.word	0x40021000

0800297c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d079      	beq.n	8002a82 <HAL_RTC_Init+0x106>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d106      	bne.n	80029a8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fd ffe6 	bl	8000974 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	f003 0310 	and.w	r3, r3, #16
 80029ba:	2b10      	cmp	r3, #16
 80029bc:	d058      	beq.n	8002a70 <HAL_RTC_Init+0xf4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	22ca      	movs	r2, #202	@ 0xca
 80029c4:	625a      	str	r2, [r3, #36]	@ 0x24
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2253      	movs	r2, #83	@ 0x53
 80029cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 80029ce:	6878      	ldr	r0, [r7, #4]
 80029d0:	f000 fa4e 	bl	8002e70 <RTC_EnterInitMode>
 80029d4:	4603      	mov	r3, r0
 80029d6:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80029d8:	7bfb      	ldrb	r3, [r7, #15]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d127      	bne.n	8002a2e <HAL_RTC_Init+0xb2>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	6812      	ldr	r2, [r2, #0]
 80029e8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80029ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80029f0:	6093      	str	r3, [r2, #8]
#endif
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6899      	ldr	r1, [r3, #8]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	685a      	ldr	r2, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	691b      	ldr	r3, [r3, #16]
 8002a00:	431a      	orrs	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	699b      	ldr	r3, [r3, #24]
 8002a06:	431a      	orrs	r2, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	609a      	str	r2, [r3, #8]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68d2      	ldr	r2, [r2, #12]
 8002a18:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6919      	ldr	r1, [r3, #16]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	041a      	lsls	r2, r3, #16
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif
      }

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f000 fa52 	bl	8002ed8 <RTC_ExitInitMode>
 8002a34:	4603      	mov	r3, r0
 8002a36:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002a38:	7bfb      	ldrb	r3, [r7, #15]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d113      	bne.n	8002a66 <HAL_RTC_Init+0xea>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f022 0203 	bic.w	r2, r2, #3
 8002a4c:	64da      	str	r2, [r3, #76]	@ 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	69da      	ldr	r2, [r3, #28]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	695b      	ldr	r3, [r3, #20]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	22ff      	movs	r2, #255	@ 0xff
 8002a6c:	625a      	str	r2, [r3, #36]	@ 0x24
 8002a6e:	e001      	b.n	8002a74 <HAL_RTC_Init+0xf8>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d103      	bne.n	8002a82 <HAL_RTC_Init+0x106>
    {
        hrtc->State = HAL_RTC_STATE_READY;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
  }

  return status;
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a8c:	b590      	push	{r4, r7, lr}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RTC_SetTime+0x1a>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e08b      	b.n	8002bbe <HAL_RTC_SetTime+0x132>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2202      	movs	r2, #2
 8002ab2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	22ca      	movs	r2, #202	@ 0xca
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2253      	movs	r2, #83	@ 0x53
 8002ac4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ac6:	68f8      	ldr	r0, [r7, #12]
 8002ac8:	f000 f9d2 	bl	8002e70 <RTC_EnterInitMode>
 8002acc:	4603      	mov	r3, r0
 8002ace:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002ad0:	7cfb      	ldrb	r3, [r7, #19]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d163      	bne.n	8002b9e <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d126      	bne.n	8002b2a <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d102      	bne.n	8002af0 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	2200      	movs	r2, #0
 8002aee:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fa2d 	bl	8002f54 <RTC_ByteToBcd2>
 8002afa:	4603      	mov	r3, r0
 8002afc:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	785b      	ldrb	r3, [r3, #1]
 8002b02:	4618      	mov	r0, r3
 8002b04:	f000 fa26 	bl	8002f54 <RTC_ByteToBcd2>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b0c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	789b      	ldrb	r3, [r3, #2]
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fa1e 	bl	8002f54 <RTC_ByteToBcd2>
 8002b18:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b1a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	78db      	ldrb	r3, [r3, #3]
 8002b22:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b24:	4313      	orrs	r3, r2
 8002b26:	617b      	str	r3, [r7, #20]
 8002b28:	e018      	b.n	8002b5c <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d102      	bne.n	8002b3e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	785b      	ldrb	r3, [r3, #1]
 8002b48:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b4a:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002b50:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	78db      	ldrb	r3, [r3, #3]
 8002b56:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	697b      	ldr	r3, [r7, #20]
 8002b62:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002b66:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002b6a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b7a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002b94:	68f8      	ldr	r0, [r7, #12]
 8002b96:	f000 f99f 	bl	8002ed8 <RTC_ExitInitMode>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	22ff      	movs	r2, #255	@ 0xff
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d103      	bne.n	8002bb4 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002bbc:	7cfb      	ldrb	r3, [r7, #19]
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	371c      	adds	r7, #28
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd90      	pop	{r4, r7, pc}

08002bc6 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002bc6:	b580      	push	{r7, lr}
 8002bc8:	b086      	sub	sp, #24
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	60f8      	str	r0, [r7, #12]
 8002bce:	60b9      	str	r1, [r7, #8]
 8002bd0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	691b      	ldr	r3, [r3, #16]
 8002be2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8002bf4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	0c1b      	lsrs	r3, r3, #16
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c04:	b2da      	uxtb	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002c0a:	697b      	ldr	r3, [r7, #20]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	b2db      	uxtb	r3, r3
 8002c10:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c14:	b2da      	uxtb	r2, r3
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c22:	b2da      	uxtb	r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	0d9b      	lsrs	r3, r3, #22
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d11a      	bne.n	8002c74 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	4618      	mov	r0, r3
 8002c44:	f000 f9a6 	bl	8002f94 <RTC_Bcd2ToByte>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	785b      	ldrb	r3, [r3, #1]
 8002c54:	4618      	mov	r0, r3
 8002c56:	f000 f99d 	bl	8002f94 <RTC_Bcd2ToByte>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	68bb      	ldr	r3, [r7, #8]
 8002c60:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	789b      	ldrb	r3, [r3, #2]
 8002c66:	4618      	mov	r0, r3
 8002c68:	f000 f994 	bl	8002f94 <RTC_Bcd2ToByte>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	461a      	mov	r2, r3
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3718      	adds	r7, #24
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002c7e:	b590      	push	{r4, r7, lr}
 8002c80:	b087      	sub	sp, #28
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	60f8      	str	r0, [r7, #12]
 8002c86:	60b9      	str	r1, [r7, #8]
 8002c88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_RTC_SetDate+0x1a>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e075      	b.n	8002d84 <HAL_RTC_SetDate+0x106>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10e      	bne.n	8002ccc <HAL_RTC_SetDate+0x4e>
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	785b      	ldrb	r3, [r3, #1]
 8002cb2:	f003 0310 	and.w	r3, r3, #16
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d008      	beq.n	8002ccc <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	785b      	ldrb	r3, [r3, #1]
 8002cbe:	f023 0310 	bic.w	r3, r3, #16
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	330a      	adds	r3, #10
 8002cc6:	b2da      	uxtb	r2, r3
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d11c      	bne.n	8002d0c <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cd2:	68bb      	ldr	r3, [r7, #8]
 8002cd4:	78db      	ldrb	r3, [r3, #3]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f000 f93c 	bl	8002f54 <RTC_ByteToBcd2>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	785b      	ldrb	r3, [r3, #1]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 f935 	bl	8002f54 <RTC_ByteToBcd2>
 8002cea:	4603      	mov	r3, r0
 8002cec:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002cee:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	789b      	ldrb	r3, [r3, #2]
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f92d 	bl	8002f54 <RTC_ByteToBcd2>
 8002cfa:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002cfc:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8002d06:	4313      	orrs	r3, r2
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e00e      	b.n	8002d2a <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	78db      	ldrb	r3, [r3, #3]
 8002d10:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d18:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002d1e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002d26:	4313      	orrs	r3, r2
 8002d28:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	22ca      	movs	r2, #202	@ 0xca
 8002d30:	625a      	str	r2, [r3, #36]	@ 0x24
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2253      	movs	r2, #83	@ 0x53
 8002d38:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f898 	bl	8002e70 <RTC_EnterInitMode>
 8002d40:	4603      	mov	r3, r0
 8002d42:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8002d44:	7cfb      	ldrb	r3, [r7, #19]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10c      	bne.n	8002d64 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002d54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002d58:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002d5a:	68f8      	ldr	r0, [r7, #12]
 8002d5c:	f000 f8bc 	bl	8002ed8 <RTC_ExitInitMode>
 8002d60:	4603      	mov	r3, r0
 8002d62:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	22ff      	movs	r2, #255	@ 0xff
 8002d6a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (status == HAL_OK)
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d103      	bne.n	8002d7a <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8002d82:	7cfb      	ldrb	r3, [r7, #19]
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	371c      	adds	r7, #28
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd90      	pop	{r4, r7, pc}

08002d8c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	60b9      	str	r1, [r7, #8]
 8002d96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002da2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002da6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	0a1b      	lsrs	r3, r3, #8
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	f003 031f 	and.w	r3, r3, #31
 8002dbc:	b2da      	uxtb	r2, r3
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	0b5b      	lsrs	r3, r3, #13
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	f003 0307 	and.w	r3, r3, #7
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d11a      	bne.n	8002e1c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	78db      	ldrb	r3, [r3, #3]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f8d2 	bl	8002f94 <RTC_Bcd2ToByte>
 8002df0:	4603      	mov	r3, r0
 8002df2:	461a      	mov	r2, r3
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	785b      	ldrb	r3, [r3, #1]
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f000 f8c9 	bl	8002f94 <RTC_Bcd2ToByte>
 8002e02:	4603      	mov	r3, r0
 8002e04:	461a      	mov	r2, r3
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	789b      	ldrb	r3, [r3, #2]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 f8c0 	bl	8002f94 <RTC_Bcd2ToByte>
 8002e14:	4603      	mov	r3, r0
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
#elif defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Clear RSF flag (use a read-modify-write sequence to preserve the other read-write bits) */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a0d      	ldr	r2, [pc, #52]	@ (8002e6c <HAL_RTC_WaitForSynchro+0x44>)
 8002e36:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8002e38:	f7fd ffa8 	bl	8000d8c <HAL_GetTick>
 8002e3c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e3e:	e009      	b.n	8002e54 <HAL_RTC_WaitForSynchro+0x2c>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002e40:	f7fd ffa4 	bl	8000d8c <HAL_GetTick>
 8002e44:	4602      	mov	r2, r0
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002e4e:	d901      	bls.n	8002e54 <HAL_RTC_WaitForSynchro+0x2c>
    {
      return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e007      	b.n	8002e64 <HAL_RTC_WaitForSynchro+0x3c>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0320 	and.w	r3, r3, #32
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0ee      	beq.n	8002e40 <HAL_RTC_WaitForSynchro+0x18>
    }
  }

  return HAL_OK;
 8002e62:	2300      	movs	r3, #0
}
 8002e64:	4618      	mov	r0, r3
 8002e66:	3710      	adds	r7, #16
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	0003ff5f 	.word	0x0003ff5f

08002e70 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d120      	bne.n	8002ecc <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e92:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002e94:	f7fd ff7a 	bl	8000d8c <HAL_GetTick>
 8002e98:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002e9a:	e00d      	b.n	8002eb8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002e9c:	f7fd ff76 	bl	8000d8c <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002eaa:	d905      	bls.n	8002eb8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2203      	movs	r2, #3
 8002eb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d102      	bne.n	8002ecc <RTC_EnterInitMode+0x5c>
 8002ec6:	7bfb      	ldrb	r3, [r7, #15]
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d1e7      	bne.n	8002e9c <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8002ecc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
	...

08002ed8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b084      	sub	sp, #16
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	@ (8002f50 <RTC_ExitInitMode+0x78>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a19      	ldr	r2, [pc, #100]	@ (8002f50 <RTC_ExitInitMode+0x78>)
 8002eea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002eee:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002ef0:	4b17      	ldr	r3, [pc, #92]	@ (8002f50 <RTC_ExitInitMode+0x78>)
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	f003 0320 	and.w	r3, r3, #32
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d10c      	bne.n	8002f16 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	f7ff ff93 	bl	8002e28 <HAL_RTC_WaitForSynchro>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01e      	beq.n	8002f46 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	73fb      	strb	r3, [r7, #15]
 8002f14:	e017      	b.n	8002f46 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f16:	4b0e      	ldr	r3, [pc, #56]	@ (8002f50 <RTC_ExitInitMode+0x78>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002f50 <RTC_ExitInitMode+0x78>)
 8002f1c:	f023 0320 	bic.w	r3, r3, #32
 8002f20:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff ff80 	bl	8002e28 <HAL_RTC_WaitForSynchro>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2203      	movs	r2, #3
 8002f32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
      status = HAL_TIMEOUT;
 8002f36:	2303      	movs	r3, #3
 8002f38:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002f3a:	4b05      	ldr	r3, [pc, #20]	@ (8002f50 <RTC_ExitInitMode+0x78>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	4a04      	ldr	r2, [pc, #16]	@ (8002f50 <RTC_ExitInitMode+0x78>)
 8002f40:	f043 0320 	orr.w	r3, r3, #32
 8002f44:	6093      	str	r3, [r2, #8]
  }

  return status;
 8002f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3710      	adds	r7, #16
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	40002800 	.word	0x40002800

08002f54 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8002f66:	e005      	b.n	8002f74 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8002f6e:	7afb      	ldrb	r3, [r7, #11]
 8002f70:	3b0a      	subs	r3, #10
 8002f72:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8002f74:	7afb      	ldrb	r3, [r7, #11]
 8002f76:	2b09      	cmp	r3, #9
 8002f78:	d8f6      	bhi.n	8002f68 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	011b      	lsls	r3, r3, #4
 8002f80:	b2da      	uxtb	r2, r3
 8002f82:	7afb      	ldrb	r3, [r7, #11]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	b2db      	uxtb	r3, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3714      	adds	r7, #20
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f92:	4770      	bx	lr

08002f94 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002f94:	b480      	push	{r7}
 8002f96:	b085      	sub	sp, #20
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	091b      	lsrs	r3, r3, #4
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	0092      	lsls	r2, r2, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8002fae:	79fb      	ldrb	r3, [r7, #7]
 8002fb0:	f003 030f 	and.w	r3, r3, #15
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	7bfb      	ldrb	r3, [r7, #15]
 8002fb8:	4413      	add	r3, r2
 8002fba:	b2db      	uxtb	r3, r3
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e040      	b.n	800305c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d106      	bne.n	8002ff0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7fd fcf4 	bl	80009d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2224      	movs	r2, #36	@ 0x24
 8002ff4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 0201 	bic.w	r2, r2, #1
 8003004:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800300a:	2b00      	cmp	r3, #0
 800300c:	d002      	beq.n	8003014 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	f000 fb6a 	bl	80036e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f000 f8af 	bl	8003178 <UART_SetConfig>
 800301a:	4603      	mov	r3, r0
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e01b      	b.n	800305c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003032:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003042:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f042 0201 	orr.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 fbe9 	bl	800382c <UART_CheckIdleState>
 800305a:	4603      	mov	r3, r0
}
 800305c:	4618      	mov	r0, r3
 800305e:	3708      	adds	r7, #8
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b08a      	sub	sp, #40	@ 0x28
 8003068:	af02      	add	r7, sp, #8
 800306a:	60f8      	str	r0, [r7, #12]
 800306c:	60b9      	str	r1, [r7, #8]
 800306e:	603b      	str	r3, [r7, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003078:	2b20      	cmp	r3, #32
 800307a:	d177      	bne.n	800316c <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_UART_Transmit+0x24>
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e070      	b.n	800316e <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2221      	movs	r2, #33	@ 0x21
 8003098:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309a:	f7fd fe77 	bl	8000d8c <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	88fa      	ldrh	r2, [r7, #6]
 80030ac:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b8:	d108      	bne.n	80030cc <HAL_UART_Transmit+0x68>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d104      	bne.n	80030cc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e003      	b.n	80030d4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80030cc:	68bb      	ldr	r3, [r7, #8]
 80030ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030d4:	e02f      	b.n	8003136 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	9300      	str	r3, [sp, #0]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2200      	movs	r2, #0
 80030de:	2180      	movs	r1, #128	@ 0x80
 80030e0:	68f8      	ldr	r0, [r7, #12]
 80030e2:	f000 fc4b 	bl	800397c <UART_WaitOnFlagUntilTimeout>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d004      	beq.n	80030f6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2220      	movs	r2, #32
 80030f0:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e03b      	b.n	800316e <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d10b      	bne.n	8003114 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	881a      	ldrh	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003108:	b292      	uxth	r2, r2
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	3302      	adds	r3, #2
 8003110:	61bb      	str	r3, [r7, #24]
 8003112:	e007      	b.n	8003124 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	781a      	ldrb	r2, [r3, #0]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	3301      	adds	r3, #1
 8003122:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800312a:	b29b      	uxth	r3, r3
 800312c:	3b01      	subs	r3, #1
 800312e:	b29a      	uxth	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1c9      	bne.n	80030d6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	2200      	movs	r2, #0
 800314a:	2140      	movs	r1, #64	@ 0x40
 800314c:	68f8      	ldr	r0, [r7, #12]
 800314e:	f000 fc15 	bl	800397c <UART_WaitOnFlagUntilTimeout>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d004      	beq.n	8003162 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2220      	movs	r2, #32
 800315c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e005      	b.n	800316e <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2220      	movs	r2, #32
 8003166:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	e000      	b.n	800316e <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800316c:	2302      	movs	r3, #2
  }
}
 800316e:	4618      	mov	r0, r3
 8003170:	3720      	adds	r7, #32
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
	...

08003178 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003178:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800317c:	b08a      	sub	sp, #40	@ 0x28
 800317e:	af00      	add	r7, sp, #0
 8003180:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003182:	2300      	movs	r3, #0
 8003184:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	431a      	orrs	r2, r3
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	431a      	orrs	r2, r3
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	69db      	ldr	r3, [r3, #28]
 800319c:	4313      	orrs	r3, r2
 800319e:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	4ba4      	ldr	r3, [pc, #656]	@ (8003438 <UART_SetConfig+0x2c0>)
 80031a8:	4013      	ands	r3, r2
 80031aa:	68fa      	ldr	r2, [r7, #12]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80031b0:	430b      	orrs	r3, r1
 80031b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a99      	ldr	r2, [pc, #612]	@ (800343c <UART_SetConfig+0x2c4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d004      	beq.n	80031e4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e0:	4313      	orrs	r3, r2
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031f4:	430a      	orrs	r2, r1
 80031f6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a90      	ldr	r2, [pc, #576]	@ (8003440 <UART_SetConfig+0x2c8>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d126      	bne.n	8003250 <UART_SetConfig+0xd8>
 8003202:	4b90      	ldr	r3, [pc, #576]	@ (8003444 <UART_SetConfig+0x2cc>)
 8003204:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	2b03      	cmp	r3, #3
 800320e:	d81b      	bhi.n	8003248 <UART_SetConfig+0xd0>
 8003210:	a201      	add	r2, pc, #4	@ (adr r2, 8003218 <UART_SetConfig+0xa0>)
 8003212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003216:	bf00      	nop
 8003218:	08003229 	.word	0x08003229
 800321c:	08003239 	.word	0x08003239
 8003220:	08003231 	.word	0x08003231
 8003224:	08003241 	.word	0x08003241
 8003228:	2301      	movs	r3, #1
 800322a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800322e:	e116      	b.n	800345e <UART_SetConfig+0x2e6>
 8003230:	2302      	movs	r3, #2
 8003232:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003236:	e112      	b.n	800345e <UART_SetConfig+0x2e6>
 8003238:	2304      	movs	r3, #4
 800323a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800323e:	e10e      	b.n	800345e <UART_SetConfig+0x2e6>
 8003240:	2308      	movs	r3, #8
 8003242:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003246:	e10a      	b.n	800345e <UART_SetConfig+0x2e6>
 8003248:	2310      	movs	r3, #16
 800324a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800324e:	e106      	b.n	800345e <UART_SetConfig+0x2e6>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a7c      	ldr	r2, [pc, #496]	@ (8003448 <UART_SetConfig+0x2d0>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d138      	bne.n	80032cc <UART_SetConfig+0x154>
 800325a:	4b7a      	ldr	r3, [pc, #488]	@ (8003444 <UART_SetConfig+0x2cc>)
 800325c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003260:	f003 030c 	and.w	r3, r3, #12
 8003264:	2b0c      	cmp	r3, #12
 8003266:	d82d      	bhi.n	80032c4 <UART_SetConfig+0x14c>
 8003268:	a201      	add	r2, pc, #4	@ (adr r2, 8003270 <UART_SetConfig+0xf8>)
 800326a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326e:	bf00      	nop
 8003270:	080032a5 	.word	0x080032a5
 8003274:	080032c5 	.word	0x080032c5
 8003278:	080032c5 	.word	0x080032c5
 800327c:	080032c5 	.word	0x080032c5
 8003280:	080032b5 	.word	0x080032b5
 8003284:	080032c5 	.word	0x080032c5
 8003288:	080032c5 	.word	0x080032c5
 800328c:	080032c5 	.word	0x080032c5
 8003290:	080032ad 	.word	0x080032ad
 8003294:	080032c5 	.word	0x080032c5
 8003298:	080032c5 	.word	0x080032c5
 800329c:	080032c5 	.word	0x080032c5
 80032a0:	080032bd 	.word	0x080032bd
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032aa:	e0d8      	b.n	800345e <UART_SetConfig+0x2e6>
 80032ac:	2302      	movs	r3, #2
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032b2:	e0d4      	b.n	800345e <UART_SetConfig+0x2e6>
 80032b4:	2304      	movs	r3, #4
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ba:	e0d0      	b.n	800345e <UART_SetConfig+0x2e6>
 80032bc:	2308      	movs	r3, #8
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032c2:	e0cc      	b.n	800345e <UART_SetConfig+0x2e6>
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80032ca:	e0c8      	b.n	800345e <UART_SetConfig+0x2e6>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a5e      	ldr	r2, [pc, #376]	@ (800344c <UART_SetConfig+0x2d4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d125      	bne.n	8003322 <UART_SetConfig+0x1aa>
 80032d6:	4b5b      	ldr	r3, [pc, #364]	@ (8003444 <UART_SetConfig+0x2cc>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80032e0:	2b30      	cmp	r3, #48	@ 0x30
 80032e2:	d016      	beq.n	8003312 <UART_SetConfig+0x19a>
 80032e4:	2b30      	cmp	r3, #48	@ 0x30
 80032e6:	d818      	bhi.n	800331a <UART_SetConfig+0x1a2>
 80032e8:	2b20      	cmp	r3, #32
 80032ea:	d00a      	beq.n	8003302 <UART_SetConfig+0x18a>
 80032ec:	2b20      	cmp	r3, #32
 80032ee:	d814      	bhi.n	800331a <UART_SetConfig+0x1a2>
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d002      	beq.n	80032fa <UART_SetConfig+0x182>
 80032f4:	2b10      	cmp	r3, #16
 80032f6:	d008      	beq.n	800330a <UART_SetConfig+0x192>
 80032f8:	e00f      	b.n	800331a <UART_SetConfig+0x1a2>
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003300:	e0ad      	b.n	800345e <UART_SetConfig+0x2e6>
 8003302:	2302      	movs	r3, #2
 8003304:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003308:	e0a9      	b.n	800345e <UART_SetConfig+0x2e6>
 800330a:	2304      	movs	r3, #4
 800330c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003310:	e0a5      	b.n	800345e <UART_SetConfig+0x2e6>
 8003312:	2308      	movs	r3, #8
 8003314:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003318:	e0a1      	b.n	800345e <UART_SetConfig+0x2e6>
 800331a:	2310      	movs	r3, #16
 800331c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003320:	e09d      	b.n	800345e <UART_SetConfig+0x2e6>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a4a      	ldr	r2, [pc, #296]	@ (8003450 <UART_SetConfig+0x2d8>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d125      	bne.n	8003378 <UART_SetConfig+0x200>
 800332c:	4b45      	ldr	r3, [pc, #276]	@ (8003444 <UART_SetConfig+0x2cc>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003332:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003336:	2bc0      	cmp	r3, #192	@ 0xc0
 8003338:	d016      	beq.n	8003368 <UART_SetConfig+0x1f0>
 800333a:	2bc0      	cmp	r3, #192	@ 0xc0
 800333c:	d818      	bhi.n	8003370 <UART_SetConfig+0x1f8>
 800333e:	2b80      	cmp	r3, #128	@ 0x80
 8003340:	d00a      	beq.n	8003358 <UART_SetConfig+0x1e0>
 8003342:	2b80      	cmp	r3, #128	@ 0x80
 8003344:	d814      	bhi.n	8003370 <UART_SetConfig+0x1f8>
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <UART_SetConfig+0x1d8>
 800334a:	2b40      	cmp	r3, #64	@ 0x40
 800334c:	d008      	beq.n	8003360 <UART_SetConfig+0x1e8>
 800334e:	e00f      	b.n	8003370 <UART_SetConfig+0x1f8>
 8003350:	2300      	movs	r3, #0
 8003352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003356:	e082      	b.n	800345e <UART_SetConfig+0x2e6>
 8003358:	2302      	movs	r3, #2
 800335a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800335e:	e07e      	b.n	800345e <UART_SetConfig+0x2e6>
 8003360:	2304      	movs	r3, #4
 8003362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003366:	e07a      	b.n	800345e <UART_SetConfig+0x2e6>
 8003368:	2308      	movs	r3, #8
 800336a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800336e:	e076      	b.n	800345e <UART_SetConfig+0x2e6>
 8003370:	2310      	movs	r3, #16
 8003372:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003376:	e072      	b.n	800345e <UART_SetConfig+0x2e6>
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a35      	ldr	r2, [pc, #212]	@ (8003454 <UART_SetConfig+0x2dc>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d12a      	bne.n	80033d8 <UART_SetConfig+0x260>
 8003382:	4b30      	ldr	r3, [pc, #192]	@ (8003444 <UART_SetConfig+0x2cc>)
 8003384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800338c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003390:	d01a      	beq.n	80033c8 <UART_SetConfig+0x250>
 8003392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003396:	d81b      	bhi.n	80033d0 <UART_SetConfig+0x258>
 8003398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800339c:	d00c      	beq.n	80033b8 <UART_SetConfig+0x240>
 800339e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033a2:	d815      	bhi.n	80033d0 <UART_SetConfig+0x258>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d003      	beq.n	80033b0 <UART_SetConfig+0x238>
 80033a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ac:	d008      	beq.n	80033c0 <UART_SetConfig+0x248>
 80033ae:	e00f      	b.n	80033d0 <UART_SetConfig+0x258>
 80033b0:	2300      	movs	r3, #0
 80033b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033b6:	e052      	b.n	800345e <UART_SetConfig+0x2e6>
 80033b8:	2302      	movs	r3, #2
 80033ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033be:	e04e      	b.n	800345e <UART_SetConfig+0x2e6>
 80033c0:	2304      	movs	r3, #4
 80033c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033c6:	e04a      	b.n	800345e <UART_SetConfig+0x2e6>
 80033c8:	2308      	movs	r3, #8
 80033ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033ce:	e046      	b.n	800345e <UART_SetConfig+0x2e6>
 80033d0:	2310      	movs	r3, #16
 80033d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80033d6:	e042      	b.n	800345e <UART_SetConfig+0x2e6>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a17      	ldr	r2, [pc, #92]	@ (800343c <UART_SetConfig+0x2c4>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d13a      	bne.n	8003458 <UART_SetConfig+0x2e0>
 80033e2:	4b18      	ldr	r3, [pc, #96]	@ (8003444 <UART_SetConfig+0x2cc>)
 80033e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80033ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033f0:	d01a      	beq.n	8003428 <UART_SetConfig+0x2b0>
 80033f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80033f6:	d81b      	bhi.n	8003430 <UART_SetConfig+0x2b8>
 80033f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033fc:	d00c      	beq.n	8003418 <UART_SetConfig+0x2a0>
 80033fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003402:	d815      	bhi.n	8003430 <UART_SetConfig+0x2b8>
 8003404:	2b00      	cmp	r3, #0
 8003406:	d003      	beq.n	8003410 <UART_SetConfig+0x298>
 8003408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800340c:	d008      	beq.n	8003420 <UART_SetConfig+0x2a8>
 800340e:	e00f      	b.n	8003430 <UART_SetConfig+0x2b8>
 8003410:	2300      	movs	r3, #0
 8003412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003416:	e022      	b.n	800345e <UART_SetConfig+0x2e6>
 8003418:	2302      	movs	r3, #2
 800341a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800341e:	e01e      	b.n	800345e <UART_SetConfig+0x2e6>
 8003420:	2304      	movs	r3, #4
 8003422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003426:	e01a      	b.n	800345e <UART_SetConfig+0x2e6>
 8003428:	2308      	movs	r3, #8
 800342a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800342e:	e016      	b.n	800345e <UART_SetConfig+0x2e6>
 8003430:	2310      	movs	r3, #16
 8003432:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003436:	e012      	b.n	800345e <UART_SetConfig+0x2e6>
 8003438:	efff69f3 	.word	0xefff69f3
 800343c:	40008000 	.word	0x40008000
 8003440:	40013800 	.word	0x40013800
 8003444:	40021000 	.word	0x40021000
 8003448:	40004400 	.word	0x40004400
 800344c:	40004800 	.word	0x40004800
 8003450:	40004c00 	.word	0x40004c00
 8003454:	40005000 	.word	0x40005000
 8003458:	2310      	movs	r3, #16
 800345a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a9f      	ldr	r2, [pc, #636]	@ (80036e0 <UART_SetConfig+0x568>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d17a      	bne.n	800355e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003468:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800346c:	2b08      	cmp	r3, #8
 800346e:	d824      	bhi.n	80034ba <UART_SetConfig+0x342>
 8003470:	a201      	add	r2, pc, #4	@ (adr r2, 8003478 <UART_SetConfig+0x300>)
 8003472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003476:	bf00      	nop
 8003478:	0800349d 	.word	0x0800349d
 800347c:	080034bb 	.word	0x080034bb
 8003480:	080034a5 	.word	0x080034a5
 8003484:	080034bb 	.word	0x080034bb
 8003488:	080034ab 	.word	0x080034ab
 800348c:	080034bb 	.word	0x080034bb
 8003490:	080034bb 	.word	0x080034bb
 8003494:	080034bb 	.word	0x080034bb
 8003498:	080034b3 	.word	0x080034b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800349c:	f7fe fd26 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 80034a0:	61f8      	str	r0, [r7, #28]
        break;
 80034a2:	e010      	b.n	80034c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a4:	4b8f      	ldr	r3, [pc, #572]	@ (80036e4 <UART_SetConfig+0x56c>)
 80034a6:	61fb      	str	r3, [r7, #28]
        break;
 80034a8:	e00d      	b.n	80034c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034aa:	f7fe fc87 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 80034ae:	61f8      	str	r0, [r7, #28]
        break;
 80034b0:	e009      	b.n	80034c6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034b6:	61fb      	str	r3, [r7, #28]
        break;
 80034b8:	e005      	b.n	80034c6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80034ba:	2300      	movs	r3, #0
 80034bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80034c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f000 80fb 	beq.w	80036c4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	4613      	mov	r3, r2
 80034d4:	005b      	lsls	r3, r3, #1
 80034d6:	4413      	add	r3, r2
 80034d8:	69fa      	ldr	r2, [r7, #28]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d305      	bcc.n	80034ea <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80034e4:	69fa      	ldr	r2, [r7, #28]
 80034e6:	429a      	cmp	r2, r3
 80034e8:	d903      	bls.n	80034f2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80034ea:	2301      	movs	r3, #1
 80034ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80034f0:	e0e8      	b.n	80036c4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	2200      	movs	r2, #0
 80034f6:	461c      	mov	r4, r3
 80034f8:	4615      	mov	r5, r2
 80034fa:	f04f 0200 	mov.w	r2, #0
 80034fe:	f04f 0300 	mov.w	r3, #0
 8003502:	022b      	lsls	r3, r5, #8
 8003504:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003508:	0222      	lsls	r2, r4, #8
 800350a:	68f9      	ldr	r1, [r7, #12]
 800350c:	6849      	ldr	r1, [r1, #4]
 800350e:	0849      	lsrs	r1, r1, #1
 8003510:	2000      	movs	r0, #0
 8003512:	4688      	mov	r8, r1
 8003514:	4681      	mov	r9, r0
 8003516:	eb12 0a08 	adds.w	sl, r2, r8
 800351a:	eb43 0b09 	adc.w	fp, r3, r9
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	607a      	str	r2, [r7, #4]
 8003528:	e9d7 2300 	ldrd	r2, r3, [r7]
 800352c:	4650      	mov	r0, sl
 800352e:	4659      	mov	r1, fp
 8003530:	f7fc fe9e 	bl	8000270 <__aeabi_uldivmod>
 8003534:	4602      	mov	r2, r0
 8003536:	460b      	mov	r3, r1
 8003538:	4613      	mov	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003542:	d308      	bcc.n	8003556 <UART_SetConfig+0x3de>
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800354a:	d204      	bcs.n	8003556 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	60da      	str	r2, [r3, #12]
 8003554:	e0b6      	b.n	80036c4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800355c:	e0b2      	b.n	80036c4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003566:	d15e      	bne.n	8003626 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003568:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800356c:	2b08      	cmp	r3, #8
 800356e:	d828      	bhi.n	80035c2 <UART_SetConfig+0x44a>
 8003570:	a201      	add	r2, pc, #4	@ (adr r2, 8003578 <UART_SetConfig+0x400>)
 8003572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003576:	bf00      	nop
 8003578:	0800359d 	.word	0x0800359d
 800357c:	080035a5 	.word	0x080035a5
 8003580:	080035ad 	.word	0x080035ad
 8003584:	080035c3 	.word	0x080035c3
 8003588:	080035b3 	.word	0x080035b3
 800358c:	080035c3 	.word	0x080035c3
 8003590:	080035c3 	.word	0x080035c3
 8003594:	080035c3 	.word	0x080035c3
 8003598:	080035bb 	.word	0x080035bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800359c:	f7fe fca6 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 80035a0:	61f8      	str	r0, [r7, #28]
        break;
 80035a2:	e014      	b.n	80035ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035a4:	f7fe fcb8 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 80035a8:	61f8      	str	r0, [r7, #28]
        break;
 80035aa:	e010      	b.n	80035ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035ac:	4b4d      	ldr	r3, [pc, #308]	@ (80036e4 <UART_SetConfig+0x56c>)
 80035ae:	61fb      	str	r3, [r7, #28]
        break;
 80035b0:	e00d      	b.n	80035ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80035b2:	f7fe fc03 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 80035b6:	61f8      	str	r0, [r7, #28]
        break;
 80035b8:	e009      	b.n	80035ce <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035be:	61fb      	str	r3, [r7, #28]
        break;
 80035c0:	e005      	b.n	80035ce <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80035cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d077      	beq.n	80036c4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	005a      	lsls	r2, r3, #1
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	085b      	lsrs	r3, r3, #1
 80035de:	441a      	add	r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b0f      	cmp	r3, #15
 80035ee:	d916      	bls.n	800361e <UART_SetConfig+0x4a6>
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80035f6:	d212      	bcs.n	800361e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80035f8:	69bb      	ldr	r3, [r7, #24]
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	f023 030f 	bic.w	r3, r3, #15
 8003600:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	085b      	lsrs	r3, r3, #1
 8003606:	b29b      	uxth	r3, r3
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	b29a      	uxth	r2, r3
 800360e:	8afb      	ldrh	r3, [r7, #22]
 8003610:	4313      	orrs	r3, r2
 8003612:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	8afa      	ldrh	r2, [r7, #22]
 800361a:	60da      	str	r2, [r3, #12]
 800361c:	e052      	b.n	80036c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003624:	e04e      	b.n	80036c4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003626:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800362a:	2b08      	cmp	r3, #8
 800362c:	d827      	bhi.n	800367e <UART_SetConfig+0x506>
 800362e:	a201      	add	r2, pc, #4	@ (adr r2, 8003634 <UART_SetConfig+0x4bc>)
 8003630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003634:	08003659 	.word	0x08003659
 8003638:	08003661 	.word	0x08003661
 800363c:	08003669 	.word	0x08003669
 8003640:	0800367f 	.word	0x0800367f
 8003644:	0800366f 	.word	0x0800366f
 8003648:	0800367f 	.word	0x0800367f
 800364c:	0800367f 	.word	0x0800367f
 8003650:	0800367f 	.word	0x0800367f
 8003654:	08003677 	.word	0x08003677
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003658:	f7fe fc48 	bl	8001eec <HAL_RCC_GetPCLK1Freq>
 800365c:	61f8      	str	r0, [r7, #28]
        break;
 800365e:	e014      	b.n	800368a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003660:	f7fe fc5a 	bl	8001f18 <HAL_RCC_GetPCLK2Freq>
 8003664:	61f8      	str	r0, [r7, #28]
        break;
 8003666:	e010      	b.n	800368a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003668:	4b1e      	ldr	r3, [pc, #120]	@ (80036e4 <UART_SetConfig+0x56c>)
 800366a:	61fb      	str	r3, [r7, #28]
        break;
 800366c:	e00d      	b.n	800368a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800366e:	f7fe fba5 	bl	8001dbc <HAL_RCC_GetSysClockFreq>
 8003672:	61f8      	str	r0, [r7, #28]
        break;
 8003674:	e009      	b.n	800368a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003676:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800367a:	61fb      	str	r3, [r7, #28]
        break;
 800367c:	e005      	b.n	800368a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800367e:	2300      	movs	r3, #0
 8003680:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003682:	2301      	movs	r3, #1
 8003684:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003688:	bf00      	nop
    }

    if (pclk != 0U)
 800368a:	69fb      	ldr	r3, [r7, #28]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d019      	beq.n	80036c4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	085a      	lsrs	r2, r3, #1
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	441a      	add	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	2b0f      	cmp	r3, #15
 80036a8:	d909      	bls.n	80036be <UART_SetConfig+0x546>
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036b0:	d205      	bcs.n	80036be <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	b29a      	uxth	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	60da      	str	r2, [r3, #12]
 80036bc:	e002      	b.n	80036c4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2200      	movs	r2, #0
 80036ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80036d0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3728      	adds	r7, #40	@ 0x28
 80036d8:	46bd      	mov	sp, r7
 80036da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036de:	bf00      	nop
 80036e0:	40008000 	.word	0x40008000
 80036e4:	00f42400 	.word	0x00f42400

080036e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00a      	beq.n	8003712 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003716:	f003 0301 	and.w	r3, r3, #1
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00a      	beq.n	8003734 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00a      	beq.n	8003778 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	f003 0310 	and.w	r3, r3, #16
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00a      	beq.n	800379a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	f003 0320 	and.w	r3, r3, #32
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	430a      	orrs	r2, r1
 80037ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01a      	beq.n	80037fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80037e6:	d10a      	bne.n	80037fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	605a      	str	r2, [r3, #4]
  }
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b098      	sub	sp, #96	@ 0x60
 8003830:	af02      	add	r7, sp, #8
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800383c:	f7fd faa6 	bl	8000d8c <HAL_GetTick>
 8003840:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d12e      	bne.n	80038ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003850:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003854:	9300      	str	r3, [sp, #0]
 8003856:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003858:	2200      	movs	r2, #0
 800385a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f000 f88c 	bl	800397c <UART_WaitOnFlagUntilTimeout>
 8003864:	4603      	mov	r3, r0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d021      	beq.n	80038ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003878:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800387a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800387e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	461a      	mov	r2, r3
 8003886:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003888:	647b      	str	r3, [r7, #68]	@ 0x44
 800388a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800388e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003896:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e6      	bne.n	800386a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2220      	movs	r2, #32
 80038a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80038aa:	2303      	movs	r3, #3
 80038ac:	e062      	b.n	8003974 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0304 	and.w	r3, r3, #4
 80038b8:	2b04      	cmp	r3, #4
 80038ba:	d149      	bne.n	8003950 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038c4:	2200      	movs	r2, #0
 80038c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80038ca:	6878      	ldr	r0, [r7, #4]
 80038cc:	f000 f856 	bl	800397c <UART_WaitOnFlagUntilTimeout>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d03c      	beq.n	8003950 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038de:	e853 3f00 	ldrex	r3, [r3]
 80038e2:	623b      	str	r3, [r7, #32]
   return(result);
 80038e4:	6a3b      	ldr	r3, [r7, #32]
 80038e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80038ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	461a      	mov	r2, r3
 80038f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80038f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80038fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038fc:	e841 2300 	strex	r3, r2, [r1]
 8003900:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003904:	2b00      	cmp	r3, #0
 8003906:	d1e6      	bne.n	80038d6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	3308      	adds	r3, #8
 800390e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	60fb      	str	r3, [r7, #12]
   return(result);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0301 	bic.w	r3, r3, #1
 800391e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	3308      	adds	r3, #8
 8003926:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003928:	61fa      	str	r2, [r7, #28]
 800392a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	69fa      	ldr	r2, [r7, #28]
 8003930:	e841 2300 	strex	r3, r2, [r1]
 8003934:	617b      	str	r3, [r7, #20]
   return(result);
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d1e5      	bne.n	8003908 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e011      	b.n	8003974 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2220      	movs	r2, #32
 8003954:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2200      	movs	r2, #0
 8003962:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003972:	2300      	movs	r3, #0
}
 8003974:	4618      	mov	r0, r3
 8003976:	3758      	adds	r7, #88	@ 0x58
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	603b      	str	r3, [r7, #0]
 8003988:	4613      	mov	r3, r2
 800398a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800398c:	e04f      	b.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003994:	d04b      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003996:	f7fd f9f9 	bl	8000d8c <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d302      	bcc.n	80039ac <UART_WaitOnFlagUntilTimeout+0x30>
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d101      	bne.n	80039b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80039ac:	2303      	movs	r3, #3
 80039ae:	e04e      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0304 	and.w	r3, r3, #4
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d037      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	2b80      	cmp	r3, #128	@ 0x80
 80039c2:	d034      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb2>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b40      	cmp	r3, #64	@ 0x40
 80039c8:	d031      	beq.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d110      	bne.n	80039fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2208      	movs	r2, #8
 80039de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039e0:	68f8      	ldr	r0, [r7, #12]
 80039e2:	f000 f838 	bl	8003a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2208      	movs	r2, #8
 80039ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e029      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69db      	ldr	r3, [r3, #28]
 8003a00:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003a04:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a08:	d111      	bne.n	8003a2e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003a12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f81e 	bl	8003a56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2220      	movs	r2, #32
 8003a1e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e00f      	b.n	8003a4e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	69da      	ldr	r2, [r3, #28]
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	4013      	ands	r3, r2
 8003a38:	68ba      	ldr	r2, [r7, #8]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	bf0c      	ite	eq
 8003a3e:	2301      	moveq	r3, #1
 8003a40:	2300      	movne	r3, #0
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	79fb      	ldrb	r3, [r7, #7]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d0a0      	beq.n	800398e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a4c:	2300      	movs	r3, #0
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a56:	b480      	push	{r7}
 8003a58:	b095      	sub	sp, #84	@ 0x54
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a66:	e853 3f00 	ldrex	r3, [r3]
 8003a6a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a6e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	461a      	mov	r2, r3
 8003a7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003a7e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a80:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a84:	e841 2300 	strex	r3, r2, [r1]
 8003a88:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d1e6      	bne.n	8003a5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	3308      	adds	r3, #8
 8003a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a98:	6a3b      	ldr	r3, [r7, #32]
 8003a9a:	e853 3f00 	ldrex	r3, [r3]
 8003a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f023 0301 	bic.w	r3, r3, #1
 8003aa6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	3308      	adds	r3, #8
 8003aae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003ab0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ab2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ab4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ab6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ab8:	e841 2300 	strex	r3, r2, [r1]
 8003abc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1e5      	bne.n	8003a90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d118      	bne.n	8003afe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f023 0310 	bic.w	r3, r3, #16
 8003ae0:	647b      	str	r3, [r7, #68]	@ 0x44
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	613b      	str	r3, [r7, #16]
   return(result);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e6      	bne.n	8003acc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003b12:	bf00      	nop
 8003b14:	3754      	adds	r7, #84	@ 0x54
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <std>:
 8003b20:	2300      	movs	r3, #0
 8003b22:	b510      	push	{r4, lr}
 8003b24:	4604      	mov	r4, r0
 8003b26:	e9c0 3300 	strd	r3, r3, [r0]
 8003b2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003b2e:	6083      	str	r3, [r0, #8]
 8003b30:	8181      	strh	r1, [r0, #12]
 8003b32:	6643      	str	r3, [r0, #100]	@ 0x64
 8003b34:	81c2      	strh	r2, [r0, #14]
 8003b36:	6183      	str	r3, [r0, #24]
 8003b38:	4619      	mov	r1, r3
 8003b3a:	2208      	movs	r2, #8
 8003b3c:	305c      	adds	r0, #92	@ 0x5c
 8003b3e:	f000 f9f9 	bl	8003f34 <memset>
 8003b42:	4b0d      	ldr	r3, [pc, #52]	@ (8003b78 <std+0x58>)
 8003b44:	6263      	str	r3, [r4, #36]	@ 0x24
 8003b46:	4b0d      	ldr	r3, [pc, #52]	@ (8003b7c <std+0x5c>)
 8003b48:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003b80 <std+0x60>)
 8003b4c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003b84 <std+0x64>)
 8003b50:	6323      	str	r3, [r4, #48]	@ 0x30
 8003b52:	4b0d      	ldr	r3, [pc, #52]	@ (8003b88 <std+0x68>)
 8003b54:	6224      	str	r4, [r4, #32]
 8003b56:	429c      	cmp	r4, r3
 8003b58:	d006      	beq.n	8003b68 <std+0x48>
 8003b5a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003b5e:	4294      	cmp	r4, r2
 8003b60:	d002      	beq.n	8003b68 <std+0x48>
 8003b62:	33d0      	adds	r3, #208	@ 0xd0
 8003b64:	429c      	cmp	r4, r3
 8003b66:	d105      	bne.n	8003b74 <std+0x54>
 8003b68:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003b6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b70:	f000 ba58 	b.w	8004024 <__retarget_lock_init_recursive>
 8003b74:	bd10      	pop	{r4, pc}
 8003b76:	bf00      	nop
 8003b78:	08003d85 	.word	0x08003d85
 8003b7c:	08003da7 	.word	0x08003da7
 8003b80:	08003ddf 	.word	0x08003ddf
 8003b84:	08003e03 	.word	0x08003e03
 8003b88:	20000138 	.word	0x20000138

08003b8c <stdio_exit_handler>:
 8003b8c:	4a02      	ldr	r2, [pc, #8]	@ (8003b98 <stdio_exit_handler+0xc>)
 8003b8e:	4903      	ldr	r1, [pc, #12]	@ (8003b9c <stdio_exit_handler+0x10>)
 8003b90:	4803      	ldr	r0, [pc, #12]	@ (8003ba0 <stdio_exit_handler+0x14>)
 8003b92:	f000 b869 	b.w	8003c68 <_fwalk_sglue>
 8003b96:	bf00      	nop
 8003b98:	2000000c 	.word	0x2000000c
 8003b9c:	080048c1 	.word	0x080048c1
 8003ba0:	2000001c 	.word	0x2000001c

08003ba4 <cleanup_stdio>:
 8003ba4:	6841      	ldr	r1, [r0, #4]
 8003ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <cleanup_stdio+0x34>)
 8003ba8:	4299      	cmp	r1, r3
 8003baa:	b510      	push	{r4, lr}
 8003bac:	4604      	mov	r4, r0
 8003bae:	d001      	beq.n	8003bb4 <cleanup_stdio+0x10>
 8003bb0:	f000 fe86 	bl	80048c0 <_fflush_r>
 8003bb4:	68a1      	ldr	r1, [r4, #8]
 8003bb6:	4b09      	ldr	r3, [pc, #36]	@ (8003bdc <cleanup_stdio+0x38>)
 8003bb8:	4299      	cmp	r1, r3
 8003bba:	d002      	beq.n	8003bc2 <cleanup_stdio+0x1e>
 8003bbc:	4620      	mov	r0, r4
 8003bbe:	f000 fe7f 	bl	80048c0 <_fflush_r>
 8003bc2:	68e1      	ldr	r1, [r4, #12]
 8003bc4:	4b06      	ldr	r3, [pc, #24]	@ (8003be0 <cleanup_stdio+0x3c>)
 8003bc6:	4299      	cmp	r1, r3
 8003bc8:	d004      	beq.n	8003bd4 <cleanup_stdio+0x30>
 8003bca:	4620      	mov	r0, r4
 8003bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bd0:	f000 be76 	b.w	80048c0 <_fflush_r>
 8003bd4:	bd10      	pop	{r4, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000138 	.word	0x20000138
 8003bdc:	200001a0 	.word	0x200001a0
 8003be0:	20000208 	.word	0x20000208

08003be4 <global_stdio_init.part.0>:
 8003be4:	b510      	push	{r4, lr}
 8003be6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c14 <global_stdio_init.part.0+0x30>)
 8003be8:	4c0b      	ldr	r4, [pc, #44]	@ (8003c18 <global_stdio_init.part.0+0x34>)
 8003bea:	4a0c      	ldr	r2, [pc, #48]	@ (8003c1c <global_stdio_init.part.0+0x38>)
 8003bec:	601a      	str	r2, [r3, #0]
 8003bee:	4620      	mov	r0, r4
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	2104      	movs	r1, #4
 8003bf4:	f7ff ff94 	bl	8003b20 <std>
 8003bf8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	2109      	movs	r1, #9
 8003c00:	f7ff ff8e 	bl	8003b20 <std>
 8003c04:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003c08:	2202      	movs	r2, #2
 8003c0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c0e:	2112      	movs	r1, #18
 8003c10:	f7ff bf86 	b.w	8003b20 <std>
 8003c14:	20000270 	.word	0x20000270
 8003c18:	20000138 	.word	0x20000138
 8003c1c:	08003b8d 	.word	0x08003b8d

08003c20 <__sfp_lock_acquire>:
 8003c20:	4801      	ldr	r0, [pc, #4]	@ (8003c28 <__sfp_lock_acquire+0x8>)
 8003c22:	f000 ba00 	b.w	8004026 <__retarget_lock_acquire_recursive>
 8003c26:	bf00      	nop
 8003c28:	20000279 	.word	0x20000279

08003c2c <__sfp_lock_release>:
 8003c2c:	4801      	ldr	r0, [pc, #4]	@ (8003c34 <__sfp_lock_release+0x8>)
 8003c2e:	f000 b9fb 	b.w	8004028 <__retarget_lock_release_recursive>
 8003c32:	bf00      	nop
 8003c34:	20000279 	.word	0x20000279

08003c38 <__sinit>:
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	4604      	mov	r4, r0
 8003c3c:	f7ff fff0 	bl	8003c20 <__sfp_lock_acquire>
 8003c40:	6a23      	ldr	r3, [r4, #32]
 8003c42:	b11b      	cbz	r3, 8003c4c <__sinit+0x14>
 8003c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c48:	f7ff bff0 	b.w	8003c2c <__sfp_lock_release>
 8003c4c:	4b04      	ldr	r3, [pc, #16]	@ (8003c60 <__sinit+0x28>)
 8003c4e:	6223      	str	r3, [r4, #32]
 8003c50:	4b04      	ldr	r3, [pc, #16]	@ (8003c64 <__sinit+0x2c>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1f5      	bne.n	8003c44 <__sinit+0xc>
 8003c58:	f7ff ffc4 	bl	8003be4 <global_stdio_init.part.0>
 8003c5c:	e7f2      	b.n	8003c44 <__sinit+0xc>
 8003c5e:	bf00      	nop
 8003c60:	08003ba5 	.word	0x08003ba5
 8003c64:	20000270 	.word	0x20000270

08003c68 <_fwalk_sglue>:
 8003c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c6c:	4607      	mov	r7, r0
 8003c6e:	4688      	mov	r8, r1
 8003c70:	4614      	mov	r4, r2
 8003c72:	2600      	movs	r6, #0
 8003c74:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c78:	f1b9 0901 	subs.w	r9, r9, #1
 8003c7c:	d505      	bpl.n	8003c8a <_fwalk_sglue+0x22>
 8003c7e:	6824      	ldr	r4, [r4, #0]
 8003c80:	2c00      	cmp	r4, #0
 8003c82:	d1f7      	bne.n	8003c74 <_fwalk_sglue+0xc>
 8003c84:	4630      	mov	r0, r6
 8003c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c8a:	89ab      	ldrh	r3, [r5, #12]
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d907      	bls.n	8003ca0 <_fwalk_sglue+0x38>
 8003c90:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c94:	3301      	adds	r3, #1
 8003c96:	d003      	beq.n	8003ca0 <_fwalk_sglue+0x38>
 8003c98:	4629      	mov	r1, r5
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	47c0      	blx	r8
 8003c9e:	4306      	orrs	r6, r0
 8003ca0:	3568      	adds	r5, #104	@ 0x68
 8003ca2:	e7e9      	b.n	8003c78 <_fwalk_sglue+0x10>

08003ca4 <iprintf>:
 8003ca4:	b40f      	push	{r0, r1, r2, r3}
 8003ca6:	b507      	push	{r0, r1, r2, lr}
 8003ca8:	4906      	ldr	r1, [pc, #24]	@ (8003cc4 <iprintf+0x20>)
 8003caa:	ab04      	add	r3, sp, #16
 8003cac:	6808      	ldr	r0, [r1, #0]
 8003cae:	f853 2b04 	ldr.w	r2, [r3], #4
 8003cb2:	6881      	ldr	r1, [r0, #8]
 8003cb4:	9301      	str	r3, [sp, #4]
 8003cb6:	f000 fadb 	bl	8004270 <_vfiprintf_r>
 8003cba:	b003      	add	sp, #12
 8003cbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8003cc0:	b004      	add	sp, #16
 8003cc2:	4770      	bx	lr
 8003cc4:	20000018 	.word	0x20000018

08003cc8 <_puts_r>:
 8003cc8:	6a03      	ldr	r3, [r0, #32]
 8003cca:	b570      	push	{r4, r5, r6, lr}
 8003ccc:	6884      	ldr	r4, [r0, #8]
 8003cce:	4605      	mov	r5, r0
 8003cd0:	460e      	mov	r6, r1
 8003cd2:	b90b      	cbnz	r3, 8003cd8 <_puts_r+0x10>
 8003cd4:	f7ff ffb0 	bl	8003c38 <__sinit>
 8003cd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003cda:	07db      	lsls	r3, r3, #31
 8003cdc:	d405      	bmi.n	8003cea <_puts_r+0x22>
 8003cde:	89a3      	ldrh	r3, [r4, #12]
 8003ce0:	0598      	lsls	r0, r3, #22
 8003ce2:	d402      	bmi.n	8003cea <_puts_r+0x22>
 8003ce4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003ce6:	f000 f99e 	bl	8004026 <__retarget_lock_acquire_recursive>
 8003cea:	89a3      	ldrh	r3, [r4, #12]
 8003cec:	0719      	lsls	r1, r3, #28
 8003cee:	d502      	bpl.n	8003cf6 <_puts_r+0x2e>
 8003cf0:	6923      	ldr	r3, [r4, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d135      	bne.n	8003d62 <_puts_r+0x9a>
 8003cf6:	4621      	mov	r1, r4
 8003cf8:	4628      	mov	r0, r5
 8003cfa:	f000 f8c5 	bl	8003e88 <__swsetup_r>
 8003cfe:	b380      	cbz	r0, 8003d62 <_puts_r+0x9a>
 8003d00:	f04f 35ff 	mov.w	r5, #4294967295
 8003d04:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d06:	07da      	lsls	r2, r3, #31
 8003d08:	d405      	bmi.n	8003d16 <_puts_r+0x4e>
 8003d0a:	89a3      	ldrh	r3, [r4, #12]
 8003d0c:	059b      	lsls	r3, r3, #22
 8003d0e:	d402      	bmi.n	8003d16 <_puts_r+0x4e>
 8003d10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d12:	f000 f989 	bl	8004028 <__retarget_lock_release_recursive>
 8003d16:	4628      	mov	r0, r5
 8003d18:	bd70      	pop	{r4, r5, r6, pc}
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	da04      	bge.n	8003d28 <_puts_r+0x60>
 8003d1e:	69a2      	ldr	r2, [r4, #24]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	dc17      	bgt.n	8003d54 <_puts_r+0x8c>
 8003d24:	290a      	cmp	r1, #10
 8003d26:	d015      	beq.n	8003d54 <_puts_r+0x8c>
 8003d28:	6823      	ldr	r3, [r4, #0]
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	6022      	str	r2, [r4, #0]
 8003d2e:	7019      	strb	r1, [r3, #0]
 8003d30:	68a3      	ldr	r3, [r4, #8]
 8003d32:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003d36:	3b01      	subs	r3, #1
 8003d38:	60a3      	str	r3, [r4, #8]
 8003d3a:	2900      	cmp	r1, #0
 8003d3c:	d1ed      	bne.n	8003d1a <_puts_r+0x52>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	da11      	bge.n	8003d66 <_puts_r+0x9e>
 8003d42:	4622      	mov	r2, r4
 8003d44:	210a      	movs	r1, #10
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 f85f 	bl	8003e0a <__swbuf_r>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d0d7      	beq.n	8003d00 <_puts_r+0x38>
 8003d50:	250a      	movs	r5, #10
 8003d52:	e7d7      	b.n	8003d04 <_puts_r+0x3c>
 8003d54:	4622      	mov	r2, r4
 8003d56:	4628      	mov	r0, r5
 8003d58:	f000 f857 	bl	8003e0a <__swbuf_r>
 8003d5c:	3001      	adds	r0, #1
 8003d5e:	d1e7      	bne.n	8003d30 <_puts_r+0x68>
 8003d60:	e7ce      	b.n	8003d00 <_puts_r+0x38>
 8003d62:	3e01      	subs	r6, #1
 8003d64:	e7e4      	b.n	8003d30 <_puts_r+0x68>
 8003d66:	6823      	ldr	r3, [r4, #0]
 8003d68:	1c5a      	adds	r2, r3, #1
 8003d6a:	6022      	str	r2, [r4, #0]
 8003d6c:	220a      	movs	r2, #10
 8003d6e:	701a      	strb	r2, [r3, #0]
 8003d70:	e7ee      	b.n	8003d50 <_puts_r+0x88>
	...

08003d74 <puts>:
 8003d74:	4b02      	ldr	r3, [pc, #8]	@ (8003d80 <puts+0xc>)
 8003d76:	4601      	mov	r1, r0
 8003d78:	6818      	ldr	r0, [r3, #0]
 8003d7a:	f7ff bfa5 	b.w	8003cc8 <_puts_r>
 8003d7e:	bf00      	nop
 8003d80:	20000018 	.word	0x20000018

08003d84 <__sread>:
 8003d84:	b510      	push	{r4, lr}
 8003d86:	460c      	mov	r4, r1
 8003d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d8c:	f000 f8fc 	bl	8003f88 <_read_r>
 8003d90:	2800      	cmp	r0, #0
 8003d92:	bfab      	itete	ge
 8003d94:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003d96:	89a3      	ldrhlt	r3, [r4, #12]
 8003d98:	181b      	addge	r3, r3, r0
 8003d9a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003d9e:	bfac      	ite	ge
 8003da0:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003da2:	81a3      	strhlt	r3, [r4, #12]
 8003da4:	bd10      	pop	{r4, pc}

08003da6 <__swrite>:
 8003da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003daa:	461f      	mov	r7, r3
 8003dac:	898b      	ldrh	r3, [r1, #12]
 8003dae:	05db      	lsls	r3, r3, #23
 8003db0:	4605      	mov	r5, r0
 8003db2:	460c      	mov	r4, r1
 8003db4:	4616      	mov	r6, r2
 8003db6:	d505      	bpl.n	8003dc4 <__swrite+0x1e>
 8003db8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f000 f8d0 	bl	8003f64 <_lseek_r>
 8003dc4:	89a3      	ldrh	r3, [r4, #12]
 8003dc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003dca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003dce:	81a3      	strh	r3, [r4, #12]
 8003dd0:	4632      	mov	r2, r6
 8003dd2:	463b      	mov	r3, r7
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dda:	f000 b8e7 	b.w	8003fac <_write_r>

08003dde <__sseek>:
 8003dde:	b510      	push	{r4, lr}
 8003de0:	460c      	mov	r4, r1
 8003de2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003de6:	f000 f8bd 	bl	8003f64 <_lseek_r>
 8003dea:	1c43      	adds	r3, r0, #1
 8003dec:	89a3      	ldrh	r3, [r4, #12]
 8003dee:	bf15      	itete	ne
 8003df0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003df2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003df6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003dfa:	81a3      	strheq	r3, [r4, #12]
 8003dfc:	bf18      	it	ne
 8003dfe:	81a3      	strhne	r3, [r4, #12]
 8003e00:	bd10      	pop	{r4, pc}

08003e02 <__sclose>:
 8003e02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e06:	f000 b89d 	b.w	8003f44 <_close_r>

08003e0a <__swbuf_r>:
 8003e0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e0c:	460e      	mov	r6, r1
 8003e0e:	4614      	mov	r4, r2
 8003e10:	4605      	mov	r5, r0
 8003e12:	b118      	cbz	r0, 8003e1c <__swbuf_r+0x12>
 8003e14:	6a03      	ldr	r3, [r0, #32]
 8003e16:	b90b      	cbnz	r3, 8003e1c <__swbuf_r+0x12>
 8003e18:	f7ff ff0e 	bl	8003c38 <__sinit>
 8003e1c:	69a3      	ldr	r3, [r4, #24]
 8003e1e:	60a3      	str	r3, [r4, #8]
 8003e20:	89a3      	ldrh	r3, [r4, #12]
 8003e22:	071a      	lsls	r2, r3, #28
 8003e24:	d501      	bpl.n	8003e2a <__swbuf_r+0x20>
 8003e26:	6923      	ldr	r3, [r4, #16]
 8003e28:	b943      	cbnz	r3, 8003e3c <__swbuf_r+0x32>
 8003e2a:	4621      	mov	r1, r4
 8003e2c:	4628      	mov	r0, r5
 8003e2e:	f000 f82b 	bl	8003e88 <__swsetup_r>
 8003e32:	b118      	cbz	r0, 8003e3c <__swbuf_r+0x32>
 8003e34:	f04f 37ff 	mov.w	r7, #4294967295
 8003e38:	4638      	mov	r0, r7
 8003e3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	6922      	ldr	r2, [r4, #16]
 8003e40:	1a98      	subs	r0, r3, r2
 8003e42:	6963      	ldr	r3, [r4, #20]
 8003e44:	b2f6      	uxtb	r6, r6
 8003e46:	4283      	cmp	r3, r0
 8003e48:	4637      	mov	r7, r6
 8003e4a:	dc05      	bgt.n	8003e58 <__swbuf_r+0x4e>
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	4628      	mov	r0, r5
 8003e50:	f000 fd36 	bl	80048c0 <_fflush_r>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d1ed      	bne.n	8003e34 <__swbuf_r+0x2a>
 8003e58:	68a3      	ldr	r3, [r4, #8]
 8003e5a:	3b01      	subs	r3, #1
 8003e5c:	60a3      	str	r3, [r4, #8]
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	1c5a      	adds	r2, r3, #1
 8003e62:	6022      	str	r2, [r4, #0]
 8003e64:	701e      	strb	r6, [r3, #0]
 8003e66:	6962      	ldr	r2, [r4, #20]
 8003e68:	1c43      	adds	r3, r0, #1
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d004      	beq.n	8003e78 <__swbuf_r+0x6e>
 8003e6e:	89a3      	ldrh	r3, [r4, #12]
 8003e70:	07db      	lsls	r3, r3, #31
 8003e72:	d5e1      	bpl.n	8003e38 <__swbuf_r+0x2e>
 8003e74:	2e0a      	cmp	r6, #10
 8003e76:	d1df      	bne.n	8003e38 <__swbuf_r+0x2e>
 8003e78:	4621      	mov	r1, r4
 8003e7a:	4628      	mov	r0, r5
 8003e7c:	f000 fd20 	bl	80048c0 <_fflush_r>
 8003e80:	2800      	cmp	r0, #0
 8003e82:	d0d9      	beq.n	8003e38 <__swbuf_r+0x2e>
 8003e84:	e7d6      	b.n	8003e34 <__swbuf_r+0x2a>
	...

08003e88 <__swsetup_r>:
 8003e88:	b538      	push	{r3, r4, r5, lr}
 8003e8a:	4b29      	ldr	r3, [pc, #164]	@ (8003f30 <__swsetup_r+0xa8>)
 8003e8c:	4605      	mov	r5, r0
 8003e8e:	6818      	ldr	r0, [r3, #0]
 8003e90:	460c      	mov	r4, r1
 8003e92:	b118      	cbz	r0, 8003e9c <__swsetup_r+0x14>
 8003e94:	6a03      	ldr	r3, [r0, #32]
 8003e96:	b90b      	cbnz	r3, 8003e9c <__swsetup_r+0x14>
 8003e98:	f7ff fece 	bl	8003c38 <__sinit>
 8003e9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ea0:	0719      	lsls	r1, r3, #28
 8003ea2:	d422      	bmi.n	8003eea <__swsetup_r+0x62>
 8003ea4:	06da      	lsls	r2, r3, #27
 8003ea6:	d407      	bmi.n	8003eb8 <__swsetup_r+0x30>
 8003ea8:	2209      	movs	r2, #9
 8003eaa:	602a      	str	r2, [r5, #0]
 8003eac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003eb0:	81a3      	strh	r3, [r4, #12]
 8003eb2:	f04f 30ff 	mov.w	r0, #4294967295
 8003eb6:	e033      	b.n	8003f20 <__swsetup_r+0x98>
 8003eb8:	0758      	lsls	r0, r3, #29
 8003eba:	d512      	bpl.n	8003ee2 <__swsetup_r+0x5a>
 8003ebc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003ebe:	b141      	cbz	r1, 8003ed2 <__swsetup_r+0x4a>
 8003ec0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003ec4:	4299      	cmp	r1, r3
 8003ec6:	d002      	beq.n	8003ece <__swsetup_r+0x46>
 8003ec8:	4628      	mov	r0, r5
 8003eca:	f000 f8af 	bl	800402c <_free_r>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	6363      	str	r3, [r4, #52]	@ 0x34
 8003ed2:	89a3      	ldrh	r3, [r4, #12]
 8003ed4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003ed8:	81a3      	strh	r3, [r4, #12]
 8003eda:	2300      	movs	r3, #0
 8003edc:	6063      	str	r3, [r4, #4]
 8003ede:	6923      	ldr	r3, [r4, #16]
 8003ee0:	6023      	str	r3, [r4, #0]
 8003ee2:	89a3      	ldrh	r3, [r4, #12]
 8003ee4:	f043 0308 	orr.w	r3, r3, #8
 8003ee8:	81a3      	strh	r3, [r4, #12]
 8003eea:	6923      	ldr	r3, [r4, #16]
 8003eec:	b94b      	cbnz	r3, 8003f02 <__swsetup_r+0x7a>
 8003eee:	89a3      	ldrh	r3, [r4, #12]
 8003ef0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003ef4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ef8:	d003      	beq.n	8003f02 <__swsetup_r+0x7a>
 8003efa:	4621      	mov	r1, r4
 8003efc:	4628      	mov	r0, r5
 8003efe:	f000 fd2d 	bl	800495c <__smakebuf_r>
 8003f02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f06:	f013 0201 	ands.w	r2, r3, #1
 8003f0a:	d00a      	beq.n	8003f22 <__swsetup_r+0x9a>
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	60a2      	str	r2, [r4, #8]
 8003f10:	6962      	ldr	r2, [r4, #20]
 8003f12:	4252      	negs	r2, r2
 8003f14:	61a2      	str	r2, [r4, #24]
 8003f16:	6922      	ldr	r2, [r4, #16]
 8003f18:	b942      	cbnz	r2, 8003f2c <__swsetup_r+0xa4>
 8003f1a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003f1e:	d1c5      	bne.n	8003eac <__swsetup_r+0x24>
 8003f20:	bd38      	pop	{r3, r4, r5, pc}
 8003f22:	0799      	lsls	r1, r3, #30
 8003f24:	bf58      	it	pl
 8003f26:	6962      	ldrpl	r2, [r4, #20]
 8003f28:	60a2      	str	r2, [r4, #8]
 8003f2a:	e7f4      	b.n	8003f16 <__swsetup_r+0x8e>
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e7f7      	b.n	8003f20 <__swsetup_r+0x98>
 8003f30:	20000018 	.word	0x20000018

08003f34 <memset>:
 8003f34:	4402      	add	r2, r0
 8003f36:	4603      	mov	r3, r0
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d100      	bne.n	8003f3e <memset+0xa>
 8003f3c:	4770      	bx	lr
 8003f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f42:	e7f9      	b.n	8003f38 <memset+0x4>

08003f44 <_close_r>:
 8003f44:	b538      	push	{r3, r4, r5, lr}
 8003f46:	4d06      	ldr	r5, [pc, #24]	@ (8003f60 <_close_r+0x1c>)
 8003f48:	2300      	movs	r3, #0
 8003f4a:	4604      	mov	r4, r0
 8003f4c:	4608      	mov	r0, r1
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	f7fc fe06 	bl	8000b60 <_close>
 8003f54:	1c43      	adds	r3, r0, #1
 8003f56:	d102      	bne.n	8003f5e <_close_r+0x1a>
 8003f58:	682b      	ldr	r3, [r5, #0]
 8003f5a:	b103      	cbz	r3, 8003f5e <_close_r+0x1a>
 8003f5c:	6023      	str	r3, [r4, #0]
 8003f5e:	bd38      	pop	{r3, r4, r5, pc}
 8003f60:	20000274 	.word	0x20000274

08003f64 <_lseek_r>:
 8003f64:	b538      	push	{r3, r4, r5, lr}
 8003f66:	4d07      	ldr	r5, [pc, #28]	@ (8003f84 <_lseek_r+0x20>)
 8003f68:	4604      	mov	r4, r0
 8003f6a:	4608      	mov	r0, r1
 8003f6c:	4611      	mov	r1, r2
 8003f6e:	2200      	movs	r2, #0
 8003f70:	602a      	str	r2, [r5, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	f7fc fe1b 	bl	8000bae <_lseek>
 8003f78:	1c43      	adds	r3, r0, #1
 8003f7a:	d102      	bne.n	8003f82 <_lseek_r+0x1e>
 8003f7c:	682b      	ldr	r3, [r5, #0]
 8003f7e:	b103      	cbz	r3, 8003f82 <_lseek_r+0x1e>
 8003f80:	6023      	str	r3, [r4, #0]
 8003f82:	bd38      	pop	{r3, r4, r5, pc}
 8003f84:	20000274 	.word	0x20000274

08003f88 <_read_r>:
 8003f88:	b538      	push	{r3, r4, r5, lr}
 8003f8a:	4d07      	ldr	r5, [pc, #28]	@ (8003fa8 <_read_r+0x20>)
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	4608      	mov	r0, r1
 8003f90:	4611      	mov	r1, r2
 8003f92:	2200      	movs	r2, #0
 8003f94:	602a      	str	r2, [r5, #0]
 8003f96:	461a      	mov	r2, r3
 8003f98:	f7fc fda9 	bl	8000aee <_read>
 8003f9c:	1c43      	adds	r3, r0, #1
 8003f9e:	d102      	bne.n	8003fa6 <_read_r+0x1e>
 8003fa0:	682b      	ldr	r3, [r5, #0]
 8003fa2:	b103      	cbz	r3, 8003fa6 <_read_r+0x1e>
 8003fa4:	6023      	str	r3, [r4, #0]
 8003fa6:	bd38      	pop	{r3, r4, r5, pc}
 8003fa8:	20000274 	.word	0x20000274

08003fac <_write_r>:
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4d07      	ldr	r5, [pc, #28]	@ (8003fcc <_write_r+0x20>)
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	4608      	mov	r0, r1
 8003fb4:	4611      	mov	r1, r2
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	602a      	str	r2, [r5, #0]
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f7fc fdb4 	bl	8000b28 <_write>
 8003fc0:	1c43      	adds	r3, r0, #1
 8003fc2:	d102      	bne.n	8003fca <_write_r+0x1e>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	b103      	cbz	r3, 8003fca <_write_r+0x1e>
 8003fc8:	6023      	str	r3, [r4, #0]
 8003fca:	bd38      	pop	{r3, r4, r5, pc}
 8003fcc:	20000274 	.word	0x20000274

08003fd0 <__errno>:
 8003fd0:	4b01      	ldr	r3, [pc, #4]	@ (8003fd8 <__errno+0x8>)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	4770      	bx	lr
 8003fd6:	bf00      	nop
 8003fd8:	20000018 	.word	0x20000018

08003fdc <__libc_init_array>:
 8003fdc:	b570      	push	{r4, r5, r6, lr}
 8003fde:	4d0d      	ldr	r5, [pc, #52]	@ (8004014 <__libc_init_array+0x38>)
 8003fe0:	4c0d      	ldr	r4, [pc, #52]	@ (8004018 <__libc_init_array+0x3c>)
 8003fe2:	1b64      	subs	r4, r4, r5
 8003fe4:	10a4      	asrs	r4, r4, #2
 8003fe6:	2600      	movs	r6, #0
 8003fe8:	42a6      	cmp	r6, r4
 8003fea:	d109      	bne.n	8004000 <__libc_init_array+0x24>
 8003fec:	4d0b      	ldr	r5, [pc, #44]	@ (800401c <__libc_init_array+0x40>)
 8003fee:	4c0c      	ldr	r4, [pc, #48]	@ (8004020 <__libc_init_array+0x44>)
 8003ff0:	f000 fd22 	bl	8004a38 <_init>
 8003ff4:	1b64      	subs	r4, r4, r5
 8003ff6:	10a4      	asrs	r4, r4, #2
 8003ff8:	2600      	movs	r6, #0
 8003ffa:	42a6      	cmp	r6, r4
 8003ffc:	d105      	bne.n	800400a <__libc_init_array+0x2e>
 8003ffe:	bd70      	pop	{r4, r5, r6, pc}
 8004000:	f855 3b04 	ldr.w	r3, [r5], #4
 8004004:	4798      	blx	r3
 8004006:	3601      	adds	r6, #1
 8004008:	e7ee      	b.n	8003fe8 <__libc_init_array+0xc>
 800400a:	f855 3b04 	ldr.w	r3, [r5], #4
 800400e:	4798      	blx	r3
 8004010:	3601      	adds	r6, #1
 8004012:	e7f2      	b.n	8003ffa <__libc_init_array+0x1e>
 8004014:	08004b38 	.word	0x08004b38
 8004018:	08004b38 	.word	0x08004b38
 800401c:	08004b38 	.word	0x08004b38
 8004020:	08004b3c 	.word	0x08004b3c

08004024 <__retarget_lock_init_recursive>:
 8004024:	4770      	bx	lr

08004026 <__retarget_lock_acquire_recursive>:
 8004026:	4770      	bx	lr

08004028 <__retarget_lock_release_recursive>:
 8004028:	4770      	bx	lr
	...

0800402c <_free_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	4605      	mov	r5, r0
 8004030:	2900      	cmp	r1, #0
 8004032:	d041      	beq.n	80040b8 <_free_r+0x8c>
 8004034:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004038:	1f0c      	subs	r4, r1, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	bfb8      	it	lt
 800403e:	18e4      	addlt	r4, r4, r3
 8004040:	f000 f8e0 	bl	8004204 <__malloc_lock>
 8004044:	4a1d      	ldr	r2, [pc, #116]	@ (80040bc <_free_r+0x90>)
 8004046:	6813      	ldr	r3, [r2, #0]
 8004048:	b933      	cbnz	r3, 8004058 <_free_r+0x2c>
 800404a:	6063      	str	r3, [r4, #4]
 800404c:	6014      	str	r4, [r2, #0]
 800404e:	4628      	mov	r0, r5
 8004050:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004054:	f000 b8dc 	b.w	8004210 <__malloc_unlock>
 8004058:	42a3      	cmp	r3, r4
 800405a:	d908      	bls.n	800406e <_free_r+0x42>
 800405c:	6820      	ldr	r0, [r4, #0]
 800405e:	1821      	adds	r1, r4, r0
 8004060:	428b      	cmp	r3, r1
 8004062:	bf01      	itttt	eq
 8004064:	6819      	ldreq	r1, [r3, #0]
 8004066:	685b      	ldreq	r3, [r3, #4]
 8004068:	1809      	addeq	r1, r1, r0
 800406a:	6021      	streq	r1, [r4, #0]
 800406c:	e7ed      	b.n	800404a <_free_r+0x1e>
 800406e:	461a      	mov	r2, r3
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	b10b      	cbz	r3, 8004078 <_free_r+0x4c>
 8004074:	42a3      	cmp	r3, r4
 8004076:	d9fa      	bls.n	800406e <_free_r+0x42>
 8004078:	6811      	ldr	r1, [r2, #0]
 800407a:	1850      	adds	r0, r2, r1
 800407c:	42a0      	cmp	r0, r4
 800407e:	d10b      	bne.n	8004098 <_free_r+0x6c>
 8004080:	6820      	ldr	r0, [r4, #0]
 8004082:	4401      	add	r1, r0
 8004084:	1850      	adds	r0, r2, r1
 8004086:	4283      	cmp	r3, r0
 8004088:	6011      	str	r1, [r2, #0]
 800408a:	d1e0      	bne.n	800404e <_free_r+0x22>
 800408c:	6818      	ldr	r0, [r3, #0]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	6053      	str	r3, [r2, #4]
 8004092:	4408      	add	r0, r1
 8004094:	6010      	str	r0, [r2, #0]
 8004096:	e7da      	b.n	800404e <_free_r+0x22>
 8004098:	d902      	bls.n	80040a0 <_free_r+0x74>
 800409a:	230c      	movs	r3, #12
 800409c:	602b      	str	r3, [r5, #0]
 800409e:	e7d6      	b.n	800404e <_free_r+0x22>
 80040a0:	6820      	ldr	r0, [r4, #0]
 80040a2:	1821      	adds	r1, r4, r0
 80040a4:	428b      	cmp	r3, r1
 80040a6:	bf04      	itt	eq
 80040a8:	6819      	ldreq	r1, [r3, #0]
 80040aa:	685b      	ldreq	r3, [r3, #4]
 80040ac:	6063      	str	r3, [r4, #4]
 80040ae:	bf04      	itt	eq
 80040b0:	1809      	addeq	r1, r1, r0
 80040b2:	6021      	streq	r1, [r4, #0]
 80040b4:	6054      	str	r4, [r2, #4]
 80040b6:	e7ca      	b.n	800404e <_free_r+0x22>
 80040b8:	bd38      	pop	{r3, r4, r5, pc}
 80040ba:	bf00      	nop
 80040bc:	20000280 	.word	0x20000280

080040c0 <sbrk_aligned>:
 80040c0:	b570      	push	{r4, r5, r6, lr}
 80040c2:	4e0f      	ldr	r6, [pc, #60]	@ (8004100 <sbrk_aligned+0x40>)
 80040c4:	460c      	mov	r4, r1
 80040c6:	6831      	ldr	r1, [r6, #0]
 80040c8:	4605      	mov	r5, r0
 80040ca:	b911      	cbnz	r1, 80040d2 <sbrk_aligned+0x12>
 80040cc:	f000 fca4 	bl	8004a18 <_sbrk_r>
 80040d0:	6030      	str	r0, [r6, #0]
 80040d2:	4621      	mov	r1, r4
 80040d4:	4628      	mov	r0, r5
 80040d6:	f000 fc9f 	bl	8004a18 <_sbrk_r>
 80040da:	1c43      	adds	r3, r0, #1
 80040dc:	d103      	bne.n	80040e6 <sbrk_aligned+0x26>
 80040de:	f04f 34ff 	mov.w	r4, #4294967295
 80040e2:	4620      	mov	r0, r4
 80040e4:	bd70      	pop	{r4, r5, r6, pc}
 80040e6:	1cc4      	adds	r4, r0, #3
 80040e8:	f024 0403 	bic.w	r4, r4, #3
 80040ec:	42a0      	cmp	r0, r4
 80040ee:	d0f8      	beq.n	80040e2 <sbrk_aligned+0x22>
 80040f0:	1a21      	subs	r1, r4, r0
 80040f2:	4628      	mov	r0, r5
 80040f4:	f000 fc90 	bl	8004a18 <_sbrk_r>
 80040f8:	3001      	adds	r0, #1
 80040fa:	d1f2      	bne.n	80040e2 <sbrk_aligned+0x22>
 80040fc:	e7ef      	b.n	80040de <sbrk_aligned+0x1e>
 80040fe:	bf00      	nop
 8004100:	2000027c 	.word	0x2000027c

08004104 <_malloc_r>:
 8004104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004108:	1ccd      	adds	r5, r1, #3
 800410a:	f025 0503 	bic.w	r5, r5, #3
 800410e:	3508      	adds	r5, #8
 8004110:	2d0c      	cmp	r5, #12
 8004112:	bf38      	it	cc
 8004114:	250c      	movcc	r5, #12
 8004116:	2d00      	cmp	r5, #0
 8004118:	4606      	mov	r6, r0
 800411a:	db01      	blt.n	8004120 <_malloc_r+0x1c>
 800411c:	42a9      	cmp	r1, r5
 800411e:	d904      	bls.n	800412a <_malloc_r+0x26>
 8004120:	230c      	movs	r3, #12
 8004122:	6033      	str	r3, [r6, #0]
 8004124:	2000      	movs	r0, #0
 8004126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800412a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004200 <_malloc_r+0xfc>
 800412e:	f000 f869 	bl	8004204 <__malloc_lock>
 8004132:	f8d8 3000 	ldr.w	r3, [r8]
 8004136:	461c      	mov	r4, r3
 8004138:	bb44      	cbnz	r4, 800418c <_malloc_r+0x88>
 800413a:	4629      	mov	r1, r5
 800413c:	4630      	mov	r0, r6
 800413e:	f7ff ffbf 	bl	80040c0 <sbrk_aligned>
 8004142:	1c43      	adds	r3, r0, #1
 8004144:	4604      	mov	r4, r0
 8004146:	d158      	bne.n	80041fa <_malloc_r+0xf6>
 8004148:	f8d8 4000 	ldr.w	r4, [r8]
 800414c:	4627      	mov	r7, r4
 800414e:	2f00      	cmp	r7, #0
 8004150:	d143      	bne.n	80041da <_malloc_r+0xd6>
 8004152:	2c00      	cmp	r4, #0
 8004154:	d04b      	beq.n	80041ee <_malloc_r+0xea>
 8004156:	6823      	ldr	r3, [r4, #0]
 8004158:	4639      	mov	r1, r7
 800415a:	4630      	mov	r0, r6
 800415c:	eb04 0903 	add.w	r9, r4, r3
 8004160:	f000 fc5a 	bl	8004a18 <_sbrk_r>
 8004164:	4581      	cmp	r9, r0
 8004166:	d142      	bne.n	80041ee <_malloc_r+0xea>
 8004168:	6821      	ldr	r1, [r4, #0]
 800416a:	1a6d      	subs	r5, r5, r1
 800416c:	4629      	mov	r1, r5
 800416e:	4630      	mov	r0, r6
 8004170:	f7ff ffa6 	bl	80040c0 <sbrk_aligned>
 8004174:	3001      	adds	r0, #1
 8004176:	d03a      	beq.n	80041ee <_malloc_r+0xea>
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	442b      	add	r3, r5
 800417c:	6023      	str	r3, [r4, #0]
 800417e:	f8d8 3000 	ldr.w	r3, [r8]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	bb62      	cbnz	r2, 80041e0 <_malloc_r+0xdc>
 8004186:	f8c8 7000 	str.w	r7, [r8]
 800418a:	e00f      	b.n	80041ac <_malloc_r+0xa8>
 800418c:	6822      	ldr	r2, [r4, #0]
 800418e:	1b52      	subs	r2, r2, r5
 8004190:	d420      	bmi.n	80041d4 <_malloc_r+0xd0>
 8004192:	2a0b      	cmp	r2, #11
 8004194:	d917      	bls.n	80041c6 <_malloc_r+0xc2>
 8004196:	1961      	adds	r1, r4, r5
 8004198:	42a3      	cmp	r3, r4
 800419a:	6025      	str	r5, [r4, #0]
 800419c:	bf18      	it	ne
 800419e:	6059      	strne	r1, [r3, #4]
 80041a0:	6863      	ldr	r3, [r4, #4]
 80041a2:	bf08      	it	eq
 80041a4:	f8c8 1000 	streq.w	r1, [r8]
 80041a8:	5162      	str	r2, [r4, r5]
 80041aa:	604b      	str	r3, [r1, #4]
 80041ac:	4630      	mov	r0, r6
 80041ae:	f000 f82f 	bl	8004210 <__malloc_unlock>
 80041b2:	f104 000b 	add.w	r0, r4, #11
 80041b6:	1d23      	adds	r3, r4, #4
 80041b8:	f020 0007 	bic.w	r0, r0, #7
 80041bc:	1ac2      	subs	r2, r0, r3
 80041be:	bf1c      	itt	ne
 80041c0:	1a1b      	subne	r3, r3, r0
 80041c2:	50a3      	strne	r3, [r4, r2]
 80041c4:	e7af      	b.n	8004126 <_malloc_r+0x22>
 80041c6:	6862      	ldr	r2, [r4, #4]
 80041c8:	42a3      	cmp	r3, r4
 80041ca:	bf0c      	ite	eq
 80041cc:	f8c8 2000 	streq.w	r2, [r8]
 80041d0:	605a      	strne	r2, [r3, #4]
 80041d2:	e7eb      	b.n	80041ac <_malloc_r+0xa8>
 80041d4:	4623      	mov	r3, r4
 80041d6:	6864      	ldr	r4, [r4, #4]
 80041d8:	e7ae      	b.n	8004138 <_malloc_r+0x34>
 80041da:	463c      	mov	r4, r7
 80041dc:	687f      	ldr	r7, [r7, #4]
 80041de:	e7b6      	b.n	800414e <_malloc_r+0x4a>
 80041e0:	461a      	mov	r2, r3
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	42a3      	cmp	r3, r4
 80041e6:	d1fb      	bne.n	80041e0 <_malloc_r+0xdc>
 80041e8:	2300      	movs	r3, #0
 80041ea:	6053      	str	r3, [r2, #4]
 80041ec:	e7de      	b.n	80041ac <_malloc_r+0xa8>
 80041ee:	230c      	movs	r3, #12
 80041f0:	6033      	str	r3, [r6, #0]
 80041f2:	4630      	mov	r0, r6
 80041f4:	f000 f80c 	bl	8004210 <__malloc_unlock>
 80041f8:	e794      	b.n	8004124 <_malloc_r+0x20>
 80041fa:	6005      	str	r5, [r0, #0]
 80041fc:	e7d6      	b.n	80041ac <_malloc_r+0xa8>
 80041fe:	bf00      	nop
 8004200:	20000280 	.word	0x20000280

08004204 <__malloc_lock>:
 8004204:	4801      	ldr	r0, [pc, #4]	@ (800420c <__malloc_lock+0x8>)
 8004206:	f7ff bf0e 	b.w	8004026 <__retarget_lock_acquire_recursive>
 800420a:	bf00      	nop
 800420c:	20000278 	.word	0x20000278

08004210 <__malloc_unlock>:
 8004210:	4801      	ldr	r0, [pc, #4]	@ (8004218 <__malloc_unlock+0x8>)
 8004212:	f7ff bf09 	b.w	8004028 <__retarget_lock_release_recursive>
 8004216:	bf00      	nop
 8004218:	20000278 	.word	0x20000278

0800421c <__sfputc_r>:
 800421c:	6893      	ldr	r3, [r2, #8]
 800421e:	3b01      	subs	r3, #1
 8004220:	2b00      	cmp	r3, #0
 8004222:	b410      	push	{r4}
 8004224:	6093      	str	r3, [r2, #8]
 8004226:	da08      	bge.n	800423a <__sfputc_r+0x1e>
 8004228:	6994      	ldr	r4, [r2, #24]
 800422a:	42a3      	cmp	r3, r4
 800422c:	db01      	blt.n	8004232 <__sfputc_r+0x16>
 800422e:	290a      	cmp	r1, #10
 8004230:	d103      	bne.n	800423a <__sfputc_r+0x1e>
 8004232:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004236:	f7ff bde8 	b.w	8003e0a <__swbuf_r>
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	1c58      	adds	r0, r3, #1
 800423e:	6010      	str	r0, [r2, #0]
 8004240:	7019      	strb	r1, [r3, #0]
 8004242:	4608      	mov	r0, r1
 8004244:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004248:	4770      	bx	lr

0800424a <__sfputs_r>:
 800424a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800424c:	4606      	mov	r6, r0
 800424e:	460f      	mov	r7, r1
 8004250:	4614      	mov	r4, r2
 8004252:	18d5      	adds	r5, r2, r3
 8004254:	42ac      	cmp	r4, r5
 8004256:	d101      	bne.n	800425c <__sfputs_r+0x12>
 8004258:	2000      	movs	r0, #0
 800425a:	e007      	b.n	800426c <__sfputs_r+0x22>
 800425c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004260:	463a      	mov	r2, r7
 8004262:	4630      	mov	r0, r6
 8004264:	f7ff ffda 	bl	800421c <__sfputc_r>
 8004268:	1c43      	adds	r3, r0, #1
 800426a:	d1f3      	bne.n	8004254 <__sfputs_r+0xa>
 800426c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004270 <_vfiprintf_r>:
 8004270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004274:	460d      	mov	r5, r1
 8004276:	b09d      	sub	sp, #116	@ 0x74
 8004278:	4614      	mov	r4, r2
 800427a:	4698      	mov	r8, r3
 800427c:	4606      	mov	r6, r0
 800427e:	b118      	cbz	r0, 8004288 <_vfiprintf_r+0x18>
 8004280:	6a03      	ldr	r3, [r0, #32]
 8004282:	b90b      	cbnz	r3, 8004288 <_vfiprintf_r+0x18>
 8004284:	f7ff fcd8 	bl	8003c38 <__sinit>
 8004288:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800428a:	07d9      	lsls	r1, r3, #31
 800428c:	d405      	bmi.n	800429a <_vfiprintf_r+0x2a>
 800428e:	89ab      	ldrh	r3, [r5, #12]
 8004290:	059a      	lsls	r2, r3, #22
 8004292:	d402      	bmi.n	800429a <_vfiprintf_r+0x2a>
 8004294:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004296:	f7ff fec6 	bl	8004026 <__retarget_lock_acquire_recursive>
 800429a:	89ab      	ldrh	r3, [r5, #12]
 800429c:	071b      	lsls	r3, r3, #28
 800429e:	d501      	bpl.n	80042a4 <_vfiprintf_r+0x34>
 80042a0:	692b      	ldr	r3, [r5, #16]
 80042a2:	b99b      	cbnz	r3, 80042cc <_vfiprintf_r+0x5c>
 80042a4:	4629      	mov	r1, r5
 80042a6:	4630      	mov	r0, r6
 80042a8:	f7ff fdee 	bl	8003e88 <__swsetup_r>
 80042ac:	b170      	cbz	r0, 80042cc <_vfiprintf_r+0x5c>
 80042ae:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80042b0:	07dc      	lsls	r4, r3, #31
 80042b2:	d504      	bpl.n	80042be <_vfiprintf_r+0x4e>
 80042b4:	f04f 30ff 	mov.w	r0, #4294967295
 80042b8:	b01d      	add	sp, #116	@ 0x74
 80042ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042be:	89ab      	ldrh	r3, [r5, #12]
 80042c0:	0598      	lsls	r0, r3, #22
 80042c2:	d4f7      	bmi.n	80042b4 <_vfiprintf_r+0x44>
 80042c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80042c6:	f7ff feaf 	bl	8004028 <__retarget_lock_release_recursive>
 80042ca:	e7f3      	b.n	80042b4 <_vfiprintf_r+0x44>
 80042cc:	2300      	movs	r3, #0
 80042ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80042d0:	2320      	movs	r3, #32
 80042d2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80042d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80042da:	2330      	movs	r3, #48	@ 0x30
 80042dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800448c <_vfiprintf_r+0x21c>
 80042e0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80042e4:	f04f 0901 	mov.w	r9, #1
 80042e8:	4623      	mov	r3, r4
 80042ea:	469a      	mov	sl, r3
 80042ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80042f0:	b10a      	cbz	r2, 80042f6 <_vfiprintf_r+0x86>
 80042f2:	2a25      	cmp	r2, #37	@ 0x25
 80042f4:	d1f9      	bne.n	80042ea <_vfiprintf_r+0x7a>
 80042f6:	ebba 0b04 	subs.w	fp, sl, r4
 80042fa:	d00b      	beq.n	8004314 <_vfiprintf_r+0xa4>
 80042fc:	465b      	mov	r3, fp
 80042fe:	4622      	mov	r2, r4
 8004300:	4629      	mov	r1, r5
 8004302:	4630      	mov	r0, r6
 8004304:	f7ff ffa1 	bl	800424a <__sfputs_r>
 8004308:	3001      	adds	r0, #1
 800430a:	f000 80a7 	beq.w	800445c <_vfiprintf_r+0x1ec>
 800430e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004310:	445a      	add	r2, fp
 8004312:	9209      	str	r2, [sp, #36]	@ 0x24
 8004314:	f89a 3000 	ldrb.w	r3, [sl]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 809f 	beq.w	800445c <_vfiprintf_r+0x1ec>
 800431e:	2300      	movs	r3, #0
 8004320:	f04f 32ff 	mov.w	r2, #4294967295
 8004324:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004328:	f10a 0a01 	add.w	sl, sl, #1
 800432c:	9304      	str	r3, [sp, #16]
 800432e:	9307      	str	r3, [sp, #28]
 8004330:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004334:	931a      	str	r3, [sp, #104]	@ 0x68
 8004336:	4654      	mov	r4, sl
 8004338:	2205      	movs	r2, #5
 800433a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800433e:	4853      	ldr	r0, [pc, #332]	@ (800448c <_vfiprintf_r+0x21c>)
 8004340:	f7fb ff46 	bl	80001d0 <memchr>
 8004344:	9a04      	ldr	r2, [sp, #16]
 8004346:	b9d8      	cbnz	r0, 8004380 <_vfiprintf_r+0x110>
 8004348:	06d1      	lsls	r1, r2, #27
 800434a:	bf44      	itt	mi
 800434c:	2320      	movmi	r3, #32
 800434e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004352:	0713      	lsls	r3, r2, #28
 8004354:	bf44      	itt	mi
 8004356:	232b      	movmi	r3, #43	@ 0x2b
 8004358:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800435c:	f89a 3000 	ldrb.w	r3, [sl]
 8004360:	2b2a      	cmp	r3, #42	@ 0x2a
 8004362:	d015      	beq.n	8004390 <_vfiprintf_r+0x120>
 8004364:	9a07      	ldr	r2, [sp, #28]
 8004366:	4654      	mov	r4, sl
 8004368:	2000      	movs	r0, #0
 800436a:	f04f 0c0a 	mov.w	ip, #10
 800436e:	4621      	mov	r1, r4
 8004370:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004374:	3b30      	subs	r3, #48	@ 0x30
 8004376:	2b09      	cmp	r3, #9
 8004378:	d94b      	bls.n	8004412 <_vfiprintf_r+0x1a2>
 800437a:	b1b0      	cbz	r0, 80043aa <_vfiprintf_r+0x13a>
 800437c:	9207      	str	r2, [sp, #28]
 800437e:	e014      	b.n	80043aa <_vfiprintf_r+0x13a>
 8004380:	eba0 0308 	sub.w	r3, r0, r8
 8004384:	fa09 f303 	lsl.w	r3, r9, r3
 8004388:	4313      	orrs	r3, r2
 800438a:	9304      	str	r3, [sp, #16]
 800438c:	46a2      	mov	sl, r4
 800438e:	e7d2      	b.n	8004336 <_vfiprintf_r+0xc6>
 8004390:	9b03      	ldr	r3, [sp, #12]
 8004392:	1d19      	adds	r1, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	9103      	str	r1, [sp, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	bfbb      	ittet	lt
 800439c:	425b      	neglt	r3, r3
 800439e:	f042 0202 	orrlt.w	r2, r2, #2
 80043a2:	9307      	strge	r3, [sp, #28]
 80043a4:	9307      	strlt	r3, [sp, #28]
 80043a6:	bfb8      	it	lt
 80043a8:	9204      	strlt	r2, [sp, #16]
 80043aa:	7823      	ldrb	r3, [r4, #0]
 80043ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80043ae:	d10a      	bne.n	80043c6 <_vfiprintf_r+0x156>
 80043b0:	7863      	ldrb	r3, [r4, #1]
 80043b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80043b4:	d132      	bne.n	800441c <_vfiprintf_r+0x1ac>
 80043b6:	9b03      	ldr	r3, [sp, #12]
 80043b8:	1d1a      	adds	r2, r3, #4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	9203      	str	r2, [sp, #12]
 80043be:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80043c2:	3402      	adds	r4, #2
 80043c4:	9305      	str	r3, [sp, #20]
 80043c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800449c <_vfiprintf_r+0x22c>
 80043ca:	7821      	ldrb	r1, [r4, #0]
 80043cc:	2203      	movs	r2, #3
 80043ce:	4650      	mov	r0, sl
 80043d0:	f7fb fefe 	bl	80001d0 <memchr>
 80043d4:	b138      	cbz	r0, 80043e6 <_vfiprintf_r+0x176>
 80043d6:	9b04      	ldr	r3, [sp, #16]
 80043d8:	eba0 000a 	sub.w	r0, r0, sl
 80043dc:	2240      	movs	r2, #64	@ 0x40
 80043de:	4082      	lsls	r2, r0
 80043e0:	4313      	orrs	r3, r2
 80043e2:	3401      	adds	r4, #1
 80043e4:	9304      	str	r3, [sp, #16]
 80043e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043ea:	4829      	ldr	r0, [pc, #164]	@ (8004490 <_vfiprintf_r+0x220>)
 80043ec:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80043f0:	2206      	movs	r2, #6
 80043f2:	f7fb feed 	bl	80001d0 <memchr>
 80043f6:	2800      	cmp	r0, #0
 80043f8:	d03f      	beq.n	800447a <_vfiprintf_r+0x20a>
 80043fa:	4b26      	ldr	r3, [pc, #152]	@ (8004494 <_vfiprintf_r+0x224>)
 80043fc:	bb1b      	cbnz	r3, 8004446 <_vfiprintf_r+0x1d6>
 80043fe:	9b03      	ldr	r3, [sp, #12]
 8004400:	3307      	adds	r3, #7
 8004402:	f023 0307 	bic.w	r3, r3, #7
 8004406:	3308      	adds	r3, #8
 8004408:	9303      	str	r3, [sp, #12]
 800440a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800440c:	443b      	add	r3, r7
 800440e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004410:	e76a      	b.n	80042e8 <_vfiprintf_r+0x78>
 8004412:	fb0c 3202 	mla	r2, ip, r2, r3
 8004416:	460c      	mov	r4, r1
 8004418:	2001      	movs	r0, #1
 800441a:	e7a8      	b.n	800436e <_vfiprintf_r+0xfe>
 800441c:	2300      	movs	r3, #0
 800441e:	3401      	adds	r4, #1
 8004420:	9305      	str	r3, [sp, #20]
 8004422:	4619      	mov	r1, r3
 8004424:	f04f 0c0a 	mov.w	ip, #10
 8004428:	4620      	mov	r0, r4
 800442a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800442e:	3a30      	subs	r2, #48	@ 0x30
 8004430:	2a09      	cmp	r2, #9
 8004432:	d903      	bls.n	800443c <_vfiprintf_r+0x1cc>
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0c6      	beq.n	80043c6 <_vfiprintf_r+0x156>
 8004438:	9105      	str	r1, [sp, #20]
 800443a:	e7c4      	b.n	80043c6 <_vfiprintf_r+0x156>
 800443c:	fb0c 2101 	mla	r1, ip, r1, r2
 8004440:	4604      	mov	r4, r0
 8004442:	2301      	movs	r3, #1
 8004444:	e7f0      	b.n	8004428 <_vfiprintf_r+0x1b8>
 8004446:	ab03      	add	r3, sp, #12
 8004448:	9300      	str	r3, [sp, #0]
 800444a:	462a      	mov	r2, r5
 800444c:	4b12      	ldr	r3, [pc, #72]	@ (8004498 <_vfiprintf_r+0x228>)
 800444e:	a904      	add	r1, sp, #16
 8004450:	4630      	mov	r0, r6
 8004452:	f3af 8000 	nop.w
 8004456:	4607      	mov	r7, r0
 8004458:	1c78      	adds	r0, r7, #1
 800445a:	d1d6      	bne.n	800440a <_vfiprintf_r+0x19a>
 800445c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800445e:	07d9      	lsls	r1, r3, #31
 8004460:	d405      	bmi.n	800446e <_vfiprintf_r+0x1fe>
 8004462:	89ab      	ldrh	r3, [r5, #12]
 8004464:	059a      	lsls	r2, r3, #22
 8004466:	d402      	bmi.n	800446e <_vfiprintf_r+0x1fe>
 8004468:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800446a:	f7ff fddd 	bl	8004028 <__retarget_lock_release_recursive>
 800446e:	89ab      	ldrh	r3, [r5, #12]
 8004470:	065b      	lsls	r3, r3, #25
 8004472:	f53f af1f 	bmi.w	80042b4 <_vfiprintf_r+0x44>
 8004476:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004478:	e71e      	b.n	80042b8 <_vfiprintf_r+0x48>
 800447a:	ab03      	add	r3, sp, #12
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	462a      	mov	r2, r5
 8004480:	4b05      	ldr	r3, [pc, #20]	@ (8004498 <_vfiprintf_r+0x228>)
 8004482:	a904      	add	r1, sp, #16
 8004484:	4630      	mov	r0, r6
 8004486:	f000 f879 	bl	800457c <_printf_i>
 800448a:	e7e4      	b.n	8004456 <_vfiprintf_r+0x1e6>
 800448c:	08004afc 	.word	0x08004afc
 8004490:	08004b06 	.word	0x08004b06
 8004494:	00000000 	.word	0x00000000
 8004498:	0800424b 	.word	0x0800424b
 800449c:	08004b02 	.word	0x08004b02

080044a0 <_printf_common>:
 80044a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044a4:	4616      	mov	r6, r2
 80044a6:	4698      	mov	r8, r3
 80044a8:	688a      	ldr	r2, [r1, #8]
 80044aa:	690b      	ldr	r3, [r1, #16]
 80044ac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80044b0:	4293      	cmp	r3, r2
 80044b2:	bfb8      	it	lt
 80044b4:	4613      	movlt	r3, r2
 80044b6:	6033      	str	r3, [r6, #0]
 80044b8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80044bc:	4607      	mov	r7, r0
 80044be:	460c      	mov	r4, r1
 80044c0:	b10a      	cbz	r2, 80044c6 <_printf_common+0x26>
 80044c2:	3301      	adds	r3, #1
 80044c4:	6033      	str	r3, [r6, #0]
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	0699      	lsls	r1, r3, #26
 80044ca:	bf42      	ittt	mi
 80044cc:	6833      	ldrmi	r3, [r6, #0]
 80044ce:	3302      	addmi	r3, #2
 80044d0:	6033      	strmi	r3, [r6, #0]
 80044d2:	6825      	ldr	r5, [r4, #0]
 80044d4:	f015 0506 	ands.w	r5, r5, #6
 80044d8:	d106      	bne.n	80044e8 <_printf_common+0x48>
 80044da:	f104 0a19 	add.w	sl, r4, #25
 80044de:	68e3      	ldr	r3, [r4, #12]
 80044e0:	6832      	ldr	r2, [r6, #0]
 80044e2:	1a9b      	subs	r3, r3, r2
 80044e4:	42ab      	cmp	r3, r5
 80044e6:	dc26      	bgt.n	8004536 <_printf_common+0x96>
 80044e8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80044ec:	6822      	ldr	r2, [r4, #0]
 80044ee:	3b00      	subs	r3, #0
 80044f0:	bf18      	it	ne
 80044f2:	2301      	movne	r3, #1
 80044f4:	0692      	lsls	r2, r2, #26
 80044f6:	d42b      	bmi.n	8004550 <_printf_common+0xb0>
 80044f8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80044fc:	4641      	mov	r1, r8
 80044fe:	4638      	mov	r0, r7
 8004500:	47c8      	blx	r9
 8004502:	3001      	adds	r0, #1
 8004504:	d01e      	beq.n	8004544 <_printf_common+0xa4>
 8004506:	6823      	ldr	r3, [r4, #0]
 8004508:	6922      	ldr	r2, [r4, #16]
 800450a:	f003 0306 	and.w	r3, r3, #6
 800450e:	2b04      	cmp	r3, #4
 8004510:	bf02      	ittt	eq
 8004512:	68e5      	ldreq	r5, [r4, #12]
 8004514:	6833      	ldreq	r3, [r6, #0]
 8004516:	1aed      	subeq	r5, r5, r3
 8004518:	68a3      	ldr	r3, [r4, #8]
 800451a:	bf0c      	ite	eq
 800451c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004520:	2500      	movne	r5, #0
 8004522:	4293      	cmp	r3, r2
 8004524:	bfc4      	itt	gt
 8004526:	1a9b      	subgt	r3, r3, r2
 8004528:	18ed      	addgt	r5, r5, r3
 800452a:	2600      	movs	r6, #0
 800452c:	341a      	adds	r4, #26
 800452e:	42b5      	cmp	r5, r6
 8004530:	d11a      	bne.n	8004568 <_printf_common+0xc8>
 8004532:	2000      	movs	r0, #0
 8004534:	e008      	b.n	8004548 <_printf_common+0xa8>
 8004536:	2301      	movs	r3, #1
 8004538:	4652      	mov	r2, sl
 800453a:	4641      	mov	r1, r8
 800453c:	4638      	mov	r0, r7
 800453e:	47c8      	blx	r9
 8004540:	3001      	adds	r0, #1
 8004542:	d103      	bne.n	800454c <_printf_common+0xac>
 8004544:	f04f 30ff 	mov.w	r0, #4294967295
 8004548:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800454c:	3501      	adds	r5, #1
 800454e:	e7c6      	b.n	80044de <_printf_common+0x3e>
 8004550:	18e1      	adds	r1, r4, r3
 8004552:	1c5a      	adds	r2, r3, #1
 8004554:	2030      	movs	r0, #48	@ 0x30
 8004556:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800455a:	4422      	add	r2, r4
 800455c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004560:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004564:	3302      	adds	r3, #2
 8004566:	e7c7      	b.n	80044f8 <_printf_common+0x58>
 8004568:	2301      	movs	r3, #1
 800456a:	4622      	mov	r2, r4
 800456c:	4641      	mov	r1, r8
 800456e:	4638      	mov	r0, r7
 8004570:	47c8      	blx	r9
 8004572:	3001      	adds	r0, #1
 8004574:	d0e6      	beq.n	8004544 <_printf_common+0xa4>
 8004576:	3601      	adds	r6, #1
 8004578:	e7d9      	b.n	800452e <_printf_common+0x8e>
	...

0800457c <_printf_i>:
 800457c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004580:	7e0f      	ldrb	r7, [r1, #24]
 8004582:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004584:	2f78      	cmp	r7, #120	@ 0x78
 8004586:	4691      	mov	r9, r2
 8004588:	4680      	mov	r8, r0
 800458a:	460c      	mov	r4, r1
 800458c:	469a      	mov	sl, r3
 800458e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004592:	d807      	bhi.n	80045a4 <_printf_i+0x28>
 8004594:	2f62      	cmp	r7, #98	@ 0x62
 8004596:	d80a      	bhi.n	80045ae <_printf_i+0x32>
 8004598:	2f00      	cmp	r7, #0
 800459a:	f000 80d1 	beq.w	8004740 <_printf_i+0x1c4>
 800459e:	2f58      	cmp	r7, #88	@ 0x58
 80045a0:	f000 80b8 	beq.w	8004714 <_printf_i+0x198>
 80045a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80045a8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80045ac:	e03a      	b.n	8004624 <_printf_i+0xa8>
 80045ae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80045b2:	2b15      	cmp	r3, #21
 80045b4:	d8f6      	bhi.n	80045a4 <_printf_i+0x28>
 80045b6:	a101      	add	r1, pc, #4	@ (adr r1, 80045bc <_printf_i+0x40>)
 80045b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80045bc:	08004615 	.word	0x08004615
 80045c0:	08004629 	.word	0x08004629
 80045c4:	080045a5 	.word	0x080045a5
 80045c8:	080045a5 	.word	0x080045a5
 80045cc:	080045a5 	.word	0x080045a5
 80045d0:	080045a5 	.word	0x080045a5
 80045d4:	08004629 	.word	0x08004629
 80045d8:	080045a5 	.word	0x080045a5
 80045dc:	080045a5 	.word	0x080045a5
 80045e0:	080045a5 	.word	0x080045a5
 80045e4:	080045a5 	.word	0x080045a5
 80045e8:	08004727 	.word	0x08004727
 80045ec:	08004653 	.word	0x08004653
 80045f0:	080046e1 	.word	0x080046e1
 80045f4:	080045a5 	.word	0x080045a5
 80045f8:	080045a5 	.word	0x080045a5
 80045fc:	08004749 	.word	0x08004749
 8004600:	080045a5 	.word	0x080045a5
 8004604:	08004653 	.word	0x08004653
 8004608:	080045a5 	.word	0x080045a5
 800460c:	080045a5 	.word	0x080045a5
 8004610:	080046e9 	.word	0x080046e9
 8004614:	6833      	ldr	r3, [r6, #0]
 8004616:	1d1a      	adds	r2, r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6032      	str	r2, [r6, #0]
 800461c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004620:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004624:	2301      	movs	r3, #1
 8004626:	e09c      	b.n	8004762 <_printf_i+0x1e6>
 8004628:	6833      	ldr	r3, [r6, #0]
 800462a:	6820      	ldr	r0, [r4, #0]
 800462c:	1d19      	adds	r1, r3, #4
 800462e:	6031      	str	r1, [r6, #0]
 8004630:	0606      	lsls	r6, r0, #24
 8004632:	d501      	bpl.n	8004638 <_printf_i+0xbc>
 8004634:	681d      	ldr	r5, [r3, #0]
 8004636:	e003      	b.n	8004640 <_printf_i+0xc4>
 8004638:	0645      	lsls	r5, r0, #25
 800463a:	d5fb      	bpl.n	8004634 <_printf_i+0xb8>
 800463c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004640:	2d00      	cmp	r5, #0
 8004642:	da03      	bge.n	800464c <_printf_i+0xd0>
 8004644:	232d      	movs	r3, #45	@ 0x2d
 8004646:	426d      	negs	r5, r5
 8004648:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800464c:	4858      	ldr	r0, [pc, #352]	@ (80047b0 <_printf_i+0x234>)
 800464e:	230a      	movs	r3, #10
 8004650:	e011      	b.n	8004676 <_printf_i+0xfa>
 8004652:	6821      	ldr	r1, [r4, #0]
 8004654:	6833      	ldr	r3, [r6, #0]
 8004656:	0608      	lsls	r0, r1, #24
 8004658:	f853 5b04 	ldr.w	r5, [r3], #4
 800465c:	d402      	bmi.n	8004664 <_printf_i+0xe8>
 800465e:	0649      	lsls	r1, r1, #25
 8004660:	bf48      	it	mi
 8004662:	b2ad      	uxthmi	r5, r5
 8004664:	2f6f      	cmp	r7, #111	@ 0x6f
 8004666:	4852      	ldr	r0, [pc, #328]	@ (80047b0 <_printf_i+0x234>)
 8004668:	6033      	str	r3, [r6, #0]
 800466a:	bf14      	ite	ne
 800466c:	230a      	movne	r3, #10
 800466e:	2308      	moveq	r3, #8
 8004670:	2100      	movs	r1, #0
 8004672:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004676:	6866      	ldr	r6, [r4, #4]
 8004678:	60a6      	str	r6, [r4, #8]
 800467a:	2e00      	cmp	r6, #0
 800467c:	db05      	blt.n	800468a <_printf_i+0x10e>
 800467e:	6821      	ldr	r1, [r4, #0]
 8004680:	432e      	orrs	r6, r5
 8004682:	f021 0104 	bic.w	r1, r1, #4
 8004686:	6021      	str	r1, [r4, #0]
 8004688:	d04b      	beq.n	8004722 <_printf_i+0x1a6>
 800468a:	4616      	mov	r6, r2
 800468c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004690:	fb03 5711 	mls	r7, r3, r1, r5
 8004694:	5dc7      	ldrb	r7, [r0, r7]
 8004696:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800469a:	462f      	mov	r7, r5
 800469c:	42bb      	cmp	r3, r7
 800469e:	460d      	mov	r5, r1
 80046a0:	d9f4      	bls.n	800468c <_printf_i+0x110>
 80046a2:	2b08      	cmp	r3, #8
 80046a4:	d10b      	bne.n	80046be <_printf_i+0x142>
 80046a6:	6823      	ldr	r3, [r4, #0]
 80046a8:	07df      	lsls	r7, r3, #31
 80046aa:	d508      	bpl.n	80046be <_printf_i+0x142>
 80046ac:	6923      	ldr	r3, [r4, #16]
 80046ae:	6861      	ldr	r1, [r4, #4]
 80046b0:	4299      	cmp	r1, r3
 80046b2:	bfde      	ittt	le
 80046b4:	2330      	movle	r3, #48	@ 0x30
 80046b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80046ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80046be:	1b92      	subs	r2, r2, r6
 80046c0:	6122      	str	r2, [r4, #16]
 80046c2:	f8cd a000 	str.w	sl, [sp]
 80046c6:	464b      	mov	r3, r9
 80046c8:	aa03      	add	r2, sp, #12
 80046ca:	4621      	mov	r1, r4
 80046cc:	4640      	mov	r0, r8
 80046ce:	f7ff fee7 	bl	80044a0 <_printf_common>
 80046d2:	3001      	adds	r0, #1
 80046d4:	d14a      	bne.n	800476c <_printf_i+0x1f0>
 80046d6:	f04f 30ff 	mov.w	r0, #4294967295
 80046da:	b004      	add	sp, #16
 80046dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80046e0:	6823      	ldr	r3, [r4, #0]
 80046e2:	f043 0320 	orr.w	r3, r3, #32
 80046e6:	6023      	str	r3, [r4, #0]
 80046e8:	4832      	ldr	r0, [pc, #200]	@ (80047b4 <_printf_i+0x238>)
 80046ea:	2778      	movs	r7, #120	@ 0x78
 80046ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80046f0:	6823      	ldr	r3, [r4, #0]
 80046f2:	6831      	ldr	r1, [r6, #0]
 80046f4:	061f      	lsls	r7, r3, #24
 80046f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80046fa:	d402      	bmi.n	8004702 <_printf_i+0x186>
 80046fc:	065f      	lsls	r7, r3, #25
 80046fe:	bf48      	it	mi
 8004700:	b2ad      	uxthmi	r5, r5
 8004702:	6031      	str	r1, [r6, #0]
 8004704:	07d9      	lsls	r1, r3, #31
 8004706:	bf44      	itt	mi
 8004708:	f043 0320 	orrmi.w	r3, r3, #32
 800470c:	6023      	strmi	r3, [r4, #0]
 800470e:	b11d      	cbz	r5, 8004718 <_printf_i+0x19c>
 8004710:	2310      	movs	r3, #16
 8004712:	e7ad      	b.n	8004670 <_printf_i+0xf4>
 8004714:	4826      	ldr	r0, [pc, #152]	@ (80047b0 <_printf_i+0x234>)
 8004716:	e7e9      	b.n	80046ec <_printf_i+0x170>
 8004718:	6823      	ldr	r3, [r4, #0]
 800471a:	f023 0320 	bic.w	r3, r3, #32
 800471e:	6023      	str	r3, [r4, #0]
 8004720:	e7f6      	b.n	8004710 <_printf_i+0x194>
 8004722:	4616      	mov	r6, r2
 8004724:	e7bd      	b.n	80046a2 <_printf_i+0x126>
 8004726:	6833      	ldr	r3, [r6, #0]
 8004728:	6825      	ldr	r5, [r4, #0]
 800472a:	6961      	ldr	r1, [r4, #20]
 800472c:	1d18      	adds	r0, r3, #4
 800472e:	6030      	str	r0, [r6, #0]
 8004730:	062e      	lsls	r6, r5, #24
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	d501      	bpl.n	800473a <_printf_i+0x1be>
 8004736:	6019      	str	r1, [r3, #0]
 8004738:	e002      	b.n	8004740 <_printf_i+0x1c4>
 800473a:	0668      	lsls	r0, r5, #25
 800473c:	d5fb      	bpl.n	8004736 <_printf_i+0x1ba>
 800473e:	8019      	strh	r1, [r3, #0]
 8004740:	2300      	movs	r3, #0
 8004742:	6123      	str	r3, [r4, #16]
 8004744:	4616      	mov	r6, r2
 8004746:	e7bc      	b.n	80046c2 <_printf_i+0x146>
 8004748:	6833      	ldr	r3, [r6, #0]
 800474a:	1d1a      	adds	r2, r3, #4
 800474c:	6032      	str	r2, [r6, #0]
 800474e:	681e      	ldr	r6, [r3, #0]
 8004750:	6862      	ldr	r2, [r4, #4]
 8004752:	2100      	movs	r1, #0
 8004754:	4630      	mov	r0, r6
 8004756:	f7fb fd3b 	bl	80001d0 <memchr>
 800475a:	b108      	cbz	r0, 8004760 <_printf_i+0x1e4>
 800475c:	1b80      	subs	r0, r0, r6
 800475e:	6060      	str	r0, [r4, #4]
 8004760:	6863      	ldr	r3, [r4, #4]
 8004762:	6123      	str	r3, [r4, #16]
 8004764:	2300      	movs	r3, #0
 8004766:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800476a:	e7aa      	b.n	80046c2 <_printf_i+0x146>
 800476c:	6923      	ldr	r3, [r4, #16]
 800476e:	4632      	mov	r2, r6
 8004770:	4649      	mov	r1, r9
 8004772:	4640      	mov	r0, r8
 8004774:	47d0      	blx	sl
 8004776:	3001      	adds	r0, #1
 8004778:	d0ad      	beq.n	80046d6 <_printf_i+0x15a>
 800477a:	6823      	ldr	r3, [r4, #0]
 800477c:	079b      	lsls	r3, r3, #30
 800477e:	d413      	bmi.n	80047a8 <_printf_i+0x22c>
 8004780:	68e0      	ldr	r0, [r4, #12]
 8004782:	9b03      	ldr	r3, [sp, #12]
 8004784:	4298      	cmp	r0, r3
 8004786:	bfb8      	it	lt
 8004788:	4618      	movlt	r0, r3
 800478a:	e7a6      	b.n	80046da <_printf_i+0x15e>
 800478c:	2301      	movs	r3, #1
 800478e:	4632      	mov	r2, r6
 8004790:	4649      	mov	r1, r9
 8004792:	4640      	mov	r0, r8
 8004794:	47d0      	blx	sl
 8004796:	3001      	adds	r0, #1
 8004798:	d09d      	beq.n	80046d6 <_printf_i+0x15a>
 800479a:	3501      	adds	r5, #1
 800479c:	68e3      	ldr	r3, [r4, #12]
 800479e:	9903      	ldr	r1, [sp, #12]
 80047a0:	1a5b      	subs	r3, r3, r1
 80047a2:	42ab      	cmp	r3, r5
 80047a4:	dcf2      	bgt.n	800478c <_printf_i+0x210>
 80047a6:	e7eb      	b.n	8004780 <_printf_i+0x204>
 80047a8:	2500      	movs	r5, #0
 80047aa:	f104 0619 	add.w	r6, r4, #25
 80047ae:	e7f5      	b.n	800479c <_printf_i+0x220>
 80047b0:	08004b0d 	.word	0x08004b0d
 80047b4:	08004b1e 	.word	0x08004b1e

080047b8 <__sflush_r>:
 80047b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80047bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c0:	0716      	lsls	r6, r2, #28
 80047c2:	4605      	mov	r5, r0
 80047c4:	460c      	mov	r4, r1
 80047c6:	d454      	bmi.n	8004872 <__sflush_r+0xba>
 80047c8:	684b      	ldr	r3, [r1, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	dc02      	bgt.n	80047d4 <__sflush_r+0x1c>
 80047ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	dd48      	ble.n	8004866 <__sflush_r+0xae>
 80047d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80047d6:	2e00      	cmp	r6, #0
 80047d8:	d045      	beq.n	8004866 <__sflush_r+0xae>
 80047da:	2300      	movs	r3, #0
 80047dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80047e0:	682f      	ldr	r7, [r5, #0]
 80047e2:	6a21      	ldr	r1, [r4, #32]
 80047e4:	602b      	str	r3, [r5, #0]
 80047e6:	d030      	beq.n	800484a <__sflush_r+0x92>
 80047e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80047ea:	89a3      	ldrh	r3, [r4, #12]
 80047ec:	0759      	lsls	r1, r3, #29
 80047ee:	d505      	bpl.n	80047fc <__sflush_r+0x44>
 80047f0:	6863      	ldr	r3, [r4, #4]
 80047f2:	1ad2      	subs	r2, r2, r3
 80047f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80047f6:	b10b      	cbz	r3, 80047fc <__sflush_r+0x44>
 80047f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80047fa:	1ad2      	subs	r2, r2, r3
 80047fc:	2300      	movs	r3, #0
 80047fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004800:	6a21      	ldr	r1, [r4, #32]
 8004802:	4628      	mov	r0, r5
 8004804:	47b0      	blx	r6
 8004806:	1c43      	adds	r3, r0, #1
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	d106      	bne.n	800481a <__sflush_r+0x62>
 800480c:	6829      	ldr	r1, [r5, #0]
 800480e:	291d      	cmp	r1, #29
 8004810:	d82b      	bhi.n	800486a <__sflush_r+0xb2>
 8004812:	4a2a      	ldr	r2, [pc, #168]	@ (80048bc <__sflush_r+0x104>)
 8004814:	40ca      	lsrs	r2, r1
 8004816:	07d6      	lsls	r6, r2, #31
 8004818:	d527      	bpl.n	800486a <__sflush_r+0xb2>
 800481a:	2200      	movs	r2, #0
 800481c:	6062      	str	r2, [r4, #4]
 800481e:	04d9      	lsls	r1, r3, #19
 8004820:	6922      	ldr	r2, [r4, #16]
 8004822:	6022      	str	r2, [r4, #0]
 8004824:	d504      	bpl.n	8004830 <__sflush_r+0x78>
 8004826:	1c42      	adds	r2, r0, #1
 8004828:	d101      	bne.n	800482e <__sflush_r+0x76>
 800482a:	682b      	ldr	r3, [r5, #0]
 800482c:	b903      	cbnz	r3, 8004830 <__sflush_r+0x78>
 800482e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004832:	602f      	str	r7, [r5, #0]
 8004834:	b1b9      	cbz	r1, 8004866 <__sflush_r+0xae>
 8004836:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800483a:	4299      	cmp	r1, r3
 800483c:	d002      	beq.n	8004844 <__sflush_r+0x8c>
 800483e:	4628      	mov	r0, r5
 8004840:	f7ff fbf4 	bl	800402c <_free_r>
 8004844:	2300      	movs	r3, #0
 8004846:	6363      	str	r3, [r4, #52]	@ 0x34
 8004848:	e00d      	b.n	8004866 <__sflush_r+0xae>
 800484a:	2301      	movs	r3, #1
 800484c:	4628      	mov	r0, r5
 800484e:	47b0      	blx	r6
 8004850:	4602      	mov	r2, r0
 8004852:	1c50      	adds	r0, r2, #1
 8004854:	d1c9      	bne.n	80047ea <__sflush_r+0x32>
 8004856:	682b      	ldr	r3, [r5, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0c6      	beq.n	80047ea <__sflush_r+0x32>
 800485c:	2b1d      	cmp	r3, #29
 800485e:	d001      	beq.n	8004864 <__sflush_r+0xac>
 8004860:	2b16      	cmp	r3, #22
 8004862:	d11e      	bne.n	80048a2 <__sflush_r+0xea>
 8004864:	602f      	str	r7, [r5, #0]
 8004866:	2000      	movs	r0, #0
 8004868:	e022      	b.n	80048b0 <__sflush_r+0xf8>
 800486a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800486e:	b21b      	sxth	r3, r3
 8004870:	e01b      	b.n	80048aa <__sflush_r+0xf2>
 8004872:	690f      	ldr	r7, [r1, #16]
 8004874:	2f00      	cmp	r7, #0
 8004876:	d0f6      	beq.n	8004866 <__sflush_r+0xae>
 8004878:	0793      	lsls	r3, r2, #30
 800487a:	680e      	ldr	r6, [r1, #0]
 800487c:	bf08      	it	eq
 800487e:	694b      	ldreq	r3, [r1, #20]
 8004880:	600f      	str	r7, [r1, #0]
 8004882:	bf18      	it	ne
 8004884:	2300      	movne	r3, #0
 8004886:	eba6 0807 	sub.w	r8, r6, r7
 800488a:	608b      	str	r3, [r1, #8]
 800488c:	f1b8 0f00 	cmp.w	r8, #0
 8004890:	dde9      	ble.n	8004866 <__sflush_r+0xae>
 8004892:	6a21      	ldr	r1, [r4, #32]
 8004894:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004896:	4643      	mov	r3, r8
 8004898:	463a      	mov	r2, r7
 800489a:	4628      	mov	r0, r5
 800489c:	47b0      	blx	r6
 800489e:	2800      	cmp	r0, #0
 80048a0:	dc08      	bgt.n	80048b4 <__sflush_r+0xfc>
 80048a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048aa:	81a3      	strh	r3, [r4, #12]
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80048b4:	4407      	add	r7, r0
 80048b6:	eba8 0800 	sub.w	r8, r8, r0
 80048ba:	e7e7      	b.n	800488c <__sflush_r+0xd4>
 80048bc:	20400001 	.word	0x20400001

080048c0 <_fflush_r>:
 80048c0:	b538      	push	{r3, r4, r5, lr}
 80048c2:	690b      	ldr	r3, [r1, #16]
 80048c4:	4605      	mov	r5, r0
 80048c6:	460c      	mov	r4, r1
 80048c8:	b913      	cbnz	r3, 80048d0 <_fflush_r+0x10>
 80048ca:	2500      	movs	r5, #0
 80048cc:	4628      	mov	r0, r5
 80048ce:	bd38      	pop	{r3, r4, r5, pc}
 80048d0:	b118      	cbz	r0, 80048da <_fflush_r+0x1a>
 80048d2:	6a03      	ldr	r3, [r0, #32]
 80048d4:	b90b      	cbnz	r3, 80048da <_fflush_r+0x1a>
 80048d6:	f7ff f9af 	bl	8003c38 <__sinit>
 80048da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f3      	beq.n	80048ca <_fflush_r+0xa>
 80048e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80048e4:	07d0      	lsls	r0, r2, #31
 80048e6:	d404      	bmi.n	80048f2 <_fflush_r+0x32>
 80048e8:	0599      	lsls	r1, r3, #22
 80048ea:	d402      	bmi.n	80048f2 <_fflush_r+0x32>
 80048ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80048ee:	f7ff fb9a 	bl	8004026 <__retarget_lock_acquire_recursive>
 80048f2:	4628      	mov	r0, r5
 80048f4:	4621      	mov	r1, r4
 80048f6:	f7ff ff5f 	bl	80047b8 <__sflush_r>
 80048fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80048fc:	07da      	lsls	r2, r3, #31
 80048fe:	4605      	mov	r5, r0
 8004900:	d4e4      	bmi.n	80048cc <_fflush_r+0xc>
 8004902:	89a3      	ldrh	r3, [r4, #12]
 8004904:	059b      	lsls	r3, r3, #22
 8004906:	d4e1      	bmi.n	80048cc <_fflush_r+0xc>
 8004908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800490a:	f7ff fb8d 	bl	8004028 <__retarget_lock_release_recursive>
 800490e:	e7dd      	b.n	80048cc <_fflush_r+0xc>

08004910 <__swhatbuf_r>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	460c      	mov	r4, r1
 8004914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004918:	2900      	cmp	r1, #0
 800491a:	b096      	sub	sp, #88	@ 0x58
 800491c:	4615      	mov	r5, r2
 800491e:	461e      	mov	r6, r3
 8004920:	da0d      	bge.n	800493e <__swhatbuf_r+0x2e>
 8004922:	89a3      	ldrh	r3, [r4, #12]
 8004924:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004928:	f04f 0100 	mov.w	r1, #0
 800492c:	bf14      	ite	ne
 800492e:	2340      	movne	r3, #64	@ 0x40
 8004930:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004934:	2000      	movs	r0, #0
 8004936:	6031      	str	r1, [r6, #0]
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	b016      	add	sp, #88	@ 0x58
 800493c:	bd70      	pop	{r4, r5, r6, pc}
 800493e:	466a      	mov	r2, sp
 8004940:	f000 f848 	bl	80049d4 <_fstat_r>
 8004944:	2800      	cmp	r0, #0
 8004946:	dbec      	blt.n	8004922 <__swhatbuf_r+0x12>
 8004948:	9901      	ldr	r1, [sp, #4]
 800494a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800494e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004952:	4259      	negs	r1, r3
 8004954:	4159      	adcs	r1, r3
 8004956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800495a:	e7eb      	b.n	8004934 <__swhatbuf_r+0x24>

0800495c <__smakebuf_r>:
 800495c:	898b      	ldrh	r3, [r1, #12]
 800495e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004960:	079d      	lsls	r5, r3, #30
 8004962:	4606      	mov	r6, r0
 8004964:	460c      	mov	r4, r1
 8004966:	d507      	bpl.n	8004978 <__smakebuf_r+0x1c>
 8004968:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800496c:	6023      	str	r3, [r4, #0]
 800496e:	6123      	str	r3, [r4, #16]
 8004970:	2301      	movs	r3, #1
 8004972:	6163      	str	r3, [r4, #20]
 8004974:	b003      	add	sp, #12
 8004976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004978:	ab01      	add	r3, sp, #4
 800497a:	466a      	mov	r2, sp
 800497c:	f7ff ffc8 	bl	8004910 <__swhatbuf_r>
 8004980:	9f00      	ldr	r7, [sp, #0]
 8004982:	4605      	mov	r5, r0
 8004984:	4639      	mov	r1, r7
 8004986:	4630      	mov	r0, r6
 8004988:	f7ff fbbc 	bl	8004104 <_malloc_r>
 800498c:	b948      	cbnz	r0, 80049a2 <__smakebuf_r+0x46>
 800498e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004992:	059a      	lsls	r2, r3, #22
 8004994:	d4ee      	bmi.n	8004974 <__smakebuf_r+0x18>
 8004996:	f023 0303 	bic.w	r3, r3, #3
 800499a:	f043 0302 	orr.w	r3, r3, #2
 800499e:	81a3      	strh	r3, [r4, #12]
 80049a0:	e7e2      	b.n	8004968 <__smakebuf_r+0xc>
 80049a2:	89a3      	ldrh	r3, [r4, #12]
 80049a4:	6020      	str	r0, [r4, #0]
 80049a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	9b01      	ldr	r3, [sp, #4]
 80049ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80049b2:	b15b      	cbz	r3, 80049cc <__smakebuf_r+0x70>
 80049b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80049b8:	4630      	mov	r0, r6
 80049ba:	f000 f81d 	bl	80049f8 <_isatty_r>
 80049be:	b128      	cbz	r0, 80049cc <__smakebuf_r+0x70>
 80049c0:	89a3      	ldrh	r3, [r4, #12]
 80049c2:	f023 0303 	bic.w	r3, r3, #3
 80049c6:	f043 0301 	orr.w	r3, r3, #1
 80049ca:	81a3      	strh	r3, [r4, #12]
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	431d      	orrs	r5, r3
 80049d0:	81a5      	strh	r5, [r4, #12]
 80049d2:	e7cf      	b.n	8004974 <__smakebuf_r+0x18>

080049d4 <_fstat_r>:
 80049d4:	b538      	push	{r3, r4, r5, lr}
 80049d6:	4d07      	ldr	r5, [pc, #28]	@ (80049f4 <_fstat_r+0x20>)
 80049d8:	2300      	movs	r3, #0
 80049da:	4604      	mov	r4, r0
 80049dc:	4608      	mov	r0, r1
 80049de:	4611      	mov	r1, r2
 80049e0:	602b      	str	r3, [r5, #0]
 80049e2:	f7fc f8c9 	bl	8000b78 <_fstat>
 80049e6:	1c43      	adds	r3, r0, #1
 80049e8:	d102      	bne.n	80049f0 <_fstat_r+0x1c>
 80049ea:	682b      	ldr	r3, [r5, #0]
 80049ec:	b103      	cbz	r3, 80049f0 <_fstat_r+0x1c>
 80049ee:	6023      	str	r3, [r4, #0]
 80049f0:	bd38      	pop	{r3, r4, r5, pc}
 80049f2:	bf00      	nop
 80049f4:	20000274 	.word	0x20000274

080049f8 <_isatty_r>:
 80049f8:	b538      	push	{r3, r4, r5, lr}
 80049fa:	4d06      	ldr	r5, [pc, #24]	@ (8004a14 <_isatty_r+0x1c>)
 80049fc:	2300      	movs	r3, #0
 80049fe:	4604      	mov	r4, r0
 8004a00:	4608      	mov	r0, r1
 8004a02:	602b      	str	r3, [r5, #0]
 8004a04:	f7fc f8c8 	bl	8000b98 <_isatty>
 8004a08:	1c43      	adds	r3, r0, #1
 8004a0a:	d102      	bne.n	8004a12 <_isatty_r+0x1a>
 8004a0c:	682b      	ldr	r3, [r5, #0]
 8004a0e:	b103      	cbz	r3, 8004a12 <_isatty_r+0x1a>
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000274 	.word	0x20000274

08004a18 <_sbrk_r>:
 8004a18:	b538      	push	{r3, r4, r5, lr}
 8004a1a:	4d06      	ldr	r5, [pc, #24]	@ (8004a34 <_sbrk_r+0x1c>)
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	4604      	mov	r4, r0
 8004a20:	4608      	mov	r0, r1
 8004a22:	602b      	str	r3, [r5, #0]
 8004a24:	f7fc f8d0 	bl	8000bc8 <_sbrk>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d102      	bne.n	8004a32 <_sbrk_r+0x1a>
 8004a2c:	682b      	ldr	r3, [r5, #0]
 8004a2e:	b103      	cbz	r3, 8004a32 <_sbrk_r+0x1a>
 8004a30:	6023      	str	r3, [r4, #0]
 8004a32:	bd38      	pop	{r3, r4, r5, pc}
 8004a34:	20000274 	.word	0x20000274

08004a38 <_init>:
 8004a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3a:	bf00      	nop
 8004a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a3e:	bc08      	pop	{r3}
 8004a40:	469e      	mov	lr, r3
 8004a42:	4770      	bx	lr

08004a44 <_fini>:
 8004a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a46:	bf00      	nop
 8004a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4a:	bc08      	pop	{r3}
 8004a4c:	469e      	mov	lr, r3
 8004a4e:	4770      	bx	lr
